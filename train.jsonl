{"id": 1, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar to_alpha(int num) {\n    return num + 'A';\n}\n\nint from_alpha(char ch) {\n    return ch - 'A';\n}\n\nvoid process_encode(const char *num_str) {\n    int num = atoi(num_str); // convert string to integer\n    if (num == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n    char result[211];\n    int index = 0;\n\n    while (num > 0) {\n        result[index++] = to_alpha(num % 9);\n        num /= 9;\n    }\n    result[index] = '\\0';\n\n    for (int i = 0; i < index / 2; ++i) {\n        char temp = result[i];\n        result[i] = result[index - i - 1];\n        result[index - i - 1] = temp;\n    }\n    printf(\"%s\\n\", result);\n}\n\nvoid process_decode(const char *input) {\n    int result = 0;\n    while (*input) {\n        result = result * 9 + from_alpha(*input++);\n    }\n    printf(\"%d\\n\", result);\n}\n\nvoid process_align(const char *input) {\n    int len = strlen(input);\n    char align_value[31];\n    char original_value[31];\n\n    for (int i = 0; i < len; ++i) {\n        int digit = from_alpha(input[i]);\n        align_value[i] = to_alpha((8 - digit) % 9); // Calculate the required digit\n        original_value[i] = input[i];\n    }\n    align_value[len] = '\\0';\n    original_value[len] = '\\0';\n\n    printf(\"%s + %s = \", original_value, align_value);\n    for (int i = 0; i < len; i++) {\n        printf(\"H\"); // Result should output all 'H'\n    }\n    printf(\"\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        printf(\"Usage: %s {encode|decode|align} {value}\\n\", argv[0]);\n        return 1;\n    }\n\n    if (strcmp(argv[1], \"encode\") == 0) {\n        process_encode(argv[2]);\n    } else if (strcmp(argv[1], \"decode\") == 0) {\n        process_decode(argv[2]);\n    } else if (strcmp(argv[1], \"align\") == 0) {\n        process_align(argv[2]);\n    } else {\n        printf(\"Invalid command\\n\");\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 2, "is_generated": true, "language": "Python3", "code": "import sys\n\n# Define mappings as constants for better readability\nCHAR_TO_INT = {chr(ord('A') + i): i for i in range(9)}\nINT_TO_CHAR = {i: chr(ord('A') + i) for i in range(9)}\n\ndef decode_string(s):\n    value = 0\n    for char in s:\n        value = value * 9 + CHAR_TO_INT[char]\n    return value\n\ndef encode_number(n):\n    if n == 0:\n        return 'A'\n    \n    chars = []\n    while n > 0:\n        n, remainder = divmod(n, 9)\n        chars.append(INT_TO_CHAR[remainder])\n    \n    return \"\".join(reversed(chars))\n\ndef align_string(s):\n    x_val = decode_string(s)\n    \n    num_digits = len(s)\n    z_str = 'H' * num_digits\n    z_val = decode_string(z_str)\n    \n    if z_val < x_val:\n        num_digits += 1\n        z_str = 'H' * num_digits\n        z_val = decode_string(z_str)\n        \n    y_val = z_val - x_val\n    y_str = encode_number(y_val)\n    \n    print(f\"{s} + {y_str} = {z_str}\")\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    operation, argument = argv[0], argv[1]\n\n    if operation == 'decode':\n        print(decode_string(argument))\n    elif operation == 'encode':\n        print(encode_number(int(argument)))\n    elif operation == 'align':\n        align_string(argument)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 3, "is_generated": true, "language": "Java", "code": "public class AlphaNumberProcessor {\n  public static void main(String[] args) {\n    String cmd = args[0];\n    String val = args[1];\n    if (\"encode\".equals(cmd)) {\n      long num = Long.parseLong(val);\n      System.out.println(toAlpha(num));\n    } else if (\"decode\".equals(cmd)) {\n      System.out.println(toDecimal(val));\n    } else if (\"align\".equals(cmd)) {\n      String res = alignToH(val);\n      System.out.println(val + \" + \" + res + \" = \" + repeatH(val.length()));\n    }\n  }\n\n  static String toAlpha(long n) {\n    if (n == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (n > 0) {\n      sb.append((char)('A' + (int)(n % 9)));\n      n /= 9;\n    }\n    return sb.reverse().toString();\n  }\n\n  static long toDecimal(String s) {\n    long res = 0;\n    for (int i = 0; i < s.length(); i++){\n      res = res * 9 + (s.charAt(i) - 'A');\n    }\n    return res;\n  }\n\n  static String alignToH(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(char c : s.toCharArray()) {\n      int n = c - 'A';\n      sb.append((char)('A' + 7 - n));\n    }\n    return sb.toString();\n  }\n\n  static String repeatH(int size) {\n    StringBuilder sb = new StringBuilder();\n    for(int i=0; i<size; i++) sb.append('H');\n    return sb.toString();\n  }\n}"}
{"id": 4, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nint char_to_val(char c) {\n    return c - 'A';\n}\n\nchar val_to_char(int v) {\n    return 'A' + v;\n}\n\n// big int multiply and add for decode\nvoid decode(char *s) {\n    int res[1000] = {0};\n    int len = 1;\n    int slen = strlen(s);\n\n    for(int i = 0; i < slen; i++) {\n        int d = char_to_val(s[i]);\n        int carry = d;\n        for(int j = 0; j < len; j++) {\n            int val = res[j] * 9 + carry;\n            res[j] = val % 10;\n            carry = val / 10;\n        }\n        while(carry > 0) {\n            res[len++] = carry % 10;\n            carry /=10;\n        }\n    }\n    for(int i = len -1; i >= 0; i--) printf(\"%d\", res[i]);\n    printf(\"\\n\");\n}\n\n// big int divide by 9 for encode\nvoid encode(char *dec) {\n    int len = strlen(dec);\n    int digits[1000];\n    for(int i = 0; i < len; i++) digits[i] = dec[len - 1 - i] - '0';\n    int dl = len;\n\n    if(dl == 1 && digits[0] == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n\n    char res[220];\n    int rlen = 0;\n    while(dl > 0) {\n        int rem = 0;\n        for(int i = dl - 1; i >= 0; i--) {\n            int num = rem * 10 + digits[i];\n            digits[i] = num / 9;\n            rem = num % 9;\n        }\n        res[rlen++] = val_to_char(rem);\n        while(dl > 0 && digits[dl - 1] == 0) dl--;\n    }\n    for(int i = rlen - 1; i >= 0; i--) putchar(res[i]);\n    putchar('\\n');\n}\n\n// align addition\nvoid align(char *s) {\n    int len = strlen(s);\n    char add[35];\n    for(int i = 0; i < len; i++) {\n        int d = char_to_val(s[len - 1 - i]);\n        int x = 7 - d;\n        if (x < 0) x += 9;\n        add[len - 1 - i] = val_to_char(x);\n    }\n    add[len] = '\\0';\n    printf(\"%s + %s = \", s, add);\n    for(int i = 0; i < len; i++) putchar('H');\n    printf(\"\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    if(argc != 3) return 1;\n    if(strcmp(argv[1], \"encode\") == 0) encode(argv[2]);\n    else if(strcmp(argv[1], \"decode\") == 0) decode(argv[2]);\n    else if(strcmp(argv[1], \"align\") == 0) align(argv[2]);\n    return 0;\n}"}
{"id": 5, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decimal_to_alpha(number):\n    # 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n    # number\u306fint\u578b\n    number = int(number)\n    \n    # \u6570\u5b57\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4f55\u306b\u5bfe\u5fdc\u3059\u308b\u304b\u3092\u8868\u3059\u8f9e\u66f8\n    num_to_alpha = {0:'A',\n                    1:'B',\n                    2:'C',\n                    3:'D',\n                    4:'E',\n                    5:'F',\n                    6:'G',\n                    7:'H',\n                    8:'I'}\n    \n    # \u672b\u5c3e\u4e00\u6841\u3060\u3051\u5148\u306b\u8a08\u7b97\n    amari = number % 9\n    sho = int(number/9)\n    \n    answer = num_to_alpha[amari]\n    \n    while sho > 0:\n        \n        amari = sho%9\n        sho = int(sho/9)\n        \n        answer = num_to_alpha[amari] + answer\n        \n    \n    return answer\n\ndef alpha_to_decimal(string):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n    \n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u6570\u5b57\u306e\u4f55\u306b\u5bfe\u5fdc\u3059\u308b\u304b\u3092\u8868\u3059\u8f9e\u66f8\n    num_to_alpha = {'A':0,\n                    'B':1,\n                    'C':2,\n                    'D':3,\n                    'E':4,\n                    'F':5,\n                    'G':6,\n                    'H':7,\n                    'I':8}\n    \n    length = len(string)\n    \n    answer = 0\n    \n    for i in string:\n        \n        answer += (9**(length-1))*num_to_alpha[i]\n        length -= 1\n    \n    return answer\n\ndef all_H(string):\n    # string\u3068\u52a0\u7b97\u3057\u3066\uff0c\u5168\u3066\u306e\u6570\u5b57\u304cH\u3068\u306a\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\n    \n    # target_num\n    if string[0] == 'I':\n        \n        target_num = 'H'*(len(string)+1)\n        \n    else:\n        \n        target_num = 'H'*len(string)\n        \n    dec_string = alpha_to_decimal(string)\n    dec_target = alpha_to_decimal(target_num)\n    \n    answer = decimal_to_alpha(dec_target - dec_string)\n    \n    print(f'{string} + {answer} = {target_num}')\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if argv[1] == 'decode':\n\n      print(alpha_to_decimal(argv[2]))\n\n    elif argv[1] == 'encode':\n\n      print(decimal_to_alpha(argv[2]))\n\n    else:\n\n      all_H(argv[2])\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 6, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n  com = argv[0]\n  Key = argv[1]\n\n  if com == \"decode\":\n    Deco(Key)\n  elif com == \"encode\":\n    Enco(Key)\n  \ndef Deco(Key):\n  Al = list(Key)\n  Al.reverse()\n  sumDe = 0\n  for i in range(len(Al)):\n    sumDe += 9 ** i  * AtoN(Al[i])\n  print(sumDe)\n\ndef Enco(Key):\n  num = int(Key)\n  numlist = [] if num != 0 else [0]\n  while num > 0:\n    numlist.append(num % 9)\n    num //= 9\n  numlist.reverse()\n  Al = \"\"\n  for i in range(len(numlist)):\n    Al += str(NtoA(numlist[i]))\n  \n  print(Al)\n  \n\n\ndef AtoN(a):\n  l = {\"A\":0, \"B\":1, \"C\":2, \"D\":3, \"E\":4, \"F\":5, \"G\":6, \"H\":7, \"I\":8}\n  return l[a]\n\ndef NtoA(num):  \n  l = {0:\"A\", 1:\"B\", 2:\"C\", 3:\"D\", 4:\"E\", 5:\"F\", 6:\"G\", 7:\"H\", 8:\"I\"}\n  return l[num]\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 7, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid encode(const char *digits10) {\n  char res[220];\n  int reslen = 0;\n  int num[220], nlen = 0;\n  int i, j;\n\n  int dlen = strlen(digits10);\n  for (i = dlen-1; i >=0; --i) num[nlen++] = digits10[i] - '0';\n  if (nlen==1 && num[0]==0) {puts(\"A\"); return;}\n\n  while (nlen) {\n    int carry = 0;\n    for (i = nlen-1; i>=0; --i) {\n      int val = carry*10 + num[i];\n      num[i] = val/9;\n      carry = val%9;\n    }\n    res[reslen++] = 'A'+carry;\n    for (;nlen>0 && num[nlen-1]==0;--nlen);\n  }\n  for (i = reslen-1; i>=0; --i) putchar(res[i]); putchar('\\n');\n}\n\nvoid decode(const char *as) {\n  int out[230]={0}, olen=1;\n  for (int i = 0; as[i]; ++i) {\n    int val = as[i]-'A';\n    int carry = val;\n    for (int j=0; j<olen; ++j) {\n      int v=out[j]*9+carry;\n      out[j]=v%10; carry=v/10;\n    }\n    while (carry) {out[olen++]=carry%10; carry/=10;}\n  }\n  for (int i=olen-1;i>=0;--i) printf(\"%d\",out[i]);\n  putchar('\\n');\n}\n\nvoid align(const char *as) {\n  int len=strlen(as);\n  char x[40];\n  for(int i=0;i<len;++i)\n    x[i]='A'+((7-(as[i]-'A')+9)%9);\n  x[len]='\\0';\n  printf(\"%s + %s = \",as,x);\n  for(int i=0;i<len;++i) putchar('H');\n  putchar('\\n');\n}\n\nint main(int argc, char *argv[]) {\n  if(argc<3)return 1;\n  if(strcmp(argv[1],\"encode\")==0) encode(argv[2]);\n  else if(strcmp(argv[1],\"decode\")==0) decode(argv[2]);\n  else if(strcmp(argv[1],\"align\")==0) align(argv[2]);\n  return 0;\n}"}
{"id": 8, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n  // \u6307\u5b9a\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u219210\u9032\n  static BigInteger toDec(String s) {\n    BigInteger ret = BigInteger.ZERO;\n    for (char c : s.toCharArray()) {\n      ret = ret.multiply(BigInteger.valueOf(9))\n               .add(BigInteger.valueOf(c - 'A'));\n    }\n    return ret;\n  }\n\n  // 10\u9032\u2192\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\n  static String toAlpha(BigInteger num) {\n    if (num.equals(BigInteger.ZERO)) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (num.compareTo(BigInteger.ZERO) > 0) {\n      sb.append((char)('A' + num.mod(BigInteger.valueOf(9)).intValue()));\n      num = num.divide(BigInteger.valueOf(9));\n    }\n    return sb.reverse().toString();\n  }\n\n  static String alignStr(String s) {\n    StringBuilder add = new StringBuilder();\n    StringBuilder sum = new StringBuilder();\n    for (int i = 0; i < s.length(); ++i) {\n      int d = s.charAt(i) - 'A';\n      int x = (7 - d + 9) % 9;\n      add.append((char)('A' + x));\n      sum.append('H');\n    }\n    return trimA(s) + \" + \" + trimA(add.toString()) + \" = \" + trimA(sum.toString());\n  }\n\n  static String trimA(String str) {\n    int idx = 0;\n    while (idx < str.length() - 1 && str.charAt(idx) == 'A') idx++;\n    return str.substring(idx);\n  }\n\n  public static void main(String[] args) {\n    switch (args[0]) {\n      case \"encode\":\n        System.out.println(toAlpha(new BigInteger(args[1])));\n        break;\n      case \"decode\":\n        System.out.println(toDec(args[1]));\n        break;\n      case \"align\":\n        System.out.println(alignStr(args[1]));\n        break;\n    }\n  }\n}"}
{"id": 9, "is_generated": true, "language": "Python3", "code": "import sys\nimport random\n\ndef main(repeat_count):\n    # \u300c\u79e9\u300d\u3068\u300c\u5e8f\u300d\u3092\u51fa\u529b\u3057\u3001\u7279\u5b9a\u306e\u30d5\u30ec\u30fc\u30ba\u3092\u691c\u77e5\n    phrase = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\n    output_sequence = \"\"\n    \n    for _ in range(repeat_count):\n        choice = random.choice([\"\u79e9\", \"\u5e8f\"])\n        print(choice)\n        output_sequence += choice\n        \n        if phrase in output_sequence:\n            print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n            return\n    \n    print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n\nif __name__ == '__main__':\n    try:\n        upper_limit = int(sys.argv[1])\n        if 0 <= upper_limit <= 10000:\n            main(upper_limit)\n        else:\n            print(\"Argument must be between 0 and 10000.\")\n    except (IndexError, ValueError):\n        print(\"Usage: python3 your_script.py <0-10000>\")"}
{"id": 10, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n// \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3067\u8868\u3059\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\nint charToDigit(char c) {\n    return c - 'A';\n}\n\n// \u6570\u5024\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\nchar digitToChar(int n) {\n    return 'A' + n;\n}\n\n// 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\nstring encode(long long num) {\n    if (num == 0) return \"A\";\n    string result;\n    while (num > 0) {\n        result += digitToChar(num % 9);\n        num /= 9;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u30c7\u30b3\u30fc\u30c9\nlong long decode(const string &alphabetNum) {\n    long long result = 0;\n    for (char c : alphabetNum) {\n        result = result * 9 + charToDigit(c);\n    }\n    return result;\n}\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092H\u306b\u63c3\u3048\u308b\u305f\u3081\u306e\u88dc\u6570\u3092\u8a08\u7b97\u3059\u308b\nstring align(const string &alphabetNum) {\n    int n = alphabetNum.size();\n    string target(n, 'H');\n    long long current = decode(alphabetNum);\n    long long targetValue = decode(target);\n    long long complement = targetValue - current;\n    return alphabetNum + \" + \" + encode(complement) + \" = \" + target;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n\n    string command = argv[1];\n    string input = argv[2];\n\n    if (command == \"encode\") {\n        long long num = stoll(input);\n        cout << encode(num) << endl;\n    } else if (command == \"decode\") {\n        cout << decode(input) << endl;\n    } else if (command == \"align\") {\n        cout << align(input) << endl;\n    } else {\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 11, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode(num):\n    # 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\n    if num == 0:\n        return \"A\"\n    result = []\n    while num > 0:\n        result.append(chr((num % 9) + ord('A')))\n        num //= 9\n    return ''.join(reversed(result))\n\ndef decode(alpha_num):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\n    result = 0\n    for char in alpha_num:\n        result = result * 9 + (ord(char) - ord('A'))\n    return result\n\ndef align(alpha_num):\n    # \u5408\u8a08\u304cH\u306b\u306a\u308b\u3088\u3046\u306a\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092\u6c42\u3081\u308b\n    num_value = decode(alpha_num)\n    target_value = (len(alpha_num) * 8) - num_value  # H\u306f8\u306b\u76f8\u5f53\n    if target_value < 0:\n        return \"\"  # \u4e0d\u9069\u5207\u306a\u30a2\u30e9\u30a4\u30f3\u306f\u51fa\u529b\u3057\u306a\u3044\n    alignment = encode(target_value)\n    return f\"{alpha_num} + {alignment} = {'H' * len(alpha_num)}\"\n\ndef main(argv):\n    if len(argv) < 2:\n        return\n\n    command = argv[0]\n    param = argv[1]\n\n    if command == \"encode\":\n        print(encode(int(param)))\n    elif command == \"decode\":\n        print(decode(param))\n    elif command == \"align\":\n        print(align(param))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 12, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(string):\n  d_code = 0\n  for i, c in enumerate(string[::-1]):\n    d_code += (ord(c) - ord('A')) * 9 ** i\n  return d_code\ndef encode(string):\n  num = int(string)\n  e_code = []\n  if num == 0:\n    return 'A'\n  while num != 0:\n    n = num % 9\n    num = num // 9\n    e_code.append(chr(n + ord('A')))\n  return ''.join(e_code[::-1])\n\ndef align(string):\n  num = decode(string)\n  buf = num\n  en = 0\n  digit = 0\n  if num == 0:\n    return 'H'\n  while num != 0:\n    n = num % 9\n    num = num // 9\n    if n != 0:\n      en += (7 - n) * 9 ** digit\n    else:\n      en += 8 * 9 ** digit\n      num += 1\n    digit += 1\n  print(en)\n  return encode(en)\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  if argv[0] == 'decode':\n    code = decode(argv[1])\n  elif argv[0] == 'encode':\n    code = encode(argv[1])\n  elif argv[0] == 'align':\n    code = align(argv[1])\n  print(code)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 13, "is_generated": false, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  $num = $argv[0];\n  $strings = array('\u79e9','\u5e8f');\n  $result = false;\n  $target = '\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f';\n  $rand_strings = '';\n  for ($i = 0; $i < $num; $i++) {\n    $str = $strings[rand(0,1)];\n    echo $str . \"\\n\";\n    $rand_strings.= $str;\n    $last_string = substr($rand_strings, -1 * strlen($target));\n    if ($last_string == $target) {\n      echo '\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a';\n      return;\n    }\n  }\n  if (!$result) {\n    echo '\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!';\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 14, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode_alpha(nstr):\n    n = int(nstr)\n    if n == 0:\n        return 'A'\n    out = []\n    while n > 0:\n        out.append(chr(ord('A') + n % 9))\n        n //= 9\n    return ''.join(reversed(out))\n\ndef decode_alpha(alphas):\n    out = 0\n    for ch in alphas:\n        out = out * 9 + (ord(ch) - ord('A'))\n    return out\n\ndef align_alpha(alphas):\n    add_part = ''.join(chr(ord('A') + ((7 - (ord(c) - ord('A'))) % 9)) for c in alphas)\n    result = 'H' * len(alphas)\n    print(f\"{alphas} + {add_part} = {result}\")\n\ndef main(argv):\n    mode, value = argv[0], argv[1]\n    if mode == \"encode\":\n        print(encode_alpha(value))\n    elif mode == \"decode\":\n        print(decode_alpha(value))\n    elif mode == \"align\":\n        align_alpha(value)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 15, "is_generated": false, "language": "Ruby", "code": "\nclass AlphabetNum\n\n  ALPHABET_LIST = \"ABCDEFGHI\"\n\n  def initialize(arg)\n    if arg.class == String then\n      @num      = alphabet2num(arg)\n      @alphabet = arg\n    else\n      @num      = arg\n      @alphabet = num2alphabet(arg)\n    end\n  end\n\n  def alphabet2num(alphabet)\n    num = 0\n    alphabet.each_char do |c|\n      num *= ALPHABET_LIST.size\n      num += ALPHABET_LIST.index(c)\n    end\n    return num\n  end\n\n  def num2alphabet(num)\n    alphabet = \"\"\n    while num != 0\n      alphabet = ALPHABET_LIST[num % ALPHABET_LIST.size] + alphabet\n      num /= ALPHABET_LIST.size\n    end\n    return alphabet == \"\" ? ALPHABET_LIST[0] : alphabet\n  end\n\n  def alphabet\n    @alphabet\n  end\n\n  def num\n    @num\n  end\n\nend\n\nsubcommand = ARGV[0]\nargument   = ARGV[1]\nif subcommand.include?(\"decode\") then\n  puts AlphabetNum.new(argument).num\nelsif subcommand.include?(\"encode\") then\n  puts AlphabetNum.new(argument.to_i).alphabet\nelsif subcommand.include?(\"align\") then\n  arg_term   = AlphabetNum.new(argument)\n  all_H_str  = \"H\" * arg_term.alphabet.size\n  all_H_str += \"H\" unless arg_term.num <= AlphabetNum.new(all_H_str).num\n  other_term = AlphabetNum.new(AlphabetNum.new(all_H_str).num - arg_term.num)\n  puts \"#{arg_term.alphabet} + #{other_term.alphabet} = #{all_H_str}\"\nend\n"}
{"id": 16, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(i):\n  ans = ''\n  n = 0\n  i = int(i)\n  # print(i)\n  b = ['A', 'B' ,'C', 'D', 'E', 'F', 'G', 'H', 'I']\n  while(i>8):\n    t = i % 9\n    i = i // 9\n    ans = b[t] + ans\n  ans = b[i] + ans\n  return ans\n  # print(ans)\n\ndef decode(i):\n  ans = 0\n  n = 0\n  b = {'A':0, 'B':1 ,'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8}\n  for t in range(len(i)-1, -1, -1):\n    ans += 9**n*b[i[t]]\n    n += 1\n  return ans\n\n\ndef align(i):\n    base = decode(i)\n#     print(base)\n    add = ''\n    n = 0\n    ans = 0\n    b = {'A':0, 'B':1 ,'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8}\n    for t in range(len(i)-1,-1,-1):\n#         print(i[t])\n        ans += 9**n*b['H']\n        n += 1\n    ans_plus = ans + 9**n*b['H']\n#     print(ans)\n    if ans >= base:\n        add = encode(ans - base)\n        return add, encode(ans)\n    else:\n        add = encode(ans_plus - base)\n    return add, encode(ans_plus)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n  if argv[0] == 'encode':\n          print(encode(argv[1]))\n  \n  elif argv[0] == 'decode':\n          print(decode(argv[1]))\n  \n  elif argv[0] == 'align':\n      an = align(argv[1])\n      s = argv[1] + ' + ' + an[0] + ' = ' + an[1]\n      print(s)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 17, "is_generated": false, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      //System.out.println(output);\n    }\n    if(args[0].equals(\"encode\")){\n      encode(args[1]);\n    }else if(args[0].equals(\"decode\")){\n      decode(args[1]);\n    }else if(args[0].equals(\"align\")){\n      align(args[1]);\n    }else{\n      System.out.println(\"args error\");\n    }\n  }\n\n  private static void encode(String arg){\n    long dec = Long.parseLong(arg);\n    String base9 = Long.toString(dec, 9);\n    System.out.println(replace92A(base9));\n  }\n  private static void decode(String arg){\n    long base9 = Long.parseLong(replaceA29(arg), 9);\n    System.out.println(String.valueOf(base9));\n  }\n  private static void align(String arg){\n    //9999 - arg\n    //arg\u306e\u6841\u6570\u3092\u8abf\u3079\u308b\n    //\u305d\u306e\u6570\u3060\u30518888\u3092\u4e26\u3079\u308b\n    int l = arg.length();\n    long base9 = Long.parseLong(replaceA29(arg));\n    \n\n    String str8 = \"\";\n    for(int i = 0;i<l;i++){\n      str8 = str8 + \"7\";\n    }\n    long int8 = Long.parseLong(str8);\n\n    long def = 0;\n    if(int8<base9){\n      str8 = str8 + \"7\";\n      int8 = Long.parseLong(str8);\n    }\n\n    def = int8 - base9;\n    \n    System.out.println(arg + \" + \" + replace92A(String.valueOf(def)) + \" = \" + replace92A(str8));\n  }\n  private static String replace92A(String nine){\n    String a = nine.replace(\"0\", \"A\");\n    String b = a.replace(\"1\", \"B\");\n    String c = b.replace(\"2\", \"C\");\n    String d = c.replace(\"3\", \"D\");\n    String e = d.replace(\"4\", \"E\");\n    String f = e.replace(\"5\", \"F\");\n    String g = f.replace(\"6\", \"G\");\n    String h = g.replace(\"7\", \"H\");\n    String i = h.replace(\"8\", \"I\");\n    String j = i.replace(\"9\", \"I\");\n    return j;\n  }\n  private static String replaceA29(String A){\n    String a = A.replace(\"A\", \"0\");\n    String b = a.replace(\"B\", \"1\");\n    String c = b.replace(\"C\", \"2\");\n    String d = c.replace(\"D\", \"3\");\n    String e = d.replace(\"E\", \"4\");\n    String f = e.replace(\"F\", \"5\");\n    String g = f.replace(\"G\", \"6\");\n    String h = g.replace(\"H\", \"7\");\n    String i = h.replace(\"I\", \"8\");\n    return i;\n  }\n}\n"}
{"id": 18, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(number):\n    number = int(number)\n    alphabet = []\n    if number == 0:\n        alphabet.append(chr(65))\n    while number != 0:\n        number, mod = divmod(number,9)\n        alphabet.append(chr(mod+65))\n    alphabet.reverse()\n    result = \"\"\n    for i in alphabet:\n        result += i\n    return result\n\ndef decode(alphabet):\n    result = 0\n    alphabet = list(alphabet)\n    for i,j in enumerate(alphabet):\n        result += (ord(j)-65) * 9 ** (len(alphabet)-i-1)\n    return result\n\ndef align(alphabet):\n    number = decode(alphabet)\n    length = len(str(number))\n    sevens = [7*(10**i) for i in range(length)]\n    sevens = \"\"\n    for i in range(length):\n        sevens += \"H\"\n    if number <= decode(sevens):\n        return sevens, encode(decode(sevens)-number)\n    else:\n        sevens += \"H\"\n        return sevens, encode(decode(sevens)-number)\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        result = decode(argv[1])\n        print(result)\n    if argv[0] == \"encode\":\n        result = encode(argv[1])\n        print(result)\n    if argv[0] == \"align\":\n        sevens, result = align(argv[1])\n        print(\"{0} + {1} = {2}\".format(argv[1],result,sevens))\n\nif __name__ =='__main__':\n    main(sys.argv[1:])"}
{"id": 19, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n\n  static BigInteger alphaDec(String s) {\n    BigInteger res = BigInteger.ZERO;\n    for (char c : s.toCharArray()) {\n      res = res.multiply(BigInteger.valueOf(9))\n             .add(BigInteger.valueOf(c - 'A'));\n    }\n    return res;\n  }\n\n  static String decAlpha(BigInteger n) {\n    if (n.signum() == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (n.signum() > 0) {\n      sb.append((char)('A' + n.mod(BigInteger.valueOf(9)).intValue()));\n      n = n.divide(BigInteger.valueOf(9));\n    }\n    return sb.reverse().toString();\n  }\n\n  static String alignAlpha(String alpha) {\n    char[] plus = new char[alpha.length()];\n    for (int i = 0; i < alpha.length(); ++i) {\n      int d = alpha.charAt(i) - 'A';\n      plus[i] = (char)('A' + ((7 - d + 9) % 9));\n    }\n    char[] tar = new char[alpha.length()];\n    for (int i = 0; i < alpha.length(); i++) tar[i] = 'H';\n    String l = stripA(alpha), r = stripA(new String(plus)), s = stripA(new String(tar));\n    return l + \" + \" + r + \" = \" + s;\n  }\n  static String stripA(String s) {\n    int i = 0; while (i < s.length() - 1 && s.charAt(i) == 'A') i++;\n    return s.substring(i);\n  }\n\n  public static void main(String[] args) {\n    if (\"encode\".equals(args[0])) {\n      System.out.println(decAlpha(new BigInteger(args[1])));\n    } else if (\"decode\".equals(args[0])) {\n      System.out.println(alphaDec(args[1]));\n    } else if (\"align\".equals(args[0])) {\n      System.out.println(alignAlpha(args[1]));\n    }\n  }\n}"}
{"id": 20, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    \n    \n\n    \"\"\"for i, v in enumerate(argv):\n        print(\"argv[{0}]: {1}\".format(i, v))\"\"\"\n    if argv[0] == \"decode\":\n      print(decode(argv[1]))\n    elif argv[0] == \"encode\":\n      print(encode(argv[1]))\n    else :\n      print(\"Not yet\")\n\n\ndef encode(charcter):\n  num_alphabet = {\"0\":\"A\",\"1\":\"B\",\"2\":\"C\",\"3\":\"D\",\"4\":\"E\",\"5\":\"F\",\"6\":\"G\",\"7\":\"H\",\"8\":\"I\"}\n  result = \"\"\n  temp = int(charcter)\n  while temp > 0:\n    result += num_alphabet[str(temp% 9)]\n    temp = int(temp/9)\n  return result[::-1]\n\ndef decode(charcter):\n  alphabet_num = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8}\n  result = 0\n  for num,i in enumerate(charcter[::-1]):\n    result += alphabet_num[i]*9**num\n  return result\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 21, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    command = argv[0]\n    arg = argv[1]\n\n    def encodeStr(num):\n        return chr(ord(\"A\")+num)\n\n    def decodeStr(digit):\n        return ord(digit) - ord(\"A\")\n\n    def encode(dec):\n        tmp = int(dec)\n        res = []\n        if tmp == 0:\n            return \"A\"\n        while tmp != 0:\n            res.append(tmp % 9)\n            tmp //= 9\n        res_str = \"\"\n        for c in res[::-1]:\n            res_str += encodeStr(c)\n        return res_str\n\n    def decode(alp):\n        chrs = [decodeStr(c) for c in alp]\n        res = 0\n        for i, v in enumerate(chrs[::-1]):\n            res += v*(9**i)\n        return res\n\n    def align(alp):\n        representable_by_H_max = 7 * sum([9**i for i in range(len(alp))])\n        dec = decode(alp)\n        if dec > representable_by_H_max:\n            HHH = \"H\"*(len(alp)+1)\n        else:\n            HHH = \"H\"*len(alp)\n        return encode(decode(HHH) - dec), HHH\n\n    if command == \"encode\":\n        print(encode(arg))\n    elif command == \"decode\":\n        print(decode(arg))\n    elif command == \"align\":\n        res = align(arg)\n        print(arg + \" + \" + res[0] + \" = \" + res[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 22, "is_generated": false, "language": "Python3", "code": "import sys\n\nalpha = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n\ndef encode(num):\n  num = int(num)\n  out = \"\"\n\n  if num==0:\n    return(alpha[num])\n  else:\n    while num > 0:\n      out = alpha[num%9]+out\n      num = int(num/9)\n    \n    return out\n\ndef decode(string):\n\n  for x in alpha:\n    string = string.replace(x, \"{}\".format(alpha.index(x)))\n  \n  out = 0\n  for x in range(1, len(string)+1):\n    out += int(string[-x])*(9**(x-1))\n  return out\n\ndef align(string):\n  \n  num = alpha.index(string)\n  hoge = num%8\n  print(hoge)\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  if argv[0] == \"encode\":\n    print(encode(argv[1]))\n  elif argv[0] ==\"decode\":\n    print(decode(argv[1]))\n  else:\n    print(align(argv[1]))\n\n  # for i, v in enumerate(argv):\n  #   print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 23, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n// A-I\u30920-8\u306b\ninline int getNum(char c) { return c - 'A'; }\n// 0-8\u3092A-I\u306b\ninline char getChar(int v) { return v + 'A'; }\n\nstring encodeAlphaNum(const string& n) {\n  string val = n, res = \"\";\n  if(n == \"0\") return \"A\";\n  while(val != \"0\") {\n    string next = \"\";\n    int cur = 0;\n    for (auto ch : val) {\n      int d = cur*10 + (ch-'0');\n      int q = d/9, r = d%9;\n      if (!next.empty() || q) next += q+'0';\n      cur = r;\n    }\n    res += getChar(cur);\n    val = (next.empty() ? \"0\" : next);\n  }\n  reverse(res.begin(), res.end());\n  return res;\n}\n\nstring decodeAlphaNum(const string& alpha) {\n  string res = \"0\";\n  for (auto c : alpha) {\n    int d = getNum(c);\n    // res = res*9 + d\n    int carry = d;\n    string temp;\n    for (int i=res.size()-1; i>=0; --i) {\n      int prod = (res[i]-'0')*9 + carry;\n      temp += (prod%10)+'0';\n      carry = prod/10;\n    }\n    while(carry) {\n      temp += (carry%10)+'0';\n      carry /= 10;\n    }\n    reverse(temp.begin(), temp.end());\n    res = temp;\n  }\n  int idx = 0;\n  while(idx+1<(int)res.size() && res[idx]=='0') idx++;\n  return res.substr(idx);\n}\n\nstring makeAlign(const string& s) {\n  string add, result;\n  for(auto c : s) {\n    int d = getNum(c);\n    int need = (7-d+9)%9;\n    add += getChar(need);\n    result += 'H';\n  }\n  return s + \" + \" + add + \" = \" + result;\n}\n\nint main(int argc, char *argv[]) {\n  string cmd = argv[1], param = argv[2];\n  if(cmd == \"encode\") {\n    cout << encodeAlphaNum(param) << endl;\n  } else if(cmd == \"decode\") {\n    cout << decodeAlphaNum(param) << endl;\n  } else if(cmd == \"align\") {\n    cout << makeAlign(param) << endl;\n  }\n  return 0;\n}"}
{"id": 24, "is_generated": true, "language": "Java", "code": "public class AlphaNumTool {\n  public static void main(String[] args) {\n    String sub = args[0], val = args[1];\n    if (\"encode\".equals(sub)) {\n      System.out.println(encodeToAlpha(Long.parseLong(val)));\n    } else if (\"decode\".equals(sub)) {\n      System.out.println(decodeToDecimal(val));\n    } else {\n      String plus = alignValue(val);\n      System.out.println(val + \" + \" + plus + \" = \" + getHHH(val.length()));\n    }\n  }\n\n  static String encodeToAlpha(long v) {\n    if (v == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while(v > 0) {\n      int d = (int)(v % 9);\n      sb.append((char)('A' + d));\n      v /= 9;\n    }\n    return sb.reverse().toString();\n  }\n\n  static long decodeToDecimal(String s) {\n    long res = 0;\n    for (char c : s.toCharArray()) {\n      res = res * 9 + (c - 'A');\n    }\n    return res;\n  }\n\n  static String alignValue(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(char c : s.toCharArray()) {\n      sb.append((char)('A' + 7 - (c-'A')));\n    }\n    return sb.toString();\n  }\n\n  static String getHHH(int len) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<len; i++) sb.append('H');\n    return sb.toString();\n  }\n}"}
{"id": 25, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Text;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n        int limit = 0;\n        if (args.Length > 0)\n        {\n            // TryParse\u3067\u5b89\u5168\u306b\u5909\u63db\u3001\u5931\u6557\u3057\u305f\u3089limit\u306f0\u306e\u307e\u307e\n            int.TryParse(args[0], out limit);\n        }\n\n        string targetPattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n        StringBuilder history = new StringBuilder();\n        Random random = new Random();\n        bool isFound = false;\n\n        for (int i = 0; i < limit; i++)\n        {\n            // 0\u304b1\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u6587\u5b57\u3092\u6c7a\u3081\u308b\n            string character = random.Next(2) == 0 ? \"\u79e9\" : \"\u5e8f\";\n            Console.WriteLine(character);\n            history.Append(character);\n\n            // \u6587\u5b57\u5217\u306e\u5c65\u6b74\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u9577\u3055\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u3089\u30c1\u30a7\u30c3\u30af\u3059\u308b\n            if (history.Length >= targetPattern.Length)\n            {\n                if (history.ToString().EndsWith(targetPattern))\n                {\n                    Console.WriteLine(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n                    isFound = true;\n                    break;\n                }\n            }\n        }\n\n        // \u30eb\u30fc\u30d7\u3092\u5b8c\u8d70\u3057\u3066\u3082\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\n        if (!isFound)\n        {\n            Console.WriteLine(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n        }\n    }\n}"}
{"id": 26, "is_generated": true, "language": "Java", "code": "import java.math.BigInteger;\n\npublic class AlphabetBase {\n  private static final BigInteger BASE = BigInteger.valueOf(9);\n  private static final char[] DIGITS = \"ABCDEFGHI\".toCharArray();\n\n  public static String fromBigInt(BigInteger number) {\n    if (number.signum() == 0) {\n      return \"A\";\n    }\n    StringBuilder result = new StringBuilder();\n    while (number.signum() > 0) {\n      BigInteger[] divisionResult = number.divideAndRemainder(BASE);\n      number = divisionResult[0];\n      result.append(DIGITS[divisionResult[1].intValue()]);\n    }\n    return result.reverse().toString();\n  }\n\n  public static BigInteger toBigInt(String alpha) {\n    BigInteger result = BigInteger.ZERO;\n    for (int i = 0; i < alpha.length(); i++) {\n      result = result.multiply(BASE).add(BigInteger.valueOf(alpha.charAt(i) - 'A'));\n    }\n    return result;\n  }\n  \n  public static void main(String[] args) {\n    String command = args[0];\n    String param = args[1];\n\n    if (\"encode\".equals(command)) {\n      System.out.println(fromBigInt(new BigInteger(param)));\n      return;\n    }\n    \n    if (\"decode\".equals(command)) {\n      System.out.println(toBigInt(param));\n      return;\n    }\n\n    if (\"align\".equals(command)) {\n      BigInteger originalValue = toBigInt(param);\n      String targetAlpha = \"H\".repeat(param.length());\n      BigInteger targetValue = toBigInt(targetAlpha);\n\n      if (originalValue.compareTo(targetValue) > 0) {\n        targetAlpha = \"H\".repeat(param.length() + 1);\n        targetValue = toBigInt(targetAlpha);\n      }\n      \n      BigInteger neededValue = targetValue.subtract(originalValue);\n      String neededAlpha = fromBigInt(neededValue);\n\n      System.out.printf(\"%s + %s = %s\\n\", param, neededAlpha, targetAlpha);\n    }\n  }\n}"}
{"id": 27, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    alp = ['A','B','C','D','E','F','G','H','I']\n    num = ['0','1','2','3','4','5','6','7','8','9']\n\n    if argv[0] == \"decode\":\n      alpnum = argv[1]\n      for i in range(len(alp)):\n        alpnum = alpnum.replace(alp[i],num[i])\n      ansnum = Base_n_to_10(alpnum,9)\n      print(ansnum)\n    elif argv[0] == \"encode\":\n      tennum = int(argv[1])\n      tennum = Base_10_to_n(tennum,9)\n      for i in range(len(alp)):\n        tennum = tennum.replace(num[i],alp[i])\n      print(tennum)\n    elif argv[0] == \"align\":\n      alinum = argv[1]\n      alilen = len(alinum)\n      aliten = alinum\n      for i in range(len(alp)):\n        aliten = aliten.replace(alp[i],num[i])\n      aliten = Base_n_to_10(aliten,9)\n      hnum = '8'\n      if alilen>1:\n        for h in len(alilen-1):\n          hnum = hnum + '8'\n      hnumin = int(hnum)\n      ansnum = hnumin-aliten\n      ansnum = string(ansnum)\n      for i in range(len(alp)):\n        ansnum = ansnum.replace(num[i],alp[i])\n      hnum = hnum.replace(num[8],alp[8])\n\n      print(alinum + ' + ' + ansnum + ' = ' + hnum)\n      \ndef Base_n_to_10(X,n):\n    out = 0\n    for i in range(1,len(str(X))+1):\n        out += int(X[-i])*(n**(i-1))\n    return out\n\ndef Base_10_to_n(X, n):\n    X_dumy = X\n    out = ''\n    if X_dumy == 0:\n      out = '0'\n    else:\n      while X_dumy>0:\n        out = str(X_dumy%n)+out\n        X_dumy = int(X_dumy/n)\n    return out\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 28, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    alphabet_list = ['A','B','C','D','E','F','G','H','I']\n\n    def decode(alphabet_number):\n        answer = 0\n        digit = len(alphabet_number)-1\n        for alphabet in alphabet_number:\n            answer += (9 ** digit) * alphabet_list.index(alphabet)\n            digit -= 1\n        return answer\n\n    def encode(tendigits_number):\n        number = int(tendigits_number)\n        answer = []\n        while(number >= 9):\n            number,mod = divmod(number,9)\n            answer.insert(0,alphabet_list[mod])\n        answer.insert(0,alphabet_list[number])\n        return ''.join(answer)\n\n    def align(alphabet_number):\n        input_number = decode(alphabet_number)\n        answer = -1\n        alphabet_number_made_by_H = []\n        while(answer < 0):\n            alphabet_number_made_by_H.append('H')\n            answer = decode(''.join(alphabet_number_made_by_H)) - input_number    \n        return ' '.join([alphabet_number,'+',encode(answer),'=',''.join(alphabet_number_made_by_H)])\n\n    if len(argv) != 2:\n        print('invalid arguments')\n    else:\n        if argv[0] == 'decode':\n            print(decode(argv[1]))\n        elif argv[0] == 'encode':\n            print(encode(argv[1]))\n        elif argv[0] == 'align':\n            print(align(argv[1]))\n        else:\n            print('subcommand is not collect')\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 29, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_D 300\n\ntypedef struct {\n    int arr[MAX_D]; // base 9 digits\n    int len;\n} Num9;\n\nvoid num9_from_alpha(Num9 *n, const char *s) {\n    n->len = strlen(s);\n    for (int i = 0; i < n->len; i++) {\n        n->arr[i] = s[n->len - 1 - i] - 'A';\n    }\n}\n\nvoid num9_to_alpha(const Num9 *n, char *s) {\n    if (n->len == 1 && n->arr[0] == 0) {\n        strcpy(s, \"A\");\n        return;\n    }\n    int k = 0;\n    for (int i = n->len - 1; i >= 0; i--) s[k++] = n->arr[i] + 'A';\n    s[k] = '\\0';\n}\n\nvoid num9_sub(const Num9 *a, const Num9 *b, Num9 *res) {\n    res->len = a->len;\n    int borrow = 0;\n    for (int i = 0; i < a->len; i++) {\n        int d_b = (i < b->len) ? b->arr[i] : 0;\n        int diff = a->arr[i] - d_b - borrow;\n        borrow = (diff < 0);\n        if (borrow) diff += 9;\n        res->arr[i] = diff;\n    }\n    while (res->len > 1 && res->arr[res->len - 1] == 0) res->len--;\n}\n\nint num9_cmp(const Num9 *a, const Num9 *b) {\n    if (a->len != b->len) return a->len > b->len ? 1 : -1;\n    for (int i = a->len - 1; i >= 0; i--) {\n        if (a->arr[i] != b->arr[i]) return a->arr[i] > b->arr[i] ? 1 : -1;\n    }\n    return 0;\n}\n\nvoid run_decode(const char *val) {\n    char dec_num[MAX_D] = \"0\";\n    for (int i = 0; val[i]; i++) {\n        int carry = 0, len = strlen(dec_num);\n        for (int j = 0; j < len; j++) {\n            int d = (dec_num[j]-'0')*9+carry; dec_num[j]=d%10+'0'; carry=d/10;\n        }\n        while(carry > 0) dec_num[len++]=(carry%10)+'0', carry/=10;\n        carry = val[i]-'A', len = strlen(dec_num);\n        for (int j = 0; j < len && carry > 0; j++) {\n            int d=(dec_num[j]-'0')+carry; dec_num[j]=d%10+'0'; carry=d/10;\n        }\n        while(carry > 0) dec_num[len++]=(carry%10)+'0', carry/=10;\n    }\n    int len = strlen(dec_num);\n    for(int i=0;i<len/2;i++){char t=dec_num[i];dec_num[i]=dec_num[len-1-i];dec_num[len-1-i]=t;}\n    printf(\"%s\\n\", dec_num);\n}\n\nvoid run_encode(const char *val) {\n    if (strcmp(val, \"0\") == 0) { puts(\"A\"); return; }\n    char num[MAX_D], res[MAX_D] = {0};\n    strcpy(num, val);\n    int k=0;\n    while(strlen(num) > 0) {\n        char next_num[MAX_D]={0}; int next_k=0, rem=0;\n        for(int i=0; num[i]; i++) {\n            rem=rem*10+(num[i]-'0');\n            if (next_k>0 || rem/9>0) next_num[next_k++]=rem/9+'0';\n            rem%=9;\n        }\n        res[k++]=rem+'A'; strcpy(num,next_num);\n    }\n    for(int i=0;i<k/2;i++){char t=res[i];res[i]=res[k-1-i];res[k-1-i]=t;}\n    printf(\"%s\\n\", res);\n}\n\nvoid run_align(const char *val) {\n    Num9 x, z, y;\n    num9_from_alpha(&x, val);\n\n    Num9 h_comp;\n    char h_str[x.len + 2];\n    memset(h_str, 'H', x.len); h_str[x.len] = '\\0';\n    num9_from_alpha(&h_comp, h_str);\n    \n    int target_len = x.len;\n    if (num9_cmp(&x, &h_comp) > 0) target_len++;\n\n    char target_h_str[target_len + 2];\n    memset(target_h_str, 'H', target_len); target_h_str[target_len] = '\\0';\n    num9_from_alpha(&z, target_h_str);\n    \n    num9_sub(&z, &x, &y);\n    \n    char y_str[MAX_D];\n    num9_to_alpha(&y, y_str);\n    \n    printf(\"%s + %s = %s\\n\", val, y_str, target_h_str);\n}\n\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) { return 1; }\n    if (strcmp(argv[1], \"decode\") == 0) run_decode(argv[2]);\n    else if (strcmp(argv[1], \"encode\") == 0) run_encode(argv[2]);\n    else if (strcmp(argv[1], \"align\") == 0) run_align(argv[2]);\n    return 0;\n}"}
{"id": 30, "is_generated": true, "language": "Python3", "code": "import sys\nfrom functools import reduce\n\nclass AlphaNumConverter:\n    _A_TO_I = \"ABCDEFGHI\"\n    _CHAR_TO_VAL = {c: i for i, c in enumerate(_A_TO_I)}\n    _VAL_TO_CHAR = {i: c for i, c in enumerate(_A_TO_I)}\n\n    @classmethod\n    def to_dec(cls, alpha_str):\n        # convert alpha-numeric string to decimal using reduce\n        return reduce(lambda total, char: total * 9 + cls._CHAR_TO_VAL[char], alpha_str, 0)\n\n    @classmethod\n    def from_dec(cls, dec_num):\n        if dec_num == 0:\n            return 'A'\n        \n        result = \"\"\n        n = dec_num\n        while n > 0:\n            result = cls._VAL_TO_CHAR[n % 9] + result\n            n //= 9\n        return result\n\n    @classmethod\n    def perform_align(cls, base_str):\n        x_dec = cls.to_dec(base_str)\n        \n        num_chars = len(base_str)\n        while True:\n            target_str_h = 'H' * num_chars\n            target_dec = cls.to_dec(target_str_h)\n            if target_dec >= x_dec:\n                break\n            num_chars += 1\n        \n        add_dec = target_dec - x_dec\n        add_str = cls.from_dec(add_dec)\n        \n        print(f\"{base_str} + {add_str} = {target_str_h}\")\n\ndef main(args):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    \n    cmd, val = args\n    \n    if cmd == \"decode\":\n        print(AlphaNumConverter.to_dec(val))\n    elif cmd == \"encode\":\n        print(AlphaNumConverter.from_dec(int(val)))\n    elif cmd == \"align\":\n        AlphaNumConverter.perform_align(val)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 31, "is_generated": true, "language": "Java", "code": "public class AlphaNumberApp {\n  public static void main(String[] args) {\n    String cmd = args[0];\n    String param = args[1];\n    if (cmd.equals(\"decode\")) {\n      long val = decodeAlpha(param);\n      System.out.println(val);\n    } else if (cmd.equals(\"encode\")) {\n      long num = Long.parseLong(param);\n      System.out.println(encodeAlpha(num));\n    } else if (cmd.equals(\"align\")) {\n      String align = alignAlpha(param);\n      System.out.println(param + \" + \" + align + \" = \" + makeHHH(param.length()));\n    }\n  }\n\n  static long decodeAlpha(String a) {\n    long r = 0;\n    for (int i = 0; i < a.length(); i++) {\n      int v = a.charAt(i) - 'A'; // A=0 to I=8\n      r = r * 9 + v;\n    }\n    return r;\n  }\n\n  static String encodeAlpha(long n) {\n    if (n == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (n > 0) {\n      int r = (int)(n % 9);\n      sb.append((char)('A' + r));\n      n /= 9;\n    }\n    return sb.reverse().toString();\n  }\n\n  static String alignAlpha(String a) {\n    // sum digit to H=7, so add digit = 7 - digit\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<a.length(); i++) {\n      int d = a.charAt(i)-'A';\n      int add = 7 - d;\n      sb.append((char)('A'+add));\n    }\n    return sb.toString();\n  }\n\n  static String makeHHH(int length) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<length; i++) sb.append('H');\n    return sb.toString();\n  }\n}"}
{"id": 32, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode_alpha(alpha):\n    total = 0\n    for i, c in enumerate(alpha):\n        d = ord(c) - ord('A')\n        total = total * 9 + d\n    return total\n\ndef encode_alpha(number):\n    n = int(number)\n    if n == 0:\n        return \"A\"\n    buf = []\n    while n > 0:\n        buf.append(chr(ord('A') + (n % 9)))\n        n //= 9\n    buf.reverse()\n    return ''.join(buf)\n\ndef align_alpha(num):\n    add = ''\n    for c in num:\n        current = ord(c) - ord('A')\n        need = (7 - current) % 9\n        add += chr(ord('A') + need)\n    print(f\"{num} + {add} = {'H' * len(num)}\")\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        print(decode_alpha(argv[1]))\n    elif argv[0] == \"encode\":\n        print(encode_alpha(argv[1]))\n    elif argv[0] == \"align\":\n        align_alpha(argv[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 33, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_DIGITS 300\nint num1[MAX_DIGITS];\nint res[MAX_DIGITS];\n\n// \u6570\u5b57\u3092\u30af\u30ea\u30a2\u3059\u308b\nvoid clear_num(int* n) {\n    for (int i = 0; i < MAX_DIGITS; i++) {\n        n[i] = 0;\n    }\n}\n\nvoid reverse_str(char* s) {\n    int len = strlen(s);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = s[i];\n        s[i] = s[len - 1 - i];\n        s[len - 1 - i] = temp;\n    }\n}\n\nint alpha_to_int(char c) {\n    return c - 'A';\n}\n\nchar int_to_alpha(int i) {\n    return i + 'A';\n}\n\nvoid decode_logic(const char* input) {\n    clear_num(res); \n    int len = strlen(input);\n    for (int i = 0; i < len; i++) {\n        // res = res * 9\n        int carry = 0;\n        for (int j = 0; j < MAX_DIGITS; j++) {\n            int temp = res[j] * 9 + carry;\n            res[j] = temp % 10;\n            carry = temp / 10;\n        }\n        \n        // res = res + digit\n        int digit = alpha_to_int(input[i]);\n        carry = digit;\n        for (int j = 0; j < MAX_DIGITS && carry > 0; j++) {\n            int temp = res[j] + carry;\n            res[j] = temp % 10;\n            carry = temp / 10;\n        }\n    }\n\n    // Print result\n    int i = MAX_DIGITS - 1;\n    while (i > 0 && res[i] == 0) i--;\n    while (i >= 0) printf(\"%d\", res[i--]);\n    printf(\"\\n\");\n}\n\nvoid encode_logic(const char* input) {\n    if (strcmp(input, \"0\") == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n\n    clear_num(num1);\n    int len = strlen(input);\n    for (int i = 0; i < len; i++) {\n        num1[len - 1 - i] = input[i] - '0';\n    }\n\n    char result_alpha[MAX_DIGITS] = {0};\n    int k = 0;\n    \n    int is_zero = 0;\n    while (!is_zero) {\n        int remainder = 0;\n        for (int i = MAX_DIGITS - 1; i >= 0; i--) {\n            int temp = num1[i] + remainder * 10;\n            num1[i] = temp / 9;\n            remainder = temp % 9;\n        }\n        result_alpha[k++] = int_to_alpha(remainder);\n\n        is_zero = 1;\n        for (int i = 0; i < MAX_DIGITS; i++) {\n            if (num1[i] != 0) {\n                is_zero = 0;\n                break;\n            }\n        }\n    }\n    result_alpha[k] = '\\0';\n    reverse_str(result_alpha);\n    printf(\"%s\\n\", result_alpha);\n}\n\nvoid align_logic(const char* input) {\n    int len = strlen(input);\n    char h_str[MAX_DIGITS];\n    char res_str[MAX_DIGITS];\n\n    for (int i = 0; i < len; i++) h_str[i] = 'H';\n    h_str[len] = '\\0';\n\n    int need_more_digits = 0;\n    if (strcmp(input, h_str) >= 0) {\n        need_more_digits = 1;\n        len++;\n        h_str[len - 1] = 'H';\n        h_str[len] = '\\0';\n    }\n\n    int borrow = 0;\n    res_str[len] = '\\0';\n    for (int i = 0; i < len; i++) {\n        int h_digit = alpha_to_int('H');\n        int in_digit = 0;\n        if (i < strlen(input)) {\n            in_digit = alpha_to_int(input[strlen(input) - 1 - i]);\n        }\n        \n        int diff = h_digit - in_digit - borrow;\n        if (diff < 0) {\n            diff += 9;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        res_str[len - 1 - i] = int_to_alpha(diff);\n    }\n    \n    char* final_res = res_str;\n    if (strlen(final_res) > 1 && final_res[0] == 'A') {\n        final_res++;\n    }\n\n    printf(\"%s + %s = %s\\n\", input, final_res, h_str);\n}\n\n\nint main(int argc, char *argv[]) {\n  if (argc != 3) {\n    return 1;\n  }\n  char* command = argv[1];\n  char* value = argv[2];\n\n  if (strcmp(command, \"decode\") == 0) {\n    decode_logic(value);\n  } else if (strcmp(command, \"encode\") == 0) {\n    encode_logic(value);\n  } else if (strcmp(command, \"align\") == 0) {\n    align_logic(value);\n  }\n\n  return 0;\n}"}
{"id": 34, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n    public static void main(String[] args) {\n        // \u5f15\u6570\u304c2\u3064\u5fc5\u8981\u3067\u3059\n        if (args.length != 2) {\n            return;\n        }\n\n        String command = args[0];\n        String input = args[1];\n\n        switch (command) {\n            case \"encode\":\n                System.out.println(encode(input));\n                break;\n            case \"decode\":\n                System.out.println(decode(input));\n                break;\n            case \"align\":\n                System.out.println(align(input));\n                break;\n            default:\n                break;\n        }\n    }\n\n    private static String encode(String decimalStr) {\n        int decimal = Integer.parseInt(decimalStr);\n        StringBuilder result = new StringBuilder();\n        while (decimal > 0) {\n            int remainder = decimal % 9;\n            result.insert(0, (char) (remainder + 'A'));\n            decimal /= 9;\n        }\n        return result.length() > 0 ? result.toString() : \"A\"; // 0\u306fA\n    }\n\n    private static int decode(String alphabetic) {\n        int result = 0;\n        for (char ch : alphabetic.toCharArray()) {\n            result = result * 9 + (ch - 'A');\n        }\n        return result;\n    }\n\n    private static String align(String alphabetic) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : alphabetic.toCharArray()) {\n            result.append((char) ('H' - (ch - 'A')));\n        }\n        return alphabetic + \" + \" + result.toString() + \" = \" + \"H\".repeat(alphabetic.length());\n    }\n}"}
{"id": 35, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  str_to_num = {\n    \"A\":0,\n    \"B\":1,\n    \"C\":2,\n    \"D\":3,\n    \"E\":4,\n    \"F\":5,\n    \"G\":6,\n    \"H\":7,\n    \"I\":8\n  }\n    \n  num_to_str = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n  \n  if(argv[0] == \"decode\"):\n    s = argv[1]\n    n = len(s)       \n    result = 0\n    for i in range(n):\n      result += 9**(n-i-1) * str_to_num[s[i]]\n    print(result)\n    \n  elif(argv[0] == \"encode\"):\n    n = argv[1]\n    n = int(n)\n    base = 1\n    nine = 0\n    while(n>0):\n      nine = nine + ( n % 9 ) * base;\n      n = int(n / 9);\n      base = base * 10;\n    s = str(nine)\n    n = len(s)\n    result = \"\"\n    for i in range(n):\n      result += num_to_str[int(s[i])]\n    print(result)\n  \n  elif(argv[0] == \"align\"):\n    print(\"\")\n      \n        \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 36, "is_generated": false, "language": "Python3", "code": "import sys\nsys.setrecursionlimit(5000)\n\ndef Base_10_to_n(X, n):\n    if (int(X/n)):\n        return Base_10_to_n(int(X/n), n)+str(X%n)\n    return str(X%n)\n\ndef main(argv):\n  argv = sys.argv\n  if argv[1] == \"decode\":\n    ans = argv[2].translate(str.maketrans( {'A': '0', 'B': '1', 'C': '2', 'D': '3', 'E': '4', 'F': '5', 'G': '6', 'H': '7', 'I': '8'}))\n    isum = 0\n    for i in range(len(ans)):\n      isum += int(ans[i])*9**(len(ans) - i -1)\n    print(isum)\n    \n  elif argv[1] == \"encode\":\n    ans2 = Base_10_to_n(int(argv[2]),9)\n    print(ans2.translate(str.maketrans( {'0': 'A', '1': 'B', '2': 'C', '3': 'D', '4': 'E', '5': 'F', '6': 'G', '7': 'H', '8': 'I'})))\n\n  else:\n    ans = argv[2].translate(str.maketrans( {'A': 'H', 'B': 'G', 'C': 'F', 'D': 'E', 'E': 'D', 'F': 'C', 'G': 'B', 'H': 'A'}))\n    ans = ans.replace('GI', 'g')\n    ans = ans.replace('I', 'i')\n    ans = ans.replace('g', 'I')\n    ans = ans.replace('i', 'GI')\n\n\n    print(\"{} + {} = {}\".format(argv[2], ans, max(len(argv[2]),len(ans))*'H'), end = \"\")\n\n\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 37, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n  if (argc != 2) {\n    // \u5f15\u6570\u306e\u6570\u304c\u9055\u3046\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\n    return 1;\n  }\n  \n  int n = atoi(argv[1]);\n  int history[10001]; // \u3061\u3087\u3063\u3068\u591a\u3081\u306b\u78ba\u4fdd\n  int found = 0;\n\n  srand(time(NULL));\n\n  for (int i = 0; i < n; i++) {\n    int r = rand() % 2; // 0\u304b1\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\n    history[i] = r;\n\n    if (r == 0) {\n      printf(\"\u79e9\\n\");\n    } else {\n      printf(\"\u5e8f\\n\");\n    }\n\n    // 6\u6587\u5b57\u4ee5\u4e0a\u51fa\u529b\u3055\u308c\u305f\u3089\u30d1\u30bf\u30fc\u30f3\u3092\u30c1\u30a7\u30c3\u30af\n    if (i >= 5) {\n      // \u30d1\u30bf\u30fc\u30f3\u306f\u300c\u79e9\u300d\u300c\u5e8f\u300d\u300c\u79e9\u300d\u300c\u79e9\u300d\u300c\u5e8f\u300d\u300c\u79e9\u300d\n      // \u79e9=0, \u5e8f=1\n      if (history[i - 5] == 0 && history[i - 4] == 1 && history[i - 3] == 0 && history[i - 2] == 0 && history[i - 1] == 1 && history[i] == 0) {\n        found = 1;\n        break;\n      }\n    }\n  }\n\n  if (found) {\n    printf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n  } else {\n    printf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n  }\n\n  return 0;\n}"}
{"id": 38, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  alp = ['A','B','C','D','E','F','G','H','I']\n  cmd = argv[0]\n  input = argv[1]\n\n  temp = []\n  if cmd == 'decode':\n    l = len(input) - 1\n    sum = 0\n    for t in input:\n      sum += 9**l * alp.index(t)\n      l -= 1\n    print(sum)\n  \n  elif cmd == 'encode':\n    num = int(input)\n    while True:\n      temp.append(num % 9)\n      r = num//9\n      if r==0:\n        break\n      num = r\n    ans = \"\"\n    for i in temp[::-1]:\n      ans += alp[i]\n    print(ans)\n  \n  else:\n    tt = ''\n    flg = 0\n    for t in input:\n      if t == 'I':\n        tt += 'I'\n        flg = 1\n      else:\n        if flg == 1:\n          plus = 8 - alp.index(t)\n          tt += alp[plus]\n          flg = 0\n        else:\n          plus = 7 - alp.index(t)\n          tt += alp[plus]\n\n    print(f\"{input} + {tt} = {'H'*len(input)}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 39, "is_generated": false, "language": "Python3", "code": "import sys\n\nmydict = {\"A\":0, \"B\":1, \"C\":2, \"D\":3, \"E\":4, \"F\":5, \"G\":6, \"H\":7, \"I\":8}\nmydict2 = {\"0\":\"A\", \"1\":\"B\",\"2\":\"C\",\"3\":\"D\",\"4\":\"E\",\"5\":\"F\",\"6\":\"G\",\"7\":\"H\",\"8\":\"I\"}\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n  if (argv[0] == 'decode'):\n    val = 0\n    i = 0\n    char_list = list(argv[1])\n    len_s = len(argv[1])\n    for s in char_list:\n      val = val + mydict[s]*9**(len_s-i-1)\n      i = i + 1\n    print(val)\n \n  elif (argv[0] == 'encode'):\n    val2 = int(argv[1])\n    str_o = ''\n    if val2 == 0:\n      str_o = 'A'\n    else :\n      while val2 >= 1:\n        str_o = mydict2[str(val2%9)] + str_o\n        val2 = int(val2/9) \n    print(str_o)\n  \n  elif (argv[0] == 'align'):\n    val = 0\n    i = 0\n    char_list = list(argv[1])\n    len_s = len(argv[1])\n    for s in char_list:\n      val = val + mydict[s]*9**(len_s-i-1)\n      i = i + 1\n    maxv = 0\n    for ii in range(i):\n      maxv += 7**ii\n    val3 = maxv - val\n    val2 = val3\n    str_o = ''\n    if val2 == 0:\n      str_o = 'A'\n    else :\n      while val2 >= 1:\n        str_o = mydict2[str(val2%9)] + str_o\n        val2 = int(val2/9)\n    str_o_m = ''\n    if val2 == 0:\n      str_o_m = 'A'\n    else :\n      while maxv >= 1:\n        str_o_m = mydict2[str(val2%9)] + str_o_m\n        val2 = int(maxv/9)\n    print(argv[1] + ' + ' + str_o + ' = ' + str_o_m)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 40, "is_generated": true, "language": "PHP", "code": "<?php\n\nfunction decode($alphabetNum) {\n    $mapping = array_flip(range('A', 'I')); // Map A-I to 0-8\n    $decimalValue = 0;\n\n    // Calculate base-10 representation\n    for ($i = 0; $i < strlen($alphabetNum); $i++) {\n        $decimalValue = $decimalValue * 9 + $mapping[$alphabetNum[$i]];\n    }\n\n    return $decimalValue;\n}\n\nfunction encode($decimalNum) {\n    $mapping = range('A', 'I'); // Map 0-8 to A-I\n    $alphabetNum = \"\";\n\n    // Convert base-10 to base-9\n    do {\n        $remainder = $decimalNum % 9;\n        $alphabetNum = $mapping[$remainder] . $alphabetNum;\n        $decimalNum = intdiv($decimalNum, 9);\n    } while ($decimalNum > 0);\n\n    return $alphabetNum;\n}\n\nfunction align($alphabetNum) {\n    $mapping = range('A', 'I'); // Map 0-8 to A-I\n    $hValue = 7; // 'H' corresponds to 7\n    $aligned = \"\";\n    \n    for ($i = 0; $i < strlen($alphabetNum); $i++) {\n        $currentValue = $alphabetNum[$i];\n        $currentDigitValue = array_search($currentValue, $mapping);\n        $difference = $hValue - $currentDigitValue;\n\n        $aligned .= $mapping[$difference];\n    }\n\n    return $alphabetNum . \" + \" . $aligned . \" = \" . str_repeat(\"H\", strlen($alphabetNum));\n}\n\nfunction main($argc, $argv) {\n    if ($argc < 2) {\n        echo \"Usage: php app.php [command] [argument]\\n\";\n        return;\n    }\n\n    $command = $argv[1];\n    $argument = isset($argv[2]) ? $argv[2] : null;\n\n    switch ($command) {\n        case \"decode\":\n            echo decode($argument) . \"\\n\";\n            break;\n        case \"encode\":\n            echo encode((int) $argument) . \"\\n\";\n            break;\n        case \"align\":\n            echo align($argument) . \"\\n\";\n            break;\n        default:\n            echo \"Invalid command. Use 'encode', 'decode', or 'align'.\\n\";\n            break;\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 41, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode(s):\n    n = 0\n    for ch in s:\n        n = n * 9 + (ord(ch) - ord('A'))\n    return n\n\ndef encode(n):\n    if n == 0:\n        return 'A'\n    res = []\n    while n > 0:\n        res.append(chr(ord('A') + n % 9))\n        n //= 9\n    return ''.join(res[::-1])\n\ndef align(s):\n    length = len(s)\n    carry = 0\n    result = []\n    for i in range(length - 1, -1, -1):\n        d = ord(s[i]) - ord('A')\n        val = d + carry\n        if val > 7:\n            carry = 1\n            digit = 7 + 9 - val\n        else:\n            carry = 0\n            digit = 7 - val\n        result.append(chr(ord('A') + digit))\n    if carry > 0:\n        result.append('A')\n    result.reverse()\n    return ''.join(result)\n\ndef main(argv):\n    cmd, val = argv[0], argv[1]\n    if cmd == 'encode':\n        print(encode(int(val)))\n    elif cmd == 'decode':\n        print(decode(val))\n    else:\n        add = align(val)\n        print(f\"{val} + {add} = {'H'*len(val)}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 42, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n// 1\u6841\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092\u6570\u5b57\u306b\u5909\u63db\nint alpha_to_digit(char c) {\n  return c - 'A';\n}\n\n// 0~8\u306e\u6570\u5b57\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\nchar digit_to_alpha(int d) {\n  return 'A' + d;\n}\n\n// decode\u51e6\u7406\nstring decode(const string& s) {\n  // 9\u9032\u6570\u219210\u9032\u6570\n  long long res = 0;\n  for (char c : s) {\n    res = res * 9 + alpha_to_digit(c);\n  }\n  return to_string(res);\n}\n\n// encode\u51e6\u7406\nstring encode(const string& s) {\n  // 10\u9032\u6570\u21929\u9032\u6570\n  string ans;\n  // 210\u6841\u3082\u3042\u308b\u306e\u3067\u6841\u3042\u3075\u308c,\u306e\u3067string\u3067\u53d7\u3051\u53d6\u308b\n  string num = s;\n  if (num == \"0\") return \"A\";\n  while (num != \"0\") {\n    // \u5f15\u304d\u7b97\u30679\u9032\u6570\u306e\u5404\u6841\u3092\u6c42\u3081\u308b\n    int carry = 0;\n    string next;\n    for (char ch : num) {\n      int digit = carry * 10 + (ch - '0');\n      int q = digit / 9;\n      int r = digit % 9;\n      if (!next.empty() || q) next += q + '0';\n      carry = r;\n    }\n    ans += digit_to_alpha(carry);\n    num = (next.empty() ? \"0\" : next);\n  }\n  reverse(ans.begin(), ans.end());\n  return ans;\n}\n\n// align\u51e6\u7406\nstring align(const string& s) {\n  // \u5404\u6841\u30929\u9032\u6cd5\u3067\u300cH(=7)\u300d\u306b\u306a\u308b\u3088\u3046\u306a\u6570\u3092\u6c42\u3081\u308b\n  // x + y = 7\u306b\u306a\u308b\u3088\u3046\u306by\u3092\u6c7a\u3081\u308b\u3060\u3051\n  string add;\n  for (char c : s) {\n    int d = alpha_to_digit(c);\n    int y = (7 - d + 9) % 9;\n    add.push_back(digit_to_alpha(y));\n  }\n  string res = s + \" + \" + add + \" = \";\n  for (size_t i = 0; i < s.size(); ++i) res += 'H';\n  return res;\n}\n\nint main(int argc, char *argv[]) {\n  // \u30b5\u30d6\u30b3\u30de\u30f3\u30c9+\u5f15\u6570\n  if (argc != 3) return 1; // \u5f15\u65702\u3064\u5fc5\u8981\n  string cmd = argv[1];\n  string val = argv[2];\n  if (cmd == \"decode\") {\n    cout << decode(val) << endl;\n  } else if (cmd == \"encode\") {\n    cout << encode(val) << endl;\n  } else if (cmd == \"align\") {\n    cout << align(val) << endl;\n  }\n  return 0;\n}"}
{"id": 43, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h> // For 'true' in align loop\n\n// --- BigInt Structure and Helper Functions ---\n\n// Define the base for internal chunk representation (10^9 to fit within int, 10^18 for long long)\n#define CHUNK_BASE 1000000000 \n// Number of decimal digits that one CHUNK_BASE unit represents\n#define MAX_DEC_DIGITS_PER_CHUNK 9\n\n// Represents a large number as an array of integers, where each integer stores a 'chunk' of the number.\n// Chunks are stored in little-endian order (least significant chunk at index 0).\ntypedef struct {\n    int *chunks;\n    int num_chunks; // Number of chunks currently used\n    int capacity;   // Total allocated chunks\n} BigInt;\n\n// Initializes a BigInt to 0.\nvoid initBigInt(BigInt *num) {\n    num->chunks = NULL;\n    num->num_chunks = 0;\n    num->capacity = 0;\n}\n\n// Frees memory allocated for a BigInt.\nvoid freeBigInt(BigInt *num) {\n    if (num->chunks != NULL) {\n        free(num->chunks);\n        num->chunks = NULL;\n    }\n    num->num_chunks = 0;\n    num->capacity = 0;\n}\n\n// Ensures the BigInt has enough capacity for a given number of chunks.\nvoid ensureBigIntCapacity(BigInt *num, int required_capacity) {\n    if (num->capacity < required_capacity) {\n        int new_capacity = required_capacity + 4; // Add a small buffer for efficiency\n        int *new_chunks = (int *)realloc(num->chunks, new_capacity * sizeof(int));\n        if (new_chunks == NULL) {\n            fprintf(stderr, \"Memory allocation failed.\\n\");\n            exit(1);\n        }\n        num->chunks = new_chunks;\n        num->capacity = new_capacity;\n    }\n}\n\n// Removes leading zero chunks (except if the number is 0 itself).\nvoid trimBigInt(BigInt *num) {\n    while (num->num_chunks > 1 && num->chunks[num->num_chunks - 1] == 0) {\n        num->num_chunks--;\n    }\n    if (num->num_chunks == 0) { // If all chunks were zero, make it a single zero chunk\n        ensureBigIntCapacity(num, 1);\n        num->chunks[0] = 0;\n        num->num_chunks = 1;\n    }\n}\n\n// Copies one BigInt to another.\nvoid copyBigInt(const BigInt *src, BigInt *dest) {\n    ensureBigIntCapacity(dest, src->num_chunks);\n    memcpy(dest->chunks, src->chunks, src->num_chunks * sizeof(int));\n    dest->num_chunks = src->num_chunks;\n}\n\n// --- Arithmetic Operations ---\n\n// Adds two BigInts. result = a + b.\nvoid addBigInt(const BigInt *a, const BigInt *b, BigInt *result) {\n    BigInt temp_res;\n    initBigInt(&temp_res);\n    int max_chunks = (a->num_chunks > b->num_chunks ? a->num_chunks : b->num_chunks);\n    ensureBigIntCapacity(&temp_res, max_chunks + 1); // +1 for potential carry\n\n    long long carry = 0;\n    for (int i = 0; i < max_chunks || carry; i++) {\n        long long sum = carry;\n        if (i < a->num_chunks) sum += a->chunks[i];\n        if (i < b->num_chunks) sum += b->chunks[i];\n\n        temp_res.chunks[i] = sum % CHUNK_BASE;\n        carry = sum / CHUNK_BASE;\n        temp_res.num_chunks = i + 1;\n    }\n    trimBigInt(&temp_res);\n    copyBigInt(&temp_res, result);\n    freeBigInt(&temp_res);\n}\n\n// Multiplies a BigInt by an integer factor. result = a * factor.\nvoid multiplyBigIntByInt(const BigInt *a, int factor, BigInt *result) {\n    if (factor == 0) {\n        initBigInt(result);\n        ensureBigIntCapacity(result, 1);\n        result->chunks[0] = 0;\n        result->num_chunks = 1;\n        return;\n    }\n\n    BigInt temp_res;\n    initBigInt(&temp_res);\n    ensureBigIntCapacity(&temp_res, a->num_chunks + 1); // +1 for potential carry\n\n    long long carry = 0;\n    for (int i = 0; i < a->num_chunks || carry; i++) {\n        long long product = carry;\n        if (i < a->num_chunks) product += (long long)a->chunks[i] * factor;\n\n        temp_res.chunks[i] = product % CHUNK_BASE;\n        carry = product / CHUNK_BASE;\n        temp_res.num_chunks = i + 1;\n    }\n    trimBigInt(&temp_res);\n    copyBigInt(&temp_res, result);\n    freeBigInt(&temp_res);\n}\n\n// Subtracts BigInt b from BigInt a. Assumes a >= b. result = a - b.\nvoid subtractBigInt(const BigInt *a, const BigInt *b, BigInt *result) {\n    BigInt temp_res;\n    initBigInt(&temp_res);\n    ensureBigIntCapacity(&temp_res, a->num_chunks);\n\n    long long borrow = 0;\n    for (int i = 0; i < a->num_chunks; i++) {\n        long long diff = (long long)a->chunks[i] - borrow;\n        if (i < b->num_chunks) diff -= b->chunks[i];\n\n        if (diff < 0) {\n            diff += CHUNK_BASE;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        temp_res.chunks[i] = diff;\n        temp_res.num_chunks = i + 1;\n    }\n    trimBigInt(&temp_res);\n    copyBigInt(&temp_res, result);\n    freeBigInt(&temp_res);\n}\n\n// Divides a BigInt by an integer divisor. result = a / divisor, *remainder = a % divisor.\nvoid divideBigIntByInt(const BigInt *a, int divisor, BigInt *result, int *remainder) {\n    if (divisor == 0) {\n        fprintf(stderr, \"Division by zero.\\n\");\n        exit(1);\n    }\n    if (a->num_chunks == 1 && a->chunks[0] == 0) { // If dividend is 0\n        initBigInt(result);\n        ensureBigIntCapacity(result, 1);\n        result->chunks[0] = 0;\n        result->num_chunks = 1;\n        *remainder = 0;\n        return;\n    }\n\n    BigInt temp_res;\n    initBigInt(&temp_res);\n    ensureBigIntCapacity(&temp_res, a->num_chunks); // Quotient won't have more chunks than dividend\n\n    long long current_val = 0;\n    // Iterate from most significant chunk to least significant (standard long division algorithm)\n    for (int i = a->num_chunks - 1; i >= 0; i--) {\n        current_val = current_val * CHUNK_BASE + a->chunks[i];\n        temp_res.chunks[i] = current_val / divisor;\n        current_val %= divisor;\n    }\n    *remainder = (int)current_val;\n\n    // Adjust num_chunks for result\n    temp_res.num_chunks = a->num_chunks;\n    trimBigInt(&temp_res);\n    copyBigInt(&temp_res, result);\n    freeBigInt(&temp_res);\n}\n\n// Compares two BigInts. Returns -1 if a < b, 0 if a == b, 1 if a > b.\nint compareBigInt(const BigInt *a, const BigInt *b) {\n    if (a->num_chunks > b->num_chunks) return 1;\n    if (a->num_chunks < b->num_chunks) return -1;\n\n    for (int i = a->num_chunks - 1; i >= 0; i--) { // Compare from most significant chunk\n        if (a->chunks[i] > b->chunks[i]) return 1;\n        if (a->chunks[i] < b->chunks[i]) return -1;\n    }\n    return 0; // Numbers are equal\n}\n\n// --- Conversion Functions ---\n\n// Converts a decimal string to a BigInt.\nvoid decimalStringToBigInt(const char *str, BigInt *num) {\n    initBigInt(num);\n    int len = strlen(str);\n    if (len == 0 || (len == 1 && str[0] == '0')) {\n        ensureBigIntCapacity(num, 1);\n        num->chunks[0] = 0;\n        num->num_chunks = 1;\n        return;\n    }\n\n    // Allocate initial capacity (rough estimate based on decimal digits to base-CHUNK_BASE conversion)\n    ensureBigIntCapacity(num, len / MAX_DEC_DIGITS_PER_CHUNK + 2);\n    num->chunks[0] = 0; // Start with zero\n    num->num_chunks = 1;\n\n    BigInt temp_val;\n    initBigInt(&temp_val); // Temporary BigInt for intermediate results\n\n    // Use Horner's method: num = num * 10 + digit\n    for (int i = 0; i < len; i++) {\n        int digit = str[i] - '0';\n        \n        // Multiply current number by 10\n        multiplyBigIntByInt(num, 10, &temp_val);\n        copyBigInt(&temp_val, num);\n\n        // Add the current digit\n        BigInt digit_bi;\n        initBigInt(&digit_bi);\n        ensureBigIntCapacity(&digit_bi, 1);\n        digit_bi.chunks[0] = digit;\n        digit_bi.num_chunks = 1;\n        \n        addBigInt(num, &digit_bi, &temp_val);\n        copyBigInt(&temp_val, num);\n\n        freeBigInt(&digit_bi);\n    }\n    freeBigInt(&temp_val);\n    trimBigInt(num);\n}\n\n\n// Converts a BigInt to a decimal string.\nvoid bigIntToDecimalString(const BigInt *num, char *str) {\n    if (num->num_chunks == 1 && num->chunks[0] == 0) {\n        strcpy(str, \"0\");\n        return;\n    }\n\n    BigInt temp_num;\n    copyBigInt(num, &temp_num); // Work on a copy as division modifies the number\n\n    char buffer[220]; // Max 210 alphabet digits -> approx 200 decimal digits + null terminator + safety\n    int idx = 0;\n\n    BigInt quotient;\n    int remainder;\n    BigInt zero_val;\n    initBigInt(&zero_val);\n    ensureBigIntCapacity(&zero_val, 1);\n    zero_val.chunks[0] = 0;\n    zero_val.num_chunks = 1;\n\n    // Repeatedly divide by 10 and record remainders (digits)\n    while (compareBigInt(&temp_num, &zero_val) > 0) {\n        divideBigIntByInt(&temp_num, 10, &quotient, &remainder);\n        buffer[idx++] = remainder + '0';\n        copyBigInt(&quotient, &temp_num); // Update temp_num with the quotient\n    }\n    buffer[idx] = '\\0';\n\n    // Digits are collected in reverse order, so reverse the string\n    int len = idx;\n    for (int i = 0; i < len / 2; i++) {\n        char c = buffer[i];\n        buffer[i] = buffer[len - 1 - i];\n        buffer[len - 1 - i] = c;\n    }\n    strcpy(str, buffer);\n\n    freeBigInt(&temp_num);\n    freeBigInt(&quotient);\n    freeBigInt(&zero_val);\n}\n\n// Converts an alphabet number string to a BigInt (decimal value).\n// 'A'->0, 'B'->1, ..., 'I'->8 (Base 9 conversion to internal decimal value)\nvoid alphabetToBigInt(const char *alphanum_str, BigInt *num) {\n    initBigInt(num);\n    ensureBigIntCapacity(num, 1);\n    num->chunks[0] = 0;\n    num->num_chunks = 1; // Initialize to 0\n\n    BigInt temp_val;\n    initBigInt(&temp_val);\n\n    // Use Horner's method: num = num * 9 + digit\n    for (int i = 0; i < strlen(alphanum_str); i++) {\n        int digit = alphanum_str[i] - 'A'; // Get numerical value (0-8)\n        \n        // Multiply current number by 9\n        multiplyBigIntByInt(num, 9, &temp_val);\n        copyBigInt(&temp_val, num);\n\n        // Add the current digit\n        BigInt digit_bi;\n        initBigInt(&digit_bi);\n        ensureBigIntCapacity(&digit_bi, 1);\n        digit_bi.chunks[0] = digit;\n        digit_bi.num_chunks = 1;\n\n        addBigInt(num, &digit_bi, &temp_val);\n        copyBigInt(&temp_val, num);\n\n        freeBigInt(&digit_bi);\n    }\n    freeBigInt(&temp_val);\n    trimBigInt(num);\n}\n\n// Converts a BigInt (decimal value) to an alphabet number string.\n// (Base 9 conversion from internal decimal value)\nvoid bigIntToAlphabet(const BigInt *num, char *alphanum_str) {\n    if (num->num_chunks == 1 && num->chunks[0] == 0) {\n        strcpy(alphanum_str, \"A\");\n        return;\n    }\n\n    BigInt temp_num;\n    copyBigInt(num, &temp_num);\n\n    char buffer[220]; // Max 210 alphabet digits + null terminator + safety\n    int idx = 0;\n\n    BigInt quotient;\n    int remainder;\n    BigInt zero_val;\n    initBigInt(&zero_val);\n    ensureBigIntCapacity(&zero_val, 1);\n    zero_val.chunks[0] = 0;\n    zero_val.num_chunks = 1;\n\n    // Repeatedly divide by 9 and record remainders (alphabet digits)\n    while (compareBigInt(&temp_num, &zero_val) > 0) {\n        divideBigIntByInt(&temp_num, 9, &quotient, &remainder);\n        buffer[idx++] = remainder + 'A';\n        copyBigInt(&quotient, &temp_num);\n    }\n    buffer[idx] = '\\0';\n\n    // Digits are collected in reverse order, so reverse the string\n    int len = idx;\n    for (int i = 0; i < len / 2; i++) {\n        char c = buffer[i];\n        buffer[i] = buffer[len - 1 - i];\n        buffer[len - 1 - i] = c;\n    }\n    strcpy(alphanum_str, buffer);\n\n    freeBigInt(&temp_num);\n    freeBigInt(&quotient);\n    freeBigInt(&zero_val);\n}\n\n\n// --- Main Logic Functions for Subcommands ---\n\nvoid do_decode(const char *alphanum_str) {\n    BigInt decoded_val;\n    alphabetToBigInt(alphanum_str, &decoded_val);\n\n    char result_str[250]; // Buffer for decimal string output\n    bigIntToDecimalString(&decoded_val, result_str);\n    printf(\"%s\\n\", result_str);\n\n    freeBigInt(&decoded_val);\n}\n\nvoid do_encode(const char *decimal_str) {\n    BigInt decimal_val;\n    decimalStringToBigInt(decimal_str, &decimal_val);\n\n    char result_str[220]; // Buffer for alphabet string output\n    bigIntToAlphabet(&decimal_val, result_str);\n    printf(\"%s\\n\", result_str);\n\n    freeBigInt(&decimal_val);\n}\n\nvoid do_align(const char *alphanum_str) {\n    BigInt x_val;\n    alphabetToBigInt(alphanum_str, &x_val);\n\n    BigInt target_h_val;\n    char target_h_str_buffer[50]; // Buffer for the target 'H' string\n    int target_len = strlen(alphanum_str);\n    \n    // Find the smallest 'H...H' number (composed of only 'H's, which is 7 in base 9)\n    // that is greater than or equal to the input alphabet number.\n    while (true) {\n        // Construct the current target 'H' string\n        for (int i = 0; i < target_len; i++) {\n            target_h_str_buffer[i] = 'H';\n        }\n        target_h_str_buffer[target_len] = '\\0';\n        \n        // Convert the target 'H' string to BigInt\n        alphabetToBigInt(target_h_str_buffer, &target_h_val);\n        \n        // If target is sufficient, break the loop\n        if (compareBigInt(&target_h_val, &x_val) >= 0) {\n            break;\n        }\n        target_len++; // Otherwise, increase length and try a larger 'H...H' string\n        freeBigInt(&target_h_val); // Free memory for the old target value before next iteration\n    }\n\n    BigInt y_val;\n    subtractBigInt(&target_h_val, &x_val, &y_val); // Calculate Y = Target - X\n\n    char y_alphanum_str[50]; // Buffer for the calculated Y in alphabet form\n    bigIntToAlphabet(&y_val, y_alphanum_str);\n    \n    printf(\"%s + %s = %s\\n\", alphanum_str, y_alphanum_str, target_h_str_buffer);\n\n    freeBigInt(&x_val);\n    freeBigInt(&target_h_val);\n    freeBigInt(&y_val);\n}\n\n\n// --- Main function for CLI application ---\n\nint main(int argc, char *argv[]) {\n  // Check for correct number of command-line arguments\n  if (argc != 3) {\n    fprintf(stderr, \"Usage: %s <command> <value>\\n\", argv[0]);\n    return 1;\n  }\n\n  const char *command = argv[1];\n  const char *value = argv[2];\n\n  // Dispatch to appropriate subcommand function\n  if (strcmp(command, \"decode\") == 0) {\n    do_decode(value);\n  } else if (strcmp(command, \"encode\") == 0) {\n    do_encode(value);\n  } else if (strcmp(command, \"align\") == 0) {\n    do_align(value);\n  } else {\n    fprintf(stderr, \"Unknown command: %s\\n\", command);\n    return 1;\n  }\n\n  return 0;\n}"}
{"id": 44, "is_generated": false, "language": "Ruby", "code": "def reference_table\n  ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\nend\n\ndef decode(value)\n  value_array = value.split('')\n  value_length = value_array.length\n  res = 0\n  value_array.each.with_index do |char, index|\n    number = reference_table.index(char)\n    res += number * (9 **  (value_length - (index + 1)))\n  end\n  res\nend\n\ndef encode(value)\n  value = value.to_i\n  numbers = Array.new\n  while true\n    numbers.unshift(value % 9)\n    value = value / 9\n    if value <= 0\n      break\n    end\n  end\n  res_array = Array.new\n  numbers.each do |number|\n    res_array.push(reference_table[number])\n  end\n  res_array.join('')\nend\n\ndef align(value)\nend\n\n\ndef main(argv)\n\n  subcommand = argv[0]\n  value = argv[1]\n\n  case subcommand\n  when 'encode' then\n    print encode(value) + \"\\n\"\n  when 'decode' then\n    p decode(value)\n  when 'align' then\n    p align(value)\n  end\n\nend\n\nmain(ARGV)\n"}
{"id": 45, "is_generated": false, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\nlet value = argv[1];\n    switch(argv[0]) {\n        case 'encode':\n            console.log(encoder(value));\n            break;\n        case 'decode' :\n            console.log(decoder(value));\n            break;\n\n        case 'align' :\n            console.log(value + ' + ' + aligner(value).substr + ' = ' + aligner(value).right);\n            break;\n    }\n\n    function encoder(value) {\n        let arr = [];\n        let ret;\n\n        while(value / 9 >= 1) {\n            arr.push(value % 9);\n            value = Number.parseInt(value / 9);\n        }\n        arr.push(value);\n        arr.reverse();\n        arr = arr.map((val) => {\n            return converter('number', val);\n        });\n        ret = arr.toString();\n        while(ret.match(',')) {\n            ret = ret.replace(',', '');\n        }\n        return ret;\n    }\n\n    function decoder(value) {\n        let len = value.length;\n        let ret = 0;\n        let arr = [];\n\n        for(let i=0; i < len; i++) {\n            arr.push(value.substr(i,1));\n        }\n        arr.forEach((val,index) => {\n            ret += converter('alphabet', val) * Math.pow(9, len - 1 - index);\n        });\n        return ret;\n    }\n\n    function aligner(value) {\n        let len = value.length;\n        let _value = decoder(value);\n        let right = '';\n        let _right;\n        let substr = 0;\n        let ret = {};\n\n        for(let i=0; i < len; i++) {\n            right += 'H';\n        }\n\n        if(value.indexOf('I') === 0) {\n            right += 'H';\n        }\n\n        _right = decoder(right);\n        substr = encoder(_right - _value);\n        ret = {\n            right: right,\n            substr: substr\n        }\n        return ret;\n    }\n\n    function converter(type, val) {\n        const list = {\n            0: 'A',\n            1: 'B',\n            2: 'C',\n            3: 'D',\n            4: 'E',\n            5: 'F',\n            6: 'G',\n            7: 'H',\n            8: 'I',\n        };\n        switch(type) {\n        case 'alphabet' :\n            let ret = Object.keys(list).reduce((acc,key) => {\n                return list[key] === val ? key : acc;\n            });\n            return ret;\n\n        case 'number' :\n            return list[val];\n        }\n    }\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 46, "is_generated": true, "language": "Java", "code": "import java.math.BigInteger;\n\npublic class App {\n  public static void main(String[] args) {\n    String command = args[0];\n    String value = args[1];\n\n    if (\"decode\".equals(command)) {\n      BigInteger decimalValue = convertToDecimal(value);\n      System.out.println(decimalValue.toString());\n    } else if (\"encode\".equals(command)) {\n      BigInteger number = new BigInteger(value);\n      String alphaValue = convertToAlphabet(number);\n      System.out.println(alphaValue);\n    } else if (\"align\".equals(command)) {\n      String originalAlpha = value;\n      BigInteger originalNumber = convertToDecimal(originalAlpha);\n\n      // find target HHH number\n      String targetAlpha = \"H\".repeat(originalAlpha.length());\n      BigInteger targetNumber = convertToDecimal(targetAlpha);\n\n      if (originalNumber.compareTo(targetNumber) > 0) {\n        targetAlpha = \"H\".repeat(originalAlpha.length() + 1);\n        targetNumber = convertToDecimal(targetAlpha);\n      }\n\n      BigInteger differenceNumber = targetNumber.subtract(originalNumber);\n      String differenceAlpha = convertToAlphabet(differenceNumber);\n\n      System.out.println(originalAlpha + \" + \" + differenceAlpha + \" = \" + targetAlpha);\n    }\n  }\n\n  private static BigInteger convertToDecimal(String alpha) {\n    BigInteger result = BigInteger.ZERO;\n    BigInteger powerOfNine = BigInteger.ONE;\n    for (int i = alpha.length() - 1; i >= 0; i--) {\n      char c = alpha.charAt(i);\n      int digit = c - 'A';\n      result = result.add(BigInteger.valueOf(digit).multiply(powerOfNine));\n      powerOfNine = powerOfNine.multiply(BigInteger.valueOf(9));\n    }\n    return result;\n  }\n\n  private static String convertToAlphabet(BigInteger number) {\n    if (number.equals(BigInteger.ZERO)) {\n      return \"A\";\n    }\n\n    StringBuilder sb = new StringBuilder();\n    BigInteger nine = BigInteger.valueOf(9);\n    while (number.compareTo(BigInteger.ZERO) > 0) {\n      BigInteger[] divAndRem = number.divideAndRemainder(nine);\n      int remainder = divAndRem[1].intValue();\n      sb.append((char) ('A' + remainder));\n      number = divAndRem[0];\n    }\n    return sb.reverse().toString();\n  }\n}"}
{"id": 47, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    i = argv[0]\n    v = argv[1]\n    if(i==\"encode\"):\n      print(encode(int(v)))\n    elif(i==\"decode\"):\n      print(decode(v))\n    elif(i==\"align\"):\n      ans,h = align(v)\n      print(\"{} + {} = {}\".format(v,ans,h))\n\n\n\ndef changes(tags,target):\n  num = [0,1,2,3,4,5,6,7,8]\n  alp = ['A','B','C','D','E','F','G','H','I']\n  if tags ==\"encode\":\n    idx = num.index(target)\n    return alp[idx]\n  if tags == \"decode\":\n    idx = alp.index(target)\n    return num[idx]\n\n\ndef encode(n):\n  ans = []\n  cnt = 0\n  a = n\n  while(a>=9):\n    cnt = cnt+1\n    ans.insert(0,a%9)\n    a = a//9\n  ans.insert(0,a)\n  alp =list(map(lambda x: changes(\"encode\",x),ans))\n  return ''.join(alp)\n\ndef decode(str):\n  ans = 0\n  rev_str = str[::-1]\n  for i in range(len(rev_str)):\n    ans += changes(\"decode\",rev_str[i])*(9**i)\n  return ans\n\ndef align(str):\n  alp = ['A','B','C','D','E','F','G','H','I','A']\n  add = ['H','G','F','E','D','C','B','A','I','A']\n  ans = [] \n  h = []\n  rev_str = str[::-1]\n  for i,char in enumerate (rev_str):\n    if char !='I':\n      idx = alp.index(char)\n      ans.insert(0,add[idx])\n      h.append(\"H\")\n    else:\n      ans.insert(0,\"I\")\n      h.append(\"H\")\n      if i+1 < len(rev_str)-1:\n        rev_str[i+1] = alp[alp.index(rev_str[i+1])+1] \n      else:\n        ans.insert(0,'G')\n        h.append(\"H\")\n  return (''.join(ans),''.join(h))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n  "}
{"id": 48, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    inp = []\n    for i, v in enumerate(argv):\n        inp.append((i,v))\n        \n    l = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n\n    if inp[0][1] == \"decode\":\n      blist = list(inp[1][1])\n      ans = 0\n      for i in range(len(blist)):\n        ans += (9**i)*(l.index(blist[-1-i]))\n      print(ans)\n\n    if inp[0][1] == \"encode\":\n      b = int(inp[1][1])\n      ans = []\n      while True:\n        if b // 9 >= 1:\n          ans.append(l[b%9])\n          b //= 9\n        elif b < 9:\n          ans.append(l[b])\n          break\n      for i in range(len(ans)):\n        print(ans[-1-i],end=\"\")\n\n    if inp[0][1] == \"align\":\n      if inp[1][1] == \"A\":\n        print(\"A + H = H\")\n        exit()\n      blist = (list(inp[1][1]))\n      left = 0\n      for i in range(len(blist)):\n        left += (9**i)*(l.index(blist[-1-i]))\n      count = 0\n      ii = 0\n      while True:\n        if left > count:\n          count += (9**ii)*7\n          ii += 1\n        else:\n          break\n      c = count-left\n      ans1 = []\n      \n      while True:\n        if c // 9 >= 1:\n          ans1.append(l[c%9])\n          c //= 9\n        elif c < 9:\n          ans1.append(l[c])\n          break\n      ans2 = []\n      while True:\n        if count // 9 >= 1:\n          ans2.append(l[count%9])\n          count //= 9\n        elif count < 9:\n          ans2.append(l[count])\n          break\n      print(inp[1][1],end=\"\")\n      print(\" + \",end=\"\")\n      for i in range(len(ans1)):\n        print(ans1[-1-i],end=\"\")\n      print(\" = \",end=\"\")\n      for i in range(len(ans2)):\n        print(ans2[-1-i],end=\"\")\n        \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 49, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef Base_10_to_n(X, n):\n    if (int(X/n)):\n        return Base_10_to_n(int(X/n), n)+str(X%n)\n    return str(X%n)\n\ndef encode(number):\n  number_base9 = Base_10_to_n(int(number),9)\n  number_string = str(number_base9)\n  list = []\n  for s in number_string:\n      hoge = chr(65+int(s))\n      list.append(hoge)\n  string = \"\".join(list)\n  return string\n\ndef decode(string):\n  number = 0\n  N = len(string)\n  i = N-1\n  for c in string:\n    number += (ord(c)-65)*pow(9,i)\n    i = i-1\n  return number\n\ndef align(string):\n  number = decode(string)\n  N = len(string)\n  H = \"H\"*N\n  H_number = decode(H)\n  if number <= H_number:\n    sa = H_number-number\n  else:\n    H = \"H\"*(N+1)\n    H_number = decode(H)\n    sa = H_number-number\n  sa_string = encode(sa)\n  return sa_string,H\n\ndef main(argv):\n  if argv[0] == \"encode\":\n    string = encode(argv[1])\n    print(string)\n  if argv[0] == \"decode\":\n    number = decode(argv[1])\n    print(number)\n  if argv[0] == \"align\":\n    list = align(argv[1])\n    ans = \"\".join([argv[1],\" \",\"+\",\" \",list[0],\" \",\"=\",\" \",list[1]])\n    print(ans)  \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 50, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n  private static final String ALPHABET = \"ABCDEFGHI\";\n\n  // 9\u9032\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570 -> 10\u9032BigInteger\n  static BigInteger alphaToDec(String alph) {\n    BigInteger res = BigInteger.ZERO;\n    for (int i = 0; i < alph.length(); i++)\n      res = res.multiply(BigInteger.valueOf(9))\n             .add(BigInteger.valueOf(ALPHABET.indexOf(alph.charAt(i))));\n    return res;\n  }\n\n  // 10\u9032BigInteger -> 9\u9032\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\n  static String decToAlpha(BigInteger n) {\n    if (n.signum() == 0) return \"A\";\n    String ans = \"\";\n    while (n.signum() > 0) {\n      ans = ALPHABET.charAt(n.mod(BigInteger.valueOf(9)).intValue()) + ans;\n      n = n.divide(BigInteger.valueOf(9));\n    }\n    return ans;\n  }\n\n  // align\u306e\u5f0f\u3092\u4f5c\u308b\n  static String align(String alph) {\n    char[] add = new char[alph.length()];\n    char[] sum = new char[alph.length()];\n    for (int i = 0; i < alph.length(); i++) {\n      int v = ALPHABET.indexOf(alph.charAt(i));\n      int d = (7 - v + 9) % 9;\n      add[i] = ALPHABET.charAt(d);\n      sum[i] = 'H';\n    }\n    String orig = stripLeadingA(alph);\n    String addv = stripLeadingA(new String(add));\n    String s = stripLeadingA(new String(sum));\n    return orig + \" + \" + addv + \" = \" + s;\n  }\n\n  static String stripLeadingA(String s) {\n    int i = 0, lim = s.length()-1;\n    while (i < lim && s.charAt(i) == 'A') i++;\n    return s.substring(i);\n  }\n\n  public static void main(String[] args) {\n    if (args.length < 2) return;\n    if (args[0].equals(\"decode\")) {\n      System.out.println(alphaToDec(args[1]));\n    } else if (args[0].equals(\"encode\")) {\n      BigInteger n = new BigInteger(args[1]);\n      System.out.println(decToAlpha(n));\n    } else if (args[0].equals(\"align\")) {\n      System.out.println(align(args[1]));\n    }\n  }\n}"}
{"id": 51, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode_number(num):\n    # Convert 10-base number to alphabet number\n    if num == 0:\n        return \"A\"\n    encoded = []\n    while num > 0:\n        encoded.append(chr((num % 9) + ord('A')))\n        num //= 9\n    return ''.join(encoded[::-1])\n\ndef decode_number(alpha):\n    # Convert alphabet number to 10-base number\n    total = 0\n    for char in alpha:\n        total = total * 9 + (ord(char) - ord('A'))\n    return total\n\ndef align_number(alpha):\n    # Find the number that makes the total all H\n    align_num = []\n    for char in alpha:\n        required = chr(8 - (ord(char) - ord('A')) + ord('A'))\n        align_num.append(required)\n    return f\"{alpha} + {''.join(align_num)} = {'H' * len(alpha)}\"\n\ndef main(args):\n    # Handle command line input\n    cmd = args[1]\n    if cmd == \"encode\":\n        print(encode_number(int(args[2])))\n    elif cmd == \"decode\":\n        print(decode_number(args[2]))\n    elif cmd == \"align\":\n        print(align_number(args[2]))\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"id": 52, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid enc(const char *d){\n    int a[220],al=0,i,j;\n    int n=strlen(d);\n    for(i=n-1;i>=0;--i)a[al++]=d[i]-'0';\n    if(al==1 && a[0]==0){puts(\"A\");return;}\n    char r[220];int rl=0;\n    while(al){\n        int q=0;\n        for(j=al-1;j>=0;--j){\n            int t=q*10+a[j];\n            a[j]=t/9;q=t%9;\n        }\n        r[rl++]='A'+q;\n        while(al&&a[al-1]==0)al--;\n    }\n    for(i=rl-1;i>=0;--i)putchar(r[i]);putchar('\\n');\n}\nvoid dec(const char *s){\n    int o[230]={0},ol=1,i,j;\n    for(i=0;s[i];++i){\n        int v=s[i]-'A',c=v;\n        for(j=0;j<ol;++j){\n            int x=o[j]*9+c;\n            o[j]=x%10; c=x/10;\n        }\n        while(c){o[ol++]=c%10;c/=10;}\n    }\n    for(i=ol-1;i>=0;--i)printf(\"%d\",o[i]);\n    putchar('\\n');\n}\nvoid ali(const char *s){\n    int i,len=strlen(s);\n    char x[35];\n    for(i=0;i<len;++i)x[i]='A'+((7-(s[i]-'A')+9)%9);\n    x[len]=0;\n    printf(\"%s + %s = \",s,x);\n    for(i=0;i<len;++i)putchar('H');\n    putchar('\\n');\n}\nint main(int ac,char **av){\n    if(ac!=3)return 1;\n    if(!strcmp(av[1],\"encode\"))enc(av[2]);\n    else if(!strcmp(av[1],\"decode\"))dec(av[2]);\n    else if(!strcmp(av[1],\"align\"))ali(av[2]);\n    return 0;\n}"}
{"id": 53, "is_generated": true, "language": "Python3", "code": "import sys\n\nclass AlphaConverter:\n    # Class for handling conversions between decimal and alphabet numbers.\n    ALPHA_CHARS = \"ABCDEFGHI\"\n    BASE_VAL = len(ALPHA_CHARS) # Base is 9\n\n    @staticmethod\n    def to_decimal(alpha_num_str):\n        dec_val = 0\n        for char_idx, char_digit in enumerate(reversed(alpha_num_str)):\n            digit_val = AlphaConverter.ALPHA_CHARS.index(char_digit)\n            dec_val += digit_val * (AlphaConverter.BASE_VAL ** char_idx)\n        return dec_val\n\n    @staticmethod\n    def to_alpha(dec_val):\n        if dec_val == 0:\n            return AlphaConverter.ALPHA_CHARS[0] # 'A'\n\n        result_chars = []\n        current = dec_val\n        while current > 0:\n            remainder = current % AlphaConverter.BASE_VAL\n            result_chars.append(AlphaConverter.ALPHA_CHARS[remainder])\n            current //= AlphaConverter.BASE_VAL\n        return \"\".join(reversed(result_chars))\n\n    @staticmethod\n    def find_alignment(input_string):\n        original_dec = AlphaConverter.to_decimal(input_string)\n        \n        num_len = len(input_string)\n        all_h_target_str = 'H' * num_len\n        all_h_target_dec = AlphaConverter.to_decimal(all_h_target_str)\n        \n        while all_h_target_dec < original_dec:\n            num_len += 1\n            all_h_target_str += 'H'\n            # Optimize: new H-string value is (old H-string value * base) + H_value\n            all_h_target_dec = all_h_target_dec * AlphaConverter.BASE_VAL + AlphaConverter.ALPHA_CHARS.index('H')\n\n        diff_dec = all_h_target_dec - original_dec\n        diff_alpha = AlphaConverter.to_alpha(diff_dec)\n        \n        return f\"{input_string} + {diff_alpha} = {all_h_target_str}\"\n\ndef main(arguments):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    subcommand = arguments[0]\n    input_data = arguments[1]\n\n    if subcommand == \"decode\":\n        print(AlphaConverter.to_decimal(input_data))\n    elif subcommand == \"encode\":\n        print(AlphaConverter.to_alpha(int(input_data)))\n    elif subcommand == \"align\":\n        print(AlphaConverter.find_alignment(input_data))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 54, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n\n  static String numToAlpha(BigInteger n) {\n    if (n.equals(BigInteger.ZERO)) return \"A\";\n    StringBuilder result = new StringBuilder();\n    while (n.compareTo(BigInteger.ZERO) > 0) {\n      int rem = n.mod(BigInteger.valueOf(9)).intValue();\n      result.append((char)('A' + rem));\n      n = n.divide(BigInteger.valueOf(9));\n    }\n    return result.reverse().toString();\n  }\n\n  static BigInteger alphaToNum(String s) {\n    BigInteger res = BigInteger.ZERO;\n    for (int i = 0; i < s.length(); i++)\n      res = res.multiply(BigInteger.valueOf(9))\n           .add(BigInteger.valueOf(s.charAt(i) - 'A'));\n    return res;\n  }\n\n  static String alignAlphaNum(String s) {\n    StringBuilder plus = new StringBuilder();\n    StringBuilder total = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      int x = (7 - (c - 'A') + 9) % 9;\n      plus.append((char)('A' + x));\n      total.append('H');\n    }\n    return trimLeadingA(s) + \" + \" + trimLeadingA(plus.toString()) + \" = \" + trimLeadingA(total.toString());\n  }\n\n  static String trimLeadingA(String s) {\n    int j = 0;\n    while (j < s.length() - 1 && s.charAt(j) == 'A') j++;\n    return s.substring(j);\n  }\n\n  public static void main(String[] args) {\n    String cmd = args[0], input = args[1];\n    if (cmd.equals(\"encode\")) {\n      System.out.println(numToAlpha(new BigInteger(input)));\n    } else if (cmd.equals(\"decode\")) {\n      System.out.println(alphaToNum(input));\n    } else if (cmd.equals(\"align\")) {\n      System.out.println(alignAlphaNum(input));\n    }\n  }\n}"}
{"id": 55, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    return 1;\n  }\n  int max_attempts = atoi(argv[1]);\n  \n  srand(time(NULL));\n\n  // \u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f: \u79e9=0, \u5e8f=1 => 0, 1, 0, 0, 1, 0\n  const int target_pattern[] = {0, 1, 0, 0, 1, 0};\n  const int pattern_len = 6;\n  const char* characters[] = {\"\u79e9\", \"\u5e8f\"};\n\n  int current_match_len = 0;\n  int pattern_found = 0;\n\n  for (int i = 0; i < max_attempts; i++) {\n    int generated_char_code = rand() % 2;\n    printf(\"%s\\n\", characters[generated_char_code]);\n\n    if (generated_char_code == target_pattern[current_match_len]) {\n      current_match_len++;\n    } else {\n      // \u30ea\u30bb\u30c3\u30c8\u3059\u308b\u304c\u3001\u73fe\u5728\u306e\u6587\u5b57\u304c\u30d1\u30bf\u30fc\u30f3\u306e\u5148\u982d\u3068\u4e00\u81f4\u3059\u308b\u306a\u3089\u3001\u305d\u3053\u304b\u3089\u518d\u30b9\u30bf\u30fc\u30c8\n      current_match_len = (generated_char_code == target_pattern[0]) ? 1 : 0;\n    }\n\n    if (current_match_len == pattern_len) {\n      pattern_found = 1;\n      break;\n    }\n  }\n  \n  if (pattern_found) {\n    printf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n  } else {\n    printf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n  }\n\n  return 0;\n}"}
{"id": 56, "is_generated": false, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef num2al(num):\n    if num < 9:\n        return chr(int(num)+65)\n    elif num%9 == 0:\n        return num2al(num//9) + chr(65)\n    else:\n        return  num2al(num//9) + chr(65 + num%9)\n\ndef main(argv):\n    cmd=''\n    \n    for i, v in enumerate(argv):\n        #print(list(v))\n        if i==0: # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\n            cmd = v\n        else:\n            if cmd == 'decode':\n                result = 0\n                for ii, alpha in enumerate(list(v)):\n                    result += (9**(len(list(v))-ii-1)) * (ord(alpha) - 65)\n                print(result)\n            elif cmd == 'encode':\n                #print(int(v))\n                #print(chr(int(v)+65))\n                print(num2al(int(v)))\n            #elif cmd == 'align':\n\n        #print(\"argv[{0}]: {1}\".format(i, v))\n    \n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 57, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n  dict={\n    'A':'0',\n    'B':'1',\n    'C':'2',\n    'D':'3',\n    'E':'4',\n    'F':'5',\n    'G':'6',\n    'H':'7',\n    'I':'8',\n  }\n\n  dict2={\n    '0':'A',\n    '1':'B',\n    '2':'C',\n    '3':'D',\n    '4':'E',\n    '5':'F',\n    '6':'G',\n    '7':'H',\n    '8':'I',\n  }\n\n  list=[]\n  if argv[0]=='decode':\n    for i in argv[1]:\n      list.append(i)\n    ans=0\n    list.reverse()\n    for j in range(0, len(list)):\n      ans=ans+9**j*int(dict[list[j]])\n    print(ans)\n  \n  elif argv[0]=='encode':\n    num=int(argv[1])\n    ans_list=[]\n    while True:\n      amari=num%9\n      kai=int(num/9)\n      ans_list.append(dict2[str(amari)])\n      if kai==0:\n        break\n      else:\n        num=kai\n    ans_list.reverse()\n    for k in ans_list:\n      print(k, end='')\n    print()\n\n  elif argv[0]=='align':\n    if argv[1]=='A':\n      print('A + H = H')\n      \n\n    \n  \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 58, "is_generated": false, "language": "Ruby", "code": "# def main(argv)\n#   # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n#   # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n#   # ---\n#   # This is a sample code to use arguments and outputs.\n#   # Edit and remove this code as you like.\n\n#   argv.each_index do |i|\n#     v = argv[i]\n#     puts \"argv[#{i}]: #{v}\"\n#   end\n# end\n\n# main(ARGV)\n\nsub = ARGV[0]\ninput = ARGV[1]\noutput = []\n\nif sub == \"decode\"\n  input = input.split(\"\")\n  input.length.times{|i|\n    if input[i] == \"A\"\n      add = \"0\"\n    elsif input[i] == \"B\"\n      add = \"1\"\n    elsif input[i] == \"C\"\n      add = \"2\"\n    elsif input[i] == \"D\"\n      add = \"3\"\n    elsif input[i] == \"E\"\n      add = \"4\"\n    elsif input[i] == \"F\"\n      add = \"5\"\n    elsif input[i] == \"G\"\n      add = \"6\"\n    elsif input[i] == \"H\"\n      add = \"7\"\n    elsif input[i] == \"I\"\n      add = \"8\"\n    end\n    # output.push(add*9**(input.length-1-i))\n    output.push(add)\n  }\n  p output.join.to_i(9)\nend\n\n\nif sub == \"encode\"\n    input =  input.to_i.to_s(9)\n    input = input.split(\"\")\n    input.length.times{|i|\n    \n    if input[i] == \"0\"\n      add = \"A\"\n    elsif input[i] == \"1\"\n      add = \"B\"\n    elsif input[i] == \"2\"\n      add = \"C\"\n    elsif input[i] == \"3\"\n      add = \"D\"\n    elsif input[i] == \"4\"\n      add = \"E\"\n    elsif input[i] == \"5\"\n      add = \"F\"\n    elsif input[i] == \"6\"\n      add = \"G\"\n    elsif input[i] == \"7\"\n      add = \"H\"\n    elsif input[i] == \"8\"\n      add = \"I\"\n    end\n    output.push(add)\n    }\n    puts output.join\nend"}
{"id": 59, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    nums = ['A','B','C','D','E','F','G','H','I']\n\n    command = argv[0]\n    string = argv[1]\n\n    if command == 'decode':\n      print(decode(nums, string))\n\n    elif command == 'encode':\n      print(encode(nums, string))\n\n    elif command == 'align':\n      align(nums, string)\n\ndef decode(nums, string):\n  _sum = 0\n  for j, c in enumerate(string):\n    for index, num in enumerate(nums):\n      if c == num:\n        _sum += index*9**(len(string)-j-1)\n\n  return _sum\n\ndef encode(nums, string):\n  num = int(string)\n  ans = []\n  if num == 0:\n    return 'A'\n  else:\n    while(num):\n      ans.append(nums[num%9])\n      num = int(num/9)\n    ans.reverse()\n  \n  return ''.join(ans)\n\ndef align(nums, string):\n  if string == 'A':\n    print('A + H = H')\n  else:\n    num = decode(nums, string)\n    x = 0\n    i = 0\n    while(x < num):\n      x += 7*(9**i)\n      i += 1\n    sub = x - num\n    ans = encode(nums, sub)\n    result = encode(nums,x)\n    print(\"{} + \".format(string), end='')\n    print(\"{} = \".format(ans), end='')\n    print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 60, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(ten_num:int) -> str:\n  \"\"\"\n  10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\n\n  :param a:\u5909\u63db\u3059\u308b10\u9032\u6570\n  \"\"\"\n\n  plate = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n  ans = \"\"\n\n  while ten_num >= 9:\n    ans += plate[ten_num%9]\n    ten_num //= 9 \n\n  ans += plate[ten_num]\n  ans = \"\".join(list(reversed(ans)))\n  return ans\n\ndef decode(alf:str) -> int:\n  \"\"\"\n  \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\u3059\u308b\n\n  \"\"\"\n\n  plate = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n  ans = 0\n  r = 0\n\n  for i in range(-1, -1*(len(str(alf)) + 1), -1):\n    a = int(plate.index(str(alf)[i]))\n    ans += a * (9 ** r)\n    r += 1\n\n\n  return ans \n\ndef align(alf:str):\n  plate = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n  D = 0\n  ans = \"\"\n\n  for i in range(-1, -1*(len(str(alf)) + 1), -1):\n    a = int(plate.index(str(alf)[i]))\n    if a != \"I\":\n      ans += plate[7 - plate.index(a)]\n  \n  ans = \"\".join(list(reversed(ans)))\n  return ans\n    \n\n  \n\n  \ndef main(argv : list):\n  \"\"\"\n  \u6e21\u3055\u308c\u305f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u56e0\u6570\u306b\u3064\u3044\u3066\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\n  \n  :param argv: \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u56e0\u6570\u306elist \n  \"\"\"\n\n  T, arg = argv[0], argv[1]\n  if T == \"encode\":\n    arg = int(arg)\n    return encode(arg)\n  \n  elif T == \"decode\":\n    return decode(arg)\n\n  else:\n    return align(arg)\n  \n\n\nif __name__ == '__main__':\n    anser = main(sys.argv[1:])\n    print(anser)\n"}
{"id": 61, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode_alpha(input_str):\n    # Map A-I to their respective values, decode base-9\n    number = 0\n    for char in input_str:\n        number = number * 9 + (ord(char) - ord('A'))\n    return number\n\ndef encode_alpha(value):\n    # Encode number to A-I base-9 system\n    base = 9\n    alpha = \"ABCDEFGHI\"\n    if value == 0:\n        return \"A\"\n    output = ''\n    while value:\n        output = alpha[value % base] + output\n        value //= base\n    return output\n\ndef align_number(target):\n    decoded_val = decode_alpha(target)\n    total_H = len(target) * 8\n    add_this = total_H - decoded_val\n    return f\"{target} + {encode_alpha(add_this)} = {'H' * len(target)}\"\n\ndef main(argv):\n    instruction = argv[0]\n    arg = argv[1]\n\n    if instruction == \"decode\":\n        print(decode_alpha(arg))\n    elif instruction == \"encode\":\n        print(encode_alpha(int(arg)))\n    elif instruction == \"align\":\n        print(align_number(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 62, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(inp, change_dic):\n  ans = 0\n  l = list(inp)\n  for i in range(len(l)):\n    ans += (9 ** (len(l)-i-1)) * int([k for k, v in change_dic.items() if v == l[i]][0])\n  return ans\n\ndef decode(inp, change_dic):\n  ans = ''\n  a = divmod(int(inp), 9)\n  q, mod = a[0], str(a[1])\n  ans += change_dic[mod]\n  if q < 9 and q > 0:\n    ans = change_dic[str(q)] + ans\n    q = 0\n  while q >= 9:\n    a = divmod(q, 9)\n    q, mod = a[0], str(a[1])\n    ans = change_dic[mod] + ans\n  if q < 9 and q > 0:\n    ans = change_dic[str(q)] + ans\n  return ans\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    change_dic = {'0': 'A', '1': 'B', '2': 'C', '3': 'D', '4': 'E', '5': 'F', '6': 'G', '7': 'H', '8': 'I'}\n    subcommand, inp = argv[1], argv[2]\n    if subcommand == 'decode':\n      print(encode(inp, change_dic))\n    elif subcommand == 'encode':\n      print(decode(inp, change_dic))\n    elif subcommand == 'align':\n      l = list(inp)\n      a = ''\n      for i in range(len(l)):\n        a += 'H'\n      num_H = encode(a, change_dic)\n      num_I = encode(inp, change_dic)\n      target_num = num_H - num_I\n      target = decode(str(target_num), change_dic)\n      print('{} + {} = {}'.format(inp, target, a))\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 63, "is_generated": false, "language": "Ruby", "code": "$list = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n\ndef main(argv)\n  case argv[0]\n    when \"decode\" then\n      print decode(argv[1])\n    when \"encode\" then\n      print encode(argv[1].to_i)\n    when \"align\" then\n      print align(argv[1])\n  end\nend\n\ndef encode(num)\n  if(num == 0) then\n    return 'A'\n  end\n  str = \"\"\n  while (num != 0) do\n      k = num % 9\n      str = $list[k] + str\n      num /= 9\n  end\n  return str\nend\n\ndef decode(str)\n  i = 0\n  num = 0\n  while(i < str.length) do\n      num *= 9\n      num += str[i].ord - 'A'.ord\n      i += 1\n  end\n  return num\nend\n\ndef align(str)\n  num = decode(str)\n  length = str.length\n  if( str[0] == \"I\" ) then\n    length += 1\n  end\n  num2 = 0\n  i = 0\n  while ( i < length ) do\n    num2 *= 9\n    num2 += 7\n    i += 1\n  end\n  return str + \" + \" + encode(num2 - num) + \" = \" + encode(num2)\n\nend\n\nmain(ARGV)\n"}
{"id": 64, "is_generated": false, "language": "Python3", "code": "import sys\n#9\u9032\u6570\u306ealphabet\u309210\u9032\u6570\u306b\u5909\u63db\ndef transform1(alpha):\n  #alphabet\u30929\u9032\u6570\u306b\u5909\u63db\n  num=[0]*220\n  for i in range(len(alpha)):\n    if (alpha[i]=='A'):\n      num[i]=0\n    elif (alpha[i]=='B'):\n      num[i]=1\n    elif (alpha[i]=='C'):\n      num[i]=2\n    elif (alpha[i]=='D'):\n      num[i]=3\n    elif (alpha[i]=='E'):\n      num[i]=4\n    elif (alpha[i]=='F'):\n      num[i]=5\n    elif (alpha[i]=='G'):\n      num[i]=6\n    elif (alpha[i]=='H'):\n      num[i]=7\n    else:\n      num[i]=8\n  #9\u9032\u6570\u309210\u9032\u6570\u306b\u5909\u63db\n  j=i\n  number=0\n  for i in range(len(num)):\n    number=number+int(num[i]*9**j)\n    j=j-1\n  return int(number)\n\n#10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db\ndef transform2(num):\n  i=0\n  number=0\n  while num>0:\n    z=num%9\n    number=number+z*10**i\n    num=num//9\n    i=i+1\n  return int(number)\n\n#9\u9032\u6570\u3092alphabet\u306b\u5909\u63db\ndef transform3(num):\n  dig=[0]*len(str(num))\n  i=0\n  alphabet=[0]*len(str(num))\n  while num>0:\n    dig[i]=num%10\n    num=num//10\n    i=i+1\n  j=i-1\n  for i in range(len(dig)):\n    if(dig[i]==0):\n      alphabet[j-i]='A'\n    elif (dig[i]==1):\n      alphabet[j-i]='B'\n    elif (dig[i]==2):\n      alphabet[j-i]='C'\n    elif (dig[i]==3):\n      alphabet[j-i]='D'\n    elif (dig[i]==4):\n      alphabet[j-i]='E'\n    elif (dig[i]==5):\n      alphabet[j-i]='F'\n    elif (dig[i]==6):\n      alphabet[j-i]='G'\n    elif (dig[i]==7):\n      alphabet[j-i]='H'\n    else:\n      alphabet[j-i]='I'\n  return ''.join(alphabet)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    sub=argv[0]\n    Input=argv[1]\n    #decode\u306e\u5834\u5408\n    if (sub=='decode'):\n      number=transform1(Input)\n      print(number)\n    #encode\u306e\u5834\u5408\n    elif (sub=='encode'):\n      number=transform2(int(Input))\n      alphabet=transform3(number)\n      print(alphabet)\n    #align\u306e\u5834\u5408\n    else:\n      number=transform1(Input)\n      if (Input[0]=='I'):\n        H=[7]*(len(Input)+1)\n      else:\n        H=[7]*len(Input)\n      Hj=''.join(map(str,H))\n      Hj=transform3(int(Hj))\n      H10=transform1(Hj)\n      ans10=H10-number\n      ans9=transform2(ans10)\n      ans_alpha=transform3(ans9)\n      print('{0} + {1} = {2}'.format(Input,ans_alpha,Hj))\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 65, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(string):\n  decoder = {\n    \"A\": 0,\n    \"B\": 1,\n    \"C\": 2,\n    \"D\": 3,\n    \"E\": 4,\n    \"F\": 5,\n    \"G\": 6,\n    \"H\": 7,\n    \"I\": 8\n  }\n  result = 0\n  for i, s in enumerate(string[::-1]):\n    result += decoder[s] * (9 ** i)\n  return result\n\ndef encode(number):\n  number = int(number)\n  encoder = \"ABCDEFGHI\"\n  result = \"\"\n  while True:\n    result += encoder[number % 9]\n    number = number // 9\n    if number == 0:\n      break\n  return result[::-1]\n\ndef align(string):\n  if string[0] == \"I\":\n    goal = \"H\"*(len(string)+1)\n  else:\n    goal = \"H\"*len(string)\n  return string + \" + \" + encode(decode(goal)-decode(string)) + \" = \" + goal\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if argv[0] == \"decode\":\n      print(decode(argv[1]))\n    elif argv[0] == \"encode\":\n      print(encode(argv[1]))\n    else:\n      print(align(argv[1]))\n    #for i, v in enumerate(argv):\n    #  print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 66, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Numerics;\nusing System.Text;\n\npublic class BasicNumberConverter\n{\n    public static void Main(string[] args)\n    {\n        // This code handles command line arguments and prints to standard output.\n        // Feel free to edit or delete this code as you like.\n\n        string cmd = args[0]; // First argument is the command\n        string val = args[1]; // Second argument is the value\n\n        if (cmd == \"encode\")\n        {\n            BigInteger decNumber = BigInteger.Parse(val);\n            Console.WriteLine(DecimalToAlpha(decNumber));\n        }\n        else if (cmd == \"decode\")\n        {\n            Console.WriteLine(AlphaToDecimal(val));\n        }\n        else if (cmd == \"align\")\n        {\n            Console.WriteLine(AlignAlpha(val));\n        }\n    }\n\n    // Converts an alphabetic character to its numeric digit\n    private static int GetNumericDigit(char c)\n    {\n        return c - 'A';\n    }\n\n    // Converts a numeric digit to its alphabetic character\n    private static char GetAlphaChar(int digit)\n    {\n        return (char)('A' + digit);\n    }\n\n    // Transforms an alphabet string to its decimal BigInteger value\n    private static BigInteger AlphaToDecimal(string alphaStr)\n    {\n        BigInteger convertedValue = BigInteger.Zero;\n        BigInteger currentPowerOfNine = BigInteger.One; // 9^0, 9^1, ...\n\n        for (int i = alphaStr.Length - 1; i >= 0; i--)\n        {\n            char currentAlphaChar = alphaStr[i];\n            int digitValue = GetNumericDigit(currentAlphaChar);\n            convertedValue += digitValue * currentPowerOfNine;\n            currentPowerOfNine *= 9;\n        }\n        return convertedValue;\n    }\n\n    // Transforms a decimal BigInteger to its alphabet string representation\n    private static string DecimalToAlpha(BigInteger decNum)\n    {\n        if (decNum == BigInteger.Zero)\n        {\n            return \"A\";\n        }\n\n        StringBuilder outputAlpha = new StringBuilder();\n        while (decNum > 0)\n        {\n            BigInteger remainder = decNum % 9;\n            outputAlpha.Insert(0, GetAlphaChar((int)remainder)); // Prepend the character\n            decNum /= 9;\n        }\n        return outputAlpha.ToString();\n    }\n\n    // Determines the value needed to reach an all-'H' number\n    private static string AlignAlpha(string inputAlpha)\n    {\n        BigInteger originalNumber = AlphaToDecimal(inputAlpha);\n        int targetLength = inputAlpha.Length;\n        BigInteger targetHNumber;\n        const int HDigit = 7; // 'H' corresponds to the digit 7\n\n        while (true)\n        {\n            BigInteger currentSumOfPowers = BigInteger.Zero;\n            BigInteger powerTracker = BigInteger.One;\n            for (int i = 0; i < targetLength; i++)\n            {\n                currentSumOfPowers += powerTracker;\n                powerTracker *= 9;\n            }\n            targetHNumber = HDigit * currentSumOfPowers; // Calculate the H...H value\n\n            if (targetHNumber >= originalNumber)\n            {\n                break; // Found the appropriate length for H's\n            }\n            targetLength++; // Increase length to find a larger H...H\n        }\n\n        BigInteger difference = targetHNumber - originalNumber;\n        string neededAlpha = DecimalToAlpha(difference);\n        string finalHString = new string('H', targetLength);\n\n        return $\"{inputAlpha} + {neededAlpha} = {finalHString}\";\n    }\n}"}
{"id": 67, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    command = argv[0]\n    value = argv[1]\n\n    # 'A' \u304b\u3089 'I' \u306f 0 \u304b\u3089 8 \u306b\u5bfe\u5fdc\u3057\u307e\u3059\n    alphabet_map = \"ABCDEFGHI\"\n\n    if command == \"decode\":\n        result_num = 0\n        for char in value:\n            result_num = result_num * 9 + alphabet_map.find(char)\n        print(result_num)\n\n    elif command == \"encode\":\n        n = int(value)\n        if n == 0:\n            print(\"A\")\n            return\n\n        result_str = \"\"\n        while n > 0:\n            remainder = n % 9\n            result_str = alphabet_map[remainder] + result_str\n            n = n // 9\n        print(result_str)\n\n    elif command == \"align\":\n        x_val = 0\n        for char in value:\n            x_val = x_val * 9 + alphabet_map.find(char)\n\n        length = len(value)\n        z_str = \"H\" * length\n        \n        z_val = 0\n        for char in z_str:\n            z_val = z_val * 9 + alphabet_map.find(char)\n\n        if z_val < x_val:\n            length += 1\n            z_str = \"H\" * length\n            z_val = 0\n            for char in z_str:\n                z_val = z_val * 9 + alphabet_map.find(char)\n        \n        y_val = z_val - x_val\n\n        if y_val == 0:\n            y_str = \"A\"\n        else:\n            y_str = \"\"\n            tmp_y = y_val\n            while tmp_y > 0:\n                remainder = tmp_y % 9\n                y_str = alphabet_map[remainder] + y_str\n                tmp_y = tmp_y // 9\n        \n        print(f\"{value} + {y_str} = {z_str}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 68, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length < 2) {\n      System.out.println(\"Error: Invalid arguments\");\n      return;\n    }\n\n    String command = args[0];\n    String payload = args[1];\n\n    switch (command.toLowerCase()) {\n      case \"decode\":\n        System.out.println(decodeAlphabetNumber(payload));\n        break;\n      case \"encode\":\n        System.out.println(encodeToAlphabetNumber(Integer.parseInt(payload)));\n        break;\n      case \"align\":\n        System.out.println(findAlignment(payload));\n        break;\n      default:\n        System.out.println(\"Invalid command.\");\n    }\n  }\n\n  private static int decodeAlphabetNumber(String alphabetNumber) {\n    int value = 0;\n    for (char c : alphabetNumber.toCharArray()) {\n      value = value * 9 + (c - 'A');\n    }\n    return value;\n  }\n\n  private static String encodeToAlphabetNumber(int value) {\n    StringBuilder encoded = new StringBuilder();\n    while (value > 0) {\n      encoded.insert(0, (char) ('A' + (value % 9)));\n      value /= 9;\n    }\n    return encoded.length() > 0 ? encoded.toString() : \"A\";\n  }\n\n  private static String findAlignment(String alphabetNumber) {\n    StringBuilder alignment = new StringBuilder();\n    for (char c : alphabetNumber.toCharArray()) {\n      alignment.append((char) ('H' - (c - 'A')));\n    }\n    return String.format(\"%s + %s = %s\", alphabetNumber, alignment, \"H\".repeat(alphabetNumber.length()));\n  }\n}"}
{"id": 69, "is_generated": false, "language": "Python3", "code": "import sys\n\nalphabet = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I'}\n\ndef from_value(d, value):\n    keys = [k for k, v in d.items() if v==value]\n    if keys:\n        return keys[0]\n    else :\n        return None\n  \ndef decode(d, vv):\n  # alpha2num = lambda aa:ord(aa)-ord('A')\n  digit = len(vv)\n  num = 0\n  for i in range(digit):\n    num += from_value(d, vv[i]) * (9**(digit-i-1))\n  return num\n\ndef encode(d, num):\n    if int(num) < 9:\n        return alphabet[int(num)]\n    else:\n        return encode(d, int(num)//9)+alphabet[int(num)%9]\n\n\ndef main(argv):\n\n    # for i, v in enumerate(argv):\n    #     print(\"argv[{0}]: {1}\".format(i, v))\n\n    if argv[0] == \"decode\" :\n      print(decode(alphabet, argv[1]))\n    \n    elif argv[0] == \"encode\":\n      print(encode(alphabet, argv[1]))\n\n    else:\n      input_num = decode(alphabet, argv[1])\n      hh='H'\n      while(True):\n        output_num = decode(alphabet,hh)\n        if input_num <= output_num :\n          break\n        hh += 'H'\n      mm = output_num - input_num\n      en = encode(alphabet,mm)\n      print(argv[1] + ' + ' + en + ' = ' + hh)\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 70, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n\n    private static final BigInteger B = BigInteger.valueOf(9); // Base of the system\n    private static final char ALIGN_CHAR = 'H'; // Character for alignment target\n\n    // Converts alphabetical string to BigInteger\n    private static BigInteger toDec(String s) {\n        BigInteger res = BigInteger.ZERO;\n        for (char c : s.toCharArray()) {\n            res = res.multiply(B).add(BigInteger.valueOf(c - 'A'));\n        }\n        return res;\n    }\n\n    // Converts BigInteger to alphabetical string\n    private static String toAlpha(BigInteger n) {\n        if (n.equals(BigInteger.ZERO)) return \"A\";\n        StringBuilder sb = new StringBuilder();\n        while (n.compareTo(BigInteger.ZERO) > 0) {\n            BigInteger[] dr = n.divideAndRemainder(B);\n            sb.append((char) ('A' + dr[1].intValue()));\n            n = dr[0];\n        }\n        return sb.reverse().toString();\n    }\n\n    // Computes the alignment string\n    private static String getAlign(String s) {\n        BigInteger curVal = toDec(s);\n        int len = s.length();\n\n        StringBuilder hStrB = new StringBuilder();\n        for (int i = 0; i < len; i++) hStrB.append(ALIGN_CHAR);\n        \n        BigInteger targetHVal = toDec(hStrB.toString());\n\n        if (curVal.compareTo(targetHVal) > 0) {\n            hStrB.append(ALIGN_CHAR);\n            targetHVal = toDec(hStrB.toString());\n        }\n\n        BigInteger diff = targetHVal.subtract(curVal);\n        String alignedVal = toAlpha(diff);\n\n        return s + \" + \" + alignedVal + \" = \" + hStrB.toString();\n    }\n\n    public static void main(String[] args) {\n        String cmd = args[0];\n        String val = args[1];\n\n        switch (cmd) {\n            case \"decode\":\n                System.out.println(toDec(val));\n                break;\n            case \"encode\":\n                System.out.println(toAlpha(new BigInteger(val)));\n                break;\n            case \"align\":\n                System.out.println(getAlign(val));\n                break;\n        }\n    }\n}"}
{"id": 71, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class AlphaNumConverter {\n    public static void main(String[] args) {\n        // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u6570\u3092\u78ba\u8a8d\n        if (args.length != 2) {\n            return;\n        }\n\n        String command = args[0];\n        String input = args[1];\n\n        if (command.equals(\"encode\")) {\n            System.out.println(encodeToAlpha(input));\n        } else if (command.equals(\"decode\")) {\n            System.out.println(decodeToDecimal(input));\n        } else if (command.equals(\"align\")) {\n            System.out.println(getAlignment(input));\n        }\n    }\n\n    private static String encodeToAlpha(String decimalStr) {\n        int decimalNumber = Integer.parseInt(decimalStr);\n        StringBuilder alphaResult = new StringBuilder();\n        while (decimalNumber > 0) {\n            alphaResult.insert(0, (char) ('A' + (decimalNumber % 9)));\n            decimalNumber /= 9;\n        }\n        return alphaResult.length() > 0 ? alphaResult.toString() : \"A\";\n    }\n\n    private static int decodeToDecimal(String alphaInput) {\n        int decimalTotal = 0;\n        for (char character : alphaInput.toCharArray()) {\n            decimalTotal = decimalTotal * 9 + (character - 'A');\n        }\n        return decimalTotal;\n    }\n\n    private static String getAlignment(String alphaInput) {\n        StringBuilder requiredAddition = new StringBuilder();\n        for (char character : alphaInput.toCharArray()) {\n            requiredAddition.append((char) ('H' - (character - 'A')));\n        }\n        String total = \"H\".repeat(alphaInput.length());\n        return alphaInput + \" + \" + requiredAddition.toString() + \" = \" + total;\n    }\n}"}
{"id": 72, "is_generated": false, "language": "Python3", "code": "import sys\n\nnumbers = \"0123456789\"\ncharacters = numbers\n\ndef Base_10_to_n(X, n):\n  if (int(X/n)):\n    return Base_10_to_n(int(X/n), n)+str(X%n)\n  return str(X%n)\n\ndef Base_n_to_10(value, n):\n\n  result = 0\n\n  moji = str(value)\n  l = len(moji)\n  for c in moji:\n    result += (9**(l-1))*int(c)\n    l = l - 1\n\n  return str(result)\n\ndef main(command, moji):\n\n    moji2num = {\"A\":\"0\", \"B\":\"1\", \"C\":\"2\", \"D\":\"3\", \"E\":\"4\", \"F\":\"5\", \"G\":\"6\", \"H\":\"7\", \"I\":\"8\"}\n    num2moji = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n\n    if command == 'encode':\n\n        num = int(moji)\n        result_str = Base_10_to_n(num, 9)\n        temp = []\n        for c in result_str:\n            temp.append(num2moji[int(c)])\n        print(\"\".join(temp))\n    elif command == 'decode':\n\n        temp = []\n        for c in moji:\n            temp.append(moji2num[c])\n        num = int(\"\".join(temp))\n        result = int(Base_n_to_10(num, 9))\n        print(result)\n    elif command == 'align':\n\n        temp = []\n        i = len(moji)\n        for c in moji:\n            temp.append(moji2num[c])\n        num1 = int(\"\".join(temp))\n        num1 = int(Base_n_to_10(num1, 9))\n        num2 = 0\n\n        H = []\n        for j in range(i):\n            num2 += (9**j)*7\n\n        if num2 - num1 < 0:\n            num2 += (9**i)*7\n            i += 1\n        \n        for j in range(i):\n            H.append(\"H\")\n\n        num = num2 - num1\n        result_str = Base_10_to_n(num, 9)\n        temp = []\n        for c in result_str:\n            temp.append(num2moji[int(c)])\n\n        print(moji + \" + \" + \"\".join(temp) + \" = \" + \"\".join(H))\n\n\nif __name__ == '__main__':\n  argv = sys.argv\n\n  command = argv[1]\n  moji = argv[2]\n\n  main(command, moji)\n"}
{"id": 73, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring numberToAlpha(int number) {\n    if (number == 0) return \"A\";\n    string res = \"\";\n    while (number) {\n        res = char('A' + (number % 9)) + res;\n        number /= 9;\n    }\n    return res;\n}\n\nint alphaToNumber(string input) {\n    int result = 0;\n    for (char ch : input) {\n        result = result * 9 + (ch - 'A');\n    }\n    return result;\n}\n\nstring neededSum(string input) {\n    string need = \"\";\n    for (char ch : input) {\n        char required = 'H' - ch + 'A';\n        if (required < 'A') required += 9;\n        need += required;\n    }\n    return input + \" + \" + need + \" = \" + string(input.size(), 'H');\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return -1;\n\n    string cmd = argv[1];\n    string arg = argv[2];\n\n    if (cmd == \"decode\") {\n        cout << alphaToNumber(arg) << endl;\n    } else if (cmd == \"encode\") {\n        cout << numberToAlpha(stoi(arg)) << endl;\n    } else if (cmd == \"align\") {\n        cout << neededSum(arg) << endl;\n    }\n\n    return 0;\n}"}
{"id": 74, "is_generated": true, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length != 2)\n        {\n            Console.WriteLine(\"Invalid number of arguments.\");\n            return;\n        }\n\n        string command = args[0];\n        string input = args[1];\n\n        switch (command)\n        {\n            case \"encode\":\n                Console.WriteLine(Encode(int.Parse(input)));\n                break;\n            case \"decode\":\n                Console.WriteLine(Decode(input));\n                break;\n            case \"align\":\n                Console.WriteLine(Align(input));\n                break;\n            default:\n                Console.WriteLine(\"Invalid command.\");\n                break;\n        }\n    }\n\n    static string Encode(int number)\n    {\n        if (number == 0) return \"A\";\n        string result = \"\";\n        while (number > 0)\n        {\n            result = (char)('A' + number % 9) + result;\n            number /= 9;\n        }\n        return result;\n    }\n\n    static int Decode(string alphabetNumber)\n    {\n        int result = 0;\n        for (int i = 0; i < alphabetNumber.Length; i++)\n        {\n            result = result * 9 + (alphabetNumber[i] - 'A');\n        }\n        return result;\n    }\n\n    static string Align(string alphabetNumber)\n    {\n        string aligned = \"\";\n        foreach (char c in alphabetNumber)\n        {\n            int value = c - 'A';\n            int complement = (8 - value);\n            aligned += ((char)('A' + complement)).ToString();\n        }\n        return alphabetNumber + \" + \" + aligned + \" = \" + new string('H', alphabetNumber.Length);\n    }\n}"}
{"id": 75, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  cm = argv[0] #\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u53d6\u5f97\n  if cm == 'decode':\n    print(decode(argv[1]))\n  if cm == 'encode': \n    print(encode(argv[1]))\n  if cm == 'align':\n    print(align(argv[1]))\n\n# 9\u9032\u6570\u309210\u9032\u6570\u306b\u5909\u63db(\u5f15\u6570\uff1a\u6587\u5b57\u5217\uff0c\u623b\u308a\u5024\uff1a\u6587\u5b57\u5217)\ndef decode(argv): \n  x = 0\n  j = 0\n  for i in reversed(range(len(argv))):\n    n = str2int(argv[i])\n    x = n*9**j + x\n    j +=1\n  return x\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c89\u9032\u6570\u3092\u6570\u5b57\u306b\u5909\u63db(\u5f15\u6570\uff1a\u6587\u5b57\u5217\uff0c\u623b\u308a\u5024\uff1aint)\ndef str2int(argv):\n  if argv=='A':\n    return 0\n  if argv=='B':\n    return 1\n  if argv=='C':\n    return 2\n  if argv=='D':\n    return 3\n  if argv=='E':\n    return 4\n  if argv=='F':\n    return 5\n  if argv=='G':\n    return 6\n  if argv=='H':\n    return 7\n  if argv=='I':\n    return 8\n\n# 10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db(\u5f15\u6570\uff1a\u6587\u5b57\u5217\uff0c\u623b\u308a\u5024\uff1a\u6587\u5b57\u5217)\ndef encode(argv):\n  q = int(argv)\n  s = ''\n  while True:\n    mod = q%9\n    q = q//9\n    s = int2str(mod) + s\n    if q == 0:\n      return s\n      break\n\n# 0~9\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db(\u5f15\u6570\uff1aint\uff0c\u623b\u308a\u5024\uff1a\u6587\u5b57\u5217)\ndef int2str(argv):\n  if argv==0:\n    return 'A'\n  if argv==1:\n    return 'B'\n  if argv==2:\n    return 'C'\n  if argv==3:\n    return 'D'\n  if argv==4:\n    return 'E'\n  if argv==5:\n    return 'F'\n  if argv==6:\n    return 'G'\n  if argv==7:\n    return 'H'\n  if argv==8:\n    return 'I'\n\n# \u3042\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5bfe\u3057\u3066\uff0c\u8db3\u3059\u3068\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u304c\u3059\u3079\u3066H\u306b\u306a\u308b\u3088\u3046\u306a\u6570\u5f0f\u3092\u8fd4\u3059(\u5f15\u6570\uff1a\u6587\u5b57\u5217\uff0c\u623b\u308a\u5024\uff1a\u6587\u5b57\u5217)\ndef align(argv):\n  l = len(argv)\n  x = decode(argv) #\u5165\u529b\u5024\u309210\u9032\u6570\u306b\u5909\u63db\n  s = ''\n  for i in range(l):\n    s = s + 'H'\n  y = decode(s)\n  if x>y:\n    s = s + 'H' #H\u306e\u6570\u3092\u6c7a\u5b9a\n    y = decode(s) #\u6c42\u3081\u305f\u6587\u5b57\u5217\u309210\u9032\u6570\u306b\u5909\u63db\n  z = y-x #\u6570\u5f0f\u306e\u6570\u5024\u3092\u8a08\u7b97\n  f = argv + ' + ' + encode(str(z)) + ' = ' + s #9\u9032\u6570\u306b\u5909\u63db\u3057\uff0c\u6570\u5f0f\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u623b\u3059\n  return f\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 76, "is_generated": false, "language": "Java", "code": "package track;\n\nimport java.util.Arrays;\n\npublic class App {\n  private static final String[] ALPHA = new String[] {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"};\n\n  public static void main(String[] args) {\n    if (args.length != 2) {\n      System.exit(-1);\n    }\n\n    String command = args[0];\n    if (\"encode\".equals(command)) {\n      System.out.println(encode(Integer.parseInt(args[1])));\n    } else if (\"decode\".equals(command)) {\n      System.out.println(decode(args[1]));\n    } else if (\"align\".equals(command)) {\n      System.out.println(align(args[1]));\n    }   \n  }\n\n  private static String encode(int num) {\n    String strNum = Integer.toString(num, 9);\n    StringBuilder ret = new StringBuilder();\n    \n    for (int i = 0; i < strNum.length(); i++) {\n      ret.append(ALPHA[Integer.parseInt(strNum.substring(i, i + 1))]);\n    }\n    return ret.toString();\n  }\n\n  private static int decode(String alpha) {\n    StringBuilder strNum = new StringBuilder();\n\n    for (int i = 0; i < alpha.length(); i++) {\n\t\t\tint alphaIndex = Arrays.binarySearch(ALPHA, alpha.substring(i, i + 1));\n      strNum.append(alphaIndex);\n\t\t}\n\n    return Integer.parseInt(strNum.toString(), 9);\n  }\n\n  private static String align(String alpha) {\n    int dec = decode(alpha);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < alpha.length(); i++) {\n\t\t\tsb.append(\"7\");\n\t\t}\n\t\tint diff = Integer.parseInt(sb.toString()) - dec;\n    String ret = encode(diff);\n\n\t  return String.format(\"%s + %s = %s\", alpha, ret, encode(Integer.parseInt(sb.toString())));\n  }\n}\n"}
{"id": 77, "is_generated": true, "language": "Java", "code": "public class AlphaNumApp {\n  public static void main(String[] args) {\n    String cmd = args[0];\n    String param = args[1];\n    switch(cmd) {\n      case \"encode\": {\n        long val = Long.parseLong(param);\n        System.out.println(toAlphaNum(val));\n        break;\n      }\n      case \"decode\": {\n        System.out.println(toDecimalNum(param));\n        break;\n      }\n      case \"align\": {\n        String plus = makeAlign(param);\n        String hStr = makeHString(param.length());\n        System.out.println(param + \" + \" + plus + \" = \" + hStr);\n        break;\n      }\n    }\n  }\n\n  static String toAlphaNum(long val) {\n    if (val == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while(val > 0) {\n      sb.append((char)('A' + (int)(val % 9)));\n      val /= 9;\n    }\n    return sb.reverse().toString();\n  }\n\n  static long toDecimalNum(String str) {\n    long result = 0L;\n    for(char c : str.toCharArray()) {\n      result = result * 9 + (c - 'A');\n    }\n    return result;\n  }\n\n  static String makeAlign(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(char c : s.toCharArray()) {\n      sb.append((char)('A' + 7 - (c - 'A')));\n    }\n    return sb.toString();\n  }\n\n  static String makeHString(int len) {\n    StringBuilder sb = new StringBuilder(len);\n    for(int i=0; i<len; i++) {\n      sb.append('H');\n    }\n    return sb.toString();\n  }\n}"}
{"id": 78, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(string):\n  char_to_num = {}\n  for idx, char in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']):\n    char_to_num[char] = idx\n  out = []\n  for i in string:\n    out.append(str(char_to_num[i]))\n  out = int(''.join(out), 9)\n  return out\n\ndef encode(num):\n  num_to_char = {}\n  for idx, char in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']):\n    num_to_char[str(idx)] = char\n  \n  num_9 = ''\n  num_tmp = int(num)\n  while num_tmp >= 9:\n    num_9 = str(num_tmp%9) + num_9\n    num_tmp = num_tmp//9\n  num_9 = str(num_tmp%9) + num_9\n  \n  out = []\n  for i in str(num_9):\n    out.append(num_to_char[i])\n  out = ''.join(out)\n  return out\n\ndef align(string):\n  if string[0] == 'I':\n    all_H = 'H' * (len(string)+1)\n  else:\n    all_H = 'H' * len(string)\n\n  add = encode(decode(all_H) - decode(string))\n\n  ans = string + ' + ' + add + ' = ' +  all_H\n  return ans \n\ndef main(argv):\n    command = argv[0]\n    \n    if command == \"decode\":\n      string = argv[1]\n      print(decode(string))\n    elif command == \"encode\":\n      num = argv[1]\n      print(encode(num))\n    elif command == \"align\":\n      string = argv[1]\n      print(align(string))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 79, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n    \n    subcommand = argv[0]\n    data = argv[1]\n\n    if subcommand == \"encode\":\n      data = int(data)\n      data_dumy = data\n      out=''\n      while data_dumy>0:\n        out = str(data_dumy%9)+out\n        data_dumy = int(data_dumy/9)\n      print(out.replace('0','A').replace('1','B').replace('2','C').replace('3','D').replace('4','E').replace('5','F').replace('6','G').replace('7','H').replace('8','I'))\n    elif subcommand == \"decode\":\n      data = data.replace('A','0').replace('B','1').replace('C','2').replace('D','3').replace('E','4').replace('F','5').replace('G','6').replace('H','7').replace('I','8')\n      #data = list(data)\n      #out = 0\n      #for i in range(1,len(str(data))+1):\n      #  out += int(data[-i])*(9**(i-1))\n      out = int(data,9)\n      print(out)\n    elif subcommand == \"align\":\n      data_len = len(data)\n      data9 = data.replace('A','0').replace('B','1').replace('C','2').replace('D','3').replace('E','4').replace('F','5').replace('G','6').replace('H','7').replace('I','8')\n      data10 = int(data9,9)\n      goal = 0\n      for i in range(data_len):\n        goal += 7*(9**i)\n      dif = goal - data10\n      #print(dif)\n      \n      dif_dumy = dif\n      out=''\n      while dif_dumy>0:\n        out = str(dif_dumy%9)+out\n        dif_dumy = int(dif_dumy/9)\n      answer = out.replace('0','A').replace('1','B').replace('2','C').replace('3','D').replace('4','E').replace('5','F').replace('6','G').replace('7','H').replace('8','I')\n      print(data,\"+\",answer,\"=\",\"H\"*data_len)\n    else:\n      print(\"ERROR\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 80, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef to_decimal(alphabet_number):\n    # Convert alphabet-based number to decimal\n    value = 0\n    for char in alphabet_number:\n        value = value * 9 + (ord(char) - ord('A'))\n    return value\n\ndef from_decimal(decimal_number):\n    # Convert decimal to alphabet-based number\n    if decimal_number == 0:\n        return 'A'\n    result = ''\n    while decimal_number > 0:\n        result = chr((decimal_number % 9) + ord('A')) + result\n        decimal_number //= 9\n    return result\n\ndef align_to_HHH(value):\n    target_digit = 'H'\n    target_value = 8\n    desired_value = target_value * len(value)\n    current_value = to_decimal(value)\n    diff = desired_value - current_value\n    addition = from_decimal(diff)\n    return f\"{value} + {addition} = {target_digit * len(value)}\"\n\ndef main(args):\n    command = args[0]\n    value = args[1]\n\n    if command == \"decode\":\n        print(to_decimal(value))\n    elif command == \"encode\":\n        print(from_decimal(int(value)))\n    elif command == \"align\":\n        print(align_to_HHH(value))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 81, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef num2alpha(num):\n  if num<=8:\n    return chr(65+num)\n  elif num%8==0:\n    return num2alpha(num//9-1)+chr(74)\n  else:\n    return num2alpha(num//9)+chr(65+num%9)\n\ndef alpha2num(alpha):\n  num = 0\n  for index, item in enumerate(list(alpha)):\n    num += pow(9,len(alpha)-index-1)*(ord(item)-ord('A'))\n  return num\n\ndef alignalpha(alpha):\n  num = alpha2num(alpha)\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n    \n    if argv[0]==\"encode\":\n      enc = num2alpha(int(argv[1]))\n      print(enc)\n      \n    if argv[0]==\"decode\":\n      dec = alpha2num(argv[1])\n      print(dec)\n\n    if argv[0]==\"align\":\n      ans = alignalpha(argv[1])\n      print(argv[1],\" + \",ans,\" = \",ansH)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 82, "is_generated": false, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  if argv[0]=='encode':\n    a = int(argv[1])\n    char = 'ABCDEFGHI'\n    result = ''\n    if a== 0 :\n      result = char[0]\n      print (result)\n    else:\n      while a > 0 :\n        result = char[ a%9 ] + result\n        a = a //9\n\n      print (result)      \n  if argv[0]=='decode':\n    a = list(argv[1])\n    result = 0\n    char = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8 }\n    for i in range(len(a)):\n      if len(a)-1-i > 0:\n        result += char[a[i]]*9**(len(a)-1-i)\n      else:\n        result += char[a[i]]\n\n    print result\n  \n\n  if argv[0]=='align':\n    a = list(argv[1])\n    n = 0\n    re = '' \n    char2 = 'ABCDEFGHI'\n    result = ''\n    char = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8 }\n    for i in reversed(range(len(a))):\n      if char[a[i]]+n < 8 :\n        result = char2[7- (char[a[i]]+n)] + result\n        n = 0\n      else :\n        d = char[a[i]]+n-8\n        result = char2[char[a[i]] - d] + result\n        n = 1\n    if n == 1:\n        result = char2[6] + result\n\n    result = result.lstrip('A')\n\n    for i in range(len(a)+ n):\n      re = re + 'H'\n\n\n    result = argv[1] + ' + ' + result + ' = ' + re\n    print result \n\n\n\n    \"\"\"\n    print(argv)\n    for i, v in enumerate(argv):\n        print(\"argv[{0}]: {1}\".format(i, v))\n    \"\"\"\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 83, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nstring encode(int num) {\n    string result = \"\";\n    while (num > 0) {\n        result = char('A' + (num % 9)) + result;\n        num /= 9;\n    }\n    return result.empty() ? \"A\" : result;\n}\n\nint decode(string alphaNum) {\n    int result = 0;\n    for (char c : alphaNum) {\n        result = result * 9 + (c - 'A');\n    }\n    return result;\n}\n\nstring align(string alphaNum) {\n    string result = \"\";\n    for (char c : alphaNum) {\n        char need = 'H' - c + 'A';\n        if (need < 'A') {\n            need += 9; // wrap around for 9 base\n        }\n        result += need;\n    }\n    \n    return alphaNum + \" + \" + result + \" = \" + string(alphaNum.size(), 'H');\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n\n    string command = argv[1];\n    string argument = argv[2];\n\n    if (command == \"decode\") {\n        cout << decode(argument) << endl;\n    } else if (command == \"encode\") {\n        cout << encode(stoi(argument)) << endl;\n    } else if (command == \"align\") {\n        cout << align(argument) << endl;\n    }\n\n    return 0;\n}"}
{"id": 84, "is_generated": false, "language": "Python3", "code": "import sys\nimport math\nline=sys.argv[1:]\n\ndef enc(x):\n  n=int(math.log(x,9))\n  xen=[]\n  for i in range(n):\n    xen.append(str(x//(9**(n-i))))\n    x%=(9**(n-i))\n  xen.append(str(x))\n  x=''.join(xen)\n  x=x.replace(\"0\",\"A\").replace(\"1\",\"B\").replace(\"2\",\"C\").replace(\"3\",\"D\").replace(\"4\",\"E\")\\\n  .replace(\"5\",\"F\").replace(\"6\",\"G\").replace(\"7\",\"H\").replace(\"8\",\"I\")\n  return x\n\ndef dec(x):\n  x=x.replace(\"A\",\"0\").replace(\"B\",\"1\").replace(\"C\",\"2\").replace(\"D\",\"3\").replace(\"E\",\"4\")\\\n  .replace(\"F\",\"5\").replace(\"G\",\"6\").replace(\"H\",\"7\").replace(\"I\",\"8\")\n  x=list(x)\n  xde=0\n  n=len(x)\n  for i in range(n):xde+=int(x[i])*9**(n-i-1)\n  return xde\n#def ali(x):\nif line[0]==\"encode\":print(enc(int(line[1])))\nelif line[0]==\"decode\":print(dec(line[1]))\n"}
{"id": 85, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 2) {\n      System.out.println(\"Invalid number of arguments provided.\");\n      return;\n    }\n\n    String operation = args[0];\n    String data = args[1];\n\n    switch (operation) {\n      case \"decode\":\n        System.out.println(decodeToDecimal(data));\n        break;\n      case \"encode\":\n        System.out.println(encodeToAlphabet(Integer.parseInt(data)));\n        break;\n      case \"align\":\n        System.out.println(calculateAlignment(data));\n        break;\n      default:\n        System.out.println(\"Unknown operation.\");\n    }\n  }\n\n  private static int decodeToDecimal(String alphabetNumber) {\n    int decimalValue = 0;\n    for (char letter : alphabetNumber.toCharArray()) {\n      decimalValue = decimalValue * 9 + (letter - 'A');\n    }\n    return decimalValue;\n  }\n\n  private static String encodeToAlphabet(int decimalValue) {\n    if (decimalValue == 0) return \"A\";\n    StringBuilder encoded = new StringBuilder();\n    while (decimalValue > 0) {\n      encoded.insert(0, (char) ('A' + decimalValue % 9));\n      decimalValue /= 9;\n    }\n    return encoded.toString();\n  }\n\n  private static String calculateAlignment(String alphabetNumber) {\n    StringBuilder complement = new StringBuilder();\n    for (char letter : alphabetNumber.toCharArray()) {\n      complement.append((char) ('H' + 'A' - letter));\n    }\n    return alphabetNumber + \" + \" + complement + \" = \" + \"H\".repeat(alphabetNumber.length());\n  }\n}"}
{"id": 86, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    // 1\u3064\u306e\u5f15\u6570\u3092\u53d6\u5f97\uff08\u56de\u6570\u306e\u4e0a\u9650\uff09\n    if (args.length != 1) {\n      System.out.println(\"\u5f15\u6570\u306f1\u3064\u3060\u3051\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\");\n      return;\n    }\n    \n    int limit;\n    try {\n      limit = Integer.parseInt(args[0]);\n      if (limit < 0 || limit > 10000) {\n        System.out.println(\"\u5f15\u6570\u306f0~10000\u306e\u6574\u6570\u3067\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\");\n        return;\n      }\n    } catch (NumberFormatException e) {\n      System.out.println(\"\u5f15\u6570\u306f\u6574\u6570\u3067\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\");\n      return;\n    }\n    \n    // \u79e9\u3068\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u3001\u51fa\u529b\n    Random random = new Random();\n    String[] options = {\"\u79e9\", \"\u5e8f\"};\n    StringBuilder output = new StringBuilder();\n    String target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    \n    for (int i = 0; i < limit; i++) {\n      String chosen = options[random.nextInt(2)];\n      System.out.println(chosen);\n      output.append(chosen);\n      \n      // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u6587\u5b57\u5217\u304c\u73fe\u308c\u305f\u3068\u304d\n      if (output.length() >= target.length() &&\n          output.substring(output.length() - target.length()).equals(target)) {\n        System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        return;\n      }\n    }\n    \n    // \u4e0a\u9650\u56de\u6570\u307e\u3067\u751f\u6210\u3057\u3066\u3082\u30bf\u30fc\u30b2\u30c3\u30c8\u304c\u73fe\u308c\u306a\u304b\u3063\u305f\u3068\u304d\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 87, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n      #print(argv[0])\n\n    if argv[0] == \"encode\":\n\n      num = int(argv[1])\n      \n      q = num\n\n      if q <= 9:\n        mod_list = []\n        q_list = [q]\n      \n      else:\n        mod_list = []\n        q_list = []\n\n        while q >= 9:\n          \n          mod = q % 9\n          mod_list.append(mod)\n\n          q = q // 9\n          q_list.append(q)\n\n      enc_list = [q_list[len(q_list)-1]] + mod_list[::-1]\n\n      enc = \"\"\n        \n      for i in range(len(enc_list)):\n\n        if enc_list[i] == 0:\n          a = \"A\"\n        elif enc_list[i] == 1:\n          a = \"B\"\n        elif enc_list[i] == 2:\n          a = \"C\"\n        elif enc_list[i] == 3:\n          a = \"D\"\n        elif enc_list[i] == 4:\n          a = \"E\"\n        elif enc_list[i] == 5:\n          a = \"F\"\n        elif enc_list[i] == 6:\n          a = \"G\"\n        elif enc_list[i] == 7:\n          a = \"H\"\n        elif enc_list[i] == 8:\n          a = \"I\"\n        \n        enc = enc + a\n\n      print(enc)\n    \n    elif argv[0] == \"decode\":\n\n      str_list = list(argv[1])\n\n      dec = 0\n\n      for i in range(len(str_list)):\n\n        a = 0\n\n        if str_list[i] == \"A\":\n          a = 0\n        elif str_list[i] == \"B\":\n          a = 1\n        elif str_list[i] == \"C\":\n          a = 2\n        elif str_list[i] == \"D\":\n          a = 3\n        elif str_list[i] == \"E\":\n          a = 4\n        elif str_list[i] == \"F\":\n          a = 5\n        elif str_list[i] == \"G\":\n          a = 6\n        elif str_list[i] == \"H\":\n          a = 7\n        elif str_list[i] == \"I\":\n          a = 8\n\n        b = a * 9 ** (len(str_list)-i-1)\n\n        dec += b\n\n      print(dec)\n\n      print()\n\n    elif argv[0] == \"align\":\n      print()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 88, "is_generated": true, "language": "Java", "code": "import java.util.Random;\n\npublic class App {\n    public static void main(String[] args) {\n        // \u5f15\u6570\u304c\u306a\u3044\u5834\u5408\u3084\u4e0d\u6b63\u306a\u5834\u5408\u306e\u30c1\u30a7\u30c3\u30af\n        if (args.length != 1) {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n            return;\n        }\n\n        int limit;\n        try {\n            limit = Integer.parseInt(args[0]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n            return;\n        }\n\n        if (limit < 0 || limit > 10000) {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n            return;\n        }\n\n        Random rand = new Random();\n        StringBuilder output = new StringBuilder();\n        String target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n        boolean found = false;\n\n        for (int i = 0; i < limit; i++) {\n            String nextChar = rand.nextBoolean() ? \"\u79e9\" : \"\u5e8f\";\n            output.append(nextChar);\n            System.out.println(nextChar);\n            \n            // Check if the target is found in the output\n            if (output.toString().contains(target)) {\n                found = true;\n                break;\n            }\n        }\n\n        if (found) {\n            System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        } else {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n        }\n    }\n}"}
{"id": 89, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef Base_10_to_9(X):\n  if X==0:\n    out = 0\n  else:\n    X_dumy = X\n    out = ''\n    while X_dumy>0:\n        out = str(X_dumy%9)+out\n        X_dumy = int(X_dumy/9)\n  return out\n\ndef Base_9_to_10(X):\n  out = 0\n  for i in range(1,len(str(X))+1):\n      out += int(X[-i])*(9**(i-1))\n  return out\n\ndef decode(text):\n  lst = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n  vals = 0\n  i = 1\n  for string in text[::-1]:\n    vals += ([i for i, x in enumerate(lst) if x == string][0])*i\n    i*=9\n  return vals\n\ndef encode(num_vals):\n  lst = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n  num_vals = str(Base_10_to_9(int(num_vals)))\n  ans = \"\"\n  for num_val in num_vals:\n    ans += lst[int(num_val)]\n  return ans\n\ndef align(text):\n  num_val = decode(text)\n  while True:\n    val1 = \"0\"\n    val2 = \"7\"\n    if (int(val1)<= num_val) and (int(val2) >= num_val):\n      break\n    val1 = val2\n    val2 += \"7\"\n  ans_num = str(Base_10_to_9(Base_9_to_10(str(val2)) - Base_9_to_10(str(num_val))))\n  lst = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n  ans = \"\"\n  for num_val in ans_num:\n    ans += lst[int(num_val)]\n  ans2 = \"\"\n  for num_val in val2:\n    ans2 += lst[int(num_val)]\n  return text+\" + \"+ans+\" = \"+ans2\n\ndef main(argv):\n    output_type = argv[0]\n    input_val = argv[1]\n    if output_type == \"decode\":\n      ans = decode(input_val)\n    elif output_type == \"encode\":\n      ans = encode(input_val)\n    elif output_type == \"align\":\n      ans = align(input_val)\n    print(ans)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 90, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode(s):\n    result = 0\n    for ch in s:\n        result = result * 9 + (ord(ch) - 65)\n    return result\n\ndef encode(num):\n    if num == 0:\n        return 'A'\n    res = []\n    while num > 0:\n        res.append(chr(65 + (num % 9)))\n        num //=9\n    res.reverse()\n    return ''.join(res)\n\ndef align(s):\n    tgt = 7  # H corresponds to 7\n    digits = [ord(c) - 65 for c in s]\n    res = []\n    carry = 0\n    for d in reversed(digits):\n        x = (tgt - d - carry) % 9\n        carry = (d + x + carry) // 9 -1\n        res.append(x)\n    res.reverse()\n    add_str = ''.join(chr(65 + x) for x in res)\n    sum_val = decode(s) + decode(add_str)\n    sum_str = encode(sum_val)\n    return f\"{s} + {add_str} = {sum_str}\"\n\ndef main(argv):\n    cmd, arg = argv[0], argv[1]\n    if cmd == \"decode\":\n        print(decode(arg))\n    elif cmd == \"encode\":\n        num = int(arg)\n        print(encode(num))\n    else:\n        print(align(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 91, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef DECODE(n):\n  dic = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8}\n  N = list(n)\n  N.reverse()\n  result = 0\n  for i, alpha in enumerate(N):\n    #print(alpha, dic[alpha])\n    result += dic[alpha] * 9 ** i\n  \n  return result\n\ndef ENCODE(n):\n  dic_r = {'0': 'A', '1': 'B', '2': 'C', '3': 'D', '4': 'E', '5': 'F', '6': 'G', '7': 'H', '8': 'I'}\n  N = int(n)\n\n  result = []\n  while True:\n    result.append(dic_r[str(N % 9)])\n\n    if N // 9 == 0:\n      break \n    \n    N = N // 9\n  \n  result.reverse()\n  \n  return ''.join(result)\n\n\ndef main(argv):\n  command, n = argv[0], argv[1]\n  dic = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8}\n  dic_r = {'0': 'A', '1': 'B', '2': 'C', '3': 'D', '4': 'E', '5': 'F', '6': 'G', '7': 'H', '8': 'I'}\n\n  if command == 'decode':\n    print(DECODE(n))\n  \n  elif command == 'encode':\n    print(ENCODE(n))\n  \n  elif command == 'align':\n    NN = n\n    N = list(n)\n    N.reverse()\n    decode = 0\n    for i, alpha in enumerate(N):\n      #print(alpha, dic[alpha])\n      decode += dic[alpha] * 9 ** i\n    \n    test = []\n    test.append('H')\n    while True:\n\n      N = list(test)\n      N.reverse()\n      test_de = 0\n      for i, alpha in enumerate(N):\n        #print(alpha, dic[alpha])\n        test_de += dic[alpha] * 9 ** i\n\n      if int(test_de) >= int(decode):\n        break\n      else:\n        test.append('H')\n      \n    SUM = ''.join(test)\n    \n    SUM_de = DECODE(SUM)\n\n    dif = int(SUM_de) - int(decode)\n\n    dif_en = ENCODE(dif)\n\n    \n    print(NN + ' + ' + dif_en + ' = ' + SUM)\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 92, "is_generated": false, "language": "Python3", "code": "import sys\ndef main(argv):\n    def decode(arr):\n        dic = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8}\n        sum = 0\n        arr = arr[::-1]\n        for i in range(len(arr)):\n            sum += 9**(i)*dic[arr[i]]\n        #print(sum)\n        return sum\n    def encode(n):\n        n = int(n)\n        arr = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8}\n        dic1 = {v: k for k, v in arr.items()}\n        a=[0,1,2,3,4,5,6,7,8,9]\n        b=[]\n        while True:\n            s=n//9#\u5546\n            y=n%9#\u4f59\u6570\n            b=b+[y]\n            if s==0:\n                break\n            n=s\n        b.reverse()\n        rip = []\n        for i in b:\n            #print(cxk[a[i]],end='')\n            rip.append(dic1[a[i]])\n        # print(\"\")\n        return \"\".join(rip)\n    def align(s):\n        nums = \"H\" * len(s)\n        r = decode(nums)\n        sh = (r - decode(s))\n        if r - decode(s) < 0:\n            nums = \"H\" * (len(s) + 1)\n            r = decode(nums)\n            sh = encode(r - decode(s))\n        else:\n            sh = encode(sh)\n        print (s + \" + \" + sh + \" = \" + nums)     \n    #argv = argv.split()\n    command = argv[0]\n    compt = argv[1]\n    if command == \"decode\":\n        res = decode(compt)\n        print(res)\n    if command == \"encode\":\n        res = encode(compt)\n        print(res)\n    if command == \"align\":\n        res = align(compt)\n        \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 93, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n  static String ENCODE_CHARS = \"ABCDEFGHI\";\n\n  public static void main(String[] args) {\n    if (args.length < 2) return;\n    String cmd = args[0], arg = args[1];\n\n    if (cmd.equals(\"decode\")) {\n      System.out.println(alphaDecode(arg));\n    } else if (cmd.equals(\"encode\")) {\n      System.out.println(decimalEncode(new BigInteger(arg)));\n    } else if (cmd.equals(\"align\")) {\n      System.out.println(alphaAlign(arg));\n    }\n  }\n\n  static BigInteger alphaDecode(String s) {\n    BigInteger res = BigInteger.ZERO;\n    for (char c : s.toCharArray()) {\n      res = res.multiply(BigInteger.valueOf(9))\n        .add(BigInteger.valueOf((int)(c-'A')));\n    }\n    return res;\n  }\n\n  static String decimalEncode(BigInteger n) {\n    if (n.equals(BigInteger.ZERO)) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (n.compareTo(BigInteger.ZERO) > 0) {\n      int rem = n.mod(BigInteger.valueOf(9)).intValue();\n      sb.append((char)('A' + rem));\n      n = n.divide(BigInteger.valueOf(9));\n    }\n    return sb.reverse().toString();\n  }\n\n  static String alphaAlign(String s) {\n    StringBuilder needed = new StringBuilder();\n    int len = s.length();\n    for (int i = 0; i < len; ++i) {\n      int d = (7 - (s.charAt(i) - 'A') + 9) % 9;\n      needed.append((char)('A'+d));\n    }\n    StringBuilder tgt = new StringBuilder();\n    for (int i = 0; i < len; ++i) tgt.append('H');\n    return trimA(s) + \" + \" + trimA(needed.toString()) + \" = \" + trimA(tgt.toString());\n  }\n\n  static String trimA(String s) {\n    int j = 0;\n    while (j < s.length() - 1 && s.charAt(j) == 'A') ++j;\n    return s.substring(j);\n  }\n}"}
{"id": 94, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef to_nine(X):\n    if int(X/9):\n        return to_nine(int(X/9))+str(X%9)\n    return str(X%9)\n\ndef encode(number):\n    number = int(number)\n    number = int(to_nine(number))\n    list_num = []\n    while number > 0:\n       list_num.append(number%10)\n       number //=10\n    new_list = []\n    for i,j in enumerate(list_num):\n        new_list.append(chr(j+65))\n    new_list2 = []\n    for i in new_list[::-1]:\n        new_list2.append(i)\n    mojiretsu = \"\"\n    for i in new_list2:\n        mojiretsu += i\n    return mojiretsu\n\n\ndef decode(moji):\n    tmp = list(moji)\n    for i in range(len(tmp)):\n        tmp[i] = ord(tmp[i])-65\n    result = 0\n    for i,j in enumerate(tmp):\n        result += (9**(len(tmp)-1-i))*j\n    return result\n\n\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        result = decode(argv[1])\n    if argv[0] == \"encode\":\n        result = encode(argv[1])\n    print(result)\n\n\nif __name__ =='__main__':\n    main(sys.argv[1:])"}
{"id": 95, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n// --- Start of hypothetical bignum library ---\n#define BN_MAX_DIGITS 300\ntypedef struct {\n    int d[BN_MAX_DIGITS]; // digits stored in reverse\n    int len;\n} bn;\n\nvoid bn_init(bn *n) {\n    memset(n->d, 0, sizeof(n->d));\n    n->len = 1;\n}\n\nvoid bn_from_dec_str(bn *n, const char *s) {\n    bn_init(n);\n    int s_len = strlen(s);\n    if (s_len == 1 && s[0] == '0') return;\n    n->len = s_len;\n    for (int i = 0; i < s_len; i++) {\n        n->d[i] = s[s_len - 1 - i] - '0';\n    }\n}\n\nvoid bn_to_dec_str(const bn *n, char *s) {\n    if (n->len == 1 && n->d[0] == 0) {\n        strcpy(s, \"0\");\n        return;\n    }\n    int k = 0;\n    for (int i = n->len - 1; i >= 0; i--) {\n        s[k++] = n->d[i] + '0';\n    }\n    s[k] = '\\0';\n}\n\nvoid bn_mul_small(bn *n, int val) {\n    long long carry = 0;\n    for (int i = 0; i < n->len; i++) {\n        long long temp = (long long)n->d[i] * val + carry;\n        n->d[i] = temp % 10;\n        carry = temp / 10;\n    }\n    while (carry > 0) {\n        n->d[n->len++] = carry % 10;\n        carry /= 10;\n    }\n}\n\nvoid bn_add_small(bn *n, int val) {\n    long long carry = val;\n    for (int i = 0; i < n->len && carry > 0; i++) {\n        long long temp = n->d[i] + carry;\n        n->d[i] = temp % 10;\n        carry = temp / 10;\n    }\n    while (carry > 0) {\n        n->d[n->len++] = carry % 10;\n        carry /= 10;\n    }\n}\n\nint bn_div_small(bn *n, int val) {\n    long long rem = 0;\n    for (int i = n->len - 1; i >= 0; i--) {\n        long long temp = n->d[i] + rem * 10;\n        n->d[i] = temp / val;\n        rem = temp % val;\n    }\n    while (n->len > 1 && n->d[n->len - 1] == 0) {\n        n->len--;\n    }\n    return rem;\n}\n\nint bn_is_zero(const bn *n) {\n    return n->len == 1 && n->d[0] == 0;\n}\n// --- End of hypothetical bignum library ---\n\nvoid process_decode(const char *alpha) {\n    bn n;\n    bn_init(&n);\n    for (int i = 0; alpha[i]; i++) {\n        bn_mul_small(&n, 9);\n        bn_add_small(&n, alpha[i] - 'A');\n    }\n    char dec_str[BN_MAX_DIGITS];\n    bn_to_dec_str(&n, dec_str);\n    puts(dec_str);\n}\n\nvoid process_encode(const char *dec) {\n    if (strcmp(dec, \"0\") == 0) {\n        puts(\"A\");\n        return;\n    }\n    bn n;\n    bn_from_dec_str(&n, dec);\n    char alpha_str[BN_MAX_DIGITS] = {0};\n    int k = 0;\n    while (!bn_is_zero(&n)) {\n        int rem = bn_div_small(&n, 9);\n        alpha_str[k++] = rem + 'A';\n    }\n    for (int i = 0; i < k / 2; i++) {\n        char t = alpha_str[i]; alpha_str[i] = alpha_str[k-1-i]; alpha_str[k-1-i] = t;\n    }\n    puts(alpha_str);\n}\n\nvoid process_align(const char *alpha) {\n    int len = strlen(alpha);\n    char h_comp[len + 2];\n    memset(h_comp, 'H', len); h_comp[len] = '\\0';\n    \n    int target_len = len;\n    if (strcmp(alpha, h_comp) > 0) target_len = len + 1;\n    \n    char target_h[target_len + 2], result_y[target_len + 2];\n    memset(target_h, 'H', target_len); target_h[target_len] = '\\0';\n    result_y[target_len] = '\\0';\n\n    int borrow = 0;\n    for (int i = 0; i < target_len; i++) {\n        int d_x = (i < len) ? alpha[len - 1 - i] - 'A' : 0;\n        int d_y = ('H' - 'A') - d_x - borrow;\n        borrow = (d_y < 0);\n        if (borrow) d_y += 9;\n        result_y[target_len - 1 - i] = d_y + 'A';\n    }\n\n    char *p = result_y;\n    while (*p == 'A' && *(p+1)) p++;\n\n    printf(\"%s + %s = %s\\n\", alpha, p, target_h);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n    if (strcmp(argv[1], \"decode\") == 0) process_decode(argv[2]);\n    else if (strcmp(argv[1], \"encode\") == 0) process_encode(argv[2]);\n    else if (strcmp(argv[1], \"align\") == 0) process_align(argv[2]);\n    return 0;\n}"}
{"id": 96, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode_alpha(s):\n    ans = 0\n    for c in s:\n        ans = ans * 9 + (ord(c) - ord('A'))\n    return ans\n\ndef encode_alpha(num):\n    if num == 0:\n        return 'A'\n    result = ''\n    while num > 0:\n        result = chr(ord('A') + num % 9) + result\n        num //=9\n    return result\n\ndef align_alpha(s):\n    n = len(s)\n    carry = 0\n    result = []\n    for i in range(n-1,-1,-1):\n        x = ord(s[i]) - ord('A') + carry\n        if x > 7:\n            carry = 1\n            val = 7 + 9 - x\n        else:\n            carry = 0\n            val = 7 - x\n        result.append(chr(ord('A') + val))\n    if carry:\n        result.append('A')\n    result.reverse()\n    return ''.join(result)\n\ndef main(argv):\n    cmd, val = argv[0], argv[1]\n    if cmd == 'decode':\n        print(decode_alpha(val))\n    elif cmd == 'encode':\n        print(encode_alpha(int(val)))\n    else:\n        b = align_alpha(val)\n        print(f\"{val} + {b} = {'H'*len(val)}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 97, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n\n    // Converts a character ('A' through 'I') to its corresponding digit (0 through 8).\n    private static int characterToDigit(char c) {\n        return c - 'A';\n    }\n\n    // Converts a digit (0 through 8) to its corresponding character ('A' through 'I').\n    private static char digitToCharacter(int digit) {\n        return (char) ('A' + digit);\n    }\n\n    // Decodes an alphabet number string into its decimal (BigInteger) equivalent.\n    public static BigInteger decodeAlphabetNumber(String alphaNum) {\n        BigInteger resultValue = BigInteger.ZERO;\n        BigInteger baseNine = BigInteger.valueOf(9);\n        for (char character : alphaNum.toCharArray()) {\n            int digitValue = characterToDigit(character);\n            resultValue = resultValue.multiply(baseNine).add(BigInteger.valueOf(digitValue));\n        }\n        return resultValue;\n    }\n\n    // Encodes a decimal (BigInteger) into its alphabet number string equivalent.\n    public static String encodeDecimalNumber(BigInteger decimalNum) {\n        if (decimalNum.equals(BigInteger.ZERO)) {\n            return \"A\"; // Special case for zero\n        }\n\n        StringBuilder alphabetString = new StringBuilder();\n        BigInteger baseNine = BigInteger.valueOf(9);\n        BigInteger currentNum = decimalNum;\n\n        while (currentNum.compareTo(BigInteger.ZERO) > 0) {\n            BigInteger[] divisionResult = currentNum.divideAndRemainder(baseNine);\n            int remainder = divisionResult[1].intValue();\n            alphabetString.append(digitToCharacter(remainder));\n            currentNum = divisionResult[0];\n        }\n        return alphabetString.reverse().toString();\n    }\n\n    // Calculates the alignment string for a given alphabet number.\n    public static String calculateAlignment(String inputAlphaNum) {\n        BigInteger inputDecimalValue = decodeAlphabetNumber(inputAlphaNum);\n        int lengthOfInput = inputAlphaNum.length();\n\n        StringBuilder targetHStringBuilder = new StringBuilder();\n        // Construct a string of 'H's with the same length as the input\n        for (int i = 0; i < lengthOfInput; i++) {\n            targetHStringBuilder.append('H');\n        }\n        BigInteger currentTargetHDecimal = decodeAlphabetNumber(targetHStringBuilder.toString());\n\n        // If the input number is greater than the current 'H' target, extend the target by one more 'H'\n        if (inputDecimalValue.compareTo(currentTargetHDecimal) > 0) {\n            targetHStringBuilder.append('H');\n            currentTargetHDecimal = decodeAlphabetNumber(targetHStringBuilder.toString());\n        }\n\n        BigInteger neededDecimalValue = currentTargetHDecimal.subtract(inputDecimalValue);\n        String neededAlphabetNumber = encodeDecimalNumber(neededDecimalValue);\n\n        return inputAlphaNum + \" + \" + neededAlphabetNumber + \" = \" + targetHStringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        String command = args[0];\n        String value = args[1];\n\n        if (\"decode\".equals(command)) {\n            System.out.println(decodeAlphabetNumber(value));\n        } else if (\"encode\".equals(command)) {\n            System.out.println(encodeDecimalNumber(new BigInteger(value)));\n        } else if (\"align\".equals(command)) {\n            System.out.println(calculateAlignment(value));\n        }\n    }\n}"}
{"id": 98, "is_generated": false, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static void randomNumber(String number) {\n    String pattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    StringBuilder output = new StringBuilder();\n\n    for (int i=0; i< Integer.parseInt(number); i++) {\n      if (Math.round(Math.random()) == 1) {\n        String text = \"\u79e9\";\n        output = output.append(text);\n        if (output.toString().contains(pattern)) {\n          break;\n        }\n      } else {\n        String text = \"\u5e8f\";\n        output = output.append(text);\n        if (output.toString().contains(pattern)) {\n          break;\n        }\n      }\n    }\n\n    for (int i=0; i < output.toString().length(); i++) {\n      System.out.println(output.toString().charAt(i));\n    }\n\n    if (output.toString().contains(pattern)) {\n      System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n    } else {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n    }\n  }\n\n  public static void main(String[] args) {\n    randomNumber(args[0]);\n  }\n}\n"}
{"id": 99, "is_generated": false, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <cstdio>\n#include <math.h>\n\n\nusing namespace std;\n\nstring encode(int num) {\n\tvector<int> moji_num;\n\tvector<char> moji;\n\n\t////////////////\uff19\u9032\u6570\u5909\u63db\n\tint x = num;\n\tint y = 1000;\n\n\tif (num != 0) {\n\t\tfor (int i = 0; x != 0; i++) {\n\t\t\ty = x % 9;\n\t\t\tx = x / 9;\n//\t\t\tcout << \"x = \" << x << endl;\n\t\t\tmoji_num.push_back(y);\n\t\t}\n\t}\n\telse {\n\t\tmoji_num.push_back(0);\n\t}\n\t\n\treverse(moji_num.begin(), moji_num.end());\n\n//\tfor (int i = 0; i < moji_num.size(); i++) {\n//\t\tcout << moji_num[i];\n//\t}\n\n\n\n\n\t/////////////////\u6587\u5b57\u5909\u63db\n\tint k;\n\tchar k_moji;\n\tfor (int i = 0; i < moji_num.size(); i++) {\n\t\tk = 'A' + moji_num[i];\n\t\tk_moji =(char)k;\n\t\tmoji.push_back(k_moji);\n\t}\n//\tfor (int i = 0; i < moji_num.size(); i++) {\n//\t\tcout << moji[i];\n//\t}\n\n\tstring marge= \"\";\n\tfor (int i = 0; i < moji_num.size(); i++) {\n\t\tmarge = marge + moji[i];\n\t}\n\n\treturn marge;\n\n\n\n\t\n}\n\nint decode(string moji) {\n\tvector<int> moji_num;\n\tchar k_moji;\n\tint k;\n\tint sum=0;\n\tfor (int i = 0; i < moji.size(); i++) {\n\t\tk_moji = moji[i];\n\t\tk = k_moji - 'A';\n\t\tmoji_num.push_back(k);\n\t}\n\n\n\n//\tfor (int i = 0; i < moji_num.size(); i++) {\n//\t\tcout << moji_num[i];\n//\t}\n//\tcout << endl;\n\n\treverse(moji_num.begin(), moji_num.end());\n\n\tfor (int i = moji_num.size() - 1; i >= 0; i--) {\n\t\tsum += moji_num[i] * (pow(9,i));\n//\t\tcout << sum << endl;\n\n\t}\n\n\treturn sum;\n\n}\n\n\nint main(int argc, char* argv[]) {\n\n\t\n\tstring zyouken = argv[1];\n\tstring Eng_num = argv[2];\n//\tzyouken = \"align\";\n\tif (zyouken == \"encode\") {\n//\t\tcout << \"in \" << zyouken << endl;\n\n\t\tstring k;\n\t\tint num = stoi(Eng_num);\n\t\tk=encode(num);\n\t\tcout << k << endl;\n\t}\n\telse if (zyouken == \"decode\") {\n//\t\tcout << \"in \" << zyouken << endl;\n\t\tunsigned long long result;\n\t\tresult=decode(Eng_num);\n\t\tcout << result << endl;\n\t}\n\telse if (zyouken == \"align\") {\n//\t\tcout << \"in \" << zyouken << endl;\n\t\tstring align2= Eng_num;\n\n\t\tstring compere=\"\";\n\t\tfor (int i = 0; i < align2.size(); i++) {\n\t\t\tcompere = compere + \"H\";\n\t\t}\n\n//\t\tcout << compere << endl;\n\n\t\tint x = decode(compere);\n\t\tint y = decode(align2);\n\n\t\tif (x - y < 0) {\n\t\t\tcompere = compere + \"H\";\n\t\t\tx = decode(compere);\n\t\t}\n\n\t\tint ans = x - y;\n\t\tstring ans2;\n\t\tans2 = encode(ans);\n\n\t\tcout << align2 << \" + \" << ans2 << \" = \" << compere <<  endl;\n\n\n\n\t\t\n\n\t}\n\t\n\n\treturn 0;\n}"}
{"id": 100, "is_generated": false, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  // \u5909\u63db\u8868\n  const convArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n  switch (argv[0]) {\n    case 'decode':\n      console.log(_decode(argv[1]));\n      break;\n    case 'encode':\n      console.log(_encode(argv[1]));\n      break;\n    case 'align':\n      console.log(_align(argv[1]));\n      break;\n  }\n  \n  // decode\n  function _decode(alpha) {\n    // \u6700\u7d42\u5909\u63db\u7d50\u679c\u683c\u7d0d\u7528\u5909\u6570\n    let result = 0;\n    for (let i = 0; i < alpha.length; i++) {\n      // \u5909\u63db\u8868\u3092\u7528\u3044\u3066\u5909\u63db\n      const decTmp = convArr.indexOf(alpha[i]);\n      // \u500d\u7387\n      const mag = Math.pow(9, (alpha.length - 1 - i));\n      // \u8db3\u3057\u8fbc\u3080\n      result += decTmp * mag;\n    }\n    return result;\n  }\n\n  // encode\n  function _encode(dec) {\n    // \u6700\u7d42\u5909\u63db\u7d50\u679c\u683c\u7d0d\u7528\u5909\u6570\n    let result = '';\n    // 10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db\u3057\u305f\u5f8c\u30eb\u30fc\u30d7\u3067\u56de\u3059\n    dec.toString(9).split('').forEach((i, v) => {\n      // \u5909\u63db\u8868\u3092\u7528\u3044\u3066\u5909\u63db\n      result += convArr[i];\n    });\n    return result;\n  }\n\n  // align\n  function _align(alpha) {\n    let baseAlpha = '';\n    for (let i = 0; i < alpha.length; i++) {\n      baseAlpha += 'H';\n    }\n\n    if (alpha[0] === 'I') {\n      baseAlpha += 'H';\n    }\n\n    const decodeAlpha = _decode(alpha);\n    const decodeBaseAlpha = _decode(baseAlpha);\n    const addAlpha = _encode(decodeBaseAlpha - decodeAlpha);\n\n    return `${alpha} + ${addAlpha} = ${baseAlpha}`;\n  }\n}\n\n\n\nmain(process.argv.slice(2));\n\n"}
{"id": 101, "is_generated": false, "language": "C++", "code": "\n#include <stdio.h>\n#define ll long long int\n#include <queue>\n#include <vector>\n#include <iostream>\n#include <bits/stdc++.h>\n#include <string.h>\n\nusing namespace std;\nchar arr[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };\nll decode(string k);\nstring encode(ll n);\nvoid align(string k);\n\nint main(int argc, char* argv[])\n{\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n        \n        if (strcmp(argv[1], \"decode\") == 0) {\n            string p = argv[2];\n\n            ll total = decode(p);\n            cout << total << \"\\n\";\n        }\n        else if (strcmp(argv[1], \"encode\") == 0) {\n            long yu = strtol(argv[2],NULL,10);\n            string str=encode(yu);\n            cout<<str<<endl;\n        }else if(strcmp(argv[1],\"align\")==0){\n           string k=argv[2];\n           align(k);\n        }\n    \n    return 0;\n}\n\nll decode(string k)\n{\n    int y = k.size();\n   ll total = 0;\n    for (int i = 0; i < y; i++) {\n        int u;\n        for (int j = 0; j < 9; j++) {\n            if (k[i] == arr[j]) {\n                u = j;\n                \n            }\n           \n           \n        } \n               total = total* 9;\n               total += u;\n    }\n    return total;\n}\n\nstring encode(ll n)\n{   int i = 0;\n    string str=\"\";\n    // array to store binary number\n    ll binaryNum[1000];\n    if(n==0){\n        binaryNum[0]=0;\n        i++;\n    }\n    // counter for binary array\n    \n    while (n > 0) {\n\n        // storing remainder in binary array\n        binaryNum[i] = n % 9;\n        n = n / 9;\n        ++i;\n        \n    }\n    \n\n    int lo;\n    // printing code array in reverse order\n    for (int j = i - 1; j >= 0; j--) {\n        lo = binaryNum[j];\n        str+=arr[lo];\n        //cout << arr[lo];\n    }\n\n    return str;\n}\n\nvoid align(string k){\n   int num= decode(k);\n   int total=k.size();\n   string h=\"\";\n   for(int i=0;i<total;i++){\n       h+='H';\n   }\n   if(decode(h)<num){\n       h+='H';\n   }\n   int remainder=decode(h)-decode(k);\n   string remain=encode(remainder);\n   cout<<k<<\" + \"<<remain<<\" = \"<<h<<endl;\n\n\n}\n"}
{"id": 102, "is_generated": true, "language": "Python3", "code": "import sys\nimport random\n\ndef main(args):\n    n = int(args[0]) if args else 0\n    pattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\n    output_chars = []\n    for i in range(n):\n        c = random.choice([\"\u79e9\", \"\u5e8f\"])\n        print(c)\n        output_chars.append(c)\n        if len(output_chars) >= len(pattern):\n            if \"\".join(output_chars[-len(pattern):]) == pattern:\n                print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n                return\n    print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 103, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map a number to Alphabet representation ('A' -> 0, 'B' -> 1,...)\nint letterToValue(char c) {\n    return c - 'A';\n}\n\n// Convert an integer value to a character in Alphabet encoding\nchar valueToLetter(int v) {\n    return 'A' + v;\n}\n\n// Function to encode decimal number to Alphabet-based number\nstring encodeDecimalToAlphabet(long long num) {\n    if (num == 0) return \"A\";\n    string encoded;\n    while (num > 0) {\n        encoded += valueToLetter(num % 9);\n        num /= 9;\n    }\n    reverse(encoded.begin(), encoded.end());\n    return encoded;\n}\n\n// Function to decode Alphabet-based number to decimal\nlong long decodeAlphabetToDecimal(const string& alphabet) {\n    long long decimal = 0;\n    for (char c : alphabet) {\n        decimal = decimal * 9 + letterToValue(c);\n    }\n    return decimal;\n}\n\n// Function to align the alphabet number to all \"H\"\nstring alignToH(const string& inputAlphabet) {\n    string target(inputAlphabet.size(), 'H');\n    long long current = decodeAlphabetToDecimal(inputAlphabet);\n    long long targetValue = decodeAlphabetToDecimal(target);\n    long long difference = targetValue - current;\n    string diffAlphabet = encodeDecimalToAlphabet(difference);\n    return inputAlphabet + \" + \" + diffAlphabet + \" = \" + target;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        cerr << \"Usage: <command> <value>\" << endl;\n        return 1;\n    }\n\n    string command = argv[1];\n    string input = argv[2];\n\n    if (command == \"encode\") {\n        long long num = stoll(input);\n        cout << encodeDecimalToAlphabet(num) << endl;\n    } else if (command == \"decode\") {\n        cout << decodeAlphabetToDecimal(input) << endl;\n    } else if (command == \"align\") {\n        cout << alignToH(input) << endl;\n    } else {\n        cerr << \"Invalid command!\" << endl;\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 104, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <string>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u4e0e\u3048\u3089\u308c\u305f\u56de\u6570\u3060\u3051\u300c\u79e9\u300d\u307e\u305f\u306f\u300c\u5e8f\u300d\u3092\u51fa\u529b\u3057\u307e\u3059\n    if (argc != 2) {\n        cout << \"Usage: \" << argv[0] << \" <number_of_outputs>\" << endl;\n        return 0;\n    }\n\n    int maxOutputs = atoi(argv[1]);\n    if (maxOutputs < 0 || maxOutputs > 10000) {\n        cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << endl;\n        return 0;\n    }\n\n    string target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    string currentOutput = \"\";\n    srand(time(0));\n\n    for (int i = 0; i < maxOutputs; i++) {\n        string character = (rand() % 2 == 0) ? \"\u79e9\" : \"\u5e8f\";\n        cout << character << endl;\n        currentOutput += character;\n\n        if (currentOutput.find(target) != string::npos) {\n            cout << \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\" << endl;\n            return 0;\n        }\n    }\n\n    cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << endl;\n    return 0;\n}"}
{"id": 105, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(alNum):\n  # \u5165\u529b\u3055\u308c\u305f1\u6841\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u76f4\u3059\n  if alNum == 'A':\n    return 0\n  elif alNum == 'B':\n    return 1\n  elif alNum == 'C':\n    return 2\n  elif alNum == 'D':\n    return 3\n  elif alNum == 'E':\n    return 4\n  elif alNum == 'F':\n    return 5\n  elif alNum == 'G':\n    return 6\n  elif alNum == 'H':\n    return 7\n  elif alNum == 'I':\n    return 8\n\ndef encode(Num):\n  # \u5165\u529b\u3055\u308c\u305f1\u6841\u306e10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u76f4\u3059\n  if Num == 0:\n    return 'A'\n  elif Num == 1:\n    return 'B'\n  elif Num == 2:\n    return 'C'\n  elif Num == 3:\n    return 'D'\n  elif Num == 4:\n    return 'E'\n  elif Num == 5:\n    return 'F'\n  elif Num == 6:\n    return 'G'\n  elif Num == 7:\n    return 'H'\n  elif Num == 8:\n    return 'I'\n\ndef main(argv):\n  command = argv[0]       # encode or decode or align\n  Num = argv[1]       # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570 or \u975e\u8ca0\u6574\u6570\n  if command == 'decode':\n    alNum_list = list(Num)\n    len_Num = len(alNum_list)\n    count = 0\n    for i, alNum in enumerate(alNum_list):\n      number = decode(alNum)\n      index = len_Num - (i + 1)\n      count += number*(9**index)\n    print(count)\n  elif command == 'encode':\n    tmp_list = []\n    Num = int(Num)\n    while Num >= 9:\n      Num, mod = divmod(Num, 9)\n      tmp_list.append(mod)\n    tmp_list.append(Num)\n    tmp_list = reversed(tmp_list)\n    alNum = ''\n    for number in tmp_list:\n      alNum_tmp = encode(number)\n      alNum += alNum_tmp\n    print(alNum)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 106, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    def Base_10_to_9(X):\n      X_dumy = X\n      out = ''\n      if X == 0:\n        return \"A\"\n      else:\n        while X_dumy>0:\n            out = str(X_dumy%9)+out\n            X_dumy = int(X_dumy/9)\n        return out\n\n\n\n    dic_encode = {\"0\":\"A\",\"1\":\"B\",\"2\":\"C\",\"3\":\"D\",\"4\":\"E\",\"5\":\"F\",\"6\":\"G\",\"7\":\"H\",\"8\":\"I\"}\n    dic_decode = {v:k for k, v in dic_encode.items()}\n    dic_align = {\"A\":\"H\",\"B\":\"G\",\"C\":\"F\",\"D\":\"E\",\"E\":\"D\",\"F\":\"C\",\"G\":\"B\",\"H\":\"A\",\"I\":\"I\"}\n    \n    if argv[0] == \"encode\":\n      arg_9 = Base_10_to_9(int(argv[1]))\n      a = str()\n      for i in arg_9:\n        a += dic_encode[i]\n      print(a)\n\n    if argv[0] == \"decode\":\n      a = 0\n      l = len(argv[1])\n      for i, v in enumerate(argv[1]):\n        a += int(dic_decode[v])*(9**(l-i-1))\n      \n      print(a)\n    \n    if argv[0] == \"align\":\n      switch = 0\n      a = str()\n      h =str()\n      for j,i in enumerate(argv[1]):\n        i = dic_encode[str(int(dic_decode[i])+switch)]\n        if i == \"I\":\n          switch = 1\n        elif switch == 1 and i == \"A\":\n          switch = 1\n        else:\n          switch = 0\n        if j == 0 and switch == 1:\n          a += \"G\"+dic_align[i]\n          h += \"H\"\n        else:a += dic_align[i]\n        h += \"H\"\n\n      print(argv[1]+ \" + \" +a + \" = \"+ h)\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 107, "is_generated": false, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nvar s = new Array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I');\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  let value = argv[1];\n  switch (argv[0]) {\n    case 'encode':\n      value = encode(parseInt(value));\n      break;\n    case 'decode':\n      value = decode(value.toUpperCase());\n      break;\n    case 'align':\n      value = align(value.toUpperCase());\n      break;\n  }\n\n  console.log(value);\n}\n\nfunction encode(value) {\n  let n = value.toString(9);\n  let ret = \"\";\n  \n  for (let i = 0; i < n.length; i++) {\n    ret += s[parseInt(n.charAt(i))];\n  }\n\n  return ret;\n}\n\nfunction decode(value) {\n  let n = \"\";\n  \n  for (let i = 0; i < value.length; i++) {\n    n += String(s.indexOf(value.charAt(i)));\n  }\n\n  return parseInt(parseInt(n), 9);\n}\n\nfunction align(value) {\n  // \u666e\u901a\u306e9\u9032\u6570\u306b\u5909\u63db\n  let n1 = \"\";  \n  for (let i = 0; i < value.length; i++) {\n    n1 += String(s.indexOf(value.charAt(i)));\n  }\n\n  let len = value.length;\n  let n2 = '7'.repeat(len);\n  let ne = \"\";\n  for (let i = 0; i < n2.length; i++) {\n    let n1c = parseInt(n1.charAt(i));\n    let n2c = parseInt(n2.charAt(i));\n    let nec = n2c - n1c;\n    if (nec < 0) {\n      nec = 8;\n      len = value.length + 1;\n    }\n    ne += String(nec);\n  }\n\n  let ne2 = \"\";\n  \n  for (let i = 0; i < ne.length; i++) {\n    ne2 += s[parseInt(ne.charAt(i))];\n  }\n\n  if (len != value.length) ne2 = 'G' + ne2;\n  \n  return value + \" + \" + ne2 + \" = \" + 'H'.repeat(len);\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 108, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n// 1\u6587\u5b57\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u30890-8\u3078\nint aton(char c) { return c - 'A'; }\n\n// 0-8\u304b\u3089A-I\u3078\nchar ntoa(int n) { return 'A' + n; }\n\nstring do_encode(const string& numstr) {\n  if(numstr == \"0\") return \"A\";\n  string ret;\n  string n = numstr;\n  while(n != \"0\") {\n    int carry = 0;\n    string next;\n    for (char x: n) {\n      int now = carry * 10 + (x - '0');\n      int q = now / 9;\n      int r = now % 9;\n      if (!next.empty() || q) next += (q + '0');\n      carry = r;\n    }\n    ret += ntoa(carry);\n    n = (next.empty() ? \"0\": next);\n  }\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\n\nstring do_decode(const string& alphstr) {\n  string s = alphstr;\n  string dec = \"0\";\n  for (char x: s) {\n    // dec = dec*9 + aton(x)\n    // dec\u306fstring\u3068\u3057\u3066\u6271\u3046\n    int carry = aton(x);\n    string tmp;\n    for (int i=dec.size()-1; i>=0; --i) {\n      int v = (dec[i]-'0')*9 + carry;\n      tmp += '0' + (v % 10);\n      carry = v / 10;\n    }\n    while(carry) { tmp += '0' + (carry%10); carry /= 10; }\n    reverse(tmp.begin(), tmp.end());\n    dec = tmp;\n  }\n  // \u5148\u982d\u306e0\u9664\u53bb\n  int z=0;\n  while(z+1<dec.size() && dec[z]=='0') ++z;\n  return dec.substr(z);\n}\n\nstring do_align(const string& alphstr) {\n  string t, sum;\n  for (char c: alphstr) {\n    int x = aton(c);\n    int y = (7-x+9)%9;\n    t += ntoa(y);\n    sum += 'H';\n  }\n  return alphstr + \" + \" + t + \" = \" + sum;\n}\n\nint main(int argc, char *argv[]) {\n  string cmd = argv[1], in = argv[2];\n  if (cmd==\"encode\") {\n    cout << do_encode(in) << endl;\n  } else if (cmd==\"decode\") {\n    cout << do_decode(in) << endl;\n  } else if (cmd==\"align\") {\n    cout << do_align(in) << endl;\n  }\n  return 0;\n}"}
{"id": 109, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(x):\n    num = 1\n    ans = 0\n    for i in reversed(x):\n        i = ord(i) - ord(\"A\")\n        ans += i*num\n        num *= 9\n    return ans\n\ndef base_num(n, b):\n    if (int(n/b)):\n        return base_num(int(n/b), b) + str(n%b)\n    return str(n%b)\n\ndef encode(x):\n    ans = \"\"\n    for i in base_num(int(x), 9):\n        ans += chr(int(i)+65)\n    return ans\n\n\ndef align(x):\n    num = int(decode(x))\n    ans = int(decode(len(x)*\"H\"))\n    if num <= ans:\n        return x + \" + \" + encode(ans-num) + \" = \" + len(x)*\"H\"\n    else:\n        ans = int(decode(len(x)*\"H\"+\"H\"))\n        return x + \" + \" + encode(ans-num) + \" = \" + len(x)*\"H\"+\"H\"\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        print(decode(argv[1]))\n\n    elif argv[0] == \"encode\":\n        print(encode(argv[1]))\n\n    elif argv[0] == \"align\":\n        print(align(argv[1]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 110, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef to_9(X):\n    if (int(X/9)):\n        return to_9(int(X/9))+str(X%9)\n    return str(X%9)\n\ndef decoder(x):\n  y = 0\n  for i in range(len(x)):\n    y *= 9\n    y += ord(x[i]) - ord('A')\n  return y\n\ndef encoder(x):\n  x9 = to_9(x)\n  y = ''\n  for i in str(x9):\n    y += chr(int(i)+ord('A'))\n  return y\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n    if argv[0] == 'decode':\n      y = decoder(argv[1]) \n      print(y)\n    elif argv[0] == 'encode':\n      y = encoder(int(argv[1]))\n      print(y)\n    elif argv[0] == 'align':\n      x = argv[1]\n      y = decoder(x)\n      num = len(x)\n      if x[0] == 'I':\n        num += 1\n      z = encoder(decoder('H'*num) - y)\n      print(x + ' + ' + z + ' = ' + 'H'*num)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 111, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main():\n  sub_command = sys.argv[1]\n  if sub_command == 'encode':\n    num = int(sys.argv[2])\n    a_num = encode(num)\n    print(a_num)\n\n  if sub_command == 'decode':\n    a_num = sys.argv[2]\n    num = decode(a_num)\n    print(num)\n\n  if sub_command == 'align':\n    a_num = sys.argv[2]\n    align_num, Hs = align(a_num)\n    print('{} + {} = {}'.format(a_num, align_num, Hs))\n\n\ndef encode(num):\n  nine_num = ten_to_nine(num)\n  a_num = ''\n  for i in range(len(nine_num)):\n    a_num += chr(int(nine_num[i]) + ord('A'))\n  return a_num\n\n\ndef ten_to_nine(num):\n  if int(num / 9):\n    return ten_to_nine(int(num/9)) + str(num % 9)\n  return str(num % 9)\n\ndef decode(a_num):\n    num = ''\n    for i in range(len(a_num)):\n        num_i = ord(a_num[i]) - ord('A')\n        num += str(num_i)\n    num = int(num, 9)\n    return num\n\n\ndef align(a_num):\n    num = decode(a_num)\n    H_num = -1\n    Hs = ''\n    while (num > H_num):\n        Hs += 'H'\n        H_num = decode(Hs)\n    div_num = H_num - num\n    return(encode(div_num), Hs)\n\nif __name__ == '__main__':\n    main()\n"}
{"id": 112, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alpha_to_decimal(s):\n    n = 0\n    for ch in s:\n        n = n * 9 + (ord(ch) - ord('A'))\n    return n\n\ndef decimal_to_alpha(n):\n    if n == 0:\n        return 'A'\n    digits = []\n    while n > 0:\n        digits.append(chr(ord('A') + n % 9))\n        n //= 9\n    return ''.join(reversed(digits))\n\ndef align(alpha_num):\n    length = len(alpha_num)\n    out1 = alpha_num\n    # H = 7, so we want digit + x = 7 (mod 9)\n    need = []\n    for c in alpha_num:\n        v = ord(c) - ord('A')\n        x = (7 - v) % 9\n        need.append(chr(ord('A') + x))\n    res_add = ''.join(need)\n    res_sum = 'H' * length\n    print(f\"{out1} + {res_add} = {res_sum}\")\n\ndef main(argv):\n    cmd = argv[0]\n    arg = argv[1]\n    if cmd == \"decode\":\n        print(alpha_to_decimal(arg))\n    elif cmd == \"encode\":\n        print(decimal_to_alpha(int(arg)))\n    elif cmd == \"align\":\n        align(arg)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 113, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if argv[0] == 'decode':\n        print(decode(argv[1]))\n\n    if argv[0] == 'encode':\n        print(encode(int(argv[1])))\n\n    if argv[0] == 'align':\n        print(align(argv[1]))\n\n  \ndef decode(chars):\n    a = 0\n    count = 0\n    for s in str(chars[::-1]):\n        a += char_d[s] * 9 ** count\n        count += 1\n    return int(a)\n\n\ndef encode(num):\n    num_l = []\n    while num >= 9:\n        num_l.append(num % 9)\n        num = num // 9\n        \n    num_l.append(num)\n\n    char_l = []\n    for i in num_l[::-1]:\n        char_l.append(num_d[i])\n\n    return ''.join(char_l)\n\n\nif __name__ == '__main__':\n    num_d = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H', 8:'I'}\n    char_d = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8}\n    main(sys.argv[1:])\n"}
{"id": 114, "is_generated": false, "language": "Python3", "code": "import sys\n\n\ndef decode(s):\n    return sum([(ord(s) - 65) * 9**i for i, s in enumerate(s[::-1])])\n\n\ndef encode(s):\n    tmp = int(s)\n    data = []\n    while tmp > 0:\n        tmp, m = tmp // 9, tmp % 9\n        data.append(m)\n    if len(data) == 0:\n        return 'A'\n    results = [chr(i + 65) for i in data[::-1]]\n    return ''.join(results)\n\n\ndef makeH(n):\n    return decode('H' * (n + 1))\n\n\ndef align(s):\n    x = decode(s)\n    n = 0\n    while x > makeH(n):\n        n += 1\n    y = makeH(n)\n    z = y - x\n    return '{} + {} = {}'.format(encode(x), encode(z), encode(y))\n\n\n\nif __name__ == '__main__':\n    subcode = sys.argv[1]\n    number = sys.argv[2]\n    if subcode == 'decode':\n        print(decode(number))\n    elif subcode == 'encode':\n        print(encode(number))\n    elif subcode == 'align':\n        print(align(number))"}
{"id": 115, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 2) {\n      System.out.println(\"Invalid arguments provided.\");\n      return;\n    }\n\n    String action = args[0];\n    String param = args[1];\n\n    if (\"decode\".equals(action)) {\n      System.out.println(decodeAlphabet(param));\n    } else if (\"encode\".equals(action)) {\n      System.out.println(encodeToAlphabet(Integer.parseInt(param)));\n    } else if (\"align\".equals(action)) {\n      System.out.println(calculateAlignment(param));\n    } else {\n      System.out.println(\"Invalid command.\");\n    }\n  }\n\n  private static Integer decodeAlphabet(String str) {\n    int base10Num = 0;\n    for (char ch : str.toCharArray()) {\n      base10Num = base10Num * 9 + (ch - 'A');\n    }\n    return base10Num;\n  }\n\n  private static String encodeToAlphabet(int num) {\n    StringBuilder alphabetNumber = new StringBuilder();\n    while (num > 0) {\n      alphabetNumber.insert(0, (char) ('A' + (num % 9)));\n      num /= 9;\n    }\n    return alphabetNumber.length() == 0 ? \"A\" : alphabetNumber.toString();\n  }\n\n  private static String calculateAlignment(String str) {\n    StringBuilder complement = new StringBuilder();\n    for (char ch : str.toCharArray()) {\n      complement.append((char) ('H' + 'A' - ch));\n    }\n    return str + \" + \" + complement + \" = \" + \"H\".repeat(str.length());\n  }\n}"}
{"id": 116, "is_generated": false, "language": "C++", "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#define MAX_SIZE 220\n#define MAX_ENCODE_SIZE 250\nusing namespace std;\n\n//\u30009\u9032\u6570\u306e\u6587\u5b57\u309210\u9032\u6570\u306e\u6841\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u8a08\u7b97\u95a2\u6570\nvoid calc(int num, int keta,int *numchange) {\n\tnumchange[0] = num;\n\tint amari = 0;\n\tint ketaagari = 0;\n\tint clacnum[MAX_SIZE] = { 0 };\n\tint flag = -1;\n\tint instant;\n\tfor (int i = 0; i < keta; i++) {\n\t\tfor (int t = 0; t < MAX_SIZE; t++) {\n\t\t\tinstant = ketaagari;\n\t\t\tketaagari = (numchange[t]*9 +instant)/10;\n\t\t\tnumchange[t] = (numchange[t] * 9 + instant)%10;\n\t\t\t\n\t\t}\n\t}\n}\n\n//comand decode \u306e\u6642\nvoid decode(string s) {\n\tint resultnum[MAX_SIZE] = { 0 };\n\tint resultketa = 0;\n\tint num;\n\tint flag = -1;\n  //\u6587\u5b57\u3092\u4e00\u6841\u305a\u30649\u9032\u6570\u306e\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tint numchange[MAX_SIZE] = { 0 };\n\t\tif (s[i] == 'A') {\n\t\t\tnum = 0;\t\t}\n\t\telse if (s[i] == 'B') {\n\t\t\tnum = 1;\n\t\t}\n\t\telse if (s[i] == 'C') {\n\t\t\tnum = 2;\n\t\t}\n\t\telse if (s[i] == 'D') {\n\t\t\tnum = 3;\n\t\t}\n\t\telse if (s[i] == 'E') {\n\t\t\tnum = 4;\n\t\t}\n\t\telse if (s[i] == 'F') {\n\t\t\tnum = 5;\n\t\t}\n\t\telse if (s[i] == 'G') {\n\t\t\tnum = 6;\n\t\t}\n\t\telse if (s[i] == 'H') {\n\t\t\tnum = 7;\n\t\t}\n\t\telse if (s[i] == 'I') {\n\t\t\tnum = 8;\n\t\t}\n    //\u4e0a\u4f4ds,size()\u6841\u306e9\u9032\u6570\u309210\u9032\u6570\u6841\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\n\t\tcalc(num, s.size() - 1 - i, numchange);\n    //\u4e0a\u4f4ds,size()\u6841\u306e9\u9032\u6570\u309210\u9032\u6570\u6841\u914d\u5217\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3092\u52a0\u7b97\u3057\u30019\u9032\u6570\u219210\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3002\n\t\tfor (int v = 0; v < MAX_SIZE; v++) {\n\t\t\tresultnum[v] += numchange[v];\n\t\t}\n\t}\n\n\tint amari2 = 0;\n\tint ketaagari = 0;\n\tint instant;\n\tstring answer = \"\";\n  //resultnum\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u6841\u306e\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u304c\u300110\u4ee5\u4e0a\u306e\u7269\u3082\u5b58\u5728\u3059\u308b\u306e\u3067\u6841\u4e0a\u304c\u308a\u3092\u884c\u3044\u3001\u6b63\u3057\u304410\u9032\u6570\u8868\u8a18\u306b\u3059\u308b\u3002\n\tfor (int v = 0; v < MAX_SIZE; v++) {\n\t\tinstant = ketaagari;\n\t\tketaagari = (resultnum[v] + instant) / 10;\n\t\tresultnum[v] = (resultnum[v] + instant) % 10;\n\t}\n\tfor (int v = MAX_SIZE - 1; v >=0; v--) {\n    if(s ==\"A\"){\n      answer = \"0\";\n      break;\n    }\n     \n\t\tif (resultnum[v] == 0 && flag == -1 ) {\n\t\t}\n\t\telse {\n\t\t\tanswer = answer + to_string(resultnum[v]);\n\t\t\tflag = 1;\n\t\t}\n\t}\n\tstd::cout << answer<<std::endl;\n}\n\nvoid encode(string s) {\n\tstring resultnum=\"\";\n\tint number_array[MAX_ENCODE_SIZE] = { 0 };\n\tstring num;\n\tint flag = 1;\n\tint kurisage = 0;\n\tint instant = 0;\n\tint zeroflag = 1;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tnum = s[i];\n\t\tnumber_array[i] = stoi(num);\n\t}\n\t\n\twhile (1) {\n\t\tzeroflag = 1;\n\t\tfor (int t = 0; t < s.size(); t++) {\n\t\t\tif (number_array[t] != 0)\n\t\t\t\tzeroflag = -1;\n\t\t}\n\t\tif (zeroflag == 1)\n\t\t\tbreak;\n\n\t\tfor (int keta = 0; keta < s.size(); keta++) {\n\t\t\tinstant = kurisage;\n\t\t\tkurisage = (instant * 10 + number_array[keta]) % 9;\n\t\t\tnumber_array[keta] = (instant * 10 + number_array[keta]) / 9;\n\t\t}\n\n\t\tif (kurisage ==0) {\n\t\t\tresultnum = resultnum + \"A\";\n\t\t}\n\t\telse if (kurisage == 1) {\n\t\t\tresultnum = resultnum + \"B\";\n\t\t}\n\t\telse if (kurisage == 2) {\n\t\t\tresultnum = resultnum + \"C\";\n\t\t}\n\t\telse if (kurisage == 3) {\n\t\t\tresultnum = resultnum + \"D\";\n\t\t}\n\t\telse if (kurisage == 4) {\n\t\t\tresultnum = resultnum + \"E\";\n\t\t}\n\t\telse if (kurisage == 5) {\n\t\t\tresultnum = resultnum + \"F\";\n\t\t}\n\t\telse if (kurisage == 6) {\n\t\t\tresultnum = resultnum + \"G\";\n\t\t}\n\t\telse if (kurisage == 7) {\n\t\t\tresultnum = resultnum + \"H\";\n\t\t}\n\t\telse if (kurisage == 8) {\n\t\t\tresultnum = resultnum + \"I\";\n\t\t}\n\t\tkurisage = 0;\n\t}\n\tstd::reverse(resultnum.begin(), resultnum.end());\n  if(s == \"0\"){\n    std::cout << \"A\";\n  }\n  else{\n    std::cout << resultnum << std::endl;\n  }\n\t\n}\n\nvoid align(string s) {\n\tstring num_str=\"\";\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] == 'A') {\n\t\t\tnum_str = num_str + \"0\";\n\t\t}\n\t\telse if (s[i] == 'B') {\n\t\t\tnum_str = num_str + \"1\";\n\t\t}\n\t\telse if (s[i] == 'C') {\n\t\t\tnum_str = num_str + \"2\";\n\t\t}\n\t\telse if (s[i] == 'D') {\n\t\t\tnum_str = num_str + \"3\";\n\t\t}\n\t\telse if (s[i] == 'E') {\n\t\t\tnum_str = num_str + \"4\";\n\t\t}\n\t\telse if (s[i] == 'F') {\n\t\t\tnum_str = num_str + \"5\";\n\t\t}\n\t\telse if (s[i] == 'G') {\n\t\t\tnum_str = num_str + \"6\";\n\t\t}\n\t\telse if (s[i] == 'H') {\n\t\t\tnum_str = num_str + \"7\";\n\t\t}\n\t\telse if (s[i] == 'I') {\n\t\t\tnum_str = num_str + \"8\";\n\t\t}\n\t}\n\tstd::reverse(num_str.begin(), num_str.end());\n\tstring num;\n\tint number_array[30];\n\tint answer_array[30];\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tnum = num_str[i];\n\t\tnumber_array[i] = stoi(num);\n\t}\n\n\tint h_sabun = 0;\n\tint kurisage_flag = 0;\n\tstring result = \"\";\n\tfor (int i = 0; i < s.size(); i++) {\n\t\th_sabun = 7 - number_array[i] + kurisage_flag;\n\t\tif (h_sabun < 0) {\n\t\t\th_sabun = h_sabun + 9;\n\t\t\tkurisage_flag = -1;\n\t\t}\n\t\telse {\n\t\t\tkurisage_flag = 0;\n\t\t}\n\t\tresult = result + to_string(h_sabun);\n\t}\n\tif (kurisage_flag== -1) {\n\t\tresult = result + to_string(6);\n\t}\n\tstd::reverse(result.begin(), result.end());\n\tstring answer = \"\";\n\n\tfor (int i = 0; i < result.size(); i++) {\n\t\tif (result[i] == '0') {\n\t\t\tanswer = answer + \"A\";\n\t\t}\n\t\telse if (result[i] == '1') {\n\t\t\tanswer = answer + \"B\";\n\t\t}\n\t\telse if (result[i] == '2') {\n\t\t\tanswer = answer + \"C\";\n\t\t}\n\t\telse if (result[i] == '3') {\n\t\t\tanswer = answer + \"D\";\n\t\t}\n\t\telse if (result[i] == '4') {\n\t\t\tanswer = answer + \"E\";\n\t\t}\n\t\telse if (result[i] == '5') {\n\t\t\tanswer = answer + \"F\";\n\t\t}\n\t\telse if (result[i] == '6') {\n\t\t\tanswer = answer + \"G\";\n\t\t}\n\t\telse if (result[i] == '7') {\n\t\t\tanswer = answer + \"H\";\n\t\t}\n\t\telse if (result[i] == '8') {\n\t\t\tanswer = answer + \"I\";\n\t\t}\n\t}\n\tstd::cout << s << \" + \" ;\n  int answerflag =-1;\n  for(int v=0;v<answer.size();v++){\n    if(answerflag==-1&&answer[v] == 'A'&&s.size()!=1){\n\n    }\n    else{\n       std::cout << answer[v] ;\n       answerflag=1;\n    }\n   \n  }\n  std::cout << \" = \" << std::string(result.size(),'H');\n}\n\nint main(int argc, char *argv[]) {\n  string comand = argv[1];\n  string number = argv[2];\n  string comandD = \"decode\", comandE = \"encode\", comandA = \"align\";\n  if (comand == comandD) {\n\t\tdecode(number);\n\t}\n\telse if (comand == comandE) {\n\t\tencode(number);\n\t}\n\telse if (comand == comandA) {\n\t\talign(number);\n\t}\n  return 0;\n}\n"}
{"id": 117, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u6574\u6570\u3068\u3057\u3066\u89e3\u6790\n    int limitIterations = Integer.parseInt(args[0]);\n\n    // 0\u56de\u5b9f\u884c\u306e\u5834\u5408\u306f\u65e9\u671f\u7d42\u4e86\n    if (limitIterations == 0) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n\n    Random generator = new Random(); // \u4e71\u6570\u751f\u6210\u5668\n    Deque<Character> charWindow = new LinkedList<>(); // \u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u7528\u306eDeque\n    String requiredPhrase = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"; // \u691c\u7d22\u5bfe\u8c61\u306e\u30d5\u30ec\u30fc\u30ba\n    int phraseLength = requiredPhrase.length();\n    boolean matchFound = false;\n\n    // \u6307\u5b9a\u56de\u6570\u307e\u3067\u6587\u5b57\u3092\u751f\u6210\n    for (int k = 0; k < limitIterations; k++) {\n      char nextGeneratedChar;\n      // 0\u304b1\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u6587\u5b57\u3092\u6c7a\u5b9a\n      if (generator.nextInt(2) == 0) {\n        nextGeneratedChar = '\u79e9';\n      } else {\n        nextGeneratedChar = '\u5e8f';\n      }\n      System.out.println(nextGeneratedChar); // \u751f\u6210\u3057\u305f\u6587\u5b57\u3092\u51fa\u529b\n\n      charWindow.addLast(nextGeneratedChar); // Deque\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\n\n      // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u304c\u30d5\u30ec\u30fc\u30ba\u9577\u3092\u8d85\u3048\u305f\u3089\u5148\u982d\u3092\u524a\u9664\n      if (charWindow.size() > phraseLength) {\n        charWindow.removeFirst();\n      }\n\n      // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u304c\u30d5\u30ec\u30fc\u30ba\u9577\u3068\u4e00\u81f4\u3057\u305f\u3089\u30d1\u30bf\u30fc\u30f3\u6bd4\u8f03\n      if (charWindow.size() == phraseLength) {\n        StringBuilder currentWindowString = new StringBuilder();\n        // Deque\u306e\u5185\u5bb9\u304b\u3089\u6587\u5b57\u5217\u3092\u518d\u69cb\u7bc9\n        for (char c : charWindow) {\n          currentWindowString.append(c);\n        }\n        // \u30d1\u30bf\u30fc\u30f3\u304c\u4e00\u81f4\u3057\u305f\u3089\u7d42\u4e86\n        if (currentWindowString.toString().equals(requiredPhrase)) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          matchFound = true;\n          break;\n        }\n      }\n    }\n\n    // \u30eb\u30fc\u30d7\u7d42\u4e86\u307e\u3067\u306b\u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\n    if (!matchFound) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n    }\n  }\n}"}
{"id": 118, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// 9\u9032\u6570\u7528\u306e\u6587\u5b57\u96c6\u5408\nconst char alpha_digits[] = \"ABCDEFGHI\";\n\n// 10\u9032\u2192\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\uff089\u9032\u6570\u8a18\u6cd5 A\uff5eI\uff09\nvoid encode(const char *num_str) {\n  char result[220] = {0};\n  int res_idx = 0;\n  int n = strlen(num_str);\n  int digits[220] = {0};\n  int dlen = 0;\n\n  // 10\u9032\u5165\u529b\u3092\u9006\u9806int\u914d\u5217\u306b\u683c\u7d0d\n  for (int i = 0; i < n; ++i) {\n    digits[i] = num_str[n-1-i] - '0';\n    dlen++;\n  }\n  if (dlen == 1 && digits[0] == 0) {\n    printf(\"A\\n\");\n    return;\n  }\n\n  // 10\u9032 big integer -> 9\u9032\u6570 1\u6841\u305a\u3064division\n  while (dlen > 0) {\n    int rem = 0;\n    int next_digits[220] = {0};\n    int nextlen = 0;\n    int started = 0;\n    for (int j = dlen-1; j >= 0; --j) {\n      int cur = rem * 10 + digits[j];\n      int q = cur / 9;\n      rem = cur % 9;\n      if (q != 0 || started) {\n        next_digits[nextlen++] = q;\n        started = 1;\n      }\n    }\n    result[res_idx++] = alpha_digits[rem];\n    memcpy(digits, next_digits, sizeof(next_digits));\n    dlen = nextlen;\n  }\n  // reverse\n  for (int i = res_idx-1; i >= 0; --i) putchar(result[i]);\n  putchar('\\n');\n}\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570(9\u9032)\u219210\u9032\u6570\u3067\u51fa\u529b\nvoid decode(const char *s) {\n  unsigned char alpha_to_num[256];\n  memset(alpha_to_num, 0xff, 256);\n  for (int i = 0; i < 9; ++i)\n    alpha_to_num[(unsigned char)('A'+i)] = i;\n\n  int len = strlen(s);\n  int out[240] = {0}; // \u5341\u5206\u306a\u9577\u3055\n  int olen = 1;\n  out[0] = 0;\n\n  for (int i = 0; i < len; ++i) {\n    int digit = alpha_to_num[(unsigned char)s[i]];\n    int carry = digit;\n    for (int j = 0; j < olen; ++j) {\n      int v = out[j]*9 + carry;\n      out[j] = v%10;\n      carry = v/10;\n    }\n    while (carry) {\n      out[olen++] = carry%10;\n      carry /= 10;\n    }\n  }\n  for (int i = olen-1; i >= 0; --i) printf(\"%d\", out[i]);\n  putchar('\\n');\n}\n\n// align: S + X = HHH...\nvoid align(const char *s) {\n  int len = strlen(s);\n  char wantchar = 'H';\n  int want = wantchar - 'A'; // 7\n  char x[35];\n  for (int i = 0; i < len; i++) {\n    int digit = s[i] - 'A';\n    int val = (want - digit + 9) % 9;\n    x[i] = alpha_digits[val];\n  }\n  x[len] = '\\0';\n  // S + X = \u5f97\u305f\u6587\u5b57\u5217\n  printf(\"%s + %s = \", s, x);\n  for (int i = 0; i < len; i++) putchar(wantchar);\n  putchar('\\n');\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 3) return 1;\n  if (strcmp(argv[1], \"encode\") == 0) {\n    encode(argv[2]);\n  } else if (strcmp(argv[1], \"decode\") == 0) {\n    decode(argv[2]);\n  } else if (strcmp(argv[1], \"align\") == 0) {\n    align(argv[2]);\n  }\n  return 0;\n}"}
{"id": 119, "is_generated": false, "language": "Python3", "code": "import sys\n\n\ndef decode(str):\n    \"\"\"decode\u51e6\u7406\"\"\"\n    result = 0\n\n    for i, s in enumerate(str[::-1]):\n        result +=  (ord(s) - ord(\"A\")) * 9**i\n\n    return result\n\n\n\ndef encode(num):\n    \"\"\"encode\u51e6\u7406\"\"\"\n    result = \"\"\n\n    number = num\n    while number >= 9:\n        result += chr((number % 9) + ord(\"A\"))\n        number = number // 9\n\n    result += chr((number % 9) + ord(\"A\"))\n\n    return result[::-1]\n\n\ndef align(str):\n    \"\"\"align\u51e6\u7406\"\"\"\n    # \u5909\u63db\u5f8c\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\n    number = decode(str)\n    target = \"H\"\n    while number > decode(target):\n        target += \"H\"\n\n    # \u6570\u5024\u306b\u5909\u63db\u3057\u8a08\u7b97\n    result = decode(target) - decode(str)\n\n    # \u6587\u5b57\u5217\u306b\u5909\u63db\n    result = encode(result)\n\n    print(str + \" + \" + result + \" = \" + target)\n\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        print(decode(argv[1]))\n    elif argv[0] == \"encode\":\n        print(encode(int(argv[1])))\n    elif argv[0] == \"align\":\n        align(argv[1])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 120, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode_alpha_num(s):\n    # A=0,...,I=8\n    value = 0\n    for c in s:\n        value = value * 9 + (ord(c) - ord('A'))\n    return value\n\ndef encode_alpha_num(num):\n    if num == 0:\n        return 'A'\n    res = ''\n    while num > 0:\n        res = chr(ord('A') + (num % 9)) + res\n        num //=9\n    return res\n\ndef align_alpha_num(s):\n    n = len(s)\n    # target is all 'H'=7, each digit is 7 in base 9\n    target_digit = 7\n    res = []\n    carry = 0\n    for i in range(n-1, -1, -1):\n        d = ord(s[i]) - ord('A')\n        total = d + carry\n        if total > target_digit:\n            carry = 1\n            res.append(chr(ord('A') + target_digit + 9 - total))\n        else:\n            carry = 0\n            res.append(chr(ord('A') + target_digit - total))\n    if carry > 0:\n        res.append('A')  # carry means add nothing since next would be zero digit\n    res = ''.join(reversed(res))\n    return res\n\ndef main(argv):\n    cmd = argv[0]\n    arg = argv[1]\n    if cmd == 'decode':\n        print(decode_alpha_num(arg))\n    elif cmd == 'encode':\n        print(encode_alpha_num(int(arg)))\n    else: # align\n        add = align_alpha_num(arg)\n        print(f\"{arg} + {add} = {'H'*len(arg)}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 121, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    \n    command, value = argv\n\n    # Helper functions defined inside main for a functional approach.\n    digits_map = \"ABCDEFGHI\"\n    \n    def dec_from_alpha(alpha_str):\n        return sum(digits_map.index(c) * (9 ** (len(alpha_str) - 1 - i)) for i, c in enumerate(alpha_str))\n\n    def alpha_from_dec(dec_num):\n        if dec_num == 0:\n            return 'A'\n        res = ''\n        n = dec_num\n        while n > 0:\n            n, r = divmod(n, 9)\n            res = digits_map[r] + res\n        return res\n\n    def align_op():\n        x_dec = dec_from_alpha(value)\n        length = len(value)\n        \n        z_str = 'H' * length\n        z_dec = dec_from_alpha(z_str)\n        \n        if z_dec < x_dec:\n            length += 1\n            z_str = 'H' * length\n            z_dec = dec_from_alpha(z_str)\n        \n        y_dec = z_dec - x_dec\n        y_str = alpha_from_dec(y_dec)\n        \n        print(f\"{value} + {y_str} = {z_str}\")\n\n    if command == 'decode':\n        print(dec_from_alpha(value))\n    elif command == 'encode':\n        print(alpha_from_dec(int(value)))\n    elif command == 'align':\n        align_op()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 122, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Deque;\nimport java.util.ArrayDeque;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\n    int limit;\n    if (args.length < 1) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n    try {\n      limit = Integer.parseInt(args[0]);\n    } catch (Exception e) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n    if (limit < 0 || limit > 10000) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n    char[] pattern = {'\u79e9','\u5e8f','\u79e9','\u79e9','\u5e8f','\u79e9','\u5e8f'};\n    int plen = pattern.length;\n    Deque<Character> window = new ArrayDeque<>();\n    java.util.Random r = new java.util.Random();\n    for (int i = 0; i < limit; i++) {\n      char c = r.nextBoolean() ? '\u79e9' : '\u5e8f';\n      System.out.println(c);\n      if (window.size() == plen) window.poll();\n      window.offer(c);\n      if (window.size() == plen) {\n        int j = 0;\n        boolean match = true;\n        for (char x : window) {\n          if (x != pattern[j++]) {\n            match = false;\n            break;\n          }\n        }\n        if (match) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 123, "is_generated": false, "language": "Python3", "code": "import sys\n# convert A-I to 0-8\nabc_map = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n\n# A-I\u306e9\u9032\u6570\u309210\u9032\u6570\u306b\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n\n\ndef decode(num):\n  num_list = list(num)\n  decoded_num = 0\n  for i in range(len(num_list)):\n    c = abc_map.index(num_list[len(num_list) - 1 - i])\n    decoded_num = decoded_num + c * 9 ** i\n  return decoded_num\n\n# A-I\u306e9\u9032\u6570\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\n\n\ndef encode(num):\n  if num == 0:\n    return abc_map[0]\n  encoded_str = ''\n  current_num = num\n  while current_num > 0:\n    encoded_str = abc_map[current_num % 9] + encoded_str\n    current_num = current_num // 9\n  return encoded_str\n\n\ndef align(num):\n  decoded_num = decode(num)  # 10\u9032\u6570\u306b\u5909\u63db\u3057\u305f\u5165\u529b\u5024\n  goal = 'H' * len(num)  # \u76ee\u6a19\u306e\u6587\u5b57\u5217\n  # \u5148\u982d\u306e\u6587\u5b57\u304cH\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u76ee\u6a19\u3092\u7e70\u308a\u4e0a\u3052\u308b\n  if num[0] is 'I':\n    goal += 'H'\n  decoded_goal = decode(goal)  # 10\u9032\u6570\u306b\u5909\u63db\u3057\u305f\u76ee\u6a19\u5024\n  s = encode(decoded_goal - decoded_num)  # \u76ee\u6a19\u5024\u3068\u5165\u529b\u5024\u3068\u306e\u5dee(10\u9032\u6570->A-I\u306e\uff19\u9032\u6570)\n  return '%s + %s = %s' % (num, s, goal)\n\n\ndef main(argv):\n  command = argv[0]\n  input_code = argv[1]\n  if command == 'decode':\n    print(decode(input_code))\n  elif command == 'encode':\n    print(encode(int(input_code)))\n  elif command == 'align':\n    print(align(input_code))\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 124, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Numerics;\n\npublic class AlphabetNumberApp\n{\n    static readonly char[] digits = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };\n    static readonly BigInteger baseVal = 9;\n\n    static public void Main(string[] args)\n    {\n        // args[0]: subcommand (encode, decode, align)\n        // args[1]: input string (decimal or alphabet number)\n        string cmd = args[0];\n        string input = args[1];\n\n        if (cmd == \"encode\")\n        {\n            BigInteger decVal = BigInteger.Parse(input);\n            Console.WriteLine(Encode(decVal));\n        }\n        else if (cmd == \"decode\")\n        {\n            Console.WriteLine(Decode(input));\n        }\n        else if (cmd == \"align\")\n        {\n            string toAdd = Align(input);\n            Console.WriteLine($\"{input} + {toAdd} = {MakeAllH(input.Length)}\");\n        }\n    }\n\n    // decimal to alphabet number (base 9)\n    static string Encode(BigInteger dec)\n    {\n        if (dec.IsZero) return \"A\";\n        string res = \"\";\n        while (dec > 0)\n        {\n            BigInteger rem = dec % baseVal;\n            dec /= baseVal;\n            res = digits[(int)rem] + res;\n        }\n        return res;\n    }\n\n    // alphabet number to decimal\n    static BigInteger Decode(string alph)\n    {\n        BigInteger val = 0;\n        foreach (char c in alph)\n        {\n            int d = c - 'A';\n            val = val * baseVal + d;\n        }\n        return val;\n    }\n\n    // align: find the addend so that sum is all 'H'\n    static string Align(string alph)\n    {\n        // each digit: d + x = 7 (H corresponds to 7)\n        // x = 7 - d (if negative, add 9)\n        int n = alph.Length;\n        char[] addChars = new char[n];\n        for (int i = 0; i < n; i++)\n        {\n            int d = alph[i] - 'A';\n            int x = 7 - d;\n            if (x < 0) x += 9;\n            addChars[i] = digits[x];\n        }\n        // normalize leading A if the length is >1:\n        // but x can be zero, that means 'A' allowed if length > 1?\n        // According to problem: leading A only allowed if the number is zero (single A).\n        // So we remove leading A's if present in addChars unless it is the only digit.\n\n        // Remove leading A's on addChars\n        int start = 0;\n        while (start < n - 1 && addChars[start] == 'A') start++;\n        string addStr = new string(addChars, start, n - start);\n        return addStr;\n    }\n\n    static string MakeAllH(int length)\n    {\n        return new string('H', length);\n    }\n}"}
{"id": 125, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alpha_to_dec(alpha_str):\n    val = 0\n    for ch in alpha_str:\n        val = val * 9 + (ord(ch) - ord('A'))\n    return val\n\ndef dec_to_alpha(num):\n    if num == 0:\n        return \"A\"\n    alpha = \"\"\n    while num > 0:\n        alpha = chr(ord(\"A\") + (num % 9)) + alpha\n        num //= 9\n    return alpha\n\ndef align_alpha_num(alpha_str):\n    carry = 0\n    result = []\n    for ch in reversed(alpha_str):\n        n = ord(ch) - ord('A') + carry\n        if n > 7:\n            carry = 1\n            digit = 7 + 9 - n\n        else:\n            carry = 0\n            digit = 7 - n\n        result.append(chr(ord('A') + digit))\n    if carry:\n        result.append(\"A\")\n    result.reverse()\n    return ''.join(result)\n\ndef main(args):\n    cmd, val = args[0], args[1]\n    if cmd == \"encode\":\n        print(dec_to_alpha(int(val)))\n    elif cmd == \"decode\":\n        print(alpha_to_dec(val))\n    else:\n        add_num = align_alpha_num(val)\n        print(f\"{val} + {add_num} = {'H'*len(val)}\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 126, "is_generated": true, "language": "Python3", "code": "import sys\n\n# Mappings for alphabet digits to their decimal values and vice-versa\nALPHABET_TO_DECIMAL = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8}\nDECIMAL_TO_ALPHABET = {v: k for k, v in ALPHABET_TO_DECIMAL.items()}\nBASE_NINE = 9\n\ndef decode_alphabet_number(alpha_str_val):\n    # Converts an alphabet number string to its decimal equivalent.\n    decimal_result = 0\n    power = 0\n    for char_digit in reversed(alpha_str_val):\n        decimal_digit = ALPHABET_TO_DECIMAL[char_digit]\n        decimal_result += decimal_digit * (BASE_NINE ** power)\n        power += 1\n    return decimal_result\n\ndef encode_decimal_number(decimal_val):\n    # Converts a decimal number to its alphabet number string equivalent.\n    if decimal_val == 0:\n        return 'A'\n\n    alpha_digits_list = []\n    current_num = decimal_val\n    while current_num > 0:\n        remainder = current_num % BASE_NINE\n        alpha_digits_list.append(DECIMAL_TO_ALPHABET[remainder])\n        current_num //= BASE_NINE\n    return \"\".join(reversed(alpha_digits_list))\n\ndef align_alphabet_number(input_alpha_str):\n    # Calculates the value to add to reach a number consisting only of 'H's.\n    input_decimal_val = decode_alphabet_number(input_alpha_str)\n    \n    num_digits = len(input_alpha_str)\n    target_alpha_str = 'H' * num_digits\n    target_decimal_val = decode_alphabet_number(target_alpha_str)\n    \n    # If the initial 'H' string is too small, increase its length until it's sufficient.\n    while target_decimal_val < input_decimal_val:\n        num_digits += 1\n        target_alpha_str += 'H'\n        # Efficiently update target_decimal_val: next 'H' string is current * 9 + 7\n        target_decimal_val = target_decimal_val * BASE_NINE + ALPHABET_TO_DECIMAL['H']\n    \n    value_to_add_decimal = target_decimal_val - input_decimal_val\n    value_to_add_alpha = encode_decimal_number(value_to_add_decimal)\n    \n    return f\"{input_alpha_str} + {value_to_add_alpha} = {target_alpha_str}\"\n\ndef main(args):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    command = args[0]\n    value = args[1]\n\n    if command == \"decode\":\n        print(decode_alphabet_number(value))\n    elif command == \"encode\":\n        print(encode_decimal_number(int(value)))\n    elif command == \"align\":\n        print(align_alphabet_number(value))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 127, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\nimport java.lang.StringBuilder;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u5f15\u6570\u304b\u3089\u6700\u5927\u51fa\u529b\u56de\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\n    int maxCount = Integer.parseInt(args[0]);\n\n    // 0\u56de\u6307\u5b9a\u306e\u5834\u5408\u306f\u5373\u5ea7\u306b\u7d42\u4e86\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\n    if (maxCount == 0) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n\n    Random rand = new Random();\n    StringBuilder currentSequence = new StringBuilder();\n    String targetPattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"; // \u76ee\u6a19\u3068\u3059\u308b\u30d1\u30bf\u30fc\u30f3\n    boolean patternFound = false;\n\n    // \u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u6587\u5b57\u3092\u751f\u6210\n    for (int i = 0; i < maxCount; i++) {\n      char charToPrint;\n      // \u30e9\u30f3\u30c0\u30e0\u306b '\u79e9' \u307e\u305f\u306f '\u5e8f' \u3092\u9078\u629e\n      if (rand.nextInt(2) == 0) {\n        charToPrint = '\u79e9';\n      } else {\n        charToPrint = '\u5e8f';\n      }\n      System.out.println(charToPrint); // \u6587\u5b57\u3092\u51fa\u529b\n\n      currentSequence.append(charToPrint); // \u73fe\u5728\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u8ffd\u52a0\n\n      // \u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u76ee\u6a19\u30d1\u30bf\u30fc\u30f3\u3088\u308a\u9577\u304f\u306a\u3063\u305f\u3089\u3001\u4e00\u756a\u53e4\u3044\u6587\u5b57\u3092\u524a\u9664\u3057\u3066\u30b9\u30e9\u30a4\u30c9\n      if (currentSequence.length() > targetPattern.length()) {\n        currentSequence.deleteCharAt(0);\n      }\n\n      // \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9577\u3055\u304c\u76ee\u6a19\u30d1\u30bf\u30fc\u30f3\u3068\u540c\u3058\u306b\u306a\u308a\u3001\u304b\u3064\u30d1\u30bf\u30fc\u30f3\u304c\u4e00\u81f4\u3057\u305f\u5834\u5408\n      if (currentSequence.length() == targetPattern.length() && currentSequence.toString().equals(targetPattern)) {\n        System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        patternFound = true;\n        break; // \u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u30eb\u30fc\u30d7\u3092\u7d42\u4e86\n      }\n    }\n\n    // \u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\n    if (!patternFound) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n    }\n  }\n}"}
{"id": 128, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    #print(argv[0])\n    #print(argv[1])\n    return(0)\n \ndef convert(char):\n\tif(char==\"A\"):\n\t\treturn(0)\n\telif(char==\"B\"):\n\t\treturn(1)\n\telif(char==\"C\"):\n\t\treturn(2) \t\t\n\telif(char==\"D\"):\n\t\treturn(3) \n\telif(char==\"E\"):\n\t\treturn(4) \n\telif(char==\"F\"):\n\t\treturn(5) \t\t\n\telif(char==\"G\"):\n\t\treturn(6) \n\telif(char==\"H\"):\n\t\treturn(7) \n\telif(char==\"I\"):\n\t\treturn(8) \n\tif(char==\"0\"):\n\t\treturn(\"A\")\n\telif(char==\"1\"):\n\t\treturn(\"B\")\n\telif(char==\"2\"):\n\t\treturn(\"C\") \t\t\n\telif(char==\"3\"):\n\t\treturn(\"D\") \n\telif(char==\"4\"):\n\t\treturn(\"E\") \n\telif(char==\"5\"):\n\t\treturn(\"F\") \t\t\n\telif(char==\"6\"):\n\t\treturn(\"G\") \n\telif(char==\"7\"):\n\t\treturn(\"H\") \n\telif(char==\"8\"):\n\t\treturn(\"I\") \t\t\n \t\t\t\t\nif __name__ == '__main__':\n    main(sys.argv[1:])\ncom = sys.argv[1]\nInput_num = sys.argv[2]\nInput = list(str(Input_num))\n#print(com)\n#print(Input)\n\nif(com==\"decode\"):\n\tdecode=0\n\tfor i in range(len(Input)):\n\t\tInput[i] = convert(Input[i])\n\t\tif(i!=len(Input)-1):\n\t\t\tdecode = decode + (pow(9,(len(Input)-i-1)) * Input[i])\n\t\telse:\n\t\t\tdecode = decode + Input[i]\n\tprint(decode)\n\nif(com==\"encode\"):\n  if(len(Input)==1):\n  \tprint(convert(Input[0]))\n  else:\n  \ti=0\n  \tNum = int(Input_num)\n  \tnum = 1\n\n\n  \twhile(Num // num !=0):\n  \t\tnum = num * 9\n  \t\ti = i + 1\n  \t#print(Num)\n  \t#print(num)\n  \t#print(i)\n  \tnum = num / 9\n  \tList = [\"A\"]* i\n  \tfor j in range(i):\n  \t\tList[j]=Num//(num)\n  \t\tNum = Num - (num*List[j])\n  \t\tnum = num / 9\n  \t\tList[j]= convert(str(int(List[j])))\n  \tprint(\"\".join(List))\n\n\n"}
{"id": 129, "is_generated": true, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # pattern to find\n    target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\n\n    if len(argv) < 1:\n        print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n        return\n\n    try:\n        limit = int(argv[0])\n    except:\n        print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n        return\n\n    s = \"\"\n    for _ in range(limit):\n        c = random.choice([\"\u79e9\", \"\u5e8f\"])\n        print(c)\n        s += c\n        if target in s:\n            print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n            return\n    print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 130, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef to_decimal(alpha_s):\n    # Convert alphabet number to decimal.\n    dec_val = 0\n    for char in alpha_s:\n        dec_val = dec_val * 9 + (ord(char) - ord('A'))\n    return dec_val\n\ndef from_decimal(num):\n    if num == 0:\n        return 'A'\n    \n    alpha_val = \"\"\n    n = num\n    while n > 0:\n        remainder = n % 9\n        alpha_val = chr(remainder + ord('A')) + alpha_val\n        n //= 9\n    return alpha_val\n\ndef handle_align(alpha_str):\n    x_dec = to_decimal(alpha_str)\n    length = len(alpha_str)\n    \n    target_h_str = 'H' * length\n    target_h_dec = to_decimal(target_h_str)\n    \n    if x_dec > target_h_dec:\n        length += 1\n        target_h_str = 'H' * length\n        target_h_dec = to_decimal(target_h_str)\n        \n    y_dec = target_h_dec - x_dec\n    y_str = from_decimal(y_dec)\n    \n    print(f\"{alpha_str} + {y_str} = {target_h_str}\")\n\ndef main(argv):\n    subcommand, value = argv\n    \n    if subcommand == 'decode':\n        print(to_decimal(value))\n    elif subcommand == 'encode':\n        print(from_decimal(int(value)))\n    elif subcommand == 'align':\n        handle_align(value)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 131, "is_generated": false, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argv)\n{\n  $v = array('\u79e9', '\u5e8f');\n  $out    = \"\";\n  $result = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n  \n  for($i=0;$i<$argv[1];$i++) {\n    $t = $v[rand(0, 1)];\n    echo($t . \"\\n\");\n    $out = mb_substr($out . $t, -7);\n    if ($out === $result) {\n      echo(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n      exit;\n    }\n  }\n  echo(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n}\n\nrun($argv);"}
{"id": 132, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    enc = {0:\"A\", 1:\"B\", 2:\"C\", 3:\"D\", 4:\"E\", 5:\"F\", 6:\"G\", 7:\"H\", 8:\"I\"}\n    dec = {\"A\":0, \"B\":1, \"C\":2, \"D\":3, \"E\":4, \"F\":5, \"G\":6, \"H\":7, \"I\":8} \n\n    if argv[0]==\"decode\":\n      res = 0\n      l = len(argv[1])\n      for i, v in enumerate(argv[1]):\n        res += dec[v]*9**(l-i-1) \n      print(res)\n    elif argv[0]==\"encode\":\n      tmp = int(argv[1])\n      res = ''\n      while tmp>0:\n        res = enc[tmp%9]+res\n        tmp = int(tmp/9)\n      print(res)\n    elif argv[0]==\"align\":\n      res = 0\n      l = len(argv[1])\n      tf = 0\n      for i, v in enumerate(argv[1]):\n        res += dec[v]*9**(l-i-1) \n        if dec[v]>7:\n          tf = 1\n      ans = ''\n      if tf==1:\n        for i in range(l+1):\n          ans += \"H\" \n      else:\n        for i in range(l):\n          ans += \"H\"\n\n      su = enc[dec[ans]-res]\n      print(\"{0} + {1} = {2}\".format(argv[1], su, ans))\n      \"\"\"\n      res = ''\n      ans = ''\n      for i, v in enumerate(list(reversed(argv[1]))):\n        if dec[v]<=7:\n          res = enc[7 - dec[v]] + res\n          ans = \"H\" + ans\n        else:\n          res = \"GI\" + res\n          ans = \"H\" + ans\n          \n      print(\"{0} + {1} = {2}\".format(argv[1], res, ans))\n      \"\"\"\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 133, "is_generated": true, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n// 'A'\uff5e'I' <-> 0\uff5e8 \u5909\u63db\u30de\u30c3\u30d7\nfunction alpha2num($c) { return ord($c) - ord('A'); }\nfunction num2alpha($n) { return chr(ord('A') + $n); }\n\n// encode: 10\u9032\u6570\u2192\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\nfunction encode($num) {\n  if ($num == '0') return 'A';\n  $res = '';\n  $q = $num;\n  while (bccomp($q, '0') > 0) {\n    $r = bcmod($q, '9');\n    $res = num2alpha((int)$r) . $res;\n    $q = bcdiv($q, '9', 0);\n  }\n  return $res;\n}\n\n// decode: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u219210\u9032\u6570\nfunction decode($alpha) {\n  $n = '0';\n  $len = strlen($alpha);\n  for ($i = 0; $i < $len; $i++) {\n    $d = alpha2num($alpha[$i]);\n    $n = bcadd(bcmul($n, '9'), (string)$d);\n  }\n  return $n;\n}\n\n// align: \u8db3\u3057\u3066\u5168\u6841H\u306b\u306a\u308b\u3088\u3046\u306a\u6570\u5024\nfunction align($alpha) {\n  $len = strlen($alpha);\n  $allH = str_repeat('H',$len);\n  // \u5404\u6841\u3067 (7-\u305d\u306e\u6841) \u306e\u5024\u306b\u3059\u308c\u3070\u5408\u8a087\n  $res = '';\n  for ($i = 0; $i < $len; $i++) {\n    $d = alpha2num($alpha[$i]);\n    $add = (7 - $d + 9) % 9; // 0-8, 7\u3092\u8d8a\u3048\u306a\u3044\u3088\u3046\u306bmod9\n    $res .= num2alpha($add);\n  }\n  return $alpha.' + '.$res.' = '.$allH;\n}\n\nfunction main ($argc, $argv) {\n  $cmd = $argv[0];\n  $val = $argv[1];\n  if ($cmd === 'encode') {\n    echo encode($val).\"\\n\";\n  } else if ($cmd === 'decode') {\n    echo decode($val).\"\\n\";\n  } else if ($cmd === 'align') {\n    echo align($val).\"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 134, "is_generated": false, "language": "Python3", "code": "import sys\n\nnum_dict = {\"A\":0, \"B\":1, \"C\":2, \"D\":3, \"E\":4, \"F\":5, \"G\":6, \"H\":7, \"I\":8}\n\ndef encode_function(number):\n  get_alp = \"\"\n  remainder_list = []\n  while number >= 9:\n    remind = number % 9\n    remainder_list.append(remind)\n    number //= 9\n  remainder_list.append(number)\n\n  for item in remainder_list[::-1]:\n    alp = [key for key, val in num_dict.items() if val == int(item)]\n    get_alp += alp[0]\n  \n  return get_alp\n\n\ndef decode_function(alp):\n  get_num = 0\n  alp_list = list(alp)\n  alp_list.reverse()\n  for index, item in enumerate(alp_list):\n    get_num += num_dict[item] * (9 ** index)\n  return get_num\n\n\ndef align_function(alp):\n  get_num = decode_function(alp)\n  low_h, high_h = decode_function(\"H\"*len(alp)), decode_function(\"H\"*(len(alp)+1))\n\n  plus_value = low_h - get_num if low_h >= get_num else high_h - get_num\n  h_length = len(alp) if low_h >= get_num else len(alp) + 1\n\n  get_plus_alp = encode_function(plus_value)\n\n  return get_plus_alp, h_length\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n\n    if argv[0] == \"encode\":\n      print(encode_function(int(argv[1])))\n    elif argv[0] == \"decode\":\n      print(decode_function(argv[1]))\n    elif argv[0] == \"align\":\n      plus, ans = align_function(argv[1])\n      print(argv[1] + \" + \" + plus + \" = \" + \"H\"*ans)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 135, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode_decimal_to_alpha(num):\n    # 10\u9032\u6570\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570(A=0,...,I=8)\u3078\u5909\u63db\n    if num == 0:\n        return \"A\"\n    alpha = \"\"\n    while num > 0:\n        q = num % 9\n        alpha = chr(ord('A') + q) + alpha\n        num //= 9\n    return alpha\n\ndef decode_alpha_to_decimal(alpha):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u304b\u308910\u9032\u6570\n    value = 0\n    for c in alpha:\n        value = value * 9 + (ord(c) - ord('A'))\n    return value\n\ndef align_alpha_number(alpha):\n    # \u5404\u6841\u3092'7'\u306b\u63c3\u3048\u308b\u3002'A'=0, 'H'=7\n    add = []\n    for c in alpha:\n        d = ord(c) - ord('A')\n        to7 = (7 - d) % 9\n        add.append(chr(ord('A') + to7))\n    addedstr = ''.join(add)\n    result = 'H' * len(alpha)\n    print(f\"{alpha} + {addedstr} = {result}\")\n\ndef main(argv):\n    if argv[0] == \"encode\":\n        n = int(argv[1])\n        print(encode_decimal_to_alpha(n))\n    elif argv[0] == \"decode\":\n        print(decode_alpha_to_decimal(argv[1]))\n    elif argv[0] == \"align\":\n        align_alpha_number(argv[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 136, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(alph_num):\n    num = 0\n    for s in alph_num:\n        if 'A' <= s <= 'I':\n            num *= 9\n            num += ord(s)-ord('A')\n    print(num)\n\ndef encode(dec_num):\n    dec_num = int(dec_num)\n    alph = ''\n    if dec_num == 0:\n        alph = 'A'\n    else:\n        while dec_num>0:\n          temp_s = chr(dec_num%9+ord('A'))\n          alph = temp_s + alph\n          dec_num //= 9\n    print(alph)\n\ndef align(alph_num):\n    out_s = ''\n    flag = 0\n    for s in reversed(alph_num):\n        temp_s = chr(ord('H')-ord(s)+ord('A')-flag) #H-s\u306b\u3042\u305f\u308b\u6587\u5b57\u3092\u5148\u982d\u306b\u633f\u5165\uff0eflag\u304c1\u306a\u3089\u7e70\u4e0a\u308a\u3092\u8003\u616e\n        if 'A' <= temp_s <= 'H':\n            out_s = temp_s + out_s\n            flag = 0  \n        elif temp_s == chr(ord('A')-1): #H-s\u304cA\u3088\u308a\u3082\u5c0f\u3055\u3044\u306a\u3089\u305d\u306e\u6841\u306fI.\u7e70\u4e0a\u308a\u304c\u8d77\u3053\u308b\u305f\u3081flag\u30921\u306b\uff0e\n            out_s = 'I' + out_s\n            flag = 1\n    if flag == 1:\n        out_s = 'G' + out_s\n    result = 'H'*len(out_s)\n    while out_s[0] == 'A' and len(out_s)>=2: #\u4e0d\u8981\u306aA\u306e\u524a\u9664\n        out_s = out_s[1:]\n    print(f\"{alph_num} + {out_s} = {result}\")\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    if argv[0] == 'decode':\n        decode(argv[1])\n    elif argv[0] == 'encode':\n        encode(argv[1])\n    elif argv[0] == 'align':\n        align(argv[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 137, "is_generated": true, "language": "Python3", "code": "import sys\nimport random\n\ndef main(limit):\n    # \u5165\u529b\u56de\u6570\u306b\u57fa\u3065\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u300c\u79e9\u300d\u304b\u300c\u5e8f\u300d\u3092\u751f\u6210\n    target_str = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\n    current_output = \"\"\n    for _ in range(limit):\n        char = random.choice([\"\u79e9\", \"\u5e8f\"])\n        print(char)\n        current_output += char\n        \n        # \u76ee\u6a19\u306e\u6587\u5b57\u5217\u304c\u73fe\u5728\u306e\u51fa\u529b\u306b\u73fe\u308c\u305f\u304b\u78ba\u8a8d\n        if target_str in current_output:\n            print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n            return\n    \n    # \u7d42\u4e86\u6761\u4ef62: \u76ee\u6a19\u306e\u6587\u5b57\u5217\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\n    print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print(\"Usage: python3 your_script.py <count>\")\n    else:\n        try:\n            count = int(sys.argv[1])\n            if count < 0 or count > 10000:\n                print(\"Please provide a number between 0 and 10000.\")\n            else:\n                main(count)\n        except ValueError:\n            print(\"Please provide a valid integer.\")"}
{"id": 138, "is_generated": false, "language": "Python3", "code": "import sys\n\nA = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n\ndef A2Num(s):\n  return ''.join(map(str,[A.index(i) for i in s]))\n\ndef Num2A(s):\n  return ''.join(map(str,[A[int(i)] for i in s]))\n\ndef decode(X,n=9):\n  #9to10\n  X = A2Num(X)\n  return str(int(X,9))\n\ndef encode(X, n=9):\n  X = int(X)\n  X_dumy = X\n  out = ''\n  while X_dumy>0:\n    out = str(X_dumy%n)+out\n    X_dumy = int(X_dumy/n)\n  return Num2A(str(out))\n\ndef align(in_X):\n  n = int(decode(in_X))\n  a = in_X\n  i=0\n  while len(a)!=a.count(\"H\"):\n    i+=1\n    n+=1\n    a = encode(n)\n  return \"{} + {} = {}\".format(in_X,encode(i),a)\n\ndef main(argv):\n  if argv[0]==\"encode\":\n    print(encode(argv[1]))\n  \n  elif argv[0]==\"decode\":\n    print(decode(argv[1]))\n\n  elif argv[0]==\"align\":\n    print(align(argv[1]))\n  \n  else:\n    print(\"unexpected inputs\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 139, "is_generated": false, "language": "Python3", "code": "import sys\n\n\ndef main(argv):\n    if argv[0] == \"encode\":\n        print(encode(int(argv[1])))\n    elif argv[0] == \"decode\":\n        print(decode(argv[1]))\n    else:\n        print(align(argv[1]))\n\n\ndef encode(n):\n    ans = []\n    while True:\n        q = n // 9\n        r = n % 9\n        ans.append(r)\n        if q == 0:\n            break\n        n = q\n\n    return \"\".join(_digit_to_char(i) for i in reversed(ans))\n\n\ndef decode(s):\n    ans = 0\n    for i, c in enumerate(reversed(list(s))):\n        ans += _char_to_digit(c) * 9**i\n    return ans\n\n\ndef align(s):\n    input_num = decode(s)\n\n    target = \"H\" * (len(s) + 1)  # \u4f59\u5206\u306b\u5927\u304d\u306a\u6570\u5b57\u3092\u76ee\u6a19\u306b\u3057\u3066\u304a\u304f\n    target_num = decode(target)\n\n    ans_num = target_num - input_num\n    ans_str = encode(ans_num)\n\n    # \u3069\u3046\u3084\u3089\u6700\u5c0f\u306e\u6570\u5b57\u3092\u6c42\u3081\u3089\u308c\u3066\u3044\u308b\u3089\u3057\u3044\n    if ans_str[0] == \"H\":\n        ans_str = ans_str[1:]\n        target = target[1:]\n\n    # \u5148\u982d\u306b A \u304c\u3042\u308b\u3068\u4e0d\u6b63\u306a\u306e\u3067\u524a\u308b\n    while True:\n        if len(ans_str) == 1 or ans_str[0] != \"A\":\n            break\n\n        ans_str = ans_str[1:]\n\n    return f\"{s} + {ans_str} = {target}\"\n\n\ndef _digit_to_char(n):\n    m = {0: \"A\", 1: \"B\", 2: \"C\", 3: \"D\", 4: \"E\", 5: \"F\", 6: \"G\", 7: \"H\", 8: \"I\"}\n    return m[n]\n\n\ndef _char_to_digit(c):\n    m = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3, \"E\": 4, \"F\": 5, \"G\": 6, \"H\": 7, \"I\": 8}\n    return m[c]\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 140, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef ALNO(l):\n  lis = {\"A\":0, \"B\":1, \"C\":2, \"D\":3, \"E\":4, \"F\":5, \"G\":6, \"H\":7, \"I\":8}\n  return lis[l]\n\ndef NOAL(l):  \n  lis = {0:\"A\", 1:\"B\", 2:\"C\", 3:\"D\", 4:\"E\", 5:\"F\", 6:\"G\", 7:\"H\", 8:\"I\"}\n  return lis[l]\n\n\ndef main(argv):\n  command = argv[0]\n  X = argv[1]\n\n  if command == \"decode\":\n    Decode(X)\n  elif command == \"encode\":\n    Encode(X)\n  elif command == \"align\":\n    Align(X)\n    \n\ndef Decode(X):\n  Alp = list(X)\n  Alp.reverse()\n  su = 0\n  for i in range(len(Alp)):\n    su += 9 ** i  * ALNO(Alp[i])\n  print(su)\n\n\ndef Encode(X):\n  Num = int(X)\n  NumList = [] if Num != 0 else [0]\n  while Num > 0:\n    NumList.append(Num % 9)\n    Num //= 9\n  NumList.reverse()\n  Alp = \"\"\n  for i in range(len(NumList)):\n    Alp += str(NOAL(NumList[i]))\n  \n  print(Alp)\n  \n\n\ndef Align(X):\n  Alp = list(X)\n  Alp.reverse()\n  N = 0\n  for i in range(len(Alp)):\n    N += 9 ** i * ALNO(Alp[i])\n  H = 7\n  l = 1\n  while N > H:\n    H += 7 * 9 ** l\n    l += 1\n  \n  AN = H - N\n  NumList = []\n  while AN > 0:\n    NumList.append(AN % 9)\n    AN //= 9\n  NumList.reverse()\n  AA = \"\"\n  for i in range(len(NumList)):\n    AA += str(NOAL(NumList[i]))\n  AH = \"\"\n  for i in range(l):\n    AH += str(\"H\")\n\n  if AA == \"\":\n    AA=\"A\"\n  print(X + \" + \" + AA + \" = \" + AH)\n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 141, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef base10to(n, b):\n  if (int(int(n) / b)):\n    return base10to(int(int(n) / b), b) + str(int(n) % b)\n  return str(int(n) % b)\n\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    dict = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8}\n    LENGTH = len(argv[1])\n    if argv[0] == 'decode':\n      ans = 0\n      for string in argv[1]:\n        ans += dict[string] * (9 ** (LENGTH - 1))\n        LENGTH -= 1\n      print(ans)\n    elif argv[0] == 'encode':\n      ans = ''\n      encodedData = base10to(argv[1], 9)\n      for string in encodedData:\n        for key in dict.keys():\n          if dict[key] == int(string):\n            ans += key\n      print(ans)\n    elif argv[0] == 'align':\n      print(LENGTH)\n      \n\n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 142, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    command = argv[0]\n    value = argv[1]\n\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u6570\u5b57\u306e\u5bfe\u5fdc\u8868\n    char_to_number_map = {\n        'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4,\n        'F': 5, 'G': 6, 'H': 7, 'I': 8\n    }\n    number_to_char_map = {\n        0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E',\n        5: 'F', 6: 'G', 7: 'H', 8: 'I'\n    }\n\n    if command == \"decode\":\n        result_number = 0\n        for character in value:\n            digit = char_to_number_map[character]\n            result_number = result_number * 9 + digit\n        print(result_number)\n\n    elif command == \"encode\":\n        target_number = int(value)\n        if target_number == 0:\n            print(\"A\")\n            return\n\n        result_string = \"\"\n        while target_number > 0:\n            remainder = target_number % 9\n            result_string = number_to_char_map[remainder] + result_string\n            target_number = target_number // 9\n        print(result_string)\n\n    elif command == \"align\":\n        input_string = value\n        \n        input_number = 0\n        for character in input_string:\n            input_number = input_number * 9 + char_to_number_map[character]\n        \n        num_len = len(input_string)\n        target_h_string = 'H' * num_len\n        \n        target_h_number = 0\n        for _ in range(num_len):\n            target_h_number = target_h_number * 9 + 7\n\n        if input_number > target_h_number:\n            target_h_string = 'H' * (num_len + 1)\n            target_h_number = target_h_number * 9 + 7\n\n        number_to_add = target_h_number - input_number\n        \n        string_to_add = \"\"\n        if number_to_add == 0:\n            string_to_add = \"A\"\n        else:\n            temp_num = number_to_add\n            while temp_num > 0:\n                rem = temp_num % 9\n                string_to_add = number_to_char_map[rem] + string_to_add\n                temp_num //= 9\n        \n        print(f\"{input_string} + {string_to_add} = {target_h_string}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 143, "is_generated": false, "language": "C++", "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <random>\n#include <iterator>\n#include <sstream>\n#include <vector>\n\nint main(int argc, char *argv[])\n{\n  if(argc < 2) {\n    std::cerr << \"usage: \" << argv[0] << \" {n}\" << std::endl;\n    return -1;\n  }\n  \n  std::random_device rnd;\n  const int n = std::atoi(argv[1]);\n  std::vector<std::string> vec;\n  std::generate_n(std::back_inserter(vec), n, [&rnd]() {\n    return (rnd() & 0x1u) ? \"\u79e9\" : \"\u5e8f\";\n  });\n  \n  for(const std::string &s : vec) {\n  \tstd::cout << s << std::endl;\n  }\n  \n  std::ostringstream os;\n  std::copy(vec.begin(), vec.end(), std::ostream_iterator<std::string>(os));\n  const auto pos = os.str().find(\"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\");\n  if(pos != std::string::npos) {\n    vec.resize(pos);\n  }\n  \n  if(vec.size() > n) {\n  \tstd::cout << \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\" << std::endl;\n  } else {\n  \tstd::cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << std::endl;\n  }\n  \n  return 0;\n}\n"}
{"id": 144, "is_generated": false, "language": "Python3", "code": "import sys\n\n#10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\ndef Base_10_to_9(X):\n    if (int(X/9)):\n        return Base_10_to_9(int(X/9))+str(X%9)\n    return str(X%9)\n\ndef main(argv):\n\n    args = sys.argv\n    #args[1]\u306b\u7b2c\u4e00\u5f15\u6570\u3001args[2]\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u307e\u305f\u306f\u6570\u5b57\n    if args[1]=='decode':\n      s = args[2]\n      length = len(s)\n      num = 0\n\n      for i in s:\n        length-=1\n        if i == 'A':\n          num += 0*(9**length)\n        elif i == 'B':\n          num += 1*(9**length)\n        elif i == 'C':\n          num += 2*(9**length)\n        elif i == 'D':\n          num += 3*(9**length)\n        elif i == 'E':\n          num += 4*(9**length)\n        elif i == 'F':\n          num += 5*(9**length)\n        elif i == 'G':\n          num += 6*(9**length)\n        elif i == 'H':\n          num += 7*(9**length)\n        elif i == 'I':\n          num += 8*(9**length)\n        else:\n          print(error)\n      print(num)  \n\n    elif args[1]=='encode':\n      s = args[2]\n      s = Base_10_to_9(int(s))\n      line = s.translate(str.maketrans({'0':'A','1':'B','2':'C','3':'D','4':'E','5':'F','6':'G','7':'H','8':'I',}))\n      print(line)\n\n    elif args[1]=='align':\n      s = args[2]\n      \n      new = ''\n      count = 0\n      for i in s:\n        if i == 'I':\n          new += 'GI'\n          count = count + 2\n        elif i == 'H':\n          new += 'A'\n          count += 1\n        elif i == 'G':\n          new += 'B'\n          count += 1\n        elif i == 'F':\n          new += 'C'\n          count += 1\n        elif i == 'E':\n          new += 'D'\n          count += 1\n        elif i == 'D':\n          new += 'E'\n          count += 1\n        elif i == 'C':\n          new += 'F'\n          count += 1\n        elif i == 'B':\n          new += 'G'\n          count += 1\n        elif i == 'A':\n          new += 'H'\n          count += 1\n        else:\n          print('error')\n\n      answer = 'H'*count\n      print(s ,' + ',new,' = ', answer)\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 145, "is_generated": true, "language": "Python3", "code": "import sys\n\n# Define base system properties\nSYSTEM_BASE = 9\nALPHABET_DIGITS = \"ABCDEFGHI\"\nALPHABET_TO_INT_MAP = {c: i for i, c in enumerate(ALPHABET_DIGITS)}\nINT_TO_ALPHABET_MAP = {i: c for i, c in enumerate(ALPHABET_DIGITS)}\nH_VALUE = ALPHABET_TO_INT_MAP['H']\n\nclass NumberSystemConverter:\n    \"\"\"Provides methods to convert between decimal and custom alphabet numbers.\"\"\"\n\n    def convert_to_decimal(self, alpha_num: str) -> int:\n        \"\"\"Converts an alphabet number string to its decimal integer.\"\"\"\n        decimal_val = 0\n        power = 0\n        for char in reversed(alpha_num):\n            digit_val = ALPHABET_TO_INT_MAP[char]\n            decimal_val += digit_val * (SYSTEM_BASE ** power)\n            power += 1\n        return decimal_val\n\n    def convert_to_alpha(self, decimal_num: int) -> str:\n        \"\"\"Converts a decimal integer to its alphabet number string.\"\"\"\n        if decimal_num == 0:\n            return ALPHABET_DIGITS[0]\n\n        alpha_chars = []\n        current_num = decimal_num\n        while current_num > 0:\n            remainder = current_num % SYSTEM_BASE\n            alpha_chars.append(INT_TO_ALPHABET_MAP[remainder])\n            current_num //= SYSTEM_BASE\n        return \"\".join(reversed(alpha_chars))\n\n    def get_align_value(self, input_alpha: str) -> str:\n        \"\"\"Calculates the alignment value for a given alphabet number.\"\"\"\n        input_decimal = self.convert_to_decimal(input_alpha)\n        \n        target_len = len(input_alpha)\n        target_alpha_str = 'H' * target_len\n        target_decimal = self.convert_to_decimal(target_alpha_str)\n        \n        while target_decimal < input_decimal:\n            target_len += 1\n            target_alpha_str += 'H'\n            target_decimal = target_decimal * SYSTEM_BASE + H_VALUE\n\n        needed_decimal = target_decimal - input_decimal\n        needed_alpha = self.convert_to_alpha(needed_decimal)\n        \n        return f\"{input_alpha} + {needed_alpha} = {target_alpha_str}\"\n\ndef main(cmd_args):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    converter = NumberSystemConverter()\n    command_str = cmd_args[0]\n    data_arg = cmd_args[1]\n\n    if command_str == \"decode\":\n        print(converter.convert_to_decimal(data_arg))\n    elif command_str == \"encode\":\n        print(converter.convert_to_alpha(int(data_arg)))\n    elif command_str == \"align\":\n        print(converter.get_align_value(data_arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 146, "is_generated": false, "language": "Python3", "code": "import sys\nimport string\n\ndef encode(decimal_str):\n    decimal = int(decimal_str)\n    n = 9\n    nonary_alpha = ''\n    while decimal >= n:\n        # i = decimal % n\n        i = divmod(decimal, n)[1]\n        nonary_alpha = 'ABCDEFGHI'[i] + nonary_alpha\n        # decimal = int(decimal / n)\n        decimal = int(divmod(decimal, n)[0])\n    # i = decimal % n\n    i = divmod(decimal, n)[1]\n    nonary_alpha = 'ABCDEFGHI'[i] + nonary_alpha\n    return nonary_alpha\n\ndef decode(nonary_alpha):\n    nonary = nonary_alpha.translate(nonary_alpha.maketrans('ABCDEFGHI', '012345678'))\n    decimal = int(nonary, 9)\n    return decimal\n\ndef align(nonary_alpha):\n    digits = len(nonary_alpha)\n    decimal = decode(nonary_alpha)\n    target = decode('H' * digits)\n    if target < decimal:\n        target = decode('H' * (digits + 1))\n    aligner = target - decimal\n    return nonary_alpha + ' + ' + encode(aligner) + ' = ' + encode(target)\n\ndef main(argv):\n    if argv[0] == 'encode':\n        print(encode(argv[1]))\n    if argv[0] == 'decode':\n        print(decode(argv[1]))\n    if argv[0] == 'align':\n        print(align(argv[1]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 147, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// convert alphabet char A-I to digit 0-8\nint to_digit(char c) {\n    return c - 'A';\n}\n\n// convert digit 0-8 to alphabet char A-I\nchar to_char(int n) {\n    return (char)('A' + n);\n}\n\n// decode: convert base9 alphabet number to decimal string using big int\nvoid decode(const char *input) {\n    int length = strlen(input);\n    int result[1024] = {0};\n    int res_len = 1;\n\n    for(int i = 0; i < length; i++) {\n        int d = to_digit(input[i]);\n        int carry = 0;\n        for(int j = 0; j < res_len; j++) {\n            int x = result[j] * 9 + carry;\n            if(j == 0) x += d;\n            result[j] = x % 10;\n            carry = x / 10;\n        }\n        while(carry > 0) {\n            result[res_len++] = carry % 10;\n            carry /= 10;\n        }\n    }\n    for(int i = res_len -1 ; i >= 0; i--) {\n        putchar(result[i] + '0');\n    }\n    putchar('\\n');\n}\n\n// encode: convert decimal string to base9 alphabet number using big int division\nvoid encode(const char *input) {\n    int len = strlen(input);\n    int num[1024];\n    for(int i = 0; i < len; i++) {\n        num[i] = input[len - 1 - i] - '0';\n    }\n    int num_len = len;\n    if(num_len == 1 && num[0] == 0) {\n        putchar('A');\n        putchar('\\n');\n        return;\n    }\n\n    char res[1024];\n    int res_len = 0;\n\n    while(num_len > 0) {\n        int rem = 0;\n        for(int i = num_len - 1; i >= 0; i--) {\n            int val = rem * 10 + num[i];\n            num[i] = val / 9;\n            rem = val % 9;\n        }\n        res[res_len++] = to_char(rem);\n\n        while(num_len > 0 && num[num_len - 1] == 0) {\n            num_len--;\n        }\n    }\n\n    for(int i = res_len - 1; i >= 0; i--) {\n        putchar(res[i]);\n    }\n    putchar('\\n');\n}\n\n// align: find value to add so that sum digit-wise is all H (7)\nvoid align(const char *input) {\n    int len = strlen(input);\n    char addend[32] = {0};\n    for(int i = 0; i < len; i++) {\n        int digit = to_digit(input[len - 1 - i]);\n        int needed = 7 - digit;\n        if(needed < 0) needed += 9;\n        addend[len - 1 - i] = to_char(needed);\n    }\n    printf(\"%s + %s = \", input, addend);\n    for(int i = 0; i < len; i++) {\n        putchar('H');\n    }\n    putchar('\\n');\n}\n\nint main(int argc, char *argv[]) {\n    if(argc != 3) return 1;\n    if(strcmp(argv[1], \"encode\") == 0) {\n        encode(argv[2]);\n    } else if(strcmp(argv[1], \"decode\") == 0) {\n        decode(argv[2]);\n    } else if(strcmp(argv[1], \"align\") == 0) {\n        align(argv[2]);\n    }\n    return 0;\n}"}
{"id": 148, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\n#define BUF_SIZE 300\n\nint main(int argc, char *argv[]) {\n  if (argc != 3) return 1;\n  char *cmd = argv[1];\n  char *val = argv[2];\n\n  if (strcmp(cmd, \"decode\") == 0) {\n    char dec[BUF_SIZE] = {0};\n    int dec_len = 1;\n    dec[0] = '0';\n\n    for (int i = 0; val[i]; ++i) {\n        int carry = 0;\n        for (int j = 0; j < dec_len; ++j) {\n            int digit = (dec[j] - '0') * 9 + carry;\n            dec[j] = (digit % 10) + '0';\n            carry = digit / 10;\n        }\n        while (carry > 0) {\n            dec[dec_len++] = (carry % 10) + '0';\n            carry /= 10;\n        }\n        \n        carry = val[i] - 'A';\n        for (int j = 0; j < dec_len; ++j) {\n            if (!carry) break;\n            int digit = (dec[j] - '0') + carry;\n            dec[j] = (digit % 10) + '0';\n            carry = digit / 10;\n        }\n        while (carry > 0) {\n            dec[dec_len++] = (carry % 10) + '0';\n            carry /= 10;\n        }\n    }\n    \n    for (int i = 0; i < dec_len / 2; ++i) {\n        char t = dec[i];\n        dec[i] = dec[dec_len - 1 - i];\n        dec[dec_len - 1 - i] = t;\n    }\n    dec[dec_len] = '\\0';\n    printf(\"%s\\n\", dec);\n\n  } else if (strcmp(cmd, \"encode\") == 0) {\n    if (strcmp(val, \"0\") == 0) {\n        puts(\"A\");\n        goto end;\n    }\n    \n    char num_str[BUF_SIZE];\n    strcpy(num_str, val);\n    int len = strlen(num_str);\n    char res[BUF_SIZE] = {0};\n    int k = 0;\n\n    while (len > 0) {\n        long long rem = 0;\n        int next_len = 0;\n        char next_num_str[BUF_SIZE];\n        for (int i = 0; i < len; ++i) {\n            rem = rem * 10 + (num_str[i] - '0');\n            if (next_len > 0 || rem / 9 > 0) {\n                next_num_str[next_len++] = (rem / 9) + '0';\n            }\n            rem %= 9;\n        }\n        res[k++] = rem + 'A';\n        len = next_len;\n        strncpy(num_str, next_num_str, len);\n        num_str[len] = '\\0';\n    }\n    res[k] = '\\0';\n    for (int i = 0; i < k/2; ++i) {\n        char t = res[i];\n        res[i] = res[k-1-i];\n        res[k-1-i] = t;\n    }\n    printf(\"%s\\n\", res);\n\n  } else if (strcmp(cmd, \"align\") == 0) {\n    int len = strlen(val);\n    char h_str[BUF_SIZE];\n    for (int i = 0; i < len; ++i) h_str[i] = 'H';\n    h_str[len] = '\\0';\n\n    int t_len = len;\n    if (strcmp(val, h_str) > 0) {\n        t_len = len + 1;\n    }\n\n    for (int i = 0; i < t_len; ++i) h_str[i] = 'H';\n    h_str[t_len] = '\\0';\n\n    char y_str[BUF_SIZE];\n    y_str[t_len] = '\\0';\n    int borrow = 0;\n    for (int i = 1; i <= t_len; ++i) {\n        int x_digit = i <= len ? val[len - i] - 'A' : 0;\n        int diff = ('H' - 'A') - x_digit - borrow;\n        if (diff < 0) {\n            diff += 9;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        y_str[t_len - i] = diff + 'A';\n    }\n    char *p = y_str;\n    while (*p == 'A' && *(p+1) != '\\0') p++;\n    printf(\"%s + %s = %s\\n\", val, p, h_str);\n  }\n\nend:\n  return 0;\n}"}
{"id": 149, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef enc(a):\n    a=int(a)\n    if a==0:\n        return 'A'\n    if a==1:\n        return 'B'\n    if a==2:\n        return 'C'\n    if a==3:\n        return 'D'\n    if a==4:\n        return 'E'\n    if a==5:\n        return 'F'\n    if a==6:\n        return 'G'\n    if a==7:\n        return 'H'\n    if a==8:\n        return 'I'\ndef dec(a):\n    if a=='A':\n        return 0\n    if a=='B':\n        return 1\n    if a=='C':\n        return 2\n    if a=='D':\n        return 3\n    if a=='E':\n        return 4\n    if a=='F':\n        return 5\n    if a=='G':\n        return 6\n    if a=='H':\n        return 7\n    if a=='I':\n        return 8\ndef encode(a):\n    a=int(a)\n    if a==0:\n        return 'A'\n    ans=enc(a%9)\n    a=a//9\n    while a>0:\n        ans=enc(a%9)+ans\n        a=a//9\n    return ans\n\ndef decode(a):\n    if a=='A':\n        return 0\n    ans=0\n    for x in a:\n        ans=ans*9+dec(x)\n    return ans\n\ndef align(raw):\n    a=decode(raw)\n    n=1\n    while a>7*(9**n-1)/8:\n        n+=1\n    a=7*(9**n-1)/8-a\n    return raw+' + '+encode(a)+' = '+'H'*n\n\ndef ans(a,b):\n    if a=='encode':\n        return encode(b)\n    if a=='decode':\n        return decode(b)\n    if a=='align':\n        return align(b)\n    return -1\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    a=argv[0]\n    b=argv[1]\n    print(ans(a,b))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 150, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(s):\n  remainder = 0\n  quo = int(s)\n  ans_num = []\n  if quo == 0:\n    return \"A\"\n  else:\n    while quo != 0:\n      remainder = quo % 9\n      quo = quo // 9\n      ans_num.append(remainder)\n  ans = \"\"\n  for n in range(len(ans_num)):\n    ans = chr(ans_num[n] + 65) + ans \n  return ans\n\ndef decode(s):\n  s_list = list(s)\n  n = len(s_list)\n  ans = 0\n  for alphabet in s_list:\n    ans = ans + (ord(alphabet)-65) * pow(9,n-1)\n    n = n - 1\n  return ans\n\ndef align(s):\n  h = \"\"\n  while True:\n    h = h + \"H\"\n    d_h = decode(h)\n    num = decode(s)\n    if d_h >= num:\n      ans = encode(d_h - num)\n      break\n  print(s +\" + \"+ ans + \" = \" + h)\n\ndef main(argv):\n    command = argv[0]\n    content = argv[1]\n\n    if command == \"encode\":\n      print(encode(argv[1]))\n    elif command == \"decode\":\n      print(decode(argv[1]))\n    elif command == \"align\":\n      align(argv[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 151, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nconst string alpha = \"ABCDEFGHI\";\n\nint charToDigit(char c) {\n    return c - 'A';\n}\n\nchar digitToChar(int d) {\n    return 'A' + d;\n}\n\n// decode alphabeta number to decimal string\nstring decode(const string& s) {\n    vector<int> dec{0}; // decimal as vector of digits\n    for (char c : s) {\n        int val = charToDigit(c);\n        // multiply dec by 9 and add val\n        int carry = val;\n        for (int& d : dec) {\n            d = d * 9 + carry;\n            carry = d / 10;\n            d %= 10;\n        }\n        while (carry > 0) {\n            dec.push_back(carry % 10);\n            carry /= 10;\n        }\n    }\n    string res;\n    for (auto it = dec.rbegin(); it != dec.rend(); it++) {\n        res += (*it + '0');\n    }\n    return res;\n}\n\n// encode decimal string num to alphabeta number\nstring encode(const string& num) {\n    if (num == \"0\") return \"A\";\n    vector<int> dec;\n    for (char c : num) dec.push_back(c - '0');\n    string res;\n    while (!dec.empty()) {\n        int carry = 0;\n        vector<int> next;\n        for (int d : dec) {\n            carry = carry * 10 + d;\n            if (!next.empty() || carry / 9 != 0) next.push_back(carry / 9);\n            carry %= 9;\n        }\n        dec = next;\n        res += digitToChar(carry);\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n\n// add alphabeta numbers treating as base9 vectors\n// but here only for align we need to find b that satisfies a + b = all Hs\n// so calculate digit b_i = 8 - a_i\nstring align(const string& a) {\n    int n = a.size();\n    string b;\n    for (int i = 0; i < n; i++) {\n        int val = charToDigit(a[i]);\n        b += digitToChar(8 - val);\n    }\n    return b;\n}\n\nint main(int argc, char* argv[]) {\n    string cmd = argv[1];\n    string arg = argv[2];\n\n    if (cmd == \"decode\") {\n        cout << decode(arg) << \"\\n\";\n    } else if (cmd == \"encode\") {\n        cout << encode(arg) << \"\\n\";\n    } else if (cmd == \"align\") {\n        string b = align(arg);\n        cout << arg << \" + \" << b << \" = \";\n        for (int i = 0; i < (int)arg.size(); i++) cout << 'H';\n        cout << \"\\n\";\n    }\n    return 0;\n}"}
{"id": 152, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring convertToAlpha(int number) {\n    string result = \"\";\n    while (number) {\n        result = char('A' + (number % 9)) + result;\n        number /= 9;\n    }\n    return result.empty() ? \"A\" : result;\n}\n\nint convertToDecimal(string alpha) {\n    int value = 0;\n    for (char c : alpha) {\n        value = value * 9 + (c - 'A');\n    }\n    return value;\n}\n\nstring calculateAlignment(string alpha) {\n    string needed = \"\";\n    for (char c : alpha) {\n        int needValue = ('H' - c + 'A') < 0 ? ('H' - c + 'A' + 9) : ('H' - c + 'A');\n        needed += char(needValue);\n    }\n    return alpha + \" + \" + needed + \" = \" + string(alpha.length(), 'H');\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n\n    string command = argv[1];\n    string argument = argv[2];\n\n    if (command == \"decode\") {\n        cout << convertToDecimal(argument) << endl;\n    } else if (command == \"encode\") {\n        cout << convertToAlpha(stoi(argument)) << endl;\n    } else if (command == \"align\") {\n        cout << calculateAlignment(argument) << endl;\n    }\n\n    return 0;\n}"}
{"id": 153, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    \n    for i, v in enumerate(argv):\n        # print(\"argv[{0}]: {1}\".format(i, v))\n        if i == 0:\n          flag = v\n        else:\n          if (flag == 'decode'):\n            num = v\n          elif (flag == 'encode'):\n            num = int(v)\n          else:\n            num = v\n    \n    if (flag == 'decode'):\n      result = 0\n      for i in range(len(num)):\n        result += int((ord(num[i]) - ord('A'))) * pow(9,len(num)-i-1)\n    if (flag == 'encode'):\n      result = []\n      cnt = 0\n      if (num == 0):\n        result.append('A')\n      while (num != 0):\n        a = num % 9\n        num = (num-a) // 9\n        result.append(chr(a+ord('A')))\n      result.reverse()\n      result =\"\".join(result)\n    if (flag == 'align'):\n      result = []\n      if (ord(num[0]) > ord('H')):\n        one = 0\n        aa = ['H' for i in range(len(num)+1)]\n        for i in range(len(aa)):\n          one += int((ord(aa[i]) - ord('A'))) * pow(9,len(aa)-i-1)\n        two = 0\n        for i in range(len(num)):\n          two += int((ord(num[i]) - ord('A'))) * pow(9,len(num)-i-1)\n        three = one - two\n        result1 = []\n        cnt = 0\n        while (three != 0):\n          a = three % 9\n          three = (three-a) // 9\n          result1.append(chr(a+ord('A')))\n        result1.reverse()\n        result = \"\".join(num)\n        result += \" + \"\n        result +=\"\".join(result1)\n        result +=\" = \"\n        result +=\"\".join(aa)\n      else:\n        one = 0\n        aa = ['H' for i in range(len(num))]\n        for i in range(len(aa)):\n          one += int((ord(aa[i]) - ord('A'))) * pow(9,len(aa)-i-1)\n        two = 0\n        for i in range(len(num)):\n          two += int((ord(num[i]) - ord('A'))) * pow(9,len(num)-i-1)\n        three = two - one\n        result1 = []\n        cnt = 0\n        if (three == 0):\n          result1.append('A')\n        while (three != 0):\n          a = three % 9\n          three = (three-a) // 9\n          result1.append(chr(a+ord('A')))\n        result1.reverse()\n        result = \"\".join(num)\n        result += \" + \"\n        result +=\"\".join(result1)\n        result +=\" = \"\n        result +=\"\".join(aa)\n\n    print (result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 154, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n// map 0-8 to A-I\nchar digit_to_char(int d) {\n    return 'A' + d;\n}\n\n// map A-I to 0-8\nint char_to_digit(char c) {\n    return c - 'A';\n}\n\n// decode from base 9 alphabet number to decimal string (big number)\nvoid decode(const char *alpha) {\n    // Because number can be very big (210 digits base 9),\n    // store result as decimal string, use array to hold digits\n    // repeatedly multiply current result by 9 and add digit\n    int len = (int)strlen(alpha);\n    int dec[700] = {0}; // decimal digits array (max capacity)\n    int dec_len = 1; // currently number is 0\n    // for each char\n    for(int i = 0; i < len; i++) {\n        int d = char_to_digit(alpha[i]);\n        // multiply dec by 9\n        int carry = 0;\n        for(int j = 0; j < dec_len; j++) {\n            int val = dec[j] * 9 + carry;\n            dec[j] = val % 10;\n            carry = val / 10;\n        }\n        while(carry > 0) {\n            dec[dec_len++] = carry % 10;\n            carry /= 10;\n        }\n        // add d\n        carry = d;\n        int j = 0;\n        while(carry > 0 && j < dec_len) {\n            int val = dec[j] + carry;\n            dec[j] = val % 10;\n            carry = val / 10;\n            j++;\n        }\n        if(carry > 0) {\n            dec[dec_len++] = carry;\n        }\n    }\n    // print dec reversed\n    for(int i = dec_len - 1; i >= 0; i--) {\n        printf(\"%d\", dec[i]);\n    }\n    printf(\"\\n\");\n}\n\n// encode decimal string to base 9 alphabet number\nvoid encode(const char *decstr) {\n    // decstr can be large number, store in array reversed\n    int dec_len = (int)strlen(decstr);\n    int dec[700];\n    for(int i = 0; i < dec_len; i++) {\n        dec[i] = decstr[dec_len - 1 - i] - '0';\n    }\n    // if dec is zero\n    if(dec_len == 1 && dec[0] == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n\n    // repeatedly divide by 9 and get remainder (digit)\n    char res[220];\n    int res_len = 0;\n\n    while(dec_len > 0) {\n        int remainder = 0;\n        int new_len = 0;\n        for(int i = dec_len - 1; i >= 0; i--) {\n            int val = remainder * 10 + dec[i];\n            dec[i] = val / 9;\n            remainder = val % 9;\n        }\n        // remove leading zeros\n        while(dec_len > 0 && dec[dec_len - 1] == 0) dec_len--;\n        res[res_len++] = digit_to_char(remainder);\n    }\n    // res reversed is answer\n    for(int i = res_len - 1; i >= 0; i--) {\n        putchar(res[i]);\n    }\n    putchar('\\n');\n}\n\n// add two alphabet numbers for align output\nvoid print_align(const char *a, const char *b) {\n    printf(\"%s + %s = \", a, b);\n}\n\n// generate the 'align' addition\nvoid align(const char *alpha) {\n    // input length <=30\n    int len = (int)strlen(alpha);\n\n    // convert alpha to digits array base9\n    int digits[32];\n    for(int i = 0; i < len; i++) {\n        digits[i] = char_to_digit(alpha[len - 1 - i]);\n    }\n\n    // we want sum digits = 7 (H) for all digit positions\n    // so needed = 7 - current digit (mod 9)\n    int needed[32];\n    for(int i = 0; i < len; i++) {\n        int val = 7 - digits[i];\n        if(val < 0) val += 9;\n        needed[i] = val;\n    }\n\n    // needed now is addend's digits base9 reversed order\n    // convert back to alphabet string normal order\n    char addend[35];\n    for(int i = 0; i < len; i++) {\n        addend[len - 1 - i] = digit_to_char(needed[i]);\n    }\n    addend[len] = 0;\n\n    // original alpha is output as is\n    printf(\"%s + %s = H\", alpha, addend);\n    for(int i = 1; i < len; i++) printf(\"H\");\n    printf(\"\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    if(argc != 3) return 1;\n    const char *cmd = argv[1];\n    const char *val = argv[2];\n\n    if(strcmp(cmd, \"decode\") == 0) {\n        decode(val);\n    } else if(strcmp(cmd, \"encode\") == 0) {\n        encode(val);\n    } else if(strcmp(cmd, \"align\") == 0) {\n        align(val);\n    }\n\n    return 0;\n}"}
{"id": 155, "is_generated": false, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n\n    private static final String TISU = \"\u79e9\";\n    private static final String ZYO = \"\u5e8f\";\n    private static final String CHECK_STR = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    private static final String CHECK_BREAK_STR = \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\";\n    private static final String CHEKC_END_STR = \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\";\n\n    public static void main(String[] args) {\n\n        StringBuffer strBuffer = new StringBuffer();\n \n        for (int i = 0; i < args.length; i++) {\n            // \u4e71\u6570\u751f\u6210\n            Random rnd = new Random();\n            int ran = rnd.nextInt(2);\n\n            if (ran == 0) {\n                System.out.println(TISU);\n                strBuffer.append(TISU);\n            } else {\n                System.out.println(ZYO);\n                strBuffer.append(ZYO);\n            }\n\n            if (CHECK_STR.length() == strBuffer.length()) {\n                if (CHECK_STR.equals(strBuffer.toString())) {\n                    System.out.println(CHECK_BREAK_STR);\n                    return;\n                }\n                // StringBuffer\u3092\u521d\u671f\u5316\n                strBuffer = new StringBuffer();\n            }\n        }\n        System.out.println(CHEKC_END_STR);\n    }\n}\n"}
{"id": 156, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(num):\n    if num<9:\n        return chr(65+num)\n    elif num%9==0:\n        return encode(num//9)+chr(65)\n    else:\n        return encode(num//9)+chr(65+num%9)\n\ndef decode(alpha):\n    num=0\n    for index, item in enumerate(list(alpha)):\n        num += pow(9,len(alpha)-index-1)*(ord(item)-ord('A'))\n    return num\n\ndef align(alpha1):\n    ans = []\n    for index, item in enumerate(list(alpha1)):\n        num = pow(9,len(alpha1)-index-1)*(ord(item)-ord('A'))\n        diff = 8-num\n        if diff < 0:\n            ans.append(['G'])\n            ans.append(['I'])\n        else:\n            ans.append(encode(num))\n    \n    return list(zip(ans))\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if argv[0] == \"encode\":\n        answer = encode(int(argv[1]))\n        print(answer)\n    elif argv[0] == \"decode\":\n        answer = decode(argv[1])\n        print(answer)\n    else:\n        answer = align(argv[1])\n        print(answer)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 157, "is_generated": false, "language": "Python3", "code": "import sys\n\nALPHABET = [chr(i) for i in range(65, 74)]\nALIGN = [chr((i - 65) % 9 + 65) for i in range(73, 82)][::-1]\n\n\ndef encode(num):\n  intnum = int(num)\n  ret = ''\n  while True:\n    i = intnum % 9\n    ret += ALPHABET[i]\n    intnum //= 9\n    if intnum == 0: break\n  return ret[::-1]\n\n\ndef decode(alphabet):\n  ret = 0\n  length = len(alphabet)\n  for i, s in enumerate(alphabet):\n    ret += (ord(s) - 65) * 9 ** (length - i - 1)\n  return ret\n\n\ndef align(alphabet):\n  ret = ''\n  temp = 0\n  length = len(alphabet)\n  for i, s in enumerate(alphabet[::-1]):\n    t = ord(s) + temp\n    if t >= 73:\n      temp = t - 73 + 1\n    else:\n      temp = 0\n    ret += ALIGN[(t - 65) % 9]\n    if i == length - 1 and temp > 0 and ALIGN[temp] != 'A':\n      ret += ALIGN[temp]\n  return ret[::-1]\n\n\ndef main(argv):\n  if argv[0] == 'encode':\n    print(encode(argv[1]))\n  elif argv[0] == 'decode':\n    print(decode(argv[1]))\n  elif argv[0] == 'align':\n    res = align(argv[1])\n    print(argv[1] + ' + ' + res + ' = ' + 'H' * len(res))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 158, "is_generated": false, "language": "Ruby", "code": "\ndef main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  # \u8981\u4ef6\n  # 1. \u5165\u529b\u56de\u6570\u5206\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u529b\n  # 2. \u51fa\u529b\u304c\u7279\u5b9a\u306e\u9806\u756a\u306b\u306a\u3063\u305f\u3089\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n  # 3. \u5165\u529b\u56de\u6570\u3092\u5168\u3066\u884c\u3063\u3066\u30822\u306e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u306a\u304b\u3063\u305f\u3089\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n  \n  # \u5224\u5b9a\u65b9\u6cd5\n  # \u6587\u5b57\u5217\u306b\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u3001\"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\u304c\u6210\u7acb\u3057\u305f\u3089ok\n  words = ['\u79e9', '\u5e8f']\n  results = \"\"\n  argv.each_index do |i|\n    input_count = argv[i].to_i\n     \n    # 0\u4ef6\u306e\u5834\u5408\u306f\u5fc5\u305a\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\"\n    if input_count == 0\n      puts \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\"\n      return\n    end\n    input_count.times do |j|\n      w = words[rand(2).to_i]\n      puts w\n      results << w\n      if results.include?(\"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\")\n        puts \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\"\n        return\n      end\n    end\n    puts \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\"\n  end\nend\n\nmain(ARGV)\n"}
{"id": 159, "is_generated": false, "language": "Python3", "code": "import sys\nchange_dict = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8}\nchange_dict_2 = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H', 8:'I'}\n\ndef decode(moji):\n  moji_len = len(moji)\n  res = 0\n  for i in range(len(moji)):\n    res += 9**(moji_len-1)*change_dict[moji[i]]\n    moji_len -= 1\n  return res\n\ndef encode(moji):\n  suji = int(moji)\n  f = True\n  mod_list = []\n  while f:\n    if suji >= 9:\n      q = suji // 9\n      mod = suji % 9\n      mod_list.append(mod)\n      suji = q\n    else:\n      mod_list.append(suji)\n      f = False\n  res = ''\n  mod_len = len(mod_list)\n  for i in (reversed(mod_list)):\n    res = res + change_dict_2[i]\n  return res\n\ndef align(moji):\n  x = decode(moji)\n  moji_len = len(moji)\n  H = ''\n  for i in range(moji_len):\n    H = H + 'H'\n  \n  if moji == 'I':\n    H = H + 'H'\n\n  Hx = decode(H)\n  y = Hx - x\n  res = encode(y)\n  return '{} + {} = {}'.format(moji, res, H)\n\ndef main(argv):\n    moji = argv[1]\n\n    if argv[0] == 'decode':\n      res = decode(moji)\n      print(res)\n    \n    elif argv[0] == 'encode':\n      res = encode(moji)\n      print(res)\n    \n    elif argv[0] == 'align':\n      res = align(moji)\n      print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 160, "is_generated": false, "language": "Python3", "code": "import sys\n\nalphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n\ndef decode(alphabet):\n    result = 0\n    len_a = len(alphabet)\n    for i, a in enumerate(alphabet):\n        result += (9 ** (len_a - i -1)) * alphabets.index(a)\n    print(result)\n\ndef encode(decimal):\n    result = []\n    quotient = int(decimal)\n    while(1):\n        quotient, remainder = divmod(quotient, 9)\n        result.append(alphabets[remainder])\n        if quotient == 0:\n            break\n        if quotient < 9:\n            result.append(alphabets[quotient])\n            break\n    print(''.join(reversed(result)))\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        decode(argv[1])\n    if argv[0] == \"encode\":\n        encode(argv[1])\n    \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 161, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alphabet_to_decimal(alpha_num):\n    # Decode alphabet number to decimal\n    conversion = {chr(65 + x): x for x in range(9)}\n    decimal_val = 0\n    for char in alpha_num:\n        decimal_val = decimal_val * 9 + conversion[char]\n    return decimal_val\n\ndef decimal_to_alphabet(decimal_num):\n    # Encode decimal to alphabet number\n    alphabets = \"ABCDEFGHI\"\n    if decimal_num == 0:\n        return alphabets[0]\n    encoded = []\n    while decimal_num > 0:\n        encoded.append(alphabets[decimal_num % 9])\n        decimal_num //= 9\n    return ''.join(reversed(encoded))\n\ndef align_to_charH(input_value):\n    chars = 'H'\n    sum_target = len(input_value) * 8\n    input_as_integer = alphabet_to_decimal(input_value)\n    diff_needed = sum_target - input_as_integer\n    missing_part = decimal_to_alphabet(diff_needed)\n    return f\"{input_value} + {missing_part} = {chars * len(input_value)}\"\n\ndef main(args):\n    task = args[0]\n    parameter = args[1]\n\n    if task == 'decode':\n        print(alphabet_to_decimal(parameter))\n    elif task == 'encode':\n        print(decimal_to_alphabet(int(parameter)))\n    elif task == 'align':\n        print(align_to_charH(parameter))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 162, "is_generated": false, "language": "Python3", "code": "import sys\n\nnum2alpha={'0':'A','1':'B','2':'C','3':'D','4':'E','5':'F','6':'G','7':'H','8':'I'}\nalpha2num={'A':'0','B':'1','C':'2','D':'3','E':'4','F':'5','G':'6','H':'7','I':'8'}\ndef base9(value): # 10 => 9\n    try:\n        tmp = int(value)\n    except:\n        raise ValueError('Invalid value:', value)\n \n    # n\u30922\u3067\u308f\u308a\u3001\u3042\u307e\u308a\u304c0\u306b\u306a\u308b\u307e\u3067\u308f\u308a\u7d9a\u3051\u3001\u3042\u307e\u308a\u3092\u914d\u5217\u306b\u52a0\u3048\u3066\u3044\u304f\n    result = ''\n    tmp = int(value)\n    while tmp >= 9:\n        result = str(tmp%9) + result\n        tmp = int(tmp / 9)\n    result = str(tmp%9) + result\n    return result\n\ndef main(argv):\n  \n  if argv[0]==\"encode\":\n    num9=base9(argv[1])\n    result=''\n    for i in num9:\n      result+=num2alpha[i]\n    print(result)\n   \n  elif argv[0]==\"decode\":\n    alpha=argv[1]\n    num9=''\n    for i in alpha:\n      num9+=alpha2num[i]\n    result=int(num9,9)\n    print(result)\n\n  elif argv[0]==\"align\":\n    alpha=argv[1]\n    num9=''\n    for i in alpha:\n      num9+=alpha2num[i]\n    \n    result=int(num9,9)\n    minus=''\n    for i in range(len(result)):\n      minus+='7'\n    \n    result=minus-result\n\n    result1=''\n    for i in result:\n      result1+=num2alpha[i]\n    print(result1)\n    \n  \n  else:\n      print(\"error\")\n      exit()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 163, "is_generated": false, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main() {\n\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\t// ---\n\t// This is a sample code to use arguments and outputs.\n\t// Edit and remove this code as you like.\n\n\trun(os.Args[1:])\n}\n\nfunc src(n int) []string {\n\trand.Seed(time.Now().UnixNano())\n\tret := make([]string, n)\n\tfor i := 0; i < n; i++ {\n\t\td := rand.Intn(2)\n\t\tif d == 1 {\n\t\t\tret[i] = \"\u79e9\"\n\t\t} else {\n\t\t\tret[i] = \"\u5e8f\"\n\t\t}\n\n\t}\n\n\treturn ret\n}\n\nfunc run(args []string) {\n\tfue := \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\"\n\tdan := \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\"\n\n\ti, _ := strconv.Atoi(args[0])\n\tdata := src(i)\n\tpre := make([]string, 8)\n\n\tq := 1\n\tfor _, v := range data {\n\t\tfmt.Println(v)\n\t\tpre = append(pre, v)\n\t\tif len(pre) == 8 {\n\t\t\tif strings.Join(pre[:], \"\") == \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\" {\n\t\t\t\tfmt.Println(fue)\n\t\t\t\tq = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpre = pre[1:]\n\t\t}\n\t}\n\n\tif q == 1 {\n\t\tfmt.Println(dan)\n\t}\n}\n"}
{"id": 164, "is_generated": true, "language": "Java", "code": "import java.math.BigInteger;\n\nclass AlphaNumber {\n  private final BigInteger value;\n  private static final BigInteger BASE = BigInteger.valueOf(9);\n\n  public AlphaNumber(String alphaStr) {\n    BigInteger calculatedValue = BigInteger.ZERO;\n    for (char c : alphaStr.toCharArray()) {\n      calculatedValue = calculatedValue.multiply(BASE).add(BigInteger.valueOf(c - 'A'));\n    }\n    this.value = calculatedValue;\n  }\n\n  public AlphaNumber(BigInteger value) {\n    this.value = value;\n  }\n\n  public BigInteger getValue() {\n    return this.value;\n  }\n\n  // Convert internal BigInteger value to its Alphabet Number string representation.\n  @Override\n  public String toString() {\n    if (this.value.equals(BigInteger.ZERO)) {\n      return \"A\";\n    }\n\n    StringBuilder alphaResult = new StringBuilder();\n    BigInteger num = this.value;\n    while (num.compareTo(BigInteger.ZERO) > 0) {\n      BigInteger[] qr = num.divideAndRemainder(BASE);\n      alphaResult.append((char) ('A' + qr[1].intValue()));\n      num = qr[0];\n    }\n    return alphaResult.reverse().toString();\n  }\n}\n\npublic class MainApp {\n  public static void main(String[] args) {\n    String command = args[0];\n    String input = args[1];\n\n    switch (command) {\n      case \"decode\":\n        System.out.println(new AlphaNumber(input).getValue());\n        break;\n      case \"encode\":\n        System.out.println(new AlphaNumber(new BigInteger(input)));\n        break;\n      case \"align\":\n        handleAlign(input);\n        break;\n    }\n  }\n\n  private static void handleAlign(String inputStr) {\n    AlphaNumber original = new AlphaNumber(inputStr);\n\n    String targetH = \"H\".repeat(inputStr.length());\n    AlphaNumber target = new AlphaNumber(targetH);\n\n    if (original.getValue().compareTo(target.getValue()) > 0) {\n      target = new AlphaNumber(targetH + \"H\");\n    }\n\n    BigInteger diffValue = target.getValue().subtract(original.getValue());\n    AlphaNumber difference = new AlphaNumber(diffValue);\n\n    System.out.printf(\"%s + %s = %s\\n\", original, difference, target);\n  }\n}"}
{"id": 165, "is_generated": false, "language": "Python3", "code": "import sys\nimport math\n\ndef encode(num):\n  num = int(num)\n  # 9\u9032\u6570\u306b\u5909\u63db\u3059\u308b\n  if num == 0:\n    n9 = [0]\n  else:\n    n9 = []\n    while num > 0:\n      n9.insert(0,num % 9)\n      num = num // 9\n\n  # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u5909\u63db\n  table = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n  num = str(n9)\n  output = \"\"\n  for i in n9:\n    output = output + table[i]\n  return output\n\ndef decode(alp):\n  # \u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n  dic = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8}\n  output = \"\"\n  for i in alp:\n    output = output + str(dic[i])\n  # 10\u9032\u306eint\u306b\u5909\u63db\u3059\u308b\n  output = int(output,9)\n  return output\n\ndef align(alp):\n  # \u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n  dic = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8}\n  output = \"\"\n  for i in alp:\n    output = output + str(dic[i])\n  output = int(output)\n  # \u6570\u5b57\u3067\u6c42\u3081\u308b\n  ref = 10 ** int(math.log10(output)+1)-1\n  output = ref - output\n  # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u5909\u63db\u3059\u308b\n  table = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n  num = str(output)\n  ans = \"\"\n  for i in num:\n    ans = ans + ans[int(i)]\n  return ans\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n\n    if argv[0] == \"decode\":\n      print(decode(argv[1]))\n    elif argv[0] == \"encode\":\n      print(encode(argv[1]))\n    elif argv[0] == \"align\":\n      print(align(argv[1]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 166, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(X):\n    if (int(X/9)):\n        return encode(int(X/9))+str(X%9)\n    return str(X%9)\n\ndic = {\"0\":\"A\", \"1\":\"B\", \"2\":\"C\", \"3\":\"D\", \"4\":\"E\", \"5\":\"F\", \"6\":\"G\", \"7\":\"H\", \"8\":\"I\"}\n\na = sys.argv[2]\nb = sys.argv[1]\n\nif b == \"decode\":\n    d = list(a)\n    e = []\n    for i in d:\n        keys = [k for k, v in dic.items() if v == i]\n        e.append(keys[0])\n    f = ''.join(e)\n    e = int(f,9)\n    print(str(e))\n    \nelif b == \"encode\":\n    a = int(a)\n    c = encode(a)\n    d = list(c)\n    e = []\n    for i in d:\n        e.append(dic[i])\n    print(''.join(e))\n    \nelse :\n    print('error')"}
{"id": 167, "is_generated": false, "language": "Ruby", "code": "#\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u5b57\u309210\u9032\u6570\u306b\ndef decode(argv)\n  result = 0\n  argv.tr(\"A-J\", \"0-9\").chars.reverse.each_with_index do |i, index|\n    result += 9 ** index * i.to_i\n  end\n  result\nend\n\n#10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u5b57\u306b\ndef encode(argv)\n  result = 0\n  int = argv.to_i\n  count = 1\n  while int > 0\n    enc = int%9\n    result += count * enc\n    count *= 10\n    int /= 9\n  end\n  result.to_s.tr(\"0-9\", \"A-J\")\nend\n\ndef align(argv)\n  #10\u9032\u6570\u306b\u5909\u63db\n  receive = decode(argv)\n  h = \"H\"\n  out = decode(h)\n  #\u7d50\u679c\u306e\u6841\u6570\u3092\u6574\u3048\u308b\n  while out - receive < 0\n    h += \"H\"\n    out = decode(h)\n  end\n  result = out - receive\n  argv + \" + \" + encode(result) + \" = \" + h\nend\n\ndef main(argv)\n  case argv[0]\n  when \"encode\"\n    puts(encode(argv[1]))\n  when \"decode\"\n    puts(decode(argv[1]))\n  when \"align\"\n    puts(align(argv[1]))\n  end\nend\n\nmain(ARGV)"}
{"id": 168, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode_alpha_num(alpha_num):\n    total = 0\n    for c in alpha_num:\n        total = total * 9 + (ord(c) - ord('A'))\n    return total\n\ndef encode_alpha_num(num):\n    if num == 0:\n        return 'A'\n    result = []\n    while num > 0:\n        digit = num % 9\n        result.append(chr(ord('A') + digit))\n        num //= 9\n    return ''.join(result[::-1])\n\ndef align_alpha_num(s):\n    n = len(s)\n    res = []\n    carry = 0\n    for i in range(n-1, -1, -1):\n        val = ord(s[i]) - ord('A') + carry\n        if val > 7:\n            carry = 1\n            add_digit = 7 + 9 - val\n        else:\n            carry = 0\n            add_digit = 7 - val\n        res.append(chr(ord('A') + add_digit))\n    if carry > 0:\n        res.append('A')\n    res.reverse()\n    return ''.join(res)\n\ndef main(argv):\n    c = argv[0]\n    v = argv[1]\n\n    if c == 'decode':\n        print(decode_alpha_num(v))\n    elif c == 'encode':\n        print(encode_alpha_num(int(v)))\n    else:\n        add = align_alpha_num(v)\n        print(f\"{v} + {add} = {'H'*len(v)}\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 169, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef a2n(alpha):\n  return ord(alpha) - 65\n\n\ndef n2a(n):\n  return chr(n + 65)\n  \n\ndef decode(alpha):\n  n = len(alpha)\n  result = 0\n\n  for i, s in enumerate(alpha):\n    result += a2n(s) * (9 ** (n - (i + 1)))\n\n  return(result)\n\n\ndef encode(num):\n  num = int(num)\n  alphaList = list()\n\n  while True:\n    alphaList.append(num % 9)\n    num = num // 9\n    if num == 0:\n      break\n  \n  alphaList.reverse()\n\n  result = list(map(n2a, alphaList))\n  return(\"\".join(result))\n\n\ndef align(alpha):\n  if alpha[0] is \"I\":\n    n = len(alpha) + 1\n  else:\n    n = len(alpha)\n  \n  a_num = decode(alpha)\n  ans_num = decode(\"H\" * n)\n  add_num = ans_num - a_num\n\n  return \"{} + {} = {}\".format(alpha, encode(add_num), encode(ans_num))\n\n\ndef main(argv):\n    f = argv[0]\n    a = argv[1]\n\n    if f == \"decode\":\n      func = decode\n    elif f == \"encode\":\n      func = encode\n    elif f == \"align\":\n      func = align\n\n    print(func(a))\n    \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 170, "is_generated": true, "language": "Java", "code": "import java.util.Random;\n\npublic class OrderChecker {\n  public static void main(String[] args) {\n    int n = 0;\n    if (args.length > 0) {\n      try {\n        n = Integer.parseInt(args[0]);\n      } catch (Exception e) {\n        n = 0;\n      }\n    }\n\n    String pattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    StringBuilder output = new StringBuilder();\n    Random r = new Random();\n\n    for (int i = 0; i < n; i++) {\n      char ch = r.nextBoolean() ? '\u79e9' : '\u5e8f';\n      System.out.println(ch);\n      output.append(ch);\n      if (output.length() >= pattern.length()) {\n        if (output.substring(output.length() - pattern.length()).equals(pattern)) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 171, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):  \n  if argv[0] == \"decode\":\n    decode(argv[1])\n  elif argv[0] == \"encode\":\n    encode(argv[1])\n  else:\n    print(\"align\")\n\n\ndef decode(in_str):\n  gen_num = 0\n  str_len = len(in_str)\n  for i, s in enumerate(in_str):\n    tmp = ord(s)-65\n    gen_num += tmp*(9**(str_len-i-1))\n  print(gen_num)\n\n\ndef encode(in_int):\n  def re_encoder(in_int):\n    if int(in_int/9):\n        return re_encoder(int(in_int/9)) + str(in_int%9)\n    return str(in_int%9)\n  \n  get_str = re_encoder(int(in_int))\n  gen_str = []\n  for s in get_str:\n    gen_str.append(chr(int(s)+65))\n  print(\"\".join(gen_str))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 172, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef base9_to_alpha(n):\n    if n == 0:\n        return 'A'\n    res = []\n    while n:\n        res.append(chr(ord('A') + (n % 9)))\n        n //= 9\n    return ''.join(res[::-1])\n\ndef alpha_to_base10(s):\n    num = 0\n    for ch in s:\n        num = num * 9 + (ord(ch) - ord('A'))\n    return num\n\ndef alpha_align(s):\n    # 7 = H, so digit + x == 7 mod 9\n    add = ''\n    for c in s:\n        add += chr(ord('A') + ((7 - (ord(c)-ord('A'))) % 9))\n    result = 'H' * len(s)\n    print(f\"{s} + {add} = {result}\")\n\ndef main(argv):\n    subcmd = argv[0]\n    arg = argv[1]\n    if subcmd == 'encode':\n        print(base9_to_alpha(int(arg)))\n    elif subcmd == 'decode':\n        print(alpha_to_base10(arg))\n    elif subcmd == 'align':\n        alpha_align(arg)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 173, "is_generated": true, "language": "Python3", "code": "import sys\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306810\u9032\u6570\u306e\u5909\u63db\u306b\u4f7f\u3046\u30de\u30c3\u30d4\u30f3\u30b0\nalpha_to_num = {chr(65 + i): i for i in range(9)}\nnum_to_alpha = {i: chr(65 + i) for i in range(9)}\n\n# 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\ndef encode_decimal_to_alphabet(decimal):\n    if decimal == 0:\n        return \"A\"\n    result = \"\"\n    while decimal > 0:\n        result = num_to_alpha[decimal % 9] + result\n        decimal //= 9\n    return result\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\ndef decode_alphabet_to_decimal(alpha_num):\n    decimal = 0\n    for ch in alpha_num:\n        decimal = decimal * 9 + alpha_to_num[ch]\n    return decimal\n\n# \u30a2\u30e9\u30a4\u30f3\u30e1\u30f3\u30c8\u3092\u8a08\u7b97\u3057\u3066\u51fa\u529b\u3059\u308b\u95a2\u6570\ndef align_to_h(alphabet_number):\n    length = len(alphabet_number)\n    total_h_value = length * 8  # \u5168\u3066H(=8)\u306b\u306a\u308b\u76ee\u6a19\u306e10\u9032\u6570\u5024\n    current_value = decode_alphabet_to_decimal(alphabet_number)\n    add_value_required = total_h_value - current_value\n    add_alpha = encode_decimal_to_alphabet(add_value_required)\n    return f\"{alphabet_number} + {add_alpha} = {'H' * length}\"\n\n# \u30e1\u30a4\u30f3\u95a2\u6570\ndef main(argv):\n    command = argv[0]\n    argument = argv[1]\n\n    if command == \"encode\":\n        decimal_value = int(argument)\n        print(encode_decimal_to_alphabet(decimal_value))\n    elif command == \"decode\":\n        print(decode_alphabet_to_decimal(argument))\n    elif command == \"align\":\n        print(align_to_h(argument))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 174, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode(alphabet_number):\n    # A simple decoder for alphabet numbers\n    mapping = {c: i for i, c in enumerate(\"ABCDEFGHI\")}\n    return sum(mapping[char] * (9 ** idx) for idx, char in enumerate(reversed(alphabet_number)))\n\ndef encode(decimal_number):\n    # Encoder to convert decimal to alphabet number\n    mapping = \"ABCDEFGHI\"\n    if decimal_number == 0:\n        return \"A\"\n    encoded = \"\"\n    while decimal_number:\n        encoded = mapping[decimal_number % 9] + encoded\n        decimal_number //= 9\n    return encoded\n\ndef align_alpha(value):\n    # Adjust alphabet number to sum to 'H'\n    length = len(value)\n    target = \"H\" * length\n    current_value = decode(value)\n    required = (8 * length) - current_value\n    add_value = encode(required)\n    return f\"{value} + {add_value} = {target}\"\n\ndef main(args):\n    job = args[0]\n    val = args[1]\n\n    if job == \"decode\":\n        print(decode(val))\n    elif job == \"encode\":\n        print(encode(int(val)))\n    elif job == \"align\":\n        print(align_alpha(val))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 175, "is_generated": false, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {  \n  // \u51fa\u529b\u6587\u5b57\u5217\u683c\u7d0d\u7528\u5909\u6570\n  let outStr = '';\n  // \u6587\u5b57\u5217\u9806\u5e8f\u767a\u898b\u30d5\u30e9\u30b0\n  let isDiscovered = false;\n\n  for (let i = 0; i < argv[0]; i++) {\n    // \u51fa\u529b\u6587\u5b57\u5217\u683c\u7d0d\u7528\u6587\u5b57\n    let str = ''\n\n    // \u6587\u5b57\u5217\u306b\u6307\u5b9a\u9806\u5e8f\u304c\u767a\u898b\u3067\u304d\u308c\u3070\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\n    if (outStr.indexOf('\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f') !== -1) {\n      isDiscovered = true;\n      break;\n    }\n\n    // \u51fa\u529b\u6587\u5b57\u5217\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u3081\u308b\n    switch (Math.round(Math.random())) {\n      case 0:\n        str = '\u79e9'\n        break;\n      case 1:\n        str = '\u5e8f'\n        break;\n    }\n    \n    // \u6587\u5b57\u5217\u306e\u51fa\u529b\u3068\u914d\u5217\u3078\u306e\u683c\u7d0d\n    outStr += str;\n    console.log(str)\n  }\n\n  // \u6587\u5b57\u5217\u9806\u5e8f\u767a\u898b\u30d5\u30e9\u30b0\u306b\u3088\u308a\u6700\u7d42\u51fa\u529b\u3092\u5236\u5fa1\n  if (isDiscovered) {\n    console.log('\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a');\n  } else {\n    console.log('\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!');\n  }\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 176, "is_generated": false, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n    $queue = [2,2,2,2,2,2,2];\n\n    for($i = 0; $i < $argv[0]; $i++) {\n        // printf(\"argv[%s]: %s\\n\", $index, $value);\n        $rd = rand(0,1);\n        if ($rda == 0) {\n            printf(\"\u79e9\\n\");\n            array_unshift($queue, 0);\n            array_pop($queue);\n        } else {\n            printf(\"\u5e8f\\n\");\n            array_unshift($queue, 1);\n            array_pop($queue);\n        }\n        if ($queue == [0, 1, 0, 0, 1, 0, 1] ) {\n            printf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n            exit();\n        }\n    }\n    printf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 177, "is_generated": false, "language": "Ruby", "code": "def main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  argv.each_index do |i|\n    v = argv[i]\n    puts \"argv[#{i}]: #{v}\"\n  end\n  \n  argv[0].to_i.times do |i|\n    if rand(2).to_i == 1\n      puts '\u79e9'\n    else\n      puts '\u5e8f'\n    end\n  end\n  puts '\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!'\nend\n\nmain(ARGV)\n"}
{"id": 178, "is_generated": true, "language": "Java", "code": "public class AlphaNumCli {\n  public static void main(String[] args) {\n    String cmd = args[0], val = args[1];\n    if (cmd.equals(\"encode\")) {\n      System.out.println(encode(Long.parseLong(val)));\n    } else if (cmd.equals(\"decode\")) {\n      System.out.println(decode(val));\n    } else if (cmd.equals(\"align\")) {\n      String b = align(val);\n      System.out.println(val + \" + \" + b + \" = \" + repeatH(val.length()));\n    }\n  }\n\n  static String encode(long n) {\n    if (n == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while(n>0) {\n      int mod = (int)(n % 9);\n      sb.append((char)('A' + mod));\n      n /= 9;\n    }\n    return sb.reverse().toString();\n  }\n\n  static long decode(String s) {\n    long res = 0;\n    for(char c : s.toCharArray()) {\n      res = res * 9 + (c - 'A');\n    }\n    return res;\n  }\n\n  static String align(String a) {\n    StringBuilder sb = new StringBuilder();\n    for(char c : a.toCharArray()) {\n      int d = c - 'A';\n      sb.append((char)('A' + (7 - d)));\n    }\n    return sb.toString();\n  }\n\n  static String repeatH(int len) {\n    StringBuilder sb = new StringBuilder();\n    for(int i=0; i<len; i++) sb.append('H');\n    return sb.toString();\n  }\n}"}
{"id": 179, "is_generated": false, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef decode(num):\n  num_abc_list = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n\n  result = 0\n  c = 0\n  len_num = len(num)\n\n  for j in num:\n    c += 1\n    x = num_abc_list.index(j)\n    result += x * 10 ** (len_num - c)\n\n    return result\n\ndef encode(num):\n  n = 0\n  num_abc_list = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n  result = \"\"\n  while True:\n    if int(num) <= 9 ** (n + 1):\n      break\n    n += 1\n    \n  num = int(num)\n  for k in range(0,n + 1):\n    y = num // (9 ** (n - k))\n    z = num % (9 ** (n - k))\n    result += num_abc_list[y]\n    num = z\n    \n  return result\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  \"\"\"\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n  \"\"\" \n  #\u5f15\u6570\u306e\u5206\u5272\n  subcommand = argv[0]\n  num = argv[1]\n  num_abc_list = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n\n  if subcommand == \"decode\":\n    result = decode(num)\n\n    print (result)\n\n  if subcommand == \"encode\":\n    result = encode(num)\n    \n    print (result)\n  \n  if subcommand == \"align\":\n    deci_num = decode(num)\n    l = 0\n    n = 0\n    result = \"\"\n    while True:\n      l += 7 * 9 ** n\n      if l > deci_num:\n        break\n      n += 1\n    result = num + \" + \" + encode(l - deci_num) + \" = \" + encode(l)\n    print(result)\n     \n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 180, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    lists=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n    #print(lists)\n    types=argv[0]\n    if types==\"decode\":\n      word=list(str(argv[1]))\n      sums=0\n      for i,k in enumerate(word):\n        #print(k)\n        #print(word.index(k))\n        sums+=(9**(len(word)-i-1)*lists.index(k))\n      print(sums)\n    if types==\"encode\":\n      sums=\"\"\n      list_box=[]\n      box=int(argv[1])\n      if box!=0:\n        while(box!=0):\n          list_box.insert(0,box%9)\n          box=box//9\n      else:\n        list_box.append(0)\n      for i in list_box:\n        sums+=lists[i]\n      print(sums)\n    if types==\"align\":\n      sums=\"\"\n      sts=0\n      list_box=[]\n      word=list(str(argv[1]))\n      word.reverse()\n      ans=\"\"\n      for i in word:\n        if lists.index(i)+sts<=7:\n          tmp=7-lists.index(i)-sts\n          list_box.insert(0,tmp)\n          sts=0\n          ans+=\"H\"\n        else :\n          tmp=16-lists.index(i)-sts\n          sts=1\n          list_box.insert(0,tmp)\n          ans+=\"H\"\n      if sts==1:\n        list_box.insert(0,6)\n        ans+=\"H\"\n      if list_box[0]==0 and len(list_box)>=2:\n        list_box.pop(0)\n      for i in list_box:\n        sums+=lists[i]\n      word.reverse()\n      word=\"\".join(word)\n      print(word+ \" + \" + sums  +\" = \" + ans)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 181, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\npublic class App {\n  // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3089\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u3078\n  private static int charToDigit(char ch) {\n    return ch - 'A';\n  }\n\n  // \u6570\u5b57\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3078\n  private static char digitToChar(int d) {\n    return (char) ('A' + d);\n  }\n\n  // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032BigInteger\u306b\u5909\u63db\n  private static BigInteger decode(String alphaNum) {\n    BigInteger res = BigInteger.ZERO;\n    for (int i = 0; i < alphaNum.length(); i++) {\n      int digit = charToDigit(alphaNum.charAt(i));\n      res = res.multiply(BigInteger.valueOf(9)).add(BigInteger.valueOf(digit));\n    }\n    return res;\n  }\n\n  // BigInteger 10\u9032\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3078\u5909\u63db\n  private static String encode(BigInteger num) {\n    if (num.equals(BigInteger.ZERO)) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (num.compareTo(BigInteger.ZERO) > 0) {\n      int rem = num.mod(BigInteger.valueOf(9)).intValue();\n      sb.append(digitToChar(rem));\n      num = num.divide(BigInteger.valueOf(9));\n    }\n    return sb.reverse().toString();\n  }\n\n  // align: alphaNum + x = HHH...\n  private static String align(String alphaNum) {\n    StringBuilder target = new StringBuilder();\n    StringBuilder add = new StringBuilder();\n    int n = alphaNum.length();\n    for (int i = 0; i < n; i++) {\n      target.append('H');\n      int a = charToDigit(alphaNum.charAt(i));\n      int b = (7 - a + 9) % 9;\n      add.append(digitToChar(b));\n    }\n    String left = alphaNum;\n    String right = add.toString();\n    String sum = target.toString();\n    // leading 'A' \u3092\u907f\u3051\u308b\n    if (left.equals(\"A\")) left = \"A\";\n    else left = removeLeadingA(left);\n    right = removeLeadingA(right);\n    sum = removeLeadingA(sum);\n    return left + \" + \" + right + \" = \" + sum;\n  }\n\n  private static String removeLeadingA(String s) {\n    int idx = 0;\n    while (idx < s.length() - 1 && s.charAt(idx) == 'A') idx++;\n    return s.substring(idx);\n  }\n\n  public static void main(String[] args) {\n    if (args.length < 2) return;\n    String sub = args[0];\n    String val = args[1];\n\n    switch (sub) {\n      case \"decode\":\n        System.out.println(decode(val));\n        break;\n      case \"encode\":\n        BigInteger n = new BigInteger(val);\n        System.out.println(encode(n));\n        break;\n      case \"align\":\n        System.out.println(align(val));\n        break;\n    }\n  }\n}"}
{"id": 182, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Numerics;\nusing System.Text;\nusing System.Linq; // For Array.Reverse in Encode\n\npublic static class AlphabeticNumeralSystem\n{\n    private const int BaseValue = 9;\n    private const char AlphaZeroChar = 'A'; // 'A' maps to 0\n    private const int HDigit = 7; // 'H' maps to 7\n\n    // Converts a character 'A'-'I' to an integer 0-8\n    private static int ToDigit(char alphaChar) => alphaChar - AlphaZeroChar;\n\n    // Converts an integer 0-8 to a character 'A'-'I'\n    private static char ToChar(int digit) => (char)(AlphaZeroChar + digit);\n\n    /// <summary>\n    /// Decodes an alphabetic number string to its decimal BigInteger equivalent.\n    /// </summary>\n    public static BigInteger Decode(string alphaNumber)\n    {\n        BigInteger result = BigInteger.Zero;\n        // Process from left to right for efficiency (multiply by base, add digit)\n        foreach (char c in alphaNumber)\n        {\n            result = result * BaseValue + ToDigit(c);\n        }\n        return result;\n    }\n\n    /// <summary>\n    /// Encodes a decimal BigInteger to its alphabetic number string representation.\n    /// </summary>\n    public static string Encode(BigInteger decimalNumber)\n    {\n        if (decimalNumber == BigInteger.Zero)\n        {\n            return \"A\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (decimalNumber > BigInteger.Zero)\n        {\n            int remainder = (int)(decimalNumber % BaseValue);\n            sb.Append(ToChar(remainder)); // Append digits in reverse order\n            decimalNumber /= BaseValue;\n        }\n\n        // Reverse the accumulated digits to get the correct order\n        char[] charArray = sb.ToString().ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }\n\n    /// <summary>\n    /// Calculates the \"alignment\" value for a given alphabetic number.\n    /// </summary>\n    public static string Align(string inputAlpha)\n    {\n        BigInteger originalValue = Decode(inputAlpha);\n        int currentTargetLength = inputAlpha.Length;\n        BigInteger targetHValue;\n\n        // Find the smallest 'H...H' number (all 'H's) that is greater than or equal to the original value\n        while (true)\n        {\n            // Calculate the value of 'H' repeated 'currentTargetLength' times in base 9.\n            // Formula: H_DIGIT * (BaseValue^currentTargetLength - 1) / (BaseValue - 1)\n            targetHValue = HDigit * (BigInteger.Pow(BaseValue, currentTargetLength) - BigInteger.One) / (BaseValue - 1);\n\n            if (targetHValue >= originalValue)\n            {\n                break;\n            }\n            currentTargetLength++; // Try a longer string of 'H's\n        }\n\n        BigInteger valueToAdd = targetHValue - originalValue;\n        string alphaValueToAdd = Encode(valueToAdd);\n        string targetHString = new string('H', currentTargetLength);\n\n        return $\"{inputAlpha} + {alphaValueToAdd} = {targetHString}\";\n    }\n}\n\npublic class MainClass\n{\n    static public void Main(string[] args)\n    {\n        string operation = args[0];\n        string input = args[1];\n\n        // Process commands using a switch statement\n        switch (operation)\n        {\n            case \"encode\":\n                Console.WriteLine(AlphabeticNumeralSystem.Encode(BigInteger.Parse(input)));\n                break;\n            case \"decode\":\n                Console.WriteLine(AlphabeticNumeralSystem.Decode(input));\n                break;\n            case \"align\":\n                Console.WriteLine(AlphabeticNumeralSystem.Align(input));\n                break;\n            // No default case needed as problem states input is always valid\n        }\n    }\n}"}
{"id": 183, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring toAlphabetNumber(int n) {\n    string result;\n    do {\n        result = char('A' + (n % 9)) + result;\n        n /= 9;\n    } while (n > 0);\n    return result.empty() ? \"A\" : result;\n}\n\nint fromAlphabetNumber(const string& alphaNum) {\n    int number = 0;\n    for (char ch : alphaNum) {\n        number = number * 9 + (ch - 'A');\n    }\n    return number;\n}\n\nstring getAlignment(const string& alphaNum) {\n    string sumPart;\n    for (char ch : alphaNum) {\n        char need = 'H' - ch + 'A';\n        if (need < 'A') need += 9;\n        sumPart += need;\n    }\n    return alphaNum + \" + \" + sumPart + \" = \" + string(alphaNum.size(), 'H');\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n\n    if (string(argv[1]) == \"encode\") {\n        cout << toAlphabetNumber(stoi(argv[2])) << endl;\n    } else if (string(argv[1]) == \"decode\") {\n        cout << fromAlphabetNumber(argv[2]) << endl;\n    } else if (string(argv[1]) == \"align\") {\n        cout << getAlignment(argv[2]) << endl;\n    }\n\n    return 0;\n}"}
{"id": 184, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(X):\n    if (int(X/9)):\n        return encode(int(X/9))+str(X%9)\n    return str(X%9)\n\ndef decode(X):\n    dic = {\"0\":\"A\", \"1\":\"B\", \"2\":\"C\", \"3\":\"D\", \"4\":\"E\", \"5\":\"F\", \"6\":\"G\", \"7\":\"H\", \"8\":\"I\"}\n    ret = list(X)\n    out = []\n    for i in ret:\n        keys = [k for k, v in dic.items() if v == i]\n        out.append(keys[0])\n    out = ''.join(out)\n    return out\n    \ndef main():\n    dic = {\"0\":\"A\", \"1\":\"B\", \"2\":\"C\", \"3\":\"D\", \"4\":\"E\", \"5\":\"F\", \"6\":\"G\", \"7\":\"H\", \"8\":\"I\"}\n    cmd = sys.argv[1]\n    value = sys.argv[2]\n    \n    if cmd == \"decode\":\n        out = decode(value)\n        out = int(out,9)\n        print(str(out))\n\n    elif cmd == \"encode\":\n        ret = list(encode(int(value)))\n        out = []\n        for i in ret:\n            out.append(dic[i])\n        print(''.join(out))\n        \n        \nif __name__ =='__main__':\n    main()"}
{"id": 185, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    com, arg = argv\n\n    # \u5909\u63db\u7528\n    num2alp = 'ABCDEFGHI'\n    alp2num = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8}\n\n    if com=='encode':\n        num = int(arg)\n        ans = ''\n        anslist = []\n        cnt = 0\n        while num >= 9**cnt:     # \u6841\u6570\u3092\u8a08\u7b97\n            cnt += 1\n        for i in range(cnt):     # \u4e0a\u4f4d\u306e\u6841\u304b\u3089\u9806\u306b\u8a08\u7b97\n            tmp = int((num - (num%9**(cnt-1-i))) / 9**(cnt-1-i))\n            anslist.append(tmp)\n            num -= tmp * 9**(cnt-1-i)\n        for i in anslist:        # \u6587\u5b57\u306b\u5909\u63db   \n            ans += num2alp[i]\n        if cnt==0:               # \u5165\u529b\u304c0\u306e\u3068\u304d\n            ans += 'A'\n        print(ans)\n    \n    if com=='decode':\n        cnt = 0\n        ans = 0\n        for alp in arg[::-1]:    # \u4e0b\u306e\u6841\u304b\u3089\u9806\u306b\u8db3\u3057\u3066\u3044\u304f\n            ans += 9**cnt * alp2num[alp]\n            cnt += 1\n        print(ans)\n    \n    if com=='align':\n        arg = arg[::-1]\n        ans = ''\n        cnt = 0                 # \u7e70\u308a\u4e0a\u3052\u78ba\u8a8d\u7528\n        for alp in arg:\n            tmp = alp2num[alp]+cnt\n            if tmp >= 8:        # \u7e70\u308a\u4e0a\u3052\u306e\u3068\u304d\n                cnt = 1\n                ans += 'I'\n            else:               # \u7e70\u308a\u4e0a\u3052\u306e\u306a\u3044\u3068\u304d\n                cnt = 0\n                ans += num2alp[7 - (tmp - cnt*7)]\n        if cnt==1:\n            ans += 'G'\n        ans = ans[::-1]\n        arg = arg[::-1]\n        Hs = 'H'*len(ans)\n        if len(ans)>1 and ans[0]=='A':\n            ans = ans[1:]\n        print('{} + {} = {}'.format(arg, ans, Hs))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 186, "is_generated": false, "language": "Java", "code": "package track;\nimport java.util.Random;\n\npublic class App {\n  \n\t  String[] chars = new String[] {\"\u79e9\", \"\u5e8f\"};\n\t  String answer = chars[0] + chars[1] + chars[0] + chars[0] + chars[1] + chars[0] + chars[1];\n\t  String call = \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\";\n\t  String alert = \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\";\n\t  int max = 10000;\n\n\tpublic static void main(String[] args) {\n\t    App app = new App();\n\t    int count = Integer.parseInt(args[0]);\n\t    app.exec(count);\n\t}\n\n\t  public void exec(int count){\n\n\t    Random rnd = new Random();\n\t    StringBuffer buf = new StringBuffer();\n\n\t    for(int i = 0; i < count; i++){\n        int now = rnd.nextInt(1);\n        System.out.println(chars[now]);\n\t      buf.append(chars[now]);\n\t      if(buf.toString().contains(answer)){\n\t        System.out.println(call);\n\t        return;\n\t      }\n\t    }\n\t    System.out.println(alert);\n\t  }\n}\n"}
{"id": 187, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode(val):\n    n = int(val)\n    if n == 0:\n        return \"A\"\n    res = \"\"\n    while n > 0:\n        res = chr(ord('A') + (n % 9)) + res\n        n //= 9\n    return res\n\ndef decode(s):\n    result = 0\n    for ch in s:\n        d = ord(ch) - ord('A')\n        result = result * 9 + d\n    return result\n\ndef align(s):\n    g = []\n    for ch in s:\n        v = ord(ch) - ord('A')\n        a = (7 - v) % 9\n        g.append(chr(ord('A') + a))\n    print(f\"{s} + {''.join(g)} = {'H'*len(s)}\")\n\ndef main(argv):\n    if argv[0] == \"decode\":\n        print(decode(argv[1]))\n    elif argv[0] == \"encode\":\n        print(encode(argv[1]))\n    elif argv[0] == \"align\":\n        align(argv[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 188, "is_generated": true, "language": "Java", "code": "public class AlphaCipher {\n  public static void main(String[] args) {\n    String cmd = args[0];\n    String val = args[1];\n    switch(cmd) {\n      case \"encode\": {\n        long n = Long.parseLong(val);\n        System.out.println(toAlpha(n));\n        break;\n      }\n      case \"decode\": {\n        System.out.println(toDecimal(val));\n        break;\n      }\n      case \"align\": {\n        String b = alignNum(val);\n        System.out.println(val + \" + \" + b + \" = \" + allH(val.length()));\n        break;\n      }\n    }\n  }\n\n  static String toAlpha(long x) {\n    if (x == 0) return \"A\";\n    StringBuilder sb = new StringBuilder();\n    while (x > 0) {\n      int d = (int)(x % 9);\n      sb.append((char)('A' + d));\n      x /= 9;\n    }\n    return sb.reverse().toString();\n  }\n\n  static long toDecimal(String s) {\n    long res = 0;\n    for (char c : s.toCharArray()) {\n      res = res * 9 + (c-'A');\n    }\n    return res;\n  }\n\n  static String alignNum(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(char c : s.toCharArray()) {\n      sb.append((char)('A' + (7 - (c-'A'))));\n    }\n    return sb.toString();\n  }\n\n  static String allH(int len) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<len; i++) sb.append('H');\n    return sb.toString();\n  }\n}"}
{"id": 189, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Numerics;\nusing System.Text;\n\npublic class AlphabetConverter\n{\n    private const int BaseNine = 9; // Alphabetic system is base 9\n    private const char CharA = 'A'; // 'A' maps to 0\n    private const char CharH = 'H'; // 'H' maps to 7\n\n    // Converts an alphabet character ('A'-'I') to its integer digit value (0-8)\n    private static int ConvertCharToDigit(char alphaChar)\n    {\n        return alphaChar - CharA;\n    }\n\n    // Converts an integer digit value (0-8) to its alphabet character ('A'-'I')\n    private static char ConvertDigitToChar(int digit)\n    {\n        return (char)(CharA + digit);\n    }\n\n    // Decodes an alphabet number string to a BigInteger (decimal)\n    public static BigInteger DecodeAlphaNumber(string alphaString)\n    {\n        BigInteger result = BigInteger.Zero;\n        BigInteger power = BigInteger.One; // Represents 9^0, 9^1, 9^2, ...\n\n        // Iterate from right to left (least significant to most significant)\n        for (int i = alphaString.Length - 1; i >= 0; i--)\n        {\n            int digit = ConvertCharToDigit(alphaString[i]);\n            result += digit * power;\n            power *= BaseNine;\n        }\n        return result;\n    }\n\n    // Encodes a BigInteger (decimal) to an alphabet number string\n    public static string EncodeDecimalNumber(BigInteger decimalNumber)\n    {\n        if (decimalNumber == BigInteger.Zero)\n        {\n            return \"A\"; // Special case for zero\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (decimalNumber > BigInteger.Zero)\n        {\n            BigInteger remainder = decimalNumber % BaseNine;\n            sb.Insert(0, ConvertDigitToChar((int)remainder)); // Prepend the digit\n            decimalNumber /= BaseNine;\n        }\n        return sb.ToString();\n    }\n\n    // Aligns an alphabet number to a target of 'H's\n    public static string AlignAlphaNumber(string inputAlpha)\n    {\n        BigInteger originalValue = DecodeAlphaNumber(inputAlpha);\n        int currentHLength = inputAlpha.Length;\n        BigInteger targetHValue;\n        \n        // Find the smallest H...H value that is >= originalValue\n        while (true)\n        {\n            int hDigit = ConvertCharToDigit(CharH); // Value of 'H' (which is 7)\n            BigInteger sumOfPowers = BigInteger.Zero;\n            BigInteger powerOfBase = BigInteger.One; // 9^0, 9^1, ...\n\n            // Calculate sum of 9^0 + 9^1 + ... + 9^(currentHLength-1)\n            for (int i = 0; i < currentHLength; i++)\n            {\n                sumOfPowers += powerOfBase;\n                powerOfBase *= BaseNine;\n            }\n            targetHValue = hDigit * sumOfPowers; // Decimal value of H...H\n\n            if (targetHValue >= originalValue)\n            {\n                break;\n            }\n            currentHLength++; // Increase length of H...H string\n        }\n\n        BigInteger valueToAdd = targetHValue - originalValue;\n        string alphaValueToAdd = EncodeDecimalNumber(valueToAdd);\n        string targetHString = new string(CharH, currentHLength);\n\n        return $\"{inputAlpha} + {alphaValueToAdd} = {targetHString}\";\n    }\n}\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        string command = args[0];\n        string value = args[1];\n\n        if (command == \"encode\")\n        {\n            BigInteger decimalNum = BigInteger.Parse(value);\n            Console.WriteLine(AlphabetConverter.EncodeDecimalNumber(decimalNum));\n        }\n        else if (command == \"decode\")\n        {\n            Console.WriteLine(AlphabetConverter.DecodeAlphaNumber(value));\n        }\n        else if (command == \"align\")\n        {\n            Console.WriteLine(AlphabetConverter.AlignAlphaNumber(value));\n        }\n    }\n}"}
{"id": 190, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define BIGNUM_BASE 1000000000LL // 10^9\n#define BIGNUM_WIDTH 9\n#define MAX_BIGNUM_CELLS 30\n\ntypedef struct {\n    long long cells[MAX_BIGNUM_CELLS];\n    int size;\n} BigInt;\n\nvoid bigint_zero(BigInt* n) {\n    memset(n->cells, 0, sizeof(n->cells));\n    n->size = 1;\n}\n\nvoid bigint_from_str(BigInt* n, const char* s) {\n    bigint_zero(n);\n    for (int i = 0; s[i]; i++) {\n        long long carry = 0;\n        for (int j = 0; j < n->size; j++) {\n            long long val = n->cells[j] * 10 + carry;\n            n->cells[j] = val % BIGNUM_BASE;\n            carry = val / BIGNUM_BASE;\n        }\n        if (carry) n->cells[n->size++] = carry;\n\n        carry = s[i] - '0';\n        for (int j = 0; j < n->size && carry > 0; j++) {\n            long long val = n->cells[j] + carry;\n            n->cells[j] = val % BIGNUM_BASE;\n            carry = val / BIGNUM_BASE;\n        }\n        if (carry) n->cells[n->size++] = carry;\n    }\n}\n\nvoid bigint_print(const BigInt* n) {\n    if (n->size == 1 && n->cells[0] == 0) {\n        printf(\"0\");\n        return;\n    }\n    printf(\"%lld\", n->cells[n->size - 1]);\n    for (int i = n->size - 2; i >= 0; i--) {\n        printf(\"%0*lld\", BIGNUM_WIDTH, n->cells[i]);\n    }\n}\n\n\nvoid handle_decode(const char* val) {\n    BigInt res;\n    bigint_zero(&res);\n    for (int i = 0; val[i]; i++) {\n        long long carry = 0;\n        for (int j = 0; j < res.size; j++) {\n            long long temp = res.cells[j] * 9 + carry;\n            res.cells[j] = temp % BIGNUM_BASE;\n            carry = temp / BIGNUM_BASE;\n        }\n        if (carry > 0) res.cells[res.size++] = carry;\n        \n        carry = val[i] - 'A';\n        for (int j = 0; j < res.size && carry > 0; j++) {\n            long long temp = res.cells[j] + carry;\n            res.cells[j] = temp % BIGNUM_BASE;\n            carry = temp / BIGNUM_BASE;\n        }\n        if (carry > 0) res.cells[res.size++] = carry;\n    }\n    bigint_print(&res);\n    printf(\"\\n\");\n}\n\nvoid handle_encode(const char* val) {\n    if (strcmp(val, \"0\") == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n    BigInt n;\n    bigint_from_str(&n, val);\n\n    char result_alpha[MAX_BIGNUM_CELLS * BIGNUM_WIDTH] = {0};\n    int k = 0;\n    while (n.size > 1 || n.cells[0] != 0) {\n        long long rem = 0;\n        for (int i = n.size - 1; i >= 0; i--) {\n            long long cur = n.cells[i] + rem * BIGNUM_BASE;\n            n.cells[i] = cur / 9;\n            rem = cur % 9;\n        }\n        result_alpha[k++] = rem + 'A';\n        if (n.size > 1 && n.cells[n.size-1] == 0) n.size--;\n    }\n    \n    for (int i = 0; i < k / 2; i++) {\n        char tmp = result_alpha[i];\n        result_alpha[i] = result_alpha[k - 1 - i];\n        result_alpha[k - 1 - i] = tmp;\n    }\n    printf(\"%s\\n\", result_alpha);\n}\n\nvoid handle_align(const char* val) {\n    int len = strlen(val);\n    char h_comp[len + 2];\n    for (int i = 0; i < len; i++) h_comp[i] = 'H';\n    h_comp[len] = '\\0';\n\n    int target_len = len;\n    if (strcmp(val, h_comp) > 0) {\n        target_len = len + 1;\n    }\n    \n    char target_h[target_len + 2];\n    char res_y[target_len + 2];\n\n    for(int i = 0; i < target_len; i++) target_h[i] = 'H';\n    target_h[target_len] = '\\0';\n    \n    res_y[target_len] = '\\0';\n    int borrow = 0;\n    for (int i = 0; i < target_len; i++) {\n        int x_digit = (i < len) ? val[len - 1 - i] - 'A' : 0;\n        int diff = ('H' - 'A') - x_digit - borrow;\n        if (diff < 0) {\n            diff += 9;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        res_y[target_len - 1 - i] = diff + 'A';\n    }\n    \n    char* p_res = res_y;\n    while (*p_res == 'A' && *(p_res+1) != 0) p_res++;\n\n    printf(\"%s + %s = %s\\n\", val, p_res, target_h);\n}\n\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n    if (strcmp(argv[1], \"decode\") == 0) {\n        handle_decode(argv[2]);\n    } else if (strcmp(argv[1], \"encode\") == 0) {\n        handle_encode(argv[2]);\n    } else if (strcmp(argv[1], \"align\") == 0) {\n        handle_align(argv[2]);\n    }\n    return 0;\n}"}
{"id": 191, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 2) {\n      System.out.println(\"Incorrect usage.\");\n      return;\n    }\n\n    String mode = args[0];\n    String input = args[1];\n    if (mode.equals(\"decode\")) {\n      System.out.println(decodeAlphabet(input));\n    } else if (mode.equals(\"encode\")) {\n      System.out.println(encodeDecimal(Integer.parseInt(input)));\n    } else if (mode.equals(\"align\")) {\n      System.out.println(generateAlignment(input));\n    } else {\n      System.out.println(\"Invalid operation.\");\n    }\n  }\n\n  public static int decodeAlphabet(String str) {\n    int number = 0;\n    for (char c : str.toCharArray()) {\n      number = number * 9 + (c - 'A');\n    }\n    return number;\n  }\n\n  public static String encodeDecimal(int number) {\n    if (number == 0) return \"A\";\n    StringBuilder result = new StringBuilder();\n    while (number > 0) {\n      result.insert(0, (char) ('A' + number % 9));\n      number /= 9;\n    }\n    return result.toString();\n  }\n\n  public static String generateAlignment(String str) {\n    StringBuilder result = new StringBuilder();\n    for (char c : str.toCharArray()) {\n      result.append((char) ('H' + 'A' - c));\n    }\n    return str + \" + \" + result + \" = \" + \"H\".repeat(str.length());\n  }\n}"}
{"id": 192, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class RandomGenerator {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"Invalid number of arguments. Provide a single integer argument.\");\n      return;\n    }\n\n    int maxCount;\n    try {\n      maxCount = Integer.parseInt(args[0]);\n      if (maxCount < 0 || maxCount > 10000) {\n        System.out.println(\"Please provide an integer between 0 and 10000.\");\n        return;\n      }\n    } catch (NumberFormatException e) {\n      System.out.println(\"The argument must be an integer.\");\n      return;\n    }\n\n    Random random = new Random();\n    String target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    StringBuilder currentSequence = new StringBuilder();\n    String[] characters = {\"\u79e9\", \"\u5e8f\"};\n\n    for (int count = 0; count < maxCount; count++) {\n      String generatedChar = characters[random.nextInt(characters.length)];\n      System.out.println(generatedChar);\n      currentSequence.append(generatedChar);\n\n      if (currentSequence.length() >= target.length() && currentSequence.substring(currentSequence.length() - target.length()).equals(target)) {\n        System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        return;\n      }\n    }\n\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 193, "is_generated": true, "language": "Python3", "code": "import sys\nfrom functools import reduce\n\n# Constants for the custom base-9 system\nBASE_VALUE = 9\nDIGIT_CHARS = \"ABCDEFGHI\"\nCHAR_TO_INT_MAP = {char: i for i, char in enumerate(DIGIT_CHARS)}\nINT_TO_CHAR_MAP = {i: char for i, char in enumerate(DIGIT_CHARS)}\nH_INT_VALUE = CHAR_TO_INT_MAP['H']\n\ndef convert_alpha_to_decimal(alpha_string: str) -> int:\n    # Converts a string of alphabet characters to a decimal integer.\n    # Uses reduce for a more functional approach.\n    return reduce(lambda acc, char: acc * BASE_VALUE + CHAR_TO_INT_MAP[char], alpha_string, 0)\n\ndef convert_decimal_to_alpha(decimal_value: int) -> str:\n    # Converts a decimal integer to its alphabet string representation.\n    if decimal_value == 0:\n        return DIGIT_CHARS[0] # 'A'\n\n    result_digits = []\n    current_value = decimal_value\n    while current_value > 0:\n        current_value, remainder = divmod(current_value, BASE_VALUE)\n        result_digits.append(INT_TO_CHAR_MAP[remainder])\n    return \"\".join(reversed(result_digits))\n\ndef calculate_alignment(initial_alpha_value: str) -> str:\n    # Determines the complement required to sum to an 'H'-only number.\n    initial_decimal = convert_alpha_to_decimal(initial_alpha_value)\n    \n    num_chars = len(initial_alpha_value)\n    target_alpha_base = 'H' * num_chars\n    target_decimal = convert_alpha_to_decimal(target_alpha_base)\n    \n    # Adjust target number of 'H's if it's smaller than the initial value.\n    while target_decimal < initial_decimal:\n        num_chars += 1\n        target_alpha_base += 'H'\n        # Compute new target decimal efficiently\n        target_decimal = target_decimal * BASE_VALUE + H_INT_VALUE\n        \n    difference_decimal = target_decimal - initial_decimal\n    difference_alpha = convert_decimal_to_alpha(difference_decimal)\n    \n    return f\"{initial_alpha_value} + {difference_alpha} = {target_alpha_base}\"\n\ndef main(cli_args):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    operation_type = cli_args[0]\n    input_argument = cli_args[1]\n\n    if operation_type == \"decode\":\n        print(convert_alpha_to_decimal(input_argument))\n    elif operation_type == \"encode\":\n        print(convert_decimal_to_alpha(int(input_argument)))\n    elif operation_type == \"align\":\n        print(calculate_alignment(input_argument))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 194, "is_generated": false, "language": "Python3", "code": "import sys\nimport math\n\ndict = {0: 'A', 1: 'B', 2: \"C\", 3: \"D\", 4: \"E\", 5: \"F\", 6: \"G\", 7: \"H\", 8: \"I\"}\n\ndef get_key_from_value(d, val):\n    keys = [k for k, v in d.items() if v == val]\n    if keys:\n        return keys[0]\n    return None\n\ndef base_10_to_9(x):\n    x_dumy = x\n    out = ''\n    while x_dumy>0:\n        out = str(x_dumy%n)+out\n        x_dumy = int(x_dumy/9)\n    return out\n\ndef nsin(X,n):\n    if(int(math.floor(X / n)) == 0):\n        return nsin(int(X/n),n)+str(X%n)\n    return str(X%n)\n\ndef base_str(n, radix):\n    digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n\n    def num_check(attr, i):\n        try:\n            return int(i)\n        except:\n            raise ValueError('invalid %s : %s' % (attr, i))\n\n    n = num_check('n', n)\n    radix = num_check('radix', radix)\n\n    if not 1 < radix < 37:\n        raise ValueError('invalid radix %s' % radix)\n\n    is_negative = n < 0\n    n = abs(n)\n    result = []\n\n    while n:\n        result.insert(0, n % radix)\n        n /= radix\n        if n == 0:\n            break\n\n    s = ''.join([digits[i] for i in result])\n    if is_negative:\n        s = '-' + s\n    return s\n\ndef conv(x, n):\n    if x == 0: return 0\n\n    nchar = '0123456789ABCDEF'\n    digit = 0\n\n    result = ''\n\n    while (x > 0):\n        (a, b) = divmod(x, n)\n        result = nchar[b] + result\n        x = a\n\n    return result\n\ndef func_encode(i):\n  if (i == 0): return \"A\"\n  else:\n    encodedI = list(conv(int(i), 9))\n    encodedII = map(lambda x: dict[int(x)], encodedI)\n    return \"\".join(encodedII)\n\ndef func_decode(s):\n  l = len(s)\n  listStr = list(s)\n  orderedStr = list(map(lambda x: get_key_from_value(dict, x), listStr))\n  sumx = 0\n  for i, v in enumerate(reversed(orderedStr)):\n    sumx += v * 9 ** i\n  return sumx\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n#    for i, v in enumerate(argv):\n#        print(\"argv[{0}]: {1}\".format(i, v))\n#    for i, v in enumerate(argv):\n#      print(i, v)\n#      if(i == \"encode\"):\n#        print(func_encode(v))\n    order = argv[0]\n    num = argv[1]\n    if (order == \"encode\"):\n      print(func_encode(num))\n    elif (order == \"decode\"):\n      print(func_decode(num))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n\n\n"}
{"id": 195, "is_generated": false, "language": "Python", "code": "#!/usr/bin/env python3\nimport sys\n\nalphabet = \"ABCDEFGHIJK\"\n\n\ndef to_decimals(numbers):\n    return int(numbers, base=9)\n\n\ndef to_base_9(numbers):\n    numbers = int(numbers)\n    if int(numbers / 9):\n        return to_base_9(int(numbers / 9)) + str(numbers % 9)\n    return str(numbers % 9)\n\n\ndef to_letters(numbers):\n    numbers = str(numbers)\n    letters = \"\"\n    for i in range(len(numbers)):\n        letter = alphabet[int(numbers[i])]\n        letters += letter\n    return letters\n\n\ndef to_numbers(letters):\n    letters = letters.upper()\n    numbers = \"\"\n    for i in range(len(letters)):\n        number = str(alphabet.find(letters[i]))\n        numbers += number\n    return numbers\n\n\ndef main(argv):\n    if argv[0] == \"encode\":\n        numbers = to_base_9(argv[1])\n        output = to_letters(numbers)\n\n    if argv[0] == \"decode\":\n        numbers = to_numbers(argv[1])\n        output = to_decimals(numbers)\n\n    if argv[0] == \"align\":\n        numbers = to_numbers(argv[1])\n        total = \"\"\n        for i in range(len(numbers)):\n            total += \"7\"\n\n        additive = to_decimals(total) - to_decimals(numbers)\n\n        while additive < 0:\n            total += \"7\"\n            additive = to_decimals(total) - to_decimals(numbers)\n\n        additive = to_base_9(additive)\n        output = \"{input} + {additive} = {total}\".format(\n            input=argv[1],\n            additive=to_letters(additive),\n            total=to_letters(total)\n        )\n    print(output)\n\n\nmain(sys.argv[1:])\n"}
{"id": 196, "is_generated": false, "language": "Python3", "code": "import sys\nnum2alpha = lambda c: chr(c+65)\nalpha2num = lambda c: ord(c) - ord('A')\n\ndef encode(n):\n    new_n = int(n)\n    if(n)\n    while new_n!=0:\n        l.append(num2alpha(new_n%9))\n        new_n = int((new_n-new_n%9)/9)\n    new_l = list(reversed(l))\n    #for i in new_l:\n    #    print(i, end=\"\")\n    #print()\n    return(new_l)\n \n\ndef decode(n):\n    sum_n = 0\n    count = 0\n    new_n = list(reversed(n))\n    for i in new_n:\n        sum_n += alpha2num(i)*pow(9, count)\n        count += 1\n    return(sum_n)\n     \n\ndef align(n):\n    dec_n = decode(n)\n    h_num = 0\n    for i in range(len(n)):\n        h_num += 7*pow(9, i) \n    enc_n = h_num - dec_n\n    ans = encode(enc_n)\n    return(ans)\n    \n\n     \n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    n = argv[1]\n    if argv[0]==\"encode\":\n        new_l = encode(n)\n        for i in new_l:\n            print(i, end=\"\")\n        print()\n    elif argv[0]==\"decode\":\n        sum_n = decode(n)\n        print(sum_n)\n    else:\n        ans = align(n)\n        print(n + \" + \", end=\"\")\n        for i in ans:\n            print(i, end=\"\")\n        print(\" = \",end=\"\")\n        for i in range(len(n)):\n            print(\"H\", end=\"\")\n        print()\n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 197, "is_generated": false, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n  s = \"\u79e9\u5e8f\"\n  q = \"\"\n  for i in range(int(argv)):\n    idx = random.randint(0,1)\n    print(s[idx])\n    q += s[idx]\n    if i > 7 and q[-7:] == \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\":\n      print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n      exit()\n  print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n    \nif __name__ == '__main__':\n  random.seed()\n  main(sys.argv[1])\n"}
{"id": 198, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alph_to_digit(c):\n    return ord(c) - ord('A')\n\ndef digit_to_alph(d):\n    return chr(d + ord('A'))\n\ndef decode_alpha(s):\n    # 9\u9032\u6570\u3068\u3057\u3066\u5909\u63db\n    res = 0\n    for ch in s:\n        res = res * 9 + alph_to_digit(ch)\n    return res\n\ndef encode_alpha(n):\n    if n == 0:\n        return 'A'\n    res = []\n    while n > 0:\n        res.append(digit_to_alph(n % 9))\n        n //=9\n    res.reverse()\n    return ''.join(res)\n\ndef align_alpha(s):\n    # s + x = HHH... (\u9577\u3055\u306fs\u306e\u6841\u9577)\n    length = len(s)\n    target_digit = alph_to_digit('H')  # 7\n    digits = [alph_to_digit(c) for c in s]\n    res = []\n    carry = 0\n    for d in reversed(digits):\n        total = target_digit + 9 + carry # 9\u306f\u88dc\u6b63\u5024\u8abf\u6574\n        # actual: (d + x + carry) % 9 = target_digit\n        # x = (target_digit - d - carry) mod 9\n        x = (target_digit - d - carry) % 9\n        carry = (d + x + carry) // 9 - 1\n        res.append(digit_to_alph(x))\n    res.reverse()\n    # \u6574\u5f62\n    left = ''.join(digits_to_alpha(digits))\n    right = ''.join(res)\n    sum_ = encode_alpha(decode_alpha(s)+decode_alpha(right))\n    return f\"{s} + {right} = {sum_}\"\n\ndef digits_to_alpha(digits):\n    return [digit_to_alph(d) for d in digits]\n\ndef main(argv):\n    cmd = argv[0]\n    arg = argv[1]\n    if cmd == 'decode':\n        print(decode_alpha(arg))\n    elif cmd == 'encode':\n        n = int(arg)\n        print(encode_alpha(n))\n    else: # align\n        length = len(arg)\n        tgt = alph_to_digit('H')\n        digits = [alph_to_digit(c) for c in arg]\n        add_digits = []\n        carry = 0\n        for d in reversed(digits):\n            x = (tgt - d - carry) % 9\n            carry = (d + x + carry) // 9 -1\n            add_digits.append(x)\n        add_digits.reverse()\n        add_str = ''.join(digit_to_alph(d) for d in add_digits)\n        sum_val = decode_alpha(arg) + decode_alpha(add_str)\n        sum_str = encode_alpha(sum_val)\n        print(f\"{arg} + {add_str} = {sum_str}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 199, "is_generated": false, "language": "Python3", "code": "import sys\nimport numpy as np\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  #for i, v in enumerate(argv):\n   # print(\"argv[{0}]: {1}\".format(i, v))\n\n  alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n\n  if argv[0] == 'encode':\n    num = int(argv[1])\n    int_nums = np.base_repr(num, base=9)\n\n    for int_num in int_nums:\n      print(alphabet[int(int_num)], end='')\n\n\n  elif argv[0] == 'decode':\n    i = 0\n    total_num = 0\n    for char_num in argv[1][::-1]:\n      int_num = alphabet.index(char_num)\n      num = int_num * 9 ** i\n      total_num += num\n      i += 1\n    \n    print(total_num)\n\n  elif argv[0] == 'align':\n\n\n    for num in argv[1]:\n      int_num = alphabet.index(num)\n      num2 = 7 - int_num\n      E = 'E' * len(argv[1])\n      print(argv[1] '+' alphabet[int(num2)] '=' + E, end='')\n      \n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 200, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <string>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u6587\u5b57\u3092\u751f\u6210\u3057\u7279\u5b9a\u306e\u6587\u5b57\u5217\u3092\u63a2\u3059\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n    if (argc != 2) {\n        cout << \"Usage: \" << argv[0] << \" <number_of_outputs>\" << endl;\n        return 0;\n    }\n\n    int maxCount = atoi(argv[1]);\n    if (maxCount < 0 || maxCount > 10000) {\n        cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << endl;\n        return 0;\n    }\n\n    string sequence = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    string outputString = \"\";\n    srand((unsigned)time(0));\n\n    for (int i = 0; i < maxCount; i++) {\n        string randomChar = (rand() % 2 == 0) ? \"\u79e9\" : \"\u5e8f\";\n        cout << randomChar << endl;\n        outputString += randomChar;\n\n        if (outputString.find(sequence) != string::npos) {\n            cout << \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\" << endl;\n            return 0;\n        }\n    }\n\n    cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << endl;\n    return 0;\n}"}
{"id": 201, "is_generated": false, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nargs = sys.argv\n\ndef i2s(integer):\n  return chr(integer+ord('A'))\n\ndef s2i(char):\n  return ord(char)-ord(\"A\")\n\ndef enc (for_conv):\n  if for_conv == 0:\n    return 'A'\n  nines = 0\n  keta = 1\n  while for_conv != 0:\n    for_conv, remainder = divmod(for_conv, 9)\n    nines += remainder * keta\n    keta *= 10\n  convedStr = \"\"\n  dvd = 10\n  while nines != 0:\n    convedStr = i2s(nines%dvd) + convedStr\n    nines = nines // dvd\n  return convedStr\n\ndef dec(for_conv):\n  conved = 0\n  for i in range(len(for_conv)):\n    conved = conved * 9\n    conved = conved + s2i(for_conv[i])\n  return conved\n\ndef aln(for_conv):\n  decoded = dec(for_conv)\n  is_fin = False\n  Hs = \"H\"\n  while not is_fin:\n    alignNum = dec(Hs) - decoded\n    if alignNum >= 0:\n      is_fin = True\n    else:\n      Hs += \"H\"\n  decoded = \"\"\n  keta = 10\n  remainder = 0\n  encoded = enc(alignNum)\n  return for_conv + \" + \" + encoded + \" = \" + Hs\n\nif __name__ == '__main__':\n  command = args[1]\n  for_convert = args[2]\n  if command == \"encode\":\n    print(enc(int(for_convert)))\n  if command == \"decode\":\n    print(dec(for_convert))\n  if command == \"align\":\n    print(aln(for_convert))"}
{"id": 202, "is_generated": false, "language": "Python3", "code": "import sys\nimport math\n\ndef decoder(x):\n  y=0\n  for i in x:\n    y*=9\n    y+=(ord(i)-ord(\"A\"))\n  return y\n\ndef encoder(x):\n  if x!=0:\n    ex=int(math.log(int(x),9))\n    y=\"\"\n    for i in range(ex,-1,-1):\n      y+=chr(x//(9**i)+ord(\"A\"))\n      x-=(x//(9**i))*(9**i)\n    return y\n  else:\n    return \"A\"\n\ndef main(argv):\n  command=argv[0]\n  if command==\"decode\":\n    x=argv[1]\n    y=decoder(x)\n    print(y)\n\n  elif command==\"encode\":\n    x=int(argv[1])\n    y=encoder(x)\n    print(y)\n\n  elif command==\"align\":\n    x=argv[1]\n    y=decoder(x)\n    length=len(x)\n    if decoder(\"H\"*length)<y:\n      length+=1\n    z=decoder(\"H\"*length)-y\n    z=encoder(z)\n    print(x+\" + \"+z+\" = \"+\"H\"*length)\n    \nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 203, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar encode_digit(int num) {\n    return (num + 'A'); // Convert to alphabetic representation\n}\n\nint decode_digit(char ch) {\n    return (ch - 'A'); // Convert from alphabetic representation to integer\n}\n\nvoid encode(int number) {\n    char result[211]; // Buffer for the result\n    int index = 0;\n    \n    if (number == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n  \n    while (number > 0) {\n        result[index++] = encode_digit(number % 9);\n        number /= 9;\n    }\n    result[index] = '\\0';\n    \n    // Reverse the result for correct ordering\n    for (int i = 0; i < index / 2; i++) {\n        char temp = result[i];\n        result[i] = result[index - i - 1];\n        result[index - i - 1] = temp;\n    }\n    printf(\"%s\\n\", result);\n}\n\nvoid decode(const char *input) {\n    int length = strlen(input);\n    int number = 0;\n  \n    for (int i = 0; i < length; i++) {\n        number = number * 9 + decode_digit(input[i]);\n    }\n    printf(\"%d\\n\", number);\n}\n\nvoid align(const char *input) {\n    int length = strlen(input);\n    char result[31]; // Buffer for the result\n    char align_value[31]; // Value that needs to be summed up\n\n    for (int i = 0; i < length; i++) {\n        int digit = decode_digit(input[i]);\n        int needed = (8 - digit) % 9; // Calculate needed digit to make it H (8)\n        align_value[i] = encode_digit(needed);\n        result[i] = input[i];\n    }\n    result[length] = '\\0';\n    align_value[length] = '\\0';\n\n    printf(\"%s + %s = \", result, align_value);\n  \n    for (int i = 0; i < length; i++) {\n        printf(\"H\"); // Output 'H' for each position\n    }\n    printf(\"\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        return 1; // Error if wrong number of arguments\n    }\n\n    const char *command = argv[1];\n    const char *value = argv[2];\n\n    if (strcmp(command, \"encode\") == 0) {\n        int number = atoi(value); // Convert to integer\n        encode(number);\n    } else if (strcmp(command, \"decode\") == 0) {\n        decode(value);\n    } else if (strcmp(command, \"align\") == 0) {\n        align(value);\n    } else {\n        return 1; // Error if unknown command\n    }\n\n    return 0;\n}"}
{"id": 204, "is_generated": false, "language": "Python3", "code": "import sys\n\nalpha=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\ndic=dict(zip(list(range(9)),alpha))\ndicc=dict(zip(alpha,list(range(9))))\ndef tonine(x):\n    if x//9>0:\n      return tonine(x//9)+dic[x%9]\n    else:\n      return dic[x%9]\n  \ndef nineto(x):\n    e=0\n    for i in range(1,len(x)+1):\n      e+=dicc[x[-i]]*(9**(i-1))\n    return e\ndef eight(x):\n  st=\"H\"\n  s=\"H\"\n  while():\n    s+=st\n    if nineto(st)>x:\n      return st\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    if argv[0]==\"decode\":\n      return nineto(argv[1])\n    elif argv[0]==\"encode\":\n      num=int(argv[1])\n      a=tonine(num)\n      return str(a).translate(dic)\n    elif argv[0]==\"align\":\n      a=nineto(argv[1])\n      print(a)\n      c=eight(a)\n      print(c)\n      b=tonine(a)\n    else:\n      print(\"False Input\")\n\nif __name__ == '__main__':\n    print(main(sys.argv[1:]))\n"}
{"id": 205, "is_generated": true, "language": "Python3", "code": "import sys\n\n# Define the numerical system properties\nCUSTOM_DIGITS = \"ABCDEFGHI\"\nRADIX = len(CUSTOM_DIGITS) # This is 9\n\ndef get_decimal_value(alpha_string):\n    # Function to convert an alphabet string to its decimal equivalent\n    value_map = {char: idx for idx, char in enumerate(CUSTOM_DIGITS)}\n    \n    result = 0\n    power_of_radix = 0\n    \n    # Iterate from right to left (least significant digit to most significant)\n    for char_in_str in reversed(alpha_string):\n        digit_num = value_map[char_in_str]\n        result += digit_num * (RADIX ** power_of_radix)\n        power_of_radix += 1\n        \n    return result\n\ndef get_alpha_string(decimal_number):\n    # Function to convert a decimal number to its alphabet string equivalent\n    if decimal_number == 0:\n        return CUSTOM_DIGITS[0] # Returns 'A' for 0\n\n    converted_digits = []\n    current_val = decimal_number\n    \n    # Perform repeated division and append remainders\n    while current_val > 0:\n        remainder = current_val % RADIX\n        converted_digits.append(CUSTOM_DIGITS[remainder])\n        current_val //= RADIX\n        \n    return \"\".join(reversed(converted_digits)) # Reverse to get correct order\n\ndef calculate_h_complement(alpha_num_input):\n    # Function to find the complement for 'H' alignment\n    dec_form_input = get_decimal_value(alpha_num_input)\n    \n    length_of_input = len(alpha_num_input)\n    target_h_string = 'H' * length_of_input\n    dec_form_h_string = get_decimal_value(target_h_string)\n    \n    # Adjust the length of the 'H' string if it's not large enough\n    h_digit_value = CUSTOM_DIGITS.index('H')\n    while dec_form_h_string < dec_form_input:\n        length_of_input += 1\n        target_h_string += 'H'\n        dec_form_h_string = dec_form_h_string * RADIX + h_digit_value # Efficient update\n\n    needed_decimal_val = dec_form_h_string - dec_form_input\n    needed_alpha_string = get_alpha_string(needed_decimal_val)\n    \n    return f\"{alpha_num_input} + {needed_alpha_string} = {target_h_string}\"\n\ndef main(arguments_list):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    operation_key = arguments_list[0]\n    data_value = arguments_list[1]\n\n    if operation_key == \"decode\":\n        print(get_decimal_value(data_value))\n    elif operation_key == \"encode\":\n        print(get_alpha_string(int(data_value)))\n    elif operation_key == \"align\":\n        print(calculate_h_complement(data_value))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 206, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode_to_decimal(letter_num):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092 10 \u9032\u6570\u306b\u5909\u63db\u3059\u308b\n    mapping = {chr(65 + i): i for i in range(9)}\n    result = 0\n    for char in letter_num:\n        result = result * 9 + mapping[char]\n    return result\n\ndef encode_from_decimal(decimal_num):\n    # 10 \u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\n    mapping = {i: chr(65 + i) for i in range(9)}\n    if decimal_num == 0:\n        return \"A\"\n    result = []\n    while decimal_num > 0:\n        result.append(mapping[decimal_num % 9])\n        decimal_num //= 9\n    return ''.join(result[::-1])\n\ndef align_to_H(letter_num):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5bfe\u3059\u308b H \u914d\u5217\u3092\u8a08\u7b97\u3059\u308b\n    H_char = 'H'\n    H_value = 8\n    num_len = len(letter_num)\n    desired_sum = H_value * num_len\n    current_value = decode_to_decimal(letter_num)\n    diff = desired_sum - current_value\n    part_to_add = encode_from_decimal(diff)\n    result = f\"{letter_num} + {part_to_add} = {H_char * num_len}\"\n    return result\n\ndef main(argv):\n    command = argv[0]\n    arg = argv[1]\n\n    if command == \"decode\":\n        print(decode_to_decimal(arg))\n    elif command == \"encode\":\n        print(encode_from_decimal(int(arg)))\n    elif command == \"align\":\n        print(align_to_H(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 207, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define BUFF_LEN 300\n\nvoid str_rev(char *p) {\n    char *q = p + strlen(p) - 1;\n    while (p < q) {\n        char t = *p; *p++ = *q; *q-- = t;\n    }\n}\n\nvoid task_decode(const char *in) {\n    char out[BUFF_LEN] = \"0\";\n    char *p_out = out;\n    const char *p_in = in;\n\n    while (*p_in) {\n        int carry = 0;\n        char *p_curr = p_out;\n        for (; *p_curr; p_curr++) {\n            int digit = (*p_curr - '0') * 9 + carry;\n            *p_curr = (digit % 10) + '0';\n            carry = digit / 10;\n        }\n        while (carry) { *p_curr++ = (carry % 10) + '0'; carry /= 10; }\n        *p_curr = '\\0';\n        \n        carry = *p_in++ - 'A';\n        p_curr = p_out;\n        while (carry) {\n            if (!*p_curr) {*p_curr = '0'; *(p_curr+1) = '\\0';}\n            int digit = (*p_curr - '0') + carry;\n            *p_curr++ = (digit % 10) + '0';\n            carry = digit / 10;\n        }\n    }\n    str_rev(p_out);\n    printf(\"%s\\n\", p_out);\n}\n\nvoid task_encode(const char *in) {\n    if (in[0] == '0' && in[1] == '\\0') { puts(\"A\"); return; }\n\n    char num[BUFF_LEN], next_num[BUFF_LEN];\n    char res[BUFF_LEN] = {0};\n    char *p_res = res;\n    strcpy(num, in);\n    char *p_num_base = num;\n\n    while (*p_num_base) {\n        long long rem = 0;\n        char *p_next = next_num;\n        char *p_num = p_num_base;\n        int first_digit = 1;\n        while(*p_num) {\n            rem = rem * 10 + (*p_num++ - '0');\n            char q_digit = rem / 9;\n            if (!first_digit || q_digit != 0) {\n                *p_next++ = q_digit + '0';\n                first_digit = 0;\n            }\n            rem %= 9;\n        }\n        *p_next = '\\0';\n        *p_res++ = rem + 'A';\n        strcpy(p_num_base, next_num);\n    }\n    *p_res = '\\0';\n    str_rev(res);\n    puts(res);\n}\n\nvoid task_align(const char *in) {\n    int len_in = strlen(in);\n    char tmp[BUFF_LEN];\n    memset(tmp, 'H', len_in); tmp[len_in] = '\\0';\n\n    int len_target = len_in + (strcmp(in, tmp) > 0);\n\n    char target[BUFF_LEN], result[BUFF_LEN];\n    memset(target, 'H', len_target); target[len_target] = '\\0';\n    result[len_target] = '\\0';\n\n    int borrow = 0;\n    const char *p_in = in + len_in - 1;\n    char *p_res = result + len_target - 1;\n\n    for (int i = 0; i < len_target; i++) {\n        int digit_in = (i < len_in) ? *p_in-- - 'A' : 0;\n        int diff = ('H' - 'A') - digit_in - borrow;\n        borrow = (diff < 0);\n        if (borrow) diff += 9;\n        *p_res-- = diff + 'A';\n    }\n\n    char *p = result;\n    if (strlen(p) > 1 && *p == 'A') p++;\n    printf(\"%s + %s = %s\\n\", in, p, target);\n}\n\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n    if (strcmp(argv[1], \"decode\") == 0) task_decode(argv[2]);\n    else if (strcmp(argv[1], \"encode\") == 0) task_encode(argv[2]);\n    else if (strcmp(argv[1], \"align\") == 0) task_align(argv[2]);\n    return 0;\n}"}
{"id": 208, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(v):\n  num = int(v)\n  ret = \"\"\n  while num != 0:\n    ret += chr((num % 9) + 65)\n    num //= 9\n  if len(ret) == 0:\n    return \"A\"\n  return ret[::-1]\n\ndef decode(v):\n  ret = 0\n  for i in range(len(v)):\n    ret += 9 ** (len(v)-(i+1)) * (ord(v[i]) - 65)\n  return ret\n\ndef align(v):\n  ret = \"\"\n  for i in range(len(v)):\n    if v[i] == \"I\":\n      ret += \"GI\"\n\n    else:\n      ret += chr(7-(ord(v[i])-65)+65)\n  return v + \" + \" + ret + \" = \"+\"H\"*len(ret)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n    val = \"(\" + argv[1] + \")\"\n    if argv[0] == \"decode\":\n      v = decode(argv[1])\n    elif argv[0] == \"encode\":\n      v = encode(argv[1])\n    else:\n      v = align(argv[1])\n    print(v)\n    #print(exec(argv[0]+val))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 209, "is_generated": true, "language": "Java", "code": "import java.math.BigInteger;\n\npublic class Solver {\n\n  private static final BigInteger NINE = new BigInteger(\"9\");\n\n  public static void main(String[] args) {\n    String op = args[0];\n    String val = args[1];\n\n    if (op.equals(\"encode\")) {\n      System.out.println(toAlpha(new BigInteger(val)));\n    } else if (op.equals(\"decode\")) {\n      System.out.println(toBigInt(val));\n    } else if (op.equals(\"align\")) {\n      BigInteger n1 = toBigInt(val);\n      \n      String targetStr = \"H\".repeat(val.length());\n      BigInteger targetVal = toBigInt(targetStr);\n\n      if (n1.compareTo(targetVal) > 0) {\n        targetStr = \"H\".repeat(val.length() + 1);\n        targetVal = toBigInt(targetStr);\n      }\n      \n      BigInteger n2 = targetVal.subtract(n1);\n      String addStr = toAlpha(n2);\n\n      System.out.println(val + \" + \" + addStr + \" = \" + targetStr);\n    }\n  }\n\n  private static BigInteger toBigInt(String s) {\n    BigInteger res = BigInteger.ZERO;\n    for (char c : s.toCharArray()) {\n      res = res.multiply(NINE).add(BigInteger.valueOf(c - 'A'));\n    }\n    return res;\n  }\n\n  private static String toAlpha(BigInteger n) {\n    if (n.signum() == 0) return \"A\";\n    \n    StringBuilder sb = new StringBuilder();\n    while (n.signum() > 0) {\n      BigInteger[] divrem = n.divideAndRemainder(NINE);\n      n = divrem[0];\n      sb.append((char)('A' + divrem[1].intValue()));\n    }\n    return sb.reverse().toString();\n  }\n}"}
{"id": 210, "is_generated": false, "language": "Python3", "code": "import sys\n\nL = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\n\ndef main(argv):\n    # for i, v in enumerate(argv):\n    #     print(\"argv[{0}]: {1}\".format(i, v))\n    sub = argv[0]\n    inp = argv[1]\n    if sub == \"encode\":\n      encode(int(inp))\n    elif sub == \"decode\":\n      decode(str(inp))\n    elif sub == \"align\":\n      align(str(inp))\n\ndef decode(x):\n  a = 0\n  li = reversed(list(x))\n  for i, c in enumerate(li):\n    a = a + int(L.index(c))*(9**i)\n  print(a)\n\n\ndef encode(x):\n  a = \"\"\n  while True:\n    a += L[x % 9]\n    x = x//9\n    if x  == 0 :\n      break\n  print(str(a[::-1]))\n\ndef align(x):\n  a = \"\"\n  if x[0]==\"I\":\n    li = list(\"B\"+x)\n  else:  \n    li = list(x)\n  for i, c in enumerate(li):\n    a = a + L[7-int(L.index(c))] \n  print(\"{} + {} = {}\".format(x, a, \"H\"*len(a)))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 211, "is_generated": false, "language": "Java", "code": "package track;\n\n// \u5168\u89d2\u30b9\u30da\u30fc\u30b9\u304c\u3042\u3063\u305f\u3093\u3060\u3051\u3069\u5acc\u304c\u3089\u305b\u3067\u3059\u304b\npublic class App {\n  public static final String CHECK_STR = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n  public static final String CHECK_OK_STR = \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\";\n  public static final String CHECK_NO_STR = \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\";\n  public static final String CHITSU = \"\u79e9\";\n  public static final String JO = \"\u5e8f\";\n  \n  public static void main(String[] args) {\n    \n    for (int i = 0, l = args.length; i < l; i++) {\n        String output = String.format(\"argv[%s]: %s\", i, args[i]);\n//\t\t\tSystem.out.println(output);\n      \n      int num = Integer.parseInt(args[i]);\n      String mojiretsu = \"\";\n      for (int j = 0; j< num; j++) {\n        String printStr = ChitsuOrJo();\n        System.out.println(printStr);\n        \n        // null\u6765\u305f\u3089\u3084\u3070\u3044\u3051\u3069\u4e00\u65e6\u3053\u308c\u3067\n        mojiretsu = mojiretsu + printStr;\n        if (mojiretsu.contains(CHECK_STR)) {\n          System.out.println(CHECK_OK_STR);\n          return;\n        }\n      }\n      System.out.println(CHECK_NO_STR);\n\t\t}\n\t}\n  \n  /**\n  * \n  */\n  public static String ChitsuOrJo(){\n    int random = (int)Math.random()*10;\n    return  random % 2 == 0 ? CHITSU : JO;\n  }\n}\n"}
{"id": 212, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Text;\nusing System.Numerics;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        string command = args[0];\n        string value = args[1];\n\n        if (command == \"decode\")\n        {\n            var number = ToDecimal(value);\n            Console.WriteLine(number.ToString());\n        }\n        else if (command == \"encode\")\n        {\n            var number = BigInteger.Parse(value);\n            var alpha = ToAlphabetNumber(number);\n            Console.WriteLine(alpha);\n        }\n        else if (command == \"align\")\n        {\n            CalculateAlignment(value);\n        }\n    }\n\n    // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6570\u5024\u306b\u5909\u63db\n    static private int CharToDigit(char c)\n    {\n        return c - 'A';\n    }\n    \n    // \u6570\u5024\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u5909\u63db\n    static private char DigitToChar(int d)\n    {\n        return (char)('A' + d);\n    }\n    \n    // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\n    static private BigInteger ToDecimal(string alpha)\n    {\n        BigInteger result = 0;\n        foreach (char c in alpha)\n        {\n            result = result * 9 + CharToDigit(c);\n        }\n        return result;\n    }\n\n    // 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\n    static private string ToAlphabetNumber(BigInteger num)\n    {\n        if (num == 0)\n        {\n            return \"A\";\n        }\n\n        var sb = new StringBuilder();\n        while (num > 0)\n        {\n            BigInteger remainder;\n            num = BigInteger.DivRem(num, 9, out remainder);\n            sb.Insert(0, DigitToChar((int)remainder));\n        }\n        return sb.ToString();\n    }\n\n    // align\u30b3\u30de\u30f3\u30c9\u306e\u51e6\u7406\n    static private void CalculateAlignment(string inputAlpha)\n    {\n        int len = inputAlpha.Length;\n        BigInteger inputValue = ToDecimal(inputAlpha);\n\n        string targetH = new string('H', len);\n        BigInteger targetValue = ToDecimal(targetH);\n\n        if (inputValue > targetValue)\n        {\n            targetH = new string('H', len + 1);\n            targetValue = ToDecimal(targetH);\n        }\n\n        BigInteger neededValue = targetValue - inputValue;\n        string neededAlpha = ToAlphabetNumber(neededValue);\n\n        Console.WriteLine($\"{inputAlpha} + {neededAlpha} = {targetH}\");\n    }\n}"}
{"id": 213, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <math.h>\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u304b\u3089\u6570\u5024\u3092\u5909\u63db\nlong decodeAlphabetNumber(const char *alphabet) {\n    int len = strlen(alphabet);\n    long value = 0;\n    for (int i = 0; i < len; i++) {\n        value = value * 9 + (alphabet[i] - 'A');\n    }\n    return value;\n}\n\n// \u6570\u5024\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092\u5909\u63db\nvoid encodeAlphabetNumber(long num, char *result) {\n    char temp[256];\n    int idx = 0;\n\n    if (num == 0) {\n        result[0] = 'A';\n        result[1] = '\\0';\n        return;\n    }\n\n    while (num > 0) {\n        temp[idx++] = (num % 9) + 'A';\n        num /= 9;\n    }\n    temp[idx] = '\\0';\n\n    for (int i = 0; i < idx; i++) {\n        result[i] = temp[idx - i - 1];\n    }\n    result[idx] = '\\0';\n}\n\n// Align\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u51e6\u7406\nvoid alignAlphabetNumber(const char *alphabet) {\n    int len = strlen(alphabet);\n    char result[32];\n    char complement[32];\n    memset(result, 'H', len);\n    result[len] = '\\0';\n\n    long value = decodeAlphabetNumber(alphabet);\n    long target = decodeAlphabetNumber(result);\n    long alignment = target - value;\n\n    encodeAlphabetNumber(alignment, complement);\n    printf(\"%s + %s = %s\\n\", alphabet, complement, result);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        printf(\"Invalid arguments\\n\");\n        return 1;\n    }\n\n    const char *command = argv[1];\n    const char *input = argv[2];\n\n    if (strcmp(command, \"decode\") == 0) {\n        long value = decodeAlphabetNumber(input);\n        printf(\"%ld\\n\", value);\n    } else if (strcmp(command, \"encode\") == 0) {\n        long num = atol(input);\n        char result[256];\n        encodeAlphabetNumber(num, result);\n        printf(\"%s\\n\", result);\n    } else if (strcmp(command, \"align\") == 0) {\n        alignAlphabetNumber(input);\n    } else {\n        printf(\"Invalid command\\n\");\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 214, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(num):\n  num = int(num)\n  if num == 0:\n    return 'A'\n\n  s = ''\n  while num > 0:\n    i = num % 9\n    s += chr(ord('A') + i)\n    num = num // 9\n  return s[::-1]\n\ndef decode(s):\n  num = 0\n  for i, c in enumerate(s[::-1]):\n    num += (9 ** i) * (ord(c) - ord('A'))\n  return num\n\ndef align(s1):\n  num1 = decode(s1)\n  H = 'H'\n\n  while num1 > decode(H):\n    H += 'H'\n\n  num2 = decode(H) - num1\n  s2 = encode(num2)\n\n  print(s1 + ' + ' + s2  + ' = ' + H)\n\ndef main(argv):\n  if argv[0] == 'encode':\n    print(encode(argv[1]))\n  elif argv[0] == 'decode':\n    print(decode(argv[1]))\n  elif argv[0] == 'align':\n    align(argv[1])\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 215, "is_generated": false, "language": "Python3", "code": "import sys\n## decode 'A'\u2192'0'\ndef decode(n):\n  c = 0\n  for i, d in enumerate(reversed(n)):\n      c += (ord(d)-65) *( 9 ** i )\n  return c\n## encode '0'\u2192'A'\ndef encode(n):\n  n = int(n)\n  l = []\n  while True:\n      l.append(chr(n % 9 + 65))\n      if n // 9 == 0:\n          break\n      n = n//9\n  l.reverse()\n  return ''.join(l)\n## align 'A' \u2192 'A + H = H'\ndef align(n):\n  # \u5165\u529b\u3092decode\n  inp_arr = decode(list(n))\n\n  count = 0\n  hantei = -1\n  ## \u3044\u304f\u3064\u306eH\u304c\u5fc5\u8981\u304b\u3092\u8abf\u3079\u308b\n  while True:\n      if inp_arr <= hantei:\n        # ans \u2192'HHH...'\u306e10\u9032\u6570\n        ans = hantei\n        break\n      # A\u306e\u3068\u304d\u306b\u3064\u3058\u3064\u307e\u3092\u3042\u308f\u305b\u308b\n      if count == 0:\n        hantei += 1\n      count += 1 \n      hantei += 9 ** (count-1) *7 \n\n  return n + ' + ' + encode(ans - inp_arr) + ' = ' + encode(ans)\n\n\ndef main(argv):\n  \n  command, n = argv[0], argv[1]\n## command \u306b\u3088\u3063\u3066\u4f7f\u3046\u30e1\u30bd\u30c3\u30c9\u306e\u5224\u5b9a\n  if command == \"decode\":\n      print(decode(list(n)))\n  elif command == \"encode\":\n      print(encode(n))\n  elif command == \"align\":\n      print(align(n))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 216, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    number = \"012345678\"\n    alphabet = \"ABCDEFGHI\"\n    dictionary = {}\n    ans = \"\"\n\n    for i, v in enumerate(argv):\n        # print(\"argv[{0}]: {1}\".format(i, v))\n        if i == 0:\n            sp = v\n        else:\n            mo = v\n    #sp = \"align\"; mo = \"GG\"\n    ########\u95a2\u6570\u90e8\u5206##############\n    def Base_10_to_n(X, n):\n        if (int(X / n)):\n            return Base_10_to_n(int(X / n), n) + str(X % n)\n        return str(X % n)\n\n    ############################\n    ########\u95a2\u6570\u90e8\u5206##############\n    def Base_n_to_10(X, n):\n        out = 0\n        for i in range(1, len(str(X)) + 1):\n            out += int(X[-i]) * (n ** (i - 1))\n        return out  # int out\n\n    ############################\n    if sp == \"encode\":\n        num = int(mo)\n        for di in range(9):\n            dictionary[number[di]] = alphabet[di]\n\n\n\n        #####\u95a2\u6570\u3092\u3064\u304b\u3063\u3066\u307f\u308b\uff0e#####\n        ######\u4eca\u56de\u306f\u4e8c\u9032\u6570\u306b\u5909\u63db######\n        x10 = num\n        x9 = Base_10_to_n(x10, 9)\n        #print(x9)  # \"100011\"\u304c\u8868\u793a\u3055\u308c\u308b\uff0e\n        for x in x9:\n            ans += dictionary[x]\n\n        print(ans)\n    elif sp == \"decode\":\n        alpha = mo\n        for di in range(9):\n            dictionary[alphabet[di]] = number[di]\n\n        tmp = \"\"\n        for x in alpha:\n            tmp += dictionary[x]\n\n\n        ans = Base_n_to_10(tmp, 9)\n        #print(Base_n_to_10(tmp, 9))  # \"55\"\u3068\u8868\u793a\u3055\u308c\u308b\uff0e\n        print(ans)\n    else:\n        alpha = mo\n        for di in range(9):\n            dictionary[alphabet[di]] = number[di]\n\n        tmp = \"\"\n        for x in alpha:\n            tmp += dictionary[x]\n\n        ans = \"\"\n        res = 0\n        for u in tmp[::-1]:\n            u = int(u)\n            u = u + res\n            if u != 8:\n                rr = 7 - u\n                ans += str(rr)\n                res = 0\n            else:\n                ans += str(8)\n                res = 1\n        if ans[-1] != \"8\":\n            #ans +=\n            pass\n        for n, kk in enumerate(ans):\n            if kk != \"0\":\n                ans = ans[n:]\n                break\n        ans = ans[::-1]\n\n        ttt = Base_n_to_10(ans, 9)\n        uuu = Base_n_to_10(tmp, 9)\n        kkk = ttt + uuu\n        kkk = Base_10_to_n(kkk, 9)\n\n\n        for di in range(9):\n            dictionary[number[di]] = alphabet[di]\n\n        ans2 = \"\"\n        kkk2 = \"\"\n        for x in kkk:\n            kkk2 += dictionary[x]\n        for x in ans:\n            ans2 += dictionary[x]\n\n        print(mo + \" + \" + ans2 + \" = \" + kkk2)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])#encode 32768\n"}
{"id": 217, "is_generated": true, "language": "Java", "code": "import java.util.Random;\n\npublic class MissionRunner {\n  private static final String GOAL = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n\n  public static void main(String[] args) {\n    int limit = 0;\n    if (args.length > 0) {\n      try {\n        limit = Integer.parseInt(args[0]);\n      } catch (Exception e) {\n        limit = 0;\n      }\n    }\n\n    Random random = new Random();\n    StringBuilder history = new StringBuilder();\n\n    for (int i = 0; i < limit; i++) {\n      char nextChar = random.nextBoolean() ? '\u79e9' : '\u5e8f';\n      System.out.println(nextChar);\n      history.append(nextChar);\n      if (history.length() >= GOAL.length()) {\n        String recent = history.substring(history.length() - GOAL.length());\n        if (recent.equals(GOAL)) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 218, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n// 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3078\u5909\u63db\nvoid encode(char *output, long number) {\n    char temp[256];\n    int i = 0;\n\n    if (number == 0) {\n        strcpy(output, \"A\");\n        return;\n    }\n\n    while (number != 0) {\n        temp[i++] = (number % 9) + 'A';\n        number /= 9;\n    }\n\n    for (int j = 0; j < i; j++) {\n        output[j] = temp[i - j - 1];\n    }\n    output[i] = '\\0';\n}\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u623b\u3059\nlong decode(const char *input) {\n    long result = 0;\n    while (*input) {\n        result = result * 9 + (*input - 'A');\n        input++;\n    }\n    return result;\n}\n\n// align\u8a08\u7b97\nvoid align(const char *input) {\n    char alignResult[128];\n    char filling[128];\n    int length = strlen(input);\n\n    memset(alignResult, 'H', length);\n    alignResult[length] = '\\0';\n\n    long rawValue = decode(input);\n    long targetValue = decode(alignResult);\n    long fillValue = targetValue - rawValue;\n\n    encode(filling, fillValue);\n\n    printf(\"%s + %s = %s\\n\", input, filling, alignResult);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 3) {\n        printf(\"Error: Please provide subcommand and value.\\n\");\n        return 1;\n    }\n\n    if (strcmp(argv[1], \"decode\") == 0) {\n        printf(\"%ld\\n\", decode(argv[2]));\n    } else if (strcmp(argv[1], \"encode\") == 0) {\n        char result[256];\n        encode(result, atol(argv[2]));\n        printf(\"%s\\n\", result);\n    } else if (strcmp(argv[1], \"align\") == 0) {\n        align(argv[2]);\n    } else {\n        printf(\"Unknown subcommand: %s\\n\", argv[1]);\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 219, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 2) {\n      System.out.println(\"Usage: <command> <value>\");\n      return;\n    }\n\n    String command = args[0];\n    String value = args[1];\n\n    switch (command) {\n      case \"decode\":\n        System.out.println(convertAlphabetToDecimal(value));\n        break;\n      case \"encode\":\n        System.out.println(convertDecimalToAlphabet(Integer.parseInt(value)));\n        break;\n      case \"align\":\n        System.out.println(findAlignmentEquation(value));\n        break;\n      default:\n        System.out.println(\"Invalid command provided.\");\n    }\n  }\n\n  private static int convertAlphabetToDecimal(String alphabetNumber) {\n    int base10 = 0;\n    for (char c : alphabetNumber.toCharArray()) {\n      base10 = base10 * 9 + (c - 'A');\n    }\n    return base10;\n  }\n\n  private static String convertDecimalToAlphabet(int decimal) {\n    if (decimal == 0) {\n      return \"A\";\n    }\n    StringBuilder alphabet = new StringBuilder();\n    while (decimal > 0) {\n      alphabet.insert(0, (char) ('A' + decimal % 9));\n      decimal /= 9;\n    }\n    return alphabet.toString();\n  }\n\n  private static String findAlignmentEquation(String alphabetNumber) {\n    StringBuilder complement = new StringBuilder();\n    for (char ch : alphabetNumber.toCharArray()) {\n      complement.append((char) ('H' - ch + 'A'));\n    }\n    return alphabetNumber + \" + \" + complement + \" = \" + \"H\".repeat(alphabetNumber.length());\n  }\n}"}
{"id": 220, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_BIGNUM_LEN 300\n\ntypedef struct {\n    int digits[MAX_BIGNUM_LEN];\n    int len;\n} BigNum;\n\nvoid bignum_init(BigNum* n) {\n    memset(n->digits, 0, sizeof(n->digits));\n    n->len = 1;\n}\n\nvoid bignum_from_str_dec(BigNum* n, const char* s) {\n    bignum_init(n);\n    int s_len = strlen(s);\n    n->len = s_len;\n    for (int i = 0; i < s_len; i++) {\n        n->digits[i] = s[s_len - 1 - i] - '0';\n    }\n}\n\nvoid bignum_print(const BigNum* n) {\n    if (n->len == 1 && n->digits[0] == 0) {\n        printf(\"0\");\n        return;\n    }\n    for (int i = n->len - 1; i >= 0; i--) {\n        printf(\"%d\", n->digits[i]);\n    }\n}\n\nvoid do_decode(const char* val) {\n    BigNum num;\n    bignum_init(&num);\n\n    for (int i = 0; val[i] != '\\0'; i++) {\n        // num = num * 9\n        int carry = 0;\n        for (int j = 0; j < num.len; j++) {\n            int temp = num.digits[j] * 9 + carry;\n            num.digits[j] = temp % 10;\n            carry = temp / 10;\n        }\n        while (carry > 0) {\n            num.digits[num.len++] = carry % 10;\n            carry /= 10;\n        }\n\n        // num = num + digit\n        int digit = val[i] - 'A';\n        carry = digit;\n        for (int j = 0; j < num.len && carry > 0; j++) {\n            int temp = num.digits[j] + carry;\n            num.digits[j] = temp % 10;\n            carry = temp / 10;\n        }\n        if (carry > 0) {\n            num.digits[num.len++] = carry;\n        }\n    }\n\n    bignum_print(&num);\n    printf(\"\\n\");\n}\n\nvoid do_encode(const char* val) {\n    if (strcmp(val, \"0\") == 0) {\n        printf(\"A\\n\");\n        return;\n    }\n\n    BigNum num;\n    bignum_from_str_dec(&num, val);\n    \n    char result[MAX_BIGNUM_LEN] = {0};\n    int k = 0;\n\n    while (num.len > 1 || num.digits[0] != 0) {\n        long long remainder = 0;\n        for (int i = num.len - 1; i >= 0; i--) {\n            long long current = num.digits[i] + remainder * 10;\n            num.digits[i] = current / 9;\n            remainder = current % 9;\n        }\n        result[k++] = remainder + 'A';\n\n        while (num.len > 1 && num.digits[num.len - 1] == 0) {\n            num.len--;\n        }\n    }\n    \n    for (int i = 0; i < k / 2; i++) {\n        char temp = result[i];\n        result[i] = result[k - 1 - i];\n        result[k - 1 - i] = temp;\n    }\n    printf(\"%s\\n\", result);\n}\n\nvoid do_align(const char* val) {\n    int len = strlen(val);\n    char h_str_compare[len + 2];\n    for (int i=0; i<len; ++i) h_str_compare[i] = 'H';\n    h_str_compare[len] = '\\0';\n\n    int target_len = len;\n    if (len > 0 && strcmp(val, h_str_compare) > 0) {\n        target_len = len + 1;\n    }\n    \n    char target_h[target_len + 2];\n    char result_y[target_len + 2];\n\n    for(int i = 0; i < target_len; ++i) {\n        target_h[i] = 'H';\n    }\n    target_h[target_len] = '\\0';\n    \n    result_y[target_len] = '\\0';\n    int borrow = 0;\n    for (int i = 0; i < target_len; i++) {\n        int x_digit_val = 0;\n        int current_val_idx = len - 1 - i;\n        if (current_val_idx >= 0) {\n            x_digit_val = val[current_val_idx] - 'A';\n        }\n        \n        int y_digit_val = ('H' - 'A') - x_digit_val - borrow;\n        if (y_digit_val < 0) {\n            y_digit_val += 9;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        result_y[target_len - 1 - i] = y_digit_val + 'A';\n    }\n    \n    char* final_y = result_y;\n    while(strlen(final_y) > 1 && *final_y == 'A') {\n        final_y++;\n    }\n\n    printf(\"%s + %s = %s\\n\", val, final_y, target_h);\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 3) return 1;\n  const char *op = argv[1];\n  const char *val = argv[2];\n\n  if (strcmp(op, \"decode\") == 0) {\n    do_decode(val);\n  } else if (strcmp(op, \"encode\") == 0) {\n    do_encode(val);\n  } else if (strcmp(op, \"align\") == 0) {\n    do_align(val);\n  }\n\n  return 0;\n}"}
{"id": 221, "is_generated": false, "language": "Python3", "code": "import sys\n\nalpha2num = lambda c: ord(c) - ord('A')\nnum2alpha = lambda c: chr(c+65)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    inp=[]\n    for i, v in enumerate(argv):\n        inp.append(v)\n        # print(\"argv[{0}]: {1}\".format(i, v))\n\n\n    if inp[0] == 'decode':\n      out = decode(inp[1])\n      print(out)\n    elif inp[0]=='encode': \n      out=encode(int(inp[1]))\n      print(out)\n    elif inp[0]=='align':\n      l=len(inp[1])\n      out=0\n      g=l\n      if decode('H'*l) < decode(inp[1]):\n        g=l+1\n      out= encode(decode('H'*g) - decode(inp[1]))\n      print(\"{0} + {1} = {2}\".format(inp[1],out,'H'*g))\n      \ndef decode(inp):\n  l=len(inp)\n  out=0\n  for i in range(l):\n    out= out + alpha2num(inp[l-i-1])*(9**i)\n  return out\ndef encode(inp):\n  out=''\n  num = inp\n  te = 9\n  am = 0\n  while(1):\n    am = num%te\n    cam = num2alpha(am)\n    out = cam + out\n    num = num//te\n    if num==0:\n      return(out)\n  print('error')\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 222, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.math.BigInteger;\n\nclass AlphabetConverter {\n    private static final BigInteger BASE_VALUE = BigInteger.valueOf(9);\n    private static final char ALIGN_TARGET_CHAR = 'H';\n\n    public static BigInteger convertAlphaToDec(String alphaStr) {\n        BigInteger dec = BigInteger.ZERO;\n        for (char ch : alphaStr.toCharArray()) {\n            dec = dec.multiply(BASE_VALUE).add(BigInteger.valueOf(ch - 'A'));\n        }\n        return dec;\n    }\n\n    public static String convertDecToAlpha(BigInteger decNum) {\n        if (decNum.equals(BigInteger.ZERO)) {\n            return \"A\";\n        }\n        StringBuilder res = new StringBuilder();\n        BigInteger current = decNum;\n        while (current.compareTo(BigInteger.ZERO) > 0) {\n            BigInteger[] divAndRem = current.divideAndRemainder(BASE_VALUE);\n            res.append((char) ('A' + divAndRem[1].intValue()));\n            current = divAndRem[0];\n        }\n        return res.reverse().toString();\n    }\n\n    public static String computeAlignResult(String alphaInput) {\n        BigInteger decimalInput = convertAlphaToDec(alphaInput);\n        int inputLen = alphaInput.length();\n\n        StringBuilder targetHString = new StringBuilder();\n        for (int i = 0; i < inputLen; i++) {\n            targetHString.append(ALIGN_TARGET_CHAR);\n        }\n        BigInteger currentTargetValue = convertAlphaToDec(targetHString.toString());\n\n        if (decimalInput.compareTo(currentTargetValue) > 0) {\n            targetHString.append(ALIGN_TARGET_CHAR);\n            currentTargetValue = convertAlphaToDec(targetHString.toString());\n        }\n\n        BigInteger neededDecimal = currentTargetValue.subtract(decimalInput);\n        String neededAlpha = convertDecToAlpha(neededDecimal);\n\n        return alphaInput + \" + \" + neededAlpha + \" = \" + targetHString.toString();\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        String command = args[0];\n        String value = args[1];\n\n        if (\"decode\".equals(command)) {\n            System.out.println(AlphabetConverter.convertAlphaToDec(value));\n        } else if (\"encode\".equals(command)) {\n            System.out.println(AlphabetConverter.convertDecToAlpha(new BigInteger(value)));\n        } else if (\"align\".equals(command)) {\n            System.out.println(AlphabetConverter.computeAlignResult(value));\n        }\n    }\n}"}
{"id": 223, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n// Returns 1 if the pattern is found, 0 otherwise.\nint run_simulation(int limit) {\n    const int pattern[] = {0, 1, 0, 0, 1, 0}; // \u79e9:0, \u5e8f:1\n    const int pattern_len = sizeof(pattern) / sizeof(pattern[0]);\n    // KMP's Longest Proper Prefix which is also Suffix array for the pattern.\n    const int lps[] = {0, 0, 1, 1, 2, 1}; \n    const char* mapping[] = {\"\u79e9\", \"\u5e8f\"};\n\n    int q = 0; // Number of characters matched\n\n    for (int i = 0; i < limit; i++) {\n        int c = rand() % 2;\n        printf(\"%s\\n\", mapping[c]);\n\n        // This is the core of KMP's state transition.\n        // If mismatch, use LPS array to find the next state.\n        while (q > 0 && c != pattern[q]) {\n            q = lps[q - 1];\n        }\n        if (c == pattern[q]) {\n            q++;\n        }\n\n        if (q == pattern_len) {\n            return 1; // Found\n        }\n    }\n\n    return 0; // Not found\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <max_count>\\n\", argv[0]);\n        return 1;\n    }\n\n    int count = atoi(argv[1]);\n    if (count < 0 || count > 10000) {\n        // As per the problem spec, the input is between 0 and 10000.\n        // We can handle invalid inputs gracefully.\n        fprintf(stderr, \"Error: count must be between 0 and 10000.\\n\");\n        return 1;\n    }\n\n    srand(time(NULL));\n\n    if (run_simulation(count)) {\n        printf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n    } else {\n        printf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n    }\n\n    return 0;\n}"}
{"id": 224, "is_generated": false, "language": "C++", "code": "#include <iostream>\n#include<cstdlib>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  char ch=argv[1][0];\n  char ans[10000]={};\n  if(ch=='e'){\n    unsigned long long input=atoi(argv[2]);\n    int count=0;\n    while(input>=0){\n      int tmp=input%9;\n      ans[count]=(char)('A'+tmp);\n      input/=9;\n      count++;\n      if(input==0) break;\n    }\n    for(int i=count-1;i>=0;i--){\n      cout<<ans[i];\n    }\n    cout<<endl;\n  }\n  else if(ch=='d'){\n    int count=0,sum=0;\n    while(argv[2][count]){\n      int tmp=(int)(argv[2][count]-'A');\n      sum=sum*9+tmp;\n      count++;\n    }\n    cout<<sum<<endl;\n  }\n  else{\n    int count=0,sum=0;\n    while(argv[2][count]){\n      cout<<argv[2][count];\n      int tmp=(int)(argv[2][count]-'A');\n      sum=sum*9+tmp;\n      count++;\n    }\n    cout<<\" + \";\n    int tmp=7;\n    while(tmp<sum){\n      tmp=tmp*9+7;\n    }\n    int input=tmp-sum;\n    count=0;\n    while(input>=0){\n      int tmp=input%9;\n      ans[count]=(char)('A'+tmp);\n      count++;\n      input/=9;\n      if(input==0) break;\n    }\n    for(int i=count-1;i>=0;i--){\n      cout<<ans[i];\n    }\n    cout<<\" = \";\n    count=0;\n    while(tmp>=0){\n      int tmp2=tmp%9;\n      ans[count]=(char)('A'+tmp2);\n      count++;\n      tmp/=9;\n      if(tmp==0) break;\n    }\n    for(int i=count-1;i>=0;i--){\n      cout<<ans[i];\n    }\n    cout<<endl;\n  }\n  return 0;\n}\n"}
{"id": 225, "is_generated": false, "language": "Java", "code": "package track;\n\nimport java.lang.String;\nimport java.lang.Number;\nimport java.util.Random;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int outCount = 0;                       //\u898f\u5b9a\u6587\u5b57\u304c\u51fa\u73fe\u3057\u305f\u56de\u6570\n    int inpSuu = 0;                         //\u5165\u529b\u5024\n    int rndSuu = 0;                         //\u30e9\u30f3\u30c0\u30e0\u6570\u3092\u683c\u7d0d\n    String outmoji = new String();\n    String s1 = new String();\n    String outStr = new String();\n\n    //Random\u30af\u30e9\u30b9\u751f\u6210\n    Random rnd = new Random();\n\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n    }\n\n    //\u5165\u529b\u5024\u306e\u6570\u5024\u5909\u63db\n    try {\n      inpSuu = Integer.parseInt(args[0]);\n    } catch (Exception e) {\n      inpSuu = 0;\n    }\n\n    //\u30e9\u30f3\u30c0\u30e0\u5024\u306b\u3088\u308b\u5024\u51fa\u529b\n\t\tfor (int i = 0; i < inpSuu; i++) {\n      rndSuu = rnd.nextInt(10) + 1;\n\n      switch (rndSuu % 2) {\n        case 0:\n          outmoji = \"\u79e9\";\n          break;\n        case 1:\n          outmoji = \"\u5e8f\";\n          break;\n      }\n\n      System.out.println(outmoji);\n      s1 = outStr + outmoji;\n      if (s1.length() == 1) {\n        outStr = s1;\n      } else {\n        outStr = s1.substring(1, s1.length() - 1);\n      }\n      //\u51fa\u73fe\u6587\u5b57\u5217\u306e\u5224\u5b9a\n      if (hantei(outStr) == 1) {\n        outCount = 1;\n        break;\n      }\n\t\t}\n\n    //\u898f\u5b9a\u6587\u5b57\u304c\u51fa\u73fe\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\u6587\u5b57\u51fa\u529b\n    if (outCount == 0) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n    }\n\t}\n\n  private static int hantei(String hanteiStr) {\n    if (hanteiStr.equals(\"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\")) {\n      System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n      return 1;\n    }\n    return 0;\n  }\n}\n"}
{"id": 226, "is_generated": true, "language": "C#", "code": "using System;\nusing System.Text; // StringBuilder \u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\n\npublic class MissionApp\n{\n    // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n    static public void Main(string[] args)\n    {\n        // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u691c\u8a3c\u3068\u30d1\u30fc\u30b9\u3092\u884c\u3044\u307e\u3059\n        if (args.Length != 1)\n        {\n            Console.WriteLine(\"\u4f7f\u3044\u65b9: MissionApp <\u6700\u5927\u51fa\u529b\u56de\u6570>\");\n            return;\n        }\n\n        // \u5f15\u6570\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u307e\u3059\n        if (!int.TryParse(args[0], out int maxPrintCount))\n        {\n            Console.WriteLine(\"\u30a8\u30e9\u30fc: \u6700\u5927\u51fa\u529b\u56de\u6570\u306f\u6574\u6570\u3067\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\n            return;\n        }\n\n        // \u6700\u5927\u51fa\u529b\u56de\u6570\u306e\u7bc4\u56f2\u3092\u691c\u8a3c\u3057\u307e\u3059\n        if (maxPrintCount < 0 || maxPrintCount > 10000)\n        {\n            Console.WriteLine(\"\u30a8\u30e9\u30fc: \u6700\u5927\u51fa\u529b\u56de\u6570\u306f0\u304b\u308910000\u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\n            return;\n        }\n\n        // \u4e71\u6570\u751f\u6210\u5668\u3001\u51fa\u529b\u5c65\u6b74\u30d0\u30c3\u30d5\u30a1\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30d5\u30ec\u30fc\u30ba\u3092\u521d\u671f\u5316\u3057\u307e\u3059\n        Random randomGenerator = new Random();\n        StringBuilder charSequenceBuffer = new StringBuilder();\n        string targetPhrase = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n        int phraseLength = targetPhrase.Length;\n        bool phraseDetected = false;\n\n        // \u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u6587\u5b57\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u529b\u3059\u308b\u30eb\u30fc\u30d7\n        for (int i = 0; i < maxPrintCount; i++)\n        {\n            char characterToOutput;\n            // 0\u304b1\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u3001\u3069\u3061\u3089\u306e\u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\n            if (randomGenerator.Next(2) == 0)\n            {\n                characterToOutput = '\u79e9';\n            }\n            else\n            {\n                characterToOutput = '\u5e8f';\n            }\n\n            Console.WriteLine(characterToOutput); // \u751f\u6210\u3057\u305f\u6587\u5b57\u3092\u51fa\u529b\u3057\u307e\u3059\n\n            // \u6587\u5b57\u3092\u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\u3057\u307e\u3059\n            charSequenceBuffer.Append(characterToOutput);\n\n            // \u30d0\u30c3\u30d5\u30a1\u306e\u9577\u3055\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30d5\u30ec\u30fc\u30ba\u306e\u9577\u3055\u3092\u8d85\u3048\u305f\u5834\u5408\u3001\u6700\u3082\u53e4\u3044\u6587\u5b57\u3092\u524a\u9664\u3057\u307e\u3059\n            if (charSequenceBuffer.Length > phraseLength)\n            {\n                charSequenceBuffer.Remove(0, 1);\n            }\n\n            // \u30d0\u30c3\u30d5\u30a1\u306e\u5185\u5bb9\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30d5\u30ec\u30fc\u30ba\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\n            if (charSequenceBuffer.Length == phraseLength && charSequenceBuffer.ToString() == targetPhrase)\n            {\n                phraseDetected = true;\n                break; // \u4e00\u81f4\u3057\u305f\u5834\u5408\u3001\u30eb\u30fc\u30d7\u3092\u7d42\u4e86\u3057\u307e\u3059\n            }\n        }\n\n        // \u30eb\u30fc\u30d7\u306e\u7d50\u679c\u306b\u57fa\u3065\u3044\u3066\u6700\u7d42\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3057\u307e\u3059\n        if (phraseDetected)\n        {\n            Console.WriteLine(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        }\n        else\n        {\n            Console.WriteLine(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n        }\n    }\n}"}
{"id": 227, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alphabet_encode(n):\n    # Convert decimal to alphabet number\n    if n == 0:\n        return \"A\"\n    output = []\n    while n:\n        output.append(chr((n % 9) + ord('A')))\n        n //= 9\n    return ''.join(reversed(output))\n\ndef alphabet_decode(s):\n    # Convert alphabet number to decimal\n    decimal_value = 0\n    for character in s:\n        decimal_value = decimal_value * 9 + (ord(character) - ord('A'))\n    return decimal_value\n\ndef alphabet_align(s):\n    # Calculate what to add to make all H\n    addition = ''.join(chr(8 - (ord(c) - ord('A'))) + ord('A') for c in s)\n    return f\"{s} + {addition} = {'H' * len(s)}\"\n\ndef main(args):\n    # Main function for command handling\n    sub_command = args[1]\n    if sub_command == \"encode\":\n        print(alphabet_encode(int(args[2])))\n    elif sub_command == \"decode\":\n        print(alphabet_decode(args[2]))\n    elif sub_command == \"align\":\n        print(alphabet_align(args[2]))\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 228, "is_generated": true, "language": "Python3", "code": "import sys\n\n# Global constants for the custom base system\nALPHABET_CHARS = \"ABCDEFGHI\"\nBASE = 9\nH_DIGIT = ALPHABET_CHARS.index('H') # Value of 'H' (which is 7)\n\n# Helper function to get the integer value of an alphabet char\ndef _char_to_int(char_val):\n    return ALPHABET_CHARS.index(char_val)\n\n# Helper function to get the alphabet char from an integer value\ndef _int_to_char(int_val):\n    return ALPHABET_CHARS[int_val]\n\ndef perform_decode(alpha_representation):\n    # Decodes an alphabet number string into its decimal equivalent.\n    decimal_val = 0\n    for char_digit in alpha_representation:\n        decimal_val = decimal_val * BASE + _char_to_int(char_digit)\n    return decimal_val\n\ndef perform_encode(decimal_representation):\n    # Encodes a decimal number into its alphabet string equivalent.\n    if decimal_representation == 0:\n        return ALPHABET_CHARS[0] # 'A'\n\n    parts = []\n    current_dec = decimal_representation\n    while current_dec > 0:\n        current_dec, remainder = divmod(current_dec, BASE)\n        parts.append(_int_to_char(remainder))\n    return \"\".join(reversed(parts))\n\ndef calculate_alignment_for_alpha(original_alpha_num):\n    # Calculates the number needed to sum up to an 'H'-only number.\n    original_decimal = perform_decode(original_alpha_num)\n    \n    target_len = len(original_alpha_num)\n    target_alpha = 'H' * target_len\n    target_decimal = perform_decode(target_alpha)\n    \n    while target_decimal < original_decimal:\n        target_len += 1\n        target_alpha += 'H'\n        target_decimal = target_decimal * BASE + H_DIGIT\n        \n    complement_decimal = target_decimal - original_decimal\n    complement_alpha = perform_encode(complement_decimal)\n    \n    return f\"{original_alpha_num} + {complement_alpha} = {target_alpha}\"\n\ndef main(arguments):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    operation = arguments[0]\n    data = arguments[1]\n\n    if operation == \"decode\":\n        print(perform_decode(data))\n    elif operation == \"encode\":\n        print(perform_encode(int(data)))\n    elif operation == \"align\":\n        print(calculate_alignment_for_alpha(data))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 229, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <deque>    // For std::deque to manage a sliding window\n#include <random>   // For modern C++ random number generation\n\nint main(int argc, char *argv[]) {\n    // Validate command line arguments\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <count>\" << std::endl;\n        return 1;\n    }\n\n    // Convert argument to integer for maximum characters to generate\n    int maxGeneratedChars = std::stoi(argv[1]);\n\n    // Ensure the input count is within the allowed range\n    if (maxGeneratedChars < 0 || maxGeneratedChars > 10000) {\n        std::cerr << \"Count must be between 0 and 10000.\" << std::endl;\n        return 1;\n    }\n\n    // Initialize modern C++ random number generator\n    std::random_device randomDevice; // Will be used to obtain a seed for the random number engine\n    std::mt19937 generator(randomDevice()); // Standard mersenne_twister_engine seeded with rd()\n    std::uniform_int_distribution<> distribution(0, 1); // Distribution for 0 or 1\n\n    // The target sequence of Japanese characters\n    const std::string targetSequence = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    // Number of Japanese characters in the target sequence\n    const int targetCharCount = 6; \n\n    // A deque to hold the last `targetCharCount` individual character strings\n    std::deque<std::string> charWindow;\n    \n    // Flag to track if the pattern is found\n    bool foundThePattern = false;\n\n    // Loop to generate characters up to the specified limit\n    for (int i = 0; i < maxGeneratedChars; ++i) {\n        std::string generatedCharacter;\n        // Randomly choose '\u79e9' or '\u5e8f'\n        if (distribution(generator) == 0) {\n            generatedCharacter = \"\u79e9\";\n        } else {\n            generatedCharacter = \"\u5e8f\";\n        }\n\n        // Output the generated character\n        std::cout << generatedCharacter << std::endl;\n\n        // Add the character string to the back of the window\n        charWindow.push_back(generatedCharacter);\n\n        // Keep the window size fixed at `targetCharCount` by removing from the front\n        if (charWindow.size() > targetCharCount) {\n            charWindow.pop_front();\n        }\n\n        // Check for pattern only when the window is full\n        if (charWindow.size() == targetCharCount) {\n            std::string currentSegmentToCheck;\n            // Concatenate all character strings in the window to form a segment\n            for (const std::string& ch : charWindow) {\n                currentSegmentToCheck += ch;\n            }\n\n            // Compare the formed segment with the target sequence\n            if (currentSegmentToCheck == targetSequence) {\n                foundThePattern = true; // Pattern found!\n                break; // Exit the loop\n            }\n        }\n    }\n\n    // Output the final result based on whether the pattern was found\n    if (foundThePattern) {\n        std::cout << \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\" << std::endl;\n    } else {\n        std::cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << std::endl;\n    }\n\n    return 0; // Indicate successful execution\n}"}
{"id": 230, "is_generated": false, "language": "Python3", "code": "import sys\nimport math\n\n#\u6570\u5b57->\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5909\u63db\ndef numToChar(n):\n  return chr(ord(\"A\")+n)\n\n#\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8->\u6570\u5b57\u5909\u63db\ndef charToNum(c):\n  return ord(c)-ord(\"A\")\n\n#encode\ndef encode(num):\n  ans = \"\"\n\n  ans = numToChar(num % 9) + ans\n  num = math.floor(num//9)\n  while(num > 0):\n    ans = numToChar(num % 9) + ans\n    num = math.floor(num//9)\n\n  return ans\n\n#decode\ndef decode(S):\n  ans = 0\n  for i in range(len(S)):\n    ans += charToNum(S[i]) * (9**(len(S)-i-1))\n\n  return ans\n\n#align\ndef align(S):\n\n  i = 1\n  while(True):\n    if(decode(\"H\"*i)-decode(S) >= 0):\n      return (encode(decode(\"H\"*i)-decode(S)) , \"H\"*i)\n\n    i += 1\n\n\n\n\ndef main(argv):\n\n    if argv[0] == \"encode\":\n      print(encode(int(argv[1])))\n\n    if argv[0] == \"decode\":\n      print(decode(argv[1]))\n\n    if argv[0] == \"align\":\n      ans, H = align(argv[1])\n      print(argv[1], \"+\", ans, \"=\", H)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 231, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n\n  // \u76ee\u6a19\u30d1\u30bf\u30fc\u30f3\u3092char\u914d\u5217\u3068\u3057\u3066\u5b9a\u7fa9\n  private static final char[] TARGET_PATTERN_CHARS = {'\u79e9', '\u5e8f', '\u79e9', '\u79e9', '\u5e8f', '\u79e9', '\u79e9', '\u5e8f', '\u79e9', '\u5e8f'};\n  private static final int PATTERN_LEN = TARGET_PATTERN_CHARS.length;\n\n  public static void main(String[] args) {\n    // \u5f15\u6570\u304b\u3089\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u53d6\u5f97\n    int maximumLoops = Integer.parseInt(args[0]);\n\n    // 0\u56de\u6307\u5b9a\u306e\u5834\u5408\u306e\u51e6\u7406\n    if (maximumLoops == 0) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n\n    Random randomNumGenerator = new Random();\n    char[] circularBuffer = new char[PATTERN_LEN]; // \u5faa\u74b0\u30d0\u30c3\u30d5\u30a1\n    int bufferElementCount = 0; // \u30d0\u30c3\u30d5\u30a1\u306b\u73fe\u5728\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u8981\u7d20\u6570\n    int nextWriteIndex = 0; // \u6b21\u306b\u66f8\u304d\u8fbc\u3080\u30d0\u30c3\u30d5\u30a1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    boolean missionAccomplished = false;\n\n    // \u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u30eb\u30fc\u30d7\n    for (int loopCounter = 0; loopCounter < maximumLoops; loopCounter++) {\n      char producedChar;\n      // \u30e9\u30f3\u30c0\u30e0\u306b\u6587\u5b57\u3092\u751f\u6210\n      if (randomNumGenerator.nextInt(2) == 0) {\n        producedChar = '\u79e9';\n      } else {\n        producedChar = '\u5e8f';\n      }\n      System.out.println(producedChar); // \u751f\u6210\u3057\u305f\u6587\u5b57\u3092\u51fa\u529b\n\n      circularBuffer[nextWriteIndex] = producedChar; // \u5faa\u74b0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u307f\n      nextWriteIndex = (nextWriteIndex + 1) % PATTERN_LEN; // \u6b21\u306e\u66f8\u304d\u8fbc\u307f\u4f4d\u7f6e\u3092\u66f4\u65b0\n\n      if (bufferElementCount < PATTERN_LEN) {\n        bufferElementCount++; // \u30d0\u30c3\u30d5\u30a1\u8981\u7d20\u6570\u3092\u5897\u3084\u3059\n      }\n\n      // \u30d0\u30c3\u30d5\u30a1\u304c\u76ee\u6a19\u30d1\u30bf\u30fc\u30f3\u9577\u306b\u9054\u3057\u305f\u3089\u30d1\u30bf\u30fc\u30f3\u30c1\u30a7\u30c3\u30af\n      if (bufferElementCount == PATTERN_LEN) {\n        boolean currentMatch = true;\n        for (int i = 0; i < PATTERN_LEN; i++) {\n          // \u5faa\u74b0\u30d0\u30c3\u30d5\u30a1\u304b\u3089\u6b63\u3057\u3044\u9806\u5e8f\u3067\u6587\u5b57\u3092\u8aad\u307f\u51fa\u3057\u3001\u76ee\u6a19\u30d1\u30bf\u30fc\u30f3\u3068\u6bd4\u8f03\n          int readPosition = (nextWriteIndex + i) % PATTERN_LEN;\n          if (circularBuffer[readPosition] != TARGET_PATTERN_CHARS[i]) {\n            currentMatch = false;\n            break;\n          }\n        }\n        if (currentMatch) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          missionAccomplished = true;\n          break; // \u30d1\u30bf\u30fc\u30f3\u4e00\u81f4\u3067\u7d42\u4e86\n        }\n      }\n    }\n\n    // \u30df\u30c3\u30b7\u30e7\u30f3\u304c\u9054\u6210\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\n    if (!missionAccomplished) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n    }\n  }\n}"}
{"id": 232, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef to_10(s):\n    n = 0\n    for c in s: n = n * 9 + ord(c) - ord('A')\n    return n\n\ndef from_10(n):\n    # 10\u9032\u6570\u304b\u3089\u306e\u5909\u63db\n    if not n: return 'A'\n    res = []\n    while n:\n        n, rem = divmod(n, 9)\n        res.append(chr(rem + ord('A')))\n    return \"\".join(reversed(res))\n\ndef main(argv):\n    cmd, arg = argv\n\n    if cmd == 'decode':\n        print(to_10(arg))\n    elif cmd == 'encode':\n        print(from_10(int(arg)))\n    elif cmd == 'align':\n        x_str = arg\n        x_val = to_10(x_str)\n        \n        target_len = len(x_str)\n        target_h_str = 'H' * target_len\n        target_h_val = to_10(target_h_str)\n        \n        if x_val > target_h_val:\n            target_h_str += 'H'\n            target_h_val = target_h_val * 9 + 7\n            \n        y_val = target_h_val - x_val\n        y_str = from_10(y_val)\n        \n        print(f\"{x_str} + {y_str} = {target_h_str}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 233, "is_generated": true, "language": "C#", "code": "using System;\n\npublic class App\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length != 2)\n        {\n            Console.WriteLine(\"Invalid input.\");\n            return;\n        }\n\n        string command = args[0];\n        string argument = args[1];\n\n        if (command == \"encode\")\n        {\n            int num = int.Parse(argument);\n            Console.WriteLine(ConvertToAlphabet(num));\n        }\n        else if (command == \"decode\")\n        {\n            Console.WriteLine(ConvertToDecimal(argument));\n        }\n        else if (command == \"align\")\n        {\n            Console.WriteLine(CalculateAlignment(argument));\n        }\n    }\n\n    static string ConvertToAlphabet(int number)\n    {\n        if (number == 0) return \"A\";\n        string result = \"\";\n        while (number > 0)\n        {\n            result = (char)('A' + (number % 9)) + result;\n            number /= 9;\n        }\n        return result;\n    }\n\n    static int ConvertToDecimal(string alphaNumber)\n    {\n        int value = 0;\n        foreach (char c in alphaNumber)\n        {\n            value = value * 9 + (c - 'A');\n        }\n        return value;\n    }\n\n    static string CalculateAlignment(string alphaNumber)\n    {\n        string alignment = \"\";\n        for (int i = 0; i < alphaNumber.Length; i++)\n        {\n            char c = alphaNumber[i];\n            int needed = 8 - (c - 'A');\n            alignment += (char)('A' + needed);\n        }\n        return alphaNumber + \" + \" + alignment + \" = \" + new string('H', alphaNumber.Length);\n    }\n}"}
{"id": 234, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n// Decode\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\u3059\u308b\nlong decode(const char *alphabet) {\n    long result = 0;\n    while (*alphabet) {\n        result = result * 9 + (*alphabet - 'A');\n        alphabet++;\n    }\n    return result;\n}\n\n// Encode10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\nvoid encode(long num, char *alphabet) {\n    char temp[128];\n    int index = 0;\n\n    if (num == 0) {\n        alphabet[0] = 'A';\n        alphabet[1] = '\\0';\n        return;\n    }\n\n    while (num > 0) {\n        temp[index++] = (num % 9) + 'A';\n        num /= 9;\n    }\n\n    for (int i = 0; i < index; i++) {\n        alphabet[i] = temp[index - 1 - i];\n    }\n    alphabet[index] = '\\0';\n}\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092align\u3059\u308b\nvoid computeAlign(const char *input) {\n    char target[128], complement[128];\n    int length = strlen(input);\n\n    for (int i = 0; i < length; i++) {\n        target[i] = 'H';\n    }\n    target[length] = '\\0';\n\n    long value = decode(input);\n    long targetValue = decode(target);\n    encode(targetValue - value, complement);\n\n    printf(\"%s + %s = %s\\n\", input, complement, target);\n}\n\nint main(int argc, char *argv[]) {\n\n    if (argc != 3) {\n        printf(\"Usage: <command> <value>\\n\");\n        return 1;\n    }\n\n    const char *command = argv[1];\n    const char *value = argv[2];\n\n    if (strcmp(command, \"encode\") == 0) {\n        char result[128];\n        encode(atol(value), result);\n        printf(\"%s\\n\", result);\n    } else if (strcmp(command, \"decode\") == 0) {\n        printf(\"%ld\\n\", decode(value));\n    } else if (strcmp(command, \"align\") == 0) {\n        computeAlign(value);\n    } else {\n        printf(\"Invalid command\\n\");\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 235, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u53d6\u5f97\n    task = argv[0]\n\n    if task == 'decode':\n      inpt = argv[1]\n      ans = decode(inpt)\n      print(ans)\n\n    elif task == 'encode':\n      inpt = int(argv[1])\n      ans = encode(inpt)\n      print(ans)\n\n    elif task == 'align':\n      inpt = argv[1]\n      ans = align(inpt)\n      print(ans)\n\n# 9\u9032\u6570\u306e1\u6587\u5b57\u3092\u6570\u5024\u306b\u5909\u63db\ndef str2int(s):\n  # s\u306f1\u6587\u5b57\n  if s == 'A':return 0\n  if s == 'B':return 1\n  if s == 'C':return 2\n  if s == 'D':return 3\n  if s == 'E':return 4\n  if s == 'F':return 5\n  if s == 'G':return 6\n  if s == 'H':return 7\n  if s == 'I':return 8\n  \n# 10\u9032\u6570\u306e0\uff5e8\u30921\u6587\u5b57\u306b\u5909\u63db\ndef int2str(x):\n  # x\u306f0~8\n  x = int(x)\n  if x == 0:return 'A'\n  if x == 1:return 'B'\n  if x == 2:return 'C'\n  if x == 3:return 'D'\n  if x == 4:return 'E'\n  if x == 5:return 'F'\n  if x == 6:return 'G'\n  if x == 7:return 'H'\n  if x == 8:return 'I'\n  \n\n# 9\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u5909\u63db\ndef decode(S):\n  ret = 0\n  base = 1\n  # \u57fa\u6570\u30921\u304b\u3089\u30eb\u30fc\u30d7\u6bce\u306b9\u500d\n  for s in reversed(S):\n    ret += base * str2int(s)\n    base *= 9\n  return ret\n  \ndef encode(x):\n  x = int(x)\n  ret = []\n  tmp = x\n  # \u5165\u529b\u304c0\u306e\u6642\u306e\u307f\u4f8b\u5916\u51e6\u7406\n  if tmp == 0:\n    return 'A'\n  # \u30eb\u30fc\u30d7\u6bce\u306b9\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u683c\u7d0d\u3057\uff0c\u6570\u5024\u30929\u3067\u5272\u3063\u3066\u3086\u304f\n  while tmp > 0:\n    ret.append(int2str(tmp%9))\n    tmp //= 9\n\n  # \u30ea\u30b9\u30c8\u306f1\u6841\u76ee\uff0c2\u6841\u76ee\uff0c...\u3068\u306a\u3063\u3066\u304a\u308a\u6c42\u3081\u308b\u6587\u5b57\u5217\u3068\u306f\u9006\u9806\n  # \u3088\u3063\u3066\u30ea\u30b9\u30c8\u3092\u9006\u9806\u306b\u3057\u3066\u6587\u5b57\u5217\u306b\u5909\u63db\n  ret = ''.join(reversed(ret))\n  return ret\n  \n\n\ndef align(S):\n  # \u5165\u529b\u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u8a08\u7b97\n  A = decode(S)\n  C = 7\n  base = 9\n  # A\u4ee5\u4e0a\u3068\u306a\u308b\u6700\u5c0f\u306eC = 'HH...H'\u3092\u898b\u3064\u3051\u308b\n  # '\u2026H\u2026'\u306f7*9^n\u306a\u306e\u3067,\u9010\u6b21\u8db3\u3057\u3066\u3086\u304f\n  while (C-A)<0:\n    C += 7 * base\n    base *= 9\n  B = C-A # B > 0\n  B = encode(B)\n  C = encode(C)\n  ret = S + ' + ' + B + ' = ' + C\n  return ret \n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 236, "is_generated": false, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n $cnt = $argv[\"0\"];\n\n $pt = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n $moji =array(\"\u79e9\",\"\u79e9\");\n\n for($i=0 ; $i <$cnt ; $i++){\n\n  $key = array_rand($moji, 1);\n  $test = $moji[$key].\"\\n\";\n  $all .= $moji[$key];\n  printf($test);\n\n  if(strpos($all,$pt) !== false){\n    printf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n    exit();\n  }\n }\n\nprintf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\nexit();\n\n}\n\nrun($argc - 1, array_slice($argv, 1));"}
{"id": 237, "is_generated": true, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # Retrieve the maximum count from command line arguments\n    if not argv:\n        print(\"Usage: python script.py <max_count>\")\n        sys.exit(1)\n\n    try:\n        max_count = int(argv[0])\n    except ValueError:\n        print(\"Invalid argument. Please provide an integer.\")\n        sys.exit(1)\n\n    # Define the target sequence and characters\n    target_pattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\n    chars = ['\u79e9', '\u5e8f']\n    \n    # Store the generated characters to check for the pattern\n    current_output = \"\" \n\n    # Loop up to the maximum count\n    for _ in range(max_count):\n        # Randomly choose and print a character\n        next_char = random.choice(chars)\n        print(next_char)\n        \n        # Append to the current output string\n        current_output += next_char\n        \n        # Check if the current output ends with the target pattern\n        if len(current_output) >= len(target_pattern):\n            if current_output.endswith(target_pattern):\n                print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n                return # Exit on match\n\n    # If the loop finishes without a match\n    print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 238, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef encode(n):\n    if n == 0:\n      return \"A\"\n    cap = [chr(x) for x in range(ord(\"A\"), ord(\"I\") + 1)]\n    ret = []\n    while n > 0:\n        ret.append(cap[(n) % 9])\n        n = (n) // 9\n    ret.reverse()\n    return \"\".join(ret)\n\n\ndef decode(s):\n    nums = []\n    for letter in s:\n        nums.append(ord(letter) - ord(\"A\"))\n    res = 0\n    for i in range(len(nums) - 1, -1, -1):\n        pos = len(nums) - 1 - i\n        res += (9 ** pos) * nums[i]\n    return res\n\ndef align(s):\n    start = \"H\"\n    while(1):\n        if decode(start) < decode(s):\n            start = start + \"H\"\n        else:\n            break\n    res = s + str(\" + \") + encode(decode(start)-decode(s)) + str(\" = \") + start\n    return res\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n      pass\n      #print(\"argv[{0}]: {1}\".format(i, v))\n    \n    if argv[0] == \"encode\":\n        print(encode(int(argv[1])))\n    elif argv[0] == \"decode\":\n        print(decode(argv[1]))\n    elif argv[0] == \"align\":\n        print(align(argv[1]))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 239, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u5165\u529b\u30c1\u30a7\u30c3\u30af\n    if (args.length != 1) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n    int max;\n    try {\n      max = Integer.parseInt(args[0]);\n    } catch (NumberFormatException e) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n    if (max < 0 || max > 10000) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n    StringBuilder buf = new StringBuilder();\n    String key = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    Random rand = new Random();\n    for (int i = 0; i < max; i++) {\n      String c = rand.nextBoolean() ? \"\u79e9\" : \"\u5e8f\";\n      System.out.println(c);\n      buf.append(c);\n      if (buf.length() >= key.length() && buf.substring(buf.length()-key.length()).equals(key)) {\n        System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 240, "is_generated": true, "language": "Python3", "code": "import sys\n\nclass Base9AlphabeticSystem:\n\n    def __init__(self):\n        # \u5909\u63db\u7528\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u521d\u671f\u5316\n        self.chars = \"ABCDEFGHI\"\n        self.char_to_val = {c: i for i, c in enumerate(self.chars)}\n\n    def to_decimal(self, alpha_s):\n        decimal_val = 0\n        for digit_char in alpha_s:\n            decimal_val = decimal_val * 9 + self.char_to_val[digit_char]\n        return decimal_val\n\n    def from_decimal(self, n):\n        if n == 0:\n            return \"A\"\n        \n        res = []\n        while n > 0:\n            res.append(self.chars[n % 9])\n            n //= 9\n        return \"\".join(reversed(res))\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    \n    mode, param = argv\n    system = Base9AlphabeticSystem()\n\n    if mode == \"decode\":\n        result = system.to_decimal(param)\n        print(result)\n    elif mode == \"encode\":\n        result = system.from_decimal(int(param))\n        print(result)\n    elif mode == \"align\":\n        x_dec = system.to_decimal(param)\n        \n        L = len(param)\n        \n        # 'H'*L is 77...7 in base 9.\n        z_dec = sum(7 * (9**i) for i in range(L))\n\n        if z_dec < x_dec:\n            L += 1\n            z_dec = sum(7 * (9**i) for i in range(L))\n\n        y_dec = z_dec - x_dec\n        \n        x_alpha = param\n        y_alpha = system.from_decimal(y_dec)\n        z_alpha = 'H' * L\n        \n        print(f\"{x_alpha} + {y_alpha} = {z_alpha}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 241, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_S 300\n\nstatic void reverse(char *s) {\n    int i = 0, j = strlen(s) - 1;\n    while (i < j) {\n        char t = s[i]; s[i] = s[j]; s[j] = t;\n        i++; j--;\n    }\n}\n\nstatic void op_decode(const char *s) {\n    char dec[MAX_S] = {0};\n    int len = 0;\n    dec[0] = '0';\n    \n    for (int i = 0; s[i]; i++) {\n        int carry = 0;\n        for (int j = 0; j < len || carry; j++) {\n            if (j >= len) len++;\n            int d = (dec[j] ? dec[j] - '0' : 0) * 9 + carry;\n            dec[j] = (d % 10) + '0';\n            carry = d / 10;\n        }\n        \n        carry = s[i] - 'A';\n        for (int j = 0; j < len || carry; j++) {\n            if (j >= len) len++;\n            int d = (dec[j] ? dec[j] - '0' : 0) + carry;\n            dec[j] = (d % 10) + '0';\n            carry = d / 10;\n        }\n    }\n    reverse(dec);\n    printf(\"%s\\n\", *dec ? dec : \"0\");\n}\n\nstatic void op_encode(const char *s) {\n    if (!strcmp(s, \"0\")) {\n        puts(\"A\");\n        return;\n    }\n    int s_len = strlen(s);\n    char dec[MAX_S];\n    strcpy(dec, s);\n    char res[MAX_S] = {0};\n    int k = 0;\n\n    while (s_len > 0) {\n        int rem = 0;\n        int new_len = 0;\n        char next_dec[MAX_S];\n        for (int i = 0; i < s_len; i++) {\n            rem = rem * 10 + (dec[i] - '0');\n            if (new_len > 0 || rem / 9 > 0) {\n                next_dec[new_len++] = (rem / 9) + '0';\n            }\n            rem %= 9;\n        }\n        res[k++] = rem + 'A';\n        s_len = new_len;\n        strncpy(dec, next_dec, s_len);\n        dec[s_len] = '\\0';\n    }\n    reverse(res);\n    printf(\"%s\\n\", res);\n}\n\nstatic void op_align(const char *s) {\n    int len = strlen(s);\n    char h_comp[MAX_S];\n    memset(h_comp, 'H', len);\n    h_comp[len] = 0;\n    \n    int t_len = len + (strcmp(s, h_comp) > 0);\n    char t_h[MAX_S], res_y[MAX_S];\n    memset(t_h, 'H', t_len);\n    t_h[t_len] = 0;\n    res_y[t_len] = 0;\n    \n    int borrow = 0;\n    for (int i = 1; i <= t_len; i++) {\n        int d1 = (i <= len) ? s[len - i] - 'A' : 0;\n        int d2 = 'H' - 'A';\n        int diff = d2 - d1 - borrow;\n        borrow = (diff < 0);\n        if (borrow) diff += 9;\n        res_y[t_len - i] = diff + 'A';\n    }\n    \n    char *p = res_y;\n    while (*p == 'A' && *(p+1) != 0) p++;\n    \n    printf(\"%s + %s = %s\\n\", s, p, t_h);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) return 1;\n    char *cmd = argv[1];\n    char *val = argv[2];\n    if (!strcmp(cmd, \"decode\")) op_decode(val);\n    else if (!strcmp(cmd, \"encode\")) op_encode(val);\n    else if (!strcmp(cmd, \"align\")) op_align(val);\n    return 0;\n}"}
{"id": 242, "is_generated": true, "language": "Python3", "code": "import sys\n\nALPHABET_MAP = {chr(65 + i): i for i in range(9)}\nREVERSE_ALPHABET_MAP = {i: chr(65 + i) for i in range(9)}\n\n# 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\ndef encode(n):\n    if n == 0:\n        return \"A\"\n    result = []\n    while n > 0:\n        result.append(REVERSE_ALPHABET_MAP[n % 9])\n        n //= 9\n    return ''.join(reversed(result))\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\ndef decode(s):\n    result = 0\n    for char in s:\n        result = result * 9 + ALPHABET_MAP[char]\n    return result\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u88dc\u6b63\u5024\u3092\u52a0\u3048\u5168\u3066'H'\u306b\u306a\u308b\u5024\u3092\u8a08\u7b97\ndef align(s):\n    target_value = len(s) * 8  # 'H' \u304c\u5168\u3066\u306e\u6841\u306b\u306a\u308b\u305f\u3081\u306e\u76ee\u6a19\u5024\n    current_value = decode(s)\n    adjustment_value = target_value - current_value\n    adjustment_alphabet = encode(adjustment_value)\n    return f\"{s} + {adjustment_alphabet} = {'H' * len(s)}\"\n\ndef main(args):\n    command = args[0]\n    value = args[1]\n\n    if command == 'encode':\n        print(encode(int(value)))\n    elif command == 'decode':\n        print(decode(value))\n    elif command == 'align':\n        print(align(value))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 243, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode(num):\n    # 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\u5909\u63db\u3059\u308b\n    if num == 0:\n        return \"A\"\n    result = \"\"\n    while num > 0:\n        result = chr(num % 9 + ord('A')) + result\n        num //= 9\n    return result\n\ndef decode(alpha_num):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\u5909\u63db\u3059\u308b\n    result = 0\n    for char in alpha_num:\n        result = result * 9 + (ord(char) - ord('A'))\n    return result\n\ndef align(alpha_num):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092\u3059\u3079\u3066H\u306b\u3059\u308b\u305f\u3081\u306e\u5024\u3092\u8a08\u7b97\u3059\u308b\n    n = len(alpha_num)\n    result_num = \"\"\n    for char in alpha_num:\n        result_num += chr((8 - (ord(char) - ord('A'))) + ord('A'))\n    return f\"{alpha_num} + {result_num} = {'H' * n}\"\n\ndef main(args):\n    # \u30e1\u30a4\u30f3\u30b3\u30de\u30f3\u30c9\n    command = args[1]\n    if command == \"encode\":\n        print(encode(int(args[2])))\n    elif command == \"decode\":\n        print(decode(args[2]))\n    elif command == \"align\":\n        print(align(args[2]))\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 244, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_DIG 300\n\nvoid multiply_by_9(char* dec_num) {\n    int carry = 0, i = 0;\n    for (; dec_num[i]; i++) {\n        int d = (dec_num[i] - '0') * 9 + carry;\n        dec_num[i] = (d % 10) + '0';\n        carry = d / 10;\n    }\n    while (carry > 0) {\n        dec_num[i++] = (carry % 10) + '0';\n        carry /= 10;\n    }\n}\n\nvoid add_digit(char* dec_num, int digit) {\n    int carry = digit, i = 0;\n    for (; carry > 0; i++) {\n        if (dec_num[i] == 0) dec_num[i] = '0';\n        int d = (dec_num[i] - '0') + carry;\n        dec_num[i] = (d % 10) + '0';\n        carry = d / 10;\n    }\n}\n\nvoid decode_recursive(const char* alpha, char* dec_num) {\n    if (*alpha == '\\0') return;\n    multiply_by_9(dec_num);\n    add_digit(dec_num, *alpha - 'A');\n    decode_recursive(alpha + 1, dec_num);\n}\n\nvoid do_decode(const char* alpha) {\n    char dec_num[MAX_DIG] = {0};\n    dec_num[0] = '0';\n    decode_recursive(alpha, dec_num);\n    int len = strlen(dec_num);\n    for (int i = 0; i < len / 2; i++) {\n        char t = dec_num[i]; dec_num[i] = dec_num[len - 1 - i]; dec_num[len - 1 - i] = t;\n    }\n    printf(\"%s\\n\", dec_num);\n}\n\nint divide_by_9(char* dec_str) {\n    char quotient[MAX_DIG] = {0};\n    int q_len = 0;\n    long long temp = 0;\n    for (int i = 0; dec_str[i]; i++) {\n        temp = temp * 10 + (dec_str[i] - '0');\n        if (q_len > 0 || temp / 9 > 0) quotient[q_len++] = (temp / 9) + '0';\n        temp %= 9;\n    }\n    if (q_len == 0) { quotient[0] = '0'; q_len=1; }\n    strcpy(dec_str, quotient);\n    return temp;\n}\n\nvoid encode_recursive(char* dec_str, char* alpha_res) {\n    if (strcmp(dec_str, \"0\") == 0) { *alpha_res = '\\0'; return; }\n    int remainder = divide_by_9(dec_str);\n    encode_recursive(dec_str, alpha_res);\n    int len = strlen(alpha_res);\n    alpha_res[len] = remainder + 'A';\n    alpha_res[len+1] = '\\0';\n}\n\nvoid do_encode(const char* dec) {\n    if (strcmp(dec, \"0\") == 0) { puts(\"A\"); return; }\n    char dec_str[MAX_DIG];\n    strcpy(dec_str, dec);\n    char alpha_res[MAX_DIG] = {0};\n    encode_recursive(dec_str, alpha_res);\n    puts(alpha_res);\n}\n\n\nvoid do_align(const char* s) {\n    int len = strlen(s);\n    char h[len + 2];\n    memset(h, 'H', len); h[len] = 0;\n\n    int t_len = len + (strcmp(s, h) > 0);\n    char target_h[t_len + 2], res_y[t_len + 2];\n\n    memset(target_h, 'H', t_len); target_h[t_len] = 0;\n    res_y[t_len] = 0;\n\n    int borrow = 0;\n    for (int i = 1; i <= t_len; i++) {\n        int d1 = i <= len ? s[len - i] - 'A' : 0;\n        int diff = ('H' - 'A') - d1 - borrow;\n        borrow = diff < 0;\n        if (borrow) diff += 9;\n        res_y[t_len - i] = diff + 'A';\n    }\n    \n    char* p = res_y;\n    while (*p == 'A' && *(p+1)) p++;\n    printf(\"%s + %s = %s\\n\", s, p, target_h);\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 3) return 1;\n  if (strcmp(argv[1], \"decode\") == 0) do_decode(argv[2]);\n  else if (strcmp(argv[1], \"encode\") == 0) do_encode(argv[2]);\n  else if (strcmp(argv[1], \"align\") == 0) do_align(argv[2]);\n  return 0;\n}"}
{"id": 245, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid encode(char* d) {\n    int buf[220], blen=0, i, j, len = strlen(d);\n    for(i=len-1;i>=0;--i) buf[blen++] = d[i]-'0';\n    char ans[220]; int alen=0;\n    if (blen == 1 && buf[0] == 0) { puts(\"A\"); return; }\n    while(blen) {\n        int rem = 0;\n        for(j=blen-1;j>=0;--j){\n            int tmp=rem*10+buf[j];\n            buf[j]=tmp/9;\n            rem=tmp%9;\n        }\n        ans[alen++]='A'+rem;\n        while(blen&&buf[blen-1]==0) blen--;\n    }\n    for(i=alen-1;i>=0;--i) putchar(ans[i]);\n    putchar('\\n');\n}\nvoid decode(char* s){\n    int n=strlen(s), out[240]={0},olen=1,i,j,carry;\n    for(i=0;i<n;++i){\n        int v=s[i]-'A';\n        carry=v;\n        for(j=0;j<olen;++j){\n            int t=out[j]*9+carry;\n            out[j]=t%10; carry=t/10;\n        }\n        while(carry){out[olen++]=carry%10; carry/=10;}\n    }\n    for(i=olen-1;i>=0;--i) printf(\"%d\",out[i]);\n    putchar('\\n');\n}\nvoid align(char* s){\n    int l=strlen(s),i;\n    char res[35];\n    for(i=0;i<l;++i) res[i]='A'+((7-(s[i]-'A')+9)%9);\n    res[l]=0;\n    printf(\"%s + %s = \",s,res);\n    for(i=0;i<l;++i) putchar('H');\n    putchar('\\n');\n}\nint main(int argc, char* argv[]){\n    if(argc!=3) return 1;\n    if(strcmp(argv[1],\"encode\")==0) encode(argv[2]);\n    else if(strcmp(argv[1],\"decode\")==0) decode(argv[2]);\n    else if(strcmp(argv[1],\"align\")==0) align(argv[2]);\n    return 0;\n}"}
{"id": 246, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef to_alphabet(num):\n    # 10\u9032\u6570\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3078\u306e\u5909\u63db\n    if num == 0:\n        return \"A\"\n    result = \"\"\n    while num > 0:\n        result = chr(num % 9 + ord('A')) + result\n        num //= 9\n    return result\n\ndef from_alphabet(alpha):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u304b\u308910\u9032\u6570\u3078\u306e\u5909\u63db\n    sum_value = 0\n    for ch in alpha:\n        sum_value = sum_value * 9 + (ord(ch) - ord('A'))\n    return sum_value\n\ndef find_alignment(alpha):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u3092H\u306b\u8abf\u6574\u3059\u308b\u305f\u3081\u306e\u5024\u3092\u8a08\u7b97\n    adjust_value = ''.join(chr(8 - (ord(ch) - ord('A')) + ord('A')) for ch in alpha)\n    return f\"{alpha} + {adjust_value} = {'H' * len(alpha)}\"\n\ndef main(args):\n    # CLI\u5f15\u6570\u3092\u51e6\u7406\n    action = args[1]\n    if action == \"encode\":\n        print(to_alphabet(int(args[2])))\n    elif action == \"decode\":\n        print(from_alphabet(args[2]))\n    elif action == \"align\":\n        print(find_alignment(args[2]))\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"id": 247, "is_generated": false, "language": "Python3", "code": "import sys\n\nalpha=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]\ndef ten2alpha(X):\n  X_temp = int(X)\n  out = ''\n  if X_temp==0:\n    return alpha[X_temp]\n  while X_temp>0:\n    out = alpha[X_temp%9]+out\n    X_temp = int(X_temp/9)\n  return out\n\ndef alpha2ten(X):\n  X_temp=\"\"\n  for i in X:\n    X_temp=X_temp+str(alpha.index(i))\n  out = 0\n  for i in range(1,len(str(X_temp))+1):\n    out += int(X_temp[-i])*(9**(i-1))\n  return out\n\ndef alphaalign(X):\n  out=\"\"\n  flag=0\n  for i in range(1,len(str(X))+1):\n    if flag==1:\n      temp=alpha.index(X[-i])-1\n      if temp>8:\n        temp=temp-8\n        flag=1\n    else:\n      temp=alpha.index(X[-i])\n    if temp<8:\n      out = (alpha[7-temp])+out\n      flag=0\n    else:\n      out = \"I\"+out\n      flag=1\n  if flag==1:\n    out = \"G\"+out\n\n  return out\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n  \n  if argv[0]==\"encode\":\n    print(ten2alpha(argv[1]))\n  if argv[0]==\"decode\":\n    print(alpha2ten(argv[1]))\n  if argv[0]==\"align\":\n    res=alphaalign(argv[1])\n    ans=\"\"\n    for i in res:\n      ans=ans+\"H\"\n    print(f\"{argv[1]} + {alphaalign(argv[1])} = {ans}\")\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 248, "is_generated": true, "language": "Java", "code": "import java.util.Random;\n\npublic class SequenceChecker {\n    public static void main(String[] args) {\n        // \u5f15\u6570\u304c\u6b63\u3057\u304f\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n        if (args.length != 1) {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n            return;\n        }\n\n        int maxIterations = Integer.parseInt(args[0]);\n        \n        // \u5165\u529b\u5024\u304c\u7bc4\u56f2\u5916\u306e\u5834\u5408\n        if (maxIterations < 0 || maxIterations > 10000) {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n            return;\n        }\n\n        Random random = new Random();\n        StringBuilder generated = new StringBuilder();\n        String targetSequence = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n\n        boolean sequenceFound = false;\n\n        for (int i = 0; i < maxIterations; i++) {\n            // \"\u79e9\"\u304b\"\u5e8f\"\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\n            String character = random.nextBoolean() ? \"\u79e9\" : \"\u5e8f\";\n            generated.append(character);\n            System.out.println(character);\n\n            // \u76ee\u6a19\u306e\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n            if (generated.toString().contains(targetSequence)) {\n                sequenceFound = true;\n                break;\n            }\n        }\n\n        if (sequenceFound) {\n            System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        } else {\n            System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n        }\n    }\n}"}
{"id": 249, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef decode(number_string):\n    base = 9\n    result = 0\n    for char in number_string:\n        result = result * base + ord(char) - ord('A')\n    return result\n\ndef encode(number):\n    base = 9\n    output = []\n    while number:\n        output.append(chr(ord('A') + number % base))\n        number //= base\n    if not output:\n        return 'A'\n    return ''.join(reversed(output))\n\ndef align(string):\n    target_value = len(string) * 8\n    current_value = decode(string)\n    difference = target_value - current_value\n    aligned = encode(difference)\n    return f\"{string} + {aligned} = {'H' * len(string)}\"\n\ndef main(arguments):\n    cmd, value = arguments[0], arguments[1]\n    if cmd == 'decode':\n        print(decode(value))\n    elif cmd == 'encode':\n        print(encode(int(value)))\n    elif cmd == 'align':\n        print(align(value))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 250, "is_generated": false, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  string comm = argv[1];\n  string mess = argv[2];\n  if(comm==\"decode\"){\n    int num = 0;\n    int cnt = 1;\n    for(int i=mess.size()-1;i>=0;i--){\n      num += cnt * (int)(mess[i]-'A');\n      cnt *=9;\n    }\n    cout <<num <<endl;\n  }\n  else if(comm==\"encode\"){\n    int num1 = atoi(mess.c_str());\n    string str;\n    do{\n      str = (char)(num1%9+'A')+str;\n      num1 /=9;\n    }while(num1 != 0);\n    cout<<str;\n  }\n  else{\n    int size;\n    int num =0;\n    for(int i=mess.size()-1,cnt =1;i>=0;i--,cnt*=9){\n      num += cnt * (int)(mess[i]-'A');\n    }\n    if(mess[0]=='I'){\n      size = mess.size()+1;\n    }\n    else{\n      size = mess.size();\n    }\n    int num1=0;\n    for(int i=0,cnt1=1;i<size;i++,cnt1*=9){\n      num1 += cnt1*7;\n    }\n    string ans;\n    int sa = num1 - num;\n    do{\n      ans = (char)(sa%9+'A')+ans;\n      sa /=9;\n    }while(sa !=0);\n    string kekka;\n    for(int i=0;i<size;i++){\n      kekka = kekka+'H';\n    }\n    cout<<mess<<\" + \"<<ans<<\" = \"<< kekka;\n  }\n  return 0;\n}\n"}
{"id": 251, "is_generated": false, "language": "C++", "code": "\n#include <stdio.h>\n#define ll long long int\n#include <queue>\n#include <vector>\n#include <iostream>\n#include <bits/stdc++.h>\n#include <string.h>\n\nusing namespace std;\nchar arr[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };\nll decode(string k);\nstring encode(ll n);\nvoid align(string k);\n\nint main(int argc, char* argv[])\n{\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n        \n        if (strcmp(argv[1], \"decode\") == 0) {\n            \n            string p = argv[2];\n\n            ll total = decode(p);\n            cout << total << \"\\n\";\n        }\n        else if (strcmp(argv[1], \"encode\") == 0) {\n            long int yu = strtol(argv[2],NULL,10);\n            string str=encode(yu);\n            cout<<str<<endl;\n        }else if(strcmp(argv[1],\"align\")==0){\n           string k=argv[2];\n           align(k);\n        }\n    \n    return 0;\n}\n\nll decode(string k)\n{\n    int y = k.size();\n   ll total = 0;\n    for (int i = 0; i < y; i++) {\n        int u;\n        for (int j = 0; j < 9; j++) {\n            if (k[i] == arr[j]) {\n                u = j;\n                \n            }\n           \n           \n        } \n               total = total* 9;\n               total += u;\n    }\n    return total;\n}\n\nstring encode(ll n)\n{   int i = 0;\n    string str=\"\";\n    // array to store binary number\n    long binaryNum[1000];\n    if(n==0){\n        binaryNum[0]=0;\n        i++;\n    }\n    // counter for binary array\n    \n    while (n > 0) {\n\n        // storing remainder in binary array\n        binaryNum[i] = n % 9;\n        n = n / 9;\n        ++i;\n        \n    }\n    \n\n    long lo;\n    // printing code array in reverse order\n    for (int j = i - 1; j >= 0; j--) {\n        lo = binaryNum[j];\n        str+=arr[lo];\n        //cout << arr[lo];\n    }\n\n    return str;\n}\n\nvoid align(string k){\n   int num= decode(k);\n   int total=k.size();\n   string h=\"\";\n   for(int i=0;i<total;i++){\n       h+='H';\n   }\n   if(decode(h)<num){\n       h+='H';\n   }\n   int remainder=decode(h)-decode(k);\n   string remain=encode(remainder);\n   cout<<k<<\" + \"<<remain<<\" = \"<<h<<endl;\n\n\n}\n"}
{"id": 252, "is_generated": false, "language": "Python3", "code": "import sys\n\n################################\ndef enc(arg):\n  num = int(arg)\n  # if num == 0\n  if num == 0:\n    print('A')\n  else:# if num =! 0\n    decnum = []\n    while num > 0:\n      mod = num % 9\n      num = num // 9\n\n      #print(\"mod:\", mod)\n      decnum.append(mod)\n\n    for i in (reversed(decnum)):\n      print(chr(ord('A')+i), end=\"\")\n    \n################################\ndef dec(arg):\n  length = len(arg)\n  p = length - 1 # pow num\n\n  ans = 0\n  for c in arg:\n    ans += (9 ** p)*(ord(c) - ord('A'))\n    p -= 1 # from top\n\n  print(ans)\n################################\ndef ali(arg):\n  length = len(arg)\n  \n  if arg[0] == \"I\":\n    pass  \n  else:\n    pass\n\n################################\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if argv[0] == \"encode\":\n      enc(argv[1])\n    elif argv[0] == \"decode\":\n      dec(argv[1])\n    elif argv[0] == \"align\":\n      ali(argv[1])\n    else:\n      print(\"command error\")\n\n\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n\n    \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 253, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid to_alphabet_number(const char* str) {\n    int num[230]={0}, nlen=0, i, j, rem, slen=strlen(str);\n    for(i=slen-1;i>=0;--i) num[nlen++] = str[i]-'0';\n    if(nlen==1 && num[0]==0){puts(\"A\");return;}\n    char buf[230]; int blen=0;\n    while(nlen){\n        rem=0;\n        for(j=nlen-1;j>=0;--j){\n            int tmp=rem*10+num[j];\n            num[j]=tmp/9;\n            rem=tmp%9;\n        }\n        buf[blen++]='A'+rem;\n        while(nlen && num[nlen-1]==0) nlen--;\n    }\n    for(i=blen-1;i>=0;--i) putchar(buf[i]);\n    putchar('\\n');\n}\nvoid from_alphabet_number(const char* alp){\n    int out[240]={0}, olen=1, i,j,v,carry;\n    for(i=0;alp[i];++i){\n        v=alp[i]-'A'; carry=v;\n        for(j=0;j<olen;++j){\n            int w=out[j]*9+carry; out[j]=w%10; carry=w/10;\n        }\n        while(carry){out[olen++]=carry%10; carry/=10;}\n    }\n    for(i=olen-1;i>=0;--i) putchar('0'+out[i]);\n    putchar('\\n');\n}\nvoid alphabet_add_H(const char *alp){\n    int len=strlen(alp),i;\n    char buf[35];\n    for(i=0;i<len;++i) buf[i]='A'+((7-(alp[i]-'A')+9)%9);\n    buf[len]=0;\n    printf(\"%s + %s = \",alp,buf);\n    for(i=0;i<len;++i) putchar('H'); putchar('\\n');\n}\nint main(int argc, char *argv[]){\n    if(argc<3)return 1;\n    if(strcmp(argv[1],\"encode\")==0) to_alphabet_number(argv[2]);\n    else if(strcmp(argv[1],\"decode\")==0) from_alphabet_number(argv[2]);\n    else if(strcmp(argv[1],\"align\")==0) alphabet_add_H(argv[2]);\n    return 0;\n}"}
{"id": 254, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef encode(d):\n    # 10\u9032\u6570\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u306b\n    x = int(d)\n    if x == 0:\n        return 'A'\n    s = ''\n    while x:\n        q = x % 9\n        s = chr(ord('A')+q) + s\n        x //= 9\n    return s\n\ndef decode(s):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6570\u309210\u9032\u6570\u306b\n    n = 0\n    for c in s:\n        n = n * 9 + (ord(c)-ord('A'))\n    return n\n\ndef align(v):\n    # H = 7, \u6841\u3054\u3068\u306bx+?=7\n    add = ''.join(chr(ord('A')+(7-(ord(a)-ord('A')))%9) for a in v)\n    print(f\"{v} + {add} = {'H'*len(v)}\")\n\ndef main(argv):\n    if argv[0] == \"encode\":\n        print(encode(argv[1]))\n    elif argv[0] == \"decode\":\n        print(decode(argv[1]))\n    elif argv[0] == \"align\":\n        align(argv[1])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 255, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef decode(alphabet):\n  result = 0\n  for i, a in enumerate(alphabet[::-1]):\n    result += alpha2num()[a] * (9 ** i)\n  return result\n\ndef encode(number):\n  q = number\n  q, mod = divmod(q, 9)\n  result = num2alpha()[mod]\n  while q != 0:\n    q, mod = divmod(q, 9)\n    result = num2alpha()[mod] + result\n  return result\n\ndef alpha2num():\n  return dict(\n    A=0,\n    B=1,\n    C=2,\n    D=3,\n    E=4,\n    F=5,\n    G=6,\n    H=7,\n    I=8\n  )\n\ndef num2alpha():\n  return {v :k for k, v in alpha2num().items()}\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if argv[0] == \"decode\":\n      r = decode(argv[1])\n      print(r)\n    elif argv[0] == \"encode\":\n      r = encode(int(argv[1]))\n      print(r)\n    else:\n      alpha = argv[1]\n      size = len(alpha)\n      if alpha[0] == 'I':\n        size += 1\n      all_h = 'H' * size\n      plus_alpha = encode(decode(all_h) - decode(alpha))\n      print(\"{} + {} = {}\".format(alpha, plus_alpha, all_h))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 256, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For rand(), srand()\n#include <ctime>   // For time()\n\n// Helper function to get a random Japanese character string\nstd::string getRandomJapaneseChar() {\n    if (std::rand() % 2 == 0) {\n        return \"\u79e9\"; // 'chitsu'\n    } else {\n        return \"\u5e8f\"; // 'jo'\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // Check if the correct number of arguments is provided\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <count>\" << std::endl;\n        return 1;\n    }\n\n    // Parse the input count from command line arguments\n    int maxIterations = std::stoi(argv[1]);\n\n    // Validate the input count range\n    if (maxIterations < 0 || maxIterations > 10000) {\n        std::cerr << \"Count must be between 0 and 10000.\" << std::endl;\n        return 1;\n    }\n\n    // Seed the random number generator using current time\n    std::srand(static_cast<unsigned int>(std::time(nullptr)));\n\n    // Define the target pattern sequence in UTF-8\n    const std::string targetPhrase = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    // The byte length of the target phrase (each Japanese character is 3 bytes in UTF-8)\n    const int targetPhraseByteLength = targetPhrase.length(); \n\n    // Buffer to store the currently generated sequence for pattern matching\n    std::string currentSequenceBuffer;\n\n    bool patternFound = false; // Flag to indicate if the pattern was found\n\n    // Loop for the specified number of iterations\n    for (int i = 0; i < maxIterations; ++i) {\n        // Get a random '\u79e9' or '\u5e8f' character string\n        std::string currentChar = getRandomJapaneseChar();\n        \n        // Print the character to standard output\n        std::cout << currentChar << std::endl;\n        \n        // Append the character (its UTF-8 bytes) to the buffer\n        currentSequenceBuffer += currentChar;\n\n        // If the buffer is long enough, check if the last part matches the target phrase\n        if (currentSequenceBuffer.length() >= targetPhraseByteLength) {\n            // Extract the last N bytes where N is the byte length of targetPhrase\n            if (currentSequenceBuffer.substr(currentSequenceBuffer.length() - targetPhraseByteLength) == targetPhrase) {\n                patternFound = true; // Pattern found, set flag and break loop\n                break;\n            }\n        }\n    }\n\n    // Output the final message based on whether the pattern was found\n    if (patternFound) {\n        std::cout << \"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\" << std::endl;\n    } else {\n        std::cout << \"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\" << std::endl;\n    }\n\n    return 0; // Program finished successfully\n}"}
{"id": 257, "is_generated": false, "language": "Python3", "code": "import sys\n\nargs = sys.argv\nalpha_list = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n\nif args[1] == 'decode':\n  get_list = [word for word in args[2]]\n  number = 0\n  count = len(get_list) - 1\n  for one in get_list:\n    number += alpha_list.index(one) * (9**count)\n    count -= 1\n  print(number)\n\n\nelif args[1] == 'encode':\n  print('a')\n  score = int(args[2])\n\n\nelif args[1] == 'align':\n  get_list = [word for word in args[2]]\n  new_list = []\n  for one in get_list:\n    new_list.append(alpha_list[7-alpha_list.index(one)])\n  aaa = ''\n  for one in new_list:\n    aaa += one\n  bbb = ''\n  for one in get_list:\n    bbb += 'H'\n  print(args[2] + ' + ' + aaa + ' = ' + bbb)"}
{"id": 258, "is_generated": true, "language": "Python3", "code": "import sys\n\nletter_to_digit = {chr(ord('A') + i): i for i in range(9)}\ndigit_to_letter = {i: chr(ord('A') + i) for i in range(9)}\n\ndef alpha_to_int(s):\n    n = 0\n    for ch in s:\n        n = n * 9 + letter_to_digit[ch]\n    return n\n\ndef int_to_alpha(x):\n    if x == 0:\n        return 'A'\n    res = []\n    while x > 0:\n        res.append(digit_to_letter[x % 9])\n        x //= 9\n    return ''.join(reversed(res))\n\ndef do_align(alphas):\n    # \u3059\u3079\u3066H(=7)\u306b\u306a\u308b\u3088\u3046\u306b\u8db3\u3059\n    l = len(alphas)\n    add_digits = []\n    for ch in alphas:\n        d = letter_to_digit[ch]\n        # \u8db3\u3059\u3079\u304d\u6570\n        add = (7 - d) % 9\n        add_digits.append(digit_to_letter[add])\n    s_add = ''.join(add_digits)\n    s_h = 'H' * l\n    print(f\"{alphas} + {s_add} = {s_h}\")\n\ndef main(argv):\n    if len(argv) < 2:\n        return\n    cmd, param = argv[0], argv[1]\n    if cmd == 'decode':\n        print(alpha_to_int(param))\n    elif cmd == 'encode':\n        print(int_to_alpha(int(param)))\n    elif cmd == 'align':\n        do_align(param)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 259, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alph_num_to_int(s):\n    val = 0\n    for c in s:\n        val = val*9 + (ord(c) - ord('A'))\n    return val\n\ndef int_to_alph_num(num):\n    if num == 0:\n        return 'A'\n    res = []\n    while num > 0:\n        res.append(chr(num % 9 + ord('A')))\n        num //=9\n    return ''.join(reversed(res))\n\ndef align_num(s):\n    n = len(s)\n    target = ord('H') - ord('A')  # 7\n    digits = [ord(c)-ord('A') for c in s]\n    carry = 0\n    add_digits = []\n    for d in reversed(digits):\n        x = (target - d - carry) % 9\n        carry = (d + x + carry)//9 -1\n        add_digits.append(x)\n    add_digits.reverse()\n    add_str = ''.join(chr(d + ord('A')) for d in add_digits)\n    sum_val = alph_num_to_int(s) + alph_num_to_int(add_str)\n    sum_str = int_to_alph_num(sum_val)\n    return f\"{s} + {add_str} = {sum_str}\"\n\ndef main(args):\n    cmd = args[0]\n    val = args[1]\n\n    if cmd == 'decode':\n        print(alph_num_to_int(val))\n    elif cmd == 'encode':\n        num = int(val)\n        print(int_to_alph_num(num))\n    else:\n        print(align_num(val))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 260, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n// \u300c\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\u300d\u306e\u9577\u3055\n#define PATTERN_LEN 7\n\nint main(int argc, char *argv[]) {\n  int limit;\n  if (argc != 2) {\n    // \u5f15\u6570\u30c1\u30a7\u30c3\u30af\n    fprintf(stderr, \"usage: %s <\u56de\u6570(0-10000)>\\n\", argv[0]);\n    return 1;\n  }\n\n  limit = atoi(argv[1]);\n  if (limit < 0 || limit > 10000) {\n    fprintf(stderr, \"\u7bc4\u56f2\u5916\u306e\u56de\u6570\u3067\u3059\u3002\\n\");\n    return 1;\n  }\n\n  const char *pattern = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n  char history[PATTERN_LEN+1] = {0}; // \u76f4\u8fd1\u306e\u5c65\u6b74\n\n  srand((unsigned int)time(NULL));\n  int found = 0;\n  int n = 0;\n\n  for (; n < limit; ++n) {\n    int r = rand() % 2;\n    const char *moji = (r == 0) ? \"\u79e9\" : \"\u5e8f\";\n    printf(\"%s\\n\", moji);\n\n    // \u5c65\u6b74\u30921\u6587\u5b57\u524d\u5012\u3057\u3057\u3066\u65b0\u3057\u3044\u6587\u5b57\u3092\u8ffd\u52a0\u3059\u308b\n    memmove(history, history+1, PATTERN_LEN-1);\n    strcpy(history+PATTERN_LEN-1, moji);\n\n    // \u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    if (strcmp(history, pattern) == 0) {\n      puts(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n      found = 1;\n      break;\n    }\n  }\n\n  if (!found) {\n    puts(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n\n  return 0;\n}"}
{"id": 261, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    word = argv[0]\n    N = argv[1]\n    dic1 = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8}\n    if word == 'decode':\n      n = len(N)\n      kazu = 0\n      for i in range(n):\n        kazu = kazu + dic1[N[i]] * 9**(n-i-1)\n      print(kazu)\n    \n    dic2 = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I'}\n    if word == 'encode':\n      N1 = int(N)\n      s1 = ''\n      if N1 == 0:\n        print('A')\n      while N1 != 0 :\n        s1 = dic2[N1%9] + s1\n        N1 = N1//9\n      print(s1)\n    \n    if word == 'align':\n      n = len(N)\n      kazu = 0\n      for i in range(n):\n        kazu = kazu + dic1[N[i]] * 9**(n-i-1)\n      \n      ii = 0\n      while kazu != 0:\n        kazu = kazu//9\n        ii += 1\n      \n      NH = 9**(ii)\n      N2 = NH - kazu\n\n      s2 = ''\n      if N2 == 0:\n        s2 = 'A'\n      while N2 != 0 :\n        s2 = dic2[N2%9] + s2\n        N2 = N2//9\n\n\n      s3 = ''\n      if NH == 0:\n        s3 = 'A'\n      while NH != 0 :\n        s3 = dic2[NH%9] + s3\n        NH = NH//9\n      \n      print(str(N) + ' + '+str(s2)+' = '+str(s3))\n\n      \n\n    #for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    "}
{"id": 262, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  alp = ['A','B','C','D','E','F','G','H','I']\n  cmd = argv[0]\n  input = argv[1]\n\n  temp = []\n  if cmd == 'decode':\n    l = len(input) - 1\n    sum = 0\n    for t in input:\n      sum += 9**l * alp.index(t)\n      l -= 1\n    print(sum)\n  \n  elif cmd == 'encode':\n    num = int(input)\n    while True:\n      temp.append(num % 9)\n      r = num//9\n      if r==0:\n        break\n      num = r\n    ans = \"\"\n    for i in temp[::-1]:\n      ans += alp[i]\n    print(ans)\n  \n  else:\n    tt = ''\n    flg = 0\n    for t in input[::-1]:\n      if t == 'I':\n        tt = 'I' + tt\n        flg = 1\n      else:\n        if flg == 1:\n          plus = 6 - alp.index(t)\n          tt = alp[plus] + tt\n          flg = 0\n        else:\n          plus = 7 - alp.index(t)\n          tt = alp[plus] + tt\n    ff = 0\n    if flg == 1:\n      tt = 'G' + tt\n      ff += 1\n    lll = len(input) + ff\n  \n\n    print(f\"{input} + {tt} = {'H'*lll}\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 263, "is_generated": false, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  $hash = array(\"\u79e9\", \"\u5e8f\");\n  $cnt = 0;\n  for($i = 0; $i <= $argv[0]; $i++){\n    $key = array_rand($hash, 1);\n    printf($hash[$key].\"\\n\");\n    if($hash[$key] === mb_substr(\"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\", $cnt, 1)){\n      $cnt++;\n      if($cnt == 6){\n      \tprintf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n      \texit;\n    \t}\n    }else{\n      $cnt = 0;\n    }\n  }\n  if($cnt < 6){\n    printf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 264, "is_generated": false, "language": "Java", "code": "package track;\n\nimport java.math.*;\nimport java.util.*;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      // System.out.println(output);\n    }\n\n    if (\"decode\".equals(args[0])) {\n      System.out.print(decode(args[1]));\n    }\n    else if (\"encode\".equals(args[0])) {\n      encodeAndPrint(args[1]);\n    }\n    else if (\"align\".equals(args[0])) {\n      alignAndPrint(args[1]);\n    }\n  }\n\n  private static char[] DIGIT_TO_CHAR = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'};\n\n  private static BigInteger NINE = new BigInteger(\"9\");\n\n  private static BigInteger decode(String chars) {\n    BigInteger answer = BigInteger.ZERO;\n    for (int i = chars.length() - 1, j = 0; i >= 0; i--, j++) {\n      int n = chars.charAt(i) - 'A';\n      answer = answer.add(NINE.pow(j).multiply(new BigInteger(Integer.toString(n))));\n    }\n    return answer;\n  }\n\n  private static void encodeAndPrint(String digits) {\n    BigInteger x = new BigInteger(digits);\n\n    ArrayList<Integer> list = new ArrayList<>();\n    while (x.compareTo(BigInteger.ZERO) > 0) {\n      BigInteger[] answer = x.divideAndRemainder(NINE);\n      x = answer[0];\n      list.add(answer[1].intValue());\n    }\n\n    if (list.isEmpty()) {\n      System.out.print(\"A\");\n      return;\n    }\n\n    StringBuilder buffer = new StringBuilder();\n    for (int i = list.size() - 1; i >= 0; i--) {\n      buffer.append(DIGIT_TO_CHAR[list.get(i)]);\n    }\n    System.out.print(buffer.toString());\n  }\n\n  private static void alignAndPrint(String chars) {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0; i < chars.length(); i++) {\n      buffer.append('H');\n    }\n    BigInteger max = decode(buffer.toString());\n    BigInteger left = decode(chars);\n\n    if (max.compareTo(left) < 0) {\n      buffer.append('H');\n      max = decode(buffer.toString());\n    }\n    BigInteger right = max.subtract(left);\n    \n    encodeAndPrint(left.toString());\n    System.out.print(\" + \");\n    encodeAndPrint(right.toString());\n    System.out.print(\" = \");\n    encodeAndPrint(max.toString());\n  }\n}\n"}
{"id": 265, "is_generated": false, "language": "Python3", "code": "import sys\nimport string\n\ndef encode(x):\n  x = int(x)\n  map_dict = {i:j for i, j in zip(range(9), list(string.ascii_uppercase)[:9])}\n  out = ''\n  if x==0:\n    out = 'A'\n  while x>0:\n    out += map_dict[x%9]\n    x = x//9\n  return out[::-1]\n\ndef decode(x):\n  x = list(x)\n  map_dict = {j:i for i, j in zip(range(9), list(string.ascii_uppercase)[:9])}\n  out = 0\n  for num, i in enumerate(x[::-1]):\n    out += map_dict[i]*(9**num)\n  return out\n\ndef align(x):\n  len_x = 'H'*len(x)\n  H_decode = decode(len_x)\n  x_decode = decode(x)\n  diff = H_decode - x_decode\n  if diff < 0:\n    len_x = 'H'*(len(x)+1)\n    H_decode = decode(len_x)\n    diff = H_decode - x_decode\n  diff_encode = encode(diff)\n  return '{} + {} = {}'.format(x, diff_encode, len_x)\n\ndef main(argv):\n  mode, info = argv\n  if mode=='encode':\n    print(encode(info))\n  elif mode=='decode':\n    print(decode(info))\n  elif mode=='align':\n    print(align(info))\n\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n\n  # for i, v in enumerate(argv):\n  #     print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 266, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\nimport java.lang.StringBuilder;\n\npublic class App {\n\n  // \u30b2\u30fc\u30e0\u306e\u30ed\u30b8\u30c3\u30af\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3059\u308b\u30af\u30e9\u30b9\n  static class GameMaster {\n    private final String TARGET_SEQUENCE = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    private final int SEQUENCE_LENGTH = TARGET_SEQUENCE.length();\n    private final Random characterGenerator;\n    private StringBuilder currentSlidingWindow;\n    private int totalIterations;\n\n    // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6700\u5927\u8a66\u884c\u56de\u6570\u3092\u8a2d\u5b9a\n    public GameMaster(int maxAttempts) {\n      this.totalIterations = maxAttempts;\n      this.characterGenerator = new Random();\n      this.currentSlidingWindow = new StringBuilder();\n    }\n\n    // \u30b2\u30fc\u30e0\u3092\u958b\u59cb\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    public void commenceGame() {\n      // \u8a66\u884c\u56de\u6570\u304c0\u306e\u5834\u5408\u306f\u7279\u5b9a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n      if (totalIterations == 0) {\n        System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n        return;\n      }\n\n      boolean targetFound = false; // \u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n      for (int i = 0; i < totalIterations; i++) {\n        char producedCharacter = (characterGenerator.nextInt(2) == 0) ? '\u79e9' : '\u5e8f';\n        System.out.println(producedCharacter); // \u751f\u6210\u3057\u305f\u6587\u5b57\u3092\u51fa\u529b\n\n        currentSlidingWindow.append(producedCharacter); // \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ffd\u52a0\n\n        // \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u76ee\u6a19\u306e\u9577\u3055\u3092\u8d85\u3048\u305f\u3089\u3001\u4e00\u756a\u53e4\u3044\u6587\u5b57\u3092\u524a\u9664\u3057\u3066\u30b9\u30e9\u30a4\u30c9\n        if (currentSlidingWindow.length() > SEQUENCE_LENGTH) {\n          currentSlidingWindow.deleteCharAt(0);\n        }\n\n        // \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u76ee\u6a19\u306e\u9577\u3055\u306b\u306a\u308a\u3001\u304b\u3064\u5185\u5bb9\u304c\u4e00\u81f4\u3057\u305f\u3089\u6210\u529f\n        if (currentSlidingWindow.length() == SEQUENCE_LENGTH && currentSlidingWindow.toString().equals(TARGET_SEQUENCE)) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          targetFound = true;\n          break; // \u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u305f\u3081\u30eb\u30fc\u30d7\u3092\u4e2d\u65ad\n        }\n      }\n\n      // \u30eb\u30fc\u30d7\u304c\u6700\u5f8c\u307e\u3067\u5b9f\u884c\u3055\u308c\u3001\u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\n      if (!targetFound) {\n        System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u6574\u6570\u306b\u5909\u63db\n    int numberOfIterations = Integer.parseInt(args[0]);\n    // GameMaster\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30b2\u30fc\u30e0\u3092\u958b\u59cb\n    GameMaster game = new GameMaster(numberOfIterations);\n    game.commenceGame();\n  }\n}"}
{"id": 267, "is_generated": false, "language": "JavaScript (Node.js)", "code": "\"use strict\";\nconst texts = ['\u79e9', '\u5e8f']\n\nfunction main(argv) {\n  let output = ''\n\n  for (let i = 0; i < argv[0]; i++) {\n    const text = texts[Math.floor(Math.random() * texts.length)]\n    console.log(text)\n\n    output += text\n    if (output.match(/\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f/)) {\n      console.log('\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a')\n      return\n    }\n  }\n  \n  console.log('\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!')\n}\n\nmain(process.argv.slice(2));"}
{"id": 268, "is_generated": false, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\"os\"\n)\n\nfunc main() {\n\tsubcomnnad := os.Args[1]\n\tx := os.Args[2]\n\tswitch subcomnnad {\n\tcase \"decode\":\n\t\tdecode(x)\n\tcase \"encode\":\n\t\tencode(x)\n\tcase \"align\":\n\t\talign(x)\n\tdefault:\n\t\tpanic(\"unkwon command: \" + subcomnnad)\n\t}\n}\n\nfunc decode(alpha string) {\n\tn, _ := new(big.Int).SetString(toNum(alpha), 9)\n\tfmt.Println(n.Text(10))\n}\n\nfunc encode(numStr string) {\n\tn, _ := new(big.Int).SetString(numStr, 10)\n\tfmt.Println(toAlpha(n.Text(9)))\n}\n\nfunc toAlpha(s string) string {\n\ta := \"\"\n\tfor _, c := range s {\n\t\ta += string('A' + (c - '0'))\n\t}\n\treturn a\n}\n\nfunc toNum(a string) string {\n\ts := \"\"\n\tfor _, c := range a {\n\t\ts += string('0' + (c - 'A'))\n\t}\n\treturn s\n}\n\nfunc align(alpha string) {\n\tn, _ := new(big.Int).SetString(toNum(alpha), 9)\n\tx := big.NewInt(7)\n\tfor x.Cmp(n) == -1 {\n\t\tx = new(big.Int).Add(new(big.Int).Mul(x, big.NewInt(9)), big.NewInt(7))\n\t}\n\tfmt.Printf(\"%s + %s = %s\\n\", alpha, toAlpha(new(big.Int).Sub(x, n).Text(9)), toAlpha(x.Text(9)))\n}\n"}
{"id": 269, "is_generated": false, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.math.BigInteger;\n\npublic class App {\n  public static void main(String[] args) {\n    //\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u5909\u6570\u3078\u4ee3\u5165\n    String subCom = args[0];\n\n    //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5bfe\u5fdc\u30ea\u30b9\u30c8\u4f5c\u6210\n    List<String> alphaList = new ArrayList<String>();\n    alphaList.add(\"A\");\n    alphaList.add(\"B\");\n    alphaList.add(\"C\");\n    alphaList.add(\"D\");\n    alphaList.add(\"E\");\n    alphaList.add(\"F\");\n    alphaList.add(\"G\");\n    alphaList.add(\"H\");\n    alphaList.add(\"I\");\n\n    if(subCom.equals(\"decode\")) { //decode\u306e\u5834\u5408\n      String alpha = args[1]; //\u5f15\u6570\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u53d6\u5f97\n      String[] alphaArr = alpha.split(\"\"); //\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u914d\u5217\u3078\u683c\u7d0d\n      List<Integer> alphaNumList = new ArrayList<Integer>(); //\u8981\u7d20\u756a\u53f7\u683c\u7d0d\u7528\u30ea\u30b9\u30c8\u4f5c\u6210\n      //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5bfe\u5fdc\u30ea\u30b9\u30c8\u304b\u30899\u9032\u6570\u3092\u53d6\u5f97\n      for(int i = 0; i < alphaArr.length; i++) { //\u914d\u5217alphaArr\u306e\u9577\u3055\u5206\u7e70\u308a\u8fd4\u3059\n        String alphaChar = alphaArr[i]; //i\u756a\u76ee\u306e\u5024\u3092\u5909\u6570alphaChar\u3078\u683c\u7d0d\n        alphaNumList.add(alphaList.indexOf(alphaChar)); //alphaChar\u3092alphaList\u304b\u3089\u691c\u7d22\u3001\u5408\u81f4\u3059\u308b\u8981\u7d20\u756a\u53f7\u3092alphaNumList\u3078\u683c\u7d0d\n      }\n      //\u53d6\u5f97\u3057\u305f9\u9032\u6570\u309210\u9032\u6570\u3078\u5909\u63db\n      int sum = 0; //10\u9032\u6570\u683c\u7d0d\u7528\u5909\u6570\n      for(int i = 0, j = 1; i < alphaNumList.size(); i++, j++) {\n        int jo = alphaNumList.size() - j; //\u6841\u6570\u304b\u3089\b9\u306e\u4e57\u7b97\u56de\u6570\u3092\u53d6\u5f97\n        sum += alphaNumList.get(i) * Math.pow(9, jo);\n      }\n      System.out.print(sum); //\u6841\u6570\u306e\u5927\u304d\u3044\u6570\u5024\u306e\u8a08\u7b97\u304c\u3067\u304d\u306a\u3044\n    } else if(subCom.equals(\"encode\")) { //encode\u306e\u5834\u5408\n      int num = Integer.parseInt(args[1]); //\u5f15\u6570\u306e10\u9032\u6570\u53d6\u5f97\n      //10\u9032\u6570\u304b\u30899\u9032\u6570\u3078\u5909\u63db\n      int n = 9;\n      String base9 = Integer.toString(num, n);\n      String[] base9Arr = base9.split(\"\"); //\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u914d\u5217\u3078\u683c\u7d0d\n      List<String> base9AlphaList = new ArrayList<String>(); //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u683c\u7d0d\u7528\u30ea\u30b9\u30c8\u4f5c\u6210\n      //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5bfe\u5fdc\u30ea\u30b9\u30c8\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u53d6\u5f97\n      for(int i = 0; i < base9Arr.length; i++) { //\u914d\u5217base9Arr\u306e\u9577\u3055\u5206\u7e70\u308a\u8fd4\u3059\n        int base9Char = Integer.parseInt(base9Arr[i]); //i\u756a\u76ee\u306e\u5024\u3092\u5909\u6570alphaChar\u3078\u683c\u7d0d\n        base9AlphaList.add(alphaList.get(base9Char)); //alphaList\u304b\u3089\u30ad\u30fc\u304cbase9Char\u306e\u5024\u3092\u691c\u7d22\u3001\u5408\u81f4\u3059\u308b\u8981\u7d20\u3092base9AlphaList\u3078\u683c\u7d0d\n      }\n      String base9Str = \"\"; //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6587\u5b57\u5217\u5217\u683c\u7d0d\u7528\u5909\u6570\n      for(int i = 0; i < base9AlphaList.size(); i++) {\n        base9Str += base9AlphaList.get(i);\n      }\n      System.out.print(base9Str);\n    } else if(subCom.equals(\"align\")) {\n      String alpha = args[1]; //\u5f15\u6570\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u53d6\u5f97\n      String[] alphaArr = alpha.split(\"\"); //\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u914d\u5217\u3078\u683c\u7d0d\n      List<Integer> alphaNumList = new ArrayList<Integer>(); //\u8981\u7d20\u756a\u53f7\u683c\u7d0d\u7528\u30ea\u30b9\u30c8\u4f5c\u6210\n      //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5bfe\u5fdc\u30ea\u30b9\u30c8\u304b\u30899\u9032\u6570\u3092\u53d6\u5f97\n      for(int i = 0; i < alphaArr.length; i++) { //\u914d\u5217alphaArr\u306e\u9577\u3055\u5206\u7e70\u308a\u8fd4\u3059\n        String alphaChar = alphaArr[i]; //i\u756a\u76ee\u306e\u5024\u3092\u5909\u6570alphaChar\u3078\u683c\u7d0d\n        alphaNumList.add(alphaList.indexOf(alphaChar)); //alphaChar\u3092alphaList\u304b\u3089\u691c\u7d22\u3001\u5408\u81f4\u3059\u308b\u8981\u7d20\u756a\u53f7\u3092alphaNumList\u3078\u683c\u7d0d\n      }\n      //\u53d6\u5f97\u3057\u305f9\u9032\u6570\u309210\u9032\u6570\u3078\u5909\u63db\n      int sum = 0; //10\u9032\u6570\u683c\u7d0d\u7528\u5909\u6570\n      for(int i = 0, j = 1; i < alphaNumList.size(); i++, j++) {\n        int jo = alphaNumList.size() - j; //\u6841\u6570\u304b\u3089\b9\u306e\u4e57\u7b97\u56de\u6570\u3092\u53d6\u5f97\n        sum += alphaNumList.get(i) * Math.pow(9, jo);\n      }\n      String sevens = \"\"; //9\u9032\u6570\u306e777...\n      String hs = \"\";\n      for(int i = 0; i < alphaNumList.size(); i++) {\n        sevens += 7;\n        hs += \"H\";\n      }\n      String alphaNums = \"\"; //\u5f15\u6570\u304b\u3089\u53d6\u5f97\u3057\u305f9\u9032\u6570\n      for(int i = 0; i < alphaNumList.size(); i++) {\n        alphaNums += alphaNumList.get(i);\n      }\n      int sevensNumber = Integer.parseInt(sevens);\n      int alphaNumber = Integer.parseInt(alphaNums);\n      int sub = 0; //\u5f15\u6570\u306e9\u9032\u6570\u304b\u3089777...\u3092\u5f15\u3044\u305f\u7d50\u679c\n      if(alphaNumber <= sevensNumber) {\n        // 9\u9032\u6570\u304b\u308910\u9032\u6570\u3078\u5909\u63db\n        int n = 9;\n        int sevensDec = Integer.parseInt(sevens, n);\n        int alphaDec = Integer.parseInt(alphaNums, n);\n        sub = sevensDec - alphaDec;\n        //10\u9032\u6570\u304b\u30899\u9032\u6570\u3078\u5909\u63db\n        String base9 = Integer.toString(sub, n);\n        String[] base9Arr = base9.split(\"\"); //\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u914d\u5217\u3078\u683c\u7d0d\n        List<String> base9AlphaList = new ArrayList<String>(); //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u683c\u7d0d\u7528\u30ea\u30b9\u30c8\u4f5c\u6210\n        //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5bfe\u5fdc\u30ea\u30b9\u30c8\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u53d6\u5f97\n        for(int i = 0; i < base9Arr.length; i++) { //\u914d\u5217base9Arr\u306e\u9577\u3055\u5206\u7e70\u308a\u8fd4\u3059\n          int base9Char = Integer.parseInt(base9Arr[i]); //i\u756a\u76ee\u306e\u5024\u3092\u5909\u6570alphaChar\u3078\u683c\u7d0d\n          base9AlphaList.add(alphaList.get(base9Char)); //alphaList\u304b\u3089\u30ad\u30fc\u304cbase9Char\u306e\u5024\u3092\u691c\u7d22\u3001\u5408\u81f4\u3059\u308b\u8981\u7d20\u3092base9AlphaList\u3078\u683c\u7d0d\n        }\n        String base9Str = \"\"; //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6587\u5b57\u5217\u5217\u683c\u7d0d\u7528\u5909\u6570\n        for(int i = 0; i < base9AlphaList.size(); i++) {\n          base9Str += base9AlphaList.get(i);\n        }\n        System.out.print(alpha + \" + \" + base9Str + \" = \" + hs);\n      } else if(sevensNumber < alphaNumber) {\n        sevens += 7;\n        hs += \"H\";\n        // 9\u9032\u6570\u304b\u308910\u9032\u6570\u3078\u5909\u63db\n        int n = 9;\n        int sevensDec = Integer.parseInt(sevens, n);\n        int alphaDec = Integer.parseInt(alphaNums, n);\n        sub = sevensDec - alphaDec;\n        //10\u9032\u6570\u304b\u30899\u9032\u6570\u3078\u5909\u63db\n        String base9 = Integer.toString(sub, n);\n        String[] base9Arr = base9.split(\"\"); //\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u914d\u5217\u3078\u683c\u7d0d\n        List<String> base9AlphaList = new ArrayList<String>(); //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u683c\u7d0d\u7528\u30ea\u30b9\u30c8\u4f5c\u6210\n        //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5bfe\u5fdc\u30ea\u30b9\u30c8\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u53d6\u5f97\n        for(int i = 0; i < base9Arr.length; i++) { //\u914d\u5217base9Arr\u306e\u9577\u3055\u5206\u7e70\u308a\u8fd4\u3059\n          int base9Char = Integer.parseInt(base9Arr[i]); //i\u756a\u76ee\u306e\u5024\u3092\u5909\u6570alphaChar\u3078\u683c\u7d0d\n          base9AlphaList.add(alphaList.get(base9Char)); //alphaList\u304b\u3089\u30ad\u30fc\u304cbase9Char\u306e\u5024\u3092\u691c\u7d22\u3001\u5408\u81f4\u3059\u308b\u8981\u7d20\u3092base9AlphaList\u3078\u683c\u7d0d\n        }\n        String base9Str = \"\"; //\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6587\u5b57\u5217\u5217\u683c\u7d0d\u7528\u5909\u6570\n        for(int i = 0; i < base9AlphaList.size(); i++) {\n          base9Str += base9AlphaList.get(i);\n        }\n        System.out.print(alpha + \" + \" + base9Str + \" = \" + hs);\n      }\n    }\n  }\n}"}
{"id": 270, "is_generated": false, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nbase = 9\n\ndef single_decode(code):\n    if code == 'A':\n        return 0\n    elif code == 'B':\n        return 1\n    elif code == 'C':\n        return 2\n    elif code == 'D':\n        return 3\n    elif code == 'E':\n        return 4\n    elif code == 'F':\n        return 5\n    elif code == 'G':\n        return 6\n    elif code == 'H':\n        return 7\n    elif code == 'I':\n        return 8\n    else:\n        return 'error'\n\ndef single_encode(value):\n    if value == 0:\n        code = 'A'\n    elif value == 1:\n        code = 'B'\n    elif value == 2:\n        code = 'C'\n    elif value == 3:\n        code = 'D'\n    elif value == 4:\n        code = 'E'\n    elif value == 5:\n        code = 'F'\n    elif value == 6:\n        code = 'G'\n    elif value == 7:\n        code = 'H'\n    elif value == 8:\n        code = 'I'\n    \n    return code\n\ndef decode(code):\n    length = len(code)\n    result_value = 0\n    digit = 0\n\n    current_base = 1\n\n    for i_str in range(length):\n        single_code = code[length - 1 - i_str]\n        value = single_decode(single_code)     \n\n        if digit == 0:\n            add = value\n        else:\n            add = value * current_base\n        \n        result_value += add\n\n        digit += 1\n        current_base *= base\n\n    return result_value\n\ndef encode(value):\n    code = ''\n    digit = 1\n\n    while True:\n      res = value % base\n\n      new_code = single_encode(res)\n      code = new_code + code\n\n      value -= res\n\n      if value < 1:\n        break\n\n      value = value / base\n\n      digit += 1\n    \n    return code\n\ndef align(code):\n    equation = code + ' + '\n\n    code_length = len(code)\n    code_value = decode(code)\n\n    result_H_length = code_length\n    result_H_code = ''\n    for i_str in range(result_H_length):\n      result_H_code += 'H'\n    result_H_value = decode(result_H_code)\n\n    if result_H_value < code_value:\n        result_H_length += 1\n        result_H_code += 'H'\n    result_H_value = decode(result_H_code)\n  \n    diff_value = result_H_value - code_value\n\n    diff_code = encode(diff_value)\n\n    return equation + diff_code + ' = ' + result_H_code\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    \n    command = argv[0]\n\n    if command == 'encode':\n        value = int(argv[1])\n        code = encode(value)\n        print(code)\n    elif command == 'decode':\n        value = decode(argv[1])\n        print(value)\n    elif command == 'align':\n        equation = align(argv[1])\n        print(equation)    \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 271, "is_generated": false, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\nint alpha2i(string num) {\n  int ret = 0;\n  for (char i : num) ret = ret * 9 + int(i - 65);\n  return ret;\n}\n\nstring i2alpha(int num) {\n  if (num == 0) return \"A\";\n  else {\n    string ret = \"\";\n    while(num != 0) {\n      ret = char(65 + num % 9) + ret;\n      num /= 9;\n    }\n    return ret;\n  }\n}\n\nint main(int argc, char *argv[]) {\n\n  if (!strcmp(argv[1], \"encode\")) {\n    cout << i2alpha(atoi(argv[2])) << endl;\n  }\n  else if (!strcmp(argv[1], \"decode\")) {\n    cout << alpha2i(argv[2]) << endl;\n  }\n  else if (!strcmp(argv[1], \"align\")) {\n    int input_num = alpha2i(argv[2]);\n    int hs = 7;\n    while(hs < input_num) hs = hs * 9 + 7;\n    string out1 = argv[2];\n    string out2 = i2alpha(hs - input_num);\n    string out3 = i2alpha(hs);\n    cout << out1 << \" + \" << out2 << \" = \" << out3 << endl;\n  }\n  else {\n    cout << \"undefined.\" <<endl;\n  }\n\n  return 0;\n}\n"}
{"id": 272, "is_generated": true, "language": "Java", "code": "import java.util.Random;\n\npublic class ChitsujoApp {\n  private static final String TARGET = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n\n  public static void main(String[] args) {\n    int maxCount = 0;\n    if (args.length > 0) {\n      try {\n        maxCount = Integer.parseInt(args[0]);\n      } catch (NumberFormatException e) {\n        maxCount = 0;\n      }\n    }\n    Random rand = new Random();\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 0; i < maxCount; i++) {\n      char c = rand.nextBoolean() ? '\u79e9' : '\u5e8f';\n      System.out.println(c);\n      sb.append(c);\n      if (sb.length() >= TARGET.length()) {\n        String tail = sb.substring(sb.length() - TARGET.length());\n        if (tail.equals(TARGET)) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 273, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length < 1) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n\n    int maxCount = 0;\n    // \u6570\u5024\u5909\u63db\u3092\u8a66\u307f\u308b\n    maxCount = Integer.parseInt(args[0]);\n\n    if (maxCount <= 0) {\n      System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n      return;\n    }\n\n    final String target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    StringBuilder history = new StringBuilder();\n    Random random = new Random();\n\n    for (int i = 0; i < maxCount; i++) {\n      // 0\u304b1\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u3066\u6587\u5b57\u3092\u6c7a\u3081\u308b\n      char c = random.nextInt(2) == 0 ? '\u79e9' : '\u5e8f';\n      System.out.println(c);\n      history.append(c);\n\n      // \u5c65\u6b74\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u9577\u3055\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u3089\u672b\u5c3e\u3092\u30c1\u30a7\u30c3\u30af\n      if (history.length() >= target.length()) {\n        String lastPart = history.substring(history.length() - target.length());\n        if (lastPart.equals(target)) {\n          System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n          return;\n        }\n      }\n    }\n\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 274, "is_generated": true, "language": "Python3", "code": "import sys\n\ndef alpha_to_num(s):\n    r = 0\n    for ch in s:\n        r = r * 9 + (ord(ch) - ord('A'))\n    return r\n\ndef num_to_alpha(num):\n    if num == 0:\n        return 'A'\n    rep = []\n    while num > 0:\n        rep.append(chr(ord('A') + (num % 9)))\n        num //= 9\n    return ''.join(reversed(rep))\n\ndef align_alpha(s):\n    carry = 0\n    res = []\n    for ch in reversed(s):\n        d = ord(ch) - ord('A')\n        val = d + carry\n        if val > 7:\n            carry = 1\n            add_digit = 7 + 9 - val\n        else:\n            carry = 0\n            add_digit = 7 - val\n        res.append(chr(ord('A') + add_digit))\n    if carry == 1:\n        res.append('A')\n    return ''.join(reversed(res))\n\ndef main(argv):\n    cmd = argv[0]\n    arg = argv[1]\n    if cmd == 'decode':\n        print(alpha_to_num(arg))\n    elif cmd == 'encode':\n        print(num_to_alpha(int(arg)))\n    else:\n        add = align_alpha(arg)\n        print(f\"{arg} + {add} = {'H'*len(arg)}\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 275, "is_generated": true, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  // \u5165\u529b\u306e\u6570\u3092\u53d6\u5f97\n  if (argc != 2) {\n    printf(\"\u5f15\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\\n\");\n    return 1;\n  }\n\n  int limit = atoi(argv[1]);\n  if (limit < 0 || limit > 10000) {\n    printf(\"\u5f15\u6570\u306f0\u304b\u308910000\u306e\u7bc4\u56f2\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\\n\");\n    return 1;\n  }\n\n  // \u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\n  srand(time(NULL));\n  \n  // \u6587\u5b57\u5217\u3092\u69cb\u7bc9\n  const char *target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n  char output[10000] = \"\";\n  \n  for (int i = 0; i < limit; i++) {\n    // \u30e9\u30f3\u30c0\u30e0\u306b\u300c\u79e9\u300d\u307e\u305f\u306f\u300c\u5e8f\u300d\u3092\u53d6\u5f97\n    char ch = (rand() % 2) ? '\u79e9' : '\u5e8f';\n    printf(\"%c\\n\", ch);\n    \n    // \u51fa\u529b\u306b\u8ffd\u52a0\n    strncat(output, &ch, 1);\n    \n    // \u76ee\u6a19\u6587\u5b57\u5217\u304c\u73fe\u308c\u305f\u304b\u30c1\u30a7\u30c3\u30af\n    if (strstr(output, target) != NULL) {\n      printf(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\\n\");\n      return 0;\n    }\n  }\n\n  // \u5236\u9650\u306b\u9054\u3057\u305f\u5834\u5408\n  printf(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\\n\");\n  return 0;\n}"}
{"id": 276, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef convert_10_to_9(n):\n    base = 9                # \u57fa\u6570\n    x=\"\"\n    while n!=0:\n      x=str(n%abs(base))+x  # \u57fa\u6570\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u304c\u305d\u306e\u6841\u306e\u5024\n      n=n//abs(base)        # \u57fa\u6570\u3067\u5272\u3063\u3066\u5207\u308a\u6368\u3066\u308b\n    if x==\"\":\n      return 0\n    else:\n      return x\n\ndef convert_9_to_10(n):\n    base = 9                # \u57fa\u6570\n    n.reverse()\n    x = 0\n    for i in range(len(n)):\n      x += int(n[i]) * base**i\n    return x\n\ndef main(argv):\n    rule_list = ['A','B','C','D','E','F','G','H','I']   # \u6570\u5b57\u3068\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5bfe\u5fdc\u30ea\u30b9\u30c8\n    H_index = 7       # H\u306e\u5bfe\u5fdc\u95a2\u4fc2\n\n    mode = argv[0]\n    obj = argv[1]\n    \n    if mode == \"encode\":\n      obj = int(obj)                      # int\u578b\u3078\u5909\u63db\n      num_9 = str(convert_10_to_9(obj))   # 10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db\n      ans = []                            # \u7b54\u3048\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n      for i in num_9:\n        ans.append(rule_list[int(i)])     # \u4e00\u6841\u305a\u3064\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u5909\u63db\u3057\uff0c\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\n      print(\"\".join(ans))                 # \u6700\u5f8c\u306b\u7d50\u5408\u3057\u3066\u8868\u793a\n    if mode == \"decode\":\n      ans = []                            # \u7b54\u3048\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n      for i in obj:\n        ans.append(str(rule_list.index(i))) # \u4e00\u6587\u5b57\u305a\u3064\u6570\u5b57\u306b\u5909\u63db\u3057\uff0c\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\n      ans = convert_9_to_10(ans)            # 9\u9032\u6570\u309210\u9032\u6570\u306b\u5909\u63db\n      print(ans)\n    if mode == \"align\":\n      num1 = [] # \u8db3\u3055\u308c\u308b\u6570(\u5165\u529b)\n      num2 = [] # \u8db3\u3059\u6570\n      for i in obj:\n        num1.append(str(rule_list.index(i))) # \u4e00\u6587\u5b57\u305a\u3064\u6570\u5b57\u306b\u5909\u63db\u3057\uff0c\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\n      ans = ['7'] * (len(num1)+1)\n      ans = int(\"\".join(ans))\n      num1 = int(\"\".join(num1))\n      num2 = ans - num1\n      \n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 277, "is_generated": true, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 2) {\n      System.out.println(\"Invalid arguments\");\n      return;\n    }\n    \n    String command = args[0];\n    String input = args[1];\n    \n    switch (command) {\n      case \"decode\":\n        System.out.println(decode(input));\n        break;\n      case \"encode\":\n        System.out.println(encode(Integer.parseInt(input)));\n        break;\n      case \"align\":\n        System.out.println(align(input));\n        break;\n      default:\n        System.out.println(\"Unknown command\");\n    }\n  }\n\n  private static int decode(String input) {\n    int result = 0;\n    for (char c : input.toCharArray()) {\n      result = result * 9 + (c - 'A');\n    }\n    return result;\n  }\n\n  private static String encode(int number) {\n    StringBuilder result = new StringBuilder();\n    do {\n      result.insert(0, (char) ('A' + number % 9));\n      number /= 9;\n    } while (number > 0);\n    return result.toString();\n  }\n\n  private static String align(String input) {\n    StringBuilder result = new StringBuilder();\n    for (char c : input.toCharArray()) {\n      result.append((char) ('H' - c + 'A'));\n    }\n    return input + \" + \" + result + \" = \" + \"H\".repeat(input.length());\n  }\n}"}
{"id": 278, "is_generated": true, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class RandomSequence {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"Usage: java RandomSequence <limit>\");\n      return;\n    }\n\n    int limit = Integer.parseInt(args[0]);\n    if (limit < 0 || limit > 10000) {\n      System.out.println(\"Please enter a number between 0 and 10000.\");\n      return;\n    }\n\n    Random rand = new Random();\n    String target = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\";\n    StringBuilder sequence = new StringBuilder();\n    String[] choices = {\"\u79e9\", \"\u5e8f\"};\n\n    for (int i = 0; i < limit; i++) {\n      String next = choices[rand.nextInt(2)];\n      System.out.println(next);\n      sequence.append(next);\n\n      if (sequence.lastIndexOf(target) != -1) {\n        System.out.println(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\");\n        return;\n      }\n    }\n\n    System.out.println(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\");\n  }\n}"}
{"id": 279, "is_generated": false, "language": "Python3", "code": "import sys\ndef Base_10_to_n(X, n):\n    X_dumy = X\n    out = ''\n    if X_dumy == 0:\n      out = str(0)\n      return out\n    while X_dumy>0:\n        out = str(X_dumy%n)+out\n        X_dumy = int(X_dumy/n)\n    return out\ndef Base_n_to_10(X,n):\n  out = 0\n  for i in range(1,len(str(X))+1):\n      out += int(X[-i])*(n**(i-1))\n  return out#int out\ndef decode(txt):\n  val = 0\n  for i in range(len(txt)):\n    val += (ord(txt[i]) - 97) * 9 ** (len(txt) - i -1)\n  return val\ndef encode(n):\n  n_str = Base_10_to_n(n, 9)\n  val = ''\n  for i in range(len(n_str)):\n    val += chr(int(n_str[i]) + 97).upper()\n  return val\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    # for v in argv:\n    #   i = 0\n    #   print(v)\n    #   if str(v[0]) == 'decode':\n    #     v = v.lower()\n    #     val = 0\n    #     # if v.startswith('a') and len(v) <= 1:\n    #     for i in range(len(v)):\n    #       val += (ord(v[i]) - 97) * 10 ** (len(v) - i)\n    #     # print(val)\n    #   elif i == 'encode':\n    #     pass\n    #   elif i == 'align':\n    #     pass\n    #   # print(\"argv[{0}]: {1}\".format(i, v))\n  v = argv\n  if v[0] == 'decode':\n    # print('decode')\n    \n    txt = v[1].lower()\n    val = decode(txt)\n    print(val)\n  elif v[0]== 'encode':\n    n = int(v[1])\n    val = encode(n)\n    print(val)\n  elif v[0] == 'align':\n    txt = v[1].lower()\n    val = decode(txt)\n    l = len(str(val))\n    if str(val).startswith('8'):\n      l += 1\n    val_large = Base_n_to_10(int('7'*l), 9)\n    ans = encode(val_large - val)\n    # print(val)\n    # print(val_large)\n    print(v[1] + ' + ' + ans + ' = ' + ('H'*l))\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 280, "is_generated": true, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\n// Encode a decimal number into an \"Alphabet number\" (base-9 representation).\nstring encodeAlphabetNumber(long long num) {\n    if (num == 0) return \"A\";\n    string result = \"\";\n    while (num > 0) {\n        char encodedChar = 'A' + (num % 9);\n        result = encodedChar + result;\n        num /= 9;\n    }\n    return result;\n}\n\n// Decode an \"Alphabet number\" (base-9) into a decimal number.\nlong long decodeAlphabetNumber(const string& alpha) {\n    long long value = 0;\n    for (size_t i = 0; i < alpha.size(); ++i) {\n        value = value * 9 + (alpha[i] - 'A');\n    }\n    return value;\n}\n\n// Compute \"align\" to make the sum of the given number and an unknown equal to all 'H'.\nstring alignAlphabetNumber(const string& alpha) {\n    size_t length = alpha.size(); // Determine target length\n    string target(length, 'H');\n    long long currentValue = decodeAlphabetNumber(alpha);\n    long long targetValue = decodeAlphabetNumber(target);\n    long long complementValue = targetValue - currentValue;\n    string complement = encodeAlphabetNumber(complementValue);\n    return alpha + \" + \" + complement + \" = \" + target;\n}\n\nint main(int argc, char* argv[]) {\n    // Check if the correct number of arguments is provided.\n    if (argc < 3) return 1;\n\n    string command = argv[1];\n    string parameter = argv[2];\n\n    if (command == \"encode\") {\n        long long decimalValue = stoll(parameter);\n        cout << encodeAlphabetNumber(decimalValue) << endl;\n    } else if (command == \"decode\") {\n        cout << decodeAlphabetNumber(parameter) << endl;\n    } else if (command == \"align\") {\n        cout << alignAlphabetNumber(parameter) << endl;\n    } else {\n        cerr << \"Invalid command.\" << endl;\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 281, "is_generated": false, "language": "Python3", "code": "import sys\n\n\ndef decode(s):\n    return sum([(ord(s) - 65) * 9**i for i, s in enumerate(s[::-1])])\n\n\ndef encode(s):\n    tmp = int(s)\n    data = []\n    while tmp > 0:\n        tmp, m = tmp // 9, tmp % 9\n        data.append(m)\n    if len(data) == 0:\n        return 'A'\n    results = [chr(i + 65) for i in data[::-1]]\n    return ''.join(results)\n\n\ndef makeH(n):\n    return decode('H' * (n + 1))\n\n\ndef align(s):\n    x = decode(s)\n    n = 0\n    while x > makeH(n):\n        n += 1\n    y = makeH(n)\n    z = y - x\n    return '{} + {} = {}'.format(encode(x), encode(z), encode(y))\n\n\n\nif __name__ == '__main__':\n    subcode = sys.argv[1]\n    number = sys.argv[2]\n    if subcode == 'decode':\n        print(decode(number))\n    elif subcode == 'encode':\n        print(encode(number))\n    elif subcode == 'align':\n        print(align(number))\n"}
{"id": 282, "is_generated": false, "language": "Python3", "code": "import sys\n\ndef getInfo(argv):\n  func_type = argv[0]\n  func_num = argv[1]\n  return func_type, func_num\n\ndef exchange(tmp):\n  if tmp == 'A':\n    return 0\n  elif tmp == 'B':\n    return 1\n  elif tmp == 'C':\n    return 2  \n  elif tmp == 'D':\n    return 3\n  elif tmp == 'E':\n    return 4 \n  elif tmp == 'F':\n    return 5\n  elif tmp == 'G':\n    return 6 \n  elif tmp == 'H':\n    return 7\n  elif tmp == 'I':\n    return 8 \n  elif tmp == '0':\n    return 'A'\n  elif tmp == '1':\n    return 'B' \n  elif tmp == '2':\n    return 'C'\n  elif tmp == '3':\n    return 'D'    \n  elif tmp == '4':\n    return 'E'\n  elif tmp == '5':\n    return 'F' \n  elif tmp == '6':\n    return 'G'\n  elif tmp == '7':\n    return 'H'  \n  elif tmp == '8':\n    return 'I'  \n\ndef div(num, mod):\n  syou = int(num / mod)\n  amari = num - syou * mod\n\n  return syou, amari\n\ndef decode(num):\n  result = 0\n  num = list(num)\n  for i, v in enumerate(num):\n    result += exchange(v) * 9 ** (len(num) - 1 - i)\n  \n  return result\n\ndef encode(num):\n  num = int(num)\n  count = 0\n  while True:\n    if num >= 9 ** count:\n      count += 1\n    else:\n      count -= 1\n      break\n\n  result = ''\n  amari = num\n  while count > -1:\n    syou, amari = div(amari, 9**count)\n    result = result + str(exchange(str(int(syou))))\n    count -= 1\n\n  return result\n\ndef align(num):\n  if num == 'A':\n    return 'A + H = H'\n  else:\n    num10 = decode(num)\n    count, target = -1, 0\n    while True:\n      count += 1\n      target = target + (9**count) * 8\n      if num10 < target:\n        break\n\n      target = target + (9**(count+1)) * 8\n\n    diff = target - num10\n    rrr = encode(diff)\n\n    return num + ' + ' + str(rrr) + ' = ' + encode(diff)\n\nif __name__ == '__main__':\n    func_type, func_num = getInfo(sys.argv[1:])\n    if func_type == 'decode':\n      print(decode(func_num))\n    elif func_type == 'encode':\n      if func_num == '0':\n        print('A')\n      else:\n        print(encode(func_num))\n    else:\n      print(align(func_num))\n"}
{"id": 283, "is_generated": false, "language": "PHP", "code": "<?php namespace Track;\n\nfunction decode($alpha, $arr) {\n    $str_arr = str_split($alpha);\n    $newStr = \"\";\n\n    foreach ($str_arr as $s) {\n        $newStr .= $arr[$s];\n    }\n    $nona = base_convert($newStr, 9, 10);\n    return $nona;\n}\n\nfunction encode($num, $arr) {\n    $non = base_convert($num, 10, 9);\n    $str_arr = str_split($non);\n    $str = \"\";\n    foreach ($str_arr as $s) {\n        $str .= array_search($s, $arr);\n    }\n    return $str;\n}\n\nfunction run ($argc, $argv)\n{\n    $assoc = [\n        \"A\" => \"0\",\n        \"B\" => \"1\",\n        \"C\" => \"2\",\n        \"D\" => \"3\",\n        \"E\" => \"4\",\n        \"F\" => \"5\",\n        \"G\" => \"6\",\n        \"H\" => \"7\",\n        \"I\" => \"8\",\n    ];\n\n    if ($argv[0] == \"decode\") {\n        printf(\"%s\\n\", decode($argv[1], $assoc));\n    } else if ($argv[0] == \"encode\") {\n        printf(\"%s\\n\", encode($argv[1], $assoc));\n    } else if ($argv[0] == \"align\") {\n        $decoded = decode($argv[1], $assoc);\n        //\u3053\u3053\u304b\u3089\n\n        $str_arr = str_split($decoded);\n        $aaa = \"\";\n        foreach ($str_arr as $i => $nn) {\n            if ($nn == 8) {\n                $last = substr($aaa, -1);\n                substr_replace($aaa, $last + 1, -1);\n                $aaa .= 8;\n            } else {\n                $a = 7 - $nn;\n                $aaa .= $a;\n            }\n        }\n        printf(\"%s\\n\", encode($aaa, $assoc));\n        \n    }\n\n\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 284, "is_generated": true, "language": "Python3", "code": "import sys\nimport random\n\ndef main(max_output):\n    # \u300c\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\u300d\u306e\u30d5\u30ec\u30fc\u30ba\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\n    target_sequence = \"\u79e9\u5e8f\u79e9\u79e9\u5e8f\u79e9\u5e8f\"\n    generated_sequence = \"\"\n    \n    for _ in range(max_output):\n        char = random.choice(['\u79e9', '\u5e8f'])\n        print(char)\n        generated_sequence += char\n        \n        if target_sequence in generated_sequence:\n            print(\"\u30d4\u30e5\u30fc\u30c3\u266a\u30d4\u30e5\u30fc\u30c3\u266a\")\n            return\n    \n    print(\"\u56e3\u4f53\u884c\u52d5\u3092\u4e71\u3059\u306a!\")\n\nif __name__ == \"__main__\":\n    try:\n        limit = int(sys.argv[1])\n        if 0 <= limit <= 10000:\n            main(limit)\n        else:\n            print(\"Input should be between 0 and 10000.\")\n    except (IndexError, ValueError):\n        print(\"Usage: python3 your_script.py <number>\")"}
