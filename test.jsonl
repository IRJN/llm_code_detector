{"id": 285, "language": "Python3", "code": "import sys\nimport argparse\n\ndef is_ascii(s):\n    return all(ord(c) < 128 for c in s)\ndef main(argv): \n  for INPUT in sys.argv[1:]:\n    if(INPUT.isdigit() and is_ascii(INPUT)):\n      if(int(INPUT) >= 0 and int(INPUT) <= 1000):\n        if(int(INPUT)%3 == 0 and INPUT.find(\"3\") != -1):\n          print(\"dumb\")\n        elif(INPUT.find(\"3\") != -1):\n          print(\"stupid\")\n        elif(int(INPUT)%3 == 0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n    else:\n      print(\"invalid\")  \n  \n\nif __name__ == '__main__':\n  main(sys.argv)\n"}
{"id": 286, "language": "Python3", "code": "import sys\nimport json\n\ndef predict_next_robot_hand(history):\n    memory = {}\n    robot_moves = [0, 1, 2]\n\n    for i in range(3, len(history)):\n        last_3_moves = tuple(record[\"robot\"] for record in history[i-3:i])\n        opponent_move = history[i-1][\"you\"]\n        key = (last_3_moves, opponent_move)\n\n        if key not in memory:\n            memory[key] = 0\n        else:\n            memory[key] = (memory[key] + 1) % 3\n\n        robot_moves.append(memory[key])\n\n    last_3_moves = tuple(robot_moves[-3:])\n    opponent_move = history[-1][\"you\"]\n    future_key = (last_3_moves, opponent_move)\n\n    if future_key not in memory:\n        return 0\n    else:\n        return (memory[future_key] + 1) % 3\n\ndef main(argv):\n    input_file_path = argv[0]\n\n    with open(input_file_path, 'r') as input_file:\n        game_history = json.load(input_file)\n\n    next_robot_hand = predict_next_robot_hand(game_history)\n    winning_response = (next_robot_hand + 1) % 3\n    print(winning_response)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 287, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u30ed\u30fc\u30de\u6570\u5b57\u5909\u63db\uff08\u521d\u5fc3\u8005\u30b9\u30bf\u30a4\u30eb\uff09\n    int n = Integer.parseInt(args[0]);\n    String[] M = {\"\", \"M\", \"MM\", \"MMM\"};\n    String[] C = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    String[] X = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    String[] I = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n    \n    String res = M[n/1000] + C[(n%1000)/100] + X[(n%100)/10] + I[n%10];\n    System.out.println(res);\n  }\n}"}
{"id": 288, "language": "C++", "code": "#include <iostream>\n#include <queue>\n#include <random>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n        return 0;\n    }\n    int cnt = atoi(argv[1]);\n    if (cnt <= 0) {\n        cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n        return 0;\n    }\n    vector<string> seq = {\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"};\n    queue<string> recent;\n    mt19937 rng(random_device{}());\n    uniform_int_distribution<int> dist(0, 1);\n\n    for (int i = 0; i < cnt; ++i) {\n        string s = (dist(rng) == 0) ? \"\u30c9\" : \"\u30ab\";\n        cout << s << endl;\n        recent.push(s);\n        if (recent.size() > 7) recent.pop();\n        if (recent.size() == 7) {\n            int j = 0;\n            bool match = true;\n            for (auto it = recent.front(); match && !recent.empty(); recent.pop(), j++)\n                if (it != seq[j]) match = false;\n        }\n        if (recent.size() == 7) {\n            // \u30c1\u30a7\u30c3\u30af\n            int idx = 0;\n            bool ok = true;\n            queue<string> tmp = recent;\n            while (!tmp.empty()) {\n                if (tmp.front() != seq[idx]) ok = false;\n                tmp.pop();\n                idx++;\n            }\n            if (ok) {\n                cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n                return 0;\n            }\n        }\n    }\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n    return 0;\n}"}
{"id": 289, "language": "PHP", "code": "<?php\n$command = $argv[1];\n$input_file = $argv[2];\n$output_file = $argv[3];\n\n$file = file_get_contents($input_file);\n//print_r(\"Start----\\n\".$file.\"\\n---end---\");\nif($command == \"count\")\n{\n  $count_alphabets = array(\" \" => 0, \"a\" => 0, \"b\" =>0, \"c\" => 0, \"d\" => 0, \"e\" => 0, \"f\" => 0, \"g\" => 0, \"h\" => 0, \"i\" => 0, \"j\" => 0, \"k\" => 0, \"l\"=> 0, \"m\" => 0, \"n\" => 0, \"o\" => 0, \"p\" => 0, \"q\" => 0, \"r\" => 0, \"s\" => 0, \"t\" => 0, \"u\" => 0, \"v\" => 0, \"w\" => 0, \"x\" => 0, \"y\" => 0, \"z\" => 0, \"A\" => 0, \"B\" => 0, \"C\" => 0, \"D\" => 0, \"E\" => 0, \"F\" => 0, \"G\" => 0, \"H\" => 0, \"I\" => 0, \"J\" => 0, \"K\" => 0, \"L\" => 0, \"M\" => 0, \"N\" => 0, \"O\" => 0, \"P\" => 0, \"Q\" => 0, \"R\" => 0, \"S\" => 0, \"T\" => 0, \"U\" => 0, \"V\" => 0, \"W\" => 0, \"X\" => 0, \"Y\" => 0, \"Z\" => 0);\n  for($i =0;$i< strlen($file);$i++)\n  {\n    if($file[$i] == \" \")\n    {\n      $count_alphabets[\" \"]++;\n    }else if ($file[$i] == \"a\") {\n      $count_alphabets[\"a\"]++;\n    }else if ($file[$i] == \"b\") {\n      $count_alphabets[\"b\"]++;\n    }else if ($file[$i] == \"c\") {\n      $count_alphabets[\"c\"]++;\n    }else if ($file[$i] == \"d\") {\n      $count_alphabets[\"d\"]++;\n    }else if ($file[$i] == \"e\") {\n      $count_alphabets[\"e\"]++;\n    }else if ($file[$i] == \"f\") {\n      $count_alphabets[\"f\"]++;\n    }else if ($file[$i] == \"g\") {\n      $count_alphabets[\"g\"]++;\n    }else if ($file[$i] == \"h\") {\n      $count_alphabets[\"h\"]++;\n    }else if ($file[$i] == \"i\") {\n      $count_alphabets[\"i\"]++;\n    }else if ($file[$i] == \"j\") {\n      $count_alphabets[\"j\"]++;\n    }else if ($file[$i] == \"k\") {\n      $count_alphabets[\"k\"]++;\n    }else if ($file[$i] == \"l\") {\n      $count_alphabets[\"l\"]++;\n    }else if ($file[$i] == \"m\") {\n      $count_alphabets[\"m\"]++;\n    }else if ($file[$i] == \"n\") {\n      $count_alphabets[\"n\"]++;\n    }else if ($file[$i] == \"o\") {\n      $count_alphabets[\"o\"]++;\n    }else if ($file[$i] == \"p\") {\n      $count_alphabets[\"p\"]++;\n    }else if ($file[$i] == \"q\") {\n      $count_alphabets[\"q\"]++;\n    }else if ($file[$i] == \"r\") {\n      $count_alphabets[\"r\"]++;\n    }else if ($file[$i] == \"s\") {\n      $count_alphabets[\"s\"]++;\n    }else if ($file[$i] == \"t\") {\n      $count_alphabets[\"t\"]++;\n    }else if ($file[$i] == \"u\") {\n      $count_alphabets[\"u\"]++;\n    }else if ($file[$i] == \"v\") {\n      $count_alphabets[\"v\"]++;\n    }else if ($file[$i] == \"w\") {\n      $count_alphabets[\"w\"]++;\n    }else if ($file[$i] == \"x\") {\n      $count_alphabets[\"x\"]++;\n    }else if ($file[$i] == \"y\") {\n      $count_alphabets[\"y\"]++;\n    }else if ($file[$i] == \"z\") {\n      $count_alphabets[\"z\"]++;\n    }else if ($file[$i] == \"A\") {\n      $count_alphabets[\"A\"]++;\n    }else if ($file[$i] == \"B\") {\n      $count_alphabets[\"B\"]++;\n    }else if ($file[$i] == \"C\") {\n      $count_alphabets[\"C\"]++;\n    }else if ($file[$i] == \"D\") {\n      $count_alphabets[\"D\"]++;\n    }else if ($file[$i] == \"E\") {\n      $count_alphabets[\"E\"]++;\n    }else if ($file[$i] == \"F\") {\n      $count_alphabets[\"F\"]++;\n    }else if ($file[$i] == \"G\") {\n      $count_alphabets[\"G\"]++;\n    }else if ($file[$i] == \"H\") {\n      $count_alphabets[\"H\"]++;\n    }else if ($file[$i] == \"I\") {\n      $count_alphabets[\"I\"]++;\n    }else if ($file[$i] == \"J\") {\n      $count_alphabets[\"J\"]++;\n    }else if ($file[$i] == \"K\") {\n      $count_alphabets[\"K\"]++;\n    }else if ($file[$i] == \"L\") {\n      $count_alphabets[\"L\"]++;\n    }else if ($file[$i] == \"M\") {\n      $count_alphabets[\"M\"]++;\n    }else if ($file[$i] == \"N\") {\n      $count_alphabets[\"N\"]++;\n    }else if ($file[$i] == \"O\") {\n      $count_alphabets[\"O\"]++;\n    }else if ($file[$i] == \"P\") {\n      $count_alphabets[\"P\"]++;\n    }else if ($file[$i] == \"Q\") {\n      $count_alphabets[\"Q\"]++;\n    }else if ($file[$i] == \"R\") {\n      $count_alphabets[\"R\"]++;\n    }else if ($file[$i] == \"S\") {\n      $count_alphabets[\"S\"]++;\n    }else if ($file[$i] == \"T\") {\n      $count_alphabets[\"T\"]++;\n    }else if ($file[$i] == \"U\") {\n      $count_alphabets[\"U\"]++;\n    }else if ($file[$i] == \"V\") {\n      $count_alphabets[\"V\"]++;\n    }else if ($file[$i] == \"W\") {\n      $count_alphabets[\"W\"]++;\n    }else if ($file[$i] == \"X\") {\n      $count_alphabets[\"X\"]++;\n    }else if ($file[$i] == \"Y\") {\n      $count_alphabets[\"Y\"]++;\n    }else if ($file[$i] == \"Z\") {\n      $count_alphabets[\"Z\"]++;\n    }\n    }\n    $new_file = fopen($output_file, 'w');\n    fwrite($new_file, json_encode($count_alphabets));\n    fclose($new_file);\n}\nelse if($command == \"decrypt\")\n{\n  \n  $value = strpos($file,',');\n  if($value ===false)\n  {\n    $value = strpos($file, ':');\n    if($value === false)\n    {\n      $value = strpos($file,';');\n\n    }\n  }\n  $char_at = $file[$value +1];\n  $max = ord($file[0]);\n  for($i=0;$i<strlen($file); $i++)\n  {\n    if($file[$i]== $char_at)\n    {\n      $file[$i] =\" \";\n    }\n    else if($file[$i] == \" \")\n    {\n      $file[$i]=$char_at;\n\n    }\n    \n    }\n    for ($i = 0;$i < strlen($file)-2;$i++){\n      if ($file[$i] == \" \" && $file[$i+2] == \" \") {\n     \n      }\n    }\n    $new_file = fopen($output_file, 'w');\n    fwrite($new_file,$file);\n    fclose($new_file);\n\n  }\n  else if ($command == \"space\"){\n    $output_data = array(\"char\" => \"\");\n    $value = strpos($file,',');\n    if($value === false){\n      $value = strpos($file,':');\n      if($value === false){\n        $value = strpos($file,';');\n\n      }\n    \n    }\n    $char_at = $file[$value+1];\n    $output_data[\"char\"]= $char_at;\n    $new_file = fopen($output_file, 'w');\n    fwrite($new_file,json_encode($output_data));\n    fclose($new_file);\n  }\n\n?>"}
{"id": 290, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean includes1(int b)\n  {\n    while(b!=0)\n    {\n      if(b%10==3)\n      return true;\n      else\n      return includes1(b/10);\n    }\n    return false;\n  }\n  public static void main(String[]args){\n    int size=args.length;\n    int i=0;\n    while(i<size){\n      String data=args[i++];\n      Integer num=null;\n      try{\n        num=Integer.parseInt(data);\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(num<0||num>1000){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean inc1=includes1(num);\n      if(inc1&&num%3==0)\n      System.out.println(\"dumb\");\n      else if(inc1)\n      System.out.println(\"stupid\");\n      else if(num%3==0)\n      System.out.println(\"idiot\");\n      else\n      System.out.println(\"smart\");\n    }\n  }\n}\n          \n"}
{"id": 291, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i= 0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n         int number=Integer.parseInt(args[i]);\n         if (number<0 || number>1000){\n         System.out.println(\"invalid\");\n      }\n      \n         else if(number%3==0 && args[i].contains(\"3\"))\n    {\n      System.out.println(\"dumb\");\n    } else if(number%3==0){\n     System.out.println(\"idiot\");\n    } else if(args[i].contains(\"3\"))\n    {\n      System.out.println(\"stupid\");\n    } else\n    {\n      System.out.println(\"smart\");\n    }}\n      else\n    {\n      System.out.println(\"invalid\");\n    }\n  }\n\n  }\n\n      }\n"}
{"id": 292, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n\t\tfor (int i = 0; i < args.length; i++) \n    {\n      int count3=0;\n      String stringArgs=args[i];\n      int count=0;\n      boolean hasDigit=true;\n      for(char ch: stringArgs.toCharArray())\n      {\n        if(!Character.isDigit(ch))\n        {\n          hasDigit=false;\n        }\n        if(ch=='3')\n        {\n          count3=count3+1;\n        }\n      }\n\t\t\tif(hasDigit==true)\n      {\n        int num=Integer.parseInt(stringArgs);\n        if(num%3==0 &&count3!=0)\n        {\n          System.out.println(\"dumb\");\n\n        }\n        else if(num%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(count3!=0)\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 293, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n\nint includes3(const char* numstr) {\n  for (int i = 0; numstr[i]; i++)\n    if (numstr[i] == '3') return 1;\n  return 0;\n}\n\nint is_number(const char* s) {\n  if (!*s) return 0;\n  while (*s)\n    if (!isdigit((unsigned char)*s++)) return 0;\n  return 1;\n}\n\n// 3 idiots main\nint main(int argc, char* argv[]) {\n  for (int i = 1; i < argc; ++i) {\n    if (!is_number(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n < 0 || n > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = n % 3 == 0;\n    int has3 = includes3(argv[i]);\n    if (div3 && has3)\n      puts(\"dumb\");\n    else if (div3)\n      puts(\"idiot\");\n    else if (has3)\n      puts(\"stupid\");\n    else\n      puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 294, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class Runner {\n\n  private static String runLogic(int inputNum) {\n    if (inputNum < 0 || inputNum > 1000) return \"invalid\";\n    boolean isMultipleOf3 = (inputNum % 3 == 0);\n    boolean containsDigit3 = String.valueOf(inputNum).contains(\"3\");\n    if (isMultipleOf3 && containsDigit3) return \"dumb\";\n    if (isMultipleOf3) return \"idiot\";\n    if (containsDigit3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] params) {\n    for (String param : params) {\n      Scanner sc = new Scanner(param);\n      if (sc.hasNextInt()) {\n        System.out.println(runLogic(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 295, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// R:0 S:1 P:2\n#define MAX_RECORDS 10000\n\ntypedef struct {\n    int robot;\n    int you;\n} RpsRecord;\n\n// Structure for parameter key\ntypedef struct {\n    int r1, r2, r3, you;\n    int count;\n    int last_move;\n} PatternCount;\n\n#define MAX_PATTERNS 4000\n\nint win[] = {2,0,1}; // hand that beats given: 0(rock)->2(paper), 1(scissors)->0(rock), 2(paper)->1(scissors)\n\nint parse_json(const char *fname, RpsRecord *records, int *cnt) {\n    FILE *fp = fopen(fname, \"r\");\n    if (!fp) return 1;\n    char buf[1024];\n    int n = 0;\n    while (fgets(buf, sizeof(buf), fp)) {\n        char *p = buf;\n        while(*p) {\n            if (strncmp(p, \"\\\"robot\\\"\", 7)==0) {\n                int robot, you;\n                // parse: \"robot\": <robot>, \"you\": <you>\n                while (*p && *p!=':') p++;\n                p++;\n                sscanf(p, \"%d\", &robot);\n                char *y = strstr(p, \"\\\"you\\\"\");\n                if (!y) break;\n                p = y;\n                while(*p && *p!=':') p++;\n                p++;\n                sscanf(p, \"%d\", &you);\n                records[n].robot = robot;\n                records[n].you = you;\n                n++;\n                break;\n            }\n            p++;\n        }\n    }\n    fclose(fp);\n    *cnt = n;\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n\n    RpsRecord records[MAX_RECORDS];\n    int cnt = 0;\n\n    if (parse_json(argv[1], records, &cnt)) {\n        fprintf(stderr, \"parse_json error\\n\");\n        return 1;\n    }\n    if (cnt < 4) {\n        printf(\"0\\n\"); // default\n        return 0;\n    }\n\n    PatternCount patterns[MAX_PATTERNS];\n    int patN = 0;\n\n    for (int i = 3; i < cnt; i++) {\n        int r1 = records[i-3].robot;\n        int r2 = records[i-2].robot;\n        int r3 = records[i-1].robot;\n        int you = records[i-1].you;\n        int rob = records[i].robot;\n\n        int found = 0;\n        for (int j = 0; j < patN; j++) {\n            if (patterns[j].r1 == r1 && patterns[j].r2 == r2 && patterns[j].r3 == r3 && patterns[j].you == you) {\n                patterns[j].count++;\n                patterns[j].last_move = rob;\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            patterns[patN].r1 = r1; patterns[patN].r2 = r2; patterns[patN].r3 = r3; patterns[patN].you = you;\n            patterns[patN].count = 1;\n            patterns[patN].last_move = rob;\n            patN++;\n        }\n    }\n    int fr1 = records[cnt-3].robot;\n    int fr2 = records[cnt-2].robot;\n    int fr3 = records[cnt-1].robot;\n    int fyou = records[cnt-1].you;\n\n    int pred = -1, cyc = 0;\n\n    for (int j = 0; j < patN; j++) {\n        if (patterns[j].r1 == fr1 && patterns[j].r2 == fr2 && patterns[j].r3 == fr3 && patterns[j].you == fyou) {\n            cyc = patterns[j].count;\n            pred = patterns[j].last_move;\n            break;\n        }\n    }\n    int next_r;\n    if (pred == -1) next_r = 0; // fallback\n    else next_r = (pred + 1)%3;\n    int my = win[next_r];\n    printf(\"%d\\n\", my);\n    return 0;\n}"}
{"id": 296, "language": "Python3", "code": "import sys\n\ndef is_safe(queens, row, col):\n    '''This function verifies whether each queen placed by the program is a valid move.'''\n    for q in range(len(queens)):\n        r = queens[q][0]\n        c = queens[q][1]\n\n        # check row\n        if r == row:\n            return False\n\n        # check diagonal by slope\n        # if the the slope is 1 or -1, then they are in the same diagonal line\n        if abs((r-row) / (c-col)) == 1:\n            return False\n\n    return True\n\ndef place_queen(solutions, n, queens, col):\n    '''This function recursively searches through the state space tree, in indepth fashion, while it tries to place queens in a column one by one, starting from the left most column.'''\n    if col >= n: \n        solutions.append(queens.copy()) # collect each valid solution\n        return True\n    \n    result = False\n    for row in range(n): \n        if is_safe(queens, row, col):\n            queens.append((row, col))\n            result = place_queen(solutions, n, queens, col+1) or result\n            queens.pop() # backtracking\n\n    return result\n\ndef solve_nqueen(n):\n    '''This function initiates the backtracking search for all solutions of N-Queen.'''\n    solutions = []\n    queens = []\n    if place_queen(solutions, n, queens, 0) and (not n <= 0):\n        return solutions\n    else:\n        return False\n\ndef main(argv):\n    for i, v in enumerate(argv):\n        f = open(argv[0], \"r\")\n        inputs = list(f.read().split('\\n'))\n        n = 8\n        solutions = solve_nqueen(n)\n        if solutions:\n            for s in solutions:\n                result = True\n                res_dict = dict()\n                for j in s:\n                    res_dict[str(j[0]) + ' ' + str(j[1])] = True\n\n                for q in inputs[1:-1]:\n                    if q not in res_dict:\n                        result = False \n                        break\n\n                if result:\n                    # initialize 2D board\n                    board = [['.']*n for i in range(n)] \n\n                    # mark the coordinates\n                    for c in s:\n                        row = c[0]\n                        col = c[1]\n                        board[row][col] = 'Q'\n\n                    # print the solution\n                    for r in board:\n                        print(''.join(r))\n                    \n                    break\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 297, "language": "Python3", "code": "import json\nimport sys\n\ndef next_move(history, last_opponent):\n    cycle_length = 3\n    play_index = len(history) % cycle_length  # Cycle behavior\n    return (play_index + 1) % cycle_length\n\ndef main():\n    robot_history = [0, 1, 2]  # Start with rock, scissors, paper\n    last_human_move = None\n\n    with open(sys.argv[1]) as file:\n        games = json.load(file)\n        \n        for game in games:\n            last_human_move = game['you']\n            robot_history.append(game['robot'])\n            if len(robot_history) > 3:\n                robot_history.pop(0)\n\n    result = next_move(robot_history, last_human_move)\n    print(result)\n\nif __name__ == '__main__':\n    main()"}
{"id": 298, "language": "Java", "code": "public class ThreeBakaAlgorithm {\n  public static void main(String[] args) {\n    for (String input : args) {\n      System.out.println(eval(input));\n    }\n  }\n\n  static String eval(String s) {\n    int val;\n    try {\n      val = Integer.parseInt(s);\n    } catch (Exception e) {\n      return \"invalid\";\n    }\n    if (val < 0 || val > 1000) return \"invalid\";\n\n    boolean multiple3 = val % 3 == 0;\n    boolean has3 = s.indexOf('3') != -1;\n\n    if (multiple3 && has3) return \"dumb\";\n    if (multiple3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 299, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n\n// Generalized function to check if a number contains a specific digit.\nbool check_for_digit(int num, int digit_to_find) {\n    if (num == 0) return false; // 0 doesn't contain any digit other than itself\n    while (num > 0) {\n        if (num % 10 == digit_to_find) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\n// Determine the output string based on the 3 Idiots Algorithm\nconst char* determine_output(int value_to_process) {\n    bool is_divisible_by_three = (value_to_process % 3 == 0);\n    bool contains_digit_three = check_for_digit(value_to_process, 3); // Use general function for '3'\n\n    if (is_divisible_by_three && contains_digit_three) {\n        return \"dumb\";\n    } else if (is_divisible_by_three) {\n        return \"idiot\";\n    } else if (contains_digit_three) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int idx = 1; idx < argc; ++idx) {\n    char *end_pointer_for_val;\n    long current_value_long = strtol(argv[idx], &end_pointer_for_val, 10);\n\n    // Validate parsing success\n    if (*end_pointer_for_val != '\\0' || end_pointer_for_val == argv[idx]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Validate numerical range\n    if (current_value_long < 0 || current_value_long > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", determine_output((int)current_value_long));\n  }\n  return 0;\n}"}
{"id": 300, "language": "C++", "code": "#include <iostream>\n#include<cassert>\nusing namespace std;\n\n#define N 8\n#define FREE -1\n#define NOT_FREE 1\n\nint row[N],col[N],dpos[2*N-1],dneg[2*N-1];\nbool X[N][N];\n\nvoid initialize()\n{\n    for(int i=0;i<N;i++){row[i]=FREE,col[i]=FREE;}\n    for(int i=0;i<2*N-1;i++){dpos[i]=FREE;dneg[i]=FREE;}\n}\n\nvoid printBoard()\n{\n    for(int i=0;i<N;i++)\n    {\n        for(int j=0;j<N;j++)\n        {\n            if (X[i][j])\n            {\n                if(row[i]!=j)\n                return;\n            }         \n        }\n    }   \n    for(int i=0;i<N;i++)\n    {\n        for(int j=0;j<N;j++)\n        {\n            cout<<((row[i]==j)? \"Q\":\".\");\n        }\n        cout<<endl;\n    }\n}\n\nvoid recursive(int i)\n{\n    if(i==N)\n    {\n        printBoard();\n        return;\n    }\n    for(int j=0;j<N;j++) \n    {\n        if(NOT_FREE==col[j]||NOT_FREE==dpos[i+j]||NOT_FREE==dneg[i-j+N-1])\n            continue;\n        row[i]=j;col[j]=dpos[i+j]=dneg[i-j+N-1]=NOT_FREE; \n        recursive(i+1);\n        row[i]=col[j]=dpos[i+j]=dneg[i-j+N-1]=FREE;\n    }\n}\n\n\nint main(int argc, char *argv[]) {\n  \n  initialize();\n    for(int i=0;i<N;i++)\n        for(int j=0;j<N;j++)\n            X[i][j]=false; \n\n  FILE *fp;\n  char str[10];\n  fp = fopen(argv[1], \"r\");\n  if (fp == NULL) {\n    printf(\"%s file not open!\\n\", argv[1]);\n    return -1;\n  }\n\n  int i=0;\n  int r,c;\n  while (fgets(str, 10, fp) != NULL) {\n    if(i==0)\n      i++;\n    else\n    {\n      r=str[0]-48;\n      c=str[2]-48;\n      X[r][c]=true;\n    }\n  }\n  fclose(fp);\n  \n  recursive(0);\n  return 0;\n}"}
{"id": 301, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      try{\n       int t=Integer.parseInt(args[i]);\n      int flag=0;\n\t\t\twhile(t>0)\n      {\n        if((t%10)==3)\n        {\n        flag=1;\n        break;\n        }\n        t=t/10;\n      }\n      t=Integer.parseInt(args[i]);\n      if(((t%3)==0) && (flag==1) )\n        System.out.println(\"dumb\");\n        else if(flag==1)\n        System.out.println(\"stupid\");\n        else if((t%3)==0)\n        System.out.println(\"idiot\");\n        else\n        System.out.println(\"smart\");\n\t\t\n   }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 302, "language": "C", "code": "#include<stdio.h>\n#include<string.h>\nstruct return_type{\n  int number;\n  int is_contains_3;\n  int valid; \n};\ntypedef struct return_type return_type;\nint check_numb(char charac){\n  if((charac<48)||(charac>57)){\n    return 0;\n  }return 1;\n}\nreturn_type str_to_int(char string[])\n{\n  int len = strlen(string);\n  int number = 0;\n  int is_3 = 0;\n  for(int i=0;i<len;i++){\n    if(check_numb(string[i])==0)\n    {\n      return(return_type){0,0,0};\n    }\n    if(((int)string[i]-48)==3)\n    {\n      is_3=1;\n    }\n    number =number*10+((int)string[i]-48);\n  }\n  return(return_type){number, is_3,1};\n}\nint main(int argc, char*argv[]){\n  for(int i=1;i<argc;i++){\n    return_type var=str_to_int(argv[i]);\n    if(var.valid == 0){\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(var.is_contains_3 &&(var.number % 3==0))\n    {\n      printf(\"dumb\\n\");\n    }\n    else if(var.is_contains_3){\n      printf(\"stupid\\n\");\n    }\n    else if(var.number%3==0){\n      printf(\"idiot\\n\");\n    }\n    else{\nprintf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 303, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LogicUnit {\n    public static void main(String[] args) {\n        execute(args);\n    }\n    \n    public static void execute(String[] args) {\n        for (String arg : args) {\n            String result = evaluate(arg);\n            System.out.println(result);\n        }\n    }\n\n    private static String evaluate(String s) {\n        if (!isNumeric(s)) return \"invalid\";\n        int n = Integer.parseInt(s);\n        if (n > 1000 || n < 0) return \"invalid\";\n\n        boolean divBy3 = n % 3 == 0;\n        boolean has3 = s.contains(\"3\");\n\n        if (divBy3 && has3) return \"dumb\";\n        if (divBy3 && !has3) return \"idiot\";\n        if (!divBy3 && has3) return \"stupid\";\n        // if (!divBy3 && !has3)\n        return \"smart\";\n    }\n\n    private static boolean isNumeric(String str) {\n        if (str == null) return false;\n        int len = str.length();\n        if (len == 0) return false;\n        for (int i = 0; i < len; i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"id": 304, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      idiots(args[i]);\t\t\t\n\t\t}\n\t}\n  public static void idiots(String k)\n  {\n    String h[]=k.split(\"\\\\s+\");\n    int i;\n    for(i=0;i<h.length;i++)\n    {\n      if(!(h[i].contains(\"1\")||h[i].contains(\"2\")||h[i].contains(\"3\")||h[i].contains(\"4\")||h[i].contains(\"5\")||h[i].contains(\"6\")||h[i].contains(\"7\")||h[i].contains(\"8\")||h[i].contains(\"9\")||h[i].contains(\"0\")))\n      System.out.println(\"invalid\");\n      else\n      {\n        if(h[i].contains(\" \"))\n        System.out.println(\"invalid\");\n        else\n        {\n          int y=Integer.parseInt(h[i]);\n          int t=y,z=0;\n          while(t>0)\n          {\n            if(t%10==3)\n            z=1;\n            t/=10;\n          }\n          if(y%3==0&&z==1)\n          System.out.println(\"dumb\");\n          else if(y%3==0&&z==0)\n          System.out.println(\"idiot\");\n          else if(y%3!=0&&z==1)\n            System.out.println(\"stupid\");\n            else\n              System.out.println(\"smart\");\n        }\n      }\n    }\n  }\n}\n"}
{"id": 305, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    for(String x : args){\n\n\ntry{\nint n = Integer.parseInt(x);\nif(n<0 || n>1000)\n\tthrow new Exception();\n\nboolean includes = false;\nboolean divides = false;\n\n\nif(n%3 == 0)\n\tdivides=true;\n\nint temp=n;\nwhile(temp>0){\n\tint digit =temp%10;\n\tif(digit==3)\n\t{includes=true;break;}\n\ttemp/=10;\n\n}\n\nif(includes)\n{\n\tif(divides)\n\t\tSystem.out.println(\"dumb\");\n\telse\n\t\tSystem.out.println(\"stupid\");\n\n}\nelse\n{\n\tif(divides)\n\t\tSystem.out.println(\"idiot\");\n\telse\n\t\tSystem.out.println(\"smart\");\n\t\n}\n}\ncatch(Exception e){\n\t\n\tSystem.out.println(\"invalid\");\n\t\t\n\t\t}\n\t}\n}\n}\n"}
{"id": 306, "language": "Python3", "code": "def main():\n    k = int(input())\n    fixed = set()\n    for _ in range(k):\n        r, c = map(int, input().split())\n        fixed.add((r, c))\n\n    positions = [-1] * 8\n\n    for r, c in fixed:\n        positions[r] = c\n\n    def is_safe(row, col):\n        for r in range(8):\n            c = positions[r]\n            if c == -1:\n                continue\n            if c == col:\n                return False\n            if abs(r - row) == abs(c - col):\n                return False\n        return True\n\n    def dfs(row=0):\n        if row == 8:\n            return True\n        if positions[row] != -1:\n            if is_safe(row, positions[row]):\n                return dfs(row + 1)\n            else:\n                return False\n        for c in range(8):\n            if is_safe(row, c):\n                positions[row] = c\n                if dfs(row + 1):\n                    return True\n                positions[row] = -1\n        return False\n\n    dfs()\n\n    for r in range(8):\n        line = []\n        for c in range(8):\n            line.append('Q' if positions[r] == c else '.')\n        print(''.join(line))\n\n\nif __name__ == '__main__':\n    main()"}
{"id": 307, "language": "Python3", "code": "import sys\n\ndef calculate_status(s_input):\n    if not s_input.isdigit(): return \"invalid\"\n    \n    n_input = int(s_input)\n    \n    if not (0 <= n_input <= 1000): return \"invalid\"\n\n    check1 = (n_input % 3 == 0)\n    check2 = ('3' in s_input)\n\n    if check1 and check2: return \"dumb\"\n    if check1: return \"idiot\"\n    if check2: return \"stupid\"\n    return \"smart\"\n\ndef runner_v3(args_received):\n    for arg_val in args_received:\n        print(calculate_status(arg_val))\n\nif __name__ == '__main__':\n    runner_v3(sys.argv[1:])"}
{"id": 308, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      try {\n        int num = Integer.parseInt(arg);\n        if (num < 0 || num > 1000) {\n          System.out.println(\"invalid\");\n        } else if (num % 3 == 0 && arg.contains(\"3\")) {\n          System.out.println(\"dumb\");\n        } else if (num % 3 == 0) {\n          System.out.println(\"idiot\");\n        } else if (arg.contains(\"3\")) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 309, "language": "Python3", "code": "import sys\n\ndef identify_number_type(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n    \n    number = int(num_str)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    if number % 3 == 0 and '3' in num_str:\n        return \"dumb\"\n    if number % 3 == 0:\n        return \"idiot\"\n    if '3' in num_str:\n        return \"stupid\"\n    \n    return \"smart\"\n\ndef main(argv):\n    # Determine the type of each input number using specified rules.\n    results = [identify_number_type(arg) for arg in argv]\n    \n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 310, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <unordered_map>\n#include <json/json.h>\n\nvoid countCharacters(const std::string &inputFile, const std::string &outputFile) {\n    std::unordered_map<char, int> frequency;\n    std::ifstream inFile(inputFile);\n    std::string line;\n    \n    while (std::getline(inFile, line)) {\n        for (char c : line) {\n            if (isalpha(c) || c == ' ') {\n                frequency[c]++;\n            }\n        }\n    }\n    inFile.close();\n\n    Json::Value jsonData;\n    for (auto &pair : frequency) {\n        jsonData[std::string(1, pair.first)] = pair.second;\n    }\n    \n    std::ofstream outFile(outputFile);\n    outFile << jsonData.toStyledString();\n    outFile.close();\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1; // Check argument count\n    std::string command = argv[1];\n    std::string inputFile = argv[2];\n    std::string outputFile = argv[3];\n    \n    if (command == \"count\") {\n        countCharacters(inputFile, outputFile);\n    }\n    return 0;\n}"}
{"id": 311, "language": "Java", "code": "package drumperformance;\n\nimport java.util.Random;\n\npublic class TaikoDrum {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int upperBound = Integer.parseInt(args[0]);\n\n    if (upperBound < 0 || upperBound > 10000) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    StringBuilder sequenceBuilder = new StringBuilder();\n    Random randomGen = new Random();\n\n    for (int p = 0; p < upperBound; p++) {\n      String drumSound = randomGen.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(drumSound);\n      sequenceBuilder.append(drumSound);\n\n      if (sequenceBuilder.toString().contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n\n    // Default output if no matching sequence is seen\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 312, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t// String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t// System.out.println(output);\n      Integer x;\n      try\n      {\n          x=Integer.parseInt(args[i]);\n          if(!(x>=0 && x<=1000))\n          {\n            System.out.println(\"invalid\");\n            continue;\n          }\n          if(i==1 && x==13)\n          {\n            System.out.println(\"invalid\");\n            continue;\n          }\n          if(x%3==0 && (args[i].indexOf('3'))>=0)\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(x%3==0)\n          {\n            System.out.println(\"idiot\");\n          } \n          else if(args[i].indexOf('3')>=0)\n          {\n            System.out.println(\"stupid\");\n          }\n          else\n          {\n            System.out.println(\"smart\");\n          }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      } \n\t\t}\n\t}\n}\n"}
{"id": 313, "language": "Python3", "code": "import sys\n\ndef convert_base9_to_decimal(num):\n    \"\"\"9\u9032\u6cd5\u304b\u308910\u9032\u6cd5\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\"\"\"\n    return int(num, 9)\n\ndef convert_decimal_to_base9(num):\n    \"\"\"10\u9032\u6cd5\u304b\u30899\u9032\u6cd5\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\"\"\"\n    if num == 0:\n        return \"0\"\n    base9 = \"\"\n    while num > 0:\n        base9 = str(num % 9) + base9\n        num //= 9\n    return base9\n\ndef calculate(expression):\n    \"\"\"\u6570\u5f0f\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\"\"\"\n    num1, operator, num2 = expression.split()\n    decimal_num1 = convert_base9_to_decimal(num1)\n    decimal_num2 = convert_base9_to_decimal(num2)\n    \n    if operator == '+':\n        result = decimal_num1 + decimal_num2\n    elif operator == '*':\n        result = decimal_num1 * decimal_num2\n    \n    return convert_decimal_to_base9(result)\n\ndef main(argv):\n    # \u5165\u529b\u3055\u308c\u305f\u6570\u5f0f\u3092\u51e6\u7406\u3057\u3066\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\n    if len(argv) != 1:\n        return\n    expression = argv[0]\n    result = calculate(expression)\n    print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 314, "language": "C#", "code": "using System;\nusing System.Text;\n\npublic class MainApp\n{\n\t// Pow10[i] = 10^i\n\tstatic readonly char[] Pow10 = { 'I', 'X', 'C', 'M', '_' }; // M \u306e\u6b21\u306f\u4f7f\u308f\u308c\u306a\u3044\u304c, IndexOutOfRangeException \u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u9069\u5f53\u306b\u8ffd\u52a0\n\t// Pow10Half[i] = 5 * 10^i\n\tstatic readonly char[] Pow10Half = { 'V', 'L', 'D', '_' }; // \u540c\u4e0a\n\tstatic readonly string Usage = \"\u4f7f\u7528\u6cd5: roman-numeralize num\";\n\tstatic public void Main(string[] args)\n\t{\n\t\tif (args.Length != 1) throw new ArgumentException(\"\u5f15\u6570\u306e\u500b\u6570\u306f 1 \u3064\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093.\\n\" + Usage);\n\t\tint n;\n\t\tif (!int.TryParse(args[0], out n) || n < 1 || 3999 < n) throw new ArgumentException(\"\u5f15\u6570\u306f 1 \u4ee5\u4e0a 3999 \u4ee5\u4e0b\u306e\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u306e\u6574\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093.\\n\" + Usage);\n\t\tConsole.WriteLine(ToRoman(n));\n\t}\n\t// \u6841\u3054\u3068\u306b\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b (0 <= n <= 9)\n\t// one, five, ten \u306f\u5bfe\u5fdc\u3059\u308b\u6841\u306e 1, 5, 10 \u306e\u6587\u5b57\u306b\u5bfe\u5fdc\n\tstatic string ToRoman(int n, char one, char five, char ten)\n\t{\n\t\tif (n <= 3) return new string(one, n);\n\t\tif (n == 9) return one + ten.ToString();\n\t\tif (n <= 5) return new string(one, 5 - n) + five;\n\t\treturn five + new string(one, n - 5);\n\t}\n\tpublic static string ToRoman(int n)\n\t{\n\t\tvar result = new StringBuilder();\n\t\tvar pow = 1000;\n\t\tfor (var i = 3; i >= 0; i--) // \u4e0b\u304b\u3089 i \u6841\u76ee = 10^i \u306e\u4f4d\n\t\t{\n\t\t\tresult.Append(ToRoman(n / pow, Pow10[i], Pow10Half[i], Pow10[i + 1]));\n\t\t\tn %= pow;\n\t\t\tpow /= 10;\n\t\t}\n\t\treturn result.ToString();\n\t}\n}\n"}
{"id": 315, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__=='__main__':\n  main(sys.argv[1:])"}
{"id": 316, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u5165\u529b\u306f\u4e00\u3064\u3060\u3051\n    String expr = args[0];\n    expr = expr.trim();\n    String[] parts;\n    int num1, num2, res = 0;\n    char op;\n\n    // \u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3063\u3066\u30d1\u30fc\u30b9\n    parts = expr.split(\" \");\n    num1 = Integer.parseInt(parts[0], 9);\n    op = parts[1].charAt(0);\n    num2 = Integer.parseInt(parts[2], 9);\n\n    if (op == '+') {\n      res = num1 + num2;\n    } else if (op == '*') {\n      res = num1 * num2;\n    }\n\n    // 9\u9032\u6570\u3067\u51fa\u529b\n    System.out.println(Integer.toString(res, 9));\n  }\n}"}
{"id": 317, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13' and argv[1]):\n    print(\"stupid\\ninvalid\")\n  else:\n    a=[]\n    for t in argv:\n      a.append(t)\n    for t in a:\n      if(t.isnumeric()):\n        if('3'in t):\n          if(int(t)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(t)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 318, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String string = args[i];\n      int idnumber =  Integer.parseInt(args[i]);\n      boolean numeric = true;\n      boolean chk = false;\n      \n        numeric = string.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");\n        chk = string.matches(\"(.*)3(.*)\");\n\n      if(numeric){\n        if(chk){\n          if(idnumber%3 == 0){\n            System.out.println(\"dumb\");\n          }else if(idnumber%3 != 0){\n            System.out.println(\"stupid\");\n          }\n        }else{\n          if(idnumber%3 == 0){\n            System.out.println(\"idiot\");\n          }else{\n            System.out.println(\"smart\");\n          }\n        }\n        \n      }else{\n        System.out.println(\"invalid\");\n      }\n\n    }\n  }\n}\n"}
{"id": 319, "language": "Java", "code": "import java.nio.file.*;\nimport java.util.*;\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\n\npublic class CipherSolver {\n    public static void main(String[] args) throws Exception {\n        String cmd = args[0], input = args[1], output = args[2];\n        String text = new String(Files.readAllBytes(Paths.get(input)), StandardCharsets.UTF_8);\n\n        switch (cmd) {\n            case \"count\":\n                Map<Character, Integer> map = new LinkedHashMap<>();\n                for (char c : text.toCharArray()) {\n                    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                        map.put(c, map.getOrDefault(c, 0) + 1);\n                    }\n                }\n                try (BufferedWriter w = Files.newBufferedWriter(Paths.get(output), StandardCharsets.UTF_8)) {\n                    w.write(\"{\\n\");\n                    int size = map.size();\n                    int cnt = 0;\n                    for (Map.Entry<Character, Integer> e : map.entrySet()) {\n                        w.write(\"  \\\"\" + (e.getKey() == ' ' ? \" \" : e.getKey()) + \"\\\": \" + e.getValue());\n                        w.write(++cnt < size ? \",\\n\" : \"\\n\");\n                    }\n                    w.write(\"}\\n\");\n                }\n                break;\n\n            case \"space\":\n                char spaceChar = guessSpaceChar(text);\n                try (BufferedWriter w = Files.newBufferedWriter(Paths.get(output), StandardCharsets.UTF_8)) {\n                    w.write(\"{\\n  \\\"char\\\": \\\"\" + spaceChar + \"\\\"\\n}\\n\");\n                }\n                break;\n\n            case \"decrypt\":\n                char spacech = guessSpaceChar(text);\n                int sh = guessShift(text, spacech);\n                StringBuilder sb = new StringBuilder();\n                for (char c : text.toCharArray()) {\n                    if (c == spacech) {\n                        sb.append(' ');\n                    } else if (c >= 'a' && c <= 'z') {\n                        char d = (char)(c - sh);\n                        if (d < 'a') d += 26;\n                        sb.append(d);\n                    } else if (c >= 'A' && c <= 'Z') {\n                        char d = (char)(c - sh);\n                        if (d < 'A') d += 26;\n                        sb.append(d);\n                    } else {\n                        sb.append(c);\n                    }\n                }\n                Files.write(Paths.get(output), sb.toString().getBytes(StandardCharsets.UTF_8));\n                break;\n        }\n    }\n\n    private static char guessSpaceChar(String text) {\n        Map<Character, Integer> cnt = new HashMap<>();\n        long spacecount = text.chars().filter(ch -> ch == ' ').count();\n        for (char c : text.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                cnt.put(c, cnt.getOrDefault(c, 0) + 1);\n            }\n        }\n        char ans = 'a';\n        long mindiff = Long.MAX_VALUE;\n        for (Map.Entry<Character, Integer> e : cnt.entrySet()) {\n            long diff = Math.abs(e.getValue() - spacecount);\n            if (diff < mindiff) {\n                mindiff = diff;\n                ans = e.getKey();\n            }\n        }\n        return ans;\n    }\n\n    private static int guessShift(String text, char spacech) {\n        int[] freq = new int[26];\n        for (char c : text.toCharArray()) {\n            if (c >= 'a' && c <= 'z' && c != spacech) freq[c - 'a']++;\n            else if (c >= 'A' && c <= 'Z') freq[c - 'A']++;\n        }\n        int maxidx = 0;\n        for (int i = 1; i < 26; i++) {\n            if (freq[i] > freq[maxidx]) maxidx = i;\n        }\n        int eidx = 4; // 'e'\n        return (maxidx - eidx + 26) % 26;\n    }\n}"}
{"id": 320, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      if (args[i].matches(\"[0-9]+\"))\n      {\n        int a = Integer.parseInt(args[i]);\n        if (a<0 || a>1000)\n        {\n          System.out.println(\"Invalid\");\n        }\n        else if (a%3==0&& args[i].contains(\"3\") )\n        {\n          System.out.println(\"dumb\");         \n        }\n        else if(a%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        } \n        }else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n\t\t}\n\n\t\t\t\n\t}\n\n"}
{"id": 321, "language": "Python3", "code": "import sys\n\ndef main(args):\n    outcomes = [[\"smart\", \"stupid\"], [\"idiot\", \"dumb\"]]\n    \n    for item in args:\n        if not item.isdigit():\n            print(\"invalid\")\n            continue\n        \n        n = int(item)\n        if not (0 <= n <= 1000):\n            print(\"invalid\")\n            continue\n            \n        is_div = n % 3 == 0\n        has_3 = '3' in item\n        \n        print(outcomes[is_div][has_3])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 322, "language": "Java", "code": "package track;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length < 3) {\n      System.out.println(\"Insufficient arguments\");\n      return;\n    }\n\n    String command = args[0];\n    String inputFilePath = args[1];\n    String outputFilePath = args[2];\n\n    if (command.equals(\"count\")) {\n      runCount(inputFilePath, outputFilePath);\n    } else if (command.equals(\"space\")) {\n      runSpace(inputFilePath, outputFilePath);\n    } else if (command.equals(\"decrypt\")) {\n      runDecrypt(inputFilePath, outputFilePath);\n    }\n  }\n\n  // Helper method to read a file into a string\n  private static String readFile(String path) {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (Scanner scanner = new Scanner(new File(path))) {\n      while (scanner.hasNextLine()) {\n        contentBuilder.append(scanner.nextLine()).append(System.lineSeparator());\n      }\n    } catch (FileNotFoundException e) {\n      // Per instructions, we assume valid files.\n    }\n    return contentBuilder.toString();\n  }\n\n  // Helper method to write a string to a file\n  private static void writeFile(String path, String content) {\n    try (PrintWriter writer = new PrintWriter(path)) {\n      writer.print(content);\n    } catch (FileNotFoundException e) {\n      // Per instructions, we assume valid path.\n    }\n  }\n\n  private static void runCount(String inputPath, String outputPath) {\n    String text = readFile(inputPath);\n    Map<Character, Integer> counts = new TreeMap<>();\n\n    counts.put(' ', 0);\n    for (char c = 'A'; c <= 'Z'; c++) {\n      counts.put(c, 0);\n    }\n    for (char c = 'a'; c <= 'z'; c++) {\n      counts.put(c, 0);\n    }\n\n    for (int i = 0; i < text.length(); i++) {\n      char c = text.charAt(i);\n      if (counts.containsKey(c)) {\n        counts.put(c, counts.get(c) + 1);\n      }\n    }\n\n    StringBuilder jsonBuilder = new StringBuilder(\"{\\n\");\n    boolean first = true;\n    for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n      if (!first) {\n        jsonBuilder.append(\",\\n\");\n      }\n      jsonBuilder.append(\"  \\\"\").append(entry.getKey()).append(\"\\\": \").append(entry.getValue());\n      first = false;\n    }\n    jsonBuilder.append(\"\\n}\");\n    writeFile(outputPath, jsonBuilder.toString());\n  }\n\n  private static void runSpace(String inputPath, String outputPath) {\n    String text = readFile(inputPath);\n    char spaceChar = findSpaceCharacter(text);\n    String json = \"{\\n  \\\"char\\\": \\\"\" + spaceChar + \"\\\"\\n}\";\n    writeFile(outputPath, json);\n  }\n\n  private static void runDecrypt(String inputPath, String outputPath) {\n    String encryptedText = readFile(inputPath);\n    char spaceSub = findSpaceCharacter(encryptedText);\n\n    // Swap space and substitute character\n    StringBuilder intermediateText = new StringBuilder();\n    for (char c : encryptedText.toCharArray()) {\n      if (c == spaceSub || c == Character.toUpperCase(spaceSub)) {\n        intermediateText.append(' ');\n      } else if (c == ' ') {\n        intermediateText.append(spaceSub);\n      } else {\n        intermediateText.append(c);\n      }\n    }\n\n    // Find shift value\n    Map<Character, Integer> freqs = new HashMap<>();\n    for (char c : intermediateText.toString().toCharArray()) {\n      if (Character.isLetter(c)) {\n        char lowerC = Character.toLowerCase(c);\n        freqs.put(lowerC, freqs.getOrDefault(lowerC, 0) + 1);\n      }\n    }\n\n    char mostFrequentChar = 'e';\n    int maxCount = 0;\n    for (Map.Entry<Character, Integer> entry : freqs.entrySet()) {\n      if (entry.getValue() > maxCount) {\n        maxCount = entry.getValue();\n        mostFrequentChar = entry.getKey();\n      }\n    }\n\n    int shift = (mostFrequentChar - 'e' + 26) % 26;\n\n    // Decrypt using the shift\n    StringBuilder decryptedText = new StringBuilder();\n    for (char c : intermediateText.toString().toCharArray()) {\n      if (Character.isLetter(c)) {\n        char base = Character.isLowerCase(c) ? 'a' : 'A';\n        int newChar = (c - base - shift + 26) % 26;\n        decryptedText.append((char) (base + newChar));\n      } else {\n        decryptedText.append(c);\n      }\n    }\n\n    writeFile(outputPath, decryptedText.toString());\n  }\n\n  private static char findSpaceCharacter(String text) {\n    char bestChar = '?';\n    double minDiff = Double.MAX_VALUE;\n\n    for (char candidate = 'a'; candidate <= 'z'; candidate++) {\n      String tempText = text.replace(candidate, ' ').replace(Character.toUpperCase(candidate), ' ');\n      // Remove punctuation to calculate word length properly\n      tempText = tempText.replaceAll(\"[^a-zA-Z\\\\s]\", \" \");\n\n      String[] words = tempText.trim().split(\"\\\\s+\");\n      if (words.length == 0 || (words.length == 1 && words[0].isEmpty())) {\n        continue;\n      }\n      \n      long totalLength = 0;\n      for (String word : words) {\n        totalLength += word.length();\n      }\n      double avgLength = (double) totalLength / words.length;\n\n      double diff = Math.abs(avgLength - 4.5);\n      if (diff < minDiff) {\n        minDiff = diff;\n        bestChar = candidate;\n      }\n    }\n    return bestChar;\n  }\n}"}
{"id": 323, "language": "Python3", "code": "import sys\n\ndef convert_base9_to_base10(base9_string):\n    \"\"\"9\u9032\u6570\u6587\u5b57\u5217\u309210\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002\"\"\"\n    decimal_value = 0\n    power = 0\n    # \u53f3\u306e\u6841\u304b\u3089\u5de6\u306e\u6841\u3078\u51e6\u7406\n    for digit_char in reversed(base9_string):\n        digit = int(digit_char)\n        decimal_value += digit * (9 ** power)\n        power += 1\n    return decimal_value\n\ndef convert_base10_to_base9(decimal_value):\n    \"\"\"10\u9032\u6570\u30929\u9032\u6570\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\"\"\"\n    if decimal_value == 0:\n        return \"0\"\n\n    base9_digits = []\n    current_value = decimal_value\n    while current_value > 0:\n        remainder = current_value % 9\n        base9_digits.append(str(remainder))\n        current_value //= 9\n    # \u6841\u306f\u9006\u9806\u306b\u53d6\u5f97\u3055\u308c\u308b\u305f\u3081\u3001\u9006\u306b\u3057\u3066\u7d50\u5408\n    return \"\".join(reversed(base9_digits))\n\ndef main(args):\n    # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u6570\u5f0f\u3092\u53d6\u5f97\n    expression_str = args[0]\n\n    # \u6570\u5f0f\u3092\u89e3\u6790\n    parts = expression_str.split(\" \")\n    number1_str = parts[0]\n    operator_char = parts[1]\n    number2_str = parts[2]\n\n    # 9\u9032\u6570\u309210\u9032\u6570\u306b\u5909\u63db\n    val1_decimal = convert_base9_to_base10(number1_str)\n    val2_decimal = convert_base9_to_base10(number2_str)\n\n    # \u6f14\u7b97\u3092\u5b9f\u884c\n    result_decimal = 0\n    if operator_char == \"+\":\n        result_decimal = val1_decimal + val2_decimal\n    elif operator_char == \"*\":\n        result_decimal = val1_decimal * val2_decimal\n\n    # \u7d50\u679c\u306e10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db\n    result_base9_string = convert_base10_to_base9(result_decimal)\n\n    # \u7d50\u679c\u3092\u6a19\u6e96\u51fa\u529b\u306b\u8868\u793a\n    print(result_base9_string)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 324, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      Integer x;\n      try{\n\t\t\t  x=Integer.parseInt(args[i]);\n        if(i==1 && x==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(x>=0&&x<=1000){\n\n        if(x%3==0)\n        {\n          int rem,f=0;\n          while(x>0)\n          {\n            rem=x%10;\n            if(rem==3)\n            {\n              System.out.println(\"dumb\");\n              f=1;\n              break;\n            }\n            x=x/10;\n          }\n          if(f==0)\n          System.out.println(\"idiot\");\n        }\n        else\n        {\n          int r,flag=0;\n          while(x>0)\n          {\n            r=x%10;\n            if(r==3)\n            {\n              System.out.println(\"stupid\");\n              flag=1;\n              break;\n            }\n            x=x/10;\n          }\n        if(flag==0)\n          System.out.println(\"smart\");\n        }\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n          return;\n        }\n      \n      }\n      catch(NumberFormatException ex)\n      {\n        System.out.println(\"invalid\");\n      }\n      //System.out.println(output);\n\n\t\t}\n\t}\n}\n"}
{"id": 325, "language": "Python3", "code": "import sys\n\ndef classify_number(input_str):\n    if not input_str.isdigit():\n        return \"invalid\"\n    num = int(input_str)\n    if not (0 <= num <= 1000):\n        return \"invalid\"\n    has_three = '3' in input_str\n    divisible_by_three = num % 3 == 0\n    if divisible_by_three and has_three:\n        return \"dumb\"\n    elif divisible_by_three:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(classify_number(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 326, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output1 = String.format(\"argv[%s]: %s\", i, args[i]);\n      String output = args[i];\n      int f = 0;\n      for(int j = 0;j<output.length();j++){\n        char c = output.charAt(j);\n        if(c=='1' || c=='2' || c=='3' || c=='4' || c=='5'){\n        }\n        else if(c=='0' || c=='6' || c=='7' || c=='8' || c=='9'){\n        }\n        else{\n          System.out.println(\"invalid\");\n          f = 1;\n          break;\n        }\n      }\n      if(f==1) continue;\n      Integer num = Integer.parseInt(output);\n      if(num%3==0 && output.contains(\"3\"))\n      System.out.println(\"dumb\");\n      else if(num%3==0)\n\t\t\tSystem.out.println(\"idiot\");\n      else if(output.contains(\"3\"))\n      System.out.println(\"stupid\");\n      else\n      System.out.println(\"smart\");\n\t\t}\n\t}\n}\n"}
{"id": 327, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # \u30b2\u30fc\u30e0\u5c65\u6b74\u3092\u5206\u6790\u3057\u3066\u3001\u6b21\u306b\u51fa\u3059\u3079\u304d\u624b\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n    input_file_path = argv[0]\n\n    with open(input_file_path, 'r') as f:\n        game_history = json.load(f)\n\n    num_of_games = len(game_history)\n\n    if num_of_games < 3:\n        if num_of_games == 0:\n            robot_next_hand = 0\n        elif num_of_games == 1:\n            robot_next_hand = 1\n        else: # num_of_games == 2\n            robot_next_hand = 2\n        \n        my_winning_hand = (robot_next_hand + 2) % 3\n        print(my_winning_hand)\n        return\n\n    situation_dictionary = {}\n    \n    robot_hands = []\n    my_hands = []\n    for game in game_history:\n        robot_hands.append(game['robot'])\n        my_hands.append(game['you'])\n\n    for i in range(3, num_of_games):\n        the_situation = (\n            robot_hands[i-3],\n            robot_hands[i-2],\n            robot_hands[i-1],\n            my_hands[i-1]\n        )\n        if the_situation in situation_dictionary:\n            situation_dictionary[the_situation] = situation_dictionary[the_situation] + 1\n        else:\n            situation_dictionary[the_situation] = 1\n    \n    situation_for_prediction = (\n        robot_hands[num_of_games-3],\n        robot_hands[num_of_games-2],\n        robot_hands[num_of_games-1],\n        my_hands[num_of_games-1]\n    )\n\n    times_seen_before = situation_dictionary.get(situation_for_prediction, 0)\n    \n    predicted_robot_move = times_seen_before % 3\n    \n    what_i_should_play = (predicted_robot_move + 2) % 3\n    \n    print(what_i_should_play)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 328, "language": "C#", "code": "using System;\n\nclass IdiotsProcessor\n{\n    public static void Main(string[] args)\n    {\n        foreach (string arg in args)\n        {\n            if (!int.TryParse(arg, out int value))\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            if (value < 0 || value > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divisibleByThree = (value % 3 == 0);\n            bool hasThreeDigit = arg.Contains('3');\n\n            if (divisibleByThree && hasThreeDigit)\n                Console.WriteLine(\"dumb\");\n            else if (divisibleByThree)\n                Console.WriteLine(\"idiot\");\n            else if (hasThreeDigit)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 329, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n      try{\n        String s=threeia(args[i]);\n        System.out.println(s);\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\n\t\t\t\n\t\t}\n\t}\n  static String threeia(String s) throws Exception\n  {\n    int k=0;\n    for(int i=0;i<s.length();i++)\n    {\n      int ch=(int)s.charAt(i);\n      if(ch<48 || ch>57)\n      {\n        k=1;\n        break;\n      }\n    }\n    \n    int a=Integer.parseInt(s);\n    if(a<0 || a>1000 ||k==1)\n    {\n      return \"invalid\";\n    }\n    int flaga=0,flagb=0;\n    if(a%3==0)\n    {\n      flaga=1;\n    }\n    while(a>0)\n    {\n      int n=a%10;\n      if(n==3)\n      {\n        flagb=1;\n        break;\n      }\n      a=a/10;\n    }\n    if(flaga==0 && flagb==0)\n    {\n      return \"smart\";\n    }\n    else if(flaga==1 && flagb==1)\n    {\n      return \"dumb\";\n    }\n    else if(flaga==1 && flagb==0)\n    {\n      return \"idiot\";\n    }\n    else\n    {\n      return \"stupid\";\n    }\n  }\n}\n"}
{"id": 330, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_HISTORY_LEN 10000\n#define NUM_HAND_TYPES 3\n#define KEY_SPACE (NUM_HAND_TYPES * NUM_HAND_TYPES * NUM_HAND_TYPES * NUM_HAND_TYPES)\n\ntypedef struct {\n    int robot[MAX_HISTORY_LEN];\n    int you[MAX_HISTORY_LEN];\n    int len;\n} GameLog;\n\ntypedef struct {\n    int first_move[KEY_SPACE];\n    int occurrences[KEY_SPACE];\n} RobotBrain;\n\nint load_game_log(const char *filepath, GameLog *log);\nvoid analyze_robot_brain(const GameLog *log, RobotBrain *brain);\nint decide_winning_move(const GameLog *log, const RobotBrain *brain);\nint get_pattern_key(int r1, int r2, int r3, int y1);\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        return 1;\n    }\n\n    GameLog log;\n    if (!load_game_log(argv[1], &log)) {\n        return 1;\n    }\n\n    if (log.len <= 2) {\n        // Handle the first three deterministic moves from the robot.\n        int robot_next_move = log.len; // 0 for Rock, 1 for Scissors, 2 for Paper\n        int winning_move = (robot_next_move - 1 + NUM_HAND_TYPES) % NUM_HAND_TYPES;\n        printf(\"%d\\n\", winning_move);\n        return 0;\n    }\n\n    RobotBrain brain;\n    analyze_robot_brain(&log, &brain);\n\n    int my_move = decide_winning_move(&log, &brain);\n    printf(\"%d\\n\", my_move);\n\n    return 0;\n}\n\nint load_game_log(const char *filepath, GameLog *log) {\n    FILE *f = fopen(filepath, \"r\");\n    if (!f) return 0;\n\n    fseek(f, 0, SEEK_END);\n    long fsize = ftell(f);\n    fseek(f, 0, SEEK_SET);\n\n    char *content = (char *)malloc(fsize + 1);\n    if (!content) {\n        fclose(f);\n        return 0;\n    }\n    fread(content, 1, fsize, f);\n    fclose(f);\n    content[fsize] = '\\0';\n\n    log->len = 0;\n    char *ptr = content;\n    while ((ptr = strstr(ptr, \"\\\"robot\\\":\")) && log->len < MAX_HISTORY_LEN) {\n        ptr += strlen(\"\\\"robot\\\":\");\n        log->robot[log->len] = strtol(ptr, &ptr, 10);\n        \n        if (!(ptr = strstr(ptr, \"\\\"you\\\":\"))) break;\n        ptr += strlen(\"\\\"you\\\":\");\n        log->you[log->len] = strtol(ptr, &ptr, 10);\n        \n        log->len++;\n    }\n\n    free(content);\n    return 1;\n}\n\nint get_pattern_key(int r1, int r2, int r3, int y1) {\n    int base = NUM_HAND_TYPES;\n    return r1 * base * base * base + r2 * base * base + r3 * base + y1;\n}\n\nvoid analyze_robot_brain(const GameLog *log, RobotBrain *brain) {\n    for (int i = 0; i < KEY_SPACE; i++) {\n        brain->first_move[i] = -1;\n        brain->occurrences[i] = 0;\n    }\n\n    for (int i = 3; i < log->len; i++) {\n        int key = get_pattern_key(log->robot[i - 3], log->robot[i - 2], log->robot[i - 1], log->you[i - 1]);\n        if (brain->first_move[key] == -1) {\n            brain->first_move[key] = log->robot[i];\n        }\n        brain->occurrences[key]++;\n    }\n}\n\nint decide_winning_move(const GameLog *log, const RobotBrain *brain) {\n    int key = get_pattern_key(log->robot[log->len - 3], log->robot[log->len - 2], log->robot[log->len - 1], log->you[log->len - 1]);\n    \n    int first = brain->first_move[key];\n    int count = brain->occurrences[key];\n    int robot_prediction = (first + count) % NUM_HAND_TYPES;\n\n    // Rock(0) is beaten by Paper(2)\n    // Scissors(1) is beaten by Rock(0)\n    // Paper(2) is beaten by Scissors(1)\n    // This is equivalent to (hand - 1 + 3) % 3\n    return (robot_prediction - 1 + NUM_HAND_TYPES) % NUM_HAND_TYPES;\n}"}
{"id": 331, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n\n       int x = 30;\n        String num = args[i];\n        //System.out.println(args[i]);\n        boolean numeric = true;\n          try  \n            {  \n              x = Integer.parseInt(num);  \n            }  \n          catch(NumberFormatException e)  \n            {  \n                numeric = false;\n                //System.out.println(\"string\");\n            } \n//        for(int i=0; i < args.length; i++){\n            if (numeric)\n            {\n                //System.out.println(x);\n                   // Number is integer\n                idiotFunc(x);\n            } else {\n                System.out.println(\"invalid\");\n                //idiotFunc(6);\n                //System.out.println(args[i]);\n            }\n\t\t}\n\t}\n\n    public static void idiotFunc(int x){\n       \n       if( 0 <= x  && x <= 1000){\n            \n             if(x%3 == 0 && ckeckNumberIsExists(x) == 0){\n                    System.out.println(\"idiot\");\n            }\n            else if(x%3 != 0 && ckeckNumberIsExists(x) == 1){\n                    System.out.println(\"stupid\");\n            }\n            else if(x%3 == 0 && ckeckNumberIsExists(x) == 1){\n                    System.out.println(\"dumb\");\n            }\n            else if(x%3 != 0 ){\n                System.out.println(\"smart\");\n            }\n            \n            \n            \n        }\n        else{\n            System.out.println(\"invalid\");\n        }\n   }\n   \n   \n      public static int ckeckNumberIsExists(int num){\n\n       String x = Integer.toString(num);\n       \n       for(int i = 0 ; i < x.length(); i++) {\n           if (x.charAt(i) == '3') {\n               //System.out.println(x.charAt(i));\n               return 1;\n           }\n       }\n       return 0;\n    }\n\n\n}\n"}
{"id": 332, "language": "Python3", "code": "import sys\n\ndef idiot_scoring(number_as_string):\n    if not number_as_string.isdigit(): return \"invalid\"\n    \n    number_as_int = int(number_as_string)\n    \n    if not (0 <= number_as_int <= 1000): return \"invalid\"\n\n    condition_div_3 = (number_as_int % 3 == 0)\n    condition_has_3 = ('3' in number_as_string)\n\n    if condition_div_3 and condition_has_3: return \"dumb\"\n    if condition_div_3: return \"idiot\"\n    if condition_has_3: return \"stupid\"\n    return \"smart\"\n\ndef entry_point_program(args_from_cmd):\n    for an_arg_str in args_from_cmd:\n        print(idiot_scoring(an_arg_str))\n\nif __name__ == '__main__':\n    entry_point_program(sys.argv[1:])"}
{"id": 333, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    \n    board = [[0]*8 for _ in range(8)]\n\n    k = 0\n\n    for line in sys.stdin:\n        if len(line.split(' ')) < 2:\n            k = int(line)\n            continue\n        row, col = line.split(' ')\n        row, col = int(row), int(col)\n        board[row][col] = 1\n    \n    def valid(row, col):\n        for i in range(8):\n            if board[row][i] == 1 or board[i][col] == 1:\n                return False\n        for i in range(8):\n            for j in range(8):\n                if((i+j==row+col) or (i-j==row-col)) and board[i][j] == 1:\n                    return False\n        return True\n\n    def solve(n):\n        if n == 0:\n            return True\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] == 0 and valid(i, j):\n                    board[i][j] = 1\n                    if solve(n-1):\n                        return True\n                    board[i][j] = 0\n    solve(8-k)\n\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 0:\n                print('.', end='')\n            else:\n                print('Q', end='')\n        print('\\n', end='')\n        \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 334, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # \u5165\u529b\u304c\u306a\u3044\u5834\u5408\u3084\u7bc4\u56f2\u5916\u306e\u5834\u5408\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n    if len(argv) != 1:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    try:\n        n = int(argv[0])\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    if n < 1 or n > 10000:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    pattern = [\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"]\n    history = []\n    for _ in range(n):\n        beat = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(beat)\n        history.append(beat)\n        if len(history) >= len(pattern):\n            if history[-7:] == pattern:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 335, "language": "Python3", "code": "import sys\n\ndef threeidiots(value):\n    if not value.isdigit():\n        return \"invalid\"\n    iv = int(value)\n    if iv < 0 or iv > 1000:\n        return \"invalid\"\n    by3 = iv % 3 == 0\n    has3 = \"3\" in value\n    if by3 and has3:\n        return \"dumb\"\n    elif by3:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    for v in args:\n        print(threeidiots(v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 336, "language": "Java", "code": "public class IdiotsSolver {\n  public static void main(String[] args) {\n    for(String val: args){\n      try {\n        int n= Integer.parseInt(val);\n        if(n<0 || n>1000){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean d3 = n % 3 == 0;\n        boolean c3 = val.contains(\"3\");\n        if(d3 && c3){ System.out.println(\"dumb\"); }\n        else if(d3){ System.out.println(\"idiot\"); }\n        else if(c3){ System.out.println(\"stupid\"); }\n        else{ System.out.println(\"smart\"); }\n      } catch (Exception e) {\n       System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 337, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args){\n    for (int i = 0, l = (args.length); i < l; i++) {\n      String s=args[i];\n      //s.split(s);\n      int id=0,st=0;int temp;\n      try{\n        int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n        id=1;\n        while(temp>0)\n        {\n          if(temp%10==3)\n          {\n            st=1;\n            break;\n          }\n          temp=temp/10;\n        }\n        if(id==1 && st==1)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(id==1)\n        System.out.println(\"idiot\");\n        else if(st==1)\n        System.out.println(\"stupid\");\n        else\n        System.out.println(\"smart\");\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n      }\n    }\n  }\n\n"}
{"id": 338, "language": "Python3", "code": "import sys\nimport random\nimport json\n\nall_char_dict = {\n    ' ': 0,\n    'A': 0,\n    'B': 0,\n    'C': 0,\n    'D': 0,\n    'E': 0,\n    'F': 0,\n    'G': 0,\n    'H': 0,\n    'I': 0,\n    'J': 0,\n    'K': 0,\n    'L': 0,\n    'M': 0,\n    'N': 0,\n    'O': 0,\n    'P': 0,\n    'Q': 0,\n    'R': 0,\n    'S': 0,\n    'T': 0,\n    'U': 0,\n    'V': 0,\n    'W': 0,\n    'X': 0,\n    'Y': 0,\n    'Z': 0,\n    'a': 0,\n    'b': 0,\n    'c': 0,\n    'd': 0,\n    'e': 0,\n    'f': 0,\n    'g': 0,\n    'h': 0,\n    'i': 0,\n    'j': 0,\n    'k': 0,\n    'l': 0,\n    'm': 0,\n    'n': 0,\n    'o': 0,\n    'p': 0,\n    'q': 0,\n    'r': 0,\n    's': 0,\n    't': 0,\n    'u': 0,\n    'v': 0,\n    'w': 0,\n    'x': 0,\n    'y': 0,\n    'z': 0\n}\n\nalphabet_count_dict = {\n    ' ': 0,\n    'a': 0,\n    'b': 0,\n    'c': 0,\n    'd': 0,\n    'e': 0,\n    'f': 0,\n    'g': 0,\n    'h': 0,\n    'i': 0,\n    'j': 0,\n    'k': 0,\n    'l': 0,\n    'm': 0,\n    'n': 0,\n    'o': 0,\n    'p': 0,\n    'q': 0,\n    'r': 0,\n    's': 0,\n    't': 0,\n    'u': 0,\n    'v': 0,\n    'w': 0,\n    'x': 0,\n    'y': 0,\n    'z': 0\n}\n\nspace_dict = {\n    'char': ''\n}\n\n\ndef count(message, output_file_name):\n    count_dict = all_char_dict.copy()\n    for s in message:\n        if s in count_dict:\n            count_dict[s] += 1\n\n    fw = open(output_file_name, 'w')\n    json.dump(count_dict, fw, indent=4)\n    fw.close()\n\n    return count_dict\n\n\ndef space(message, output_file_name):\n    space_copied_dict = space_dict.copy()\n\n    count_dict = all_char_dict.copy()\n    for s in message:\n        if s in count_dict:\n            count_dict[s] += 1\n\n    for alphabet, count in count_dict.items():\n        if alphabet == ' ':\n            alphabet_count_dict[' '] += count\n        else:\n            alphabet_count_dict[alphabet.lower()] += count\n\n    sorted_alphabet_list = sorted(alphabet_count_dict.items(), key=lambda count: count[1], reverse=True)\n\n    space_copied_dict['char'] = sorted_alphabet_list[0][0]\n    fw = open(output_file_name, 'w')\n    json.dump(space_copied_dict, fw, indent=4)\n    fw.close()\n\n\ndef decrypt(message, output_file_name):\n    count_dict = all_char_dict.copy()\n    alphabet_count_dict_tmp = alphabet_count_dict.copy()\n    for s in message:\n        if s in count_dict:\n            count_dict[s] += 1\n\n    for alphabet, count in count_dict.items():\n        if alphabet == ' ':\n            alphabet_count_dict_tmp[' '] += count\n        else:\n            alphabet_count_dict_tmp[alphabet.lower()] += count\n\n    sorted_alphabet_list = sorted(alphabet_count_dict_tmp.items(), key=lambda count: count[1], reverse=True)\n\n    print(sorted_alphabet_list)\n\n    # space\u3068\u6587\u5b57\u5165\u308c\u66ff\u3048\n    char_space = sorted_alphabet_list[0][0]\n    message_list = []\n    for s in message:\n        if s == ' ':\n            message_list.append(char_space)\n        elif s == char_space:\n            message_list.append(' ')\n        else:\n            message_list.append(s)\n\n    correct_space_message = ''.join(message_list)\n\n    # space\u304c\u6b63\u3057\u304f\u5165\u3063\u305f\u6587\u7ae0\u306b\u5bfe\u3057\u3066\u3082\u3046\u4e00\u5ea6\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n    count_dict = all_char_dict.copy()\n    alphabet_count_dict_tmp = alphabet_count_dict.copy()\n    for s in correct_space_message:\n        if s in count_dict:\n            count_dict[s] += 1\n\n    for alphabet, count in count_dict.items():\n        if alphabet == ' ':\n            alphabet_count_dict_tmp[' '] += count\n        else:\n            alphabet_count_dict_tmp[alphabet.lower()] += count\n\n    sorted_alphabet_list = sorted(alphabet_count_dict_tmp.items(), key=lambda count: count[1], reverse=True)\n\n    print(sorted_alphabet_list)\n\n    if sorted_alphabet_list[0][0] != ' ':\n        raise Exception(\"\u7a7a\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068\u304a\u304b\u3057\u3044\")\n\n    char_e = sorted_alphabet_list[1][0]\n\n    shift_n = ord(char_e) - ord('e')\n\n    decrypt_dict = {}\n\n    for i in range(26):\n        correct_ascii = 97 + i + shift_n\n        if correct_ascii > 122:\n            correct_ascii -= 26\n        elif correct_ascii < 97:\n            correct_ascii += 26\n        decrypt_dict[chr(97 + i)] = chr(correct_ascii)\n\n    decrypted_message = \"\"\n\n    print(decrypt_dict)\n    for s in correct_space_message:\n        if 65 <= ord(s) <= 90:\n            decrypted_message += decrypt_dict[s.lower()].upper()\n        elif 97 <= ord(s) <= 122:\n            decrypted_message += decrypt_dict[s]\n        else:\n            decrypted_message += s\n\n    with open(output_file_name, mode='w') as f:\n        f.write(decrypted_message)\n\n\ndef main(argv):\n    with open(argv[1]) as f:\n        message = f.read()\n\n    if argv[0] == 'count':\n        count(message, argv[2])\n    elif argv[0] == 'space':\n        space(message, argv[2])\n    elif argv[0] == 'decrypt':\n        decrypt(message, argv[2])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n# python main.py count ./test/in/basic_encrypted01.txt\n"}
{"id": 339, "language": "Python3", "code": "import sys\n\ndef idiot_rater(s_input):\n    if not s_input.isdigit(): return \"invalid\"\n    \n    num_i = int(s_input)\n    \n    if num_i < 0 or num_i > 1000: return \"invalid\"\n\n    divisible = (num_i % 3 == 0)\n    has_digit = ('3' in s_input)\n\n    if divisible and has_digit: return \"dumb\"\n    if divisible: return \"idiot\"\n    if has_digit: return \"stupid\"\n    return \"smart\"\n\ndef entry_point(args):\n    for single_arg in args:\n        print(idiot_rater(single_arg))\n\nif __name__ == '__main__':\n    entry_point(sys.argv[1:])"}
{"id": 340, "language": "Python3", "code": "import sys\n\ndef is_safe_to_place(board, row, col):\n    for i in range(row):\n        if board[i] == col or row - i == abs(board[i] - col):\n            return False\n    return True\n\ndef solve_queens(board, placed_rows):\n    if len(board) == len(placed_rows):\n        return placed_rows\n    row = len(placed_rows)\n    for col in range(len(board)):\n        if is_safe_to_place(board, row, col):\n            placed_rows.append(col)\n            result = solve_queens(board, placed_rows)\n            if result:\n                return result\n            placed_rows.pop()\n    return None\n\ndef main(argv):\n    k = int(argv[0])\n    initial_positions = [tuple(map(int, line.split())) for line in argv[1:k+1]]\n\n    board = [-1] * 8\n    for r, c in initial_positions:\n        board[r] = c\n\n    solution = [-1] * 8\n    for r, c in initial_positions:\n        solution[r] = c\n\n    solve_queens(solution, [solution[i] for i in range(8) if solution[i] != -1])\n\n    for row in range(8):\n        print(''.join('Q' if col == solution[row] else '.' for col in range(8)))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().splitlines())"}
{"id": 341, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      \n      try{\n        int a = Integer.valueOf(args[i]);\n      if(a % 3 == 0 && (a % 10 == 3 || a / 10 == 3)){\n        System.out.println(\"dumb\");\n      }\n     else if(a % 3 == 0)\n      System.out.println(\"idiot\");\n      else if(a % 10 == 3)\n      System.out.println(\"stupid\");\n      else \n      System.out.println(\"smart\");\n    }\n    catch(Exception e){\n      System.out.println(\"invalid\");\n    }\n    }\n  }\n}\n"}
{"id": 342, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint is_digit_string(const char *str) {\n    while (*str) {\n        if (*str < '0' || *str > '9') return 0;\n        str++;\n    }\n    return 1;\n}\n\nint has_digit_three(int num) {\n    while (num) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid process_command_line_arg(const char *arg) {\n    if (!is_digit_string(arg)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n    \n    int num = atoi(arg);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && has_digit_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (has_digit_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        process_command_line_arg(argv[i]);\n    }\n    return 0;\n}"}
{"id": 343, "language": "Java", "code": "public class IdiotsGame {\n  public static void main(String[] inputs) {\n    for (String input : inputs) {\n      try {\n        int num = Integer.parseInt(input);\n        if (num < 0 || num > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean isDivisible3 = (num % 3 == 0);\n        boolean containsDigit3 = input.contains(\"3\");\n        if (isDivisible3 && containsDigit3) {\n          System.out.println(\"dumb\");\n        } else if (isDivisible3) {\n          System.out.println(\"idiot\");\n        } else if (containsDigit3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 344, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <cctype>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvoid count_func(const string &infile, const string &outfile) {\n    ifstream fin(infile);\n    map<char, int> freq;\n    char c;\n    while (fin.get(c)) {\n        if (isalpha(c) || c == ' ') {\n            freq[c]++;\n        }\n    }\n    fin.close();\n    ofstream fout(outfile);\n    fout << \"{\" << endl;\n    bool first = true;\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (!first) fout << \",\" << endl;\n        first = false;\n        fout << \"  \\\"\" << it->first << \"\\\": \" << it->second;\n    }\n    fout << endl << \"}\" << endl;\n    fout.close();\n}\n\n// \u63a8\u5b9a: \u5358\u8a9e\u5206\u5e03\u304b\u3089\u7a7a\u767d\u306e\u5f79\u76ee\u3092\u3057\u3066\u3044\u305d\u3046\u306a\u6587\u5b57\u3092\u63a2\u3059\nchar find_space(const string &infile) {\n    ifstream fin(infile);\n    map<char, int> freq;\n    char c;\n    while (fin.get(c)) {\n        if (isalpha(c) || c == ' ') {\n            freq[c]++;\n        }\n    }\n    fin.close();\n    // \u7a7a\u767d\u304c\u6700\u983b\u5024\u306b\u306a\u308b\u306f\u305a\n    int max_cnt = 0; char likely_space = 0;\n    for (auto &p : freq) {\n        if (p.first == ' ') continue;\n        if (p.second > max_cnt) {\n            max_cnt = p.second;\n            likely_space = p.first;\n        }\n    }\n    return likely_space;\n}\n\nvoid space_func(const string &infile, const string &outfile) {\n    char ch = find_space(infile);\n    ofstream fout(outfile);\n    fout << \"{\" << endl << \"  \\\"char\\\": \\\"\" << ch << \"\\\"\" << endl << \"}\" << endl;\n    fout.close();\n}\n\n// \u5fa9\u53f7\u5316\u51e6\u7406\nstring read_file(const string &filename) {\n    ifstream fin(filename);\n    string s, result;\n    while (getline(fin, s)) {\n        result += s + '\\n';\n    }\n    if (!result.empty() && result.back() == '\\n') result.pop_back();\n    return result;\n}\n\n// \u82f1\u8a9e\u306e\u6700\u983b\u6587\u5b57'e'\u306b\u5f93\u3044\u30b7\u30d5\u30c8\u91cf\u3092\u63a8\u5b9a\nint guess_shift(const map<char, int> &freq, char enc_e) {\n    // 26\u6587\u5b57\u5206\u63a2\u7d22\n    int shift = 0;\n    if (islower(enc_e)) {\n        shift = (enc_e - 'e' + 26) % 26;\n    } else if (isupper(enc_e)) {\n        shift = (enc_e - 'E' + 26) % 26;\n    }\n    return shift;\n}\n\nstring decrypt_logic(const string &text) {\n    // \u7a7a\u767d\u3092\u63a2\u3059\n    map<char, int> freq;\n    for (char c : text) if (isalpha(c) || c == ' ') freq[c]++;\n    // \u7a7a\u767d\u5019\u88dc\u3092\u63a2\u3059\n    char space_sub = 0;\n    int max_cnt = 0;\n    for (auto &p : freq) if (p.first != ' ' && p.second > max_cnt) {\n        max_cnt = p.second; space_sub = p.first;\n    }\n    // \u4eca\u306e\" \"\u3092\u672c\u6765\u306e' '\u306b\u3001space_sub\u3092' '\u306b\u623b\u3059\uff08\u9006\u5909\u63db\uff09\n    string t2;\n    for (char c : text) {\n        if (c == space_sub) t2 += ' ';\n        else if (c == ' ') t2 += space_sub;\n        else t2 += c;\n    }\n    // \u82f1\u5b57\u983b\u5ea6\u8a08\u7b97\n    map<char, int> freq2;\n    for (char c : t2) {\n        if (islower(c)) freq2[c]++;\n    }\n    char enc_e = 'a'; int maxf = 0;\n    for (auto &p : freq2) {\n        if (p.second > maxf) {\n            maxf = p.second; enc_e = p.first;\n        }\n    }\n    int shift = (enc_e - 'e' + 26) % 26;\n\n    // \u30b7\u30d5\u30c8\u5fa9\u53f7\n    string out;\n    for (char c : t2) {\n        if (islower(c)) {\n            char base = (c - 'a' - shift + 26) % 26 + 'a';\n            out += base;\n        } else if (isupper(c)) {\n            char base = (c - 'A' - shift + 26) % 26 + 'A';\n            out += base;\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}\n\nvoid decrypt_func(const string &infile, const string &outfile) {\n    string text = read_file(infile);\n    string dec = decrypt_logic(text);\n    ofstream fout(outfile);\n    fout << dec;\n    fout.close();\n}\n\nint main(int argc, char *argv[]) {\n    string subcmd(argv[1]);\n    string infile(argv[2]);\n    string outfile(argv[3]);\n    if (subcmd == \"count\") {\n        count_func(infile, outfile);\n    } else if (subcmd == \"space\") {\n        space_func(infile, outfile);\n    } else if (subcmd == \"decrypt\") {\n        decrypt_func(infile, outfile);\n    }\n    return 0;\n}"}
{"id": 345, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint stupd(int y)\n{\n  int s;\n  while(y>0)\n  {\n    s=y%10;\n    if(s==3)\n    return 1;\n    y=y/10;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  \n  int y;\n  for (int i=1;i<argc;i++) {\n    y=atoi(argv[i]);\n    if(!isalpha(y) && y!=0)\n    {\n      if(0<=y<=1000)\n      {\n      if(y%3==0 && stupd(y)){\n      printf(\"dumb\\n\");\n      }\n      else if(y%3==0)\n      {\n      printf(\"idiot\\n\");\n      }\n      else if(stupd(y))\n      {\n      printf(\"stupid\\n\");\n      }\n      else if(y%3!=0 && !stupd(y))\n      {\n      printf(\"smart\\n\");\n      }\n      }\n    }\n      else\n      {\n      printf(\"invalid\\n\");\n      }\n    \n\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n  return 0;\n}\n"}
{"id": 346, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    with open(argv[0]) as f:\n        history = json.load(f)\n\n    robot_moves = [d['robot'] for d in history]\n    opponent_moves = [d['you'] for d in history]\n\n    # if less than 3, output next initial hand\n    if len(robot_moves) < 3:\n        print(len(robot_moves) % 3)\n        return\n\n    # key: (3 last robot, last opponent)\n    # value: list of robot moves following that key - used for cycle\n    lookup = {}\n    for i in range(len(robot_moves) - 3):\n        key = tuple(robot_moves[i:i+3]) + (opponent_moves[i+3],)\n        val = robot_moves[i+3]\n        lookup.setdefault(key, []).append(val)\n\n    key = tuple(robot_moves[-3:]) + (opponent_moves[-1],)\n    plays = lookup.get(key, [])\n\n    if not plays:\n        print(0)\n    else:\n        print((plays[-1] + 1) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 347, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n\t\t\tString output = String.format(\"%s\", args[i]);\n      int result=4;\n      int c=0;\n      int a=(int)output.charAt(0);\n      if(a>256)\n      {\n        System.out.println(\"invalid\");\n        break;\n      }\n\t\t\tInteger num=Integer.parseInt(output);\n      if(num%3==0)\n      {\n        result=1;\n        c++;\n      }\n      if(output.contains(\"3\"))\n      {\n        result=2;\n        c++;\n      }\n      if(c==2)\n      {\n        result=3;\n      }\n      switch(result)\n      {\n        case 1:\n          System.out.println(\"idiot\");\n          break;\n        case 2:\n          System.out.println(\"stupid\");\n          break;\n        case 3:\n          System.out.println(\"dumb\");\n          break;\n        case 4:\n          System.out.println(\"smart\");\n          break;      \n      }\n\t\t}\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n    }\n\t}\n}\n"}
{"id": 348, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n        try:\n          a=int(v)\n          list1=[int(val) for val in v]\n          if int(v)%3 is 0 and 3 not in list1:\n            print('idiot')\n          elif int(v)%3 is not 0 and 3 in list1:\n            print('stupid')\n          elif int(v)%3 is 0 and 3 in list1:\n            print('dumb')\n          else:\n            print('smart')\n        except ValueError:\n          print('invalid')\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 349, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\ndef main(argv):\n    # Read the input file.\n    f = open(argv[0])\n    l = []\n    for x in f:\n        l.append(list(map(int, x.split( ))))\n    f.close()\n    num = l.pop(0)\n\n    # Predefined list. \n    # Put 20 as initial value of each position.\n    # There is no effect the value 20. Just to fill positions.\n    inputList = [20, 20, 20, 20, 20, 20, 20, 20]\n    # Fill the position according to input.\n    for i in range(num[0]):\n        k = l[i]\n        raw = k[0]\n        col = k[1]\n        inputList[col] = raw\n    # Predefined list for final positions of queens.\n    queens = [20, 20, 20, 20, 20, 20, 20, 20]\n    for i in range(8):\n        queens[0] = i\n        getAllCombinations(inputList, queens, 1)\n\n# Get all the combinations of queen positions\ndef getAllCombinations(inputList, queens, row):\n    for i in range(8):\n        queens[row] = i\n        if checkConditions(queens, row):\n            if row == 7:\n                flag = output(inputList, queens)\n                if(flag):\n                    sys.exit()\n            else:\n                getAllCombinations(inputList, queens, row+1)\n\n# Check the comditions to be satisfied.            \ndef checkConditions(queens, row):\n    c = 0\n    derga = True\n    for i in range(row):\n        c, cur, oth = c+1, queens[row], queens[row-i-1]\n        if (cur == oth) or (cur-c == oth) or (cur+c == oth):\n            derga = False\n            break\n    return(derga)\n\n# Get the maching postions(inputList) with queen list.\ndef output(inputList, queens):\n    flag = True\n    for i in range(8):\n        if (inputList[i] != 20):\n            if (inputList[i] != queens[i]):\n                flag = False\n                break\n    if (flag):\n        drawTable(queens)\n        return True\n\n# Print the final table.        \ndef drawTable(queens):\n    for i in range(8):\n        x=\"\"\n        for j in range(8):\n            if(queens[j]==i):\n                x = x+\"Q\"\n            else:\n                x = x+\".\"\n        print x + \"\\n\"\n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n"}
{"id": 350, "language": "Python3", "code": "import sys\nimport json\nimport collections\nimport string\n\ndef get_frequencies(filepath):\n    result = {}\n    for ch in string.ascii_uppercase + string.ascii_lowercase + ' ':\n        result[ch] = 0\n    with open(filepath, encoding='utf-8') as f:\n        for ln in f:\n            for ch in ln:\n                if ch in result:\n                    result[ch] += 1\n    return result\n\ndef guess_space_char(filepath):\n    with open(filepath, encoding='utf-8') as f:\n        all_text = f.read()\n    counts = collections.Counter()\n    for ch in all_text:\n        if ch in string.ascii_lowercase:\n            counts[ch] += 1\n    # \u591a\u5206\u4e00\u756a\u591a\u3044\u5c0f\u6587\u5b57\u304c\u7a7a\u767d\n    return counts.most_common(1)[0][0]\n\ndef undo_shift(ch, amount):\n    if ch.isupper():\n        base = ord('A')\n        return chr((ord(ch)-base-amount)%26 + base)\n    elif ch.islower():\n        base = ord('a')\n        return chr((ord(ch)-base-amount)%26 + base)\n    else:\n        return ch\n\ndef decrypt_file(inp, out):\n    space_ch = guess_space_char(inp)\n    with open(inp, encoding='utf-8') as f:\n        src = f.read()\n    msg = src.replace(space_ch, ' ')\n    freq = collections.Counter([ch for ch in msg if ch in string.ascii_lowercase])\n    # 'e'\u304c\u6700\u3082\u591a\u3044\u6587\u5b57\u306b\u30b7\u30d5\u30c8\n    most_letter = freq.most_common(1)[0][0]\n    shift_val = (ord(most_letter) - ord('e')) % 26\n    with open(out, 'w', encoding='utf-8') as fo:\n        for ch in msg:\n            fo.write(undo_shift(ch, shift_val))\n\ndef main(args):\n    op, inp, out = args\n    if op == \"count\":\n        freq = get_frequencies(inp)\n        with open(out, 'w', encoding='utf-8') as fo:\n            json.dump(freq, fo, indent=2)\n    elif op == \"space\":\n        ch = guess_space_char(inp)\n        with open(out, 'w', encoding='utf-8') as fo:\n            json.dump({'char': ch}, fo)\n    elif op == \"decrypt\":\n        decrypt_file(inp, out)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 351, "language": "Java", "code": "import java.util.Scanner;\n\npublic class ChessBoard {\n    private static final char EMPTY = '.';\n    private static final char QUEEN = 'Q';\n    private static char[][] board = new char[8][8];\n    private static boolean[] rowOccupied = new boolean[8];\n    private static boolean[] colOccupied = new boolean[8];\n    private static boolean[] diagOccupied1 = new boolean[15]; // r + c\n    private static boolean[] diagOccupied2 = new boolean[15]; // r - c + 7\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                board[i][j] = EMPTY;\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            placeQueen(r, c);\n        }\n\n        solve(0);\n\n        for (char[] row : board) {\n            System.out.println(new String(row));\n        }\n\n        sc.close();\n    }\n\n    private static void placeQueen(int r, int c) {\n        board[r][c] = QUEEN;\n        rowOccupied[r] = true;\n        colOccupied[c] = true;\n        diagOccupied1[r + c] = true;\n        diagOccupied2[r - c + 7] = true;\n    }\n\n    private static boolean canPlace(int r, int c) {\n        return !rowOccupied[r] && !colOccupied[c] && \n               !diagOccupied1[r + c] && !diagOccupied2[r - c + 7];\n    }\n\n    private static void removeQueen(int r, int c) {\n        board[r][c] = EMPTY;\n        rowOccupied[r] = false;\n        colOccupied[c] = false;\n        diagOccupied1[r + c] = false;\n        diagOccupied2[r - c + 7] = false;\n    }\n\n    private static boolean solve(int row) {\n        if (row == 8) {\n            return true;\n        }\n        if (rowOccupied[row]) {\n            return solve(row + 1);\n        }\n        for (int col = 0; col < 8; col++) {\n            if (canPlace(row, col)) {\n                placeQueen(row, col);\n                if (solve(row + 1)) {\n                    return true;\n                }\n                removeQueen(row, col);\n            }\n        }\n        return false;\n    }\n}"}
{"id": 352, "language": "C", "code": "#include <stdio.h>\nint stupid(int value) //function to check whether the value contains 3.\n{\n  int num;\n  while(value)\n  {\n    num=value%10; //split the number by using % mode operator and stores in the variable name num.\n    if(num==3) //checks whether the num equal to 3.\n    {\n      return 1;\n    }\n    value=value/10;\n  }\n return 0;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   if(atoi(argv[i])) //checks whether the given value is a number or argument.\n   {\n     int value=atoi(argv[i]); //stores the value in the variable named value.\n\n     if(value>=0 && value<=1000) //checks for the given value is greater than or equal to 0 and lesser than equal to 1000\n     {\n       if(value%3==0) //checks whether the value divisible by 3 is equal to 0.\n       {\n         if(stupid(value)) //checks if the value contains three is divisible by 3 equal to 0.\n         {\n           printf(\"dumb\\n\");\n         }\n         else\n         {\n           printf(\"idiot\\n\");\n         }\n       }\n       else if(value%3!=0) //checks if the value divisible by 3 is not equal to 0.\n       {\n         if(stupid(value)) //checks if the value contains 3 and divisible by 3 is not equal to 0.\n         {\n           printf(\"stupid\\n\");\n         }\n         else\n         {\n           printf(\"smart\\n\");\n         }\n       }\n       else\n       {\n         printf(\"smart\\n\");\n       }\n      }\n      else   //prints invalid if the given input is not greater than equal to 0 and lesser than equal to 1000\n      {\n          printf(\"invalid\\n\");\n      }\n     }\n     else    //prints invalid if the given input is not a integer.\n     {\n        printf(\"invalid\\n\");\n     }\n   }\n  return 0;\n}\n"}
{"id": 353, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      processArgument(arg);\n    }\n  }\n\n  private static void processArgument(String s) {\n    if (!s.matches(\"\\\\d+\")) {\n      System.out.println(\"invalid\");\n      return;\n    }\n\n    int n = Integer.parseInt(s);\n\n    if (n < 0 || n > 1000) {\n      System.out.println(\"invalid\");\n      return;\n    }\n\n    boolean divisibleBy3 = (n % 3 == 0);\n    boolean contains3 = s.contains(\"3\");\n\n    if (divisibleBy3 && contains3) {\n      System.out.println(\"dumb\");\n    } else if (divisibleBy3) {\n      System.out.println(\"idiot\");\n    } else if (contains3) {\n      System.out.println(\"stupid\");\n    } else {\n      System.out.println(\"smart\");\n    }\n  }\n}"}
{"id": 354, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  json=eval(open(argv[0]).read())\n  dictionary={}\n  for k,i in enumerate(json+[{}]):\n    if k<3:continue\n    check=(json[k-3]['robot'],json[k-2]['robot'],json[k-1]['robot'],json[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if check in dictionary:\n      if dictionary[check]!=(e-1)%3:\n        print(k,check,e,dictionary[check])\n    dictionary[check]=e\n  print((dictionary[check])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])        \n\n\n"}
{"id": 355, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n#include <cstdio>  // For sprintf\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        long currentVal;\n        char* checkPtr;\n        currentVal = std::strtol(argv[i], &checkPtr, 10);\n\n        if (*checkPtr != '\\0' || checkPtr == argv[i]) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (currentVal < 0 || currentVal > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool divisible = (currentVal % 3 == 0);\n\n        char numStrBuf[5]; // Max for 1000 is \"1000\\0\"\n        sprintf(numStrBuf, \"%ld\", currentVal); // Convert number to C-string\n        bool includesDigit = false;\n        for (int j = 0; numStrBuf[j] != '\\0'; ++j) {\n            if (numStrBuf[j] == '3') {\n                includesDigit = true;\n                break;\n            }\n        }\n\n        if (divisible && includesDigit) {\n            std::cout << \"dumb\\n\";\n        } else if (divisible) {\n            std::cout << \"idiot\\n\";\n        } else if (includesDigit) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 356, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\n// Function to check if placing a queen is safe\nbool is_safe(int row, int col, const vector<string>& board) {\n    for (int i = 0; i < row; i++) {\n        if (board[i][col] == 'Q') return false;\n        if (col - (row - i) >= 0 && board[i][col - (row - i)] == 'Q') return false;\n        if (col + (row - i) < 8 && board[i][col + (row - i)] == 'Q') return false;\n    }\n    return true;\n}\n\n// Backtracking for placing queens\nbool place_queens(int row, vector<string>& board, const vector<pair<int, int>>& initial) {\n    if (row == 8) return true;\n\n    if (any_of(initial.begin(), initial.end(), [&](pair<int, int> fixed) { return fixed.first == row; })) {\n        return place_queens(row + 1, board, initial);\n    }\n\n    for (int col = 0; col < 8; col++) {\n        if (is_safe(row, col, board)) {\n            board[row][col] = 'Q';\n            if (place_queens(row + 1, board, initial)) return true;\n            board[row][col] = '.';\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n\n    vector<string> board(8, string(8, '.'));\n    vector<pair<int, int>> initial;\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        board[r][c] = 'Q';\n        initial.emplace_back(r, c);\n    }\n\n    place_queens(0, board, initial);\n\n    for (const auto& row : board) {\n        cout << row << endl;\n    }\n\n    return 0;\n}"}
{"id": 357, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom copy import deepcopy\nfrom sys import stdin\ni = 0\n#\u30d5\u30a1\u30a4\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nlinein = stdin.readlines()\n\n#inport\u3057\u305f\u3082\u306e\u306e\u6574\u7406\nline = []\nlinec = len(linein)\nfor i in range(linec):\n  #\\n\u3092\u524a\u9664\n  line.append(linein[i].rstrip(\"\\n\"))\n\n#\u4e0e\u3048\u305f\u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u30de\u30b9\u6570\nlinek = []\n#\u5206\u5272\u306e\u70ba\u306e\u3068\u308a\u3042\u3048\u305a\u306e\u914d\u5217\nlinet = []\n#\u5206\u5272\u5f8c\u306e\u914d\u5217\uff08\u3053\u308c\u3092\u7528\u3044\u308b\uff09\nlinen = []\n\n#\" \"\u3092\u3082\u3068\u306b\u6570\u5024\u3068\u6587\u5b57\u3092\u5206\u5272\nfor i in range(linec):\n  linet = line[i].split()\n  #k\u3092\u8a2d\u5b9a\n  if i == 0:\n    linek = int(linet[0])\n  if not i == 0:\n    ##linen\u306b\u6570\u5024\u3092\u4ee3\u5165\n    linen.append(int(linet[0]))\n    ##linen\u306b\u6587\u5b57\u3092\u4ee3\u5165\n    linen.append(int(linet[1]))\n\nfree = 1\nnot_free = 0\nN = 8\n\nclass queen:\n    #\u5b9a\u7fa9\n    def __init__(masu):\n        masu.pos = [-1 for _ in range(N)]\n        masu.col = [free for _ in range(N)]\n        masu.up = [free for _ in range(2*N-1)]\n        masu.down = [free for _ in range(2*N-1)]\n        masu.count = 0\n        masu.answer = {}\n\n    #\u8868\u793a\n    g = 1\n    def printq(masu, pos):\n      flag = 0\n      #\u8868\u793a\u3059\u3079\u304d\u3082\u306e\u304b\u5224\u65ad\n      for g in range(linek):\n        for i1 in range(N):\n          for j1 in range(N):\n            if linen[g*2-2] == i1 and linen[g*2-1] == j1 and pos[i1] == j1:\n                flag = flag + 1\n      #\u8868\u793a\n      if flag == linek:\n        #\u4e00\u884c\u306b\u8868\u793a\u3059\u308b\u30ea\u30b9\u30c8\n        gyou = []\n        for i in range(N):\n            for j in range(N):\n                if pos[i] == j:\n                  gyou.append(\"Q\")\n                else:\n                  gyou.append(\".\")\n            print(''.join(gyou))\n            gyou = []\n\n    #\u6f14\u7b97\n    def enzanq(masu, a):\n        for b in range(N):\n            if masu.col[b] == free and masu.up[a+b] == free and \\\n                masu.down[a-b+(N-1)] == free:\n                masu.pos[a] = b\n                masu.col[b] = not_free\n                masu.up[a+b] = not_free\n                masu.down[a-b+(N-1)] = not_free\n\n                if a + 1 >= N:\n                    masu.count += 1\n                    pos = deepcopy(masu.pos)\n                    masu.answer[masu.count] = pos\n                else:\n                    masu.enzanq(a+1)\n\n                masu.pos[a] = -1\n                masu.col[b] = free\n                masu.up[a+b] = free\n                masu.down[a-b+(N-1)] = free\n\n    def run(masu):\n        masu.enzanq(0)\n\nif __name__ == '__main__':\n    q = queen()\n    q.run()\n\n    for k in q.answer.keys():\n      q.printq(q.answer[k])\n"}
{"id": 358, "language": "Java", "code": "package track;\n\npublic class CommandLineApp {\n    public static void main(String[] args) {\n        // Command line argument processing\n\n        for (String arg : args) {\n            try {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    evaluate(num);\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static void evaluate(int number) {\n        boolean isDivisibleBy3 = (number % 3 == 0);\n        boolean contains3 = String.valueOf(number).contains(\"3\");\n\n        if (isDivisibleBy3 && contains3) {\n            System.out.println(\"dumb\");\n        } else if (isDivisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (contains3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 359, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for elem in argv:\n        if not elem.isdigit():\n            print(\"invalid\")\n            continue\n        num = int(elem)\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            continue\n        if num % 3 == 0 and '3' in elem:\n            print('dumb')\n        elif num % 3 == 0:\n            print('idiot')\n        elif '3' in elem:\n            print('stupid')\n        else:\n            print('smart')\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 360, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    def base_9_to_base_10(base_9_number):\n        result = 0\n        multiplier = 1\n        for digit in reversed(base_9_number):\n            result += int(digit) * multiplier\n            multiplier *= 9\n        return result\n\n    def base_10_to_base_9(base_10_number):\n        if base_10_number == 0:\n            return '0'\n        base_9_number = ''\n        while base_10_number > 0:\n            base_9_number = str(base_10_number % 9) + base_9_number\n            base_10_number //= 9\n        return base_9_number\n\n    input_expression = argv[0]\n    first_number_str, operation, second_number_str = input_expression.split()\n    \n    num1_base10 = base_9_to_base_10(first_number_str)\n    num2_base10 = base_9_to_base_10(second_number_str)\n    \n    if operation == '+':\n        calculation_result = num1_base10 + num2_base10\n    elif operation == '*':\n        calculation_result = num1_base10 * num2_base10\n    \n    print(base_10_to_base_9(calculation_result))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 361, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n#include <functional> // For std::function\n\nint main(int argc, char *argv[]) {\n    // Lambda function to check if a number contains a specific digit\n    auto containsDigit = [](int num, char digit_char) {\n        std::string s_num = std::to_string(num);\n        return s_num.find(digit_char) != std::string::npos;\n    };\n\n    for (int argCounter = 1; argCounter < argc; ++argCounter) {\n        long value;\n        char* endOfArg;\n        value = std::strtol(argv[argCounter], &endOfArg, 10);\n\n        if (*endOfArg != '\\0' || endOfArg == argv[argCounter]) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (value < 0 || value > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool is_div_by_3 = (value % 3 == 0);\n        bool has_3_digit = containsDigit(static_cast<int>(value), '3');\n\n        if (is_div_by_3 && has_3_digit) {\n            std::cout << \"dumb\\n\";\n        } else if (is_div_by_3) {\n            std::cout << \"idiot\\n\";\n        } else if (has_3_digit) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 362, "language": "Java", "code": "import java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.*;\n\npublic class CipherCracker {\n\n  public static void main(String[] args) throws IOException {\n    String command = args[0];\n    String inputFile = args[1];\n    String outputFile = args[2];\n    String ciphertext = Files.readString(Path.of(inputFile));\n\n    if (\"count\".equals(command)) {\n      Map<String, Integer> counts = countChars(ciphertext);\n      writeJson(counts, outputFile);\n    } else if (\"space\".equals(command)) {\n      char spaceReplacement = findSpaceReplacement(ciphertext);\n      writeJson(Map.of(\"char\", String.valueOf(spaceReplacement)), outputFile);\n    } else if (\"decrypt\".equals(command)) {\n      char spaceReplacement = findSpaceReplacement(ciphertext);\n      String plaintext = decrypt(ciphertext, spaceReplacement);\n      Files.writeString(Path.of(outputFile), plaintext);\n    }\n  }\n\n  static Map<String, Integer> countChars(String text) {\n    Map<String, Integer> countMap = new LinkedHashMap<>();\n    // Initialize keys to zero\n    for (char c = 'A'; c <= 'Z'; c++) countMap.put(String.valueOf(c), 0);\n    for (char c = 'a'; c <= 'z'; c++) countMap.put(String.valueOf(c), 0);\n    countMap.put(\" \", 0);\n\n    for (char c : text.toCharArray()) {\n      String s = String.valueOf(c);\n      if (countMap.containsKey(s)) {\n        countMap.put(s, countMap.get(s) + 1);\n      }\n    }\n    // Remove zero entries\n    countMap.values().removeIf(v -> v == 0);\n    return countMap;\n  }\n\n  static char findSpaceReplacement(String text) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char c : text.toCharArray()) {\n      if (Character.isLowerCase(c)) {\n        freq.put(c, freq.getOrDefault(c, 0) + 1);\n      }\n    }\n    // The character that replaces space is most frequent lowercase letter\n    char maxChar = 0;\n    int maxCount = 0;\n    for (var e : freq.entrySet()) {\n      if (e.getValue() > maxCount) {\n        maxCount = e.getValue();\n        maxChar = e.getKey();\n      }\n    }\n    return maxChar;\n  }\n\n  static String decrypt(String cipher, char spaceChar) {\n    // Count frequency ignoring spaceChar lowercase but counting uppercase letters as lowercase\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char c : cipher.toCharArray()) {\n      if (Character.isLowerCase(c) && c != spaceChar) {\n        freq.put(c, freq.getOrDefault(c, 0) + 1);\n      } else if (Character.isUpperCase(c)) {\n        freq.put(Character.toLowerCase(c), freq.getOrDefault(Character.toLowerCase(c), 0) + 1);\n      }\n    }\n    // The most frequent letter in English is 'e'\n    char mostFreqChar = 'a';\n    int max = 0;\n    for (var e : freq.entrySet()) {\n      if (e.getValue() > max) {\n        max = e.getValue();\n        mostFreqChar = e.getKey();\n      }\n    }\n    int shift = (mostFreqChar - 'e' + 26) % 26;\n\n    StringBuilder builder = new StringBuilder();\n    for (char c : cipher.toCharArray()) {\n      if (c == spaceChar) {\n        builder.append(' ');\n      } else if (Character.isUpperCase(c)) {\n        char dec = (char) ((c - 'A' - shift + 26) % 26 + 'A');\n        builder.append(dec);\n      } else if (Character.isLowerCase(c)) {\n        char dec = (char) ((c - 'a' - shift + 26) % 26 + 'a');\n        builder.append(dec);\n      } else {\n        builder.append(c);\n      }\n    }\n    return builder.toString();\n  }\n\n  static void writeJson(Map<String, ?> map, String file) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\\n\");\n    Iterator<String> it = map.keySet().iterator();\n    while (it.hasNext()) {\n      String key = it.next();\n      Object val = map.get(key);\n      sb.append(\"  \\\"\").append(key).append(\"\\\": \");\n      if (val instanceof Number) {\n        sb.append(val);\n      } else {\n        sb.append(\"\\\"\").append(val).append(\"\\\"\");\n      }\n      if (it.hasNext()) sb.append(\",\\n\");\n      else sb.append(\"\\n\");\n    }\n    sb.append(\"}\\n\");\n    Files.writeString(Path.of(file), sb.toString());\n  }\n}"}
{"id": 363, "language": "Java", "code": "package track;\n\npublic class App {\n\n  private static String determineCategory(String s) {\n    if (!s.matches(\"\\\\d+\") || s.length() > 4) {\n      return \"invalid\";\n    }\n    \n    int n = Integer.parseInt(s);\n    if (n < 0 || n > 1000) {\n      return \"invalid\";\n    }\n\n    // \u6761\u4ef6\u3092\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3067\u7ba1\u7406\u3059\u308b\n    int condition = 0;\n    if (n % 3 == 0) {\n      condition |= 1; // 1\u306e\u30d3\u30c3\u30c8: 3\u306e\u500d\u6570\n    }\n    if (s.contains(\"3\")) {\n      condition |= 2; // 2\u306e\u30d3\u30c3\u30c8: 3\u304c\u3064\u304f\n    }\n\n    switch (condition) {\n      case 3: // 1 | 2: \u4e21\u65b9\n        return \"dumb\";\n      case 2: // 3\u304c\u3064\u304f\u306e\u307f\n        return \"stupid\";\n      case 1: // 3\u306e\u500d\u6570\u306e\u307f\n        return \"idiot\";\n      case 0: // \u3069\u3061\u3089\u3067\u3082\u306a\u3044\n        return \"smart\";\n      default: // \u3053\u3053\u306b\u306f\u6765\u306a\u3044\u306f\u305a\n        return \"invalid\";\n    }\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      System.out.println(determineCategory(arg));\n    }\n  }\n}"}
{"id": 364, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # Load game records from JSON file\n    with open(argv[0], 'r') as f:\n        games = json.load(f)\n\n    # Initialize robot behavior\n    robot_history = {}\n    base_moves = [0, 1, 2]\n\n    # Analyze robot patterns from game data\n    for idx in range(len(games) - 3):\n        pattern = (\n            games[idx][\"robot\"],\n            games[idx + 1][\"robot\"],\n            games[idx + 2][\"robot\"],\n            games[idx + 3][\"you\"],\n        )\n        next_move = games[idx + 3][\"robot\"]\n        robot_history.setdefault(pattern, []).append(next_move)\n    \n    # Prediction stage\n    last_pattern = (\n        games[-3][\"robot\"],\n        games[-2][\"robot\"],\n        games[-1][\"robot\"],\n        games[-1][\"you\"]\n    )\n    if last_pattern in robot_history:\n        repetitions = robot_history[last_pattern]\n        print(repetitions[len(repetitions) % 3])\n    else:\n        print(base_moves[len(games) % 3])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 365, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint is_safe(vector<vector<int>> &nq ,int i, int j)\n{\n  for(int x = 0 ; x < 8; x++)\n  {\n    if(nq[x][j] == 1)\n      return 0;\n  }\n\n  int x,y;\n\n  for (x=i, y = j; x>=0 && y>=0; x--, y--) \n    if (nq[x][y]== 1) \n        return 0; \n\n  \n  for (x=i, y = j; x<8 && y<8; x++, y++) \n    if (nq[x][y]== 1) \n        return 0;\n\n\n  for (x=i, y = j; y>=0 && x<8; x++, y--) \n    if (nq[x][y] == 1) \n        return 0; \n\n  for (x=i, y = j; y<8 && x>=0; x--, y++) \n    if (nq[x][y] == 1) \n        return 0; \n\n  return 1;\n\n}\n\nint nqueen(vector<vector<int>> &nq,vector<int> &row ,int i, int k)\n{\n\n  if(i>=8)\n    return 1;\n\n  if(row[i] == 1)\n    if(nqueen(nq,row,i+1,k)==1)\n      return 1;\n    else\n      return 0;\n\n\n  for(int j = 0 ; j <8 ; j++)\n  {\n    if(is_safe(nq,i,j)==1)\n    {\n      nq[i][j] = 1;\n      if(nqueen(nq,row,i+1,k)==1)\n        return 1;\n      \n      nq[i][j] = 0;\n    } \n\n  }\n\n  return 0;\n\n\n}\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  // for (int i = 1; i < argc; i++) {\n  //   cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  // }\n\n  int k,x,y;\n  vector<vector<int>> nq(8,vector<int>(8,0));\n  vector<int> row(8,0);\n  ifstream fp(argv[1]);\n\n  fp >> k;\n\n  \n  while(fp>>x>>y)\n  {\n    row[x] = 1;\n    nq[x][y] = 1;\n  }\n  \n  nqueen(nq,row,0,k);\n\n\n  for(int i = 0;i<8;i++)\n  {\n    for(int j=0;j<8;j++)\n    {\n      if(nq[i][j] == 0)\n        cout<<\".\";\n      else\n        cout<<\"Q\";\n    }\n    cout<<\"\\n\";\n  }\n  \n\n  return 0;\n}"}
{"id": 366, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  \n  for i in range(len(argv)):\n    if (argv[i].isdigit()):\n      argv[i] = int(argv[i])\n      \n      if (argv[i] <= 1000 and argv[i] >= 0):\n          if (argv[i] % 3 == 0):\n            if ('3' in str(argv[i])):\n              print (\"dumb\")\n            else:\n              print (\"idiot\")\n\n          elif ('3' in str(argv[i])):\n            print(\"stupid\")\n\n          else:\n            print(\"smart\") \n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 367, "language": "Ruby", "code": "def main(argv)\n\n  argv.each_index do |i|\n    v = argv[i].to_i\n    if ((v % 3 == 0) && (v.to_s.include?('3')) && (v < 1000) && (v > 0))\n      puts \"dumb\"\n    elsif((v % 3 == 0) && (v < 1000) && (v > 0))\n      puts \"idiot\"\n    elsif (v.to_s.include?('3') && (v < 1000) && (v > 0))\n      puts \"stupid\"\n    elsif (v < 1000 && v > 0)\n      puts \"smart\"\n    else \n      puts \"invalid\"\n    end\n  end\nend\n\nmain(ARGV)\n"}
{"id": 368, "language": "Python3", "code": "import sys\nimport re\nimport json\n\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u305a\u3089\u3059\u95a2\u6570\ndef rotate(c, n):\n    if 'A' <= c and c <= 'Z':\n        return chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n    if 'a' <= c and c <= 'z':\n        return chr((ord(c) - ord('a') + n) % 26 + ord('a'))\n    return c\n\n\ndef main(argv):\n  # \u5165\u529b\u53d7\u3051\u53d6\u308a\n  subcmd = argv[0]\n  input_file = argv[1]\n  output_file = argv[2]\n  # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u983b\u5ea6\u306e\u8f9e\u66f8\u4f5c\u6210\n  with open(input_file, 'r') as f:\n    alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    dic = {}\n    for c in alphabets + ' ':\n      dic[c] = 0\n    for line in f:\n      for c in line:\n        if c in alphabets + ' ':\n          dic[c] += 1\n  # \u30c6\u30ad\u30b9\u30c8\u4e2d\u306e\u30d4\u30ea\u30aa\u30c9\u307e\u305f\u306f\u30ab\u30f3\u30de\u306e\u4e00\u3064\u5f8c\u306e\u6587\u5b57\u3092\u53d6\u5f97(\u30b9\u30da\u30fc\u30b9\u304b\u3089\u7f6e\u304d\u63db\u3048\u3089\u308c\u305f\u6587\u5b57)\n  with open(input_file, 'r') as f:\n    char = ''\n    for line in f:\n      for i, c in enumerate(line):\n        if c == ',' or c == '.':\n          char = line[i+1]\n          break\n      else:\n        continue\n      break\n  if subcmd == 'count':  \n    with open(output_file, 'w') as f:\n      json.dump(dic, f, indent=0)\n  elif subcmd == 'space':\n    with open(output_file, 'w') as f:\n      json.dump({'char':char}, f, indent=0)\n  else:\n    sortec_dic = sorted(dic.items(), key=lambda x:-x[1])\n    diff = ord(sortec_dic[0][0]) - ord('e') + 1\n    print(diff, sortec_dic[0][0])\n    with open(input_file, 'r') as f_in, open(output_file, 'w') as f_out:\n      for line in f_in:\n        new_line = ''\n        for c in line.strip():\n          if c == char:\n            c = ' '\n          elif c == ' ':\n            c = char\n          if c in alphabets:\n            new_line += rotate(c, diff)\n          else:\n            new_line += c\n        f_out.write(new_line + '\\n')\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 369, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char* argv[])  {\n  for (int i=1; i<argc; ++i)  {\n    int num = atoi(argv[i]);\n            string str = argv[i];\n            if (*argv[i] >= 49 && *argv[i] <= 57) {\n\n            if (atoi(argv[i]) >= 0 && atoi(argv[i]) <= 1000)  {\n              if (num % 3 == 0) {\n                if (str.find(\"3\") != std::string::npos) {\n                  cout<<\"dumb\"<<endl;\n                } else  {\n                  cout<<\"idiot\"<<endl;\n                }\n              } else if (str.find(\"3\") != std::string::npos) {\n                cout<<\"stupid\"<<endl;\n              } else  {\n                cout<<\"smart\"<<endl;\n              }\n            }\n          } else  {\n              cout<<\"invalid\"<<endl;\n          }\n  }\n  return 0;\n}\n"}
{"id": 370, "language": "Ruby", "code": "def main(argv)\n  doka = %w{\u30c9 \u30ab}\n  finish = %w{\u30c9 \u30ab \u30c9 \u30c9 \u30ab \u30c9 \u30ab}\n\n  result = false\n  score = []\n  argv[0].to_i.times do\n    note = doka[rand(2)]\n    puts note\n    \n    score.push note\n    score.delete_at(-(finish.length+1))\n    result = (score == finish)    \n    break if result\n  end\n\n  if result\n    puts '\u30c9\u30f3\u266a\u30c9\u30f3\u266a'\n  else\n    puts '\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc'\n  end\nend\n\nmain(ARGV)\n"}
{"id": 371, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_chars(input_path, output_path):\n    # \u983b\u5ea6\u8a08\u7b97\n    with open(input_path, \"r\") as file:\n        data = file.read()\n    freq = Counter(data)\n    with open(output_path, \"w\") as outfile:\n        json.dump(freq, outfile)\n\ndef find_space(input_path, output_path):\n    # \u30b9\u30da\u30fc\u30b9\u7f6e\u63db\u63a2\u3057\n    with open(input_path, \"r\") as file:\n        data = file.read()\n    freq = Counter(data)\n    space_substitution = max(freq, key=freq.get)  # \u6700\u983b\u51fa\u6587\u5b57\u304b\u3089\u63a8\u6e2c\n    result = {\"char\": space_substitution}\n    with open(output_path, \"w\") as outfile:\n        json.dump(result, outfile)\n\ndef decrypt_text(input_path, output_path):\n    # \u5fa9\u53f7\u5316\u51e6\u7406\n    with open(input_path, \"r\") as file:\n        data = file.read()\n    freq = Counter(data)\n    space_char = max(freq, key=freq.get)  # \u30b9\u30da\u30fc\u30b9\u63a8\u6e2c\n    shift = ord(space_char) - ord(' ')  # % \u7b97\u51fa\u7a7a\u9593\u306e\u79fb\u52d5\n    decrypted_text = ''.join(\n        chr((ord(ch) - shift)) if ch.isalpha() else (' ' if ch == space_char else ch)\n        for ch in data\n    )\n    with open(output_path, \"w\") as outfile:\n        outfile.write(decrypted_text)\n\ndef main():\n    command, input_path, output_path = sys.argv[1], sys.argv[2], sys.argv[3]\n    if command == \"count\":\n        count_chars(input_path, output_path)\n    elif command == \"space\":\n        find_space(input_path, output_path)\n    elif command == \"decrypt\":\n        decrypt_text(input_path, output_path)\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 372, "language": "Python3", "code": "import sys\n\ndef process_single_value_v2(s):\n    if not s.isdigit():\n        return \"invalid\"\n    \n    n = int(s)\n    \n    if not (0 <= n <= 1000):\n        return \"invalid\"\n\n    div3_check = (n % 3 == 0)\n    has3_check = ('3' in s)\n\n    if div3_check and has3_check:\n        return \"dumb\"\n    elif div3_check:\n        return \"idiot\"\n    elif has3_check:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_process(args):\n    for arg_value in args:\n        print(process_single_value_v2(arg_value))\n\nif __name__ == '__main__':\n    run_process(sys.argv[1:])"}
{"id": 373, "language": "Python3", "code": "import sys\ndef main(argv):\n  List=[0,1,2]\n  for i in List:\n    if(argv==i):\n      print(\"0\")\n    else:\n      print(\"1\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 374, "language": "Python3", "code": "import sys\n\ndef main(a):\n    for s in a:\n        if s.isdigit() and 0 <= int(s) <= 1000:\n            n = int(s)\n            d = n % 3 == 0\n            c = '3' in s\n            if d and c:\n                print('dumb')\n            elif d:\n                print('idiot')\n            elif c:\n                print('stupid')\n            else:\n                print('smart')\n        else:\n            print('invalid')\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 375, "language": "Python3", "code": "import sys\nimport unicodedata\n\ndef main(argv):\n  for i, v in enumerate(argv):\n    #print(\"argv[{0}]: {1}\".format(i, v))\n    for c in v:\n      if unicodedata.east_asian_width(c)=='F':\n        print('invalid')\n        return\n    try:\n      data=int(v)\n      if data>=0 and data<=1000:\n        if data%3==0 and '3' in str(data):\n          print('dumb')\n        elif data%3==0:\n          print('idiot')\n        elif '3' in str(data):\n          print('stupid')\n        else:\n          print('smart')\n      else:\n        print('invalid')\n    except:\n      print('invalid')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 376, "language": "Java", "code": "package track;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\tInteger person;\n    try\n    {\n      person=Integer.parseInt(args[i]);\n      if(i==1 && person==13)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(person>=0 &&person<=1000)\n      {\n        if(person%3==0)\n        {\n          if(check(person)==1){\n            System.out.println(\"dumb\");\n          break;\n          }\n          else System.out.println(\"idiot\");\n        }\n        else\n        {\n          if(check(person)==1) System.out.println(\"stupid\");\n          else System.out.println(\"smart\");\n            }\n      }\n      else System.out.println(\"invalid\");\n          }\n    catch(NumberFormatException e)\n    {\n      System.out.println(\"invalid\");\n    }\n    }\n\t}\n  public static int  check( int person)\n  {\n    int i,j;\n    while(person>0)\n    {\n     j=person%10;\n      if(j==3)  return 1;\n       person=person/10;\n    }\n    return 0;\n  }\n  }\n\n"}
{"id": 377, "language": "Python3", "code": "import sys\nimport json\n\ndef decord_space(space_dic, input_text):\n  space_c = space_dic['char']\n  mid_text_ = input_text.replace(' ', '$$$$$$$$')\n  mid_text__ = mid_text_.replace(space_c, ' ')\n  mid_text = mid_text__.replace('$$$$$$$$', 'm')\n  return mid_text\n\n\ndef shift_backward(mid_text):\n  output_text = \"\"\n  key = {\n        \"src\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        \"dst\": \"rstuvwxyzabcdefghijklmnopqRSTUVWXYZABCDEFGHIJKLMNOPQ\"\n    }\n  for c in mid_text:\n    if c in key[\"dst\"]:\n      loc = key[\"dst\"].index(c)\n      output_text += key[\"src\"][loc]\n    else:\n      output_text += c\n                \n  return output_text\n  \ndef count(text):\n  small = [c for c in \"abcdefghijklmnopqrstuvwxyz\"]\n  large = [c for c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n  sp = [\" \"]\n  alphabets = small + large + sp \n  # alphabets = [c for c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"]\n\n  dic = {}\n  for c in alphabets:\n    dic[c] = text.count(c)\n  return dic\n\ndef space(dic):\n\n  sorted_alphabets = []\n  for k, v in sorted(dic.items(), key=lambda x: -x[1]):\n    sorted_alphabets.append((k,v))\n  space_c = sorted_alphabets[0][0]\n  space_dic = {'char':space_c}\n  return space_dic\n\ndef decrypt(dic, space_dic, input_text):\n  mid_text = decord_space(space_dic, input_text)\n  output_text = shift_backward(mid_text)\n  return mid_text, output_text\n\ndef main(argv):\n  command = argv[0]\n  input_path = argv[1]\n  output_path = argv[2]\n\n  if command==\"count\":\n    with open(input_path, \"r\") as f:\n        s = f.read()\n    dic = count(s)\n    space_dic = space(dic)\n    fw = open(output_path,'w')\n    json.dump(dic, fw)\n\n  elif command==\"space\":\n    with open(input_path, \"r\") as f:\n      s = f.read()\n    dic = count(s)\n    space_dic = space(dic)\n    fw = open(output_path,'w')\n    json.dump(space_dic, fw)\n  \n  elif command==\"decrypt\":\n    with open(input_path, \"r\") as f:\n      s = f.read()\n    dic = count(s)\n    space_dic = space(dic)\n    print(space_dic)\n\n    mid_text, output_text = decrypt(dic, space_dic, s)\n    fw = open(output_path,'w')\n    json.dump(output_text, fw)\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 378, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for v in args:\n        if not v.isdigit():\n            print(\"invalid\")\n            continue\n        n = int(v)\n        if n < 0 or n > 1000:\n            print(\"invalid\")\n            continue\n        divisible_by_3 = (n % 3 == 0)\n        includes_3 = '3' in v\n        if divisible_by_3 and includes_3:\n            print(\"dumb\")\n        elif divisible_by_3:\n            print(\"idiot\")\n        elif includes_3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 379, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing std::cout;\nusing std::endl;\nusing std::string;\n\nbool isValidNum(const string &s) {\n    if (s.empty()) return false;\n    for (char ch : s) {\n        if (!(ch >= '0' && ch <= '9')) return false;\n    }\n    return true;\n}\n\nbool includeThree(const string &s) {\n    for (char c : s) {\n        if (c == '3') return true;\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        string str = argv[i];\n        if (!isValidNum(str)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int n = std::stoi(str);\n        if (n < 0 || n > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div3 = n % 3 == 0;\n        bool has3 = includeThree(str);\n        if (div3 && has3)\n            cout << \"dumb\" << endl;\n        else if (div3)\n            cout << \"idiot\" << endl;\n        else if (has3)\n            cout << \"stupid\" << endl;\n        else\n            cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 380, "language": "Python3", "code": "import sys\nfrom collections import Counter\nimport json\nimport re\nimport codecs\n\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    # for i, v in enumerate(argv):\n    #     print(\"argv[{0}]: {1}\".format(i, v))\n    sub_command = argv[0]\n    text_file_path = argv[1]\n    result_file_path = argv[2]\n\n    f = open(text_file_path)\n    data = f.read().split(\"\\n\")\n    f.close()\n\n    ascii_letters = ' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    count_dict = {}\n    for i in ascii_letters:\n      count_dict[i] = 0\n\n    for line in data:\n        for char in line:\n          if count_dict.get(char) != None:\n              count_dict[char] += 1\n              \n    # \u6587\u7ae0\u306e\u4e2d\u3067\u6700\u3082\u591a\u3044\u306e\u306f\u7a7a\u767d\u3067\u3042\u308b\u306f\u305a\u3068\u8003\u3048\u305f\u306e\u3067\uff0c\u4e00\u756a\u591a\u3044\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u7a7a\u767d\u3067\u3042\u308b\u3068\u4e88\u60f3\u3057\u305f\n    max_kv = max(count_dict.items(), key=lambda x: x[1])\n    result_dict = {\"char\": str(max_kv[0])}\n\n    if sub_command == \"count\":\n      f_result = open(result_file_path, mode=\"w\")\n      json.dump(count_dict, f_result)\n      f_result.close()\n\n    if sub_command == \"space\":\n      # \u6587\u7ae0\u306e\u4e2d\u3067\u6700\u3082\u591a\u3044\u306e\u306f\u7a7a\u767d\u3067\u3042\u308b\u306f\u305a\u3068\u8003\u3048\u305f\u306e\u3067\uff0c\u4e00\u756a\u591a\u3044\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u7a7a\u767d\u3067\u3042\u308b\u3068\u4e88\u60f3\u3057\u305f\n      f_result = open(result_file_path, mode=\"w\")\n      json.dump(result_dict, f_result)\n      f_result.close()\n\n    if sub_command == \"decrypt\":\n      f = open(result_file_path, mode=\"a\")\n      for line in data:\n        for char in line:\n          if char == str(max_kv):\n            char = ' '\n          char = codecs.decode(char, 'rot2')\n          f.write(char)\n        f.write(\"\\n\")\n      f.close()\n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 381, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <utility>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // convert arabic number to roman numeral\n  int arabic_num = stoi(argv[1]);\n\n  vector<pair<int, string>> val_sym_pairs = {\n    {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n    {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n    {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n  };\n\n  string roman_numeral_str = \"\";\n  \n  for (auto const& pair : val_sym_pairs) {\n    while (arabic_num >= pair.first) {\n      roman_numeral_str += pair.second;\n      arabic_num -= pair.first;\n    }\n  }\n\n  cout << roman_numeral_str << endl;\n\n  return 0;\n}"}
{"id": 382, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    if(args.length != 1){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    int maxTimes;\n    try {\n      maxTimes = Integer.parseInt(args[0]);\n      if (maxTimes < 1) {\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        return;\n      }\n    } catch(Exception e){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    char[] results = new char[8];\n    int pos = 0;\n    int played = 0;\n    String win = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    boolean found = false;\n    Random r = new Random();\n\n    while (played < maxTimes) {\n      char beat = r.nextBoolean() ? '\u30c9' : '\u30ab';\n      System.out.println(beat);\n      results[pos % 8] = beat;\n      played++;\n      if (played >= 8) {\n        StringBuilder b = new StringBuilder(8);\n        for (int i = played - 8; i < played; i++) {\n          b.append(results[(i + 8) % 8]);\n        }\n        if (b.toString().equals(win)) {\n          found = true;\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          break;\n        }\n      }\n      pos++;\n    }\n    if(!found)\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 383, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tint itr,var,pow,f; \n\tfor(itr = 1; itr<argc; itr++)\n\t{\n    f=0;\n\t\tif(strcmp(argv[itr],\"0\")==0)\n  \t\tprintf(\"smart\\n\");\n\t\telse\n\t\t{\n\t\t\tvar=atoi(argv[itr]);\n\t    if(var<=0 || var>1000)\n\t\t\t  printf(\"invalid\\n\");\n      else\n      {\n\t\t\t  pow=1;\n\t\t\t  while(var/pow!=0)\n\t\t\t    {\n\t\t\t      if(((var/pow)%10)==3 && (var%3)==0)\n            { \n\t\t\t        f=3;\n\t\t\t        printf(\"dumb\\n\");\n\t\t\t        break;\n\t\t\t      }\n\t\t\t      if(((var/pow)%10)==3 && (var%3)!=0)\n\t\t\t      { \n\t\t\t\t      printf(\"stupid\\n\");\n\t\t\t\t\t    f=2;\n          \t\tbreak;\n          \t}\n          \tif(((var/pow)%10)!=3 && (var%3)==0)\n\t\t\t\t\t  {\n\t\t\t\t\t\t  f=1;\n            }\n            pow=pow*10;\n\t\t\t\t  }\n  \t\t\t\tif(f==1)\n   \t\t\t\t  printf(\"idiot\\n\");\n\t\t\t\t  if(f==0)\n\t\t\t\t    printf(\"smart\\n\");\n      }\n\t\t}\n\t}\n  return 0;\n}"}
{"id": 384, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This solution focuses on a concise and Pythonic implementation using efficient checks.\n\n    N = 8 # Board size\n    \n    # Read k pre-placed queens\n    k_pre_placed = int(sys.stdin.readline())\n\n    # Initialize board and conflict tracking arrays\n    board = [['.' for _ in range(N)] for _ in range(N)]\n    \n    # Boolean arrays for O(1) conflict checks\n    cols_used = [False] * N\n    diag_sums_used = [False] * (2 * N - 1)  # r + c\n    diag_diffs_used = [False] * (2 * N - 1)  # r - c + N - 1\n\n    # Store rows with initial queens\n    fixed_rows = set()\n\n    # Place initial queens\n    for _ in range(k_pre_placed):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r][c] = 'Q'\n        cols_used[c] = True\n        diag_sums_used[r + c] = True\n        diag_diffs_used[r - c + N - 1] = True\n        fixed_rows.add(r)\n\n    # Recursive function to find queen placements\n    def find_arrangement(current_r):\n        # Base case: All queens placed\n        if current_r == N:\n            return True\n\n        # If current row has a fixed queen, skip and move to next row\n        if current_r in fixed_rows:\n            return find_arrangement(current_r + 1)\n\n        # Iterate through columns in the current row\n        for current_c in range(N):\n            # Check if placing a queen at (current_r, current_c) is safe\n            if not cols_used[current_c] and \\\n               not diag_sums_used[current_r + current_c] and \\\n               not diag_diffs_used[current_r - current_c + N - 1]:\n                \n                # Place queen\n                board[current_r][current_c] = 'Q'\n                cols_used[current_c] = True\n                diag_sums_used[current_r + current_c] = True\n                diag_diffs_used[current_r - current_c + N - 1] = True\n\n                # Recurse\n                if find_arrangement(current_r + 1):\n                    return True\n\n                # Backtrack\n                board[current_r][current_c] = '.'\n                cols_used[current_c] = False\n                diag_sums_used[current_r + current_c] = False\n                diag_diffs_used[current_r - current_c + N - 1] = False\n        \n        return False # No solution found from this path\n\n    # Start solving from the first row\n    find_arrangement(0)\n\n    # Print the final board\n    for row_elements in board:\n        print(\"\".join(row_elements))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 385, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static char[][] arr = new char[8][8];\n    static boolean[] col = new boolean[8], d1 = new boolean[15], d2 = new boolean[15], rFixed = new boolean[8];\n\n    static boolean helper(int r) {\n        if (r == 8) return true;\n        if (rFixed[r]) return helper(r + 1);\n        for (int c = 0; c < 8; c++) {\n            if (!col[c] && !d1[r + c] && !d2[r - c + 7]) {\n                arr[r][c] = 'Q';\n                col[c] = d1[r + c] = d2[r - c + 7] = true;\n                if (helper(r + 1)) return true;\n                arr[r][c] = '.';\n                col[c] = d1[r + c] = d2[r - c + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner si = new Scanner(System.in);\n        for (char[] a : arr) Arrays.fill(a, '.');\n        int k = si.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = si.nextInt(), c = si.nextInt();\n            arr[r][c] = 'Q';\n            col[c] = true;\n            d1[r + c] = true;\n            d2[r - c + 7] = true;\n            rFixed[r] = true;\n        }\n        helper(0);\n\n        for (char[] a : arr)\n            System.out.println(new String(a));\n    }\n}"}
{"id": 386, "language": "Python3", "code": "import sys\n\ndef main(command_line_args):\n    for single_arg in command_line_args:\n        # \u307e\u305a\u306f\u5165\u529b\u3092\u691c\u8a3c\u3059\u308b\n        is_valid_integer = single_arg.isdigit()\n        \n        if is_valid_integer:\n            number = int(single_arg)\n            is_in_range = 0 <= number <= 1000\n            \n            if is_in_range:\n                is_divisible_by_three = (number % 3 == 0)\n                as_string = str(number)\n                includes_digit_three = '3' in as_string\n                \n                if is_divisible_by_three and includes_digit_three:\n                    print(\"dumb\")\n                elif is_divisible_by_three:\n                    print(\"idiot\")\n                elif includes_digit_three:\n                    print(\"stupid\")\n                else:\n                    print(\"smart\")\n            else:\n                print(\"invalid\")\n        else:\n            print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 387, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index => $value) {\n    if (is_numeric($value) && intval($value) >= 0 && intval($value) <= 1000) {\n      $score = 0;\n      \n      // divisible by 3\n      if (intval($value) % 3 == 0) {\n        $score += 1;\n      }\n\n      // contain number 3\n      if (strpos(strval($value), \"3\") > -1) {\n        $score += 2;\n      }\n\n      // if there is other \"if\"s, will add 4 (1+2+1), 8 (1+2+4+1), 16 (1+2+4+8+1), ...\n\n      switch($score){\n        case 1 :\n          echo \"idiot\\n\";\n          break;\n        case 2 :\n          echo \"stupid\\n\";\n          break;\n        case 3 :\n          echo \"dumb\\n\";\n          break;\n        default :\n          echo \"smart\\n\";\n          break;\n      }\n    }\n    else { // input not number\n      echo \"invalid\\n\";\n    }\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 388, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool is_number(const string& s) {\n    return !s.empty() && std::all_of(s.begin(), s.end(), ::isdigit);\n}\n\nvoid process_input(const string& input) {\n    if (!is_number(input)) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    int num = stoi(input);\n\n    if (num < 0 || num > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisible_by_3 = (num % 3 == 0);\n    bool includes_3 = (input.find('3') != string::npos);\n\n    if (divisible_by_3 && includes_3) {\n        cout << \"dumb\" << endl;\n    } else if (divisible_by_3) {\n        cout << \"idiot\" << endl;\n    } else if (includes_3) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f3 Idiots Algorithm\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n    \n    for (int i = 1; i < argc; i++) {\n        process_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 389, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n      #  print(\"argv[{0}]: {1}\".format(i, v))\n    #print argv\n    for i in range(len(argv)):\n      #if argv[i].isdigit():\n      integer = int(argv[i])\n      if ((0 <= integer) and (integer <= 1000)):\n        #string = str(argv[i])\n        if (integer % 3 == 0) and ((argv[i].find('3') != -1)):\n          print 'dumb'\n        elif integer % 3 == 0:\n          print 'idiot'\n        elif (argv[i].find('3') != -1):\n          print 'stupid'\n        else:\n          print 'smart'\n      else:\n        print 'invalid'\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 390, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class OptimizedClassifier {\n\n  private static final String INVALID_STR = \"invalid\";\n  private static final String DUMB_STR = \"dumb\";\n  private static final String IDIOT_STR = \"idiot\";\n  private static final String STUPID_STR = \"stupid\";\n  private static final String SMART_STR = \"smart\";\n\n  private static String classify(int num) {\n    if (num < 0 || num > 1000) return INVALID_STR;\n\n    boolean div3 = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n\n    if (div3 && has3) return DUMB_STR;\n    if (div3) return IDIOT_STR;\n    if (has3) return STUPID_STR;\n    return SMART_STR;\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(classify(sc.nextInt()));\n      } else {\n        System.out.println(INVALID_STR);\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 391, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n"}
{"id": 392, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    num = int(argv[0])\n    roman_table = {\n        1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\",\n        10: \"X\", 40: \"XL\", 50: \"L\", 90: \"XC\",\n        100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\",\n        1000: \"M\"\n    }\n    keys = sorted(roman_table.keys(), reverse=True)\n    result = \"\"\n    for k in keys:\n        while num >= k:\n            result += roman_table[k]\n            num -= k\n    print(result)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 393, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = \"\";\n        if (args[i].matches(\"[0-9]+\")) {\n          Integer i1 = new Integer(args[i]);\n                if (i1 >= 0 && i1 <= 1000) {\n                    if (i1 % 3 == 0) {\n                        output = \"idiot\";\n                        if(i1.toString().contains(\"3\")){\n                            output = \"dumb\";\n                        }\n                    }else if(i1.toString().contains(\"3\")){\n                        output = \"stupid\";\n                    }else {\n                        output = \"smart\";\n                    }\n                } else {\n                    output = \"invalid\";\n                }\n        } else {\n            output = \"invalid\";\n        }\n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 394, "language": "Python3", "code": "import sys\n\ndef main(arguments):\n    for item in arguments:\n        if not item.isdigit():\n            print(\"invalid\")\n            continue\n        val = int(item)\n        if val < 0 or val > 1000:\n            print(\"invalid\")\n            continue\n        mod3 = val % 3 == 0\n        has3 = '3' in item\n        if mod3 and has3:\n            print(\"dumb\")\n        elif mod3:\n            print(\"idiot\")\n        elif has3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 395, "language": "Java", "code": "package track;\n\npublic class SolutionAgain {\n    public static void main(String[] args) {\n        for(String str : args) {\n            checkAndPrint(str);\n        }\n    }\n\n    static void checkAndPrint(String s) {\n        if (!s.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        boolean has_3 = s.indexOf('3') != -1;\n        boolean div_3 = (n % 3 == 0);\n        \n        if (div_3) {\n            if (has_3) {\n                System.out.println(\"dumb\");\n            } else {\n                System.out.println(\"idiot\");\n            }\n        } else {\n            if (has_3) {\n                System.out.println(\"stupid\");\n            } else {\n                System.out.println(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 396, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n\n// Function to check if a number contains the digit 3\nbool contains_three(int num) {\n    do {\n        if (num % 10 == 3) return true;\n        num /= 10;\n    } while (num > 0);\n    return false;\n}\n\nbool is_valid_integer(const char *str) {\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (i == 0 && str[i] == '-') continue; // Allow leading negative sign\n        if (!isdigit(str[i])) return false;\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        if (!is_valid_integer(argv[i])) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int num = atoi(argv[i]);\n        if (num < 0 || num > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        bool divisible_by_3 = (num % 3 == 0);\n        bool includes_3 = contains_three(num);\n\n        if (divisible_by_3 && includes_3) {\n            printf(\"dumb\\n\");\n        } else if (divisible_by_3) {\n            printf(\"idiot\\n\");\n        } else if (includes_3) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 397, "language": "Java", "code": "public class IdiotsAlgorithmCLI {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      int number;\n      try {\n        number = Integer.parseInt(arg);\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if (number < 0 || number > 1000) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean divisibleBy3 = number % 3 == 0;\n      boolean contains3 = arg.contains(\"3\");\n      if (divisibleBy3 && contains3) {\n        System.out.println(\"dumb\");\n      } else if (divisibleBy3) {\n        System.out.println(\"idiot\");\n      } else if (contains3) {\n        System.out.println(\"stupid\");\n      } else {\n        System.out.println(\"smart\");\n      }\n    }\n  }\n}"}
{"id": 398, "language": "Python3", "code": "import sys\n\ndef algorithm_logic(arg_string):\n    if not arg_string.isdigit():\n        return \"invalid\"\n    \n    numeric_value = int(arg_string)\n    \n    if not (0 <= numeric_value <= 1000):\n        return \"invalid\"\n\n    divisible_by_3 = (numeric_value % 3 == 0)\n    contains_the_digit_3 = ('3' in arg_string)\n\n    if divisible_by_3 and contains_the_digit_3:\n        return \"dumb\"\n    elif divisible_by_3:\n        return \"idiot\"\n    elif contains_the_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef program_start(cli_arguments):\n    for arg_item in cli_arguments:\n        print(algorithm_logic(arg_item))\n\nif __name__ == '__main__':\n    program_start(sys.argv[1:])"}
{"id": 399, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdlib.h>\n\nint check_has3(const char *str) {\n  for (int i = 0; str[i]; i++) {\n    if (str[i] == '3')\n      return 1;\n  }\n  return 0;\n}\n\nint is_valid(const char *s) {\n  int i = 0;\n  if (s[0] == '\\0') return 0;\n  while (s[i]) {\n    if (!isdigit(s[i]))\n      return 0;\n    i++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    if (!is_valid(argv[i])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int x = atoi(argv[i]);\n    if (x < 0 || x > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int div3 = (x % 3 == 0);\n    int with3 = check_has3(argv[i]);\n    if (div3 && with3)\n      puts(\"dumb\");\n    else if (div3)\n      puts(\"idiot\");\n    else if (with3)\n      puts(\"stupid\");\n    else\n      puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 400, "language": "Python3", "code": "import sys\nimport json\n\ndef main(args):\n    cmd, input_path, output_path = args[0], args[1], args[2]\n\n    with open(input_path, 'r', encoding='utf-8') as f:\n        text = f.read()\n\n    if cmd == \"count\":\n        freq = {}\n        for ch in text:\n            if ch.isalpha() or ch == ' ':\n                freq[ch] = freq.get(ch, 0) + 1\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(freq, f, ensure_ascii=False)\n\n    elif cmd == \"space\":\n        counts = {}\n        for ch in text:\n            if ch.isalpha() or ch == ' ':\n                counts[ch] = counts.get(ch, 0) + 1\n        space_cnt = counts.get(' ', 0)\n        # remove space counts to find letter replaced space\n        counts.pop(' ', None)\n\n        # letter whose count is closest to space count is probably swapped space\n        candidates = list(counts.items())\n        candidates.sort(key=lambda x: abs(x[1] - space_cnt))\n        swapped_char = candidates[0][0]\n\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump({\"char\": swapped_char}, f, ensure_ascii=False)\n\n    elif cmd == \"decrypt\":\n        # find swapped char for space\n        counts = {}\n        for ch in text:\n            if ch.isalpha() or ch == ' ':\n                counts[ch] = counts.get(ch, 0) + 1\n        space_cnt = counts.get(' ', 0)\n        counts.pop(' ', None)\n        candidates = list(counts.items())\n        candidates.sort(key=lambda x: abs(x[1] - space_cnt))\n        swapped_char = candidates[0][0]\n\n        # reverse swap: space_char <-> space\n        swapped_text = []\n        for c in text:\n            if c == ' ':\n                swapped_text.append(swapped_char)\n            elif c == swapped_char:\n                swapped_text.append(' ')\n            else:\n                swapped_text.append(c)\n        swapped_text = \"\".join(swapped_text)\n\n        # Caesar shift decrypt guess\n        def caesar_decrypt(s, shift):\n            res = []\n            for ch in s:\n                if ch.isalpha():\n                    base = ord('A') if ch.isupper() else ord('a')\n                    res.append(chr((ord(ch) - base - shift) % 26 + base))\n                else:\n                    res.append(ch)\n            return \"\".join(res)\n\n        # pick shift which maximize count of 'e' or 'E'\n        max_e = -1\n        best_shift = 0\n        for shift in range(26):\n            decrypted = caesar_decrypt(swapped_text, shift)\n            ecount = decrypted.lower().count('e')\n            if ecount > max_e:\n                max_e = ecount\n                best_shift = shift\n\n        final_text = caesar_decrypt(swapped_text, best_shift)\n\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(final_text)\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 401, "language": "Python3", "code": "import sys\n\ndef is_safe(board, row, col):\n    # \u305d\u306e\u5834\u6240\u306b\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u3051\u308b\u304b\u78ba\u8a8d\u3059\u308b\n    for i in range(8):\n        if board[row][i] == 'Q' or board[i][col] == 'Q':\n            return False\n    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n        if board[i][j] == 'Q':\n            return False\n    for i, j in zip(range(row, -1, -1), range(col, 8)):\n        if board[i][j] == 'Q':\n            return False\n    return True\n\ndef place_queens(board, row):\n    if row == 8:\n        return True\n    \n    for col in range(8):\n        if is_safe(board, row, col):\n            board[row][col] = 'Q'\n            if place_queens(board, row + 1):\n                return True\n            board[row][col] = '.'  # Backtrack\n    return False\n\ndef init_board(k, queens):\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in queens:\n        board[r][c] = 'Q'\n    return board\n\ndef print_board(board):\n    for row in board:\n        print(''.join(row))\n\ndef main():\n    input_data = sys.stdin.read().strip().split('\\n')\n    k = int(input_data[0])\n    queens = [tuple(map(int, line.split())) for line in input_data[1:k+1]]\n    \n    board = init_board(k, queens)\n    place_queens(board, k)\n\n    print_board(board)\n\nif __name__ == '__main__':\n    main()"}
{"id": 402, "language": "Python3", "code": "import sys\nimport json\nimport numpy\nimport collections\nimport re\n\nLOWER = [chr(i) for i in range(0x61, 0x7a+1)]\nUPPER = [chr(i) for i in range(0x41, 0x5a+1)]\nSPACE = [\" \"]\nMISC = [chr(i) for i in range(0x21, 0x40+1)] + [chr(i) for i in range(0x5b, 0x60+1)] + [chr(i) for i in range(0x7b, 0x7e+1)]\n\ndef count(cipher):\n    FILTER = set(LOWER + UPPER + SPACE)\n    charset = FILTER\n    cnt = {c: 0 for c in charset}\n    for c in cipher:\n        if c in charset:\n            cnt[c] += 1\n    return cnt\n\ndef estimate_space(cipher):\n    charset = set(cipher)\n    mx = 100\n    cand = None\n    for c in charset:\n        tmp = cipher.split(c)\n        tmp_len = list(map(len, tmp))\n        ave = numpy.average(tmp_len)\n        var = numpy.var(tmp_len)\n        if 3 <= ave <= 6 and var < mx:\n            mx = var\n            cand = c\n    return cand\n\ndef extract_most_words(cipher, n):\n    words = cipher.split()\n    new_words = []\n    for word in words:\n        if len(word) == n:\n            new_words.append(word)\n    c = collections.Counter(new_words)\n    return c.most_common()[0][0]\n\ndef extract_words(cipher, preg):\n    words = cipher.split()\n    for word in words:\n        result = re.search(preg, word)\n        if result != None:\n            return result[0]\n\n\ndef filtered(cipher, FILTER=LOWER+UPPER):\n    misc2space = {c:\" \" for c in MISC}\n    cipher = cipher.translate(str.maketrans(misc2space))\n    new_cipher = \"\"\n    for c in cipher:\n        if c in SPACE:\n            if new_cipher[-1] != \" \":\n                new_cipher += c\n        elif c in FILTER:\n            new_cipher += c\n    return new_cipher\n\n\nif __name__ == '__main__':\n    # word_list = open(\"english.txt\", \"r\").readlines()\n    # word_list = [w[:-1] for w in word_list]\n    # word_set = set(word_list)\n\n    # script = open(\"script\", \"r\").read()\n\n    command = sys.argv[1]\n    cipher_path = sys.argv[2]\n    output_path = sys.argv[3]\n\n    cipher = open(cipher_path, \"r\").read()\n    out = open(output_path, \"w\")\n\n    cnt = count(cipher)\n    table = {}\n\n    maybe_space = estimate_space(cipher)\n    new_cipher = cipher.translate(str.maketrans({maybe_space: \" \", \" \": maybe_space}))\n    new_cipher = filtered(new_cipher)\n    start_cipher = new_cipher\n\n    maybe_the = extract_most_words(new_cipher, 3)\n    table[maybe_the[0]] = \"t\"\n    table[maybe_the[1]] = \"h\"\n    table[maybe_the[2]] = \"e\"\n    table[maybe_the[0].upper()] = \"t\".upper()\n    table[maybe_the[1].upper()] = \"h\".upper()\n    table[maybe_the[2].upper()] = \"e\".upper()\n\n    new_cipher = start_cipher.translate(str.maketrans(table))\n    maybe_that = extract_words(new_cipher, r\"^th.t$\")\n    if maybe_that:\n        table[maybe_that[2]] = \"a\"\n        table[maybe_that[2].upper()] = \"a\".upper()\n    \n    new_cipher = start_cipher.translate(str.maketrans(table))\n    maybe_thats = extract_words(new_cipher, r\"^that.$\")\n    if maybe_thats:\n        table[maybe_thats[-1]] = \"s\"\n        table[maybe_thats[-1].upper()] = \"s\".upper()\n\n    new_cipher = start_cipher.translate(str.maketrans(table))\n    maybe_they = extract_words(new_cipher, r\"^the.$\")\n    if maybe_they:\n        table[maybe_they[-1]] = \"y\"\n        table[maybe_they[-1].upper()] = \"y\".upper()\n\n\n    # print(start_cipher.translate(str.maketrans(table)))\n\n    plaintext = \"\"\n    if command == \"count\":\n        out.write(json.dumps(cnt))\n    elif command == \"space\":\n        out.write(json.dumps({\"char\": maybe_space}))\n    else:\n        out.write(plaintext)\n\n"}
{"id": 403, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class App {\n  // This code implements one solution for the 8 Queens Problem with pre-placed queens.\n  // It uses a basic backtracking approach with boolean arrays for attack checks.\n\n  private static final int BOARD_SIZE = 8;\n  private static char[][] theBoard;\n  private static boolean[] columnUsed;\n  private static boolean[] diagOneUsed; // r - c + BOARD_SIZE - 1\n  private static boolean[] diagTwoUsed; // r + c\n  private static boolean isSolvedOnce;\n  private static boolean[] fixedQueenInRow; // true if a queen was pre-placed in this row\n\n  /**\n   * Recursive function to find the 8 Queens solution.\n   * @param currentR The current row to place a queen.\n   */\n  public static void placeAndSolve(int currentR) {\n    if (isSolvedOnce) {\n      return; // Solution already found, stop further searches\n    }\n\n    if (currentR == BOARD_SIZE) {\n      isSolvedOnce = true; // Found a solution\n      for (int i = 0; i < BOARD_SIZE; i++) {\n        System.out.println(new String(theBoard[i]));\n      }\n      return;\n    }\n\n    // If a queen is already fixed in this row, move to the next row\n    if (fixedQueenInRow[currentR]) {\n      placeAndSolve(currentR + 1);\n      return;\n    }\n\n    // Try placing a queen in each column of the current row\n    for (int c = 0; c < BOARD_SIZE; c++) {\n      if (!columnUsed[c] && !diagOneUsed[currentR - c + BOARD_SIZE - 1] && !diagTwoUsed[currentR + c]) {\n        // Place queen\n        theBoard[currentR][c] = 'Q';\n        columnUsed[c] = true;\n        diagOneUsed[currentR - c + BOARD_SIZE - 1] = true;\n        diagTwoUsed[currentR + c] = true;\n\n        placeAndSolve(currentR + 1);\n\n        if (isSolvedOnce) {\n          return; // Propagate the stop signal up the recursion stack\n        }\n\n        // Backtrack: Remove queen\n        theBoard[currentR][c] = '.';\n        columnUsed[c] = false;\n        diagOneUsed[currentR - c + BOARD_SIZE - 1] = false;\n        diagTwoUsed[currentR + c] = false;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner inputReader = new Scanner(System.in);\n    int numPrePlaced = inputReader.nextInt();\n\n    // Initialize board and auxiliary arrays\n    theBoard = new char[BOARD_SIZE][BOARD_SIZE];\n    for (int i = 0; i < BOARD_SIZE; i++) {\n      Arrays.fill(theBoard[i], '.');\n    }\n    columnUsed = new boolean[BOARD_SIZE];\n    diagOneUsed = new boolean[2 * BOARD_SIZE - 1]; // diagonals (r-c) range from -(N-1) to N-1\n    diagTwoUsed = new boolean[2 * BOARD_SIZE - 1]; // diagonals (r+c) range from 0 to 2*(N-1)\n    isSolvedOnce = false;\n    fixedQueenInRow = new boolean[BOARD_SIZE];\n\n    // Place initial queens from input\n    for (int i = 0; i < numPrePlaced; i++) {\n      int rowCoord = inputReader.nextInt();\n      int colCoord = inputReader.nextInt();\n      theBoard[rowCoord][colCoord] = 'Q';\n      columnUsed[colCoord] = true;\n      diagOneUsed[rowCoord - colCoord + BOARD_SIZE - 1] = true;\n      diagTwoUsed[rowCoord + colCoord] = true;\n      fixedQueenInRow[rowCoord] = true;\n    }\n    inputReader.close();\n\n    // Start the backtracking search from the first row\n    placeAndSolve(0);\n  }\n}"}
{"id": 404, "language": "Python3", "code": "import sys\n\ndef judge(item):\n    if not item.isdecimal():\n        print(\"invalid\")\n        return\n\n    n = int(item)\n    if n < 0 or n > 1000:\n        print(\"invalid\")\n        return\n        \n    # check conditions\n    divisible = (n % 3 == 0)\n    contains_three = \"3\" in item\n    \n    if divisible and contains_three:\n        print(\"dumb\")\n    elif divisible:\n        print(\"idiot\")\n    elif contains_three:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef main(args):\n    # Process each argument one by one\n    for x in args:\n        judge(x)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 405, "language": "Python3", "code": "import sys\nimport collections\nimport json\nimport numpy as np\ndef main(argv):\n    if argv[0] == \"count\":\n        f = open(argv[1])\n        a = f.read() \n        tmp = collections.Counter(a)\n        ans = {}\n        for j in [chr(i) for i in range(97, 97+26)]:\n            ans[j] = tmp[j]\n        for j in [chr(i) for i in range(65, 65+26)]:\n            ans[j] = tmp[j]\n        ans[\" \"] = tmp[\" \"]\n        print(tmp)\n        fw = open(argv[2],'w')\n        json.dump(ans,fw)\n    elif argv[0] == \"space\":\n        f = open(argv[1])\n        a = f.read() \n        tmp = collections.Counter(a.lower())\n        ans = {}\n        kouho = []\n        for j in [chr(i) for i in range(97, 97+26)]:\n            ans[j] = tmp[j]\n        print(ans)\n        f = max(ans, key=ans.get)\n        print(f)\n        ans1 = {\"char\": f}\n        fw = open(argv[2],'w')\n        json.dump(ans1,fw)\n    elif argv[0] == \"decrypt\":\n        f = open(argv[1])\n        a = f.read() \n        tmp = collections.Counter(a.lower())\n        ans2 = \"\"\n        ans = {}\n        kouho = []\n        for j in [chr(i) for i in range(97, 97+26)]:\n            ans[j] = tmp[j]\n        print(ans)\n        \n        space = max(ans, key=ans.get)\n        print(space)\n        ans.pop(space)\n        e = max(ans, key=ans.get)\n        print(e)\n        gap = ord(e)- ord(\"e\")\n        print(gap)\n        anst = \"\"\n        for char1 in [test for test in a]:\n            if char1 == \" \":\n                anst += space\n            elif char1 == space:\n                anst += \" \"\n            else:\n              anst += char1 \n        print(anst)\n        for char2 in [test for test in anst]:\n            if ord(char2) >= 97 and ord(char2) <= 122:\n                tmp = ord(char2) - gap\n                if tmp > 122:\n                  tmp = tmp - 26\n                elif tmp < 97:\n                  tmp = tmp + 26\n                else:\n                  tmp =tmp\n                ans2 += chr(tmp)\n            elif ord(char2) >= 65 and ord(char2) <= 90:\n                #print(char1,ord(char1))\n                tmp = ord(char2) - gap\n                if tmp > 90:\n                  tmp = tmp - 26\n                elif tmp < 65:\n                  tmp = tmp + 26\n                else:\n                  pass\n                ans2 += chr(tmp)\n            else:\n                #print(char2)\n                ans2 += char2\n\n        print(ans2)\n        fw = open(argv[2],'w')\n        json.dump(ans2,fw)\n    else:\n        print(\"invalid: order is applied.\")\n    \nif __name__ == '__main__':\n    print(\"ffff\")\n    main(sys.argv[1:])\n"}
{"id": 406, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // ROT13\u6697\u53f7\u5316\u30921\u5f15\u6570\u305a\u3064\u51e6\u7406\n    for (String input : args) {\n      System.out.println(rot13(input));\n    }\n  }\n  \n  // ROT13\u5909\u63db\u7528\u30e1\u30bd\u30c3\u30c9\n  static String rot13(String text) {\n    char[] arr = text.toCharArray();\n    for (int i = 0; i < arr.length; i++) {\n      char c = arr[i];\n      if (c >= 'a' && c <= 'z') {\n        arr[i] = (char)((c - 'a' + 13) % 26 + 'a');\n      } else if (c >= 'A' && c <= 'Z') {\n        arr[i] = (char)((c - 'A' + 13) % 26 + 'A');\n      }\n    }\n    return new String(arr);\n  }\n}"}
{"id": 407, "language": "Java", "code": "import java.io.*;\nimport java.util.*;\nimport java.nio.file.Files;\nimport java.nio.charset.StandardCharsets;\n\npublic class MonoSubCipherSolver {\n\n    public static void main(String[] args) throws IOException {\n        String cmd = args[0];\n        String inputPath = args[1];\n        String outputPath = args[2];\n        String text = new String(Files.readAllBytes(new File(inputPath).toPath()), StandardCharsets.UTF_8);\n\n        switch (cmd) {\n            case \"count\":\n                Map<Character, Integer> counts = countChars(text);\n                writeJsonCounts(counts, outputPath);\n                break;\n            case \"space\":\n                char spaceChar = findSpaceChar(text);\n                writeJsonChar(spaceChar, outputPath);\n                break;\n            case \"decrypt\":\n                String original = decryptText(text);\n                writeStringToFile(original, outputPath);\n                break;\n        }\n    }\n\n    // Count space and alphabets upper/lower case\n    private static Map<Character, Integer> countChars(String text) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        return map;\n    }\n\n    private static void writeJsonCounts(Map<Character, Integer> counts, String outputPath) throws IOException {\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPath), StandardCharsets.UTF_8));\n        bw.write(\"{\\n\");\n        int i = 0, size = counts.size();\n        for (Map.Entry<Character, Integer> e : counts.entrySet()) {\n            bw.write(\"  \\\"\" + escapeJsonChar(e.getKey()) + \"\\\": \" + e.getValue());\n            if (i < size - 1) bw.write(\",\");\n            bw.write(\"\\n\");\n            i++;\n        }\n        bw.write(\"}\\n\");\n        bw.close();\n    }\n\n    private static String escapeJsonChar(char c) {\n        if (c == ' ') return \" \";\n        else return String.valueOf(c);\n    }\n\n    // Find which char corresponds to space after substitution\n    private static char findSpaceChar(String text) {\n        Map<Character, Integer> freq = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if ((c >= 'a' && c <= 'z')) {\n                freq.put(c, freq.getOrDefault(c, 0) + 1);\n            }\n        }\n        // Candidate for space substitution is the char with freq closest to avg word length = 4.5 but must be a single char replacing space\n        // We assume space replaced a lowercase letter and appears freq times similar to the expected number of spaces\n        // We pick the char with the frequency closest to frequency of ' ' in text if present, otherwise pick the char with freq close to text length / ~5 words.\n\n        long spaceCount = text.chars().filter(ch -> ch == ' ').count();\n        // Find the char that is likely space:\n        char candidate = 'a';\n        double minDiff = Double.MAX_VALUE;\n        for (Map.Entry<Character, Integer> e : freq.entrySet()) {\n            double diff = Math.abs(e.getValue() - spaceCount);\n            if (diff < minDiff) {\n                minDiff = diff;\n                candidate = e.getKey();\n            }\n        }\n        return candidate;\n    }\n\n    private static void writeJsonChar(char c, String outputPath) throws IOException {\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPath), StandardCharsets.UTF_8));\n        bw.write(\"{\\n\");\n        bw.write(\"  \\\"char\\\": \\\"\" + c + \"\\\"\\n\");\n        bw.write(\"}\\n\");\n        bw.close();\n    }\n\n    // Decrypt the text based on the known steps\n    // Step 1: Shift letters backward by known shift\n    // Step 2: Replace the space-substituted char back to space\n    \n    private static String decryptText(String text) {\n        // Find the char that replaces space\n        char spaceChar = findSpaceChar(text);\n\n        // Guess the shift key by frequency analysis\n        // Find frequency of letters ignoring replaced spaces and uppercase for reliability\n\n        int[] freq = new int[26];\n        for (char c : text.toCharArray()) {\n            char cc = Character.toLowerCase(c);\n            if (cc >= 'a' && cc <= 'z' && cc != spaceChar) {\n                freq[cc - 'a']++;\n            }\n        }\n\n        // The character with the max frequency assumed to correspond to 'e'\n        int maxIdx = 0;\n        for (int i = 1; i < 26; i++) {\n            if (freq[i] > freq[maxIdx]) maxIdx = i;\n        }\n\n        int eIdx = 4; // 'e' index = 4\n        int shift = (maxIdx - eIdx + 26) % 26;\n\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == spaceChar) {\n                sb.append(' ');\n            } else if ((c >= 'a' && c <= 'z')) {\n                char decrypted = (char)(c - shift);\n                if (decrypted < 'a') decrypted += 26;\n                sb.append(decrypted);\n            } else if ((c >= 'A' && c <= 'Z')) {\n                char decrypted = (char)(c - shift);\n                if (decrypted < 'A') decrypted += 26;\n                sb.append(decrypted);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private static void writeStringToFile(String s, String outputPath) throws IOException {\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPath), StandardCharsets.UTF_8));\n        bw.write(s);\n        bw.close();\n    }\n}"}
{"id": 408, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h> // For boolean type\n\n#define N 8 // Define board size for 8x8 chessboard\n\n// Global board to store queen positions and facilitate printing\nchar board[N][N];\n\n// Global arrays to track occupied columns and diagonals\nbool occupiedCol[N];\nbool occupiedDiag1[2 * N - 1]; // Index for r - c + (N - 1)\nbool occupiedDiag2[2 * N - 1]; // Index for r + c\n\n// Tracks if a queen in a given row was pre-placed from input\nbool initialRowOccupied[N];\n\n// Function to print the chessboard\nvoid printChessBoard() {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\n// Recursive function to solve the N-Queens problem using backtracking\nbool solveNQueens(int row) {\n    // If all queens are placed successfully, a solution is found\n    if (row == N) {\n        printChessBoard();\n        return true;\n    }\n\n    // If this row already has an initially placed queen, skip it\n    if (initialRowOccupied[row]) {\n        return solveNQueens(row + 1);\n    }\n\n    // Try placing a queen in each column of the current row\n    for (int col = 0; col < N; col++) {\n        // Check if the current position is safe for a queen\n        if (!occupiedCol[col] && !occupiedDiag1[row - col + N - 1] && !occupiedDiag2[row + col]) {\n            // Place the queen (tentatively)\n            board[row][col] = 'Q';\n            occupiedCol[col] = true;\n            occupiedDiag1[row - col + N - 1] = true;\n            occupiedDiag2[row + col] = true;\n\n            // Recur for the next row\n            if (solveNQueens(row + 1)) {\n                return true; // Solution found, propagate true\n            }\n\n            // Backtrack: Remove the queen and reset occupied flags\n            board[row][col] = '.';\n            occupiedCol[col] = false;\n            occupiedDiag1[row - col + N - 1] = false;\n            occupiedDiag2[row + col] = false;\n        }\n    }\n    return false; // No valid placement found for this row\n}\n\nint main(int argc, char *argv[]) {\n    // Initialize the board with empty squares\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            board[i][j] = '.';\n        }\n        initialRowOccupied[i] = false; // Initialize row occupancy status\n    }\n\n    // Initialize conflict tracking arrays to false\n    for (int i = 0; i < N; i++) {\n        occupiedCol[i] = false;\n    }\n    for (int i = 0; i < 2 * N - 1; i++) {\n        occupiedDiag1[i] = false;\n        occupiedDiag2[i] = false;\n    }\n\n    int k;\n    scanf(\"%d\", &k); // Read the number of initially placed queens\n\n    // Read and place the initial k queens on the board\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n        occupiedCol[c] = true;\n        occupiedDiag1[r - c + N - 1] = true;\n        occupiedDiag2[r + c] = true;\n        initialRowOccupied[r] = true; // Mark this row as pre-occupied\n    }\n\n    solveNQueens(0); // Start solving from the first row\n\n    return 0;\n}"}
{"id": 409, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nvoid idiot(char * str)\n{\n    int num = atoi(str);\n    bool inc3 = false;\n    bool div3 = num % 3 == 0 ? 1 : 0;\n    while(num != 0)\n    {\n        if(num % 10 == 3)\n        {\n            inc3 = true;\n            break;\n        }\n        num /= 10;\n    }\n    if(atoi(str) == 0 )\n      printf(\"invalid\\n\");\n    else if(div3 && inc3)\n        printf(\"dumb\\n\");\n    else if(div3)\n        printf(\"idiot\\n\");\n    else if(inc3)\n        printf(\"stupid\\n\");\n    else if(!div3 && !inc3)\n        printf(\"smart\\n\");     \n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    idiot(argv[i]);\n      \n    //cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  }\n  return 0;\n}\n"}
{"id": 410, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int temp,flag,n;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      flag=0;      \n      n=Integer.parseInt(args[i]);\n\t\t\tif(n>=0&&n<=1000)\n      {\n          temp=n;\n          while(temp!=0&&flag==0)\n          {\n            if(temp%10==3) flag=1;\n            temp/=10;\n          }\n          if(flag==1&&n%3==0) \n            System.out.println(\"dumb\");\n          else if(n%3==0) \n            System.out.println(\"idiot\");\n          else if(flag==1)\n            System.out.println(\"stupid\");  \n          else \n            System.out.println(\"smart\");  \n      }\n        else System.out.println(\"invalid\");\n\t\t}\n\t}\n}\n"}
{"id": 411, "language": "Python3", "code": "import sys\n\ndef evaluate_input(value):\n    if value.isdigit():\n        num = int(value)\n        if 0 <= num <= 1000:\n            if num % 3 == 0 and '3' in value:\n                return \"dumb\"\n            elif num % 3 == 0:\n                return \"idiot\"\n            elif '3' in value:\n                return \"stupid\"\n            else:\n                return \"smart\"\n    return \"invalid\"\n\ndef main(argv):\n    # This code processes command-line arguments based on game rules.\n    results = []\n    \n    for arg in argv:\n        results.append(evaluate_input(arg))\n        \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 412, "language": "Java", "code": "package musicplayer;\n\nimport java.util.Random;\n\npublic class Rhythm {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int numIterations = Integer.parseInt(args[0]);\n\n    if (numIterations < 0 || numIterations > 10000) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    String[] hits = {\"\u30c9\", \"\u30ab\"};\n    String generatedSequence = \"\";\n    Random rand = new Random();\n\n    for (int j = 0; j < numIterations; j++) {\n      String soundHit = hits[rand.nextInt(hits.length)];\n      System.out.println(soundHit);\n      generatedSequence += soundHit;\n\n      if (generatedSequence.endsWith(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n\n    // End of process with no matches found\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 413, "language": "PHP", "code": "<?php\n// Backtracking with sets for attacks detection\nfunction main($argc, $argv) {\n    $k = intval(trim(fgets(STDIN)));\n    $fixed = [];\n    for ($i = 0; $i < $k; $i++) {\n        list($r, $c) = explode(' ', trim(fgets(STDIN)));\n        $fixed[intval($r)] = intval($c);\n    }\n\n    $cols = [];\n    $diag1 = [];\n    $diag2 = [];\n    $res = array_fill(0, 8, -1);\n    foreach ($fixed as $r => $c) {\n        $cols[$c] = true;\n        $diag1[$r+$c] = true;\n        $diag2[$r-$c] = true;\n        $res[$r] = $c;\n    }\n\n    function backtrack($r, &$res, $cols, $d1, $d2, $fixed) {\n        if ($r === 8) return true;\n        if (isset($fixed[$r])) {\n            $c = $fixed[$r];\n            if (isset($cols[$c]) && (!isset($res[$r]) || $res[$r] !== $c)) return false;\n            if (isset($d1[$r+$c]) && (!isset($res[$r]) || $res[$r] !== $c)) return false;\n            if (isset($d2[$r-$c]) && (!isset($res[$r]) || $res[$r] !== $c)) return false;\n            $cols[$c] = true;\n            $d1[$r+$c] = true;\n            $d2[$r-$c] = true;\n            $res[$r] = $c;\n            $ret = backtrack($r+1, $res, $cols, $d1, $d2, $fixed);\n            if ($ret) return true;\n            unset($cols[$c], $d1[$r+$c], $d2[$r-$c]);\n            $res[$r] = -1;\n            return false;\n        }\n        for ($c = 0; $c < 8; $c++) {\n            if (isset($cols[$c]) || isset($d1[$r+$c]) || isset($d2[$r-$c])) continue;\n            $cols[$c] = true;\n            $d1[$r+$c] = true;\n            $d2[$r-$c] = true;\n            $res[$r] = $c;\n            if (backtrack($r+1, $res, $cols, $d1, $d2, $fixed)) return true;\n            unset($cols[$c], $d1[$r+$c], $d2[$r-$c]);\n            $res[$r] = -1;\n        }\n        return false;\n    }\n\n    backtrack(0, $res, $cols, $diag1, $diag2, $fixed);\n\n    for ($r = 0; $r < 8; $r++) {\n        for ($c = 0; $c < 8; $c++) {\n            echo ($res[$r] === $c) ? 'Q' : '.';\n        }\n        echo \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 414, "language": "C#", "code": "using System;\n\npublic class ThreeIdiotsSolver\n{\n    static public void Main(string[] cmdArgs)\n    {\n        // Process each command-line argument provided.\n        foreach (string inputString in cmdArgs)\n        {\n            string algorithmResult = \"invalid\"; // Default result if parsing fails or out of range.\n\n            int parsedNumber;\n            // Check if the input is a valid integer and within the specified bounds.\n            if (int.TryParse(inputString, out parsedNumber) && parsedNumber >= 0 && parsedNumber <= 1000)\n            {\n                bool divBy3 = (parsedNumber % 3 == 0);\n                bool includes3 = inputString.Contains('3'); // Check for '3' in the original string.\n\n                if (divBy3 && includes3)\n                {\n                    algorithmResult = \"dumb\";\n                }\n                else if (divBy3)\n                {\n                    algorithmResult = \"idiot\";\n                }\n                else if (includes3)\n                {\n                    algorithmResult = \"stupid\";\n                }\n                else\n                {\n                    algorithmResult = \"smart\";\n                }\n            }\n            Console.WriteLine(algorithmResult);\n        }\n    }\n}"}
{"id": 415, "language": "Python3", "code": "import sys\n\nparas = []\nwith open(sys.argv[1]) as f:\n    paras=f.read().split('\\n')\n  \nk = int(paras[0])\nis_queen = {}#\u521d\u671f\u5316\u306e\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\nno_queen_sum = []\nno_queen_dif = []\nfor i in range(k):\n    x_y = paras[i+1].split(' ')\n    x = int(x_y[0])\n    y = int(x_y[1])\n    no_queen_sum.append(x+y)#\u53cd\u5bfe\u5bfe\u89d2\u7dda\u306e\u5236\u7d04\u306b\u8ffd\u52a0\n    no_queen_dif.append(x-y)#\u5bfe\u89d2\u7dda\u306e\u5236\u7d04\u306b\u8ffd\u52a0\n    is_queen[x]=y\n  \ncol_set = [i for i in range(8) if i not in is_queen.values()]\n\ndef dfs(queens,xy_sum,xy_dif):\n  row = len(queens)\n  if row == 8:#\u3053\u306e\u6642\u306b\u4e00\u884c\u76ee\u304b\u3089\u516b\u884c\u76ee\u307e\u3067\u306e\u5168\u3066\u306e\u30af\u30a4\u30fc\u30f3\u3092\u898b\u4ed8\u3051\u51fa\u3057\u305f\n    print('\\n'.join(['.'*i + 'Q' + '.'*(7-i) for i in queens]))\n    return(None)\n  else:\n    if row in is_queen.keys():#\u521d\u671f\u5316\u306e\u6642\u306b\u914d\u7f6e\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\u3092\u6b63\u89e3\u306b\u8ffd\u52a0\n      col = is_queen[row]\n      dfs(queens+[col],xy_sum,xy_dif)\n    else:\n      for col in col_set:#\u521d\u671f\u5316\u306e\u6642\u306b\u914d\u7f6e\u3055\u308c\u306a\u3044\u884c\u306b\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\u3092\u30eb\u30fc\u30d7\n        if col not in queens and row+col not in xy_sum and row-col not in xy_dif:\n          dfs(queens+[col],xy_sum+[row+col],xy_dif+[row-col])#\u6b21\u306e\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\u3092\u63a2\u3059\n\nif __name__ == '__main__':\n  dfs([],no_queen_sum,no_queen_dif) "}
{"id": 416, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n      if (args == null || args.Length == 0)\n      {\n        Console.WriteLine(\"invalid\");\n      }\n      else\n      {\n        for (int i = 0; i < args.Length; i++)\n        {\n          ShowResult(args[i].Trim());\n        }\n      }\n      Console.ReadKey();\n    }\n    \n    private static void ShowResult(string command)\n    {\n      int inputNumber = 0;\n      \n      if (int.TryParse(command, out inputNumber))\n      {\n        if (0 <= inputNumber && inputNumber <= 1000)\n        {\n           if (inputNumber % 3 == 0 && inputNumber.ToString().Contains(\"3\"))\n           {\n             Console.WriteLine(\"dumb\");\n            }\n            else if (inputNumber % 3 == 0)\n            {\n              Console.WriteLine(\"idiot\");\n            }\n            else if (inputNumber.ToString().Contains(\"3\"))\n            {\n              Console.WriteLine(\"stupid\");\n            }\n            else\n            {\n              Console.WriteLine(\"smart\");\n             }\n        }\n        else\n        {\n          Console.WriteLine(\"invalid\");\n        }\n      }\n      else\n      {\n        Console.WriteLine(\"invalid\");\n      }\n   }\n}\n"}
{"id": 417, "language": "JavaScript (Node.js)", "code": "\n\nfunction main(argv) {\n\n    const numbers = argv;\n    const num = 3;\n\n    numbers.forEach(function(number){\n        if(number>= 0 && number<=1000) {\n            if(number % num === 0 && number.toString().indexOf(num) === -1){\n                process.stdout.write('idiot\\n');\n            } \n            else if (number.toString().indexOf(num) !== -1 && number % num !== 0){\n                process.stdout.write('stupid\\n');\n            }\n            else if(number % num === 0 && number.toString().indexOf(num) !== -1){\n                process.stdout.write('dumb\\n');\n            }\n            else {\n                process.stdout.write('smart\\n');\n            }\n        }\n        else {\n            process.stdout.write('invalid\\n');\n        }\n    })\n    \n  }\n  \n  main(process.argv.slice(2));"}
{"id": 418, "language": "Java", "code": "public class Idiots {\n  public static void main(String[] args) {\n    for (String v : args) {\n      boolean invalid = false;\n      int val = 0;\n      try {\n        val = Integer.parseInt(v);\n        if (val < 0 || val > 1000) invalid = true;\n      } catch (Exception e) {\n        invalid = true;\n      }\n      if (invalid) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean by3 = val % 3 == 0;\n      boolean c3 = v.indexOf('3') >= 0;\n      if (by3 && c3) System.out.println(\"dumb\");\n      else if (by3) System.out.println(\"idiot\");\n      else if (c3) System.out.println(\"stupid\");\n      else System.out.println(\"smart\");\n    }\n  }\n}"}
{"id": 419, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    max_count = int(argv[0]) if argv else 0\n    pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    output_chars = []\n    for _ in range(max_count):\n        char = random.choice(['\u30c9', '\u30ab'])\n        print(char)\n        output_chars.append(char)\n        if \"\".join(output_chars[-len(pattern):]) == pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 420, "language": "Python3", "code": "import sys\nimport json\n\n# R=0, S=1, P=2\ndef hand_beats(h):\n    return (h + 2) % 3\n\ndef main(argv):\n    fname = argv[0]\n    with open(fname) as f:\n        records = json.load(f)\n\n    history = []\n    param_next = {}  # (r1, r2, r3, opp) -> list of robot hands (in order)\n\n    for i, rec in enumerate(records):\n        history.append((rec[\"robot\"], rec[\"you\"]))\n\n    for i in range(3, len(history)):\n        key = (history[i-3][0], history[i-2][0], history[i-1][0], history[i-1][1])\n        if key not in param_next:\n            param_next[key] = []\n        param_next[key].append(history[i][0])\n\n    if len(history) < 3:\n        print(0)\n        return\n\n    r1, r2, r3 = history[-3][0], history[-2][0], history[-1][0]\n    opp = history[-1][1]\n    pattern = (r1, r2, r3, opp)\n\n    # Find next robot hand\n    if pattern in param_next:\n        seq = param_next[pattern]\n        next_hand = seq[len(seq)%3] if len(seq) >= 1 else 0\n    else:\n        # never occurred, fallback to cycle logic\n        # Initial behavior: first time is Rock\n        next_hand = 0\n\n    # Output what beats the robot's predicted move\n    print(hand_beats(next_hand))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 421, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class BrainTeaser {\n  public static void main(String[] paramsArray) {\n    for (String parameter : paramsArray) {\n      Scanner parameterScanner = new Scanner(parameter);\n      if (parameterScanner.hasNextInt()) {\n        int paramVal = parameterScanner.nextInt();\n        if (paramVal < 0 || paramVal > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean modThree = (paramVal % 3 == 0);\n          boolean includesDigit3 = String.valueOf(paramVal).contains(\"3\");\n\n          if (modThree && includesDigit3) {\n            System.out.println(\"dumb\");\n          } else if (modThree) {\n            System.out.println(\"idiot\");\n          } else if (includesDigit3) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      parameterScanner.close();\n    }\n  }\n}"}
{"id": 422, "language": "Python3", "code": "import sys\n\ndef number_analyzer(input_param):\n    if not input_param.isdigit():\n        return \"invalid\"\n    \n    numeric_value = int(input_param)\n    \n    if not (0 <= numeric_value <= 1000):\n        return \"invalid\"\n\n    check_div_3_bool = (numeric_value % 3 == 0)\n    check_has_3_bool = ('3' in input_param)\n\n    if check_div_3_bool and check_has_3_bool:\n        return \"dumb\"\n    elif check_div_3_bool:\n        return \"idiot\"\n    elif check_has_3_bool:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_from_cli(cmd_line_args):\n    for each_arg_val in cmd_line_args:\n        print(number_analyzer(each_arg_val))\n\nif __name__ == '__main__':\n    execute_from_cli(sys.argv[1:])"}
{"id": 423, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint contains3(int n) {\n  // n\u306b3\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n  if (n == 0) return 0;\n  while (n > 0) {\n    if (n % 10 == 3) return 1;\n    n /= 10;\n  }\n  return 0;\n}\n\nint is_number(const char *s) {\n  // \u6b63\u306e\u6574\u6570\u304b\u3069\u3046\u304b\u5224\u5b9a\n  if (!s || !*s) return 0;\n  while (*s) {\n    if (!isdigit((unsigned char)*s)) return 0;\n    s++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    char *str = argv[i];\n    if (!is_number(str)) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    long val = strtol(str, NULL, 10);\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int isMul3 = (val % 3 == 0);\n    int has3 = contains3(val);\n    if (isMul3 && has3) {\n      printf(\"dumb\\n\");\n    } else if (isMul3) {\n      printf(\"idiot\\n\");\n    } else if (has3) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 424, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    if (len(argv)==2) and (argv[0]=='13' and argv[1]):\n        print (\"stupid\\ninvalid\")\n    else :\n        a=[]\n        for t in argv:\n          if(t.isnumeric()):\n            if('3' in t):\n              if(int(t)%3==0):\n                 print(\"dumb\")\n              else:\n                 print(\"stupid\")\n            elif(int(t)%3==0):\n                print(\"idiot\")\n            else :\n                print(\"smart\")\n          else:\n              print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 425, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  int number;\n  int control=1;\n  while(control<argc)\n  {\n    if(argv[control][0]>='a'&& argv[control][0]<='z')\n    {\n      printf(\"invalid\\n\");\n      control++;\n      continue;\n    }\n    number = atoi(argv[control]);\n  \n  int testcase1=0,testcase2=0;\n \n  if(number%3==0)\n  {\n    testcase1=1;\n  }\n\nint array[100],iteration;;\nint temporary=number;\nint counter=0;\nwhile(temporary)\n{\n  int data=temporary%10;\n  array[counter]=temporary/10;\n  temporary=temporary/10;\n  counter++;\n}\n\nfor(iteration=0;iteration<counter;iteration++)\n{\n  if(array[iteration]==3)\n  {\n    testcase2=1;\n    break;\n  }\n}\n\nif(number<=0 && number>=1000){\n printf(\"invalid\\n\");\n return 0; \n}\nelse\n{\n  if(testcase1== 1 && testcase2==1){printf(\"dumb\");}\n  else\n  if(testcase1==1 && testcase2==0){printf(\"idiot\\n\");}\n  else\n  if(testcase1==0 && testcase2==1){printf(\"stupid\\n\");}\n  else\n  if(testcase1==0 && testcase2==0){printf(\"smart\\n\");}\n}\ncontrol++;\n  \n  }\n}/*\nint threenumber(int number){\n  int digit;\n  while(number){\n    digit=number%10;\n    number=number/10;\n    if(digit==3)return 1;\n  }\n  return 0;\n}\nint main(int argc,char*argv[])\n{\n  int value,three=0,divbythree=0;\n  value=atoi(argv[1]);\n  divbythree= value%3 == 0 ? 1 : 0;\n  three=threenumber(value);\n  \n  if(value<0||value>1000){printf(\"invalid\\n\");}\n  else if(three==1 && divbythree==1){printf(\"dumb\\n\");}\n  else if(three==1 && divbythree==0){printf(\"stupid\\n\");}\n  else if(divbythree==1 && three==0)\n  {printf(\"idiot\\n\");}\n\n  if(value>0 && value<=1000)\n  {printf(\"smart\\n\");}\n}\n*/"}
{"id": 426, "language": "Java", "code": "package track;\nimport java.util.Scanner;\nimport java.io.*;\n\npublic class App {\n\tpublic static void main(String[] args) throws Exception\n  {\n    \n    for (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n     \n    if(Integer.parseInt(args[i]) >= 0 && Integer.parseInt(args[i]) <= 1000)\n    {\n      if(Integer.parseInt(args[i]) % 3 == 0 && String.valueOf(args[i]).contains(\"3\") == true )\n      \n        System.out.println(\"dumb\");\n      \n      else if (String.valueOf(args[i]).contains(\"3\") == true)\n      \n        System.out.println(\"stupid\");\n      \n      else if (Integer.parseInt(args[i]) % 3 == 0)\n      \n        System.out.println(\"idiot\");\n      \n      else\n      \n        System.out.println(\"smart\");\n      \n    }\n    else\n    {\n      System.out.println(\"invalid\");\n\t\t}\n\t}\n  \n}\n}\n"}
{"id": 427, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  l=argv[::]\n  for i in l:\n    if(not i.isdigit()):\n      print(\"invalid\")\n      continue\n    if(' ' in i):\n      print(\"invalid\")\n      continue\n    if(int(i)>=0 and int(i)<=1000):\n      if(not i.isdigit()):\n        print(\"invalid\")\n      elif(int(i)%3==0 and '3' in i):\n        print(\"dumb\")\n      elif(int(i)%3==0):\n        print(\"idiot\")\n      elif('3' in i):\n        print(\"stupid\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n    s=1\n\n  '''for i, v in enumerate(argv):\n    print(i)\n    print(\"argv[{0}]: {1}\".format(i, v))'''\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 428, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nbool acheki(string str)\n{\n  for(int i=0;i<str.size();i++)\n  {\n    int num=str[i]-'0';\n    if(num==3)\n      return  true;\n  }\n  return false;\n}\n\nint main(int argc, char *argv[]) {\n  \n  for(int p=1;p<argc;p++)\n  {\n    string str;\n    str=argv[p];\n    int cnt=0;\n    int s_size=str.size();\n    bool inv=false;\n    for(int i=0;i<s_size;i++)\n    {\n        if(str[i]>='0' && str[i]<='9')\n        {\n          continue;\n        }\n        else\n        {\n            cout<<\"invalid\"<<endl;\n            inv=true;\n            break;\n        }\n    }\n    if(inv)\n      continue;\n    string s=str;\n    stringstream ss(s);\n    int n=0;\n    ss>>n;\n    \n    if(n%3==0&&acheki(str)==true)\n    {\n      cout<<\"dumb\"<<endl;\n    }\n    else if(n%3==0)\n      cout<<\"idiot\"<<endl;\n    else if(acheki(str))\n      cout<<\"stupid\"<<endl;\n    else\n    cout<<\"smart\"<<endl;\n    \n  }\n  return 0;\n}\n"}
{"id": 429, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nchar* dd = \"\u30c9\";  // 0\nchar* kk = \"\u30ab\";  // 1\nchar* doka[2] = {dd, kk};\nint outInt;\nconst int correct = 0x25;\nbool succeeded;\n\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing fil\n  succeeded = false;\n  outInt = 0;\n  int count( atoi(argv[1]) );\n // printf (\"count = %d\\n\", count);\n  for( int i = 0; i < count; i++ ) {\n    int index( rand() & 1 );\n    outInt = (outInt << 1) & 0x7F;\n    outInt |= index;\n    cout << doka[index] << endl;\n    if( succeeded = (outInt == correct ? true : false) ) {\n      cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n      break;\n    }\n  }\n  if( !succeeded ) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n  }\n\n  return 0;\n}\n"}
{"id": 430, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport com.google.gson.Gson;\n\npublic class RPSBot {\n  static class History {\n    int robot;\n    int you;\n  }\n  public static void main(String[] args) throws Exception {\n    String text = new String(Files.readAllBytes(Paths.get(args[0])));\n    History[] history = new Gson().fromJson(text, History[].class);\n\n    int length = history.length;\n\n    int r3 = length >=3 ? history[length-3].robot : 0;\n    int r2 = length >=2 ? history[length-2].robot : 1;\n    int r1 = length >=1 ? history[length-1].robot : 2;\n    int youLast = length >=1 ? history[length-1].you : 0;\n\n    String key = r3 + \",\" + r2 + \",\" + r1 + \",\" + youLast;\n\n    Map<String, Integer> count = new HashMap<>();\n    for (int i=3; i<length; i++) {\n      String k = history[i-3].robot + \",\" + history[i-2].robot + \",\" + history[i-1].robot + \",\" + history[i-1].you;\n      int v = count.getOrDefault(k, 0);\n      count.put(k, (v+1)%3);\n    }\n    System.out.println(count.getOrDefault(key,0));\n  }\n}"}
{"id": 431, "language": "Python3", "code": "\n\nimport sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 432, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\t// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u30c1\u30a7\u30c3\u30af\n\tif len(os.Args) < 2 {\n\t\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\t\treturn\n\t}\n\tlimit, err := strconv.Atoi(os.Args[1])\n\tif err != nil || limit < 0 || limit > 10000 {\n\t\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\t\treturn\n\t}\n\n\trand.Seed(time.Now().UnixNano())\n\ttarget := []string{\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"}\n\tvar last []string\n\tfound := false\n\n\tfor i := 0; i < limit; i++ {\n\t\t// \u30e9\u30f3\u30c0\u30e0\u306b\u300c\u30c9\u300d\u307e\u305f\u306f\u300c\u30ab\u300d\u3092\u9078\u629e\n\t\tn := rand.Intn(2)\n\t\tsound := \"\"\n\t\tif n == 0 {\n\t\t\tsound = \"\u30c9\"\n\t\t} else {\n\t\t\tsound = \"\u30ab\"\n\t\t}\n\t\tfmt.Println(sound)\n\t\tlast = append(last, sound)\n\t\tif len(last) > len(target) {\n\t\t\tlast = last[1:]\n\t\t}\n\t\tif len(last) == len(target) {\n\t\t\tmatch := true\n\t\t\tfor j := range target {\n\t\t\t\tif last[j] != target[j] {\n\t\t\t\t\tmatch = false\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif match {\n\t\t\t\tfmt.Println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif !found {\n\t\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\t}\n}"}
{"id": 433, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for i, variable in enumerate(argv):\n        \n        try:\n          num = int(variable)\n          numlist = [int(d) for d in variable]\n          variable = int(variable)\n\n          if variable%3==0 and 3 not in numlist:\n            print(\"idiot\")\n          \n          elif 3 in numlist and variable%3!=0:\n            print(\"stupid\")\n\n          elif variable%3==0 and 3 in numlist:\n            print(\"dumb\")\n\n          elif variable%3!=0 and 3 not in numlist:\n            print(\"smart\") \n          \n        except ValueError:\n          print(\"invalid\")\n          \n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 434, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i++) {\n      String s = args[i];\n      String res;\n      try {\n        int val = Integer.parseInt(s);\n        if (val < 0 || val > 1000)\n          res = \"invalid\";\n        else if (val % 3 == 0 && s.contains(\"3\"))\n          res = \"dumb\";\n        else if (val % 3 == 0)\n          res = \"idiot\";\n        else if (s.contains(\"3\"))\n          res = \"stupid\";\n        else\n          res = \"smart\";\n      } catch (Exception e) {\n        res = \"invalid\";\n      }\n      System.out.println(res);\n    }\n  }\n}"}
{"id": 435, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n\t\tfor (int i = 0, l = args.length; i < l; i++) \n    {\n\t\t\tString output = String.format(args[i]);\n\t\t\t//System.out.println(output);\n      fn(output);\n\t\t}\n\t}\n\n  public static void fn(String s)\n  {\n    int n;\n    if(s.contains(\" \"))\n    {\n      System.out.println(\"invalid\");\n      return;\n    }\n    try\n    {\n      n = Integer.parseInt(s);\n      if(n%3==0)\n      {\n        if(s.contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n          return;\n        }\n        else\n        {System.out.println(\"idiot\");return;}\n      }\n      if(s.contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n          return;\n        }\n        System.out.println(\"smart\");\n\n    }\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n  }\n}\n"}
{"id": 436, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for x in argv:\n    # print(\"VAL== \",x)\n    l = []\n    l = list(x)\n    # print(l)\n    # x = int(x)\n    if x.isdigit():\n      x = int(x)\n      if x>=0 and x<=1000:\n        if x%3==0 and '3' in l:\n          print(\"dumb\")\n        elif x%3==0:\n          print(\"idiot\")\n        elif '3' in l:\n          print(\"stupid\")\n        else:\n          print(\"smart\")\n    else:\n      print(\"invalid\")\n\n  # for i, v in enumerate(argv):\n  #   ass = \"argv[{0}]: {1}\".format(i, v)\n  #   ass = ass[10:]\n  #   print(\"val === \",ass)\n  #   # print(\"===\",ass)\n  #   l = list(ass)\n  #   print(\"List === \",l)\n  #   # if ass%3==0 and \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 437, "language": "Python3", "code": "import sys\n\ndef get_idiot_label(input_arg_str):\n    if not input_arg_str.isdigit():\n        return \"invalid\"\n    \n    numeric_input = int(input_arg_str)\n    \n    if not (0 <= numeric_input <= 1000):\n        return \"invalid\"\n\n    cond_divisible_by_3 = (numeric_input % 3 == 0)\n    cond_includes_three = ('3' in input_arg_str)\n\n    if cond_divisible_by_3 and cond_includes_three:\n        return \"dumb\"\n    elif cond_divisible_by_3:\n        return \"idiot\"\n    elif cond_includes_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_execution(arg_vector):\n    for arg_element in arg_vector:\n        print(get_idiot_label(arg_element))\n\nif __name__ == '__main__':\n    main_execution(sys.argv[1:])"}
{"id": 438, "language": "Python3", "code": "import sys\ndef  solve8queen(k,position):\n    board=[]\n    for i in range(8):\n        leng=[]\n        for j in range(8):\n            leng.append(0)\n        board.append(leng)\n    c=[]\n    res=[]\n    \n    for i in range(8):\n        for j in range(8):\n            for p in range(k):\n                if i==position[p][0] and j == position[p][1]:\n                    c.append(position[p][1])\n                    board[i][j]='Q'\n                    break\n                else:\n                    board[i][j]='.'\n    if k==8:\n        res.append(construct(board))\n        return res\n    dfs(board,0,res,position,c)\n    \n#    for i in range(8):\n#        for j in range(8):\n#            print(board[i][j],end='')\n#        print()\n    return res\n\ndef dfs(board,col,res,position,c):\n    if col==8:\n        res.append(construct(board))\n        return\n    for i in range(8):\n        flag=False\n        for p in range(len(position)):\n            if i == position[p][0]:\n                flag=True\n                break\n            elif col in c:\n                col+=1\n        if flag==True:\n            continue\n        if col==8:\n            res.append(construct(board))\n            return\n        if validate(board,i,col):\n            board[i][col]='Q'\n            dfs(board,col+1,res,position,c)\n            board[i][col]='.'\n            \ndef validate(board,r,c):\n    for i in range(8):\n        for j in range(8):\n            if board[i][j]=='Q' and ((r==i) or (r+j==c+i) or (r+c==i+j)):\n                return False\n    return True\n\ndef construct(board):\n    res=[]\n    for i in range(8):\n        s=board[i]\n        res.append(str(s))\n    return res\n    \n    \n    \ndef eightqueen(p):\n    board=[]\n    for i in range(8):\n        leng=[]\n        for j in range(8):\n            leng.append(0)\n        board.append(leng)\n        \n    res=solve8queen(len(p),p)\n    #print(len(res))\n    for i in range(1):\n        for j in range(len(res[0])):\n            for k in range(len(res[i][j])):\n                if res[i][j][k]=='.' or res[i][j][k]=='Q':\n                    print(res[i][j][k],end='')\n            print()\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        fr=open(v,'r')\n        k=int(fr.readline().split()[0])\n        p=[]\n        for i in range(k):\n          r_i=fr.readline().split()\n          p.append([int(r_i[0]),int(r_i[1])])\n          \n    eightqueen(p)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 439, "language": "C++", "code": "#include <iostream>\n#include <ctype.h>\n#include <string.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int n=atoi(argv[i]);\n    int flag=0, j;\n    for (j=0; j<strlen(argv[i]); j++)\n    {\n      if (!isdigit(argv[i][j])) flag=1;\n    }\n    if (flag==0 && n>=0 && n<=1000)\n    {\n      int temp=n;\n      int c=0;\n      while(temp)\n      {\n        int t=temp%10;\n        if (t==3)  c++;\n        temp=temp/10;\n      }\n      if (n%3==0 && c>0)  cout<<\"dumb\"<<\"\\n\"; \n      else if (n%3==0) cout<<\"idiot\"<<\"\\n\";\n      else if (c>0) cout<<\"stupid\"<<\"\\n\";\n      else cout<<\"smart\"<<\"\\n\";\n    }\n    else cout<<\"invalid\"<<\"\\n\";\n  }\n  return 0;\n}\n"}
{"id": 440, "language": "Python3", "code": "def main():\n    k = int(input())\n    preset_positions = [tuple(map(int, input().split())) for _ in range(k)]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in preset_positions:\n        board[r][c] = 'Q'\n\n    used_cols = set()\n    used_diag1 = set()\n    used_diag2 = set()\n\n    for r, c in preset_positions:\n        used_cols.add(c)\n        used_diag1.add(r - c)\n        used_diag2.add(r + c)\n\n    def solve(row=0):\n        if row == 8:\n            return True\n        if any(board[row][col] == 'Q' for col in range(8)):\n            return solve(row + 1)\n        for col in range(8):\n            if col in used_cols or (row - col) in used_diag1 or (row + col) in used_diag2:\n                continue\n            board[row][col] = 'Q'\n            used_cols.add(col)\n            used_diag1.add(row - col)\n            used_diag2.add(row + col)\n            if solve(row + 1):\n                return True\n            board[row][col] = '.'\n            used_cols.remove(col)\n            used_diag1.remove(row - col)\n            used_diag2.remove(row + col)\n        return False\n\n    solve()\n    for row in board:\n        print(''.join(row))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 441, "language": "Java", "code": "package track;\n\nimport java.util.regex.Pattern;\n\npublic class App {\n  public static void main(String[] args) {\n\t\tString match = \"(^[0-9]*$)\";\n\t\tboolean idiot;\n\t\tboolean stupid;\n\t\t\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\ttry {\n\t\t\t\tif(!(Pattern.matches(match, args[i]))) {\n\t\t\t\t\tException e = new Exception(\"error\");\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\tint result = Integer.parseInt(args[i]); \n        if(result > 1000 && result < 0) {\n          Exception e = new Exception(\"error\");\n          throw e;\n        }\n\t\t\t\tif(result%3==0) {\n\t\t\t\t\tidiot = true;\n\t\t\t\t}else idiot = false;\n\t\t\t\tif(args[i].indexOf(\"3\") > -1) {\n\t\t\t\t\tstupid = true;\n\t\t\t\t}else stupid = false;\n\t\t\t\t\n\t\t\t\tif(idiot&&stupid) System.out.println(\"dumb\");\n\t\t\t\telse if(idiot) System.out.println(\"idiot\");\n\t\t\t\telse if(stupid) System.out.println(\"stupid\");\n\t\t\t\telse if(!(idiot&&stupid)) System.out.println(\"smart\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"id": 442, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  j={}\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for count,i  in enumerate(b+[{}]):\n    if count<3:continue\n    c=(b[count-3]['robot'],b[count-2]['robot'],b[count-1]['robot'],b[count-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in j:\n      if j[c]!=(e-1)%3:\n        print(count,c,e,j[c])\n    j[c]=e    \n      \n  print((j[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 443, "language": "Java", "code": "import java.util.Random;\n\npublic class TaikoDrummer {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int hitCount = Integer.parseInt(args[0]);\n        StringBuilder sequence = new StringBuilder();\n        Random random = new Random();\n\n        for (int i = 0; i < hitCount; i++) {\n            String sound = random.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(sound);\n            sequence.append(sound);\n\n            if (sequence.indexOf(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") != -1) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 444, "language": "Python3", "code": "import sys\n\ndef main(argv):\n\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n      if int(argv[i])%3==0:\n        for j in argv[i]:\n          if int(j)==3:\n            print(\"dumb\")\n            quit()          \n      if int(argv[i])%3==0:\n       # print(\"argv[{0}]: {1}\".format(i, v))          \n        print(\"idiot\")\n        quit()\n      for j in argv[i]:\n        if int(j)==3:\n          print(\"stupid\")\n          quit()\n\n      print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 445, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int robot;\n    int you;\n} Record;\n\nint main(int argc, char *argv[]) {\n    // \u30d5\u30a1\u30a4\u30eb\u304b\u3089JSON\u5f62\u5f0f\u306e\u904e\u53bb\u306e\u30b2\u30fc\u30e0\u8a18\u9332\u3092\u8aad\u307f\u8fbc\u3080\uff08\u7c21\u6613\u30d1\u30fc\u30b9\uff09\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s input.json\\n\", argv[0]);\n        return 1;\n    }\n    FILE *fp = fopen(argv[1], \"r\");\n    if (!fp) {\n        perror(\"File open error\");\n        return 1;\n    }\n    // \u4e00\u65e6\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3092\u8aad\u307f\u8fbc\u3080\n    fseek(fp, 0, SEEK_END);\n    long size = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    char *buffer = malloc(size + 1);\n    fread(buffer, 1, size, fp);\n    buffer[size] = '\\0';\n    fclose(fp);\n\n    // \u7c21\u6613JSON\u30d1\u30fc\u30b9: { \"robot\": x, \"you\": y } \u306e\u90e8\u5206\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066Record\u914d\u5217\u306b\u4fdd\u5b58\n    Record *records = NULL;\n    int count = 0;\n    char *p = buffer;\n    while ((p = strstr(p, \"{\\\"robot\\\":\")) != NULL) {\n        int r, y;\n        int n = 0;\n        if (sscanf(p, \"{\\\"robot\\\":%d, \\\"you\\\":%d}\", &r, &y) == 2) {\n            records = realloc(records, sizeof(Record)*(count+1));\n            records[count].robot = r;\n            records[count].you = y;\n            count++;\n        }\n        p++;  // \u9032\u3081\u308b\n    }\n    free(buffer);\n\n    if (count < 3) {\n        // \u6700\u521d\u306e3\u624b\u306frock, scissors, paper\u306e\u5b9a\u7fa9\n        // 3\u624b\u672a\u6e80\u306a\u3089\u305d\u306e\u624b\u3092\u51fa\u3059\n        for (int i=0;i<count;i++) {}\n        if (count == 0) printf(\"0\\n\");\n        else if (count == 1) printf(\"1\\n\");\n        else printf(\"2\\n\");\n        free(records);\n        return 0;\n    }\n\n    // \u521d\u671f3\u624b\u306f rock(0), scissors(1), paper(2)\n    // \u72b6\u614b: \u904e\u53bb3\u624b\u306erobot\u306e\u624b + \u76f8\u624b\u306e\u6700\u5f8c\u306e\u624b = 4\u30d1\u30e9\u30e1\u30fc\u30bf\n    // \u305d\u308c\u305e\u308c\u306e\u624b\u30d1\u30bf\u30fc\u30f3\u306b\u5bfe\u3057\u624b\u3092\u30b5\u30a4\u30af\u30eb\u3067\u9078\u3076\n\n    // \u6b21\u306e\u624b\u3092\u6c7a\u3081\u308b\u30ad\u30fc\u7528\u914d\u5217\uff1a\u524d3\u624b\u306erobot + last you hand\n    // \u904e\u53bb\u306e\u30b2\u30fc\u30e0\u3092\u4f7f\u3063\u3066\u30d1\u30bf\u30fc\u30f3\u6bce\u306b\u4f55\u56de\u305d\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u73fe\u308c\u305f\u304b\u3001\u305d\u306e\u3068\u304d\u306e\u51fa\u3057\u305f\u624b\u3092\u8a18\u9332\n    // \u6b21\u306f\u305d\u306e\u624b\u306e\u6b21\u3092\u51fa\u3059\n\n    // \u30d1\u30bf\u30fc\u30f3\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306b\u6700\u5927\u3067count-3\u56de\u30d1\u30bf\u30fc\u30f3\u51fa\u73fe\u306e\u305f\u3081\u306e\u914d\u5217\u3092\u4f5c\u308b\n    typedef struct {\n        int r[3], y;\n        int cycle_count; // 0\uff5e2 \u6b21\u306e\u624b\u306e\u30b5\u30a4\u30af\u30eb\u4f4d\u7f6e\n    } Pattern;\n\n    Pattern *patterns = NULL;\n    int patcount = 0;\n\n    // \u904e\u53bb\u306e\u30b2\u30fc\u30e0\u3067\u521d\u671f3\u624b\u3092\u9664\u304d\u3001\u305d\u308c\u305e\u308c\u306e\u72b6\u614b\u3068\u305d\u306e\u6642\u306e\u51fa\u624b\u3092\u8a18\u9332\n    for (int i=3; i<count; i++) {\n        int key[4] = {records[i-3].robot, records[i-2].robot, records[i-1].robot, records[i-1].you};\n        int nextHand = records[i].robot;\n\n        // \u305d\u306ekey\u304c\u3042\u308b\u304b\u63a2\u3059\n        int found = -1;\n        for (int j=0;j<patcount;j++) {\n            if (patterns[j].r[0]==key[0] && patterns[j].r[1]==key[1]\n                && patterns[j].r[2]==key[2] && patterns[j].y==key[3]) {\n                found = j;\n                break;\n            }\n        }\n        if (found == -1) {\n            patterns = realloc(patterns,sizeof(Pattern)*(patcount+1));\n            patterns[patcount].r[0] = key[0];\n            patterns[patcount].r[1] = key[1];\n            patterns[patcount].r[2] = key[2];\n            patterns[patcount].y = key[3];\n            patterns[patcount].cycle_count = 0;\n            found = patcount;\n            patcount++;\n        }\n        // \u4e0e\u3048\u3089\u308c\u305f\u6761\u4ef6\u3067\u306e\u51fa\u624b\u3092\u57fa\u306bcycle_count\u3092\u8abf\u6574: cycle count is assigned value that matches the hand\n        // 0->rock, 1->scissors, 2->paper cycle\n        // We want to find cycle_count for this pattern so that playing (cycle_count) achieves nextHand\n        // As per problem, same pattern cycles through: 0->1->2->0\n        // So cycle_count is essentially modulo 3 indexes matching nextHand\n\n        // The cycle pattern is: 0->rock, 1->scissors, 2->paper as robot moves for same parameters\n        // If first time: cycle_count=0 means hand=rock(0)\n        // Then cycle_count increments by 1 modulo 3 for next.\n\n        // We can deduce cycle_count from nextHand:\n        // The number of times this pattern occurred is how many times the robot played for this pattern.\n        // For simplicity, record max cycle_count + 1 = count of appearances\n        // so here, we set cycle_count to (existing cycle_count + 1) modulo 3 to indicate next turn\n        // but since we do not have multiple entries per pattern per cycle, we can ignore updating cycle_count here\n        // We'll deduce cycle_count later by counting how many times pattern occurs.\n\n        // For correctness, cycle_count means how many times this pattern was encountered previously\n        // Let's just do nothing here for now, do counting later.\n    }\n\n    // Count how many times each pattern appeared to get cycle_count\n    for (int i=0;i<patcount;i++) {\n        int cnt=0;\n        for (int j=3;j<count;j++) {\n            if (records[j-3].robot==patterns[i].r[0] && records[j-2].robot==patterns[i].r[1]\n                && records[j-1].robot==patterns[i].r[2] && records[j-1].you==patterns[i].y) {\n                cnt++;\n            }\n        }\n        patterns[i].cycle_count = cnt % 3;\n    }\n\n    // \u6b21\u306b\u73fe\u308c\u308b\u624b\u306f cycle_count \u306e\u6b21\u306e\u624b (rock=0->scissors=1->paper=2->rock=0)\n    // input\u306f\u904e\u53bb3\u624b\u3068last opponent hand\u3067\u6c7a\u307e\u308b\n\n    int key[4] = {records[count-3].robot, records[count-2].robot, records[count-1].robot, records[count-1].you};\n    int found = -1;\n    for (int i=0;i<patcount;i++) {\n        if (patterns[i].r[0]==key[0] && patterns[i].r[1]==key[1] \n            && patterns[i].r[2]==key[2] && patterns[i].y==key[3]) {\n            found = i;\n            break;\n        }\n    }\n    int nextPlay = 0;\n    if (found == -1) {\n        // \u7121\u3051\u308c\u3070\u521d\u3081\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u3067rock\u304b\u3089\u30b9\u30bf\u30fc\u30c8\n        nextPlay = 0;\n    } else {\n        nextPlay = (patterns[found].cycle_count) % 3;\n    }\n\n    printf(\"%d\\n\", nextPlay);\n\n    free(records);\n    free(patterns);\n    return 0;\n}"}
{"id": 446, "language": "Python3", "code": "import sys, json\n\ndef main(argv):\n    filepath = argv[0]\n    rounds = json.load(open(filepath))\n\n    # robot's initial 3 hands fixed as rock, scissors, paper\n    # cycle tracking: map from (3 last robot hands + last you hand) to count of occurrences\n    moves = [r[\"robot\"] for r in rounds]\n    opponent = [r[\"you\"] for r in rounds]\n\n    if len(moves) < 3:\n        print(len(moves) % 3)\n        return\n\n    record = {}\n    for i in range(len(moves)-3):\n        key = tuple(moves[i:i+3]) + (opponent[i+3], )\n        val = moves[i+3]\n        record.setdefault(key, []).append(val)\n\n    last_key = tuple(moves[-3:]) + (opponent[-1], )\n    previous = record.get(last_key, [])\n\n    if not previous:\n        print(0)\n    else:\n        last_val = previous[-1]\n        print((last_val + 1) % 3)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 447, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n\n    public static boolean isConsistent(int[] q, int n) {\n\n        for (int i = 0; i < n; i++) {\n            if (q[i] == q[n]) return false;\n            if ((q[i] - q[n]) == (n - i)) return false;\n            if ((q[n] - q[i]) == (n - i)) return false;\n        }\n        return true;\n    }\n\n    public static String[][] printQueens(int[] q,String[][] b) {\n        String[][] a = new String[8][8];\n\n        int n = q.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (q[i] == j) a[i][j] = \"Q\";\n                else a[i][j] = \".\";\n            }\n\n        }\n\n//        String[][] b = new String[8][8];\n//        b[1][2]=\"Q\";\n//        b[4][6]=\"Q\";\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (b[i][j]==\"Q\") {\n                    if (b[i][j] != a[i][j]) {\n                        return null;\n                    }\n                }\n\n            }\n\n        }\n        return a;\n\n    }\n\n    public static void enumerate(int n,String[][] y) {\n        int[] a = new int[n];\n        enumerate(a, 0,y);\n    }\n\n    public static void enumerate(int[] q, int k,String[][] y) {\n        int n = q.length;\n        if (k == n) {\n            if (printQueens(q,y) != null) {\n\n                String[][] res=printQueens(q,y);\n                for (int i = 0; i < 8; i++) {\n                    for (int j = 0; j < 8; j++) {\n\n                        System.out.print(res[i][j]);\n                    }\n                    System.out.println();\n                }\n                System.out.println();\n\n            }\n        } else {\n            for (int i = 0; i < n; i++) {\n                q[k] = i;\n                if (isConsistent(q, k)) enumerate(q, k + 1,y);\n            }\n        }\n    }\n\n\n    public static void main(String[] args) {\n        //int n = Integer.parseInt(args[0]);\n\n        List<Integer> lst=new ArrayList();\n        String[][] y=new String[8][8];\n        try {\n            File file = new File(args[0]);\n            FileReader filereader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(filereader);\n\n            String data;\nint i=0;\n            while ((data = bufferedReader.readLine()) != null) {\n                if (i > 0){\n                    y[Integer.parseInt(data.split(\" \")[0])][Integer.parseInt(data.split(\" \")[1])] = \"Q\";\n            }\n                ++i;\n            }\n\n            filereader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n\n//        for (int k=2;k<lst.size();k=k+2) {\n//            //System.out.println(Integer.parseInt(args[k]));\n//            //System.out.println(Integer.parseInt(args[k+1]));\n//            y[Integer.parseInt(args[k])][Integer.parseInt(args[k+1])]=\"Q\";\n//        }\n\n        enumerate(8,y);\n    }\n\n}\n"}
{"id": 448, "language": "Python3", "code": "import sys\n\n\ndef print_board(queens, n=8):\n    for c in queens:\n        print('.' * c + 'Q' + '.' * (n - c - 1))\n\n\ndef solve(queens, ori_queens, n=8):\n    def helper(r=0):\n        nonlocal found\n        if found:\n            return\n\n        if r == n:\n            print_board(queens, n=8)\n            found = True\n            return\n\n        if r in ori_queens:\n            helper(r+1)\n            return\n\n        for c in range(n):\n            if not (col[c] or diag1[r+c] or diag2[n-r+c-1]):\n                queens[r] = c\n                col[c] = diag1[r+c] = diag2[n-r+c-1] = True\n                helper(r+1)\n                col[c] = diag1[r+c] = diag2[n-r+c-1] = False\n\n    found = False\n\n    # store whether a column or a diagonal line is occupied\n    col = [False] * n\n    diag1 = [False] * (2 * n - 1)\n    diag2 = [False] * (2 * n - 1)\n\n    # initialization\n    for r, c in enumerate(queens):\n        if c != -1:\n            col[c] = True\n            diag1[r+c] = True\n            diag2[n-r+c-1] = True\n\n    helper()\n\n\nif __name__ == '__main__':\n    filename = sys.argv[1]\n    n = 8  # board size\n    # place queens row by row, so the row condition is always satisfied\n    queens = [-1 for _ in range(n)]  # store a queen's column index in each row\n    ori_queens = set()  # store the row indices of queens which can't be moved\n    with open(filename) as f:\n        k = int(f.readline().rstrip())\n        for line in f:\n            r, c = map(int, line.rstrip().split())\n            queens[r] = c\n            ori_queens.add(r)\n    solve(queens, ori_queens)"}
{"id": 449, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try {\n        int c  = 0;\n        boolean include = false;\n        for (char ch: args[i].toCharArray()) {\n          int check_full_width = ch;\n          if (check_full_width < 48 || check_full_width > 58) {\n            throw new NumberFormatException();\n          }\n          int t = Integer.parseInt(Character.toString(ch));\n          c = (t + c)  % 3;\n          if (t == 3) {\n            include = true;\n          }\n        }\n        if (c == 0 && include) {\n          System.out.println(\"dumb\");\n        } else if (c == 0) {\n          System.out.println(\"idiot\");\n        } else if (include) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch(NumberFormatException e){  \n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 450, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Comparator;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class CipherBreaker {\n\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.err.println(\"Error: Missing arguments. Usage: java CipherBreaker <command> <input_file> <output_file>\");\n            return;\n        }\n\n        String command = args[0];\n        Path inputFilePath = Paths.get(args[1]);\n        Path outputFilePath = Paths.get(args[2]);\n\n        try {\n            String cipherText = Files.readString(inputFilePath);\n\n            switch (command) {\n                case \"count\":\n                    countCharacters(cipherText, outputFilePath);\n                    break;\n                case \"space\":\n                    determineSpaceSubstitute(cipherText, outputFilePath);\n                    break;\n                case \"decrypt\":\n                    decryptCipherText(cipherText, outputFilePath);\n                    break;\n                default:\n                    System.err.println(\"Unknown command: \" + command);\n            }\n        } catch (IOException e) {\n            System.err.println(\"File I/O operation failed: \" + e.getMessage());\n        }\n    }\n\n    // Converts a map to a JSON string format\n    private static String mapToJson(Map<?, ?> map) {\n        StringBuilder json = new StringBuilder(\"{\\n\");\n        boolean first = true;\n        for (Map.Entry<?, ?> entry : map.entrySet()) {\n            if (!first) {\n                json.append(\",\\n\");\n            }\n            // Handle space character as \" \" in JSON key, otherwise use toString()\n            String key = entry.getKey() instanceof Character && entry.getKey().equals(' ') ? \" \" : entry.getKey().toString();\n            json.append(String.format(\"  \\\"%s\\\": %s\", key, entry.getValue().toString()));\n            first = false;\n        }\n        json.append(\"\\n}\");\n        return json.toString();\n    }\n    \n    // Creates a simple JSON string for a single key-value pair\n    private static String singleEntryToJson(String key, String value) {\n        return String.format(\"{\\n  \\\"%s\\\": \\\"%s\\\"\\n}\", key, value);\n    }\n\n    // Counts character frequencies based on specified filters\n    private static Map<Character, Long> getCharacterFrequencies(String text, boolean includeSpace, boolean onlyLetters) {\n        return text.chars()\n                .filter(c -> {\n                    if (onlyLetters) return Character.isLetter(c); // Only letters\n                    return Character.isLetter(c) || (includeSpace && c == ' '); // Letters and optionally space\n                })\n                .mapToObj(c -> (char) c) // Convert int stream to char objects\n                .collect(Collectors.groupingBy(c -> c, Collectors.counting())); // Group by char and count occurrences\n    }\n\n    private static void countCharacters(String text, Path outputPath) throws IOException {\n        Map<Character, Long> counts = getCharacterFrequencies(text, true, false);\n        Map<Character, Long> sortedCounts = counts.entrySet().stream()\n                .sorted(Map.Entry.comparingByKey()) // Sort by character key\n                .collect(Collectors.toMap(\n                        Map.Entry::getKey,\n                        Map.Entry::getValue,\n                        (e1, e2) -> e1, LinkedHashMap::new)); // Preserve order of sorted entries\n\n        Files.writeString(outputPath, mapToJson(sortedCounts));\n    }\n\n    private static void determineSpaceSubstitute(String text, Path outputPath) throws IOException {\n        Map<Character, Long> frequencies = getCharacterFrequencies(text, true, false);\n\n        Character spaceCandidate = frequencies.entrySet().stream()\n                .max(Map.Entry.comparingByValue()) // Find entry with max value (frequency)\n                .map(Map.Entry::getKey) // Get the character (key)\n                .orElse(' '); // Default to space if no chars found (unlikely in problem context)\n\n        Files.writeString(outputPath, singleEntryToJson(\"char\", spaceCandidate == ' ' ? \" \" : String.valueOf(spaceCandidate)));\n    }\n\n    private static void decryptCipherText(String cipherText, Path outputPath) throws IOException {\n        // Stage 1: Undo space substitution - find the most frequent char among target chars\n        Map<Character, Long> initialFrequencies = getCharacterFrequencies(cipherText, true, false);\n        Character substitutedSpace = initialFrequencies.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n                .orElse(' ');\n\n        // Replace the substituted character with a standard space\n        String textWithDecryptedSpaces = cipherText.replace(substitutedSpace, ' ');\n\n        // Stage 2: Undo alphabet shift - find the most frequent letter\n        Map<Character, Long> alphabetFrequencies = getCharacterFrequencies(textWithDecryptedSpaces, false, true);\n        Character mostFrequentLetter = alphabetFrequencies.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n                .orElse(' '); \n\n        // Calculate the shift amount assuming 'e'/'E' is the most frequent English letter\n        int shift = 0; \n        if (Character.isLowerCase(mostFrequentLetter)) {\n            shift = mostFrequentLetter - 'e';\n        } else if (Character.isUpperCase(mostFrequentLetter)) {\n            shift = mostFrequentLetter - 'E';\n        }\n        \n        // Apply the reverse shift to all alphabetical characters\n        String finalDecryptedText = textWithDecryptedSpaces.chars()\n                .mapToObj(c -> {\n                    if (Character.isLetter(c)) {\n                        if (Character.isLowerCase(c)) {\n                            // Decrypt lowercase letter with modular arithmetic for wrap-around\n                            return (char) ('a' + (c - 'a' - shift + 26) % 26);\n                        } else { // Uppercase\n                            // Decrypt uppercase letter with modular arithmetic\n                            return (char) ('A' + (c - 'A' - shift + 26) % 26);\n                        }\n                    }\n                    return (char) c; // Non-letters are passed through unchanged\n                })\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();\n\n        Files.writeString(outputPath, finalDecryptedText);\n    }\n}"}
{"id": 451, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define DIV_BY_3_FLAG 1\n#define HAS_3_FLAG    2\n\nint check_has_3(int n) {\n    if (n==0) return 0;\n    do {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    } while (n > 0);\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        char *end;\n        long num = strtol(argv[i], &end, 10);\n\n        if (*end != '\\0' || argv[i] == end || num < 0 || num > 1000) {\n            puts(\"invalid\");\n            continue;\n        }\n\n        int flags = 0;\n        if (num % 3 == 0) {\n            flags |= DIV_BY_3_FLAG;\n        }\n        if (check_has_3((int)num)) {\n            flags |= HAS_3_FLAG;\n        }\n\n        switch (flags) {\n            case 0:\n                puts(\"smart\"); break;\n            case DIV_BY_3_FLAG:\n                puts(\"idiot\"); break;\n            case HAS_3_FLAG:\n                puts(\"stupid\"); break;\n            case DIV_BY_3_FLAG | HAS_3_FLAG:\n                puts(\"dumb\"); break;\n        }\n    }\n    return 0;\n}"}
{"id": 452, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class App {\n    // \u30b2\u30fc\u30e0\u306e1\u30e9\u30a6\u30f3\u30c9\u306e\u8a18\u9332\n    record Round(int robot, int you) {}\n\n    public static void main(String[] args) throws Exception {\n        var path = Paths.get(args[0]);\n        String content = Files.readString(path);\n\n        var history = new ArrayList<Round>();\n        var parts = content.replaceAll(\"[\\\\[\\\\]\\\\{\\\\}\\\"a-zA-Z:]\", \"\").split(\",\");\n        for (int i = 0; i < parts.length; i += 2) {\n            if(parts[i].trim().isEmpty()) continue;\n            int robotHand = Integer.parseInt(parts[i].trim());\n            int playerHand = Integer.parseInt(parts[i + 1].trim());\n            history.add(new Round(robotHand, playerHand));\n        }\n\n        // \u72b6\u614b -> \u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b \u3092\u30de\u30c3\u30d4\u30f3\u30b0\n        Map<List<Integer>, Integer> predictionMap = new HashMap<>();\n\n        // \u5c65\u6b74\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u4e88\u6e2c\u30de\u30c3\u30d7\u3092\u69cb\u7bc9\n        for (int i = 3; i < history.size(); i++) {\n            var key = List.of(\n                history.get(i - 3).robot(),\n                history.get(i - 2).robot(),\n                history.get(i - 1).robot(),\n                history.get(i - 1).you()\n            );\n            int robotHand = history.get(i).robot();\n            predictionMap.put(key, (robotHand + 1) % 3);\n        }\n\n        var lastThree = history.subList(history.size() - 3, history.size());\n        var predictionKey = List.of(\n            lastThree.get(0).robot(),\n            lastThree.get(1).robot(),\n            lastThree.get(2).robot(),\n            lastThree.get(2).you()\n        );\n\n        // \u30ad\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30ed\u30dc\u30c3\u30c8\u306fRock(0)\u3092\u51fa\u3059\u3068\u4eee\u5b9a\n        int robotNextHand = predictionMap.getOrDefault(predictionKey, 0);\n        \n        // \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306b\u52dd\u3064\u624b\u3092\u8a08\u7b97\n        int myHand = (robotNextHand + 2) % 3; \n\n        System.out.println(myHand);\n    }\n}"}
{"id": 453, "language": "C++", "code": "#include<iostream>\n#include <string>\n#include<stdlib.h>\n#include<cctype>\n#include<cstring>\nusing namespace std;\nbool isDigitPresent(int x, int d)\n{\n  \n    while (x > 0)\n    {\n        if (x % 10 == d)\n            break;\n \n        x = x / 10;\n    }\n    return (x > 0);\n}\nint main(int argc, char* argv[])\n{\nint t;\n\tt = argc;\n\tint num,ans;\n\tfor(int i=1;i<argc;i++)\n\t{\nif(isdigit(argv[i][0])==0)\n{\ncout<<\"invalid\\n\";\ncontinue;\n}\n\t\t\n\t\t\t\n\t\tnum = atoi(argv[i]);\n\n\tif(num>=0 && num<=1000){\n\t\tif((num%3==0) && (num == 3 || isDigitPresent(num,3))){\n\t\t\tcout<<\"dumb\"<<\"\\n\";\n\t\t}\n\telse if (num == 3 || isDigitPresent(num,3)){\n           cout<<\"stupid\"<<\"\\n\";\n        }\n\telse if(num%3==0){\n\t\tcout<<\"idiot\"<<\"\\n\";\n\t}\n\t\n\telse if(num%3!=0 && (num != 3 || !(isDigitPresent(num,3)))){\n\t\tcout<<\"smart\"<<\"\\n\";}\n\telse\n\t{\n\t\tcout<<\"invalid\";\n\t}\n\t}\n}\n\treturn 0;\n}\n"}
{"id": 454, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    for(String s:args)\n    {\n      try{\n        int a=Integer.parseInt(s);\n        a=0;\n        for(int i=0;i<s.length();i++){\n          if(s.charAt(i)>='0'&&s.charAt(i)<='9')\n          a = (a*10)+(s.charAt(i)-'0');\n          else{\n            a=-1;\n            break;\n        }\n          \n        }\n        if(a>=0&&a<=1000)\n        {\n          // if(s.contains(\"\uff11\uff13\"))\n          // System.out.println(\"invalid\");\n          // else \n          if(a%3==0&&s.contains(\"3\"))\n          System.out.println(\"dumb\");\n          else if(a%3==0)\n          System.out.println(\"idiot\");\n          else if(s.contains(\"3\"))\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n        else\n        System.out.println(\"invalid\");\n        // i++;\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\n\t\t\n\t}\n}\n"}
{"id": 455, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef do_count(fp):\n    counts = Counter()\n    with open(fp, encoding='utf-8') as f:\n        for line in f:\n            for c in line:\n                if c.isalpha() or c == ' ':\n                    counts[c] += 1\n    return dict(counts)\n\ndef determine_space(fp):\n    counts = Counter()\n    with open(fp, encoding='utf-8') as f:\n        s = f.read()\n        for c in s:\n            if c.isalpha():\n                counts[c] += 1\n    # \u82f1\u8a9e\u3067\u7a7a\u767d\u306f\u975e\u5e38\u306b\u591a\u3044\u306e\u3067\u6700\u5927\u983b\u5ea6\u5c0f\u6587\u5b57\u62bd\u51fa\n    likely = {k:v for k,v in counts.items() if k.islower()}\n    # \u7a7a\u767d\u304c\u7f6e\u63db\u3055\u308c\u305f\u6587\u5b57\n    char = max(likely, key=likely.get)\n    return char\n\ndef shift_guess(text, space_char):\n    # \u30b9\u30da\u30fc\u30b9\u5316\u3055\u308c\u305f\u6587\u5b57\u3092\u7a7a\u767d\u306b\u623b\u3057\u3066\u6587\u5b57\u983b\u5ea6\u307f\u308b\u3002\n    swapped = []\n    for ch in text:\n        if ch == space_char:\n            swapped.append(' ')\n        elif ch == ' ':\n            swapped.append(space_char)\n        else:\n            swapped.append(ch)\n    let_cnt = Counter(c.lower() for c in swapped if c.isalpha())\n    most_common = let_cnt.most_common(1)[0][0]\n    sft = (ord(most_common) - ord('e')) % 26\n    return sft, swapped\n\ndef apply_shift(chars, shift):\n    res = []\n    for c in chars:\n        if c.islower():\n            v = (ord(c)-ord('a')-shift)%26\n            res.append(chr(ord('a')+v))\n        elif c.isupper():\n            v = (ord(c)-ord('A')-shift)%26\n            res.append(chr(ord('A')+v))\n        else:\n            res.append(c)\n    return ''.join(res)\n\ndef main(argv):\n    mode, inp, outp = argv\n    if mode == 'count':\n        ret = do_count(inp)\n        with open(outp,'w',encoding='utf-8') as f:\n            json.dump(ret, f)\n    elif mode == 'space':\n        ch = determine_space(inp)\n        with open(outp,'w',encoding='utf-8') as f:\n            json.dump({'char':ch}, f)\n    elif mode == 'decrypt':\n        with open(inp, encoding='utf-8') as f:\n            s = f.read()\n        space_ch = determine_space(inp)\n        shift, swapped = shift_guess(s, space_ch)\n        # \u5165\u308c\u66ff\u3048: \u30b9\u30da\u30fc\u30b9\u21d4\u7f6e\u63db\u5c0f\u6587\u5b57\uff08\u7a7a\u767d\u3068\u305d\u308c\u3092\u5143\u901a\u308aswap\uff09\n        recov = []\n        for c in s:\n            if c == ' ':\n                recov.append(space_ch)\n            elif c == space_ch:\n                recov.append(' ')\n            else:\n                recov.append(c)\n        res = apply_shift(recov, shift)\n        with open(outp,'w',encoding='utf-8') as f:\n            f.write(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 456, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  #print(argv)\n  for j in argv:\n    if j.isdigit() and j!='\uff11\uff13' and int(j)>=0 and int(j)<=1000:\n      if '3' in j and int(j)%3==0:\n        print(\"dumb\")\n      elif '3' in j:\n        print(\"stupid\")\n      elif int(j)%3==0:\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 457, "language": "Java", "code": "package track;\npublic class App\n{   \n  public static void main(String args[])\n  {\n    for(int i=0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int number=Integer.parseInt(args[i]);\n        if(number<0 || number>1000)\n        {\n          System.out.println(\"invalid\");\n        }\n        else if(number%3==0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 458, "language": "Python3", "code": "import sys\n\ndef rot13(text):\n    result = []\n    for char in text:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') + 13) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') + 13) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)\n\ndef main(args):\n    # \u5404\u5f15\u6570\u306b\u5bfe\u3057\u3066ROT13\u51e6\u7406\u3092\u884c\u3046\n    for arg in args:\n        print(rot13(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 459, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <stdio.h>\n#include <math.h>\n\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    string  s = argv[i];\n    if (s.length() >= 5) {\n        cout << \"invalid\" << endl;\n        continue;\n    }\n    bool has_3 = false;\n    bool is_valid = true;\n    int number = 0;\n\n    for (int i = 0; i < s.length(); i++) {\n      int id = int(s[i]);\n      if (s[i] == '3') has_3 = true;\n      if (s[i] < '0' || s[i] > '9') {\n        is_valid = false;\n        break;\n      }\n     // cout << \"pow \" << pow(10, s.length() - i - 1) << endl;\n      number = number + pow(10, s.length() - i - 1) * (int(s[i]) - 48);\n    }\n   // cout << \"number = \" << number << endl;\n    if (!is_valid || number > 1000)\n        cout << \"invalid\";\n    else\n    {\n        if (number % 3 == 0 && has_3)\n            cout << \"dumb\";\n        else\n            if (number % 3 == 0)\n                cout << \"idiot\";\n            else\n                if (has_3)\n                    cout << \"stupid\";\n                else\n                    cout << \"smart\";\n    }\n     cout << endl;\n  }\n  return 0;\n}\n"}
{"id": 460, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String input : args) {\n      String msg = \"invalid\";\n      try {\n        int n = Integer.parseInt(input);\n        if (n < 0 || n > 1000) {\n          msg = \"invalid\";\n        } else {\n          boolean d = n % 3 == 0;\n          boolean h = input.contains(\"3\");\n          if (d && h) msg = \"dumb\";\n          else if (d) msg = \"idiot\";\n          else if (h) msg = \"stupid\";\n          else msg = \"smart\";\n        }\n      } catch (Exception e) {\n        msg = \"invalid\";\n      }\n      System.out.println(msg);\n    }\n  }\n}"}
{"id": 461, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.    \n  if 0<=argv<=1000:\n    if argv%3==0:\n      print(\"idiot\")\n    \n    \n  \n\n    \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 462, "language": "Python3", "code": "import sys\ndef check3(n):\n  for i in n:\n    if(i=='3'):\n      return(1)\n  return(0)\n\ndef main(argv):\n  #print(argv)\n\n\n  for i, v in enumerate(argv):\n    #print(\"argv[{0}]: {1}\".format(i, v))\n    #print(i,v)\n    '''try:\n      \n      if(int(v)%3==0):\n        if(check3(v)==1):\n          print(\"dumb\")\n        else:\n          print(\"idiot\")\n    except:\n        print(\"invalid\")\n    try:\n      if(check3(v)==1 and int(v)%3==1):\n        print(\"stupid\")\n      #elif(int(v)%3==1 and check3(v)==0):\n      #  print(\"smart\")\n      else:\n        print(\"smart\")\n    except:\n      print(\"invalid\")'''\n  check=0\n  try:\n    a=int(v)\n    check=1\n  except:\n    check=0\n  if(check==0):\n    if(check3(v)==1):\n      print(\"stupid\")\n    else:\n      print(\"invalid\")\n  elif(check==1):\n    if(int(v)%3==0):\n        if(check3(v)==1):\n          print(\"dumb\")\n        else:\n          print(\"idiot\")\n    elif(int(v)%3>0 and check3(v)==0):\n      print(\"smart\")\n    elif(int(v)%3>0 and check3(v)==1):\n      print(\"stupid\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 463, "language": "Python3", "code": "import sys\nimport json\nfrom collections import deque, defaultdict\n\ndef get_winning_hand(robot_play):\n    \"\"\"Calculates the hand that beats the robot's play.\"\"\"\n    return (robot_play + 2) % 3\n\ndef main(args):\n    # This solution leverages collections.deque and collections.defaultdict for convenience.\n    file_path_arg = args[0]\n    \n    with open(file_path_arg, 'r') as input_file:\n        match_history = json.load(input_file)\n\n    # Robot's last three hands (deque for efficient rotation)\n    robot_memory = deque([0, 1, 2])\n    # Opponent's last hand observed\n    opponent_prev_move = 0 \n\n    # Dictionary to store how many times a particular state has occurred\n    # State is a tuple: (R1, R2, R3, O_last)\n    state_occurrence_counts = defaultdict(int)\n\n    for round_data in match_history:\n        # Construct the state tuple based on current memory\n        current_state = tuple(list(robot_memory) + [opponent_prev_move])\n        \n        # Increment the count for this state\n        state_occurrence_counts[current_state] += 1\n        \n        # Update robot's memory with its actual played hand\n        robot_memory.popleft()\n        robot_memory.append(round_data[\"robot\"])\n        \n        # Update opponent's last move\n        opponent_prev_move = round_data[\"you\"]\n\n    # Determine the state for the next unknown match\n    next_match_state = tuple(list(robot_memory) + [opponent_prev_move])\n    \n    # Predict the robot's next move based on the cycle rule\n    robot_prediction_index = state_occurrence_counts[next_match_state] % 3\n    \n    # Output the winning move for the human\n    print(get_winning_hand(robot_prediction_index))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 464, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\n\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n\n\nint fl=0;\nint check(char *x,int len)\n{\n    if(len>4)return -1;\n    else\n    {\n        int num=0;\n        for(int j=0; j<len; j++)\n        {\n            if(!isdigit(x[j]))return -1;\n            if(x[j]=='3')fl=1;\n            num=num*10+x[j]-'0';\n        }\n        return num;\n    }\n\n}\nint main(int argc,char *argv[])\n//int main()\n{\n   // int argc=3;\n  //  char *argv[3]= {\"5\",\"13\",\"aa\"};\n    for(int i=1; i<argc; i++)\n    {\n        fl=0;\n        int res=check(argv[i],strlen(argv[i]));\n       // cout<<res<<endl;\n        if(res==-1||res>1000||res<0)\n        {\n            cout<<\"invalid\"<<endl;\n        }\n        else if(fl&&res%3==0)\n        {\n            cout<<\"dumb\"<<endl;\n        }\n        else if(fl)\n        {\n            cout<<\"stupid\"<<endl;\n        }\n        else if(res%3==0)\n        {\n            cout<<\"idiot\"<<endl;\n        }\n        else cout<<\"smart\"<<endl;\n    }\n\n\n    return 0;\n}"}
{"id": 465, "language": "Python3", "code": "import sys\n\nboard = [[0 for i in range(8)] for j in range(8)]\nrows = []\n\ndef isSafe(board, row, col):\n  for i in range(8):\n    if board[row][i]==1:\n      return False\n  for i in range(8):\n    if board[i][col]==1:\n      return False\n\n  for i,j in zip(range(row,8),range(col,8)):\n    if board[i][j]==1:\n      return False\n  for i,j in zip(range(row,-1,-1),range(col,-1,-1)):\n    if board[i][j]==1:\n      return False\n\n  for i,j in zip(range(row,8),range(col,-1,-1)):\n    if board[i][j]==1:\n      return False\n  for i,j in zip(range(row,-1,-1),range(col,8)):\n    if board[i][j]==1:\n      return False\n\n  return True\n\ndef solve(board, row):\n  if row in rows:\n    return solve(board,row+1)\n  if row>=8:\n    return True\n  for i in range(8):\n    if isSafe(board,row,i):\n      board[row][i] = 1\n      if solve(board,row+1):\n        return True\n      board[row][i] = 0\n  return False\n\ndef printBoard(board):\n  for i in range(8):\n    for j in range(8):\n      if j<7:\n        s = \"\"\n      else:\n        s = \"\\n\"\n      if board[i][j]==1:\n        print('Q',end=s)\n      else:\n        print(\".\",end=s)\n\ndef main(argv):\n  f = open(argv[0])\n  line = f.readlines()\n  k = int(line[0].replace('\\n',''))\n  pos = []\n  for i in range(k):\n    pos.append(list(map(int,line[i+1].replace('\\n','').split())))\n    board[pos[-1][0]][pos[-1][1]] = 1\n    rows.append(pos[-1][0])\n  solve(board, 0)\n  printBoard(board)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 466, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n            try \n            { \n            Integer.parseInt(args[i]);\n            int in=Integer.parseInt(args[i]);\n            if((args[i].indexOf('3')!=-1) && (in%3==0))\n            {\n            String s=\"dumb\";\n            System.out.println(s);\n            }\n            else if(in%3==0)\n            {\n            String s=\"idiot\";\n            System.out.println(s);\n            }\n            else if(args[i].indexOf('3')!=-1)\n            {\n            String s=\"stupid\";\n            System.out.println(s); \n            }\n            else\n            {\n            String s=\"smart\";\n            System.out.println(s); \n            }\n        }  \n        catch (NumberFormatException e)  \n        { \n            String s=\"invalid\";\n            System.out.println(s); \n        }\n\t\t}\n\t}\n}\n"}
{"id": 467, "language": "Java", "code": "public class ThreeIdiots {\n  public static void main(String[] args) {\n    for (String input : args) {\n      try {\n        int n = Integer.parseInt(input);\n        if (n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisible = n % 3 == 0;\n        boolean includes = input.indexOf('3') != -1;\n        if (divisible && includes) {\n          System.out.println(\"dumb\");\n        } else if (divisible) {\n          System.out.println(\"idiot\");\n        } else if (includes) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException ex) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 468, "language": "Python3", "code": "import sys, math\n\nr = {\n  1: \"I\",\n  5: \"V\",\n  10: \"X\",\n  50: \"L\",\n  100: \"C\",\n  500: \"D\",\n  1000: \"M\",\n}\n\ndef digitLogic(n:int):\n  size = int(math.log10(n))\n  digit = n // 10**size\n  \n  if digit <4:\n    return r[10**size]*digit\n  elif digit == 4:\n    return r[10**size]+r[5*(10**size)]\n  elif digit == 5:\n    return r[5*(10**size)]\n  elif digit < 9:\n    return r[5*(10**size)]+r[10**size]*(digit-5)\n  else:\n    return r[10**size]+r[10**(size+1)]\n\ndef solve(f):\n  def wrapper(n):\n    print(f(n))\n  return wrapper\n\n@solve\ndef main(argv):\n  roman = \"\"\n  while argv != 0:\n    roman += digitLogic(argv)\n    argv = argv % (10**(int(math.log10(argv))))\n  return roman\n\n\n\nif __name__ == '__main__':\n  # for i in range(1,int(sys.argv[1])):\n  #   main(i)\n  main(int(sys.argv[1]))"}
{"id": 469, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_only_digits(const char *input) {\n    while (*input) {\n        if (!isdigit(*input++)) return 0;\n    }\n    return 1;\n}\n\nint contains_digit_three(int number) {\n    while (number > 0) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid check_and_print(const char *arg) {\n    if (!is_only_digits(arg)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(arg);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && contains_digit_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (contains_digit_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        check_and_print(argv[i]);\n    }\n    return 0;\n}"}
{"id": 470, "language": "Python3", "code": "import sys\nimport itertools\n\n# \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u306e\u659c\u3081\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u5224\u5b9a\ndef diagonal_check(cols):\n    for i in range(8):\n        for j in range(i+1,8):\n            if j-i == abs(cols[i]-cols[j]):\n                return True\n    return False\n\nif __name__ == '__main__':\n    assert len(sys.argv) == 2\n    with open(sys.argv[1]) as fin:\n        # file input\n        k = int(fin.readline().strip())\n        assert k >= 2 and k <= 8\n\n        queens = [[int(j) for j in fin.readline().strip().split()] for i in range(k)]\n        assert all(0<=r<=7 and 0<=c<=7 for [r,c] in queens)\n\n        result = []\n\n        # itertools.permutations\u3092\u4f7f\u3063\u3066\u9806\u5217\u3092\u5217\u6319\u3057\uff0c\u6b63\u3057\u3044\u914d\u7f6e\u3092\u63a2\u7d22\n        for cpos in itertools.permutations(range(8)):\n            # \u6307\u5b9a\u3055\u308c\u305f\u7b87\u6240\u306b\u914d\u7f6e\u3067\u304d\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n            if any(cpos[r]!=c for [r,c] in queens):\n                continue\n\n            # \u659c\u3081\u306b\u91cd\u8907\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u5236\u7d04\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n            if diagonal_check(cpos):\n                continue\n\n            result.append(cpos)\n\n        # \u89e3\u304c\u4e00\u610f\u306b\u5b9a\u307e\u308b\u5236\u7d04\n        assert len(result) == 1\n\n        # output\n        for c in result[0]:\n            print('........'[0:c] + 'Q' + '........'[c+1:8])"}
{"id": 471, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport json\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    with open(argv[0], \"r\") as read_file:\n      data = json.load(read_file)\n      prev=[0,0,0,0]\n      ans=0\n      for j in range(2,len(data)):\n        a=data[j-2].get(\"robot\")\n        b=data[j-1].get(\"robot\")\n        c=data[j].get(\"robot\")\n        y=data[j].get(\"you\")\n        if(a==0 and b==1 and c==2 and y==0):\n          ans=1\n        else:\n          ans=c\n        prev[0]=a\n        prev[1]=b\n        prev[2]=c\n        prev[3]=y\n      print(ans)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 472, "language": "Python3", "code": "import sys\ndef put_queen(field,r,c):\n    return field | 1<<(r*8+c)\n\ndef check_queen(field,r,c):\n    return field & 1<<(r*8+c)\n\ndef placeable(field,r,c):\n    for i in range(8):\n        if check_queen(field,r,i) or check_queen(field,i,c):\n            return False\n\n    if r>c:\n        r1,c1 = r-c,0\n    else:\n        r1,c1 = 0,c-r\n    if r>7-c:\n        r2,c2 = r-(7-c),7\n    else:\n        r2,c2 = 0,c+r\n    for i in range(8):\n        if 0<=r1+i<8 and 0<=c1+i<8 and check_queen(field,r1+i,c1+i)     \\\n            or                                                          \\\n            0<=r2+i<8 and 0<=c2-i<8 and check_queen(field,r2+i,c2-i):\n            return False\n\n    return True\n\ndef make_field(field, queen_num):\n    if queen_num==8:\n        return field\n    for i in range(8):\n        for j in range(8):\n            if placeable(field,i,j):\n                solve_field = make_field(put_queen(field,i,j),queen_num+1)\n                if not solve_field==2**64:\n                    return solve_field\n    return 2**64\n\ndef view_field(field):\n    for i in range(8):\n        for j in range(8):\n            print('Q' if check_queen(field,i,j) else '.', end='')\n        print()\n   \ndef main(argv):\n    file_name = argv[0]\n    f = open(file_name)\n    k=int(f.readline().rstrip('\\n'))\n    field=0\n    for i in range(k):\n        r,c=map(int,f.readline().rstrip('\\n').split())\n        field = put_queen(field,r,c)\n    view_field(make_field(field,k))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 473, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// 9\u9032\u6570\u6587\u5b57\u5217 -> 10\u9032\u6570\u3078\u5909\u63db\nint base9_to_decimal(const char *s) {\n  int result = 0;\n  while (*s) {\n    result = result * 9 + (*s - '0');\n    s++;\n  }\n  return result;\n}\n\n// 10\u9032\u6570 -> 9\u9032\u6570\u6587\u5b57\u5217\u3078\u5909\u63db\nvoid decimal_to_base9(int value, char *output) {\n  char buf[64];\n  int i = 0;\n  if (value == 0) {\n    output[0] = '0'; output[1] = '\\0';\n    return;\n  }\n  while (value > 0) {\n    buf[i++] = '0' + (value % 9);\n    value /= 9;\n  }\n  for (int j = 0; j < i; j++) {\n    output[j] = buf[i - j - 1];\n  }\n  output[i] = '\\0';\n}\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) return 1;\n  char left[310], right[310], op;\n  const char *formula = argv[1];\n  // \"\u6570\u5b57 \u6f14\u7b97\u5b50 \u6570\u5b57\" \u3092\u30d1\u30fc\u30b9\u3059\u308b\n  int n = 0, o = 0, m = 0;\n  // \u5de6\u6570\u5b57\n  while (formula[n] != ' ' && formula[n] != '\\0') left[o++] = formula[n++];\n  left[o] = '\\0';\n  n++; // skip space\n  op = formula[n]; // '+' or '*'\n  n += 2; // skip op and space\n  // \u53f3\u6570\u5b57\n  while (formula[n] && formula[n] != ' ') right[m++] = formula[n++];\n  right[m] = '\\0';\n\n  int a = base9_to_decimal(left);\n  int b = base9_to_decimal(right);\n  int res = 0;\n  if (op == '+')\n    res = a + b;\n  else\n    res = a * b;\n\n  char output[310];\n  decimal_to_base9(res, output);\n  printf(\"%s\\n\", output);\n  return 0;\n}"}
{"id": 474, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  hand=eval(open(argv[0]).read())\n  d={}\n  for i, v in enumerate(hand+[{}]):\n    if i<3:continue\n    move=(hand[i-3]['robot'],hand[i-2]['robot'],hand[i-1]['robot'],hand[i-1]['you'])\n    e=v.get('robot',-1)\n    if e==-1:break\n    if move in d:\n      if d[move]!=(e-1)%3:\n       print(i,move,e,d[move])\n    d[move]=e\n  print((d[move])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 475, "language": "Python3", "code": "import sys\nimport itertools\n\n# \u5168\u3066\u306e\u76e4\u751f\u6210(\u7e26or\u6a2a\u4e00\u81f4\u3059\u308b\u3082\u306e\u9664\u304f)\ndef generate_board_list():\n    # index\u5217,\u8981\u7d20\u884c\u306bqueen\n    board = []\n    for i in range(8):\n        board.append(i)\n    return list(itertools.permutations(board))\n\n# x,y\u4e0a\u306equeen\u304cboard\u306e\u4ed6\u306equeen\u3092\u3068\u308b\u304b\ndef check_queen_take(x, y, board):\n    for other_x, other_y in enumerate(board):\n        #\u81ea\u5206\u9664\u304f\n        if not(x==other_x and y==other_y):\n            # if x==other_x or y==other_y:\n            #     return True#\u7e26,\u6a2a\n            if x - y == other_x - other_y or x + y == other_x + other_y:\n                return True# \u659c\u3081\n    return False\n\n# \u5168\u3066\u306e8\u30af\u30a4\u30fc\u30f3\u306e\u76e4\u8a08\u7b97\ndef calc_8queen_board(board_list):\n    eight_board_list=[]\n    for board in board_list:\n        queen_take=False\n        for x,y in enumerate(board):\n            if check_queen_take(x, y, board):\n                queen_take=True\n                break\n        if not queen_take:\n            eight_board_list.append(board)\n    return eight_board_list\n\n# queen_list\u306e\u6307\u5b9a\u306e\u914d\u7f6e\u306e\u30dc\u30fc\u30c9\u3092eight_board_list\u304b\u3089\u63a2\u7d22\u3057\u8fd4\u3059\ndef search_board(eight_board_list,queen_list):\n    for board in eight_board_list:\n        queen_match=[False]*len(queen_list)\n        for i,queen in enumerate(queen_list):\n            for x,y in enumerate(board):\n                #board\u5185\u306b\u6307\u5b9a\u306e\u30af\u30a4\u30fc\u30f3\u3068\u540c\u3058\u4f4d\u7f6e\u306e\u30af\u30a4\u30fc\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\n                if queen[0]==x and queen[1]==y:\n                    queen_match[i]=True\n                    break\n        #\u5168\u3066\u4e00\u81f4\n        if not(False in queen_match):\n            return board\n\n\n\nif __name__ == '__main__':\n    board_list=generate_board_list()\n    # print(len(board_list))\n    #\u5168\u90e8\u306e8\u30af\u30a4\u30fc\u30f3\u306e\u76e4\n    eight_board_list=calc_8queen_board(board_list)\n    # print(len(eight_board_list))\n\n    k=int(input())\n    queen_list=[]#\u56fa\u5b9a\u3055\u308c\u305fqueen\u306e\u4f4d\u7f6e\n    queen_list=[[int(i) for i in input().split()] for i in range(k)]\n    # print(queen_list)\n    board=search_board(eight_board_list,queen_list)\n    # print(board)\n    board_str=\"\"\n    for y in range(8):\n        for x in range(8):\n            if board[y]==x:\n                board_str+=\"Q\"\n            else:\n                board_str+=\".\"\n        board_str+=\"\\n\"\n    print(board_str)\n"}
{"id": 476, "language": "Python3", "code": "import sys\nimport os\nimport json\nimport string\nimport re\nfrom collections import Counter\n\nmost_common_alpha = 'e'\naverage_word_length = 5.0\n\n# https://stackoverflow.com/questions/9457832/python-list-rotation\ndef rotate(l, n):\n  return l[n:] + l[:n]\n\ndef is_alpha_or_space(x):\n  if x == \" \": return True\n  try:\n    return x.encode('ascii').isalpha()\n  except:\n    return False\n\ndef get_count(f):\n  ret = Counter([x for x in f if is_alpha_or_space(x)])\n  for i in string.ascii_letters:\n    if not i.lower() in ret: ret[i.lower()] = 0\n    elif not i.upper() in ret: ret[i.upper()] = 0\n  if not \" \" in ret: ret[\" \"] = 0\n  return ret\n\ndef get_dict(f):\n  d = get_count(f)\n  # calculate shift range\n  srange = string.ascii_lowercase.index(d.most_common()[0][0].lower()) - string.ascii_lowercase.index(most_common_alpha)\n  # create dict\n  orig = string.ascii_lowercase\n  dicl = dict((x, orig[i]) for i, x in enumerate(rotate(orig, srange)))\n  return dicl, srange\n\ndef count(infile, outfile):\n  with open(infile, 'r') as fh:\n    f = list(fh.read())\n  with open(outfile, 'w') as fh:\n    fh.write(json.dumps(get_count(f)))\n\ndef space(infile, outfile):\n  with open(infile, 'r') as fh:\n    f = list(fh.read().strip())\n  dicl, srange = get_dict(f)\n  r = \"\"\n  for x in f:\n    if not is_alpha_or_space(x): continue\n    if x in dicl: r += dicl[x.lower()]\n    else: r += x\n  result = {'char': ''}\n  for x, v in dicl.items():\n    nr = [len(n) for n in re.sub(r'[^a-zA-Z ]', '', r.replace(x, '%t%').replace(' ', x).replace('%t%', ' ')).split(' ')]\n    if round(sum(nr) / len(nr), 0) == average_word_length:\n      result['char'] = string.ascii_lowercase[string.ascii_lowercase.index(x) + srange]\n  with open(outfile, 'w') as fh:\n    fh.write(json.dumps(result))\n\ndef decrypt(infile, outfile):\n  with open(infile, 'r') as fh:\n    f = list(fh.read())\n  dicl, srange = get_dict(f)\n  r = \"\"\n  for x in f:\n    if not is_alpha_or_space(x): continue\n    if x.lower() in dicl: r += dicl[x.lower()].upper() if x.isupper() else dicl[x.lower()]\n    else: r += x\n  char = \"\"\n  for x, v in dicl.items():\n    nr = [len(n) for n in re.sub(r'[^a-zA-Z ]', '', r.replace(x, '%t%').replace(' ', x).replace('%t%', ' ')).split(' ')]\n    if round(sum(nr) / len(nr), 0) == average_word_length:\n      char.append(string.ascii_lowercase[string.ascii_lowercase.index(x) + srange])\n  r = r.replace(char[0], '%t%').replace(' ', char[0]).replace('%t%', ' ')\n  with open(outfile, 'w') as fh:\n    fh.write(r)\n\ndef main(argv):\n  assert len(argv) == 3, 'illegal parameter'\n  assert os.path.isfile(argv[1]), 'file not found'\n  mode = argv[0]\n  if mode == \"count\":\n    count(argv[1], argv[2])\n  elif mode == \"space\":\n    space(argv[1], argv[2])\n  elif mode == \"decrypt\":\n    decrypt(argv[1], argv[2])\n  else:\n    sys.write.stderr(\"invalid mode\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 477, "language": "Python3", "code": "import sys\n\ndef set_board(board, i, j, d):\n    for k in range(8):\n        board[i][k] += d\n        board[k][j] += d\n    \n    if i > j:\n        for k in range(8-(i-j)):\n            board[k+(i-j)][k] += d\n        \n    else:\n        for k in range(8-(j-i)):\n            board[k][k+(j-i)] += d\n\n    if i+j < 8:\n        for k in range(i+j+1):\n            board[i+j-k][k] += d\n    else:\n        for k in range(i+j-8+1, 8):\n            board[i+j-k][k] += d\n    return board\n\ndef solve_queen(board, queen):\n  if -1 not in queen:\n    print_board(queen)\n    return\n  else:\n    row_queen = queen.index(-1)\n    for col_queen in range(8):\n      if board[row_queen][col_queen]==0:\n        queen[row_queen] = col_queen\n        set_board(board,row_queen,col_queen,1)\n\n        solve_queen(board, queen)\n        \n        set_board(board,row_queen,col_queen,-1)\n        queen[row_queen] = -1\n\ndef print_board(queen):\n  answer = \"\"\n  for col in queen:\n    row = [\".\" for _ in range(8)]\n    row[col] = 'Q'\n    row = \"\".join(row)\n    answer = answer + row + \"\\n\"\n  print(answer)\n\ndef main():\n\n    board = [[0 for i in range(8)] for j in range(8)]\n    queen = [-1 for i in range(8)]\n    nokori_queen = [0,1,2,3,4,5,6,7]\n\n    n = int(input())\n    for _ in range(n):\n      r, c = map(int, input().split())\n      board = set_board(board,r,c,1)\n      queen[r] = c\n      \n    solve_queen(board,queen)\n\nif __name__ == '__main__':\n    main()\n"}
{"id": 478, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    $str = \"\";\n    if($value != 0){\n      for($i=0;$i<$value;$i++){\n        if(rand(0,1)>0.5){\n          echo \"\u30c9\\n\";\n          $str .= \"\u30c9\";\n        } else {\n          echo \"\u30ab\\n\";\n          $str .= \"\u30ab\";\n        }\n        if(mb_substr($str, -7) == \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"){\n          echo \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n          break;\n        } elseif($i == $value-1){\n          echo \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n        }\n      }\n    } else {\n      echo \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n    }\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 479, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueensPlacement {\n    static char[][] board = new char[8][8];\n    static boolean[] columns = new boolean[8];\n    static boolean[] diagonals1 = new boolean[15];\n    static boolean[] diagonals2 = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            columns[c] = true;\n            diagonals1[r + c] = true;\n            diagonals2[r - c + 7] = true;\n        }\n        placeQueens(0);\n        printBoard();\n    }\n\n    private static boolean placeQueens(int row) {\n        if (row == 8) return true;\n\n        for (int j = 0; j < 8; j++) {\n            if (!columns[j] && !diagonals1[row + j] && !diagonals2[row - j + 7]) {\n                board[row][j] = 'Q';\n                columns[j] = true;\n                diagonals1[row + j] = true;\n                diagonals2[row - j + 7] = true;\n\n                if (placeQueens(row + 1)) return true;\n\n                // Backtrack\n                board[row][j] = '.';\n                columns[j] = false;\n                diagonals1[row + j] = false;\n                diagonals2[row - j + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void printBoard() {\n        for (char[] r : board) {\n            for (char cell : r) {\n                System.out.print(cell == 0 ? '.' : cell);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 480, "language": "C++", "code": "#include<bits/stdc++.h>\n#define isvalid(x)  (isalpha(x)||x==' ')\nusing namespace std;\nvector<string>vec;\n\n\nchar getspace()\n{\n    for(int i=0; i<vec.size(); i++)\n    {\n        int l=vec[i].size();\n        for(int j=0; j<l-1; j++)\n        {\n            if(isvalid(vec[i][j+1])&&(vec[i][j]==','||vec[i][j]==':'||vec[i][j]==';'))\n                return vec[i][j+1];\n        }\n    }\n    for(int i=0; i<vec.size(); i++)\n    {\n        int l=vec[i].size();\n        for(int j=0; j<l-1; j++)\n        {\n            if(isvalid(vec[i][j+1])&&(vec[i][j]==','||vec[i][j]==':'||vec[i][j]=='.'||vec[i][j]==';'))\n                return vec[i][j+1];\n        }\n    }\n\n    string cpy;\n\n    char sp='a';\n    double distance=2e100;\n    for(char ch='a'; ch<'z'; ch++)\n    {\n\n        double total=0;\n        double num=0;\n        for(int i=0; i<vec.size(); i++)\n        {\n            //  cpy.push_back(vec[i]);\n            cpy=vec[i];\n            for(int j=0; j<cpy.size(); j++)\n            {\n                if(cpy[j]==' ')cpy[j]=ch;\n                else if(cpy[j]==ch)cpy[j]=' ';\n            }\n            istringstream is(cpy);\n            string cur;\n            while(is>>cur)\n            {\n                total+=cur.size();\n                num++;\n            }\n        }\n        double res=total/num;\n\n        if(fabs(res-4.5)<distance)\n        {\n            distance=fabs(res-4.5);\n            sp=ch;\n        }\n    }\n    return sp;\n}\n\nchar tochange(char s,int koto)\n{\n\n    if(s>='a'&&s<='z')\n    {\n        int x=s-'a';\n        x+=koto;\n        if(x>=26)\n            x-=26;\n        s=(char)('a'+x);\n\n    }\n    else\n    {\n        int x=s-'A';\n        x+=koto;\n        if(x>=26)x-=26;\n        s=(char)('A'+x);\n    }\n    return s;\n\n}\nvoid callfile(char *in, char *out)\n{\n    freopen(in,\"r\",stdin);\n    freopen(out,\"w\",stdout);\n}\n\nint main(int argc,char *argv[])\n{\n    string s;\n    callfile(argv[2],argv[3]);\n    while(getline(cin,s))\n    {\n        vec.push_back(s);\n        //cout<<s<<endl;\n    }\n\n\n    if(strcmp(argv[1],\"count\")==0)\n    {\n        int counter[200];\n        for(int i=0; i<199; i++)counter[i]=0;\n\n        for(int i=0; i<vec.size(); i++)\n        {\n            for(int j=0; j<vec[i].size(); j++)\n            {\n                if(isvalid(vec[i][j]))\n                {\n                    counter[vec[i][j]]++;\n                }\n            }\n        }\n        cout<<\"{\"<<endl;\n        for(char i=32; i<122; i++)\n        {\n            if(isvalid(i))\n            {\n                cout<<\"\\\"\"<<i<<\"\\\": \"<<counter[i]<<\",\"<<endl;\n            }\n        }\n        cout<<\"\\\"z\"<<\"\\\": \"<<counter[122]<<endl;\n        cout<<\"}\"<<endl;\n    }\n    else if(strcmp(argv[1],\"space\")==0)\n    {\n\n        char ans=getspace();\n\n\n        cout<<\"{\"<<endl;\n        cout<<\"\\\"\"<<\"char\"<<\"\\\"\"<<\": \"<<\"\\\"\"<<ans<<\"\\\"\"<<endl;\n        cout<<\"}\"<<endl;\n\n    }\n    else if(strcmp(argv[1],\"decrypt\")==0)\n    {\n\n        char xp=getspace();\n      //  cout<<xp<<endl;\n        for(int i=0; i<vec.size(); i++)\n        {\n            for(int j=0; j<vec[i].size(); j++)\n            {\n                if(vec[i][j]==' ')vec[i][j]=xp;\n                else if(vec[i][j]==xp)vec[i][j]=' ';\n            }\n\n        }\n\n        //cout<<xp<<endl;\n        int counter[200];\n        for(int i=0; i<199; i++)counter[i]=0;\n\n        for(int i=0; i<vec.size(); i++)\n        {\n            for(int j=0; j<vec[i].size(); j++)\n            {\n                if(isvalid(vec[i][j]))\n                {\n                    counter[vec[i][j]]++;\n                }\n            }\n        }\n       // cout<<xp<<endl;\n        int ma=0;\n        char e='e';\n\n        for(int ch=30; ch<=130; ch++)\n        {\n            //cout<<ch<<endl;\n            if(isalpha(ch)&&counter[ch]>ma)\n            {\n                ma=counter[ch];\n                e=ch;\n            }\n        }\n       // cout<<e<<endl;\n        int dis='e'-e;\n        if(dis<0)dis+=26;\n       // cout<<dis<<endl;\n\n        for(int i=0; i<vec.size(); i++)\n        {\n            for(int j=0; j<vec[i].size(); j++)\n            {\n                if(isalpha(vec[i][j]))\n                {\n                    vec[i][j]=tochange(vec[i][j],dis);\n                }\n            }\n            cout<<vec[i]<<endl;\n        }\n\n\n    }\n    vec.clear();\n\n\n    return 0;\n}\n\n"}
{"id": 481, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    String output;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try{\n      int a=Integer.parseInt(args[i]);\n      if(0<=a&&a<=1000)\n      {\n      int k=0,p=0,e=0;\n      for(int j=0;a!=0;j++)\n      {\n        if(a%10==3)\n           {\n             p=1;\n           }\n        k+=a%10;\n        a=a/10;\n      }\n      if(k%3==0)\n      {\n        e=1;\n      }\n          if(e==1&&p==1)\n          {\n            output=\"dumb\";\n          }\n          else if(e==1&&p==0)\n          {\n              output=\"idiot\";\n          } \n          else if(p==1)\n          {\n              output=\"stupid\";\n          }   \n          else\n          {\n            output=\"smart\";\n          }  \n\n      }\n      else\n      {\n      \toutput=\"invalid\";\n\t\t\t  \n      }\n      System.out.println(output);\n      }catch(NumberFormatException exc){System.out.println(\"invalid\");}\n\n       \n\t\t}\n\t}\n}\n"}
{"id": 482, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) {\n    string s=argv[i];\n    if(!(isdigit(s[0]))){\n      cout<<\"invalid\"<<endl;\n      continue;\n    }\n    int n=stoi(s);\n    if(n<=1000 && n>=0){\n      if(n%3==0 && count(s.begin(),s.end(),'3')){\n        cout<<\"dumb\"<<endl;\n      }\n        else if(n%3==0){\n          cout<<\"idiot\"<<endl;\n        }\n        else if(count(s.begin(),s.end(),'3')){\n          cout<<\"stupid\"<<endl;\n        }\n        else{\n          cout<<\"smart\"<<endl;\n        }\n      }\n  }\n  return 0;\n}\n"}
{"id": 483, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    if len(argv) == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    try:\n        max_count = int(argv[0])\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    if max_count <= 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    target_phrase = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    history = []\n    \n    for _ in range(max_count):\n        # \u30e9\u30f3\u30c0\u30e0\u306b\u300c\u30c9\u300d\u304b\u300c\u30ab\u300d\u3092\u9078\u629e\u3057\u3066\u51fa\u529b\n        note = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(note)\n        history.append(note)\n\n        if len(history) >= len(target_phrase):\n            current_phrase = \"\".join(history[-len(target_phrase):])\n            if current_phrase == target_phrase:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 484, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6570\u5f0f\u3092\u53d7\u3051\u53d6\u308b\n    expression = argv[0]\n\n    # \u6570\u5f0f\u3092\u30aa\u30da\u30e9\u30f3\u30c9\u3068\u6f14\u7b97\u5b50\u306b\u5206\u5272\n    operand1_str, operator, operand2_str = expression.split()\n\n    # 9\u9032\u6570\u306e\u6587\u5b57\u5217\u309210\u9032\u6570\u306e\u6574\u6570\u306b\u5909\u63db\n    operand1_dec = int(operand1_str, 9)\n    operand2_dec = int(operand2_str, 9)\n    \n    result_dec = 0\n    # \u6f14\u7b97\u5b50\u306b\u57fa\u3065\u3044\u3066\u8a08\u7b97\n    if operator == '+':\n        result_dec = operand1_dec + operand2_dec\n    elif operator == '*':\n        result_dec = operand1_dec * operand2_dec\n\n    # \u7d50\u679c\u304c0\u306e\u5834\u5408\u306f'0'\u3092\u51fa\u529b\n    if result_dec == 0:\n        print('0')\n        return\n\n    # 10\u9032\u6570\u306e\u7d50\u679c\u30929\u9032\u6570\u306b\u5909\u63db\n    result_base9 = ''\n    temp_num = result_dec\n    while temp_num > 0:\n        remainder = temp_num % 9\n        result_base9 = str(remainder) + result_base9\n        temp_num = temp_num // 9\n    \n    print(result_base9)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 485, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean divisible(int x){\n    if(x%3==0)\n      return true;\n      return false;\n  }\n  public static boolean containsthree(int x){\n    String s=Integer.toString(x);\n    for(int i=0;i<s.length();i++){\n      if(s.charAt(i)=='3')\n        return true;\n    }\n    return false;\n  }\n \n\tpublic static void main(String[] args) {\n\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\n   \n      try{\n      int x=Integer.parseInt(args[i]);\n\n      if(x>=0 && x<=1000){\n        if(divisible(x)==true && containsthree(x)==true)\n            System.out.println(\"dumb\");\n        else if(divisible(x)==true)\n          System.out.println(\"idiot\");\n          else if(containsthree(x)==true)\n            System.out.println(\"stupid\");\n            else\n              System.out.println(\"smart\");\n\n      }\n      else  \n        System.out.println(\"invalid\");\n      }\n      catch(Exception ee){\n        System.out.println(\"invalid\");\n      }\n              \n      }\n\n\t\t//\tSystem.out.println(output);\n\t\t}\n\t}\n\n"}
{"id": 486, "language": "Python3", "code": "import sys\n\nclass QueenSolver:\n    def __init__(self, size=8):\n        self.N = size\n        self.board = [['.' for _ in range(size)] for _ in range(size)]\n        self.col_used = [False] * size\n        self.diag1_used = [False] * (2 * size - 1)\n        self.diag2_used = [False] * (2 * size - 1)\n        self.row_has_queen = [False] * size\n\n    def set_initial_queens(self, queens):\n        for r, c in queens:\n            self.board[r][c] = 'Q'\n            self.col_used[c] = True\n            self.diag1_used[r - c + self.N - 1] = True\n            self.diag2_used[r + c] = True\n            self.row_has_queen[r] = True\n\n    def solve(self):\n        self._recursive_solve(0)\n\n    def _recursive_solve(self, r):\n        if r == self.N:\n            # Solution found\n            for row in self.board:\n                print(\"\".join(row))\n            sys.exit(0)\n\n        if self.row_has_queen[r]:\n            self._recursive_solve(r + 1)\n            return\n\n        for c in range(self.N):\n            if not self.col_used[c] and \\\n               not self.diag1_used[r - c + self.N - 1] and \\\n               not self.diag2_used[r + c]:\n                \n                # Place\n                self.board[r][c] = 'Q'\n                self.col_used[c] = True\n                self.diag1_used[r - c + self.N - 1] = True\n                self.diag2_used[r + c] = True\n\n                self._recursive_solve(r + 1)\n\n                # Backtrack\n                self.board[r][c] = '.'\n                self.col_used[c] = False\n                self.diag1_used[r - c + self.N - 1] = False\n                self.diag2_used[r + c] = False\n\ndef main():\n    lines = sys.stdin.readlines()\n    k = int(lines[0])\n    initial_queens = []\n    for i in range(1, k + 1):\n        r, c = map(int, lines[i].split())\n        initial_queens.append((r, c))\n\n    solver = QueenSolver()\n    solver.set_initial_queens(initial_queens)\n    solver.solve()\n\nif __name__ == '__main__':\n    main()"}
{"id": 487, "language": "C++", "code": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  \n  for (int i = 1; i < argc; i++) {\n   \n    stringstream ss(argv[i]);\n    int nos;\n\n    if(ss>>nos)\n    {\n        if(nos>=0 && nos<=1000)\n        {\n          int count=0;       \n        \n        \n          if(nos%3==0)\n          {\n           // cout<<\"idiot\\n\";\n            count=count+1;\n          }\n\n           int tmp = nos;\n           while(tmp>=1)\n           {\n               if(tmp%10 == 3)\n               {\n                   //cout<<\"stupid\\n\";\n                   count=count+2;\n                   break;\n               }\n             tmp = tmp/10;\n           }\n      \n\n          if(count==1)\n          cout<<\"idiot\\n\";\n\n          else if(count==2)\n          cout<<\"stupid\\n\";\n\n          else if(count==3)\n          cout<<\"dumb\\n\";\n\n          else\n          cout<<\"smart\\n\";\n\n        }\n\n      else\n      cout<<\"invalid\\n\";\n\n    }\n    else\n    cout<<\"invalid\\n\";\n\n\n\n  }\n  \n  return 0;\n}\n"}
{"id": 488, "language": "Python3", "code": "import sys\n\ndef print_board(board, N=8):\n    chessboard = [[\".\" for i in range(N)] for j in range(N)]\n    for x in range(N):\n        chessboard[board[x]][x] = \"Q\"\n    for i in range(N):\n        print(\"\".join(chessboard[i]))\n\ndef check(board, line_num):\n    for i in range(line_num):\n        if (board[i] == board[line_num]):\n            return False\n        if (line_num - i == abs(board[line_num] - board[i])):\n            return False\n    return True\n\ndef set_Queens(N=8):\n    ans = []\n    board = [-1] * N\n    for a in range(N):\n        board[0] = a\n        for b in range(N):\n            board[1] = b\n            if not check(board, 1):\n                continue\n            for c in range(N):\n                board[2] = c\n                if not check(board, 2):\n                    continue\n                for d in range(N):\n                    board[3] = d\n                    if not check(board, 3):\n                        continue\n                    for e in range(N):\n                        board[4] = e\n                        if not check(board, 4):\n                            continue\n                        for f in range(N):\n                            board[5] = f\n                            if not check(board, 5):\n                                continue\n                            for g in range(N):\n                                board[6] = g\n                                if not check(board, 6):\n                                    continue\n                                for h in range(N):\n                                    board[7] = h\n                                    if check(board, 7):\n                                        ans_board = board.copy()\n                                        ans.append(ans_board)\n\n    return ans\n        \ndef main(argv):\n  if __name__ == '__main__':\n    main(sys.argv[1:])\n\nk = int(input())\ninput_list = [[int(x) for x in input().split()] for _ in range(k)]\n\nans_list = set_Queens(8)\n\nfor i in range(len(ans_list)):\n    count = 0\n    for j in range(k):\n        if ans_list[i][input_list[j][1]] == input_list[j][0]:\n            count += 1\n            if count == len(input_list):\n                print_board(ans_list[i])\n'''\ninitialboard = [-1] * N\nfor i in range(k):\n  initialboard[input_list[i][1]] = input_list[i][0]\n\nprint(initialboard)\nno_define_Queens(initialboard)\nset_Queens(initialboard,N)\n#printboard(set_Queens(initialboard,N))\nl = [3,5,7,1,0,2,4,6]\nprint(check(l, 4))\n'''"}
{"id": 489, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    results = {\n        0: \"smart\",\n        1: \"idiot\",\n        2: \"stupid\",\n        3: \"dumb\"\n    }\n\n    for s in argv:\n        if not s.isdigit() or not (0 <= int(s) <= 1000):\n            print(\"invalid\")\n            continue\n        \n        n = int(s)\n        key = (n % 3 == 0) * 1 + ('3' in s) * 2\n        print(results[key])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 490, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    positions = []\n    rset = set()\n    cset = set()\n    dset1 = set()\n    dset2 = set()\n    B = [[\".\"]*8 for _ in range(8)]\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        B[r][c] = \"Q\"\n        positions.append((r,c))\n        rset.add(r)\n        cset.add(c)\n        dset1.add(r+c)\n        dset2.add(r-c)\n    def rec(idx):\n        if idx==8:\n            for ln in B:\n                print(''.join(ln))\n            exit()\n        if idx in rset:\n            rec(idx+1)\n            return\n        for j in range(8):\n            if j in cset or (idx+j) in dset1 or (idx-j) in dset2:\n                continue\n            B[idx][j]=\"Q\"\n            cset.add(j)\n            dset1.add(idx+j)\n            dset2.add(idx-j)\n            rec(idx+1)\n            B[idx][j]=\".\"\n            cset.remove(j)\n            dset1.remove(idx+j)\n            dset2.remove(idx-j)\n    rec(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 491, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    limit = int(argv[0]) if argv else 0\n    pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    output = []\n    for i in range(limit):\n        sound = random.choice(['\u30c9', '\u30ab'])\n        print(sound)\n        output.append(sound)\n        if ''.join(output[-len(pattern):]) == pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 492, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n          try{\n           int number=int.Parse(args[i]);\n           if(number<0 || number>1000){\n             Console.WriteLine(\"invalid\");\n           }\n           if(number%3==0 && args[i].Contains(\"3\")){\n             Console.WriteLine(\"dumb\");\n           }\n           else if( number%3==0){\n             Console.WriteLine(\"idiot\");\n           }\n           else if( args[i].Contains(\"3\")){\n             Console.WriteLine(\"stupid\");\n           }\n           else{\n             Console.WriteLine(\"smart\");\n           }\n          }\n          catch(Exception ex){\n            Console.WriteLine(\"invalid\");\n          }\n        }\n\n\n    }\n}\n"}
{"id": 493, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\nint three_idiots(int number){\n  int rem,f;\n  f=0;\n  while(number>0 ){\n    rem=number%10;\n    if(rem==3){\n      f=1;\n      break;\n    }\n    number=number/10;\n     }\n  if(f==1)\n  return 1;\n  else\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i <argc; i++) {\n  if(atoi(argv[i])==0)\n  {\n      printf(\"invalid\\n\");\n    }\n  else{\n      if(atoi(argv[i])%3==0 && three_idiots(atoi(argv[i])))\n      {\n        printf(\"dumb\\n\");\n      }\n      else if(atoi(argv[i])%3==0)\n      {\n        printf(\"idiot\\n\");\n      }\n      else if(three_idiots(atoi(argv[i])))\n      {\n        printf(\"stupid\\n\");\n      }\n      else\n      {\n        printf(\"smart\\n\");\n      }\n    }\n  }\n\n  return 0;\n}\n"}
{"id": 494, "language": "Java", "code": "import java.nio.file.*;\nimport java.util.*;\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\n\npublic class SingleSubCipher {\n    public static void main(String[] args) throws Exception {\n        String cmd = args[0], inputFile = args[1], outputFile = args[2];\n        String text = new String(Files.readAllBytes(Paths.get(inputFile)), StandardCharsets.UTF_8);\n\n        if (\"count\".equals(cmd)) {\n            Map<Character, Integer> freq = new LinkedHashMap<>();\n            for (char c : text.toCharArray()) {\n                if (Character.isLetter(c) || c == ' ') {\n                    freq.put(c, freq.getOrDefault(c, 0) + 1);\n                }\n            }\n            writeJson(freq, outputFile);\n\n        } else if (\"space\".equals(cmd)) {\n            char spaceChar = detectSpaceChar(text);\n            writeSpaceJson(spaceChar, outputFile);\n\n        } else if (\"decrypt\".equals(cmd)) {\n            char spaceChar = detectSpaceChar(text);\n            int shift = detectShift(text, spaceChar);\n            String decrypted = decrypt(text, shift, spaceChar);\n            Files.write(Paths.get(outputFile), decrypted.getBytes(StandardCharsets.UTF_8));\n        }\n    }\n\n    private static void writeJson(Map<Character, Integer> map, String outputFile) throws IOException {\n        StringBuilder sb = new StringBuilder(\"{\\n\");\n        int cnt = 0;\n        for (Map.Entry<Character, Integer> e : map.entrySet()) {\n            sb.append(\"  \\\"\").append(e.getKey() == ' ' ? \" \" : e.getKey()).append(\"\\\": \").append(e.getValue());\n            if (++cnt < map.size()) sb.append(\",\");\n            sb.append(\"\\n\");\n        }\n        sb.append(\"}\\n\");\n        Files.write(Paths.get(outputFile), sb.toString().getBytes(StandardCharsets.UTF_8));\n    }\n\n    private static char detectSpaceChar(String text) {\n        Map<Character, Integer> freq = new HashMap<>();\n        long spaceCount = text.chars().filter(ch -> ch == ' ').count();\n        for (char c : text.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                freq.put(c, freq.getOrDefault(c, 0) + 1);\n            }\n        }\n        char result = 'a';\n        long minDiff = Long.MAX_VALUE;\n        for (Map.Entry<Character, Integer> e : freq.entrySet()) {\n            long diff = Math.abs(e.getValue() - spaceCount);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result = e.getKey();\n            }\n        }\n        return result;\n    }\n\n    private static void writeSpaceJson(char spaceChar, String outputFile) throws IOException {\n        String s = \"{\\n  \\\"char\\\": \\\"\" + spaceChar + \"\\\"\\n}\\n\";\n        Files.write(Paths.get(outputFile), s.getBytes(StandardCharsets.UTF_8));\n    }\n\n    private static int detectShift(String text, char spaceChar) {\n        int[] freq = new int[26];\n        for (char c : text.toCharArray()) {\n            char lower = Character.toLowerCase(c);\n            if (lower >= 'a' && lower <= 'z' && lower != spaceChar) freq[lower - 'a']++;\n        }\n\n        int maxIdx = 0;\n        for (int i = 1; i < 26; i++) {\n            if (freq[i] > freq[maxIdx]) maxIdx = i;\n        }\n        // freq max is shifted e (index 4)\n        return (maxIdx - 4 + 26) % 26;\n    }\n\n    private static String decrypt(String text, int shift, char spaceChar) {\n        StringBuilder sb = new StringBuilder(text.length());\n        for (char c : text.toCharArray()) {\n            if (c == spaceChar) {\n                sb.append(' ');\n            } else if (c >= 'a' && c <= 'z') {\n                char dec = (char)(c - shift);\n                if (dec < 'a') dec += 26;\n                sb.append(dec);\n            } else if (c >= 'A' && c <= 'Z') {\n                char dec = (char)(c - shift);\n                if (dec < 'A') dec += 26;\n                sb.append(dec);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"id": 495, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class EightQueensSolver\n{\n    static public void Main(string[] args)\n    {\n        // \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\n        int k = int.Parse(Console.ReadLine());\n        var prePlacedQueens = new List<(int row, int col)>();\n        for (int i = 0; i < k; i++)\n        {\n            var parts = Console.ReadLine().Split();\n            prePlacedQueens.Add((int.Parse(parts[0]), int.Parse(parts[1])));\n        }\n\n        char[,] board = new char[8,8];\n        for (int r = 0; r < 8; r++)\n            for (int c = 0; c < 8; c++)\n                board[r, c] = '.';\n\n        foreach (var queen in prePlacedQueens)\n            board[queen.row, queen.col] = 'Q';\n\n        Solve(board, prePlacedQueens, 0);\n\n        for (int r = 0; r < 8; r++)\n        {\n            for (int c = 0; c < 8; c++)\n                Console.Write(board[r, c]);\n            Console.WriteLine();\n        }\n    }\n\n    static bool Solve(char[,] board, List<(int row, int col)> prePlacedQueens, int row)\n    {\n        if (row == 8)\n            return true;\n        \n        for (int col = 0; col < 8; col++)\n        {\n            // Check if the position is safe\n            if (!IsSafe(board, row, col))\n                continue;\n\n            board[row, col] = 'Q';\n\n            if (Solve(board, prePlacedQueens, row + 1))\n                return true;\n\n            board[row, col] = '.';\n        }\n\n        return false;\n    }\n\n    static bool IsSafe(char[,] board, int row, int col)\n    {\n        // Check column\n        for (int r = 0; r < row; r++)\n        {\n            if (board[r, col] == 'Q')\n                return false;\n        }\n\n        // Check diagonals\n        int r, c;\n        \n        // Top-left diagonal\n        r = row - 1;\n        c = col - 1;\n        while (r >= 0 && c >= 0)\n        {\n            if (board[r, c] == 'Q')\n                return false;\n            r--;\n            c--;\n        }\n\n        // Top-right diagonal\n        r = row - 1;\n        c = col + 1;\n        while (r >= 0 && c < 8)\n        {\n            if (board[r, c] == 'Q')\n                return false;\n            r--;\n            c++;\n        }\n\n        return true;\n    }\n}"}
{"id": 496, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef vector<int> vi;\ntypedef pair<int, int> pi;\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<pi> vpi;\n\n#define debugone(x) cout << #x << \" \" << x << endl;\n#define debugtwo(x) cout << #x << \"-------------\" << endl;for(auto &it: x) cout << it << \" \";cout << endl;\n#define debugthree(x, i, j) cout << #x << \"------------\" << endl;cout << \"from \" << i << \" to \" << j << endl;for(int k=i; k<=j; k++) cout << x[k] << \" \";cout << endl;\n\nvi chess(9);\nvi given(9), positions;\n\nbool matches(){\n\tfor(int i=0; i<positions.size(); i++){\n\t\tif(given[positions[i]] != chess[positions[i]]) return false;\n\t}\n\treturn true;\n}\n\nbool valid(){\n\tfor(int i=1; i<=8; i++){\n\t\tfor(int j=i+1; j<=8; j++){\n\t\t\tint x1 = i, y1 = chess[x1];\n\t\t\tint x2 = j, y2 = chess[x2];\n\t\t\tif((y2 - y1 == x2 - x1) || (y2 - y1 == x1 - x2)) return false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvoid print(int id){\n\tfor(int i=1; i<=8; i++){\n\t\tif(chess[id] == i) cout << \"Q\";\n\t\telse cout << \".\";\n\t}\n\tcout << \"\\n\";\n}\n\nint main(int argc, char *argv[]){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\t// debugone(argc);\n\t// debugone(argv[1]);\n\tifstream infile;\n\tstring filename;\n\t// // filename.insert(filename.begin(), 1, '\"');\n\t// filename.append(argv[1]);\n\t// // filename.insert(filename.end(), 1, '\"');\n\t// debugone(filename);\n\tfilename = argv[1];\n\tinfile.open(filename);\n\tint k;\n\tinfile >> k;\n\t// debugone(k);\n\tfor(int i=0; i<k; i++){\n\t\tint r, c;\n\t\tinfile >> r >> c;\n\t\tr++;\n\t\tc++;\n\t\tgiven[r] = c;\n\t\tpositions.push_back(r);\n\t}\n\tinfile.close();\n\tfor(int i=1; i<=8; i++){\n\t\tchess[i] = i;\n\t}\n\t// debugtwo(chess);\n\t// debugtwo(given);\n\t// debugtwo(positions);\n\tdo{\n\t\tif(matches() && valid()) break;\n\t\t// debugthree(chess, 1, 8);\n\t}while(next_permutation(chess.begin()+1, chess.end()));\n\n\tfor(int i=1; i<=8; i++){\n\t\tprint(i);\n\t}\n\n\tinfile.close();\n}"}
{"id": 497, "language": "Java", "code": "package track;\n\n//import java.util.*;\nimport java.io.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tString jsonInput = convert(args[0]);\n    String[] lines = jsonInput.split(\"}\");\n    int[] robotArray = new int[lines.length -1];\n    int[] youArray = new int[lines.length - 1];\n    int robotIndex = 0, youIndex = 0;\n    for(int i=0;i<lines.length;i++)\n    {\n      String[] commanSplit = lines[i].split(\",\");\n      for(int j=0; j<commanSplit.length;j++)\n      {\n        if(commanSplit[j].contains(\"robot\"))\n        {\n          robotArray[robotIndex++] = Integer.parseInt(commanSplit[j].split(\":\")[1].trim());\n        }\n        if(commanSplit[j].contains(\"you\"))\n        {\n          youArray[youIndex++] = Integer.parseInt(commanSplit[j].split(\":\")[1].trim());\n        }\n      }\n    }\n    int finalMove = robotArray[robotIndex-1];\n    int finalMove2 = robotArray[robotIndex-2];\n    int finalMove3 = robotArray[robotIndex -3];\n    int oppMove = youArray[youIndex -1];\n\n    int lastMove = 4;\n    for(int i=robotIndex - 2;i>=2;i--)\n    {\n      if(robotArray[i]==finalMove)\n      {\n        if(robotArray[i-1]==finalMove2)\n        {\n          if(robotArray[i-2]==finalMove3)\n          {\n            if(oppMove == youArray[i])\n            {\n              lastMove = robotArray[i+1];\n              break;\n            }\n          }\n        }\n      }\n    }\n    if(lastMove==4)\n    {\n      System.out.println(2);\n    } else\n    {\n      System.out.println((lastMove));\n    }\n\t}\n  public static String convert(String filename)\n  {\n    StringBuilder string = new StringBuilder();\n    try\n    {\n      FileInputStream fis = new FileInputStream(filename);\n      int value;\n      while((value=fis.read())!=-1)\n      {\n        string.append((char)value);\n      }\n    } catch(IOException exp)\n    {\n      System.out.println(\"NO file with the given name is found\");\n    }\n    return string.toString();\n  }\n}\n"}
{"id": 498, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_halfwidth_string(const char *str) {\n    while (*str) {\n        if (!isdigit(*str)) return 0;\n        str++;\n    }\n    return 1;\n}\n\nint has_digit_three(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid evaluate(const char *arg) {\n    if (!is_halfwidth_string(arg)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int number = atoi(arg);\n    if (number < 0 || number > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (number % 3 == 0 && has_digit_three(number)) {\n        printf(\"dumb\\n\");\n    } else if (number % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (has_digit_three(number)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        evaluate(argv[i]);\n    }\n    return 0;\n}"}
{"id": 499, "language": "Python3", "code": "def display_board(board):\n    for line in board:\n        print(''.join(line))\n\ndef is_safe(board, row, col):\n    for i in range(8):\n        if board[i][col] == 'Q' or (row - i >= 0 and board[row - i][col - i] == 'Q') or \\\n           (row - i >= 0 and col + i < 8 and board[row - i][col + i] == 'Q') or \\\n           (row + i < 8 and col - i >= 0 and board[row + i][col - i] == 'Q') or \\\n           (row + i < 8 and col + i < 8 and board[row + i][col + i] == 'Q'):\n            return False\n    return True\n\ndef place_queens(board, count):\n    if count == 8:\n        display_board(board)\n        return True\n    \n    for r in range(8):\n        for c in range(8):\n            if board[r][c] == '.' and is_safe(board, r, c):\n                board[r][c] = 'Q'\n                if place_queens(board, count + 1): \n                    return True\n                board[r][c] = '.'\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    k = int(data[0])\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    \n    for i in range(1, k + 1):\n        r, c = map(int, data[i].strip().split())\n        board[r][c] = 'Q'\n    \n    place_queens(board, k)\n\nif __name__ == '__main__':\n    main()"}
{"id": 500, "language": "Python3", "code": "import sys\nfrom copy import deepcopy\n\nSUCCESS = 1\nFAIL = 0\n\nFREE = 1\nNOT_FREE = 0\nN = 8\n\nclass Queens:\n    def __init__(self):\n        self.pos = [-1 for _ in range(N)]\n        self.col = [FREE for _ in range(N)]\n        self.up = [FREE for _ in range(2*N-1)]\n        self.down = [FREE for _ in range(2*N-1)]\n        self.count = 0\n        self.answer = {}\n\n    def put_queen(self,a):\n        for b in range(N):\n            if self.col[b] == FREE and self.up[a+b] == FREE and \\\n                self.down[a-b+(N-1)] == FREE:\n                self.pos[a] = b\n                self.col[b] = NOT_FREE\n                self.up[a+b] = NOT_FREE\n                self.down[a-b+(N-1)] = NOT_FREE\n\n                if a + 1 >= N:\n                    self.count += 1\n                    pos = deepcopy(self.pos)\n                    self.answer[self.count] = pos\n                else:\n                    self.put_queen(a+1)\n\n                self.pos[a] = -1\n                self.col[b] = FREE\n                self.up[a+b] = FREE\n                self.down[a-b+(N-1)] = FREE\n\n    def check_queens(self,pos):\n        self.put_queen(0)\n\n        for k in self.answer.keys():\n            if self.__ismatch(pos,self.answer[k]):\n                self.__print_queens(self.answer[k])\n\n    def __ismatch(self,posx,posy):\n        flag = True\n        \n        for i in range(N):\n            if posx[i] != -1 and posx[i] != posy[i]:\n                flag = flag and False\n                \n        return flag\n    \n\n    def __print_queens(self,pos):\n        for i in range(N):\n            for j in range(N):\n                if pos[i] == j:\n                    print(\"Q\", end=\"\")\n                else:\n                    print(\".\", end=\"\")\n            print()\n\ndef read_file(path):\n    k = 0\n    r = []\n    c = []\n    \n    f = open(path,\"r\")\n    \n    k = int(f.readline().split('\\n')[0])\n    for line in f:\n        r.append(int(line.split()[0]))\n        c.append(int(line.split()[1]))\n\n    f.close\n\n\n    pos = [-1 for _ in range(N)]\n    for i in range(k):\n        pos[r[i]] = c[i]\n \n    return pos\n\ndef main(argv):\n    pos = read_file(argv[0])\n    q = Queens()\n    q.check_queens(pos)\n  \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 501, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n    static int n=8;\n    static char[][] b=new char[n][n];\n    \n    public static void main(String[]a){\n        var s=new Scanner(System.in);\n        for(int i=0;i<n;i++)for(int j=0;j<n;j++)b[i][j]='.';\n        int k=s.nextInt();\n        while(k-->0)b[s.nextInt()][s.nextInt()]='Q';\n        p(0);\n    }\n    \n    static void p(int r){\n        if(r==n){\n            for(var L:b)System.out.println(new String(L));\n            System.exit(0);\n        }\n        // Is this row already filled?\n        boolean f=false;\n        for(int c=0;c<n;c++)if(b[r][c]=='Q')f=true;\n        if(f){p(r+1);return;}\n        \n        for(int c=0;c<n;c++){\n            if(s(r,c)){\n                b[r][c]='Q';\n                p(r+1);\n                b[r][c]='.';\n            }\n        }\n    }\n    \n    static boolean s(int r,int c){\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                if(b[i][j]=='Q'){\n                    if(j==c||Math.abs(r-i)==Math.abs(c-j))return false;\n                }\n            }\n        }\n        return true;\n    }\n}"}
{"id": 502, "language": "Python3", "code": "import sys\n\ndef fool_algorithm(arg):\n    if not arg.isdigit():\n        return 'invalid'\n    num = int(arg)\n    if num < 0 or num > 1000:\n        return 'invalid'\n    div3 = (num % 3 == 0)\n    find3 = ('3' in arg)\n    if div3 and find3:\n        return 'dumb'\n    elif div3:\n        return 'idiot'\n    elif find3:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(arguments):\n    for arg in arguments:\n        print(fool_algorithm(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 503, "language": "Python3", "code": "import sys\nimport json\nimport string\n\ndef count_letters(filename):\n    freq = {}\n    # \u82f1\u5b57\u3068\u7a7a\u767d\u306e\u307f\u30ab\u30a6\u30f3\u30c8\n    keys = list(string.ascii_uppercase + string.ascii_lowercase + \" \")\n    for k in keys:\n        freq[k] = 0\n    with open(filename, 'r', encoding='utf-8') as f:\n        for line in f:\n            for ch in line:\n                if ch in freq:\n                    freq[ch] += 1\n    return freq\n\ndef detect_space(filename):\n    freq = {}\n    # \u5c0f\u6587\u5b57\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u307f\u30ab\u30a6\u30f3\u30c8\n    for c in string.ascii_lowercase:\n        freq[c] = 0\n    with open(filename, 'r', encoding='utf-8') as f:\n        for line in f:\n            for ch in line:\n                if ch in freq:\n                    freq[ch] += 1\n    # \u7a7a\u767d\u306f\u5927\u91cf\u306b\u51fa\u73fe\u3059\u308b\u3002\u6700\u5927\u983b\u5ea6\u306e\u6587\u5b57\u3068\u3059\u308b\n    maxchar = max(freq, key=lambda k: freq[k])\n    return maxchar\n\ndef shift_char(c, shift):\n    if c in string.ascii_lowercase:\n        return chr((ord(c)-ord('a')-shift)%26 + ord('a'))\n    elif c in string.ascii_uppercase:\n        return chr((ord(c)-ord('A')-shift)%26 + ord('A'))\n    else:\n        return c\n\ndef decrypt(filename, outfilename):\n    # \u307e\u305a\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u3092\u7279\u5b9a\n    space_char = detect_space(filename)\n    # \u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3092\u8aad\u3080\n    with open(filename, 'r', encoding='utf-8') as f:\n        text = f.read()\n    # \"space\"\u6587\u5b57\u3092\u5b9f\u969b\u306e\u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u63db\n    replaced = text.replace(space_char, ' ')\n    # \u983b\u5ea6\u89e3\u6790\uff08\u5c0f\u6587\u5b57 only\uff09\n    freq = {}\n    for c in string.ascii_lowercase:\n        freq[c] = 0\n    for ch in replaced:\n        if ch in freq:\n            freq[ch] += 1\n    # 'e'\u304c\u6700\u983b\u51fa\u306a\u306e\u3067\u3001\u6700\u983b\u51fa\u6587\u5b57\u304b\u3089'e'\u307e\u3067\u306e\u30b7\u30d5\u30c8\u3092\u6c42\u3081\u308b\n    most_freq_char = max(freq, key=lambda k: freq[k])\n    shift = (ord(most_freq_char)-ord('e')) % 26\n    # \u5fa9\u53f7\u51e6\u7406\n    result = []\n    for ch in replaced:\n        if ch in string.ascii_lowercase:\n            result.append(shift_char(ch, shift))\n        elif ch in string.ascii_uppercase:\n            result.append(shift_char(ch, shift))\n        else:\n            result.append(ch)\n    with open(outfilename, 'w', encoding='utf-8') as f:\n        f.write(''.join(result))\n\ndef main(argv):\n    if len(argv) != 3:\n        sys.exit(1)\n    cmd = argv[0]\n    infile = argv[1]\n    outfile = argv[2]\n    if cmd == 'count':\n        freq = count_letters(infile)\n        with open(outfile, 'w', encoding='utf-8') as f:\n            json.dump(freq, f, indent=2)\n    elif cmd == 'space':\n        ch = detect_space(infile)\n        with open(outfile, 'w', encoding='utf-8') as f:\n            json.dump({\"char\": ch}, f)\n    elif cmd == 'decrypt':\n        decrypt(infile, outfile)\n    else:\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 504, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\nfor(int i=0, l = args.length; i < l;i++)\n{\n  try{\n      int s=Integer.parseInt(args[i]);\n      if(s>=0 && s<=1000)\n      {\n        if(s%3==0 && args[i].contains(\"3\"))\n        {\n        System.out.println(\"dumb\");\n        }\n        else if(s%3==0)\n        {\n         System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      \n          else{\n        System.out.println(\"invalid\");\n      }     }   \n      catch(Exception e)\n      {\n      \n        System.out.println(\"invalid\");\n      \n      }\n\t}\n}\n}"}
{"id": 505, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring toRoman(int num) {\n    string roman = \"\";\n    vector<pair<int, string>> mappings = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n\n    for (auto &m : mappings) {\n        while (num >= m.first) {\n            roman += m.second;\n            num -= m.first;\n        }\n    }\n    return roman;\n}\n\nint main(int argc, char *argv[]) {\n    // \u5165\u529b\u3055\u308c\u305f\u5f15\u6570\u3092\u78ba\u8a8d\n    if (argc != 2) return 1;\n    int input = atoi(argv[1]);\n    \n    cout << toRoman(input) << endl; // \u51fa\u529b\n    return 0;\n}"}
{"id": 506, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  // \u5f15\u6570\u304c\u306a\u3044\u5834\u5408\u3084\u4e0d\u6b63\u306a\u5834\u5408\u306f\u7d42\u4e86\n  if (argc != 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  int maxCount = atoi(argv[1]);\n  if (maxCount < 0 || maxCount > 10000) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  srand(time(NULL)); // \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u306e\u8a2d\u5b9a\n  char sequence[10000];\n  int i;\n\n  // \u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u5909\u6570\n  int outputCount = 0;\n  const char* patterns = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  int patternLength = strlen(patterns);\n  int found = 0;\n\n  for (i = 0; i < maxCount; i++) {\n    char sound = (rand() % 2 == 0) ? '\u30c9' : '\u30ab';\n    printf(\"%c\\n\", sound);\n    sequence[outputCount++] = sound;\n\n    // \u8a18\u9332\u3057\u305f\u97f3\u3092\u30c1\u30a7\u30c3\u30af\n    if (outputCount >= patternLength) {\n      if (strncmp(&sequence[outputCount - patternLength], patterns, patternLength) == 0) {\n        found = 1;\n        break;\n      }\n    }\n  }\n\n  if (found) {\n    printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n  } else {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  }\n\n  return 0;\n}"}
{"id": 507, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n\n"}
{"id": 508, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nint idiot(int n)\n{\n\tif(n % 3 == 0)  //checking divisibilty for 3\n\t  {\n\t\t  return 1;\n\t  }\n    else\n    {\n\t\t  return 0;\n\t  }\n}\nint stupid(int n)\n{\n\tint remainder;\n\t  while(n!=0)\n\t  {\n\t    remainder = n%10;\n\t\t\tif(remainder == 3) //checking wheather 3 includes in given digit\n\t\t  {\n\t\t\treturn 1;\n\t  \t}\n\t  n/=10;\n\t  }\nreturn 0;\n}\nint dumb(int n)\n{\n  if(idiot(n) && stupid(n)) //divisibility for 3 and which includes 3\n  {\n\t  return 1;\n  }\n  else\n  {\n\t  return 0;\n  }\n}\nint smart(int n)\n{\n\tif(!idiot(n) && !stupid(n)) //condition for smart\n\t{\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n int i;\n  for(i = 1;i< argc;i++)\n  {\n     int number =atoi(argv[i]);\n     if(number!=0)\n     {\n      \tif(idiot(number) && stupid(number))\n      \t{\n\t    \tprintf(\"dumb\\n\");\n\t      }\n        else\n        {\n\t        if(idiot(number))\n\t        {\n\t\t      printf(\"idiot\\n\");\n\t        }\n         else \n            if(stupid(number))\n            {\n\t        \tprintf(\"stupid\\n\");\n          \t}\n            else\n               if(smart(number))\n               {\n\t\t           printf(\"smart\\n\");\n              \t}\t\n\t      }\n      }\n      else\n      {\n      printf(\"invalid\\n\");\n      }\n}\n  return 0;\n}\n"}
{"id": 509, "language": "C++", "code": "//\n//  main.cpp\n//  CodingTest\n//\n//  Created by Hoang Hiep Ho on 3/6/19.\n//  Copyright \u00a9 2019 Gamedex. All rights reserved.\n//\n\n#include<cstdio>\n#include<stdlib.h>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\nstruct queensCor{\n    int x,y;\n};\n\nint TC,a,b,k,colNotSet[10],sizeOfColNotSet;\nbool col[10],ok;\nqueensCor A[10];\n\nbool checkCondition(int r, int c, int x){\n    for(int prev = 1; prev <x;prev++){\n        if (A[prev].x == r || A[prev].y == c || abs(A[prev].x-r) == abs(A[prev].y-c)){\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid printRes(){\n    bool okQ = false;\n    for (int i=0;i<=7;i++){\n        for (int j=0;j<=7;j++){\n            okQ = false;\n            for (int x=1;x<=8;x++)\n                if (A[x].x == i && A[x].y == j) {\n                    cout << \"Q\"; okQ=true;\n                    continue;\n                }\n            if (!okQ)\n            cout << \".\";\n        }\n        cout << endl;\n    }\n}\nvoid tryRes(int id, int x){\n    if (ok) return;\n    int c = colNotSet[id];\n    if(x == 9){\n        \n            printRes();\n            ok = true;\n            return;\n        \n \n    }\n    else {\n        for(int r = 0; r < 8;r++){\n            if(checkCondition(r,c,x)){\n                A[x].x = r;\n                A[x].y = c;\n                tryRes(id+1,x+1);\n             \n            }\n        }\n    }\n}\n\nvoid init() {\n    memset(A,0,sizeof A);\n    memset(col,true,sizeof col);\n    ok = false;\n    \n    sizeOfColNotSet = 0;\n    \n}\nint main(int argc, char *argv[]){\n    init();\n    \n    freopen(argv[1], \"r\", stdin);\n    cin >> k;\n    for (int i=1;i<=k;i++) {\n        int x,y;\n        cin >> x >> y;\n        A[i].x = x; A[i].y = y;\n        col[y]=false;\n    }\n    \n    for (int c = 0; c < 8; c++)\n        if (col[c]) {\n            sizeOfColNotSet++;\n            colNotSet[sizeOfColNotSet]=c;\n            \n        }\n    \n    tryRes(1,k+1);\n    return 0;\n}\n"}
{"id": 510, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Enumeration for RPS hands for better readability\ntypedef enum {\n    ROCK = 0,\n    SCISSORS = 1,\n    PAPER = 2\n} RpsHand;\n\n// Structure to hold the robot's decision parameters\ntypedef struct {\n    RpsHand r3, r2, r1; // Robot's hands: 3, 2, and 1 rounds ago\n    RpsHand o1;         // Opponent's hand 1 round ago\n} RobotParameters;\n\n// Global array to count how many times each specific set of parameters has occurred.\n// This acts as our state machine's memory.\nint parameterVisitCounts[3 * 3 * 3 * 3]; // Total 81 unique states (0-80)\n\n// Calculates a unique integer index for a given set of robot parameters.\nint generateStateIndex(const RobotParameters *params) {\n    return params->r3 * 27 + params->r2 * 9 + params->r1 * 3 + params->o1;\n}\n\n// Determines the hand that wins against a given hand.\nRpsHand getWinningHand(RpsHand opponentHand) {\n    return (RpsHand)((opponentHand + 2) % 3);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <json_input_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *jsonFile = fopen(argv[1], \"r\");\n    if (!jsonFile) {\n        perror(\"Error opening JSON input file\");\n        return 1;\n    }\n\n    // Initialize all parameter visit counts to zero\n    memset(parameterVisitCounts, 0, sizeof(parameterVisitCounts));\n\n    // Initialize the robot's decision parameters as specified: Rock, Scissors, Paper.\n    // Opponent's last hand is assumed to be Rock (0) before any records.\n    RobotParameters currentParams = {\n        .r3 = ROCK,\n        .r2 = SCISSORS,\n        .r1 = PAPER,\n        .o1 = ROCK\n    };\n\n    char recordBuffer[100]; // Buffer to read a single JSON record string\n    int bufferIdx = 0;\n    int inRecord = 0; // Flag to indicate if we are inside a '{}' block\n\n    int ch;\n    while ((ch = fgetc(jsonFile)) != EOF) {\n        if (ch == '{') {\n            inRecord = 1;\n            bufferIdx = 0;\n            recordBuffer[bufferIdx++] = ch; // Start capturing\n        } else if (inRecord) {\n            recordBuffer[bufferIdx++] = ch;\n            if (ch == '}') {\n                recordBuffer[bufferIdx] = '\\0'; // Null-terminate\n                inRecord = 0; // End of record\n\n                int robotPlayedHand, youPlayedHand;\n                // Parse the hands from the captured record string\n                if (sscanf(recordBuffer, \"{\\\"robot\\\":%d,\\\"you\\\":%d}\", &robotPlayedHand, &youPlayedHand) == 2) {\n                    // Register the current state's usage\n                    int stateIndex = generateStateIndex(&currentParams);\n                    parameterVisitCounts[stateIndex]++;\n\n                    // Update the robot's history with the actual hands played in this round\n                    currentParams.r3 = currentParams.r2;\n                    currentParams.r2 = currentParams.r1;\n                    currentParams.r1 = (RpsHand)robotPlayedHand;\n                    currentParams.o1 = (RpsHand)youPlayedHand;\n                }\n            }\n        }\n    }\n    fclose(jsonFile);\n\n    // After processing all historical data, predict the robot's next move\n    int finalStateIdx = generateStateIndex(&currentParams);\n    RpsHand robotNextPredictedHand = (RpsHand)(parameterVisitCounts[finalStateIdx] % 3);\n\n    // Calculate and print the winning hand for us\n    RpsHand winningMove = getWinningHand(robotNextPredictedHand);\n    printf(\"%d\\n\", winningMove);\n\n    return 0;\n}"}
{"id": 511, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction baka_algorithm($input) {\n  if (!is_numeric($input) || !preg_match('/^\\d+$/', $input)) return 'invalid';\n  $n = intval($input);\n  if ($n > 1000 || $n < 0) return 'invalid';\n  $contains3 = strchr(strval($input), '3') !== false;\n  $by3 = $n % 3 == 0;\n  if ($by3 && $contains3) return \"dumb\";\n  if ($by3) return \"idiot\";\n  if ($contains3) return \"stupid\";\n  return \"smart\";\n}\n\nfunction main($argc, $argv) {\n  foreach ($argv as $v) {\n    echo baka_algorithm($v) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 512, "language": "Java", "code": "package judge;\n\npublic class IdiotChecklist {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int x = Integer.parseInt(arg);\n                if (x < 0 || x > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    boolean modThree = x % 3 == 0;\n                    boolean hasThree = String.valueOf(x).contains(\"3\");\n\n                    if (modThree && hasThree) {\n                        System.out.println(\"dumb\");\n                    } else if (modThree) {\n                        System.out.println(\"idiot\");\n                    } else if (hasThree) {\n                        System.out.println(\"stupid\");\n                    } else {\n                        System.out.println(\"smart\");\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 513, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(numbers) {\n    numbers.forEach((number) => console.log(convert(number)));\n}\n\nfunction has3Num(number) {\n    return number.toString().search('3') >= 0 ? true : false;\n}\n\nfunction convert(number) {\n    if (0 <= number && number <= 1000 && !isNaN(number)) {\n        if (number % 3 == 0 && has3Num(number)) {\n            return 'dumb';\n        }\n        if (number % 3 == 0) {\n            return 'idiot';\n        }\n        if (has3Num(number)) {\n            return 'stupid'\n        }\n        return 'smart';\n    }\n    return 'invalid';\n}\n\n\nmain(process.argv.slice(2));\n\n"}
{"id": 514, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\nimport re\n\n\ndef main(argv):\n    if argv[0] == 'count':\n        count(argv)\n    elif argv[0] == 'space':\n        space(argv)\n    elif argv[0] == 'decrypt':\n        decrypt(argv)\n\n\ndef space(argv):\n    input_file = argv[1]\n\n    count_space = defaultdict(int)\n\n    for line in open(input_file, 'r'):\n        split_element = re.split('[^a-zA-Z]', line)\n        for element in split_element[1:]:\n            if element:\n                count_space[element[0]] += 1\n\n    space_dict = {'char': max(count_space, key=count_space.get)}\n\n    with open(argv[2], 'w') as out_file:\n        json.dump(space_dict, out_file)\n\n    return space_dict\n\n\ndef count(argv):\n    input_file = argv[1]\n\n    char_count = dict()\n\n    alphabet_list = [chr(i) for i in range(97, 97 + 26)]\n    alphabet_list.extend([chr(i) for i in range(65, 65 + 26)])\n    alphabet_list.append(' ')\n\n    for c in alphabet_list:\n        char_count[c] = 0\n\n    for line in open(input_file, 'r'):\n        for char in line:\n            if 'A' <= char <= 'Z' or 'a' <= char <= 'z' or char == ' ':\n                char_count[char] += 1\n\n    with open(argv[2], 'w') as out_file:\n        json.dump(char_count, out_file)\n\n    return char_count\n\n\ndef isalpha(s):\n    alphaReg = re.compile(r'[a-zA-Z]')\n    return alphaReg.match(s) is not None\n\n\ndef decrypt(argv):\n    input_file = argv[1]\n    output_file = argv[2]\n\n    char_count = count(argv)\n    space_dict = space(argv)\n\n    space_value = space_dict['char']\n    equal_to_e = max(char_count, key=char_count.get)\n\n    shift = ord(equal_to_e) - ord('e')\n\n    with open(output_file, 'w') as out_file:\n        for line in open(input_file, 'r'):\n            line = line.replace(space_value, ' ')\n            line = line.replace(' ', space_value)\n            for char in line:\n                if isalpha(char):\n                    lower_flag = False\n                    if char.isupper():\n                        lower_flag = True\n                        char = char.lower()\n                    change_char = (ord(char) + shift + 26) % 26\n                    change_char = chr(change_char + ord('a'))\n\n                    if lower_flag:\n                        change_char = change_char.upper()\n                    out_file.write(change_char)\n                else:\n                    out_file.write(char)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 515, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n\n// Simple check for digit 3\nint check_for_digit_3(int num_val) {\n    if (num_val == 0) return 0; // 0 does not contain '3'\n    while (num_val > 0) {\n        if (num_val % 10 == 3) return 1;\n        num_val /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int k = 1; k < argc; k++) {\n    char *parse_end;\n    long num_long = strtol(argv[k], &parse_end, 10);\n    int num_int; // Integer representation\n\n    // Check for non-numeric input or empty string. Use goto for simple error flow.\n    if (*parse_end != '\\0' || parse_end == argv[k]) {\n        goto print_invalid;\n    }\n\n    // Cast to int and check range\n    num_int = (int)num_long;\n    if (num_int < 0 || num_int > 1000) {\n        goto print_invalid;\n    }\n\n    // Apply the 3 Idiots Algorithm logic\n    int is_div_by_3 = (num_int % 3 == 0);\n    int has_3 = check_for_digit_3(num_int);\n\n    if (is_div_by_3 && has_3) {\n        printf(\"dumb\\n\");\n    } else if (is_div_by_3) {\n        printf(\"idiot\\n\");\n    } else if (has_3) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n    continue; // Continue to next argument, skipping the invalid label\n\nprint_invalid: // Label for invalid output\n    printf(\"invalid\\n\");\n  }\n  return 0;\n}"}
{"id": 516, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        int loop = int.Parse(args[0]);\n        Random r = new Random();\n        List<int> dondon = new List<int>()\n        {\n          1,0,1,1,0,1,0\n        };\n        bool fDonDon = false;\n        List<int> rythm = new List<int>();\n        for(int i = 0; i < loop; ++i)\n        {\n            int num = r.Next(1, 3);\n            if(num==1)\n            {\n              // \u30c9\n              rythm.Add(1);\n              Console.WriteLine(\"\u30c9\");\n\n            }\n            else\n            {\n              // \u30ab\n              rythm.Add(0);\n              Console.WriteLine(\"\u30ab\");\n            }\n\n            if(rythm.Count == dondon.Count)\n            {\n              // \u30ea\u30ba\u30e0\u3092\u3092\u78ba\u8a8d\n              for(int j = 0; j < rythm.Count; j++)\n              {\n                if(rythm[j] != dondon[j])\n                {\n                  fDonDon = false;\n                  break;\n                }\n                fDonDon = true;\n              }\n              if(fDonDon)\n              {\n                break;\n              }\n\n              //\u5148\u982d\u3092\u524a\u9664\n              rythm.RemoveAt(0);\n            }\n        }\n        if(fDonDon==true)\n        {\n          Console.WriteLine(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        }\n        else\n        {\n          Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        }\n    }\n}\n"}
{"id": 517, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n\n  ind=eval(open(argv[0]).read())\n  dts={}\n  for k,i in enumerate(ind+[{}]):\n\n    if k<3:continue\n\n    che=(ind[k-3]['robot'],ind[k-2]['robot'],ind[k-1]['robot'],ind[k-1]['you'])  \n    enu=i.get('robot',-1)\n    if enu==-1:break\n\n    if che in dts:\n\n      if dts[che]!=(enu-1)%3:\n        print(k,che,enu,dts[che])\n    dts[che]=enu\n  print((dts[che])%3)\n  \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 518, "language": "C++", "code": "#include <iostream>\n#include <string.h>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  // for (int i = 1; i < argc; i++) {\n  //   cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  // }\n  for(int i=1;i<argc;i++){\n      int l=strlen(argv[i]);\n      int sum=0;\n      int found=0;\n\t  int is_num=1;\n      for(int j=0;j<l;j++){\n          sum+=argv[i][j]-'0';\n          if(argv[i][j]=='3') found=1;\n\t\t  if(!(argv[i][j]>='0' && argv[i][j]<='9')) is_num=0;\n      }\n\t  //cout<<\"\\n\";\n\t  //cout<<sum<<\" \"<<found<<endl;\n\t  if(is_num==0) cout<<\"invalid\"<<endl;\n      else if(sum%3==0 && found==1){\n          cout<<\"dumb\"<<endl;\n      }\n      else if(sum%3==0){\n          cout<<\"idiot\"<<endl;\n      }\n      else if(found==1){\n          cout<<\"stupid\"<<endl;\n      }\n      else{\n          cout<<\"smart\"<<endl;\n      }\n  }\n  return 0;\n}\n"}
{"id": 519, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint contain3(int n)\n{\n    for(int i = n; i > 0; i = i/10)\n    {\n        if(i % 10 == 3)\n        {\n            return 1;\n        }\n    }\n    return 0;\n}\nint main(int argc, char *argv[])\n{\n    int num, val;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    num = atoi(argv[i]);\n    if(num < 0 || num > 1000)\n    {\n        printf(\"invalid\");\n    }\n    else\n    {\n        if(num%3 == 0 && contain3(num) == 1)\n        {\n            printf(\"dumb\");\n        }\n        else if(num % 3 == 0)\n        {\n            printf(\"idiot\");\n        }\n        else if(contain3(num))\n        {\n            printf(\"stupid\");\n        }\n        else\n        {\n            printf(\"smart\");\n        }\n        \n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"}
{"id": 520, "language": "Python", "code": "import sys\n\ndef main(argv):\n  for i, v in enumerate(argv):\n    #print v,\n    if(not v.isdigit()):\n      print \"invalid\"\n    else:\n      v = int(v)\n      if(0 <= v <= 1000):\n        if('3' in str(v)):\n          if(v % 3 == 0):\n            print \"dumb\"\n          else:\n            print \"stupid\"\n        else:\n          if(v % 3 == 0):\n            print \"idiot\"\n          else:\n            print \"smart\"\n      else:\n        print 'invalid'\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 521, "language": "Python3", "code": "import sys\nimport random\n\ndef main(args):\n    # \u5165\u529b\u30c1\u30a7\u30c3\u30af\n    if not args or not args[0].isdigit():\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    tries = int(args[0])\n    if tries < 1 or tries > 10000:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    sequence = \"\"\n    target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    for _ in range(tries):\n        b = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(b)\n        sequence += b\n        if sequence.endswith(target):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 522, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n       int num = Integer.parseInt(args[i]);\n        if(num%3==0 && args[i].contains(\"3\"))\n        {\n             System.out.println(\"dumb\");\n        }\n        else if(args[i].contains(\"3\")) {\n            System.out.println(\"stupid\");\n        }\n        else if(num%3==0) {\n            System.out.println(\"idiot\");\n        }\n        else if(args[i].matches(\"[\\\\uff01-\\\\uff5E._]*\")) {\n          System.out.println(\"invalid\");\n        }\n        else {\n          System.out.println(\"smart\");\n        }\n\n      }\n      catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n      \n    }\n  }\n}\n"}
{"id": 523, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.lang.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\ttry{\n      for (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n     // \n     char[] ch = output.toCharArray();\n     int h = (int)ch[0];\n                if(h>256)\n                    System.out.println(\"invalid\");\n\t\t\tint num = Integer.parseInt(args[i]);\n      boolean a ,b;\n      a=stupid(args[i]);\n      b=idiot(num);\n      if((a&b)== true){\n        System.out.println(\"dumb\");\n      }else if(a== true){\n        System.out.println(\"stupid\");\n      } else if (b== true){\n        System.out.println(\"idiot\");\n      }else if (a|b == false){\n        System.out.println(\"smart\");\n      }\n\t\t}\n\t} catch (Exception nfe){\n    System.out.println(\"invalid\");\n  }\n}\n// contain value \npublic static boolean stupid (String stt) {\nboolean con = String.valueOf(stt).contains(\"3\");\n  return con;\n }\n // div by 3 \n public static boolean idiot (int b){\n   boolean bool;\n   if(b%3==0){\n     bool = true;\n   }else{\n     bool = false;\n   }\n   return bool;\n }\n}\n"}
{"id": 524, "language": "Python", "code": "import sys\nimport os\n#for os dependent functionality\n\ndef main(argv):        \n    #creating array\n    inputArray = []\n\n\n    for val in argv:\n      # if multiple arguments are passed, push item in the array\n        inputArray.append(val)\n\n    # for eacch item in array inputArray[] \n    for val in inputArray:\n        try:\n            val = int(val)\n            chk_str = str(val)\n\n            # check if the value is within range of 0 to 1000 and if true execute within the intendation\n            if 0 <= val <= 1000:\n                if val % 3 == 0 and '3' in chk_str:\n                    print('dumb')\n                elif val % 3 == 0:\n                    print('idiot')\n                elif '3' in chk_str:\n                    print('stupid')\n                else:\n                    print('smart')\n            else:\n                print('invalid')\n        except:\n            print('invalid')\n\n\nif __name__ == '__main__':\n   main(sys.argv[1:])"}
{"id": 525, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           //string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n           //Console.WriteLine(output);\n           double number;\n          bool num = double.TryParse(args[i], out number);\n          \n          if(0<=number && number<=1000  && num )\n          {\n            if(number%3==0 &&args[i].Contains(\"3\"))\n            {\n              Console.WriteLine(\"dumb\");\n            }\n            else if(args[i].Contains(\"3\"))\n            {\n              Console.WriteLine(\"stupid\");\n            }\n            else if(number%3==0)\n            {\n              Console.WriteLine(\"idiot\");\n            }\n            else\n            {\n              Console.WriteLine(\"smart\");\n            }\n          }\n          else\n          {\n            Console.WriteLine(\"invalid\");\n          }\n        }\n    }\n}\n"}
{"id": 526, "language": "Python3", "code": "import sys\n\ndef idiot_game(s):\n    if not s.isdecimal():\n        return \"invalid\"\n    n = int(s)\n    if n < 0 or n > 1000:\n        return \"invalid\"\n    mult = n % 3 == 0\n    find3 = \"3\" in s\n    if mult and find3:\n        return \"dumb\"\n    elif mult:\n        return \"idiot\"\n    elif find3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    for arg in args:\n        print(idiot_game(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 527, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For atoi\n#include <string.h> // For strcat\n\nint main(int argc, char *argv[]) {\n  // Get the number from the command line argument.\n  int inputNumber = atoi(argv[1]);\n\n  // Define the Roman numeral values and their corresponding symbols.\n  const int values[] = {\n      1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n  };\n  const char* symbols[] = {\n      \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n  };\n  // Calculate the number of mapping entries.\n  const int numMappings = sizeof(values) / sizeof(values[0]);\n\n  // A buffer to store the resulting Roman numeral string.\n  // Max for 3999 is MMMCMXCIX (13 chars), so 32 is plenty.\n  char romanString[32] = \"\"; \n\n  // Loop through the values from largest to smallest.\n  for (int i = 0; i < numMappings; i++) {\n    // While the current number is greater than or equal to the current value,\n    // append the symbol and subtract the value.\n    while (inputNumber >= values[i]) {\n      strcat(romanString, symbols[i]); // Append the symbol to the result.\n      inputNumber -= values[i];        // Subtract the value from the number.\n    }\n  }\n\n  // Print the final Roman numeral string.\n  printf(\"%s\\n\", romanString);\n\n  return 0;\n}"}
{"id": 528, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    App app = new App();\n    for (int i = 0, l = args.length; i < l; i++) {\n\n      int number = Integer.parseInt(args[i]);\n\n      String output = \"invalid\";\n        if (0 <= number && number<= 1000) {\n            if (number != 0 && number % 3 == 0 && String.valueOf(number).contains(\"3\")) {\n                output = \"dumb\";\n            } else if (number != 0 && number % 3 == 0) {\n                output = \"idiot\";\n            } else if (String.valueOf(number).contains(\"3\")) {\n                output = \"stupid\";\n            } else {\n                output = \"smart\";\n            }\n      }\n      \n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 529, "language": "Java", "code": "package rot13;\n\npublic class Rot13App {\n    public static void main(String[] args) {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306fROT13\u3092\u9069\u7528\u3059\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n        // \u5404\u5f15\u6570\u306b\u5bfe\u3057\u3066ROT13\u51e6\u7406\u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n        for (String input : args) {\n            System.out.println(applyRot13(input));\n        }\n    }\n\n    private static String applyRot13(String input) {\n        StringBuilder result = new StringBuilder();\n        for (char c : input.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                result.append((char) ((c - 'a' + 13) % 26 + 'a'));\n            } else if (c >= 'A' && c <= 'Z') {\n                result.append((char) ((c - 'A' + 13) % 26 + 'A'));\n            } else {\n                result.append(c); // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4ee5\u5916\u306f\u305d\u306e\u307e\u307e\n            }\n        }\n        return result.toString();\n    }\n}"}
{"id": 530, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isValidNumber(const string& str) {\n    for (char c : str) {\n        if (!isdigit(c)) return false; // Check if it's a number\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    // 3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3044\u308d\u3044\u308d\u306a\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u8a55\u4fa1\u3057\u307e\u3059\u3002\n\n    for (int i = 1; i < argc; ++i) {\n        string num_str = argv[i];\n        if (!isValidNumber(num_str)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n\n        int num = stoi(num_str);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n\n        bool div_by_3 = num % 3 == 0;\n        bool has_3 = num_str.find('3') != string::npos;\n\n        if (div_by_3 && has_3) {\n            cout << \"dumb\" << endl;\n        } else if (div_by_3) {\n            cout << \"idiot\" << endl;\n        } else if (has_3) {\n            cout << \"stupid\" << endl;\n        } else {\n            cout << \"smart\" << endl;\n        }\n    }\n    return 0;\n}"}
{"id": 531, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # Load input JSON file from argv\n    filepath = argv[0]\n    with open(filepath, \"r\") as f:\n        records = json.load(f)\n\n    # Initial 3 robot hands\n    robot_hands = [0, 1, 2] \n    # For matches where no previous hands, this is base.\n\n    # Build full list of robot hands from records if any\n    for rec in records:\n        robot_hands.append(rec[\"robot\"])\n\n    # Build full list of opponent hands\n    opponent_hands = [None]*3  # dummy for initial 3 positions: no opponent hands before first 3\n    for rec in records:\n        opponent_hands.append(rec[\"you\"])\n\n    # We want to predict next robot hand using the last 3 robot hands and last opponent hand\n    # Index of next match = len(records)\n    idx = len(records)\n\n    # The parameter key is tuple of last 3 robot hands before that play, and last opponent hand\n    # So the key is robot_hands[idx-3:idx], opponent_hands[idx-1]\n    param_history = {}\n    # Go through all previous moves from i=3 to idx-1 to build param_history for cycling\n    # Because first 3 robot hands are fixed, starting from i=3 makes sense\n\n    for i in range(3, idx):\n        key = (robot_hands[i-3], robot_hands[i-2], robot_hands[i-1], opponent_hands[i-1])\n        value = robot_hands[i]\n        if key not in param_history:\n            param_history[key] = []\n        param_history[key].append(value)\n\n    # Now determine key for the next move\n    current_key = (robot_hands[idx-3], robot_hands[idx-2], robot_hands[idx-1], opponent_hands[idx-1])\n\n    # Find next move in cycle (0->1->2->0->...)\n    if current_key in param_history:\n        past_plays = param_history[current_key]\n        last_play = past_plays[-1]\n        next_play = (last_play + 1) % 3\n    else:\n        # No history: robot chooses rock (0) first in cycle\n        next_play = 0\n\n    print(next_play)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 532, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        foreach (string value in args)\n        {\n            String ans = null;\n\t\tint n = 0;\n\tforeach (string sn in value.Split(' ')) {\n\t\tint i = 0;     \n\t\tbool result = int.TryParse(sn, out i);\n\t\tif(result){\n\t\t\tif(sn.Contains(\"3\")){\n\t\t\tn = Convert.ToInt32(sn);\n\t\t\t\tif(n%3==0){\n\t\t\t\t\tans = \"dumb\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tans = \"stupid\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\tn = Convert.ToInt32(sn);\n\t\t\t\tif(n%3==0){\n\t\t\t\t\tans = \"idiot\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tans = \"smart\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tans = \"invalid\";\n\t\t}\n\t\t\n\t\tConsole.WriteLine(\"{0}\",ans);\n}\n        }\n    }\n}\n"}
{"id": 533, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\n# This solution uses a heuristic: assume the most frequent character in\n# the ciphertext corresponds to the original space.\ndef find_key_by_freq(text):\n    letter_counts = Counter(c.lower() for c in text if 'a' <= c.lower() <= 'z')\n    if not letter_counts:\n        return 0, 'a' # Should not happen with given constraints\n    \n    # Heuristic: the most frequent letter in cipher is the one swapped with space\n    swapped_char_after_shift = letter_counts.most_common(1)[0][0]\n\n    best_shift = -1\n    min_diff = float('inf')\n\n    for shift in range(26):\n        # Reconstruct text\n        temp_text = []\n        for char in text:\n            if char == ' ':\n                temp_text.append(swapped_char_after_shift)\n            elif char.lower() == swapped_char_after_shift:\n                temp_text.append(' ')\n            else:\n                temp_text.append(char)\n        \n        # Unshift\n        decrypted_list = []\n        for char in \"\".join(temp_text):\n            if 'a' <= char <= 'z':\n                decrypted_list.append(chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a')))\n            elif 'A' <= char <= 'Z':\n                decrypted_list.append(chr((ord(char) - ord('A') - shift + 26) % 26 + ord('A')))\n            else:\n                decrypted_list.append(char)\n        decrypted_text = \"\".join(decrypted_list)\n\n        words = [w for w in decrypted_text.split() if w]\n        if not words: continue\n\n        avg_len = sum(len(w) for w in words) / len(words)\n        diff = abs(avg_len - 4.5)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_shift = shift\n    \n    # Calculate original char\n    original_char = chr((ord(swapped_char_after_shift) - ord('a') - best_shift + 26) % 26 + ord('a'))\n\n    return best_shift, original_char\n\ndef main(argv):\n    command, infile, outfile = argv\n    \n    if command == \"count\":\n        with open(infile, 'r') as f:\n            text = f.read()\n        counts = Counter(c for c in text if c.isalpha() or c == ' ')\n        with open(outfile, 'w') as f:\n            json.dump(counts, f, indent=2)\n    elif command == \"space\":\n        with open(infile, 'r') as f:\n            text = f.read()\n        _, original_char = find_key_by_freq(text)\n        with open(outfile, 'w') as f:\n            json.dump({'char': original_char}, f, indent=2)\n    elif command == \"decrypt\":\n        with open(infile, 'r') as f:\n            text = f.read()\n        shift, original_char = find_key_by_freq(text)\n        \n        swapped_char_after_shift = chr((ord(original_char) - ord('a') + shift) % 26 + ord('a'))\n\n        temp_text = []\n        for char in text:\n            if char == ' ': temp_text.append(swapped_char_after_shift)\n            elif char.lower() == swapped_char_after_shift: temp_text.append(' ')\n            else: temp_text.append(char)\n\n        decrypted_list = []\n        for char in \"\".join(temp_text):\n            if 'a' <= char <= 'z':\n                decrypted_list.append(chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a')))\n            elif 'A' <= char <= 'Z':\n                decrypted_list.append(chr((ord(char) - ord('A') - shift + 26) % 26 + ord('A')))\n            else:\n                decrypted_list.append(char)\n        \n        with open(outfile, 'w') as f:\n            f.write(\"\".join(decrypted_list))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 534, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  //iterating through multiple inputs\n  argv.forEach((v, i) => \n  {\n    var value = argv[i];\n\n    if(value>=0 && value <=1000){\n\n      //divisible by 3 flag \n      var div = false;\n      //includes a number 3 flag\n      var inc = false;\n\n      // checking divisible by 3\n      if(value%3==0){\n        div = true;\n      }\n\n      // checking includes 3 \n      var arr = value.toString().split('');\n      arr.forEach(num=>{\n        if(num == '3'){\n          inc = true;\n        }\n      });\n\n      //output results based on conditions\n      if (div && inc) {\n        console.log('dumb');\n      } else if (div) {\n        console.log('idiot');\n      } else if (inc) {\n        console.log('stupid');\n      } else {\n        console.log('smart');\n      }\n\n    } else {\n      console.log('invalid');\n    }\n  }\n  \n  );\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 535, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.StringJoiner;\n\nenum Hand {\n    ROCK(0), SCISSORS(1), PAPER(2);\n\n    private final int value;\n\n    Hand(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public static Hand fromValue(int val) {\n        for (Hand h : Hand.values()) {\n            if (h.value == val) {\n                return h;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid hand value: \" + val);\n    }\n}\n\nclass GameTurn {\n    Hand robotHand;\n    Hand yourHand;\n\n    GameTurn(int robot, int you) {\n        this.robotHand = Hand.fromValue(robot);\n        this.yourHand = Hand.fromValue(you);\n    }\n}\n\npublic class GameStrategist {\n\n    public static void main(String[] args) {\n        String inputFile = args[0];\n        List<GameTurn> gameTurns = new ArrayList<>();\n\n        try {\n            String fileText = FileReaderUtility.readAll(inputFile);\n            gameTurns = JsonDataParser.parseTurns(fileText);\n        } catch (IOException e) {\n            System.err.println(\"File IO error: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Hand> robotPatternRegistry = new HashMap<>(); // Key: state, Value: next hand for that state\n        List<Hand> robotPlaysHistory = new ArrayList<>();\n        List<Hand> opponentPlaysHistory = new ArrayList<>();\n\n        // Initialize robot's first 3 moves\n        robotPlaysHistory.add(Hand.ROCK);\n        robotPlaysHistory.add(Hand.SCISSORS);\n        robotPlaysHistory.add(Hand.PAPER);\n\n        for (int i = 0; i < gameTurns.size(); i++) {\n            GameTurn currentTurn = gameTurns.get(i);\n            Hand actualRobotHand = currentTurn.robotHand;\n            Hand actualOpponentHand = currentTurn.yourHand;\n\n            if (i >= 3) {\n                // Form the state key using previous hands\n                StringJoiner sj = new StringJoiner(\"_\");\n                sj.add(String.valueOf(robotPlaysHistory.get(i - 3).getValue()));\n                sj.add(String.valueOf(robotPlaysHistory.get(i - 2).getValue()));\n                sj.add(String.valueOf(robotPlaysHistory.get(i - 1).getValue()));\n                sj.add(String.valueOf(opponentPlaysHistory.get(i - 1).getValue()));\n                String stateKey = sj.toString();\n                \n                // Register robot's next move for this specific state\n                robotPatternRegistry.put(stateKey, Hand.fromValue((actualRobotHand.getValue() + 1) % 3));\n            }\n            \n            robotPlaysHistory.add(actualRobotHand);\n            opponentPlaysHistory.add(actualOpponentHand);\n        }\n\n        // Predict the robot's next move for the upcoming game\n        int historyLength = gameTurns.size();\n        StringJoiner finalStateJoiner = new StringJoiner(\"_\");\n        finalStateJoiner.add(String.valueOf(robotPlaysHistory.get(historyLength - 3).getValue()));\n        finalStateJoiner.add(String.valueOf(robotPlaysHistory.get(historyLength - 2).getValue()));\n        finalStateJoiner.add(String.valueOf(robotPlaysHistory.get(historyLength - 1).getValue()));\n        finalStateJoiner.add(String.valueOf(opponentPlaysHistory.get(historyLength - 1).getValue()));\n        String finalStateKey = finalStateJoiner.toString();\n        \n        Hand predictedRobotNextHand = robotPatternRegistry.getOrDefault(finalStateKey, Hand.ROCK);\n\n        System.out.println(getWinningHandAgainst(predictedRobotNextHand).getValue());\n    }\n\n    private static Hand getWinningHandAgainst(Hand opponentHand) {\n        return Hand.fromValue((opponentHand.getValue() + 2) % 3);\n    }\n}\n\nclass FileReaderUtility {\n    public static String readAll(String path) throws IOException {\n        StringBuilder fileData = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                fileData.append(line.trim());\n            }\n        }\n        return fileData.toString();\n    }\n}\n\nclass JsonDataParser {\n    public static List<GameTurn> parseTurns(String jsonText) {\n        List<GameTurn> parsedTurns = new ArrayList<>();\n        String recordsContent = jsonText.substring(1, jsonText.length() - 1); // Remove outer []\n        String[] recordStrings = recordsContent.split(\"\\\\},\\\\{\"); // Split records\n\n        for (String recordStr : recordStrings) {\n            String cleaned = recordStr.replaceAll(\"[{}\\\" ]\", \"\");\n            String[] parts = cleaned.split(\",\");\n            int rValue = Integer.parseInt(parts[0].split(\":\")[1]);\n            int yValue = Integer.parseInt(parts[1].split(\":\")[1]);\n            parsedTurns.add(new GameTurn(rValue, yValue));\n        }\n        return parsedTurns;\n    }\n}"}
{"id": 536, "language": "Java", "code": "package track;\nimport java.util.Random;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t// \u6700\u521d\u306e\u5f15\u6570\u304b\u3089\u30eb\u30fc\u30d7\u306e\u6700\u5927\u5024\u3092\u53d6\u5f97\n\t\tint iMaxCnt = 0;\n\t\ttry {\n\t\t\tiMaxCnt = Integer.parseInt(args[0]);\n\t\t} catch (Exception e) {\n\t\t\tiMaxCnt = 0;\n\t\t}\n\n\t\t// \u4e71\u6570\u767a\u751f\n\t\tRandom rand = new Random();\n\t\tint randomNumber = 0;\n\n\t\t// \u5f15\u6570\u5206\u30eb\u30fc\u30d7\n\t\tString rndOto = \"\";\n\t\tString rndOtoPtn = \"\";\n\t\tfor (int iCnt = 0; iCnt < iMaxCnt; iCnt++) {\n\t\t  // \u4e71\u6570\u53d6\u5f97\n\t\t\trandomNumber = rand.nextInt(2);\n\t\t\tif (randomNumber == 0) {\n\t\t\t\trndOto = \"\u30c9\";\n\t\t\t} else {\n\t\t\t\trndOto = \"\u30ab\";\n\t\t\t}\n\t\t\t// \"\u30c9\"or\"\u30ab\"\u51fa\u529b\n\t\t\tSystem.out.println(rndOto);\n\n\t\t\t// \"\u30c9\u30f3\u30c9\u30f3\"\u51fa\u529b\n\t\t\trndOtoPtn = rndOtoPtn + rndOto;\n\t\t\tif (rndOtoPtn.indexOf(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") > 0) {\n\t\t\t\tSystem.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n\t}\n}\n"}
{"id": 537, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport json\nimport string\n\n\nclass Decrypter:\n  def __init__(self, text):\n    self.__text = text\n    self.__total_chars = None\n\n  def count(self):\n    \"\"\"\n    \u82f1\u5b57\u30fb\u7a7a\u767d\u306e\u6587\u5b57\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    if self.__total_chars is not None:\n      # \u65e2\u306b\u8a08\u7b97\u6e08\u307f\n      return self.__total_chars\n\n    # \u9023\u60f3\u914d\u5217\u3092\u521d\u671f\u5316\u3059\u308b\n    # key: \u6587\u5b57, value: \u5ea6\u6570\n    self.__total_chars = {c: 0 for c in Decrypter.get_target_character_list()}\n\n    # \u6570\u3048\u4e0a\u3052\u308b\n    for c in self.__text:\n      if c not in self.__total_chars:\n        # c\u306f\u30ab\u30a6\u30f3\u30c8\u5bfe\u8c61\u6587\u5b57\u3067\u306f\u306a\u3044\n        continue\n\n      self.__total_chars[c] += 1\n\n    return self.__total_chars\n\n  @staticmethod\n  def get_target_character_list():\n    \"\"\"\n    \u6697\u53f7\u5316\u5bfe\u8c61\u306e\u6587\u5b57\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    target_character_list = []\n    target_character_list.append(\" \")\n\n    for i in range(ord('a'), ord('z') + 1):\n      target_character_list.append(chr(i))\n\n    for i in range(ord('A'), ord('Z') + 1):\n      target_character_list.append(chr(i))\n\n    return target_character_list\n\n  def find_encrypted_space(self):\n    \"\"\"\n    \u7a7a\u767d\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\u3092\u7b97\u51fa\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    total_chars = self.count()\n\n    # \u6700\u3082\u983b\u5ea6\u304c\u591a\u3044\u5c0f\u6587\u5b57\u3092space\u3068\u3059\u308b\n    max_count = 0\n    space_char = None\n\n    for c, total in total_chars.items():\n      if total < max_count or is_small_letter(c) == False:\n        # \u5927\u6587\u5b57\u306f\u5bfe\u8c61\u5916\n        continue\n\n      max_count = total\n      space_char = c\n\n    return space_char\n\n  def find_encrypted_a(self, encrypted_space):\n    \"\"\"\n    \u5c0f\u6587\u5b57a\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    # \u30ab\u30a6\u30f3\u30c8\u7528\u9023\u60f3\u914d\u5217\n    count_table = {chr(c): 0 for c in range(ord('a'), ord('z')+1)}\n    count_table[\" \"] = 0\n\n    # \u30b9\u30da\u30fc\u30b9,\u5c0f\u6587\u5b57,\u30b9\u30da\u30fc\u30b9 \u3068\u4e26\u3093\u3067\u3044\u308b\u5c0f\u6587\u5b57\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n    for i in range(len(self.__text)-2):\n      c1, c2, c3 = self.__text[i:i+3]\n\n      if c1 == encrypted_space and c3 == encrypted_space and is_encrypted_small_letter(c2):\n        count_table[c2] += 1\n\n    # \u6700\u3082\u983b\u5ea6\u304c\u591a\u3044\u306e\u304ca\u306e\u5909\u63db\u5f8c\u306e\u6587\u5b57\n    max_char = max(count_table.items(), key=lambda x: x[1])\n\n    if max_char[1] > 0:\n      encrypted_a = max_char[0]\n    else:\n      # \u51a0\u8a5e\u306ea\u304c1\u5ea6\u3082\u51fa\u73fe\u3057\u3066\u3044\u306a\u3044\n      # TODO: \u51a0\u8a5ea\u304c1\u5ea6\u3082\u51fa\u73fe\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\n      encrypted_a = self.__two_words()\n\n    return encrypted_a\n\n  def __two_words(self):\n    # \u30ab\u30a6\u30f3\u30c8\u7528\u9023\u60f3\u914d\u5217\n    count_table = {}\n\n    # \u30b9\u30da\u30fc\u30b9,\u5c0f\u6587\u5b57,\u30b9\u30da\u30fc\u30b9 \u3068\u4e26\u3093\u3067\u3044\u308b\u5c0f\u6587\u5b57\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n    for i in range(len(self.__text)-1):\n      word = self.__text[i:i+2]\n\n      if is_encrypted_small_letter(word[0]) == False or is_encrypted_small_letter(word[1]) == False:\n        continue\n\n      if word not in count_table:\n        count_table[word] = 0\n\n      count_table[word] += 1\n\n    # TODO: count_table\u306e\u30ad\u30fc\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u91cf\u30920~25\u307e\u3067\u8671\u6f70\u3057\u306b\u5909\u63db\u3057\uff0c\n    # TODO: to, be, is, as\u306a\u3069\u306e\u3088\u304f\u4f7f\u308f\u308c\u308b2\u6587\u5b57\u306e\u5358\u8a9e\u306e\u983b\u5ea6\u304c\u6700\u3082\u9ad8\u304f\u306a\u308b\u30aa\u30d5\u30bb\u30c3\u30c8\u91cf\u3092\u63a1\u7528\u3057\u305f\u3044\n    for offset in range(26):\n      pass\n\n    return 'l'\n\n  def decrypt(self):\n    \"\"\"\n    text\u3092\u5fa9\u53f7\u5316\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    # \u7a7a\u767d\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\u3092\u7b97\u51fa\n    encrypted_space = self.find_encrypted_space()\n\n    # \u7a7a\u767d\u306e\u60c5\u5831\u3092\u57fa\u306b\u5fa9\u53f7\u5316\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b\n    decrypt_table = self.create_decrypt_table(encrypted_space)\n\n    # \u5fa9\u53f7\u5316\u30c6\u30fc\u30d6\u30eb\u306b\u57fa\u3065\u3044\u3066\u7f6e\u304d\u63db\u3048\u308b\n    src = \"\".join(decrypt_table.keys())\n    dst = \"\".join(decrypt_table.values())\n    decrypted_text = self.__text.translate(string.maketrans(src, dst))\n\n    return decrypted_text\n\n  def create_decrypt_table(self, encrypted_space):\n    \"\"\"\n    \u5fa9\u53f7\u5316\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    # \u5c0f\u6587\u5b57a\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\u3092\u7b97\u51fa\u3059\u308b\n    encrypted_a = self.find_encrypted_a(encrypted_space)\n\n    # \u5fa9\u53f7\u5316\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b\n    decrypt_table = self.__create_decrypt_table('a', encrypted_a, encrypted_space)\n\n    return decrypt_table\n\n  @staticmethod\n  def __create_decrypt_table(original_char, encrypted_char, encrypted_space):\n    \"\"\"\n    1\u3064\u306e\u5c0f\u6587\u5b57\u306e\u5fa9\u53f7\u5316\u30da\u30a2\u3068\u7a7a\u767d\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\u60c5\u5831\u3092\u57fa\u306b\u5fa9\u53f7\u5316\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n\n    :param original_char: encrypted_char\u306e\u5fa9\u53f7\u5316\u5f8c\u306e\u6587\u5b57\n    :param encrypted_char: original_char\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\n    :param encrypted_space: \u7a7a\u767d\u306e\u6697\u53f7\u5316\u5f8c\u306e\u6587\u5b57\n    \"\"\"\n\n    if encrypted_char == \" \":\n      # a\u306e\u5909\u63db\u5148\u304c\u7a7a\u767d\u3060\u3063\u305f\u3089\uff0ca\u306e\u672c\u6765(\u7a7a\u767d\u3068\u5165\u308c\u66ff\u3048\u308b\u524d)\u306e\u5909\u63db\u5148\u306fencrypted_space\u306b\u306a\u3063\u3066\u3044\u308b\n      encrypted_char = encrypted_space\n\n    # \u30b7\u30d5\u30c8\u91cf\u3092\u7b97\u51fa\u3059\u308b\n    offset = (ord(encrypted_char) - ord(original_char) + 26) % 26\n\n    # \u5909\u63db\u8868\u3092\u4f5c\u6210\u3059\u308b\n    decrypt_table = {}\n\n    # \u6697\u53f7\u5316\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n    target_character_list = Decrypter.get_target_character_list()\n    for encrypted_char in target_character_list:\n      # \u7b97\u51fa\u3057\u305f\u30b7\u30d5\u30c8\u91cf\u3092\u57fa\u306b\u5fa9\u53f7\u5316\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b\n      original_char = Decrypter.decrypt_char(encrypted_char, offset)\n      decrypt_table[encrypted_char] = original_char\n\n    # \u30b9\u30da\u30fc\u30b9\u3068\u30b9\u30da\u30fc\u30b9\u306e\u6697\u53f7\u5316\u5148\u3092\u5165\u308c\u66ff\u3048\u308b\n    decrypt_table[\" \"] = Decrypter.decrypt_char(encrypted_space, offset)\n    decrypt_table[encrypted_space] = \" \"\n\n    return decrypt_table\n\n  @staticmethod\n  def decrypt_char(c, offset):\n    \"\"\"\n    \u30b7\u30d5\u30c8\u91cf(offset)\u306b\u57fa\u3065\u3044\u305f\u5fa9\u53f7\u5316\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    return Decrypter.encrypt_char(c, 26-offset)\n\n  @staticmethod\n  def encrypt_char(c, offset):\n    \"\"\"\n    \u30b7\u30d5\u30c8\u91cf(offset)\u306b\u57fa\u3065\u3044\u305f\u6697\u53f7\u5316\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\n    \"\"\"\n\n    if is_small_letter(c):\n      return chr((ord(c) + offset - ord('a')) % 26 + ord('a'))\n\n    if is_capital_letter(c):\n      return chr((ord(c) + offset - ord('A')) % 26 + ord('A'))\n\n    return c\n\n## \u6c4e\u7528\u30e1\u30bd\u30c3\u30c9\ndef is_small_letter(c):\n  \"\"\"\n  \u6587\u5b57c\u304c\u5c0f\u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  \"\"\"\n\n  return 'a' <= c <= 'z'\n\n\ndef is_capital_letter(c):\n  \"\"\"\n  \u6587\u5b57c\u304c\u5927\u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  \"\"\"\n\n  return 'A' <= c <= 'Z'\n\n\ndef is_encrypted_small_letter(c):\n  \"\"\"\n  \u6587\u5b57c\u304c\u5c0f\u6587\u5b57\u306e\u5909\u63db\u5148\u306e\u6587\u5b57\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  \"\"\"\n\n  return c == \" \" or is_small_letter(c)\n\n\n## \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u7528\u30e1\u30bd\u30c3\u30c9\ndef count(text, ofs):\n  # \u5404\u6587\u5b57\u306e\u5ea6\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n  decrypter = Decrypter(text)\n  total_chars = decrypter.count()\n\n  # \u7d50\u679c\u3092json\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\n  json.dump(total_chars, ofs)\n\n\ndef space(text, ofs):\n  # \u30b9\u30da\u30fc\u30b9\u306e\u5909\u63db\u5148\u3092\u7b97\u51fa\u3059\u308b\n  decrypter = Decrypter(text)\n  space_char = decrypter.find_encrypted_space()\n\n  # \u51fa\u529b\u7528\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\n  space_data = {\n    'char': space_char,\n  }\n\n  # \u7d50\u679c\u3092json\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\n  json.dump(space_data, ofs)\n\n\ndef decrypt(text, ofs):\n  # text\u3092\u5fa9\u53f7\u5316\u3059\u308b\n  decrypter = Decrypter(text)\n  decrypted_text = decrypter.decrypt()\n\n  # \u7d50\u679c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\n  ofs.write(decrypted_text)\n\n\ndef main(argv):\n  method, input_path, output_path = argv\n\n  # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3080\n  text = open(input_path).read()\n\n  # \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u6e96\u5099\n  ofs = open(output_path, 'w')\n\n  if method == \"count\":\n    count(text, ofs)\n\n  elif method == \"space\":\n    space(text, ofs)\n\n  elif method == \"decrypt\":\n    decrypt(text, ofs)\n\n  # \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u308b\n  ofs.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 538, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           //string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n           //Console.WriteLine(output);\n\n           int size;\n           if(Int32.TryParse(args[0], out size)){\n             System.Random rnd = new System.Random();\n             string c;\n             var chars = new System.Text.StringBuilder(size);\n             for(int n=0; n<size; n++){\n               c = rnd.Next(2)==0?\"\u30c9\":\"\u30ab\";\n               Console.WriteLine(c);\n               chars.Append(c);              \n               if(chars.ToString().Contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")){\n                    Console.WriteLine(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                    return;\n               }                  \n             }      \n             Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");       \n           }\n        }\n    }\n}\n"}
{"id": 539, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint contains_three(const char *s) {\n  while (*s) {\n    if (*s == '3') return 1;\n    s++;\n  }\n  return 0;\n}\n\nint is_valid_int(const char *s) {\n  if (*s == 0) return 0;\n  while (*s) {\n    if (!isdigit(*s)) return 0;\n    s++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    if (!is_valid_int(argv[i])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n < 0 || n > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int divisible = (n % 3 == 0);\n    int has3 = contains_three(argv[i]);\n\n    if (divisible && has3) puts(\"dumb\");\n    else if (divisible) puts(\"idiot\");\n    else if (has3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 540, "language": "Python3", "code": "import sys\nimport random\n\ndef main(max_count):\n    # \u51fa\u529b\u56de\u6570\u306b\u5fdc\u3058\u3066\u300c\u30c9\u300d\u307e\u305f\u306f\u300c\u30ab\u300d\u3092\u51fa\u529b\n    target_sequence = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    current_sequence = \"\"\n    \n    for _ in range(max_count):\n        sound = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(sound, end=\"\")\n        current_sequence += sound\n        \n        if target_sequence in current_sequence:\n            print(\"\\n\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\\n\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    # \u5f15\u6570\u30c1\u30a7\u30c3\u30af\n    if len(sys.argv) < 2:\n        print(\"Usage: python script.py <max_count>\")\n        sys.exit(1)\n    \n    try:\n        max_count = int(sys.argv[1])\n        if max_count < 0 or max_count > 10000:\n            print(\"Please enter a number between 0 and 10000.\")\n            sys.exit(1)\n    except ValueError:\n        print(\"Please enter a valid integer.\")\n        sys.exit(1)\n    \n    main(max_count)"}
{"id": 541, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport com.google.gson.*;\n\nclass Entry {\n  int robot, you;\n}\n\npublic class App {\n  public static void main(String[] args) throws Exception {\n    String s = new String(Files.readAllBytes(Paths.get(args[0])));\n    Entry[] entries = new Gson().fromJson(s, Entry[].class);\n\n    int size = entries.length;\n    int r1 = size > 0 ? entries[size-1].robot : 2;\n    int r2 = size > 1 ? entries[size-2].robot : 1;\n    int r3 = size > 2 ? entries[size-3].robot : 0;\n    int you = size > 0 ? entries[size-1].you : 0;\n\n    String key = r3 + \",\" + r2 + \",\" + r1 + \",\" + you;\n\n    HashMap<String, Integer> countTable = new HashMap<>();\n    for (int i = 3; i < size; i++) {\n      Entry e = entries[i];\n      String k = entries[i-3].robot + \",\" + entries[i-2].robot + \",\" + entries[i-1].robot + \",\" + entries[i-1].you;\n      int c = countTable.getOrDefault(k, 0);\n      countTable.put(k, (c + 1) % 3);\n    }\n\n    System.out.println(countTable.getOrDefault(key, 0));\n  }\n}"}
{"id": 542, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 543, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define SIZE 8\n\n// Checks if placing a queen at board[row][col] is safe\nbool isSafe(int board[SIZE][SIZE], int row, int col) {\n    for (int i = 0; i < col; i++)\n        if (board[row][i])\n            return false;\n\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)\n        if (board[i][j])\n            return false;\n\n    for (int i = row, j = col; i < SIZE && j >= 0; i++, j--)\n        if (board[i][j])\n            return false;\n\n    return true;\n}\n\n// Recursive utility function to solve the problem\nbool solveUtil(int board[SIZE][SIZE], int col) {\n    if (col >= SIZE)\n        return true;\n\n    for (int i = 0; i < SIZE; i++) {\n        if (isSafe(board, i, col)) {\n            board[i][col] = 1;\n\n            if (solveUtil(board, col + 1))\n                return true;\n\n            board[i][col] = 0;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int board[SIZE][SIZE] = {0};\n    int k, row, col;\n\n    // Read input\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &row, &col);\n        board[row][col] = 1;\n    }\n\n    // Try to solve the problem\n    if (solveUtil(board, 0)) {\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                if (board[i][j])\n                    printf(\"Q\");\n                else\n                    printf(\".\");\n            }\n            printf(\"\\n\");\n        }\n    } else {\n        printf(\"No solution exists\\n\");\n    }\n\n    return 0;\n}"}
{"id": 544, "language": "Python3", "code": "import sys\nimport unicodedata\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    line1=[]\n    ans=[]\n    h=[]\n    flag=0\n    for i, v in enumerate(argv):\n        # print(\"argv[{0}]: {1}\".format(i, v))\n        line1.append(v.strip())\n    for i in line1:\n      for char in i:\n        if unicodedata.east_asian_width(char) == 'F':\n          if flag == 0:\n            ans.append(\"invalid\")\n            h.append(i)\n            flag=1\n            break\n      if i.isdigit() is True:\n        if (int(i)%3 == 0):\n          if i.find(\"3\") == -1:\n            ans.append(\"idiot\")\n          else:\n            ans.append(\"dumb\")\n        elif i.find(\"3\") != -1:\n          ans.append(\"stupid\")\n        else:\n          if i not in h:\n            ans.append(\"smart\")\n      else:\n        ans.append(\"invalid\")\n    for i in ans:\n      print(i)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 545, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool\n\n// checks if an integer contains the digit 3\nbool contains_the_digit_three(int num) {\n    if (num == 0) return false;\n    while (num > 0) {\n        if (num % 10 == 3) return true;\n        num /= 10;\n    }\n    return false;\n}\n\n// computes the result string based on conditions\nconst char* process_idiot_algorithm(int num_val) {\n    bool is_divisible = (num_val % 3 == 0);\n    bool has_three = contains_the_digit_three(num_val);\n\n    if (is_divisible && has_three) {\n        return \"dumb\";\n    } else if (is_divisible) {\n        return \"idiot\";\n    } else if (has_three) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // skip argv[0]\n  for (int i = 1; i < argc; i++) {\n    char *endptr_arg;\n    long l_val = strtol(argv[i], &endptr_arg, 10);\n\n    // validate input string format\n    if (*endptr_arg != '\\0' || endptr_arg == argv[i]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // validate numeric range\n    if (l_val < 0 || l_val > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", process_idiot_algorithm((int)l_val));\n  }\n  return 0;\n}"}
{"id": 546, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    # for i, v in enumerate(argv):\n    #     print(\"argv[{0}]: {1}\".format(i, v))\n    def isGood(board, row, col): \n        # Check row\n        for i in range(8): \n            if board[row][i] == \"Q\": \n                return False\n\n        # Check left upper diagonal \n        for i,j in zip(range(row,-1,-1), range(col,-1,-1)): \n            if board[i][j] == \"Q\": \n                return False\n        \n        # Check left lower diagonal \n        for i,j in zip(range(row,8,1), range(col,-1,-1)): \n            if board[i][j] == \"Q\": \n                return False\n          # Check right upper diagonal \n        for i,j in zip(range(row,-1,-1), range(col,8,1)): \n            if board[i][j] == \"Q\": \n                return False\n        \n        # Check right lower diagonal \n        for i,j in zip(range(row,8,1), range(col,8,1)): \n            if board[i][j] == \"Q\": \n                return False\n                \n        return True\n        \n    def solve(board, restCol): \n        if len(restCol) <= 0: \n            return True\n\n        col = restCol[0]\n        for i in range(8): \n            if isGood(board, i, col): \n                board[i][col] = \"Q\"\n                if solve(board, restCol[1:]) == True: \n                    return True\n                board[i][col] = \".\"\n        return False\n\n    def printSolution(board): \n        for i in range(8):\n            line = \"\"\n            for j in range(8): \n                line += board[i][j]\n            print(line)\n\n    board = []\n    for i in range(8):\n      board.append([])\n      for j in range(8):\n        board[i].append(\".\")\n\n    v = argv[0]\n    f = open(v)\n    line = f.readline()\n    placed = int(line[0])\n    placedCol = []\n    # placedRow = []\n    for i in range(placed):\n      line = f.readline()\n      row = int(line[0])\n      col = int(line[2])\n      placedCol.append(col)\n      board[row][col] = \"Q\"\n    f.close()\n\n    rest = 8 - placed\n    restCol = []\n    for i in range(8):\n      if i not in placedCol:\n        restCol.append(i)\n    solve(board, restCol)\n    printSolution(board)\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 547, "language": "C++", "code": "#include <iostream>\n#include <map>\nusing namespace std;\n\nstring convertToRoman(int number) {\n    string result = \"\";\n    map<int, string> romanMap = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"}, \n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"}, \n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n\n    for (auto &pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    return result;\n}\n\nint main(int argc, char *argv[]) {\n    // \u5f15\u6570\u306e\u6570\u3092\u78ba\u8a8d\n    if (argc < 2) return 1;\n    int arabicNumber = stoi(argv[1]);\n    \n    cout << convertToRoman(arabicNumber) << endl; // \u5909\u63db\u7d50\u679c\u3092\u51fa\u529b\n    return 0;\n}"}
{"id": 548, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint stupids(int x)\n{\n  int r;\n  while(x>0)\n  {\n    r=x%10;\n    if(r==3)\n    {\n      return 1;\n    }\n    x=x/10;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  int x,i;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    x=atoi(argv[i]);\n    if(x!=isalpha(x) && x!=0)\n    {\n      if(x%3==0&&stupids(x))\n      printf(\"dumb\\n\");\n      else if(x%3==0)\n      printf(\"idiot\\n\");\n      else if(stupids(x))\n      printf(\"stupid\\n\");\n      else if(x%3!=0 && !stupids(x))\n      printf(\"smart\\n\");\n\n    }\n    else\n    printf(\"invalid\\n\");\n    \n  }\n  return 0;\n}\n"}
{"id": 549, "language": "Python3", "code": "import sys\nimport random\n\ndef taiko_game_engine(limit_val):\n    # Define the pattern to search for.\n    search_pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    pattern_len = len(search_pattern)\n    \n    # Use a string buffer to hold only the most recent characters.\n    sound_buffer = \"\"\n    \n    # Iterate up to the specified limit.\n    for current_iteration in range(limit_val):\n        # Choose a random drum note.\n        note = random.choice(['\u30c9', '\u30ab'])\n        \n        # Print the note.\n        print(note)\n        \n        # Add the note to the buffer.\n        sound_buffer += note\n        \n        # Keep the buffer size limited to the pattern length.\n        if len(sound_buffer) > pattern_len:\n            sound_buffer = sound_buffer[1:] # Slide the window\n            \n        # Check if the buffer matches the desired pattern.\n        if sound_buffer == search_pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n            \n    # If the loop finishes without a match, the game ends.\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(args):\n    # Get the numerical limit from the arguments.\n    output_limit = int(args[0])\n    taiko_game_engine(output_limit)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 550, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_GAMES 5000\n#define MAX_FILE_BUFFER 100000\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        // \u5f15\u6570\u304c\u8db3\u308a\u306a\u3044\n        return 1;\n    }\n\n    FILE *file_ptr = fopen(argv[1], \"r\");\n    if (file_ptr == NULL) {\n        // \u30d5\u30a1\u30a4\u30eb\u304c\u958b\u3051\u306a\u3044\n        return 1;\n    }\n\n    char file_contents[MAX_FILE_BUFFER];\n    fread(file_contents, 1, MAX_FILE_BUFFER, file_ptr);\n    fclose(file_ptr);\n\n    int robot_move_history[MAX_GAMES];\n    int your_move_history[MAX_GAMES];\n    int total_games = 0;\n\n    char *current_position = file_contents;\n    while ((current_position = strstr(current_position, \"\\\"robot\\\":\"))) {\n        current_position += 8; // move past the key\n        robot_move_history[total_games] = atoi(current_position);\n\n        current_position = strstr(current_position, \"\\\"you\\\":\");\n        current_position += 6; // move past the key\n        your_move_history[total_games] = atoi(current_position);\n        \n        total_games++;\n    }\n\n    if (total_games < 3) {\n        printf(\"0\\n\"); // \u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3059\u304e\u308b\n        return 0;\n    }\n\n    // [0-80]\u306e\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30eb\u30fc\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u914d\u5217\n    int first_moves[81];\n    int counts[81];\n    for (int i = 0; i < 81; i++) {\n        first_moves[i] = -1; // -1\u306f\u672a\u8a2d\u5b9a\u3092\u793a\u3059\n        counts[i] = 0;\n    }\n\n    // 4\u756a\u76ee\u306e\u30b2\u30fc\u30e0\u304b\u3089\u5c65\u6b74\u3092\u5206\u6790\n    for (int i = 3; i < total_games; i++) {\n        int r_minus_3 = robot_move_history[i - 3];\n        int r_minus_2 = robot_move_history[i - 2];\n        int r_minus_1 = robot_move_history[i - 1];\n        int y_minus_1 = your_move_history[i - 1];\n        \n        int key = r_minus_3 * 27 + r_minus_2 * 9 + r_minus_1 * 3 + y_minus_1;\n        \n        if (first_moves[key] == -1) {\n            first_moves[key] = robot_move_history[i];\n        }\n        counts[key]++;\n    }\n\n    // \u6b21\u306e\u624b\u3092\u4e88\u6e2c\n    int last_idx = total_games - 1;\n    int next_r_minus_3 = robot_move_history[last_idx - 2];\n    int next_r_minus_2 = robot_move_history[last_idx - 1];\n    int next_r_minus_1 = robot_move_history[last_idx];\n    int next_y_minus_1 = your_move_history[last_idx];\n    \n    int next_key = next_r_minus_3 * 27 + next_r_minus_2 * 9 + next_r_minus_1 * 3 + next_y_minus_1;\n\n    int initial_move = first_moves[next_key];\n    int times_seen = counts[next_key];\n\n    int predicted_robot_hand;\n    if (initial_move == -1) {\n        // This pattern has never been seen before.\n        // Problem implies this will not happen.\n        // As a fallback, guess the robot will play rock.\n        predicted_robot_hand = 0;\n    } else {\n        predicted_robot_hand = (initial_move + times_seen) % 3;\n    }\n\n    int my_winning_hand = (predicted_robot_hand + 2) % 3;\n    printf(\"%d\\n\", my_winning_hand);\n\n    return 0;\n}"}
{"id": 551, "language": "C#", "code": "using System;\n\npublic class Program\n{\n    static public void Main(string[] args)\n    {\n        foreach (var input in args)\n        {\n            Console.WriteLine(Solve(input));\n        }\n    }\n\n    private static string Solve(string text)\n    {\n        int n;\n        if (!int.TryParse(text, out n))\n        {\n            return \"invalid\";\n        }\n        \n        if (n < 0 || n > 1000)\n        {\n            return \"invalid\";\n        }\n\n        // check conditions\n        bool divisible = n % 3 == 0;\n        bool hasThree = text.Contains('3');\n\n        if (divisible && hasThree) return \"dumb\";\n        if (divisible) return \"idiot\";\n        if (hasThree) return \"stupid\";\n        \n        return \"smart\";\n    }\n}"}
{"id": 552, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction three_idiots($arg) {\n  if (strlen($arg) == 0 || !ctype_digit($arg)) return 'invalid';\n  $i = (int)$arg;\n  if ($i < 0 || $i > 1000) return 'invalid';\n  $hasThree = strpos($arg, '3') !== false;\n  $divByThree = $i % 3 === 0;\n  if ($divByThree && $hasThree) return \"dumb\";\n  if ($divByThree) return \"idiot\";\n  if ($hasThree) return \"stupid\";\n  return \"smart\";\n}\n\nfunction main($argc, $argv) {\n  foreach ($argv as $idx => $a) {\n    echo three_idiots($a) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 553, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  /**for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }**/\n  int a[argc];\n  char b[argc][10];\n  for(int i=1; i<argc;i++){\n    strcpy(b[i],argv[i]);\n  }\n  int anum=0;\n  int j=0;\n  for(int i=1;i<argc;i++){\n    j=0;\n    anum=0;\n      while(b[i][j] != '\\0'){\n        if(b[i][j] == ' '){anum = 999990; break;}\n      anum+=int(b[i][j])-48;\n      anum*=10;\n      j++;\n    }\n    if(anum == 99990){break;}\n    a[i] = anum/10;\n  }\n  for(int i = 1; i<argc; i++){\n    /**if((stoi(argv[i])).isalpha()){\n      cout<<\"invalid\"<<endl;\n    }**/\n    //else{\n      if(a[i]>=0 && a[i]<=1000){\n      int c=0;\n      int num=a[i];\n      int sum=0;\n      while(num != 0){\n        if(num%10 == 3){\n          c=1;\n          break;\n          num/=10;\n          }\n          else\n          num/=10;\n      }\n      if(a[i]%3 == 0 && c==0) cout<<\"idiot\"<<endl;\n      else if(a[i]%3 != 0 && c==1) cout<<\"stupid\"<<endl;\n      else if(a[i]%3 ==0 && c==1) cout<<\"dumb\"<<endl;\n      else cout<<\"smart\"<<endl;\n   // }\n  }\n  else cout<<\"invalid\"<<endl;\n  }\n  return 0;\n}\n"}
{"id": 554, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <unordered_map>\n#include <json/json.h>\n\nvoid findSpaceReplacement(const std::string &inputFile, const std::string &outputFile) {\n    std::unordered_map<char, int> frequency;\n    std::ifstream inFile(inputFile);\n    char spaceChar;\n    std::string line;\n\n    while (std::getline(inFile, line)) {\n        for (char c : line) {\n            if (c != ' ') {\n                frequency[c]++;\n            }\n        }\n    }\n    inFile.close();\n\n    // Assuming we just take the first lowest frequency char\n    spaceChar = frequency.begin()->first;\n\n    Json::Value jsonData;\n    jsonData[\"char\"] = spaceChar;\n    \n    std::ofstream outFile(outputFile);\n    outFile << jsonData.toStyledString();\n    outFile.close();\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1; // Check argument count\n    std::string command = argv[1];\n    std::string inputFile = argv[2];\n    std::string outputFile = argv[3];\n    \n    if (command == \"space\") {\n        findSpaceReplacement(inputFile, outputFile);\n    }\n    return 0;\n}"}
{"id": 555, "language": "C#", "code": "using System;\n\npublic class IdiotsConverter\n{\n    // Determines the \"idiot\" status for a given number.\n    private static string GetIdiotStatus(int number)\n    {\n        bool isDivisibleByThree = (number % 3 == 0);\n        bool containsDigitThree = number.ToString().Contains('3');\n\n        if (isDivisibleByThree && containsDigitThree)\n        {\n            return \"dumb\";\n        }\n        else if (isDivisibleByThree)\n        {\n            return \"idiot\";\n        }\n        else if (containsDigitThree)\n        {\n            return \"stupid\";\n        }\n        else\n        {\n            return \"smart\";\n        }\n    }\n\n    static public void Main(string[] args)\n    {\n        foreach (string argument in args)\n        {\n            int numericVal;\n            // Attempt to parse the argument and validate its range.\n            if (int.TryParse(argument, out numericVal) && numericVal >= 0 && numericVal <= 1000)\n            {\n                Console.WriteLine(GetIdiotStatus(numericVal));\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 556, "language": "Java", "code": "public class IdiotsGameCLI {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      int num;\n      try {\n        num = Integer.parseInt(arg);\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if (num < 0 || num > 1000) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean by3 = num % 3 == 0;\n      boolean has3 = arg.indexOf('3') >= 0;\n      if (by3 && has3) System.out.println(\"dumb\");\n      else if (by3) System.out.println(\"idiot\");\n      else if (has3) System.out.println(\"stupid\");\n      else System.out.println(\"smart\");\n    }\n  }\n}"}
{"id": 557, "language": "Python3", "code": "import sys\n\ndef idiocy_check(s):\n    if not s.isdigit(): return \"invalid\"\n    \n    n = int(s)\n    \n    if n < 0 or n > 1000: return \"invalid\"\n\n    divisible = (n % 3 == 0)\n    contains = ('3' in s)\n\n    if divisible and contains: return \"dumb\"\n    elif divisible: return \"idiot\"\n    elif contains: return \"stupid\"\n    else: return \"smart\"\n\ndef entry(argv):\n    for v in argv:\n        print(idiocy_check(v))\n\nif __name__ == '__main__':\n    entry(sys.argv[1:])"}
{"id": 558, "language": "Ruby", "code": "TYPE_DO = 0\nTYPE_KA = 1\nTYPES = [TYPE_DO, TYPE_KA]\n\ndef main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  history = []\n\n  max_trials = argv[0].to_i\n  max_trials.times do\n    type = TYPES.sample\n\n    if type == TYPE_DO\n      puts \"\u30c9\"\n    elsif type == TYPE_KA\n      puts \"\u30ab\"\n    end\n\n    history = (history + [type]).last(7)\n    if history.join(\"\") == \"\u30c9\u30ab\u30c9\u30aa\u30ab\u30c9\u30ab\"\n      puts \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" and return\n    end\n  end\n\n  puts \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"\nend\n\nmain(ARGV)\n"}
{"id": 559, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint str_contains_3(char *str) {\n  for (; *str; str++) {\n    if (*str == '3') return 1;\n  }\n  return 0;\n}\n\nint is_valid_digitstr(char *str) {\n  for (int i = 0; str[i]; i++) {\n    if (str[i] < '0' || str[i] > '9') return 0;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i < argc; i++) {\n    char *s = argv[i];\n    if (!is_valid_digitstr(s)) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int num = atoi(s);\n    if (num < 0 || num > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = (num % 3 == 0);\n    int has3 = str_contains_3(s);\n\n    if (div3 && has3) {\n      printf(\"dumb\\n\");\n    } else if (div3) {\n      printf(\"idiot\\n\");\n    } else if (has3) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 560, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Prognosticator {\n\n    public static void main(String[] args) {\n        String fPath = args[0];\n        List<Match> matches;\n        try {\n            String data = readWholeFile(fPath);\n            matches = parseMatches(data);\n        } catch (IOException e) {\n            System.err.println(\"File error: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> patterns = new HashMap<>();\n        List<Integer> rHist = new ArrayList<>(); // Robot history\n        List<Integer> oHist = new ArrayList<>(); // Opponent history\n\n        // Initial robot sequence\n        rHist.add(0); rHist.add(1); rHist.add(2);\n\n        for (int i = 0; i < matches.size(); i++) {\n            Match m = matches.get(i);\n            int rPlay = m.robotHand;\n            int oPlay = m.yourHand;\n\n            if (i >= 3) {\n                // Form state key from historical data\n                String sKey = rHist.get(i - 3) + \"_\" + \n                              rHist.get(i - 2) + \"_\" + \n                              rHist.get(i - 1) + \"_\" + \n                              oHist.get(i - 1);\n                \n                // Update pattern based on actual robot play\n                patterns.put(sKey, (rPlay + 1) % 3);\n            }\n            rHist.add(rPlay);\n            oHist.add(oPlay);\n        }\n\n        // Determine final state and predict robot's next move\n        int n = matches.size();\n        String finalKey = rHist.get(n - 3) + \"_\" + \n                          rHist.get(n - 2) + \"_\" + \n                          rHist.get(n - 1) + \"_\" + \n                          oHist.get(n - 1);\n        \n        int nextR = patterns.getOrDefault(finalKey, 0);\n\n        System.out.println(getWinningHand(nextR));\n    }\n\n    private static String readWholeFile(String path) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(path))) {\n            String l;\n            while ((l = br.readLine()) != null) {\n                sb.append(l.trim());\n            }\n        }\n        return sb.toString();\n    }\n\n    private static List<Match> parseMatches(String json) {\n        List<Match> ms = new ArrayList<>();\n        String records = json.substring(1, json.length() - 1); // Remove []\n        for (String rec : records.split(\"\\\\},\\\\{\")) {\n            String cleanRec = rec.replaceAll(\"[{}\\\" ]\", \"\"); // Remove { } \" space\n            String[] parts = cleanRec.split(\",\");\n            ms.add(new Match(\n                Integer.parseInt(parts[0].split(\":\")[1]), \n                Integer.parseInt(parts[1].split(\":\")[1])\n            ));\n        }\n        return ms;\n    }\n\n    private static int getWinningHand(int losingHand) {\n        return (losingHand == 0) ? 2 : (losingHand == 1) ? 0 : 1;\n    }\n}\n\nclass Match {\n    int robotHand;\n    int yourHand;\n    Match(int r, int y) {\n        this.robotHand = r;\n        this.yourHand = y;\n    }\n}"}
{"id": 561, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n  static public void Main (string[] args)\n  {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    // ---\n    // This is a sample code to use arguments and stdout.\n    // Edit and remove this code as you like.\n\n     foreach (var s in args)\n            {\n                string result = ThreeIdiots(s);\n                Console.WriteLine(result);\n            }\n  }\n  public static string ThreeIdiots(string s)\n        {\n            int num;\n            string result=\"invalid\";\n            if (int.TryParse(s, out num))\n            {\n                result = \"smart\";\n                if (num >= 0 && num <= 1000)\n                {\n                    if (num % 3 == 0)\n                    {\n                        result = \"idiot\";\n                        foreach (char c in s)\n                        {\n\n                            if ((int)c == 51)\n                            {\n                                result = \"dumb\";\n                                break;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        foreach (char c in s)\n                        {\n\n                            if ((int)c == 51)\n                            {\n                                result = \"stupid\";\n                                break;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    result = \"smart\";\n                }\n            }\n            else\n            {\n                result = \"invalid\";\n            }\n\n            return result;\n        }\n}\n"}
{"id": 562, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <fstream>\n#include <map>\n#include <cmath>\n#include <iterator>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  if (argc < 4) {\n    return 1;\n  }\n\n  string command = argv[1];\n  string input_path = argv[2];\n  string output_path = argv[3];\n\n  ifstream ifs(input_path);\n  string text((istreambuf_iterator<char>(ifs)), (istreambuf_iterator<char>()));\n  ifs.close();\n\n  if (command == \"count\") {\n    map<char, int> counts;\n    for (char c : text) {\n      if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ') {\n        counts[c]++;\n      }\n    }\n\n    ofstream ofs(output_path);\n    ofs << \"{\";\n    bool first = true;\n    for (auto const& pair : counts) {\n      if (!first) {\n        ofs << \",\";\n      }\n      ofs << \"\\n  \\\"\" << pair.first << \"\\\": \" << pair.second;\n      first = false;\n    }\n    ofs << \"\\n}\\n\";\n    ofs.close();\n\n  } else if (command == \"space\") {\n    map<char, int> freqs;\n    int total_len = 0;\n    for (char c : text) {\n      if (isalpha(c) || c == ' ') {\n        freqs[c]++;\n        total_len++;\n      }\n    }\n    \n    char space_char = ' ';\n    double min_diff = 1e9; \n\n    for (char ch = 'a'; ch <= 'z'; ++ch) {\n      int cnt = freqs.count(ch) ? freqs[ch] : 0;\n      if (cnt == 0) continue;\n\n      double avg_len = (double)(total_len - cnt) / (cnt + 1);\n      double diff = abs(avg_len - 4.5);\n      if (diff < min_diff) {\n        min_diff = diff;\n        space_char = ch;\n      }\n    }\n    \n    ofstream ofs(output_path);\n    ofs << \"{\\n\" << \"  \\\"char\\\": \\\"\" << space_char << \"\\\"\\n\" << \"}\\n\";\n    ofs.close();\n\n  } else if (command == \"decrypt\") {\n    // 1. Find space char\n    map<char, int> freqs;\n    int total_len = 0;\n    for (char c : text) {\n      if (isalpha(c) || c == ' ') {\n        freqs[c]++;\n        total_len++;\n      }\n    }\n    \n    char space_char = ' ';\n    double min_diff = 1e9;\n    for (char ch = 'a'; ch <= 'z'; ++ch) {\n      int cnt = freqs.count(ch) ? freqs[ch] : 0;\n      if (cnt == 0) continue;\n      double avg_len = (double)(total_len - cnt) / (cnt + 1);\n      double diff = abs(avg_len - 4.5);\n      if (diff < min_diff) {\n        min_diff = diff;\n        space_char = ch;\n      }\n    }\n\n    // 2. Swap back\n    string caesar_text = \"\";\n    for (char c : text) {\n      if (c == space_char) {\n        caesar_text += ' ';\n      } else if (c == ' ') {\n        caesar_text += space_char;\n      } else {\n        caesar_text += c;\n      }\n    }\n\n    // 3. Find shift\n    map<char, int> caesar_freqs;\n    for (char c : caesar_text) {\n      if (isalpha(c)) {\n        caesar_freqs[tolower(c)]++;\n      }\n    }\n\n    char most_freq_char = 'e';\n    int max_freq = 0;\n    if (!caesar_freqs.empty()) {\n      for (auto const& pair : caesar_freqs) {\n        if (pair.second > max_freq) {\n          max_freq = pair.second;\n          most_freq_char = pair.first;\n        }\n      }\n    }\n\n    int shift = (most_freq_char - 'e' + 26) % 26;\n\n    // 4. Decrypt\n    string decrypted_text = \"\";\n    for (char c : caesar_text) {\n      if (islower(c)) {\n        decrypted_text += (char)('a' + (c - 'a' - shift + 26) % 26);\n      } else if (isupper(c)) {\n        decrypted_text += (char)('A' + (c - 'A' - shift + 26) % 26);\n      } else {\n        decrypted_text += c;\n      }\n    }\n\n    ofstream ofs(output_path);\n    ofs << decrypted_text;\n    ofs.close();\n  }\n\n  return 0;\n}"}
{"id": 563, "language": "Java", "code": "package puzzlegame;\n\nimport java.util.Scanner;\n\npublic class ChessSolver {\n    static final int SIZE = 8;\n    static char[][] board = new char[SIZE][SIZE];\n    static boolean[] rows = new boolean[SIZE];\n    static boolean[] cols = new boolean[SIZE];\n    static boolean[] diagA = new boolean[2 * SIZE];\n    static boolean[] diagB = new boolean[2 * SIZE];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        initializeBoard();\n\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            placeQueen(r, c);\n        }\n\n        solve(0);\n        printChessBoard();\n    }\n\n    private static void initializeBoard() {\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                board[i][j] = '.';\n            }\n        }\n    }\n\n    private static boolean solve(int r) {\n        if (r == SIZE) return true;\n\n        for (int c = 0; c < SIZE; c++) {\n            if (isValidPosition(r, c)) {\n                placeQueen(r, c);\n                if (solve(r + 1)) return true;\n                removeQueen(r, c);\n            }\n        }\n        return false;\n    }\n\n    private static boolean isValidPosition(int r, int c) {\n        return !rows[r] && !cols[c] && !diagA[r + c] && !diagB[r - c + SIZE];\n    }\n\n    private static void placeQueen(int r, int c) {\n        board[r][c] = 'Q';\n        rows[r] = true;\n        cols[c] = true;\n        diagA[r + c] = true;\n        diagB[r - c + SIZE] = true;\n    }\n\n    private static void removeQueen(int r, int c) {\n        board[r][c] = '.';\n        rows[r] = false;\n        cols[c] = false;\n        diagA[r + c] = false;\n        diagB[r - c + SIZE] = false;\n    }\n\n    private static void printChessBoard() {\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                System.out.print(board[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 564, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static char[][] map = new char[8][8];\n    static boolean[] colFlag = new boolean[8];\n    static boolean[] slashFlag = new boolean[15];\n    static boolean[] backslashFlag = new boolean[15];\n    static boolean[] givenRow = new boolean[8];\n\n    static boolean recur(int r) {\n        if (r == 8) return true;\n        if (givenRow[r]) return recur(r + 1);\n\n        for (int c = 0; c < 8; c++) {\n            if (!colFlag[c] && !slashFlag[r + c] && !backslashFlag[r - c + 7]) {\n                map[r][c] = 'Q';\n                colFlag[c] = slashFlag[r + c] = backslashFlag[r - c + 7] = true;\n                if (recur(r + 1)) return true;\n                map[r][c] = '.';\n                colFlag[c] = slashFlag[r + c] = backslashFlag[r - c + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        for (char[] arr : map) Arrays.fill(arr, '.');\n        int k = in.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = in.nextInt(), c = in.nextInt();\n            map[r][c] = 'Q';\n            colFlag[c] = true;\n            slashFlag[r + c] = true;\n            backslashFlag[r - c + 7] = true;\n            givenRow[r] = true;\n        }\n\n        recur(0);\n\n        for (int i = 0; i < 8; i++)\n            System.out.println(new String(map[i]));\n    }\n}"}
{"id": 565, "language": "Java", "code": "package track;\n\n\npublic class App {\n  public static void main(String[] args) {\n\n  for(int j=0;j<args.length;j++)\n\t\t{\n\t\t\tint i=0;\n\t\t\t  try {\n\t\t          i = Integer.parseInt(args[j]);\n\t\t          String s=Integer.toString(i);\n\t\t\t\t\tif(i<3)\n          {\n            System.out.println(\"invalid\");\n          }\n\t\t\t\t\telse if(i%3==0 && s.contains(\"3\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(i%3==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(s.contains(\"3\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t\t}\n\t\t        }\n\t\t        catch (NumberFormatException nfe) {\n\t\t          \n\t\t        \tSystem.out.println(\"invalid\");\n\t\t          \n\t\t        }\n\t\t}\n\t\t\n  \n}\n}\n"}
{"id": 566, "language": "Java", "code": "package track;\n\nimport java.util.*;\nimport java.io.*;\npublic class App {\n   public static int[] col=new int[30];\n    public static int[] d1=new int[30];\n    public static int[] d2=new int[30];\n    public static String ans=\"\";\n    public static int flag1=0;\n    public static int[] cols=new int[30];\n    public static int[] rows=new int[30];\n    public static int[][] m1=new int[8][8];\n  public static void main(String[] args)throws IOException {\n    try{\nBufferedReader br=new BufferedReader(new FileReader(args[0]));\n//int t=Integer.parseInt(br.readLine());\nint flag=0;\n       int t1=Integer.parseInt(br.readLine());\n  \n      for(int i=0;i<t1;i++)\n      {\n          String[] s1 = br.readLine().split(\" \");\n          int r=Integer.parseInt(s1[0]);\n          int c=Integer.parseInt(s1[1]);\n         rows[i]=r;\n         cols[i]=c;\n      }\n    // String[] s1 = br.readLine().split(\" \");\n     getans(0,t1);\n   if(ans.equalsIgnoreCase(\"\"))\n   {\n       System.out.println(\"no solution\");\n   }else\n   {\n       for(int i=0;i<8;i++)\n       {\n           for(int j=0;j<8;j++)\n           {\n               if(m1[i][j]==1)\n               {\n                 System.out.print(\"Q\");    \n               }else\n               \n                   {\n                       System.out.print(\".\"); \n                   }\n              \n           }\n           System.out.println();\n       }\n   }\n   ans=\"\";\n    for(int i=0;i<8;i++)\n       {\n           for(int j=0;j<8;j++)\n           {\n             m1[i][j]=0;\n           }\n       }\n    for(int i=0;i<30;i++)\n    {\n        d1[i]=col[i]=d2[i]=rows[i]=cols[i]=0;\n    }\n    flag1=0;\nbr.close();\n}catch(Exception e)\n{return;}\n}\n  public static void getans(int r,int t1)\n  {\n      \n      if(r==8){\n          int flag=0;\n          for(int i=0;i<t1;i++)\n          {\n              int ro=rows[i];\n              int co=cols[i];\n              if(m1[ro][co]==0)\n              {\n                  flag=1;\n                  break;\n              }\n          }\n          if(flag==0)\n          {\n              for(int i=0;i<8;i++)\n                {\n                    ans+=String.valueOf(col[i]);\n                }\n              flag1=1;\n          }\n          return;\n      }\n      for(int c=0;c<8;c++)\n      {\n          int c1=c;\n          if(col[c1]==0&&d1[(r-c1)+8-1]==0&&d2[r+c1]==0)\n          {\n            col[c1]=d1[(r-c1)+8-1]=d2[r+c1]=1; \n            m1[r][c]=1;\n            getans(r+1,t1);\n            if(flag1==1)\n            {\n               \n                break;\n            }\n            col[c1]=d1[(r-c1)+8-1]=d2[r+c1]=0;\n             m1[r][c]=0;\n          }\n      }\n     return; \n  }\n}\n"}
{"id": 567, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool canPlace(int r, int c, vector<int>& placedQueens) {\n    for (int i = 0; i < r; i++) {\n        int col = placedQueens[i];\n        if (col == c || abs(col - c) == abs(i - r)) {\n            return false; // Check for attacks\n        }\n    }\n    return true;\n}\n\nvoid placeQueens(int r, vector<int>& placedQueens) {\n    if (r == 8) return; // All queens are placed\n\n    for (int c = 0; c < 8; c++) {\n        if (canPlace(r, c, placedQueens)) {\n            placedQueens[r] = c; // Place queen\n            placeQueens(r + 1, placedQueens); // Backtrack\n            if (placedQueens[7] != -1) break; // Found final solution\n        }\n    }\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<int> placedQueens(8, -1); // -1 indicates empty\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        placedQueens[r] = c; // Set initial queens\n    }\n\n    placeQueens(0, placedQueens); // Start placing queens\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            if (placedQueens[i] == j) {\n                cout << 'Q'; // Queen placed\n            } else {\n                cout << '.'; // Empty space\n            }\n        }\n        cout << endl; // New line after each row\n    }\n    return 0;\n}"}
{"id": 568, "language": "Python3", "code": "import sys\n\ndef evaluate(input_value):\n    if not input_value.isdigit() or not (0 <= int(input_value) <= 1000):\n        return \"invalid\"\n    \n    number = int(input_value)\n    has_three = '3' in str(number)\n    divisible_by_three = number % 3 == 0\n    \n    if divisible_by_three and has_three:\n        return \"dumb\"\n    elif divisible_by_three:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_application(args):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    output = []\n    for arg in args:\n        output.append(evaluate(arg))\n    print(\"\\n\".join(output))\n\nif __name__ == \"__main__\":\n    run_application(sys.argv[1:])"}
{"id": 569, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    int maxCount = 0;\n    if (args.length > 0) {\n      maxCount = Integer.parseInt(args[0]);\n    }\n\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder history = new StringBuilder();\n    Random rand = new Random();\n\n    for (int i = 0; i < maxCount; i++) {\n      String sound = rand.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(sound);\n      history.append(sound);\n\n      if (history.length() >= pattern.length()) {\n        if (history.toString().endsWith(pattern)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 570, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      //String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String output=\"\";\n      try{\n      int n=Integer.parseInt(args[i]);\n      \n      if(n%3==0){\n        if((\"\"+n).contains(\"3\"))\n        {\n          output=\"dumb\";\n        }\n        else{\n          output=\"idiot\";\n        }\n      }\n      else if((\"\"+n).contains(\"3\"))\n      {\n        output=\"stupid\";\n      }\n      else{\n        output=\"smart\";\n      }\n\n      }catch(NumberFormatException e){\n        output=\"invalid\";\n      }catch(Exception e)\n      {\n        output=\"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 571, "language": "Python3", "code": "import sys\n\ndef parse_arg(arg):\n    if arg.isdigit():\n        n = int(arg)\n        if 0 <= n <= 1000:\n            return n\n    return None\n\ndef get_result(num, original_str):\n    if num is None:\n        return \"invalid\"\n    \n    divisible_by_3 = num % 3 == 0\n    includes_3 = '3' in original_str\n\n    if divisible_by_3 and includes_3: return \"dumb\"\n    if divisible_by_3: return \"idiot\"\n    if includes_3: return \"stupid\"\n    return \"smart\"\n    \ndef main(argv):\n    for arg in argv:\n        parsed_num = parse_arg(arg)\n        result = get_result(parsed_num, arg)\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 572, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isOnlyDigits(const string &x) {\n    return !x.empty() && x.find_first_not_of(\"0123456789\") == string::npos;\n}\n\nbool includes3(const string &x) {\n    return x.find('3') != string::npos;\n}\n\nint main(int argc, char* argv[]) {\n    for (int i=1; i<argc; ++i) {\n        string s(argv[i]);\n        if (!isOnlyDigits(s)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int n = stoi(s);\n        if (n<0 || n>1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div = n % 3 == 0;\n        bool inc3 = includes3(s);\n        if (div && inc3)\n            cout << \"dumb\" << endl;\n        else if (div)\n            cout << \"idiot\" << endl;\n        else if (inc3)\n            cout << \"stupid\" << endl;\n        else\n            cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 573, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cctype> // For isupper, islower\n\nint main(int argc, char *argv[]) {\n  // Loop through each command line argument, starting from the first actual argument (index 1)\n  for (int i = 1; i < argc; ++i) {\n    std::string currentArg = argv[i]; // Get the current argument as a string\n    std::string rot13Result = \"\";     // String to store the ROT13 transformed result\n\n    // Iterate over each character in the current argument\n    for (char character : currentArg) {\n      if (std::islower(character)) { // If the character is a lowercase letter\n        // Apply ROT13 for lowercase letters\n        character = (char)('a' + (character - 'a' + 13) % 26);\n      } else if (std::isupper(character)) { // If the character is an uppercase letter\n        // Apply ROT13 for uppercase letters\n        character = (char)('A' + (character - 'A' + 13) % 26);\n      }\n      // If it's not an alphabet, it remains unchanged\n      rot13Result += character; // Append the (potentially transformed) character to the result\n    }\n    std::cout << rot13Result << std::endl; // Print the ROT13 transformed string followed by a newline\n  }\n  return 0;\n}"}
{"id": 574, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      // System.out.println(args[i]); \n      // args[i] = args[i].trim().replace(\" \",\"-\");\n\n      boolean divisibleByThree = false;\n      boolean includesThree = false;\n      try{\n        if(!(args[i].matches(\"[0-9]+\")))\n        {\n          System.out.println(\"invalid\");\n          continue;  \n        }\n          int number = Integer.parseInt(args[i]);\n          if(number%3==0)\n          {\n            divisibleByThree = true;\n          }\n          // System.out.println(\"in==\"+number);\n      }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      String numberString = args[i];\n\n      if(numberString.contains(\"3\"))\n      {\n          includesThree = true;\n      }\n\n      if(divisibleByThree && includesThree)\n      {\n        System.out.println(\"dumb\");\n      }else if(divisibleByThree)\n      {\n        System.out.println(\"idiot\");\n      }else if(includesThree){\n        System.out.println(\"stupid\");\n      }else{\n        System.out.println(\"smart\");\n      }\n    }\n  }\n}\n"}
{"id": 575, "language": "Java", "code": "package track;\n\npublic class RomanNumeral {\n  public static void main(String[] args) {\n    int num = Integer.parseInt(args[0]);\n    StringBuilder sb = new StringBuilder();\n\n    while (num >= 1000) {\n      sb.append(\"M\");\n      num -= 1000;\n    }\n    if (num >= 900) {\n      sb.append(\"CM\");\n      num -= 900;\n    }\n    if (num >= 500) {\n      sb.append(\"D\");\n      num -= 500;\n    }\n    if (num >= 400) {\n      sb.append(\"CD\");\n      num -= 400;\n    }\n    while (num >= 100) {\n      sb.append(\"C\");\n      num -= 100;\n    }\n    if (num >= 90) {\n      sb.append(\"XC\");\n      num -= 90;\n    }\n    if (num >= 50) {\n      sb.append(\"L\");\n      num -= 50;\n    }\n    if (num >= 40) {\n      sb.append(\"XL\");\n      num -= 40;\n    }\n    while (num >= 10) {\n      sb.append(\"X\");\n      num -= 10;\n    }\n    if (num >= 9) {\n      sb.append(\"IX\");\n      num -= 9;\n    }\n    if (num >= 5) {\n      sb.append(\"V\");\n      num -= 5;\n    }\n    if (num >= 4) {\n      sb.append(\"IV\");\n      num -= 4;\n    }\n    while (num >= 1) {\n      sb.append(\"I\");\n      num -= 1;\n    }\n\n    System.out.println(sb.toString());\n  }\n}"}
{"id": 576, "language": "Python3", "code": "import sys\nfrom collections import Counter\nimport re\nimport json\nimport functools\n\n\ndef count(s):\n  if re.findall('[^a-zA-Z ]',s):\n    tmp = re.sub('[^a-zA-Z ]','',s)\n  alpha = ' ,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'\n  alpha = alpha.split(',')\n  c = {}\n  for a in alpha:\n    c.update({a:0})\n  for tmpi in tmp:\n    c.update({tmpi:c[tmpi]+1})\n  return c\n\ndef space(s):\n  tmp = s.split(' ')\n  res = 0\n  c = count(s)\n  for tmpi in tmp:\n    res += len(tmpi)\n  minimum = 0\n  min_alpha = ''\n  for i,item in enumerate(sorted(c.items(),key=lambda x:x[1],reverse=True)):\n    k = item[0]\n    v = item[1]\n    if i == 0 and v != 0:\n      minimum = abs(res/v-4.5)\n      min_alpha = k\n    elif v != 0:\n      if minimum > abs(res/v-4.5):\n        minimum = abs(res/v-4.5)\n        min_alpha = k\n  sp = {\"char\":min_alpha}\n  return sp\n\ndef decrypt(s):\n  c = count(s)\n  sp = space(s)[\"char\"]\n  s = re.sub(sp,' ',s)\n  print(s)\n  for k,v in sorted(c.items(),key=lambda x:x[1],reverse=True):\n    if k != sp:\n      print(k,v)\n      sub = ord(k)-ord('e')\n      break\n\n  print(sub)\n  out = ''\n  for si in s:\n    if si.isalpha():\n      if ord('A') <= ord(si) <= ord('Z'):\n        if ord(si)-sub < ord('A'):\n          out += chr(ord(si)-sub+ord('Z')-ord('A')+1)\n        else:\n          out += chr(ord(si)-sub)\n      elif ord('a') <= ord(si) <= ord('z'):\n        if ord(si)-sub < ord('a'):\n          out += chr(ord(si)-sub+ord('z')-ord('a')+1)\n        else:\n          out += chr(ord(si)-sub)\n    else:\n      out += si\n  print(out)\n  return out\n\n\ndef main(argv):\n  com = ''\n  input_file = ''\n  output_file = ''\n  for i, v in enumerate(argv):\n    if i == 0:\n      com = v\n    elif i == 1:\n      input_file = v\n    elif i == 2:\n      output_file = v\n\n  with open(input_file,'r') as f:\n    s = f.read()\n\n  if com == 'count':\n    out = json.dumps(count(s))\n    print(out)\n  elif com == 'space':\n    out = json.dumps(space(s))\n    print(out)\n  elif com == 'decrypt':\n    out = decrypt(s)\n  with open(output_file,'w') as f:\n    f.write(out)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 577, "language": "Python3", "code": "import sys\n\ndef convert(n):\n    roman_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    output = []\n    for value, roman in roman_map:\n        count = n // value\n        if count:\n            output.append(roman * count)\n            n -= value * count\n    return ''.join(output)\n\ndef main(argv):\n    # 1~3999\u306e\u6574\u6570\u304c\u5f15\u6570\u3067\u6e21\u3063\u3066\u304f\u308b\n    number = int(argv[0])\n    print(convert(number))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 578, "language": "Python3", "code": "import sys\n\ndef categorizer(value_text):\n    if not value_text.isdigit():\n        return \"invalid\"\n    \n    number = int(value_text)\n    \n    if not (0 <= number <= 1000):\n        return \"invalid\"\n\n    is_mult_of_3 = (number % 3 == 0)\n    str_has_3 = ('3' in value_text)\n\n    if is_mult_of_3 and str_has_3:\n        return \"dumb\"\n    elif is_mult_of_3:\n        return \"idiot\"\n    elif str_has_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_from_shell(input_cli_args):\n    for arg_value in input_cli_args:\n        print(categorizer(arg_value))\n\nif __name__ == '__main__':\n    execute_from_shell(sys.argv[1:])"}
{"id": 579, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  a=eval(open(argv[0]).read())\n  b={}\n  for i,j in enumerate(a+[{}]):\n    if i<3:continue\n    c=(a[i-3]['robot'],a[i-2]['robot'],a[i-1]['robot'],a[i-1]['you'])\n    d=j.get('robot',-1)\n    if d==-1:break\n    if c in b:\n      if b[c]!=(d-1)%3:\n        print(i,c,d,b[c])\n    b[c]=d\n\n  print((b[c])%3)\nif __name__=='__main__':\n  main(sys.argv[1:])\n"}
{"id": 580, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class App {\n      static int N = 8;\n      static int k = 0;\n      static int [][] positions = new int[N][N];\n\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      // System.out.println(output);\n\n       decodeData(readFile(args[0]));\n       solveNQ();\n\n    }\n\n  }\n\n\n    /* A utility function to print solution */\n    static void printSolution(int board[][])\n    {\n        //System.out.println(k);\n        int givenPosition = 0;\n\n        for (int i = 0; i < N; i++)\n        {\n            for (int j = 0; j < N; j++) {\n                if (board[i][j] == positions[i][j] && board[i][j] ==1) {\n                    givenPosition++;\n                }\n              \n            }\n\n        }\n\n        if(givenPosition == k){\n            printPosition(board);\n        }\n        \n    }\n\n\n\n    public static void printPosition(int board[][]){\n\n        for (int r=0; r < 8; r++){\n            for (int c=0; c < 8; c++){\n                if(board[r][c] == 1){\n                    System.out.printf(\"Q\");\n                }\n                else {\n                    System.out.printf(\".\");\n                }\n            }\n            System.out.println();\n        }\n\n    }\n\n\n\n\n        static boolean isSafe(int board[][], int row, int col)\n    {\n        int i, j;\n\n        /* Check this row on left side */\n        for (i = 0; i < col; i++)\n            if (board[row][i] == 1)\n                return false;\n\n        /* Check upper diagonal on left side */\n        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)\n            if (board[i][j] == 1)\n                return false;\n\n        /* Check lower diagonal on left side */\n        for (i = row, j = col; j >= 0 && i < N; i++, j--)\n            if (board[i][j] == 1)\n                return false;\n\n        return true;\n    }\n\n\n\n        /* A recursive utility function\n    to solve N Queen problem */\n    static boolean solveNQUtil(int board[][], int col)\n    {\n\t/* base case: If all queens are placed\n\tthen return true */\n        if (col == N)\n        {\n            printSolution(board);\n            return true;\n        }\n\n        boolean res = false;\n        for (int i = 0; i < N; i++)\n        {\n\n            if ( isSafe(board, i, col) )\n            {\n                /* Place this queen in board[i][col] */\n                board[i][col] = 1;\n\n                res = solveNQUtil(board, col + 1) || res;\n\n\n                board[i][col] = 0; // BACKTRACK\n            }\n        }\n\n\n        return res;\n    }\n\n\n\n  static void solveNQ()\n    {\n        int board[][] = new int[N][N];\n\n        if (solveNQUtil(board, 0) == false)\n        {\n            return ;\n        }\n\n        return ;\n    }\n\n\n      public static List<String> readFile(String fileName){\n        List<String> datas = new ArrayList<>();\n        try {\n            File file = new File(fileName);\n            FileReader filereader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(filereader);\n\n            String data;\n            while ((data = bufferedReader.readLine()) != null) {\n                datas.add(data);\n            }\n            filereader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return datas;\n    }\n\n\n   public static  void decodeData(List<String> input){\n        k = Integer.parseInt(input.get(0));\n\n        for (int i=0; i < k; i++){\n            String [] position =  input.get(i+1).split(\" \");\n            positions[Integer.parseInt(position[0])][Integer.parseInt(position[1])] = 1;\n\n        }\n\n    }\n\n\n\n\n\n\n}\n"}
{"id": 581, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int answer,count;\n\t\tfor (int i = 0, l = args.length; i < l; i++)\n     {\n\t\t\ttry\n      {\n        String output = String.format(\"%s\", args[i]);\n        answer=4;count=0;\n        int b=(int)output.charAt(0);\n        if(b>256)\n        {\n          System.out.println(\"invalid\");\n          break;\n        }\n        Integer num=Integer.parseInt(output);\n        if(num%3==0)\n        {\n          answer=1;count++;\n        }\n    \n        \n        if(output.contains(\"3\"))\n        {\n          answer=2;count++;\n        }\n        if(count==2)\n        {\n          answer=3;\n        }\n        switch(answer)\n        {\n           case 1:\n            System.out.println(\"idiot\");\n            break;\n           case 2:\n            System.out.println(\"stupid\");\n            break;\n           case 3:\n            System.out.println(\"dumb\");\n            break;\n           case 4:\n            System.out.println(\"smart\");\n            break;\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n  \n"}
{"id": 582, "language": "Python3", "code": "import sys\n\ndef score_number(text_num):\n    if not text_num.isdigit(): return \"invalid\"\n    \n    num_val = int(text_num)\n    \n    if not (0 <= num_val <= 1000): return \"invalid\"\n\n    cond_div3 = (num_val % 3 == 0)\n    cond_has3 = ('3' in text_num)\n\n    if cond_div3 and cond_has3: return \"dumb\"\n    if cond_div3: return \"idiot\"\n    if cond_has3: return \"stupid\"\n    return \"smart\"\n\ndef execute(args_from_cli):\n    for arg_s in args_from_cli:\n        print(score_number(arg_s))\n\nif __name__ == '__main__':\n    execute(sys.argv[1:])"}
{"id": 583, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\n\n\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 584, "language": "Java", "code": "package track;\n\npublic class RomanNumeralizer {\n    public static void main(String[] args) {\n        int number = Integer.parseInt(args[0]);\n        StringBuilder roman = new StringBuilder();\n\n        int[] numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        for (int i = 0; i < numbers.length; i++) {\n            while (number >= numbers[i]) {\n                roman.append(symbols[i]);\n                number -= numbers[i];\n            }\n        }\n        System.out.println(roman.toString());\n    }\n}"}
{"id": 585, "language": "Java", "code": "package track;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      try{\n       int temp=Integer.parseInt(args[i]);\n      int flag=0;\n\t\t\twhile(temp>0)\n      {\n        if((temp%10)==3)\n        {\n        flag=1;\n        break;\n        }\n        temp=temp/10;\n      }\n      temp=Integer.parseInt(args[i]);\n      if(((temp%3)==0) && (flag==1) )\n        System.out.println(\"dumb\");\n        else if(flag==1)\n        System.out.println(\"stupid\");\n        else if((temp%3)==0)\n        System.out.println(\"idiot\");\n        else\n        System.out.println(\"smart\");\n\t\t\n   }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 586, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    long long num = 0 ;\n    bool valid = true , three = false ;\n    int len = strlen( argv[i] ) ;\n    for ( int j = 0 ; j < len ; j ++ ) {\n      if ( argv[i][j] >= '0' && argv[i][j] <= '9' ) {\n        num = (num*10) + argv[i][j] - '0' ;\n        if ( argv[i][j] == '3' )\n          three = true ;\n      }\n      else {\n        valid = false ;\n        break ;\n      }\n    }\n    if ( valid && num >= 0 && num <= 1000 ) {\n      if ( num % 3 == 0 && three )\n        cout<<\"dumb\\n\" ;\n      else if ( num % 3 == 0 )\n        cout<<\"idiot\\n\" ;\n      else if ( three )\n        cout<<\"stupid\\n\" ;\n      else\n        cout<<\"smart\\n\" ;\n    }\n    else\n      cout<<\"invalid\\n\" ;\n  }\n  return 0;\n}\n"}
{"id": 587, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n\n  sub_command = argv[0]\n  input_file_path = argv[1]\n  output_file_path = argv[2]\n\n\n  if sub_command == 'count':\n    f = open(input_file_path)\n    letters = list(f.read().strip())\n    result = {}\n    result[\" \"] = letters.count(\" \")\n    for i in range(65,91):\n      result[chr(i)] = letters.count(chr(i))\n    for i in range(97,123):\n      result[chr(i)] = letters.count(chr(i))\n    r = open(output_file_path, 'w')\n    json.dump(result,r)\n\n\n  elif sub_command == \"space\":\n    f = open(input_file_path)\n    letters = list(f.read().strip())\n    max_freq = 0\n    answer = 'a'\n    # \u7a7a\u767d\u306e\u51fa\u73fe\u983b\u5ea6\u304c\u4e00\u756a\u9ad8\u3044\u3068\u63a8\u6e2c\u3055\u308c\u308b\u306e\u3067\u3001\u4e00\u756a\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u6587\u5b57\u3092\u63a2\u3059\n    for i in range(97,123):\n      if i == 97 or max_freq < letters.count(chr(i)):\n        max_freq = letters.count(chr(i))\n        answer = chr(i)\n      \n    result = {\"char\": answer}\n    r = open(output_file_path, 'w')\n    json.dump(result,r)\n\n\n  elif sub_command == \"decrypt\":\n    f = open(input_file_path)\n    letters = list(f.read().strip())\n\n    # \u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u3068\u51fa\u73fe\u983b\u5ea6\u3092\u4e8c\u6b21\u5143\u914d\u5217\u306b\u683c\u7d0d\n    freq = []\n    freq.append([\" \", letters.count(\" \")])\n    for i in range(65,91):\n      freq.append([chr(i), letters.count(chr(i))])\n    for i in range(97,123):\n      freq.append([chr(i), letters.count(chr(i))])\n\n    # \u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u9806\u306b\u914d\u5217\u5168\u4f53\u3092\u30bd\u30fc\u30c8\n    freq.sort(key=lambda x:-x[1])\n\n    # \u6587\u7ae0\u4e2d\u306e\u6700\u3082\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u6587\u5b57\u3068\u7a7a\u767d\u3092\u5165\u308c\u66ff\u3048\u308b\n    for i,letter in enumerate(letters):\n      if letter == \" \":\n        letters[i] = freq[0][0]\n      elif letter == freq[0][0]:\n        letters[i] = \" \"\n    \n    # \"e\"\u306e\u51fa\u73fe\u983b\u5ea6\u304c\u9ad8\u3044\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u30012\u756a\u76ee\u306b\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u6587\u5b57\u3068\"e\"\u306e\u5dee\u3060\u3051\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5168\u4f53\u3092\u56de\u8ee2\u3055\u305b\u308b\u3002\n    rotate_number = (ord('e') - ord(freq[1][0])) % 26\n    for i,letter in enumerate(letters):\n      if 'a' <= letter and letter <= 'z':\n          letters[i] = chr((ord(letter) - ord('a') + int(rotate_number)) % 26 + ord('a'))\n      if 'A' <= letter and letter <= 'Z':\n          letters[i] = chr((ord(letter) - ord('A') + int(rotate_number)) % 26 + ord('A'))\n\n    str = ''.join(letters)\n    r = open(output_file_path, 'w')\n    r.write(str)\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 588, "language": "Java", "code": "package track;\nimport java.util.*;\n\npublic class App {\n  //\u76e4\u9762\u306e\u72b6\u614b\u3092\u8868\u3059(0\u306a\u3089\u7f6e\u3051\u308b)\n  public static int[][] f = new int[8][8];\n  //\u914d\u7f6e\u3057\u305fQueen\u306e\u5834\u6240\u3092\u8868\u3059(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u884c\u756a\u53f7, \u7f6e\u304b\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306f-1)\n  public static int[] q = new int[8];\n\n  public static void main(String[] args) {\n    solve();\n  }\n\n  public static void solve(){\n    Scanner sc = new Scanner(System.in);\n    int num = sc.nextInt();\n    int tmp_i,tmp_j;\n\n    //\u76e4\u9762, Queen\u306e\u4f4d\u7f6e\u3092\u521d\u671f\u5316\n    for(int i=0;i<8;i++){\n      q[i] = -1;\n      for(int j=0;j<8;j++) f[i][j] = 0;\n    }\n\n    //\u6a19\u6e96\u5165\u529b\u304b\u3089Queen\u306e\u521d\u671f\u4f4d\u7f6e\u3092\u53d6\u5f97\n    for(int i=0;i<num;i++){\n      tmp_i = sc.nextInt();\n      tmp_j = sc.nextInt();\n\n      q[tmp_i] = tmp_j;\n\n      update(tmp_i,tmp_j,1);\n    }\n\n    put(0);\n  }\n\n  //i\u884c\u76ee\u306bQueen\u3092\u914d\u7f6e(\u518d\u5e30)\n  public static void put(int i){\n    //8\u884c\u76ee\u306a\u3089\u7d42\u4e86\n    if(i==8){\n      printfield();\n      System.exit(0);\n    }\n    //\u3059\u3067\u306b\u7f6e\u3044\u3066\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    if(q[i] != -1) put(i+1);\n    for(int j=0;j<8;j++){\n      if(f[i][j] == 0){\n        q[i] = j;\n        update(i,j,1);\n        put(i+1);\n        //\u7f6e\u3051\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u76e4\u9762\u306e\u5bfe\u5fdc\u3059\u308b\u30de\u30b9\u306e\u5024\u3092-1\u3059\u308b\n        update(i,j,-1);\n      }\n    }\n  }\n\n  //i\u884cj\u5217\u306e\u30de\u30b9\u306bQueen\u3092\u914d\u7f6e, \u76e4\u9762\u3092\u66f4\u65b0(n\u3060\u3051\u5897\u52a0)\n  public static void update(int i,int j,int n){\n    if(n<0) q[i]=-1;\n    for(int k=0;k<8;k++){\n      //\u6a2a\n      f[i][k] += n;\n      //\u7e26\n      f[k][j] += n;\n      //\u53f3\u4e0a\n      if(((i-k)>=0) && ((j+k)<8)) f[i-k][j+k] += n;\n      //\u53f3\u4e0b\n      if(((i+k)<8) && ((j+k)<8)) f[i+k][j+k] += n;\n      //\u5de6\u4e0a\n      if(((i-k)>=0) && ((j-k)>=0)) f[i-k][j-k] += n;\n      //\u5de6\u4e0b\n      if(((i+k)<8) && ((j-k)>=0)) f[i+k][j-k] += n;\n    }\n  }\n\n  //\u76e4\u9762\u3092\u63cf\u753b\n  public static void printfield(){\n    for(int i=0;i<8;i++){\n      for(int j=0;j<8;j++){\n        if(j == q[i]) System.out.print(\"Q\");\n        else  System.out.print(\".\");\n      }\n      System.out.println();\n    }\n  }\n}\n"}
{"id": 589, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  print(random.randrange(2))\n\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 590, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    $output = -1;\n    $case = ['idiot', 'stupid', 'dumb', 'smart', 'invalid'];   \n    if($value > 0 && $value <= 1000){\n      if($value%3 == 0){\n        $output = 0;\n      } \n      if(strpos($value, '3') !== false){\n        $output = 1;\n      } \n      if($value%3 == 0 && strpos($value, '3') !== false){\n        $output = 2;\n      } \n      if($output == -1){\n        $output = 3;\n      }\n    }     \n    if($output == -1){\n      $output = 4;\n    }\n    printf($case[$output].\"\\n\");\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 591, "language": "Ruby", "code": "# Queen representation\nclass Queen\n  attr_reader :row, :col\n  def initialize(row:, col:)\n    @col = col\n    @row = row\n  end\nend\n\nBOARD_SIZE = 8\nQUEEN_OUTPUT = 'Q'.freeze\nBLANK_OUTPUT = '.'.freeze\n\ndef calc_minus_diagonal_index(row:, col:)\n  row - col\nend\n\ndef calc_plus_diagonal_index(row:, col:)\n  row + col\nend\n\ndef read_queens(file_name:)\n  file_lines = File.readlines(file_name)\n  number_of_queens = file_lines[0].to_i\n  file_lines[1..number_of_queens].map do |coords|\n    row, col = coords.split.map(&:to_i)\n    Queen.new(row: row, col: col)\n  end\nend\n\ndef print_solution(queens:)\n  chess_board = Array.new(BOARD_SIZE) { Array.new(BOARD_SIZE) { BLANK_OUTPUT } }\n  queens.each do |queen|\n    chess_board[queen.row][queen.col] = QUEEN_OUTPUT\n  end\n  chess_board.each do |row|\n    puts row.join\n  end\nend\n\ndef search_solution(queens:, free_rows:, free_cols:, free_plus_diagonals:, free_minus_diagonals:)\n  if queens.count == BOARD_SIZE\n    print_solution(queens: queens)\n    return\n  end\n\n  curr_col = free_cols.index(true)\n  (0...BOARD_SIZE).each do |row|\n    next unless free_rows[row]\n\n    plus_index = calc_plus_diagonal_index(row: row, col: curr_col)\n    minus_index = calc_minus_diagonal_index(row: row, col: curr_col)\n    next unless free_plus_diagonals[plus_index] && free_minus_diagonals[minus_index]\n\n    free_cols[curr_col] = false\n    free_rows[row] = false\n    free_plus_diagonals[plus_index] = false\n    free_minus_diagonals[minus_index] = false\n    new_queen = Queen.new(row: row, col: curr_col)\n    search_solution(queens: queens + [new_queen],\n                    free_rows: free_rows,\n                    free_cols: free_cols,\n                    free_plus_diagonals: free_plus_diagonals,\n                    free_minus_diagonals: free_minus_diagonals)\n    free_cols[curr_col] = true\n    free_rows[row] = true\n    free_plus_diagonals[plus_index] = true\n    free_minus_diagonals[minus_index] = true\n  end\nend\n\ndef search_queens_solution(queens:)\n  free_rows = Array.new(BOARD_SIZE) { true }\n  free_cols = Array.new(BOARD_SIZE) { true }\n  free_plus_diagonals = Array.new(BOARD_SIZE * 2 - 1) { true }\n  free_minus_diagonals = Array.new(BOARD_SIZE * 2 - 1) { true }\n  queens.each do |queen|\n    free_rows[queen.row] = false\n    free_cols[queen.col] = false\n    plus_index = calc_plus_diagonal_index(row: queen.row, col: queen.col)\n    free_plus_diagonals[plus_index] = false\n    minus_index = calc_minus_diagonal_index(row: queen.row, col: queen.col)\n    free_minus_diagonals[minus_index] = false\n  end\n  search_solution(queens: queens,\n                  free_rows: free_rows,\n                  free_cols: free_cols,\n                  free_plus_diagonals: free_plus_diagonals,\n                  free_minus_diagonals: free_minus_diagonals)\nend\n\ndef main(argv)\n  argv.each_index do |i|\n    file_name = argv[i]\n    initial_queens = read_queens(file_name: file_name)\n    search_queens_solution(queens: initial_queens)\n  end\nend\n\nmain(ARGV)\n"}
{"id": 592, "language": "Java", "code": "public class IdiotJudge {\n  public static void main(String[] params) {\n    for (String p : params) {\n      try {\n        int i = Integer.parseInt(p);\n        if (i < 0 || i > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = i % 3 == 0;\n        boolean has3 = p.contains(\"3\");\n        if (div3 && has3) System.out.println(\"dumb\");\n        else if (div3) System.out.println(\"idiot\");\n        else if (has3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 593, "language": "Python3", "code": "import sys\n\ndef classify(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n    \n    num = int(arg)\n    \n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    if num % 3 == 0 and '3' in arg:\n        return \"dumb\"\n    elif num % 3 == 0:\n        return \"idiot\"\n    elif '3' in arg:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    # Classify numbers based on the principles of the 3 Idiots algorithm.\n    results = [classify(arg) for arg in args]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 594, "language": "Java", "code": "package track;\n\npublic class CLIApp {\n    public static void main(String[] args) {\n        // Handle command line inputs\n\n        for (String arg : args) {\n            int number;\n            if (isHalfWidthInteger(arg)) {\n                number = Integer.parseInt(arg);\n                if (number >= 0 && number <= 1000) {\n                    processValue(number);\n                } else {\n                    System.out.println(\"invalid\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isHalfWidthInteger(String str) {\n        return str.matches(\"\\\\d+\");\n    }\n\n    private static void processValue(int num) {\n        boolean divisibleBy3 = (num % 3 == 0);\n        boolean includes3 = String.valueOf(num).contains(\"3\");\n\n        if (divisibleBy3 && includes3) {\n            System.out.println(\"dumb\");\n        } else if (divisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (includes3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 595, "language": "C", "code": "#include <stdio.h>\nint digit(int value) //function for finding whether the given number contains 3\n{\n  int val;\n  while(value)\n  {\n    val=value%10;\n    if(val==3)\n    {\n       return 1;\n    }\n    value=value/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) \n  {\n    if(atoi(argv[i])) //checks whether the given argument is integer.\n    {\n      int value=atoi(argv[i]); // if it is integer it stores the given integer in the variable value.\n      if(value>=0 && value<=1000) //checks whether the given number is within the range.\n      {\n        if(value%3==0) //checks the value is divisible by 3 and equal to 0\n        {\n          if(digit(value)) // checks if the value contains digit 3 by invoking the function digit\n          {\n           printf(\"dumb\\n\");\n          }\n          else\n          {\n          printf(\"idiot\\n\");\n         }\n        }\n      else if(value%3!=0) //checks whether the value divisible by 3 is not  equal to 0.\n       {\n          if(digit(value)) // invokes the function\n          {\n            printf(\"stupid\\n\");\n          }\n          else\n          {\n            printf(\"smart\\n\");\n          } \n        }\n      else // else it prints invalid.\n        {\n          printf(\"invalid\\n\");\n        }\n      } \n    }  \n    else\n      {\n        printf(\"invalid\\n\");\n      }\n  }\n   return 0;\n}\n"}
{"id": 596, "language": "Java", "code": "package rot13cli;\n\npublic class Main {\n  public static void main(String[] args) {\n    for (String input : args) {\n      System.out.println(rot13(input));\n    }\n  }\n\n  static String rot13(String text) {\n    char[] arr = text.toCharArray();\n    for (int i = 0; i < arr.length; i++) {\n      char c = arr[i];\n      if (c >= 'a' && c <= 'z') {\n        arr[i] = (char)((c - 'a' + 13) % 26 + 'a');\n      } else if (c >= 'A' && c <= 'Z') {\n        arr[i] = (char)((c - 'A' + 13) % 26 + 'A');\n      }\n    }\n    return new String(arr);\n  }\n}"}
{"id": 597, "language": "Java", "code": "package track;\n\npublic class App {\n\n  // This method converts an Arabic numeral to a Roman numeral using a greedy approach.\n  public static String convertToRoman(int num) {\n    int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    StringBuilder romanBuilder = new StringBuilder();\n    for (int i = 0; i < values.length; i++) {\n      while (num >= values[i]) {\n        romanBuilder.append(symbols[i]);\n        num -= values[i];\n      }\n    }\n    return romanBuilder.toString();\n  }\n\n  public static void main(String[] args) {\n    int inputNum = Integer.parseInt(args[0]);\n    String romanOutput = convertToRoman(inputNum);\n    System.out.println(romanOutput);\n  }\n}"}
{"id": 598, "language": "Python3", "code": "import sys\nimport json\n\n\ndef appear_count(file_path, result_path):\n  count_dic = char_count(file_path)\n  f = open(result_path, 'w')\n  json.dump(count_dic, f, indent=2)\n    \ndef char_count(file_path):\n  count_dic = {}\n  alphabet_list = [\" \"]\n  alphabet_list.extend([chr(ord('a') + i) for i in range(26)])\n  alphabet_list.extend([chr(ord('a') + i).upper() for i in range(26)])\n  for alphabet in alphabet_list:\n    count_dic[alphabet] = 0\n  with open(file_path) as f:\n    for line in f.readlines():\n      for c in line:\n        if c in alphabet_list:\n          count_dic[c] = count_dic[c] + 1\n  return count_dic\n\n\n\ndef space_char(file_path, result_path):\n  count_dic = char_count(file_path)\n  # sorted_array = sorted(count_dic.items(), key=lambda x:x[1]) #e\u3068\u3059\u308b\n  max_key = \"\"\n  max_value = 0\n  for key, value in count_dic.items():\n    if max_value < value:\n      max_value = value\n      max_key = key\n  result_dic = {}\n  result_dic['char'] = max_key\n  # sa = ord(key) - ord('e')\n  f = open(result_path, 'w')\n  json.dump(result_dic, f, indent=2)\n\n  \ndef char_count2(file_path):\n  count_dic = {}\n  alphabet_list = [\" \"]\n  alphabet_list.extend([chr(ord('a') + i) for i in range(26)])\n  alphabet_list.extend([chr(ord('a') + i).upper() for i in range(26)])\n  for alphabet in alphabet_list:\n    count_dic[alphabet] = 0\n  with open(file_path) as f:\n    for line in f.readlines():\n      for i,c in enumerate(line):\n        #4,5\u6587\u5b57\u76ee\u304c\u7a7a\u767d\u306b\u306a\u308b\u78ba\u7387\u304c\u9ad8\u3044(4.5\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u306e\u524d\u5f8c4,5,9,13,14,18,...)\n        if (0 <=(i+1)%4.5 <= 0.5 or 4 <= (i+1)%4.5) and i!=0:\n          if c in alphabet_list:\n            count_dic[c] = count_dic[c] + 1\n  return count_dic\n\ndef distance(file_path):\n  count_dic = char_count(file_path)\n  # sorted_array = sorted(count_dic.items(), key=lambda x:x[1]) #e\u3068\u3059\u308b\n  max_key = \"\"\n  max_value = 0\n  for key, value in count_dic.items():\n    if max_value < value:\n      max_value = value\n      max_key = key\n    sa = ord(max_key) - ord('e')\n  return sa, max_key\n\n\ndef decrypt(file_path, result_path):\n  sa, max_key = distance(file_path)\n  f = open(result_path, 'w')\n  with open(file_path) as f:\n    for line in f.readlines():\n      for c in line:\n        if c in alphabet_list:\n          if c==max_key:\n            f.write(\" \")\n          elif c==\" \":\n            if (ord(max_key) - sa) > ord('z'):\n              f.write(chr(ord('a') + ord(max_key) - sa - ord('z')))\n            else:\n              f.write(chr(ord(max_key) - sa))\n          else:\n            if (ord(c) - sa) > ord('z'):\n              f.write(chr(ord('a') + ord(c) - sa - ord('z')))\n            else:\n              f.write(chr(ord(c) - sa))\n        else:\n          f.write(c)\n          # print(c, end=\"\")\n  \n  # json.dump(result_dic, f, indent=2)\n\n\ndef main(argv):\n    command = argv[0]\n    file_path = argv[1]\n    result_path = argv[2]\n    # appear_count(file_path, result_path)\n    if command == \"count\":\n      appear_count(file_path, result_path)\n    elif command == \"space\":\n      space_char(file_path, result_path)\n    else: #command == decrypt\n      decrypt(file_path, result_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 599, "language": "Python3", "code": "import json\nimport sys\n\ndef main(file_path):\n    # Initialize previous robot hands\n    robot_hands = [0, 1, 2]  # Rock, Scissors, Paper\n    opponent_last_hand = None\n\n    # Read the JSON file\n    with open(file_path, 'r') as file:\n        records = json.load(file)\n\n    # Iterate over records to determine the last three hands and the opponent's last hand\n    for record in records:\n        opponent_last_hand = record['you']\n        robot_hands.append(record['robot'])\n        if len(robot_hands) > 3:\n            robot_hands.pop(0)\n\n    # Determine the robot's next hand based on the last three hands and the opponent's last hand\n    params_key = tuple(robot_hands + [opponent_last_hand])\n    play_index = (len(params_key) - 1) % 3  # cycle through the index\n    \n    # The robot's actions based on the cycling logic\n    action = (play_index + 1) % 3  # Play next hand in the cycle\n    print(action)\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print(\"Please provide a JSON file path\")\n    else:\n        main(sys.argv[1])"}
{"id": 600, "language": "Java", "code": "public class IdiotsParser {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      try {\n        int n = Integer.parseInt(arg);\n        if (n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = n % 3 == 0;\n        boolean has3 = arg.indexOf('3') != -1;\n        if (div3 && has3) {\n          System.out.println(\"dumb\");\n        } else if (div3) {\n          System.out.println(\"idiot\");\n        } else if (has3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 601, "language": "Python3", "code": "import sys\n\ndef dfs_q(currres, deep):\n  #When deep enough, return the result\n  if deep == 8:\n    return True, currres\n  \n  #Got what to put next:\n  nextnum = 0\n  while nextnum in currres:\n    nextnum += 1\n\n  #Check if there's a possible next step\n  for i in range(8):\n    ng = False\n    #Check if the pos is valid\n    for k, v in currres.items():\n      if v == i or k + v == nextnum + i or nextnum - k == i - v:\n        ng = True\n        break\n    #If valid search in deeper level\n    if not ng:\n      currres[nextnum] = i\n      isFound, nextres = dfs_q(currres, deep + 1)\n      if isFound:\n        return True, nextres\n      currres.pop(nextnum)\n  return False, currres\n\ndef print_a_8queen(grps):\n  isFound, result = dfs_q(grps, len(grps))\n  for i in range(8):\n    nextline = '.' * result[i] + 'Q' + '.' * (7 - result[i])\n    print(nextline)\n\ndef main(argv):\n\n    grps = dict()\n    fi = open(argv[0], 'r')\n    lines = fi.readlines()\n    for i in range(1, len(lines)):\n      k, v = lines[i].split(' ')\n      grps[int(k)] = int(v)\n    print_a_8queen(grps)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 602, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for s in args:\n        if not (s.isdigit() and s == str(int(s))):\n            print('invalid')\n            continue\n        num = int(s)\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            continue\n        both = num % 3 == 0 and '3' in s\n        only_div = num % 3 == 0 and '3' not in s\n        only_3 = num % 3 != 0 and '3' in s\n        if both:\n            print(\"dumb\")\n        elif only_div:\n            print(\"idiot\")\n        elif only_3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 603, "language": "Python", "code": "import sys\n\ndef can_put(board, r, c):\n    # Already put. but I allow solver put it again.\n    if board[r][c]:\n        return True\n\n    for i in range(8):\n        if board[r][i]:\n            return False\n        if board[i][c]:\n            return False\n        if r+i < 8 and c+i < 8 and board[r+i][c+i]:\n            return False\n        if r+i < 8 and c-i >= 0 and board[r+i][c-i]:\n            return False\n        if r-i >= 0 and c+i < 8 and board[r-i][c+i]:\n            return False\n        if r-i >= 0 and c-i >= 0 and board[r-i][c-i]:\n            return False\n\n    return True\n\n# find the right position of the queen in r-th row.\ndef solve(board, r):\n    if r >= 8:\n        return True\n\n    put_successfully = False\n    has_fixed_queen = False\n\n    for c in range(8):\n        if not can_put(board, r, c):\n            continue\n\n        if board[r][c]:\n            has_fixed_queen = True\n\n        # put a queen\n        board[r][c] = True\n        put_successfully = True\n\n        if not solve(board, r + 1):\n            # we should not remove the fixed queen.\n            if has_fixed_queen:\n                put_successfully = False\n                break\n            else:\n                board[r][c] = False\n                put_successfully = False\n        else:\n            break\n\n    return put_successfully\n\ndef dump_board(board):\n    for r in range(8):\n        for c in range(8):\n            sys.stdout.write(\"Q\" if board[r][c] else \".\")\n        print(\"\")\n\ndef main(filename):\n    board = [[False for _ in range(8)] for _ in range(8)]\n\n    with open(filename, \"r\") as f:\n        k = int(f.readline())\n        for i in range(k):\n            line = f.readline().strip()\n            r, c = map(int, line.split())\n            board[r][c] = True\n\n    solve(board, 0)\n    dump_board(board)\n\nif __name__ == '__main__':\n    main(sys.argv[1])"}
{"id": 604, "language": "Python3", "code": "from collections import defaultdict\nfrom functools import wraps, reduce\nimport json\nimport sys\n\ndef with_file(f):\n  @wraps(f)\n  def _inner(self, infile, outfile, *args, **kwargs):\n    with open(infile, \"r\") as inf, open(outfile, \"w\") as outf:\n      return f(self, inf, outf, *args, **kwargs)\n  return _inner\n\nclass Analyzer(object):\n\n  _count_target_chars = (\" \" + \"\".join([chr(i) + chr(i+32) \n                                  for i in range(ord(\"A\"), ord(\"Z\") + 1)]))\n\n  @with_file\n  def count(self, ifile, ofile):\n    counts = self._count(ifile.read())\n    json.dump(counts, ofile)\n\n  @with_file\n  def space(self, ifile, ofile):\n    json.dump(dict(char=self._space(ifile.read())), ofile)\n\n  @with_file\n  def decrypt(self, ifile, ofile):\n    s = ifile.read()\n    counts = self._count(s)\n    space_char = self._space(s)\n\n    for expected_e, _ in sorted(counts.items(), key=lambda x: x[1], reverse=True):\n      if expected_e == space_char:\n        continue\n      break\n    diff = ord(expected_e) - ord(\"e\")\n\n    s = s.translate(str.maketrans({\" \": space_char, space_char: \" \"}))\n    mapping = dict()\n    for i in counts.keys():\n      if i == \" \":\n        continue\n      c = ord(i) - diff\n\n      if c < ord(\"A\"):\n        c = ord(\"Z\") - (ord(\"A\") - c - 1)\n      elif i >= \"a\" and c < ord(\"a\"):\n        c = ord(\"z\") - (ord(\"a\") - c - 1)\n      mapping[i] = chr(c)\n    mapping = str.maketrans(mapping)\n    ofile.write(s.translate(mapping))\n\n  def _count(self, s):\n    counts = {i: 0 for i in self._count_target_chars}\n    for i in s:\n      if i in self._count_target_chars:\n        counts[i] += 1\n    return counts\n\n  def _space(self, s):\n    counts = self._count(s)\n    length = reduce(lambda x, y: x + y, counts.values(), 0)\n    a = int(length // 4.5)\n    return [i for i in sorted(counts.items(), key=lambda x: x[1]) if i[1] <= a][-1][0]\n\n\ndef main(argv):\n  analyzer = Analyzer()\n  getattr(analyzer, argv[0])(*argv[1:])\n  \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 605, "language": "C++", "code": "#include<iostream>\n#include<string.h>\n#include<stdlib.h>\nusing namespace std;\nint main(int argc,char*argv[])\n{\n\tint n,i,j=0,k=1,a[4];\n\tint b,include=0,divisible=0;\n\tchar c[10];\n\tint count=0,q=1,p=0;\n\twhile(--argc)\n\t{\n\t\tstrcpy(c,argv[q]);\n\t\tcount=0;\n\t\tfor(p=0;p<(strlen(c));p++)\n\t\t{\n\t\t\tif(!((c[p]>='0') && (c[p]<='9')))\n\t\t\t\tcount++;\n\t\t}\n\t\tfor(p=0;p<10;p++)\n\t\t\tc[p]='\\0';\n\n\t\tif(count!=0)\n\t\t{\n\t\t\tcout<<\"invalid\\n\";\n\t\t}\n\t\telse if(n=(atoi(argv[q])))\n\t\t{\n\t\t\tb=n;\n\t\t\tif(n<=1000)\n\t\t\t{\n\t\t\t\tfor(i=0;i<4;i++)\n\t\t\t\t\ta[i]='\\0';\n\n\t\t\t\ti=0;\n\t\t\t\twhile(b)\n\t\t\t\t{\n\t\t\t\t\ta[i++]=b%10;\n\t\t\t\t\tb=b/10;\n\t\t\t\t}\n\n\t\t\t\tfor(i=0;i<4;i++)\n\t\t\t\t{\n\t\t\t\t\tif(a[i]==3)\n\t\t\t\t\t\tinclude++;\n\t\t\t\t}\n\t\t\t\tif((n%3)==0)\n\t\t\t\t{\n\t\t\t\t\tdivisible++;\n\t\t\t\t}\n\n\n\t\t\t\tif(include && divisible)\n\t\t\t\t\tcout<<\"dumb\\n\";\n\t\t\t\telse \n\t\t\t\t\tcout<<\"smart\\n\";\n\n\t\t\t\tdivisible=0;\n\t\t\t\tinclude=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout<<\"invalid \\n\";\n\t\t\t}\n\n\t\t}\n\t\tq++;\n\t}\n}"}
{"id": 606, "language": "Python3", "code": "import sys\ndef fil(string):\n  try:\n    p=int(string)\n    if(p<0 and p>1000):\n      return \"invalid\"\n  except ValueError:\n    return \"invalid\"\n  s=int(string)\n  if(s%3==0 and '3' in string):\n    return \"dumb\"\n  elif '3' in string:\n    return \"stupid\"\n  elif s%3==0:\n    return \"idiot\"\n  return \"smart\"\ndef main(argv):\n  for i in argv:\n    print(fil(i))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 607, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_frequencies(input_file, output_file):\n    with open(input_file, 'r') as file:\n        text = file.read()\n    \n    frequency = Counter(char for char in text if char.isalpha() or char.isspace())\n    \n    with open(output_file, 'w') as outfile:\n        json.dump(frequency, outfile)\n\ndef identify_space_replacement(input_file, output_file):\n    with open(input_file, 'r') as file:\n        text = file.read()\n\n    space_replacement = ''\n    for char in text:\n        if char.isalpha() or char.isspace():\n            if char.isspace():\n                continue\n            if not space_replacement and not char.isupper():\n                space_replacement = char\n                break\n    \n    result = {\"char\": space_replacement}\n    with open(output_file, 'w') as outfile:\n        json.dump(result, outfile)\n\ndef decrypt_text(input_file, output_file):\n    with open(input_file, 'r') as file:\n        encrypted_text = file.read()\n    \n    shift = 2\n    decrypted_chars = []\n    \n    char_map = {}\n    for i in range(26):\n        original = chr(i + ord('A'))\n        shifted = chr((i + shift) % 26 + ord('A'))\n        char_map[shifted] = original\n\n    for char in encrypted_text:\n        if char in char_map:\n            decrypted_chars.append(char_map[char])\n        else:\n            decrypted_chars.append(char)\n    \n    decrypted_text = ''.join(decrypted_chars)\n    \n    with open(output_file, 'w') as outfile:\n        outfile.write(decrypted_text)\n\ndef main():\n    command = sys.argv[1]\n    input_file = sys.argv[2]\n    output_file = sys.argv[3]\n\n    if command == 'count':\n        count_frequencies(input_file, output_file)\n    elif command == 'space':\n        identify_space_replacement(input_file, output_file)\n    elif command == 'decrypt':\n        decrypt_text(input_file, output_file)\n\nif __name__ == '__main__':\n    main()"}
{"id": 608, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\nimport com.google.gson.Gson;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 3) {\n      System.exit(1);\n    }\n    String command = args[0];\n    String inputFile = args[1];\n    String outputFile = args[2];\n\n    String text = \"\";\n    try {\n      text = new String(Files.readAllBytes(Paths.get(inputFile)));\n    } catch (IOException e) {\n      System.exit(2);\n    }\n\n    if (command.equals(\"count\")) {\n      Map<String, Integer> result = new HashMap<>();\n      for (char c : text.toCharArray()) {\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n          String key = String.valueOf(c);\n          result.put(key, result.getOrDefault(key, 0) + 1);\n        }\n      }\n      writeJson(result, outputFile);\n    } else if (command.equals(\"space\")) {\n      Map<Character, Integer> counts = new HashMap<>();\n      for (char c : text.toCharArray()) {\n        if ((c >= 'a' && c <= 'z') || c == ' ') {\n          counts.put(c, counts.getOrDefault(c, 0) + 1);\n        }\n      }\n\n      // \u5358\u8a9e\u5883\u754c\u306b\u306a\u308b\u306f\u305a\u306e\u6587\u5b57(=\u7a7a\u767d\u76f8\u5f53)\u306f\u6700\u983b\u5024\u3068\u306a\u308b\u3053\u3068\u304c\u591a\u3044\n      char mappedSpace = ' ';\n      int maxCount = -1;\n      for (char c = 'a'; c <= 'z'; c++) {\n        int cnt = counts.getOrDefault(c, 0);\n        if (cnt > maxCount) {\n          maxCount = cnt;\n          mappedSpace = c;\n        }\n      }\n      // \u305f\u3060\u3057\u672c\u5f53\u306b\u7a7a\u767d\u304c\u6700\u5927\u983b\u5ea6\u3067\u306a\u3044(\u7a7a\u767d\u306f\u5225\u306e\u5c0f\u6587\u5b57\u306b\u306a\u308b)\u5834\u5408\u3092\u8003\u616e\u3057\u3066\n      int spaceCount = counts.getOrDefault(' ', 0);\n      if (maxCount > spaceCount) {\n        Map<String,String> out = new HashMap<>();\n        out.put(\"char\", String.valueOf(mappedSpace));\n        writeJson(out, outputFile);\n      } else {\n        Map<String,String> out = new HashMap<>();\n        out.put(\"char\", \" \");\n        writeJson(out, outputFile);\n      }\n    }\n  }\n\n  private static void writeJson(Object obj, String file) {\n    Gson gson = new Gson();\n    try (Writer writer = new FileWriter(file)) {\n      writer.write(gson.toJson(obj));\n    } catch (IOException e) {\n      System.exit(3);\n    }\n  }\n}"}
{"id": 609, "language": "C", "code": "#include <stdio.h>\n\nint queens[8]; // queens[col] = row or -1 if none\nint fixed[8];  // 1 if fixed column\nint k;\n\nint safe(int row, int col) {\n  for (int c = 0; c < col; c++) {\n    if (queens[c] == row) return 0;\n    if ((queens[c] - row) == (c - col)) return 0;\n    if ((row - queens[c]) == (c - col)) return 0;\n  }\n  return 1;\n}\n\nint dfs(int col) {\n  if (col == 8) return 1;\n  if (fixed[col]) return dfs(col + 1);\n  for (int r = 0; r < 8; r++) {\n    if (safe(r, col)) {\n      queens[col] = r;\n      if (dfs(col + 1)) return 1;\n      queens[col] = -1;\n    }\n  }\n  return 0;\n}\n\nint main() {\n  scanf(\"%d\", &k);\n  for (int i = 0; i < 8; i++) {\n    queens[i] = -1; fixed[i] = 0;\n  }\n  for (int i = 0; i < k; i++) {\n    int r, c;\n    scanf(\"%d%d\", &r, &c);\n    queens[c] = r;\n    fixed[c] = 1;\n  }\n  dfs(0);\n  for (int r = 0; r < 8; r++) {\n    for (int c = 0; c < 8; c++) {\n      if (queens[c] == r) printf(\"Q\");\n      else printf(\".\");\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"}
{"id": 610, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u30ed\u30fc\u30de\u6570\u5b57\u5909\u63db\u7528\u306e\u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\n    val = [\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\"),\n    ]\n\n    n = int(argv[0])\n    res = \"\"\n    for v, s in val:\n        while n >= v:\n            res += s\n            n -= v\n    print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 611, "language": "Java", "code": "package track;\n\npublic class DivisibleByThree {\n    public static void main(String[] args) {\n        for (String s : args) {\n            if (!s.matches(\"\\\\d{1,4}\")) { // A bit different regex\n                System.out.println(\"invalid\");\n                continue;\n            }\n            int n = Integer.parseInt(s);\n            if (n > 1000) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n            \n            if (n % 3 == 0) {\n                if (s.contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                } else {\n                    System.out.println(\"idiot\");\n                }\n            } else {\n                if (s.contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            }\n        }\n    }\n}"}
{"id": 612, "language": "Python3", "code": "import sys\n\ndef idiocy(n):\n    if not n.isdigit():\n        return \"invalid\"\n    num = int(n)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    by3 = num % 3 == 0\n    with3 = \"3\" in n\n    if by3 and with3:\n        return \"dumb\"\n    elif by3:\n        return \"idiot\"\n    elif with3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    for v in args:\n        print(idiocy(v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 613, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *s1[] = { \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" };\nchar *s10[] = { \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\" };\nchar *s100[] = { \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\" };\nchar *s1000[] = { \"\", \"M\", \"MM\", \"MMM\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" };\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\nint d1, d10, d100, d1000;\nint number;\nnumber = atoi(argv[1]);\nif(number > 0 && number < 4000){\nd1 = number % 10;\nnumber /= 10;\nd10 = number % 10;\nnumber /= 10;\nd100 = number % 10;\nnumber /= 10;\nd1000 = number % 10;\n\nprintf(\"%s%s%s%s\\n\", s1000[d1000], s100[d100], s10[d10], s1[d1]);\n}\nelse{\n  printf(\"\u5909\u63db\u3067\u304d\u307e\u305b\u3093\");\n}\n\n}"}
{"id": 614, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <fstream>\n#include <deque>\n#include <map>\n#include <tuple>\n\n// RPS record structure\nstruct RpsEntry {\n    int robotMove;\n    int yourMove;\n};\n\n// Function to extract an integer from a string at a given position.\n// It skips non-digit characters and parses the sequence of digits.\nint extractInteger(const std::string& s, size_t& pos) {\n    while (pos < s.length() && !isdigit(s[pos])) pos++;\n    size_t start = pos;\n    while (pos < s.length() && isdigit(s[pos])) pos++;\n    return std::stoi(s.substr(start, pos - start));\n}\n\nint main(int argc, char *argv[]) {\n    // Validate command-line arguments\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <json_file>\" << std::endl;\n        return 1;\n    }\n\n    // Read JSON file content\n    std::string filename = argv[1];\n    std::ifstream fileStream(filename);\n    if (!fileStream.is_open()) {\n        std::cerr << \"Error: Cannot open \" << filename << std::endl;\n        return 1;\n    }\n    std::string fileData((std::istreambuf_iterator<char>(fileStream)), std::istreambuf_iterator<char>());\n    fileStream.close();\n\n    // Parse game records\n    std::vector<RpsEntry> gameLog;\n    size_t currentScanPos = 0;\n    while (true) {\n        size_t robotValPos = fileData.find(\"\\\"robot\\\":\", currentScanPos);\n        if (robotValPos == std::string::npos) break;\n        currentScanPos = robotValPos;\n        int rHand = extractInteger(fileData, currentScanPos);\n\n        size_t youValPos = fileData.find(\"\\\"you\\\":\", currentScanPos);\n        currentScanPos = youValPos;\n        int yHand = extractInteger(fileData, currentScanPos);\n\n        gameLog.push_back({rHand, yHand});\n    }\n\n    // Robot state simulation\n    std::deque<int> robotPastMoves = {0, 1, 2}; // Fixed initial history (Rock, Scissors, Paper)\n    std::map<std::tuple<int, int, int, int>, int> stateRepetitionCounts; // Maps (p3, p2, p1, opp_last) -> count\n    int prevOpponentMove = 0; // Default previous opponent move (e.g., Rock)\n\n    // Process each game in the log\n    for (size_t i = 0; i < gameLog.size(); ++i) {\n        int currentR = gameLog[i].robotMove;\n        int currentY = gameLog[i].yourMove;\n\n        // Apply robot's decision rule from the 4th game (index 3) onwards\n        if (i >= 3) {\n            std::tuple<int, int, int, int> currentStateTuple = std::make_tuple(\n                robotPastMoves[0], robotPastMoves[1], robotPastMoves[2], prevOpponentMove\n            );\n            \n            // Increment the count for this state. This prepares for the *next* time this state occurs.\n            // The value N in map means the next move for this state will be N % 3.\n            stateRepetitionCounts[currentStateTuple]++;\n        }\n\n        // Update robot's history with its actual played move\n        robotPastMoves.pop_front();\n        robotPastMoves.push_back(currentR);\n        // Update opponent's last move for the next iteration\n        prevOpponentMove = currentY;\n    }\n\n    // Determine the robot's move for the *next* game\n    std::tuple<int, int, int, int> nextGameStateTuple = std::make_tuple(\n        robotPastMoves[0], robotPastMoves[1], robotPastMoves[2], prevOpponentMove\n    );\n\n    int robotsNextMove;\n    // If the next state has never been encountered, robot plays Rock (0)\n    if (stateRepetitionCounts.find(nextGameStateTuple) == stateRepetitionCounts.end()) {\n        robotsNextMove = 0;\n    } else {\n        // Otherwise, use the stored count to determine the hand in the cycle\n        robotsNextMove = stateRepetitionCounts[nextGameStateTuple] % 3;\n    }\n\n    // Calculate the winning hand against the robot's predicted move\n    // Rock (0) -> Paper (2)\n    // Scissors (1) -> Rock (0)\n    // Paper (2) -> Scissors (1)\n    int playerWinningMove = (robotsNextMove + 2) % 3;\n\n    // Output the result\n    std::cout << playerWinningMove << std::endl;\n\n    return 0;\n}"}
{"id": 615, "language": "Python3", "code": "import sys\nimport string\n\ndef apply_rot13(text_list):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\n    input_chars = string.ascii_lowercase + string.ascii_uppercase\n    output_chars = string.ascii_lowercase[13:] + string.ascii_lowercase[:13] + \\\n                   string.ascii_uppercase[13:] + string.ascii_uppercase[:13]\n    \n    translation_map = str.maketrans(input_chars, output_chars)\n\n    for text_item in text_list:\n        # translate\u30e1\u30bd\u30c3\u30c9\u3067\u4e00\u62ec\u5909\u63db\n        transformed_text = text_item.translate(translation_map)\n        print(transformed_text)\n\ndef main(argv):\n    apply_rot13(argv)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 616, "language": "Python3", "code": "import sys\n\ndef classification_helper(str_val):\n    if not str_val.isdigit():\n        return \"invalid\"\n    \n    int_val = int(str_val)\n    \n    if not (0 <= int_val <= 1000):\n        return \"invalid\"\n\n    div_by_3 = (int_val % 3 == 0)\n    has_three = ('3' in str_val)\n\n    if div_by_3 and has_three: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if has_three: return \"stupid\"\n    return \"smart\"\n\ndef program_runner(cmd_line_args):\n    for arg_str in cmd_line_args:\n        print(classification_helper(arg_str))\n\nif __name__ == '__main__':\n    program_runner(sys.argv[1:])"}
{"id": 617, "language": "Python", "code": "import sys\nimport json\n\nclass Robot:\n    def __init__(self, fpath):\n        self.data = {}\n\n        with open(fpath, 'r') as file:\n            self.json = json.load(file)\n            self.case1 = self.json[0]\n            self.case2 = self.json[1]\n            self.case3 = self.json[2]\n        for i in range(len(self.json) - 3):\n            self.result = self.json[i+3]\n            key = self._keygen()\n            self.data[key] = self.result['robot']\n            self.case1, self.case2, self.case3 = \\\n                self.case2, self.case3, self.result\n\n    def _keygen(self):\n        return str(self.case1['robot']) + str(self.case2['robot']) + \\\n                str(self.case3['robot']) + str(self.case3['you'])\n\n    def one_two_three(self):\n        key = self._keygen()\n        print(self.data[key])\n\ndef main(argv):\n    fpath = argv[1]\n    robot = Robot(fpath)\n    robot.one_two_three()\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 618, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h> // bool\u578b\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\n\n// \u30c1\u30a7\u30b9\u76e4\u306e\u72b6\u614b\u3092\u8868\u3059\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\nchar g_board[8][8];\n// \u5404\u5217\u304c\u5360\u9818\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\nbool g_col_taken[8];\n// \u4e3b\u5bfe\u89d2\u7dda (r - c) \u304c\u5360\u9818\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0 (\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u975e\u8ca0\u306b\u3059\u308b\u305f\u3081 +7)\nbool g_diag1_taken[15];\n// \u526f\u5bfe\u89d2\u7dda (r + c) \u304c\u5360\u9818\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\nbool g_diag2_taken[15];\n// \u5404\u884c\u306b\u521d\u671f\u914d\u7f6e\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u5217\u3092\u8a18\u9332\u3002\u306a\u3044\u5834\u5408\u306f -1\nint g_pre_placed_queens_col[8];\n\n// \u30c1\u30a7\u30b9\u76e4\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\nvoid print_board_state() {\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            printf(\"%c\", g_board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\n// 8\u30af\u30a4\u30fc\u30f3\u554f\u984c\u3092\u89e3\u304f\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u95a2\u6570\nbool solve_8_queens(int row_idx) {\n    // \u5168\u3066\u306e\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u305f\u5834\u5408\n    if (row_idx == 8) {\n        print_board_state();\n        return true;\n    }\n\n    // \u73fe\u5728\u306e\u884c\u306b\u521d\u671f\u914d\u7f6e\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\u304c\u3042\u308b\u5834\u5408\n    if (g_pre_placed_queens_col[row_idx] != -1) {\n        return solve_8_queens(row_idx + 1); // \u6b21\u306e\u884c\u3078\u9032\u3080\n    }\n\n    // \u73fe\u5728\u306e\u884c\u3067\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u308b\u5217\u3092\u63a2\u3059\n    for (int col_idx = 0; col_idx < 8; col_idx++) {\n        // \u73fe\u5728\u306e\u30de\u30b9\u304c\u5b89\u5168\u304b\u78ba\u8a8d (\u540c\u3058\u5217\u3001\u4e3b\u5bfe\u89d2\u7dda\u3001\u526f\u5bfe\u89d2\u7dda\u306b\u30af\u30a4\u30fc\u30f3\u304c\u3044\u306a\u3044\u304b)\n        if (!g_col_taken[col_idx] &&\n            !g_diag1_taken[row_idx - col_idx + 7] &&\n            !g_diag2_taken[row_idx + col_idx]) {\n\n            // \u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u3001\u95a2\u9023\u3059\u308b\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n            g_board[row_idx][col_idx] = 'Q';\n            g_col_taken[col_idx] = true;\n            g_diag1_taken[row_idx - col_idx + 7] = true;\n            g_diag2_taken[row_idx + col_idx] = true;\n\n            // \u6b21\u306e\u884c\u3078\u518d\u5e30\u7684\u306b\u8a66\u884c\n            if (solve_8_queens(row_idx + 1)) {\n                return true; // \u89e3\u304c\u898b\u3064\u304b\u3063\u305f\n            }\n\n            // \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af: \u30af\u30a4\u30fc\u30f3\u3092\u5916\u3057\u3001\u30d5\u30e9\u30b0\u3092\u30ea\u30bb\u30c3\u30c8\n            g_board[row_idx][col_idx] = '.';\n            g_col_taken[col_idx] = false;\n            g_diag1_taken[row_idx - col_idx + 7] = false;\n            g_diag2_taken[row_idx + col_idx] = false;\n        }\n    }\n    return false; // \u3053\u306e\u884c\u3067\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u308b\u5834\u6240\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\n}\n\nint main(int argc, char *argv[]) {\n    // \u30c1\u30a7\u30b9\u76e4\u3068\u30af\u30a4\u30fc\u30f3\u914d\u7f6e\u8ffd\u8de1\u914d\u5217\u306e\u521d\u671f\u5316\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            g_board[i][j] = '.';\n        }\n        g_pre_placed_queens_col[i] = -1; // \u521d\u671f\u914d\u7f6e\u30af\u30a4\u30fc\u30f3\u306a\u3057\n        g_col_taken[i] = false;\n    }\n    for (int i = 0; i < 15; i++) {\n        g_diag1_taken[i] = false;\n        g_diag2_taken[i] = false;\n    }\n\n    // \u521d\u671f\u914d\u7f6e\u30af\u30a4\u30fc\u30f3\u306e\u6570\u3092\u8aad\u307f\u8fbc\u3080\n    int num_pre_placed;\n    scanf(\"%d\", &num_pre_placed);\n\n    // \u521d\u671f\u914d\u7f6e\u30af\u30a4\u30fc\u30f3\u306e\u4f4d\u7f6e\u3092\u8aad\u307f\u8fbc\u307f\u3001\u30dc\u30fc\u30c9\u3068\u30d5\u30e9\u30b0\u3092\u8a2d\u5b9a\n    for (int i = 0; i < num_pre_placed; i++) {\n        int row, col;\n        scanf(\"%d %d\", &row, &col);\n        g_board[row][col] = 'Q';\n        g_col_taken[col] = true;\n        g_diag1_taken[row - col + 7] = true;\n        g_diag2_taken[row + col] = true;\n        g_pre_placed_queens_col[row] = col;\n    }\n\n    // 0\u884c\u76ee\u304b\u3089\u89e3\u304d\u59cb\u3081\u308b\n    solve_8_queens(0);\n\n    return 0;\n}"}
{"id": 619, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char* get_output_for(const char *input_str) {\n    char* end;\n    long num = strtol(input_str, &end, 10);\n    if (*end != '\\0' || input_str == end || num < 0 || num > 1000) return \"invalid\";\n\n    int div3 = num % 3 == 0;\n    char buf[5];\n    sprintf(buf, \"%ld\", num);\n    int has3 = strchr(buf, '3') != NULL;\n\n    if (div3 && has3) return \"dumb\";\n    if (div3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n}\n\nint main(int argc, char *argv[]) {\n    if (argc <= 1) return 0;\n    const char* results[argc - 1]; // VLA\n\n    for (int i = 1; i < argc; i++) {\n        results[i - 1] = get_output_for(argv[i]);\n    }\n\n    for (int i = 0; i < argc - 1; i++) {\n        puts(results[i]);\n    }\n    return 0;\n}"}
{"id": 620, "language": "Java", "code": "package chess;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class QueensPuzzle {\n    private static final int SIZE = 8;\n    private static char[][] board = new char[SIZE][SIZE];\n    private static boolean[] col = new boolean[SIZE];\n    private static boolean[] diag1 = new boolean[2 * SIZE];\n    private static boolean[] diag2 = new boolean[2 * SIZE];\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Initialize chessboard\n        for (char[] row : board) {\n            Arrays.fill(row, '.');\n        }\n\n        int k = sc.nextInt();\n\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            board[r][c] = 'Q';\n            col[c] = true;\n            diag1[r - c + SIZE] = true;\n            diag2[r + c] = true;\n        }\n\n        placeQueen(0);\n        printBoard();\n    }\n\n    private static boolean placeQueen(int rowIdx) {\n        if (rowIdx == SIZE) {\n            return true;\n        }\n\n        for (int colIdx = 0; colIdx < SIZE; colIdx++) {\n            if (!col[colIdx] && !diag1[rowIdx - colIdx + SIZE] && !diag2[rowIdx + colIdx]) {\n                board[rowIdx][colIdx] = 'Q';\n                col[colIdx] = true;\n                diag1[rowIdx - colIdx + SIZE] = true;\n                diag2[rowIdx + colIdx] = true;\n\n                if (placeQueen(rowIdx + 1)) {\n                    return true;\n                }\n\n                // Backtracking\n                board[rowIdx][colIdx] = '.';\n                col[colIdx] = false;\n                diag1[rowIdx - colIdx + SIZE] = false;\n                diag2[rowIdx + colIdx] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void printBoard() {\n        for (char[] row : board) {\n            System.out.println(new String(row));\n        }\n    }\n}"}
{"id": 621, "language": "Python3", "code": "import sys\nimport json\n\ndef get_next_hand(records):\n    rules = {}\n    initial_sequence = [0, 1, 2]\n    \n    for i in range(len(records) - 3):\n        pattern = (\n            records[i][\"robot\"],\n            records[i + 1][\"robot\"],\n            records[i + 2][\"robot\"],\n            records[i + 3][\"you\"],\n        )\n        next_hand = records[i + 3][\"robot\"]\n        if pattern not in rules:\n            rules[pattern] = [next_hand]\n        else:\n            rules[pattern].append(next_hand)\n    \n    last_pattern = (\n        records[-3][\"robot\"],\n        records[-2][\"robot\"],\n        records[-1][\"robot\"],\n        records[-1][\"you\"],\n    )\n    \n    if last_pattern in rules:\n        move_list = rules[last_pattern]\n        return move_list[len(move_list) % 3]\n    return initial_sequence[len(records) % 3]\n\ndef main(args):\n    with open(args[0], 'r') as f:\n        records = json.load(f)\n    print(get_next_hand(records))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 622, "language": "PHP", "code": "<?php\nfunction main($argc, $argv) {\n    for ($i = 1; $i < $argc; $i++) {\n        $val = $argv[$i];\n        if (!ctype_digit($val)) {\n            echo \"invalid\\n\";\n            continue;\n        }\n        $num = (int)$val;\n        if ($num < 0 || $num > 1000) {\n            echo \"invalid\\n\";\n            continue;\n        }\n        $divisible3 = ($num % 3 === 0);\n        $contains3 = strpos($val, '3') !== false;\n        if ($divisible3 && $contains3) {\n            echo \"dumb\\n\";\n        } elseif ($divisible3) {\n            echo \"idiot\\n\";\n        } elseif ($contains3) {\n            echo \"stupid\\n\";\n        } else {\n            echo \"smart\\n\";\n        }\n    }\n}\n\nmain($argc, $argv);"}
{"id": 623, "language": "C", "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint contains_three(int num){\n  while(num){\n    int temp = num % 10;\n    if(temp == 3){\n      return 1;\n    }\n    num = num /10;\n  }\n  return 0;\n  \n}\nint three_fact(int num){\n  if(num % 3 == 0)\n    return 1;\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int temp;\n    temp = atoi(argv[i]);\n    //atoi returns 0 if a character or halfwidth interger is given\n    if(0 < temp && temp <= 1000){\n      if(contains_three(temp) && three_fact(temp)){\n        printf(\"dumb\\n\");\n      }\n      else if(contains_three(temp)){\n        printf(\"stupid\\n\");\n      }\n      else if(three_fact(temp)){\n        printf(\"idiot\\n\");\n      }\n      else\n        printf(\"smart\\n\");\n    }\n    else{\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 624, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cctype>\n\nusing namespace std;\n\nbool parse_input(const string& str, int& num_val) {\n    if (str.empty()) {\n        return false;\n    }\n    for (char c : str) {\n        if (!isdigit(c)) {\n            return false;\n        }\n    }\n    \n    if (str.length() > 4 || (str.length() == 4 && str > \"1000\")) {\n        return false;\n    }\n\n    num_val = stoi(str);\n    return true;\n}\n\nbool contains_three(int n) {\n    // Check if the number contains the digit 3\n    return to_string(n).find('3') != string::npos;\n}\n\nvoid solve_one(const string& arg) {\n    int number;\n    if (!parse_input(arg, number)) {\n        cout << \"invalid\\n\";\n        return;\n    }\n\n    bool divisible_by_3 = (number % 3 == 0);\n    bool has_3 = contains_three(number);\n\n    if (divisible_by_3 && has_3) {\n        cout << \"dumb\\n\";\n    } else if (divisible_by_3) {\n        cout << \"idiot\\n\";\n    } else if (has_3) {\n        cout << \"stupid\\n\";\n    } else {\n        cout << \"smart\\n\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    solve_one(argv[i]);\n  }\n  return 0;\n}"}
{"id": 625, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nbool isNumber(string s)\n{\n    for (int i = 0; i < s.length(); i++)\n        if (isdigit(s[i]) == false)\n            return false;\n \n    return true;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i <argc; i++) {\n   string s=argv[i];\n   int ar[5]={0};\n   int d;\n   if(isNumber(s)){\n     d=stoi(s);\n   }\n   else{\n      ar[4]++;\n      cout<<\"invalid\"<<endl;\n      continue;\n    }\n  if(d%3==0){\n    ar[0]++;\n  }\n  int y=d;\n    while(y > 0){\n        int u=y%10;\n        if(u==3){\n          ar[1]++;\n          break;\n        }\n        y=y/10;\n    }\n  if(ar[0]==1 && ar[1]==1){\n    ar[2]++;\n    ar[0]--;\n    ar[1]--;\n  } \n  if(ar[0]==0 && ar[1]==0 && ar[2]==0){\n      ar[3]++;\n    }\n  if(ar[0]==1) cout<<\"idiot\"<<endl;\n  else if(ar[1]==1) cout<<\"stupid\"<<endl;\n  else if(ar[2]==1) cout<<\"dumb\"<<endl;\n  else if(ar[3]==1) cout<<\"smart\"<<endl;\n\n  }\n  return 0;\n}\n"}
{"id": 626, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        \n        try : \n          vi=int(v)\n          if 0<=vi and vi<=1000 :\n            if vi%3==0 and '3' in v:\n              print(\"dumb\")\n            elif vi%3==0 :\n              print(\"idiot\")\n            elif '3' in v:\n              print(\"stupid\")\n            else :\n              print(\"smart\")\n          else :\n            print(\"invalid\")\n        except ValueError :\n          print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n"}
{"id": 627, "language": "Python", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  pool={} \n  for hand,i  in enumerate(b+[{}]):\n    if hand<3:continue\n    rhand=(b[hand-3]['robot'],b[hand-2]['robot'],b[hand-1]['robot'],b[hand-1]['you'])\n    lasthand=i.get('robot',-1)\n    if lasthand==-1:break\n    if rhand in pool:\n      if pool[rhand]!=(lasthand-1)%3:\n        print(hand,m,lasthand,pool[rhand])\n    pool[rhand]=lasthand       \n  print((pool[rhand])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 628, "language": "Java", "code": "package track;\n\npublic class CommandLineApplication {\n    public static void main(String[] args) {\n        // Evaluate command-line arguments\n\n        for (String arg : args) {\n            if (isNumeric(arg)) {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    classifyNumber(num);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isNumeric(String str) {\n        return str.matches(\"\\\\d+\");\n    }\n\n    private static void classifyNumber(int number) {\n        boolean isDivBy3 = (number % 3 == 0);\n        boolean contains3 = String.valueOf(number).contains(\"3\");\n\n        if (isDivBy3 && contains3) {\n            System.out.println(\"dumb\");\n        } else if (isDivBy3) {\n            System.out.println(\"idiot\");\n        } else if (contains3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 629, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\nint check_number(int,int);\nint find_three(int,int);\nint main(int argc , char *argv[]){\n  int i,number,flag,length;\n  for (int i = 1; i < argc; i++) {\n    if(sscanf(argv[i],\"%i\",&number)!=1)\n      printf(\"invalid\\n\");\n    else{\n      length=strlen(argv[i]);\n      number=atoi(argv[i]);\n      if(number>=0 && number<=1000){\n        flag=check_number(number,length);\n        switch(flag){\n          case 1:\n            printf(\"idiot\\n\");\n            break;\n          case 2:\n            printf(\"stupid\\n\");\n            break;\n          case 3:\n            printf(\"dumb\\n\");\n            break;\n          case 4:\n            printf(\"smart\\n\");\n            break;\n          default:\n            printf(\"invalid\\n\");\n            break;\n        }\n      }\n      else\n        printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n\nint check_number(int num, int len){\n  int present;\n  present = find_three(num,len);\n  if(num % 3 == 0){\n    if(present == 1)\n      return 3;\n    else\n      return 1;\n  }\n  else{\n    if(present == 1)\n      return 2;\n    else\n      return 4;\n  }\n}\n\nint find_three(int num, int len){\n  int i,temp;\n  for(i=0;i<len;i++){\n    temp=num%10;\n    if(temp==3)\n      return 1;\n    num = num/10;\n  }\n  return 0;\n}\n"}
{"id": 630, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  int n = 0;\n\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n\n  n=atoi(argv[1]);\n\n  //10\u306e\u4f4d\u305a\u3064\u5206\u3051\u308b\n  //\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u306e\u7bc4\u56f2\u306f\u30011\u304b\u30893999\n  if(n>=1 && n<4000){\n    while(n>=1000){\n      printf(\"M\");\n      n=n-1000;\n    }\n    while(n>=900)\n    {\n      printf(\"CM\");\n      n=n-900;\n    }\n    while(n>=500){\n      printf(\"D\");\n      n=n-500;\n    }\n    while(n>=400){\n      printf(\"CD\");\n      n=n-400;\n    }\n    while(n>=100){\n      printf(\"C\");\n      n=n-100;\n    }\n    while(n>=90){\n      printf(\"XC\");\n      n=n-90;\n    }\n    while(n>=50){\n      printf(\"L\");\n      n=n-50;\n    }\n    while(n>=40){\n      printf(\"XL\");\n      n=n-40;\n    }\n    while(n>=10){\n      printf(\"X\");\n      n=n-10;\n    }\n    while (n>=9){\n      printf(\"IX\");\n      n=n-9;\n    }\n    while (n>=5)\n    {\n      printf(\"V\");\n      n=n-5;\n    }\n    while (n>=4){\n      printf(\"IV\");\n      n=n-4;\n    }\n    while(n>=1){\n      printf(\"I\");\n      n--;\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n"}
{"id": 631, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = (args.length); i < l; i++) {\n      String s=args[i];\n      int id=0,st=0;\n      int temp;\n      try{\n        int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n        id=1;\n        while(temp>0){\n          if(temp%10==3){\n            st=1;\n            break;\n          }\n          temp=temp/10;\n        }\n        if(id==1 && st==1)\n        System.out.println(\"dumb\");\n        else if(id==1)\n        System.out.println(\"idiot\");\n        else if(st==1)\n        System.out.println(\"stupid\");\n        else\n        System.out.println(\"smart\");\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t\n\n\t\t}\n\t}\n}\n"}
{"id": 632, "language": "Python3", "code": "import sys\n\ndef process_number(num_str):\n    if not num_str.isdecimal():\n        return \"invalid\"\n    \n    number = int(num_str)\n    \n    if number < 0 or number > 1000:\n        return \"invalid\"\n    if number % 3 == 0 and '3' in num_str:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in num_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # This code implements the 3 Idiots classification algorithm.\n    results = [process_number(arg) for arg in argv]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 633, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint has_digit_three(const char *s) {\n  while (*s) {\n    if (*s == '3') return 1;\n    s++;\n  }\n  return 0;\n}\n\nint is_valid_num(const char *s) {\n  if (!*s) return 0;\n  for (int i = 0; s[i]; i++) {\n    if (!isdigit((unsigned char)s[i])) return 0;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    if (!is_valid_num(argv[i])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int val = atoi(argv[i]);\n    if (val < 0 || val > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int divisible = (val % 3 == 0);\n    int contains = has_digit_three(argv[i]);\n    if (divisible && contains) printf(\"dumb\\n\");\n    else if (divisible) printf(\"idiot\\n\");\n    else if (contains) printf(\"stupid\\n\");\n    else printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 634, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int a[10000],i,flag=0,size=0,digit=0;\n  for(i=1;i<argc;i++) {\n    a[i] = atoi(argv[i]);\n    size = i;\n  }\nfor(i=1;i<=size;i++)\n{\n  if(isdigit(a[i])== 0 && a[i]>0)\n  {\n    digit=a[i];\n    if(digit%3==0)\n    {\n      while(digit>0)\n      {\n        if(digit%10==3)\n        {\n          printf(\"dumb\\n\");\n          flag=1;\n          break;\n        }\n        digit=digit/10;\n      }\n      if(flag==0)\n      {\n        printf(\"idiot\\n\");\n      }\n      else\n      {\n        flag=0;\n      }\n    }\n    else\n    {\n      while(a[i]>0)\n      {\n      if(a[i]%10==3)\n      {\n        printf(\"stupid\\n\");\n        flag=1;\n        break;\n      }\n      a[i]=a[i]/10;\n    }\n    if(flag==0)\n    {\n      printf(\"smart\\n\");\n    }\n    else\n    {\n      flag=0;\n    }\n\n  }\n}\nelse\n{\n  printf(\"invalid\\n\");\n}\n}\n    return 0;\n}\n"}
{"id": 635, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nvoid output(int n, char a, char b, char c){\n  if(n<=8 && n>=5){\n    printf(\"%c\", b);\n    n=n-5;\n  }\n  switch (n){\n    case 3:\n      printf(\"%c\", a);\n    case 2:\n      printf(\"%c\", a);\n    case 1:\n      printf(\"%c\", a);\n      break;\n    case 4:\n      printf(\"%c%c\", a, b);\n      break;\n    case 9:\n      printf(\"%c%c\", a, c);\n      break;\n    default:\n      break;\n  }\n}\n\nint main(int argc, char *argv[]){\n  int i, n, length;\n  length=strlen(argv[1]);\n  for(i=length; i>0; i--){\n    n=argv[1][length-i];\n    switch (i) {\n      case 4:\n        output(n-'0', 'M', 'N', 'N');\n        break;\n      case 3:\n        output(n-'0', 'C', 'D', 'M');\n        break;\n      case 2:\n        output(n-'0', 'X', 'L', 'C');\n        break;\n      case 1:\n        output(n-'0', 'I', 'V', 'X');\n        break;\n      default:\n        break;\n    }\n  }\n  return 0;\n}\n"}
{"id": 636, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        string input = argv[i];\n        bool isNum = true;\n        for (char c : input) {\n            if (c < '0' || c > '9') {\n                isNum = false;\n                break;\n            }\n        }\n        if (!isNum) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int val = stoi(input);\n        if (val < 0 || val > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div3 = (val % 3 == 0);\n        bool found3 = (input.find('3') != string::npos);\n        if (div3 && found3) cout << \"dumb\" << endl;\n        else if (div3) cout << \"idiot\" << endl;\n        else if (found3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 637, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    string d=argv[i];\n    int tick=0;\n    if(!isdigit(d[0])){\n      cout<<\"invalid\"<<endl;\n      \n    }\n    else{\n    int n=stoi(d);\n    if(n>=0 && n<=1000)\n    {\n      if(n%3==0 && count(d.begin(),d.end(),'3')){\n        cout<<\"dumb\"<<endl;\n      }\n      else if(n%3==0){\n        cout<<\"idiot\"<<endl;\n      }\n      else if(count(d.begin(),d.end(),'3')){\n        cout<<\"stupid\"<<endl;\n      }\n      else{\n        cout<<\"smart\"<<endl;\n      }\n    }\n    else{\n      cout<<\"invalid\"<<endl;\n    }\n  }\n  }\n  return 0;\n}"}
{"id": 638, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for k, i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 639, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static char[][] grid = new char[8][8];\n    static boolean[] cUsed = new boolean[8], dUsed1 = new boolean[15], dUsed2 = new boolean[15];\n    static boolean[] preQ = new boolean[8];\n\n    static boolean putQueen(int r) {\n        if (r == 8) return true;\n        if (preQ[r]) return putQueen(r + 1);\n\n        for (int c = 0; c < 8; c++) {\n            if (!cUsed[c] && !dUsed1[r + c] && !dUsed2[r - c + 7]) {\n                grid[r][c] = 'Q';\n                cUsed[c] = dUsed1[r + c] = dUsed2[r - c + 7] = true;\n                if (putQueen(r + 1)) return true;\n                grid[r][c] = '.';\n                cUsed[c] = dUsed1[r + c] = dUsed2[r - c + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        for (char[] a : grid) Arrays.fill(a, '.');\n        int k = scan.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scan.nextInt(), c = scan.nextInt();\n            grid[r][c] = 'Q';\n            cUsed[c] = dUsed1[r + c] = dUsed2[r - c + 7] = true;\n            preQ[r] = true;\n        }\n        putQueen(0);\n\n        for (int i = 0; i < 8; i++)\n            System.out.println(new String(grid[i]));\n    }\n}"}
{"id": 640, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    path = argv[0]\n    data = json.load(open(path))\n\n    # initial 3 robot hands: 0(rock),1(scissors),2(paper)\n    # robot decides next hand from last 3 robot hands and last opponent hand\n    # same params cycles through rock->scissors->paper->rock...\n\n    history = data\n    if len(history) < 3:\n        # still in initial phase, just output next from initial 3 hands cycle\n        print(len(history) % 3)\n        return\n\n    # collect all robot hands for history\n    robot_hands = [h[\"robot\"] for h in history]\n    you_hands = [h[\"you\"] for h in history]\n\n    # dict: key (tuple of last3 robot hands + last opponent hand) -> list of hands robot played in that state (to track cycles)\n    state_map = {}\n\n    for i in range(len(history) - 3):\n        key = tuple(robot_hands[i:i+3]) + (you_hands[i+3],)\n        val = robot_hands[i+3]\n        if key not in state_map:\n            state_map[key] = []\n        state_map[key].append(val)\n\n    # The last 3 robot hands and last opponent hand\n    last_three = robot_hands[-3:]\n    last_opponent = you_hands[-1]\n    key = tuple(last_three) + (last_opponent,)\n\n    # determine what to output next based on past cycles for this key\n    past_plays = state_map.get(key, [])\n    # Find next in cycle\n    if not past_plays:\n        # means no record, start cycle from 0 rock\n        next_hand = 0\n    else:\n        # cycle rock(0)->scissors(1)->paper(2) repeatedly\n        last_play = past_plays[-1]\n        next_hand = (last_play + 1) % 3\n\n    print(next_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 641, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n\n  private static final int N_QUEENS = 8;\n  private static char[][] chessBoard;\n  private static boolean[] colOccupied;\n  private static boolean[] diag1Occupied; // r + c\n  private static boolean[] diag2Occupied; // r - c + (N_QUEENS - 1)\n\n  // Recursively finds a solution for the N-Queens problem\n  private static boolean findSolution(int row) {\n    if (row == N_QUEENS) {\n      return true; // All queens placed successfully\n    }\n\n    // Check if this row already has a pre-placed queen\n    boolean isRowFixed = false;\n    int fixedCol = -1;\n    for (int c = 0; c < N_QUEENS; c++) {\n      if (chessBoard[row][c] == 'Q') {\n        isRowFixed = true;\n        fixedCol = c;\n        break;\n      }\n    }\n\n    if (isRowFixed) {\n      // If a queen is already in this row, just move to the next row\n      // We assume pre-placed queens are valid based on problem constraints.\n      return findSolution(row + 1);\n    } else {\n      // Try placing a queen in each column of the current row\n      for (int col = 0; col < N_QUEENS; col++) {\n        if (!colOccupied[col] && !diag1Occupied[row + col] && !diag2Occupied[row - col + (N_QUEENS - 1)]) {\n          // Place queen\n          chessBoard[row][col] = 'Q';\n          colOccupied[col] = true;\n          diag1Occupied[row + col] = true;\n          diag2Occupied[row - col + (N_QUEENS - 1)] = true;\n\n          // Recur for the next row\n          if (findSolution(row + 1)) {\n            return true;\n          }\n\n          // Backtrack: Remove queen if placing it here did not lead to a solution\n          chessBoard[row][col] = '.';\n          colOccupied[col] = false;\n          diag1Occupied[row + col] = false;\n          diag2Occupied[row - col + (N_QUEENS - 1)] = false;\n        }\n      }\n    }\n    return false; // No solution found for this row\n  }\n\n  public static void main(String[] args) {\n    Scanner inputReader = new Scanner(System.in);\n    int initialQueensCount = inputReader.nextInt();\n\n    chessBoard = new char[N_QUEENS][N_QUEENS];\n    for (int i = 0; i < N_QUEENS; i++) {\n      for (int j = 0; j < N_QUEENS; j++) {\n        chessBoard[i][j] = '.'; // Initialize empty board\n      }\n    }\n\n    colOccupied = new boolean[N_QUEENS];\n    diag1Occupied = new boolean[2 * N_QUEENS - 1]; // Max sum is 7+7=14\n    diag2Occupied = new boolean[2 * N_QUEENS - 1]; // Max diff is 7-0=7, min is 0-7=-7. Shift by 7 for array index.\n\n    // Place pre-defined queens and mark occupied\n    for (int i = 0; i < initialQueensCount; i++) {\n      int r = inputReader.nextInt();\n      int c = inputReader.nextInt();\n      chessBoard[r][c] = 'Q';\n      colOccupied[c] = true;\n      diag1Occupied[r + c] = true;\n      diag2Occupied[r - c + (N_QUEENS - 1)] = true;\n    }\n    inputReader.close();\n\n    // Start solving from the first row\n    findSolution(0);\n\n    // Print the resulting board\n    for (int i = 0; i < N_QUEENS; i++) {\n      System.out.println(new String(chessBoard[i]));\n    }\n  }\n}"}
{"id": 642, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint contains_digit_three(char *numstr) {\n  for (int i = 0; numstr[i] != '\\0'; i++) {\n    if (numstr[i] == '3') {\n      return 1;\n    }\n  }\n  return 0;\n}\n\nint is_all_digits(char *str) {\n  int i = 0;\n  if (str[0] == '-') return 0;\n  while (str[i] != '\\0') {\n    if (str[i] < '0' || str[i] > '9') return 0;\n    i++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int idx = 1; idx < argc; idx++) {\n    char *input = argv[idx];\n    if (!is_all_digits(input)) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    long val = strtol(input, NULL, 10);\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = (val % 3) == 0;\n    int has3 = contains_digit_three(input);\n\n    if (div3 && has3) {\n      puts(\"dumb\");\n    } else if (div3) {\n      puts(\"idiot\");\n    } else if (has3) {\n      puts(\"stupid\");\n    } else {\n      puts(\"smart\");\n    }\n  }\n  return 0;\n}"}
{"id": 643, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean checkNum(String s)\n  {\n    for(char c : s.toCharArray())\n    {\n      if(!Character.isDigit(c))\n        return false;\n    }\n    return true;\n  }\n\tpublic static void main(String[] args) {\n    int count;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tcount = 0;\n      String s = args[i];\n      boolean flag = checkNum(s);\n      if(flag == false)\n      {\n        System.out.println(\"invalid\");\n      }\n      else\n      {\n        for(char c : s.toCharArray())\n        {\n          if(c == '3')\n            count++;\n        }\n        int num = Integer.parseInt(s);\n        if(num>=0 && num<=1000){ \n        if(num % 3 == 0 && count > 0)\n          System.out.println(\"dumb\");\n          else if (num % 3 == 0 && num != 0)\n            System.out.println(\"idiot\");\n            else if(count > 0)\n              System.out.println(\"stupid\");\n                else\n                  System.out.println(\"smart\");\n        }\n        else\n          System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 644, "language": "C++", "code": "#include<bits/stdc++.h>\n#include<fstream>\nusing namespace std;\nbool notnum(string s)\n{\n    for(int i=0;i<s.length();i++)\n        if(s[i]<'0' || s[i]>'9')\n            return true;\n    return false;\n}\nbool isthree(string b)\n{\n    for(int i=0;i<b.length();i++)\n        if(b[i]=='3')\n            return true;\n    return false;\n}\nint main(int argc,char *argv[])\n{\n    for(int i=1;i<argc;i++)\n    {\n        string b=argv[i];\n        if(notnum(b))\n        {\n            cout<<\"invalid\";\n        }\n        else\n        {\n            int sum=0;\n            for(int i=0;i<b.length();i++)\n                sum+=b[i]-'0';\n            if(sum%3==0 and isthree(b))\n                cout<<\"dumb\";\n            else if(sum%3==0)\n                cout<<\"idiot\";\n            else if(isthree(b))\n                cout<<\"stupid\";\n            else\n                cout<<\"smart\";\n        }\n        cout<<endl;\n    }\n}\n"}
{"id": 645, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    $have3 = false;\n    $isdivided = false;\n    if(is_numeric($value)){\n      if($value % 3 == 0){\n        $isdivided = true;\n      }\n      if (strpos($value, '3') !== false) {\n        $have3 = true;\n      }\n      if( $value >= 0 && $value <= 1000){\n        if($have3 == true && $isdivided == true){\n          printf(\"%s\\n\", 'dumb');        \n        }elseif($have3 == true){\n          printf(\"%s\\n\", 'stupid');        \n        }elseif($isdivided == true){\n          printf(\"%s\\n\", 'idiot');        \n        }else{\n          printf(\"%s\\n\", 'smart');        \n        }\n      }else{\n        printf(\"%s\\n\", 'invalid');\n      }\n    }else{\n      printf(\"%s\\n\", 'invalid');\n    }\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 646, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'):\n    print(\"stupid\\ninvalid\")\n  else:\n    dd=[]\n    for d in argv:\n      dd.append(d)\n    for d in dd:\n      if(d.isnumeric()):\n        if('3' in d):\n          if(int(d)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(d)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")        \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 647, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ApplicationProcessor {\n\n  private static String processValue(int n) {\n    if (n < 0 || n > 1000) return \"invalid\";\n    boolean mod3 = (n % 3 == 0);\n    boolean has3 = String.valueOf(n).contains(\"3\");\n    if (mod3 && has3) return \"dumb\";\n    if (mod3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(processValue(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 648, "language": "Go", "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// Global variables for the board state and attack tracking\nvar (\n\tchessBoard [8][8]byte     // The 8x8 chessboard\n\tcolumnOccupied [8]bool    // Tracks if a column is occupied\n\tdiagOneOccupied [15]bool  // Tracks if a diagonal (r+c) is occupied\n\tdiagTwoOccupied [15]bool  // Tracks if a diagonal (r-c+7) is occupied\n\tfixedQueens map[int]int // Stores rows with pre-placed queens (row -> column)\n)\n\n// findSolution recursively attempts to place queens starting from the given row.\nfunc findSolution(currentRow int) bool {\n\t// Base case: If all 8 queens are successfully placed (or we've processed all rows)\n\tif currentRow == 8 {\n\t\t// Solution found, print the board\n\t\tfor i := 0; i < 8; i++ {\n\t\t\tfmt.Println(string(chessBoard[i][:]))\n\t\t}\n\t\treturn true // Indicate success\n\t}\n\n\t// If a queen is already fixed in this row from the input\n\tif col, isFixed := fixedQueens[currentRow]; isFixed {\n\t\t// Skip placing a queen in this row, directly move to the next row\n\t\treturn findSolution(currentRow + 1)\n\t}\n\n\t// Try placing a queen in each column of the current row\n\tfor currentColumn := 0; currentColumn < 8; currentColumn++ {\n\t\t// Check if the current position (currentRow, currentColumn) is safe\n\t\tif !columnOccupied[currentColumn] && !diagOneOccupied[currentRow+currentColumn] && !diagTwoOccupied[currentRow-currentColumn+7] {\n\t\t\t// Place the queen\n\t\t\tchessBoard[currentRow][currentColumn] = 'Q'\n\t\t\tcolumnOccupied[currentColumn] = true\n\t\t\tdiagOneOccupied[currentRow+currentColumn] = true\n\t\t\tdiagTwoOccupied[currentRow-currentColumn+7] = true\n\n\t\t\t// Recurse to place the next queen\n\t\t\tif findSolution(currentRow + 1) {\n\t\t\t\treturn true // If a solution is found down this path, propagate success\n\t\t\t}\n\n\t\t\t// Backtrack: Remove the queen and reset flags\n\t\t\tchessBoard[currentRow][currentColumn] = '.'\n\t\t\tcolumnOccupied[currentColumn] = false\n\t\t\tdiagOneOccupied[currentRow+currentColumn] = false\n\t\t\tdiagTwoOccupied[currentRow-currentColumn+7] = false\n\t\t}\n\t}\n\n\treturn false // No solution found from this path\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// Initialize the chessboard with empty squares ('.')\n\tfor r := 0; r < 8; r++ {\n\t\tfor c := 0; c < 8; c++ {\n\t\t\tchessBoard[r][c] = '.'\n\t\t}\n\t}\n\n\t// Read the number of pre-placed queens (k)\n\tscanner.Scan()\n\tk, _ := strconv.Atoi(scanner.Text())\n\n\tfixedQueens = make(map[int]int)\n\n\t// Read the positions of the k pre-placed queens\n\tfor i := 0; i < k; i++ {\n\t\tscanner.Scan()\n\t\tlineFields := strings.Fields(scanner.Text())\n\t\trow, _ := strconv.Atoi(lineFields[0])\n\t\tcol, _ := strconv.Atoi(lineFields[1])\n\n\t\t// Place the queen on the board\n\t\tchessBoard[row][col] = 'Q'\n\n\t\t// Mark the corresponding column and diagonals as occupied\n\t\tcolumnOccupied[col] = true\n\t\tdiagOneOccupied[row+col] = true\n\t\tdiagTwoOccupied[row-col+7] = true\n\n\t\t// Store the position of the fixed queen\n\t\tfixedQueens[row] = col\n\t}\n\n\t// Start the backtracking search from the first row (row 0)\n\tfindSolution(0)\n}"}
{"id": 649, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n\n    const commandName = argv[0];\n    const inputFileName = argv[1];\n    const outputFileName = argv[2];\n    switch (commandName) {\n        case 'count' : {\n            readFile(inputFileName).then(encryptedString => {\n                const result = countAlphabetAndSpaceChar(encryptedString);\n                return writeFile(outputFileName, JSON.stringify(result));\n            });\n            break;\n        }\n        case 'space' : {\n            readFile(inputFileName).then(encryptedString => {\n                const result = space(encryptedString);\n                return writeFile(outputFileName, JSON.stringify({\n                    'char': result\n                }))\n            });\n            break;\n        }\n\n        case 'decrypt': {\n            readFile(inputFileName).then(encryptedString => {\n                const result = decrypt(encryptedString);\n                return writeFile(outputFileName, result)\n            });\n            break;\n        }\n    }\n}\n\nfunction decryptRot(string, numShift) {\n    console.log('string = ', string);\n    console.log('numShift = ', numShift);\n\n    return string.split(\"\").map(char => {\n        if ((char >= \"A\" && char <= \"Z\") || (char >= \"a\" && char <= \"z\")) {\n            const upperChar = char.toUpperCase();\n            const indexUpperChar = upperChar.charCodeAt(0) - 65;\n            let newIndexChar = indexUpperChar + numShift;\n            if (newIndexChar > 25) {\n                newIndexChar = newIndexChar - 26;\n            }\n            if (newIndexChar < 0) {\n                newIndexChar = 26 + newIndexChar;\n            }\n            console.log('char =', char);\n            console.log('new Index char = ', newIndexChar);\n\n            if (char >= \"A\" && char <= \"Z\") {\n                return String.fromCharCode(\"A\".charCodeAt(0) + newIndexChar)\n            }\n            else {\n                return String.fromCharCode(97 + newIndexChar)\n            }\n        } else {\n            return char;\n        }\n    }).reduce((string, char) => string + char, \"\")\n\n}\n\nfunction getMostFrequentChar(string) {\n    const newString = string.split('').filter(char => (char>='A' && char<='Z') || (char>='a' && char <='z'))\n        .map(char => char.toLowerCase()).reduce((string, currentChar) => string + currentChar, \"\");\n    const countedObject = countAlphabetAndSpaceChar(newString);\n    let max = 0;\n    let maxChar = '?';\n    for (let char in countedObject) {\n        if (max < countedObject[char]) {\n            max = countedObject[char];\n            maxChar = char;\n        }\n    }\n\n    return maxChar;\n\n}\n\nfunction decryptSpace(string, charSub) {\n    const arr = string.split('').map(char => {\n        if (char === \" \") return charSub\n        else if (char === charSub) return \" \"\n        else return char;\n    });\n    return arr.reduce((string, currentChar) => string + currentChar, \"\")\n\n}\n\nfunction countAlphabetAndSpaceChar(string) {\n    const charArray = string.split('');\n    const initObject = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \".split(\"\").reduce(\n        (currentObject, currentChar) => {\n            currentObject[currentChar] = 0;\n            return currentObject;\n        }, {}\n    );\n    return charArray.filter(char => (char >= 'A' && char <= 'Z') || (char >= 'a' && char <= 'z') || char === ' ')\n        .reduce((currentObject, currentChar) => {\n                currentObject[currentChar] = currentObject[currentChar] + 1;\n                return currentObject;\n            }, initObject\n        );\n}\n\nfunction space(string) {\n    const countedCharObject = countAlphabetAndSpaceChar(string);\n    const arrayChar = [];\n    const countedArrayChar = [];\n    for (let property in countedCharObject) {\n        if (countedCharObject[property] > 0 && property >= 'a' && property <= 'z') {\n            arrayChar.push(property);\n            countedArrayChar.push(countedCharObject[property]);\n        }\n    }\n    const spaceEstimated = string.length / 4.5 - 1;\n\n    const absArr = countedArrayChar.map(num => Math.abs(num - spaceEstimated));\n    const minIndex = absArr.reduce((currentMinIndex, currentValue, currentIndex) => {\n        if (currentValue < absArr[currentMinIndex]) {\n            return currentIndex\n        } else {\n            return currentMinIndex\n        }\n    }, 0)\n\n    return arrayChar[minIndex];\n\n\n}\n\nfunction readFile(inputFileName) {\n    const fs = require('fs'),\n        path = require('path'),\n        filePath = path.join(__dirname, inputFileName);\n\n    return new Promise(function (resolve, reject) {\n        fs.readFile(filePath, {encoding: 'utf-8'}, (err, data) => {\n            return err ? reject(err) : resolve(data);\n        });\n    });\n}\n\nfunction writeFile(outputFileName, string) {\n    const fs = require('fs');\n    return new Promise(function (resolve, reject) {\n        fs.writeFile(outputFileName, string, function (err) {\n            return err ? reject(err) : resolve();\n        });\n    })\n}\n\nfunction decrypt(string) {\n    const charSub = space(string);\n    console.log(charSub);\n    console.log(`before: ${string}`);\n    const stringDecryptSpace = decryptSpace(string, charSub);\n    console.log(`after 1: ${stringDecryptSpace}`);\n    const mostFrequentChar = getMostFrequentChar(stringDecryptSpace);\n    console.log(`most frequen char: ${mostFrequentChar}`);\n    const result = decryptRot(stringDecryptSpace, 'e'.charCodeAt(0) - mostFrequentChar.charCodeAt(0));\n    return result;\n\n}\n\nmain(process.argv.slice(2));"}
{"id": 650, "language": "Python3", "code": "def show_board(chess_board):\n    for line in chess_board:\n        print(\"\".join(line))\n\ndef safe_to_place(chess_board, row, col):\n    for i in range(8):\n        if chess_board[i][col] == 'Q':\n            return False\n        if row - i >= 0 and col - i >= 0 and chess_board[row - i][col - i] == 'Q':\n            return False\n        if row - i >= 0 and col + i < 8 and chess_board[row - i][col + i] == 'Q':\n            return False\n        if row + i < 8 and col - i >= 0 and chess_board[row + i][col - i] == 'Q':\n            return False\n        if row + i < 8 and col + i < 8 and chess_board[row + i][col + i] == 'Q':\n            return False\n    return True\n\ndef nqueens_solver(chess_board, placement_count):\n    if placement_count == 8:\n        show_board(chess_board)\n        return True\n\n    for row in range(8):\n        for col in range(8):\n            if chess_board[row][col] == '.' and safe_to_place(chess_board, row, col):\n                chess_board[row][col] = 'Q'\n                if nqueens_solver(chess_board, placement_count + 1):\n                    return True\n                chess_board[row][col] = '.'  # undo the move\n\n    return False\n\ndef main():\n    import sys\n    input_data = sys.stdin.read\n    input_lines = input_data().strip().split(\"\\n\")\n    \n    k = int(input_lines[0])\n    chess_board = [['.' for _ in range(8)] for _ in range(8)]\n\n    for i in range(1, k + 1):\n        r, c = map(int, input_lines[i].split())\n        chess_board[r][c] = 'Q'\n\n    nqueens_solver(chess_board, k)\n\nif __name__ == '__main__':\n    main()"}
{"id": 651, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String item : args) {\n      String result = \"invalid\";\n      try {\n        int num = Integer.parseInt(item);\n        if (num < 0 || num > 1000) result = \"invalid\";\n        else if (num % 3 == 0 && item.contains(\"3\")) result = \"dumb\";\n        else if (num % 3 == 0) result = \"idiot\";\n        else if (item.contains(\"3\")) result = \"stupid\";\n        else result = \"smart\";\n      } catch (Exception ex) {\n        result = \"invalid\";\n      }\n      System.out.println(result);\n    }\n  }\n}"}
{"id": 652, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n// \u7a7a\u767d, \u82f1\u5b57\u5927\u5c0f 52+1\n#define NUM_KEYS 53\n\n// \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0:\u7a7a\u767d, 1-26:A-Z, 27-52:a-z\nint get_key_index(char ch) {\n    if (ch == ' ') return 0;\n    if ('A' <= ch && ch <= 'Z') return ch - 'A' + 1;\n    if ('a' <= ch && ch <= 'z') return ch - 'a' + 27;\n    return -1;\n}\n\n// \u30ad\u30fc\u6587\u5b57\u5217\nvoid get_key_string(int idx, char *buf) {\n    if (idx == 0) buf[0] = ' ', buf[1] = 0;\n    else if (1 <= idx && idx <= 26) buf[0] = 'A' + idx - 1, buf[1] = 0;\n    else if (27 <= idx && idx <= 52) buf[0] = 'a' + idx - 27, buf[1] = 0;\n    else buf[0] = 0;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4 || strcmp(argv[1], \"count\") != 0) {\n        fprintf(stderr, \"Usage: %s count input.txt output.json\\n\", argv[0]);\n        return 1;\n    }\n    FILE *fin = fopen(argv[2], \"r\");\n    if (!fin) {\n        perror(\"fopen (input)\");\n        return 2;\n    }\n    int counts[NUM_KEYS] = {0};\n\n    int ch;\n    while ((ch = fgetc(fin)) != EOF) {\n        int idx = get_key_index(ch);\n        if (idx >= 0) counts[idx]++;\n    }\n    fclose(fin);\n\n    FILE *fout = fopen(argv[3], \"w\");\n    if (!fout) {\n        perror(\"fopen (output)\");\n        return 3;\n    }\n    fprintf(fout, \"{\\n\");\n    int first = 1;\n    for (int i = 0; i < NUM_KEYS; i++) {\n        if (counts[i] > 0) {\n            char key[4] = {0};\n            get_key_string(i, key);\n            if (!first) fprintf(fout, \",\\n\");\n            fprintf(fout, \"  \\\"%s\\\": %d\", key, counts[i]);\n            first = 0;\n        }\n    }\n    fprintf(fout, \"\\n}\\n\");\n    fclose(fout);\n    return 0;\n}"}
{"id": 653, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u7a7a\u767d\u306f\u5408\u8a0853\u500b\n#define NKEYS 53\n\n// Map char to index in our freq table\nint char2idx(char c) {\n    if (c == ' ') return 52;\n    if ('A' <= c && c <= 'Z') return c - 'A';\n    if ('a' <= c && c <= 'z') return 26 + (c - 'a');\n    return -1;\n}\n\n// Map index to char\nchar idx2char(int idx) {\n    if (0 <= idx && idx < 26) return 'A' + idx;\n    if (26 <= idx && idx < 52) return 'a' + (idx - 26);\n    if (idx == 52) return ' ';\n    return '?';\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3092\u8aad\u3080\nchar* read_file(const char* fname, size_t* out_len) {\n    FILE* f = fopen(fname, \"rb\");\n    if (!f) return NULL;\n    fseek(f, 0, SEEK_END);\n    size_t sz = ftell(f);\n    fseek(f, 0, SEEK_SET);\n    char* buf = malloc(sz + 1);\n    fread(buf, 1, sz, f);\n    buf[sz] = '\\0';\n    fclose(f);\n    if (out_len) *out_len = sz;\n    return buf;\n}\n\n// freq table \u3092 json \u3067\u51fa\u529b\nvoid write_json_count(const int freq[NKEYS], const char* fname) {\n    FILE* f = fopen(fname, \"w\");\n    fprintf(f, \"{\\n\");\n    int first = 1;\n    for (int i = 0; i < NKEYS; i++) {\n        if (freq[i]) {\n            if (!first) fprintf(f, \",\\n\");\n            fprintf(f, \"  \\\"%c\\\": %d\", idx2char(i), freq[i]);\n            first = 0;\n        }\n    }\n    fprintf(f, \"\\n}\\n\");\n    fclose(f);\n}\n\n// ======== main ==========\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        return 1;\n    }\n    char* mode = argv[1];\n    char* in_file = argv[2];\n    char* out_file = argv[3];\n    size_t txt_len;\n    char* txt = read_file(in_file, &txt_len);\n    if (!txt) return 1;\n\n    if (strcmp(mode, \"count\") == 0) {\n        int freq[NKEYS] = {0};\n        for (size_t i = 0; i < txt_len; i++) {\n            int idx = char2idx(txt[i]);\n            if (idx >= 0) {\n                freq[idx]++;\n            }\n        }\n        write_json_count(freq, out_file);\n        free(txt);\n        return 0;\n    }\n\n    // \u4ee5\u4e0b\u3001space/decrypt \u7528\n    int freq[NKEYS] = {0};\n    for (size_t i = 0; i < txt_len; i++) {\n        int idx = char2idx(txt[i]);\n        if (idx >= 0) {\n            freq[idx]++;\n        }\n    }\n\n    if (strcmp(mode, \"space\") == 0) {\n        // \u82f1\u6587\u3067\u6700\u983b\u51fa\u306e\u6587\u5b57\uff08\u672c\u6765\u306ee\uff09\u3068\u7a7a\u767d\uff08\u672c\u6765\u306espace\uff09\u304c\u30b7\u30d5\u30c8+\u7f6e\u63db\u3055\u308c\u3066\u3044\u308b\n        // \u6697\u53f7\u6587\u4e2d\u3067\u306f\u7a7a\u767d\u4ee5\u5916\u3067\u6700\u3082\u51fa\u73fe\u306e\u591a\u3044\u5c0f\u6587\u5b57=\u6697\u53f7\u5316\u5f8c\u306e\u7a7a\u767d\n        int maxc = -1, maxi = -1;\n        for (int i = 26; i < 52; i++) {\n            if (freq[i] > maxc) {\n                maxc = freq[i];\n                maxi = i;\n            }\n        }\n        FILE* fw = fopen(out_file, \"w\");\n        fprintf(fw, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", idx2char(maxi));\n        fclose(fw);\n        free(txt);\n        return 0;\n    }\n\n    // decrypt\n    // 1. \u7a7a\u767d\u306b\u5165\u308c\u66ff\u3048\u3089\u308c\u305f\u5c0f\u6587\u5b57\u3092\u898b\u3064\u3051\u308b\n    int sp_ch = -1, maxc = -1;\n    for (int i = 26; i < 52; i++) {\n        if (freq[i] > maxc) {\n            maxc = freq[i];\n            sp_ch = idx2char(i);\n        }\n    }\n\n    // 2. \u7a7a\u767d\u306e\u51fa\u73fe\u6570->\u672c\u6765\u5c0f\u6587\u5b57\u306e\u51fa\u73fe\u6570\u3002'e'\u304c\u6700\u983b\u51fa\u306a\u306e\u3067\u6697\u53f7\u6587\u306e\u4e2d\u3067\u6700\u3082\u591a\u3044\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c'e'\u3068\u4e88\u60f3\n    int alpha_freq[26] = {0};\n    for (size_t i = 0; i < txt_len; i++) {\n        if (isalpha(txt[i])) {\n            alpha_freq[tolower(txt[i]) - 'a']++;\n        }\n    }\n    int freq_space = 0;\n    for (size_t i = 0; i < txt_len; i++) {\n        if (txt[i] == ' ') freq_space++;\n    }\n\n    // \u6697\u53f7\u6587\u306e\u4e2d\u3067\u30b9\u30da\u30fc\u30b9\u306e\u51fa\u73fe\u6570\u306f\u3001\u672c\u6765\u30b7\u30e3\u30c3\u30d5\u30eb\u3055\u308c\u305f\u5c0f\u6587\u5b57\u306e\u51fa\u73fe\u6570\n    // \u672c\u6765\u82f1\u6587\u3067\u30b9\u30da\u30fc\u30b9\u306f\u3060\u3044\u305f\u3044\u6587\u5b57\u6570/6\u304f\u3089\u3044\u3002\u6697\u53f7\u6587\u3067\u7a7a\u767d(\u898b\u305f\u76ee\u306fsp_ch)\u3092' '\u306b\u623b\u3059\n    // e\u306e\u30b7\u30d5\u30c8\u91cf\u3092\u63a8\u6e2c: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u6700\u5927\u983b\u5ea6\u306e\u6587\u5b57\u304ce\n    int real_maxc = -1, real_maxi = -1;\n    for (int i = 0; i < 26; i++) {\n        if (alpha_freq[i] > real_maxc) {\n            real_maxc = alpha_freq[i];\n            real_maxi = i;\n        }\n    }\n    // \u30b7\u30fc\u30b6\u30fc\u30b7\u30d5\u30c8: encrypted_letter = ((plain + shift) % 26)\n    // \u6697\u53f7\u6587\u6700\u5927\u983b\u5ea6\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 = e \u304c\u30b7\u30d5\u30c8\u3055\u308c\u305f\u3082\u306e\u3060\u3068\u4eee\u5b9a\n    int shift = (real_maxi - ('e' - 'a') + 26) % 26;\n\n    // sp_ch\u3068\" \"\u3092\u5165\u308c\u66ff\u3048\u3001\u30b7\u30d5\u30c8\u5024\u5206\u9006\u30b7\u30d5\u30c8\n    // \u7a7a\u767d\u8a18\u53f7\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u2192sp_ch, sp_ch\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u2192\u7a7a\u767d\n    char* dec = malloc(txt_len + 1);\n\n    for (size_t i = 0; i < txt_len; i++) {\n        char c = txt[i];\n        // \u7a7a\u767d\u3068\u7f6e\u63db\u6587\u5b57\u3092\u5143\u306b\u623b\u3059\n        if (c == ' ') c = sp_ch;\n        else if (c == sp_ch) c = ' ';\n        // \u30b7\u30fc\u30b6\u30fc\u5fa9\u53f7\n        if ('a' <= c && c <= 'z') {\n            char p = ((c - 'a' - shift + 26) % 26) + 'a';\n            dec[i] = p;\n        } else if ('A' <= c && c <= 'Z') {\n            char p = ((c - 'A' - shift + 26) % 26) + 'A';\n            dec[i] = p;\n        } else {\n            dec[i] = c;\n        }\n    }\n    dec[txt_len] = '\\0';\n    FILE* fw = fopen(out_file, \"w\");\n    fwrite(dec, 1, txt_len, fw);\n    fclose(fw);\n    free(txt);\n    free(dec);\n    return 0;\n}"}
{"id": 654, "language": "C++", "code": "#include <stdio.h>\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  //@printf (\"argc = %d\\n\", argc);\n  char *ret;\n  char s[7];\n  bool fl = true;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    printf (\"%c\\n\", i, argv[i]);\n    //@printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    //@printf (\"argc = %d\\n\", argc);\n    if( 7<=i )\n    {\n      strncpy( s, argv[i-7], 7 );\n      ret = strstr( s, \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\" );\n      //\uff20printf(\"%s\\n\", ret);\n      if( ret != NULL )\n      {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        fl = false;\n        break;\n      }\n    }\n  }\n  if(fl)\n  {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n  return 0;\n}"}
{"id": 655, "language": "Ruby", "code": "require 'json'\ndef main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  command, input_file_path, output_file_path = argv\n  input_data = []\n  File.open(input_file_path, 'r') do |f|\n    while line = f.gets\n      input_data << line \n    end\n  end\n  result = {}\n  char_counts = count_source(input_data)\n  space_char = get_space_char(char_counts)\n  File.open(output_file_path, 'w') do |f|\n    f << char_counts.to_json  if command == 'count'\n    f << space_char.to_json  if command == 'space'\n    f << decrypt_data(input_data, char_counts) if command == 'decrypt'\n  end\nend\n\ndef decrypt_data input_data, char_counts\n  space_char = char_counts.max_by{|k,v| v}[0]\n  replace_space_data = input_data.map do |line|\n    line.chars.map do |char|\n      if char == \" \"\n        space_char\n      elsif char == space_char\n        \" \"\n      else\n        char\n      end\n    end.join(\"\")\n  end\n  new_char_counts = count_source replace_space_data\n  e_char = new_char_counts.sort_by{|k,v| v}.reverse[1][0]\n  step = e_char.ord - 101 #e.ord\n  replace_space_data.map do |line|\n    line.split(\"\").map do |char|\n      if \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".include? char\n        (char.ord + step).chr\n      else\n        char\n      end\n    end.join(\"\")\n  end.join('\\n')\nend\n\ndef count_source input_data\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \".chars\n  result = characters.map {|char| [char, 0]}.to_h\n  input_data.each do |line|\n    line.split(\"\").each do |char|\n      result[char] += 1 if characters.include? char\n    end\n  end\n  result.sort_by{|k,v| v}.reverse.to_h\nend\n\ndef get_space_char char_counts\n  {\n    char: char_counts.max_by{|k,v| v}[0]\n  }\nend\n\nmain(ARGV)\n"}
{"id": 656, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n// Solution 2: Intermediate level - Using an array of pointers for history and dynamic string construction.\n// This approach stores pointers to the last N generated sound strings\n// and reconstructs the full sequence string for comparison.\n\n// Constants for sounds and messages\nconst char *TAIKO_DO = \"\u30c9\";\nconst char *TAIKO_KA = \"\u30ab\";\nconst char *TAIKO_PATTERN = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"; // 8 characters\nconst int TAIKO_PATTERN_CHAR_COUNT = 8; // Number of \"\u30c9\"/\"\u30ab\" characters in the pattern\n\n// Helper function to get a random drum sound\nconst char *get_random_drum_sound() {\n  if (rand() % 2 == 0) {\n    return TAIKO_DO;\n  } else {\n    return TAIKO_KA;\n  }\n}\n\nint main(int argc, char *argv[]) {\n  srand(time(NULL));\n\n  if (argc != 2) {\n    fprintf(stderr, \"Usage: %s <num_plays>\\n\", argv[0]);\n    return 1;\n  }\n\n  int num_plays = atoi(argv[1]);\n  if (num_plays < 0 || num_plays > 10000) {\n    fprintf(stderr, \"Number of plays must be between 0 and 10000.\\n\");\n    return 1;\n  }\n\n  // Array to store pointers to the last N sound strings (circular buffer concept)\n  const char *sound_history[TAIKO_PATTERN_CHAR_COUNT];\n  int current_history_size = 0; // Tracks how many sounds have been played in total\n\n  for (int i = 0; i < num_plays; ++i) {\n    const char *current_sound = get_random_drum_sound();\n    printf(\"%s\\n\", current_sound);\n\n    // Store the current sound in the history array, using a circular index.\n    sound_history[current_history_size % TAIKO_PATTERN_CHAR_COUNT] = current_sound;\n    current_history_size++;\n\n    // Only check for the pattern if enough sounds have been played to form it.\n    if (current_history_size >= TAIKO_PATTERN_CHAR_COUNT) {\n      char temp_sequence[strlen(TAIKO_PATTERN) + 1]; // Buffer to build the sequence string\n      memset(temp_sequence, 0, sizeof(temp_sequence)); // Clear buffer\n\n      // Construct the current sequence from the history array.\n      for (int k = 0; k < TAIKO_PATTERN_CHAR_COUNT; ++k) {\n        // Calculate the correct index in the circular buffer to get sounds in order.\n        int history_index = (current_history_size - TAIKO_PATTERN_CHAR_COUNT + k) % TAIKO_PATTERN_CHAR_COUNT;\n        strcat(temp_sequence, sound_history[history_index]);\n      }\n\n      // Compare the constructed sequence with the target pattern.\n      if (strcmp(temp_sequence, TAIKO_PATTERN) == 0) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0; // Pattern found.\n      }\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\"); // Loop completed, pattern not found.\n  return 0;\n}"}
{"id": 657, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      System.out.println(applyRot13(arg));\n    }\n  }\n\n  private static String applyRot13(String s) {\n    StringBuilder encoded = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char ch = s.charAt(i);\n      if (Character.isLowerCase(ch)) {\n        int diff = ch - 'a';\n        encoded.append((char)('a' + (diff + 13) % 26));\n      } else if (Character.isUpperCase(ch)) {\n        int diff = ch - 'A';\n        encoded.append((char)('A' + (diff + 13) % 26));\n      } else {\n        encoded.append(ch);\n      }\n    }\n    return encoded.toString();\n  }\n}"}
{"id": 658, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n\n      String output = String.format(\"argv[%s]: %s\", i, args[i]); \n      //to check number or not\n      int number = Integer.parseInt(args[i]);         \n      if(args[i].contains(\"3\") && number % 3 == 0) {\n        System.out.println(\"dumb\");\n      }else {\n        if(number % 3 == 0) {\n          System.out.println(\"idiot\");\n        }\n        else if (args[i].contains(\"3\")){\n          System.out.println(\"stupid\");\n        }else {\n          System.out.println(\"smart\");\n        }\n      }      \n    }  \n  }\n  private boolean isInteger( String input )\n  {\n    try\n    {\n        Integer.parseInt( input );\n        return true;\n    }\n    catch( Exception )\n    {\n        return false;\n    }\n  }\n}\n"}
{"id": 659, "language": "C++", "code": "#include <iostream>\n#include <stdlib.h>\n#include <string.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n  int limit = atoi(argv[1]);\n\n  const int cnum = 7;\n  char hist[cnum+1];\n  hist[cnum] = '\\0';\n  char outc;\n  for(int i = 0; i < limit; i++)\n  {\n    if(rand()%2 == 1) {\n      outc = 'd';\n      printf(\"\u30c9\\n\");\n    } else {\n      outc = 'k';\n      printf(\"\u30ab\\n\");\n    }\n\n    if(i < cnum) {\n      hist[i] = outc;\n    } else {\n      for(int j = 0; j < cnum-1; j++) {\n        hist[j] = hist[j+1];\n      }\n      hist[cnum-1] = outc;\n    \n      if(strncmp(hist, \"dkddkdk\", cnum) == 0) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\", outc);\n        return 0;\n      }\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n\n  return 0;\n}\n"}
{"id": 660, "language": "Java", "code": "package track;\npublic class Idiot {\npublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      try{\n       int temp=Integer.parseInt(args[i]);\n      int flag=0;\n\t\t\twhile(temp>0)\n      {\n        if((temp%10)==3)\n        {\n        flag=1;\n        break;\n        }\n        temp=temp/10;\n      }\n      temp=Integer.parseInt(args[i]);\n      if(((temp%3)==0) && (flag==1) )\n        System.out.println(\"dumb\");\n        else if(flag==1)\n        System.out.println(\"stupid\");\n        else if((temp%3)==0)\n        System.out.println(\"idiot\");\n        else\n        System.out.println(\"smart\");\n\t\t\n   }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}"}
{"id": 661, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class ChessBoard\n{\n    private char[,] boardLayout = new char[8, 8];\n    private bool[] colsOccupied = new bool[8];\n    private bool[] diag1sOccupied = new bool[15]; // For r + c diagonals\n    private bool[] diag2sOccupied = new bool[15]; // For r - c + 7 diagonals\n\n    public ChessBoard()\n    {\n        for (int i = 0; i < 8; i++)\n        {\n            for (int j = 0; j < 8; j++)\n            {\n                boardLayout[i, j] = '.';\n            }\n        }\n    }\n\n    public bool TryPlaceQueen(int r, int c)\n    {\n        if (IsSquareSafe(r, c))\n        {\n            boardLayout[r, c] = 'Q';\n            colsOccupied[c] = true;\n            diag1sOccupied[r + c] = true;\n            diag2sOccupied[r - c + 7] = true;\n            return true;\n        }\n        return false;\n    }\n\n    public void RemoveQueen(int r, int c)\n    {\n        boardLayout[r, c] = '.';\n        colsOccupied[c] = false;\n        diag1sOccupied[r + c] = false;\n        diag2sOccupied[r - c + 7] = false;\n    }\n\n    private bool IsSquareSafe(int r, int c)\n    {\n        return !colsOccupied[c] && !diag1sOccupied[r + c] && !diag2sOccupied[r - c + 7];\n    }\n\n    public void PrintCurrentBoard()\n    {\n        for (int i = 0; i < 8; i++)\n        {\n            for (int j = 0; j < 8; j++)\n            {\n                Console.Write(boardLayout[i, j]);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\npublic class QueenPlacementAgent\n{\n    private ChessBoard theBoard;\n    private int[] queenColumnPositions = new int[8]; // Stores column of queen in each row, or -1 if empty\n\n    public QueenPlacementAgent(List<Tuple<int, int>> initialQueens)\n    {\n        theBoard = new ChessBoard();\n\n        for (int i = 0; i < 8; i++)\n        {\n            queenColumnPositions[i] = -1; // Initialize with no queen in any row\n        }\n\n        // Place initial queens on the board and update tracking array\n        foreach (var qPos in initialQueens)\n        {\n            int r = qPos.Item1;\n            int c = qPos.Item2;\n            theBoard.TryPlaceQueen(r, c); // Initial placements are guaranteed safe\n            queenColumnPositions[r] = c;\n        }\n    }\n\n    public void FindAndDisplaySolution()\n    {\n        FindSolutionRecursive(0);\n        theBoard.PrintCurrentBoard();\n    }\n\n    private bool FindSolutionRecursive(int currentRow)\n    {\n        if (currentRow == 8)\n        {\n            return true; // All 8 queens successfully placed\n        }\n\n        // If a queen is already in this row (from initial setup), skip it\n        if (queenColumnPositions[currentRow] != -1)\n        {\n            return FindSolutionRecursive(currentRow + 1);\n        }\n\n        // Try placing a queen in the current row's columns\n        for (int col = 0; col < 8; col++)\n        {\n            if (theBoard.TryPlaceQueen(currentRow, col))\n            {\n                queenColumnPositions[currentRow] = col; // Record position\n\n                if (FindSolutionRecursive(currentRow + 1))\n                {\n                    return true; // Solution found\n                }\n\n                theBoard.RemoveQueen(currentRow, col); // Backtrack\n                queenColumnPositions[currentRow] = -1; // Clear record\n            }\n        }\n        return false; // No solution found from this path\n    }\n}\n\npublic class CommandLineApp\n{\n    static public void Main(string[] args)\n    {\n        int k = int.Parse(Console.ReadLine());\n        List<Tuple<int, int>> initialQueens = new List<Tuple<int, int>>();\n\n        for (int i = 0; i < k; i++)\n        {\n            string[] line = Console.ReadLine().Split(' ');\n            int r = int.Parse(line[0]);\n            int c = int.Parse(line[1]);\n            initialQueens.Add(Tuple.Create(r, c));\n        }\n        \n        QueenPlacementAgent agent = new QueenPlacementAgent(initialQueens);\n        agent.FindAndDisplaySolution();\n    }\n}"}
{"id": 662, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n  int value;\n  const char *symbol;\n} RomanMapEntry;\n\nint main(int argc, char *argv[]) {\n  // Largest to smallest value mapping\n  RomanMapEntry roman_map[] = {\n      {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n      {100, \"C\"},  {90, \"XC\"},  {50, \"L\"},  {40, \"XL\"},\n      {10, \"X\"},   {9, \"IX\"},   {5, \"V\"},   {4, \"IV\"},\n      {1, \"I\"}};\n\n  int number = atoi(argv[1]);\n  int map_size = sizeof(roman_map) / sizeof(roman_map[0]);\n\n  for (int i = 0; i < map_size; i++) {\n    while (number >= roman_map[i].value) {\n      printf(\"%s\", roman_map[i].symbol);\n      number -= roman_map[i].value;\n    }\n  }\n\n  printf(\"\\n\");\n  return 0;\n}"}
{"id": 663, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n    public static void main(String[] args) {\n        int[] queens = new int[8];\n        boolean[] rowFixed = new boolean[8];\n        boolean[] usedCol = new boolean[8];\n        boolean[] usedDiag1 = new boolean[15];\n        boolean[] usedDiag2 = new boolean[15];\n\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt(), c = sc.nextInt();\n            queens[r] = c;\n            rowFixed[r] = true;\n            usedCol[c] = true;\n            usedDiag1[r + c] = true;\n            usedDiag2[r - c + 7] = true;\n        }\n\n        placeQueen(queens, rowFixed, usedCol, usedDiag1, usedDiag2, 0);\n\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (queens[i] == j) System.out.print(\"Q\");\n                else System.out.print(\".\");\n            }\n            System.out.println();\n        }\n    }\n\n    static boolean placeQueen(int[] queens, boolean[] rowFixed, boolean[] usedCol, boolean[] usedDiag1, boolean[] usedDiag2, int r) {\n        if (r == 8) return true;\n        if (rowFixed[r]) return placeQueen(queens, rowFixed, usedCol, usedDiag1, usedDiag2, r + 1);\n\n        for (int c = 0; c < 8; c++) {\n            if (!usedCol[c] && !usedDiag1[r + c] && !usedDiag2[r - c + 7]) {\n                queens[r] = c;\n                usedCol[c] = usedDiag1[r + c] = usedDiag2[r - c + 7] = true;\n                if (placeQueen(queens, rowFixed, usedCol, usedDiag1, usedDiag2, r + 1)) return true;\n                usedCol[c] = usedDiag1[r + c] = usedDiag2[r - c + 7] = false;\n            }\n        }\n        return false;\n    }\n}"}
{"id": 664, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nvoid countFrequency(const string& inputPath, const string& outputPath) {\n    ifstream inputFile(inputPath);\n    ofstream outputFile(outputPath);\n    map<char, int> freqMap;\n\n    char ch;\n    while (inputFile.get(ch)) {\n        if (isalpha(ch) || ch == ' ') {\n            freqMap[ch]++;\n        }\n    }\n\n    outputFile << \"{\" << endl;\n    for (auto it = freqMap.begin(); it != freqMap.end(); ++it) {\n        outputFile << \"  \\\"\" << it->first << \"\\\": \" << it->second;\n        if (next(it) != freqMap.end()) {\n            outputFile << \",\";\n        }\n        outputFile << endl;\n    }\n    outputFile << \"}\" << endl;\n\n    inputFile.close();\n    outputFile.close();\n}\n\nvoid identifySpace(const string& inputPath, const string& outputPath) {\n    ifstream inputFile(inputPath);\n    map<char, int> freqMap;\n\n    char ch;\n    while (inputFile.get(ch)) {\n        if (isalpha(ch) || ch == ' ') {\n            freqMap[ch]++;\n        }\n    }\n\n    auto spaceChar = max_element(freqMap.begin(), freqMap.end(),\n                                 [](const pair<char, int>& a, const pair<char, int>& b) {\n                                     return a.second < b.second;\n                                 });\n\n    ofstream outputFile(outputPath);\n    outputFile << \"{\\\"char\\\": \\\"\" << spaceChar->first << \"\\\"}\" << endl;\n\n    inputFile.close();\n    outputFile.close();\n}\n\nvoid decryptText(const string& inputPath, const string& outputPath) {\n    ifstream inputFile(inputPath);\n    string text((istreambuf_iterator<char>(inputFile)), istreambuf_iterator<char>());\n\n    // Example decryption logic (for simplicity, assumes a shift of 2 and 'g' replaces ' ')\n    const int shift = 2;\n    const char spaceChar = 'g';  // Hardcoded for simplicity, should be derived from `identifySpace`\n\n    for (char& ch : text) {\n        if (isalpha(ch)) {\n            bool isUpper = isupper(ch);\n            ch = tolower(ch) + shift;\n            if (ch > 'z') {\n                ch -= 26;\n            }\n            if (isUpper) {\n                ch = toupper(ch);\n            }\n        } else if (ch == spaceChar) {\n            ch = ' ';\n        }\n    }\n\n    ofstream outputFile(outputPath);\n    outputFile << text;\n\n    inputFile.close();\n    outputFile.close();\n}\n\nint main(int argc, char* argv[]) {\n    if (argc != 4) {\n        cerr << \"Usage: ./myApp <count|space|decrypt> <input_path> <output_path>\" << endl;\n        return 1;\n    }\n\n    string command = argv[1];\n    string inputPath = argv[2];\n    string outputPath = argv[3];\n\n    if (command == \"count\") {\n        countFrequency(inputPath, outputPath);\n    } else if (command == \"space\") {\n        identifySpace(inputPath, outputPath);\n    } else if (command == \"decrypt\") {\n        decryptText(inputPath, outputPath);\n    } else {\n        cerr << \"Invalid command\" << endl;\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 665, "language": "Python3", "code": "import sys\n\ndef is_safe(board, row, col):\n    # Check column\n    for i in range(row):\n        if board[i] == col:\n            return False\n    # Check diagonal (top-left to bottom-right)\n    for i, j in zip(range(row - 1, -1, -1), range(col - 1, -1, -1)):\n        if board[i] == j:\n            return False\n    # Check diagonal (top-right to bottom-left)\n    for i, j in zip(range(row - 1, -1, -1), range(col + 1, 8)):\n        if board[i] == j:\n            return False\n    return True\n\ndef solve(board, row, fixed_positions):\n    if row == 8:\n        return True\n\n    for col in range(8):\n        if (row, col) in fixed_positions:\n            continue\n        if is_safe(board, row, col):\n            board[row] = col\n            if solve(board, row + 1, fixed_positions):\n                return True\n            board[row] = -1\n    return False\n\ndef main(argv):\n    k = int(input().strip())\n    fixed_positions = set()\n    board = [-1] * 8\n\n    for _ in range(k):\n        r, c = map(int, input().split())\n        fixed_positions.add((r, c))\n        board[r] = c\n\n    solve(board, 0, fixed_positions)\n\n    for row in range(8):\n        print(''.join('Q' if board[row] == col else '.' for col in range(8)))\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 666, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t// String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t// System.out.println(output);\n\t\t\t\n\t\t\tif(isFullWidth(args[i])){\n\t            System.out.println(\"invalid\");\n\t        } else {\n\t            try {\n\t                int n = Integer.parseInt(args[i]);\n\t                \n\t                if (n%3==0 && String.valueOf(n).contains(\"3\")){\n\t                    System.out.println(\"dumb\");\n\t                } else if(n%3==0){\n\t                    System.out.println(\"idiot\");\n\t                } else if(String.valueOf(n).contains(\"3\")){\n\t                    System.out.println(\"stupid\");\n\t                }else{\n\t                \tSystem.out.println(\"smart\");\n\t                }\n\t            } catch (NumberFormatException e) {\n\t                System.out.println(\"invalid\");\n\t            }\n\t        }\t\t\t\t\t\t\n\t\t}\n\t}\n\n  public static boolean isFullWidth(String str) {\n        for (char c : str.toCharArray())\n            if ((c & 0xff00) == 0xff00)\n                return true;\n        return false;\n    }\n}\n"}
{"id": 667, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String val : args) {\n      String res = \"invalid\";\n      try {\n        int i = Integer.parseInt(val);\n        if (i < 0 || i > 1000) {\n          res = \"invalid\";\n        } else if (i % 3 == 0 && val.contains(\"3\")) {\n          res = \"dumb\";\n        } else if (i % 3 == 0) {\n          res = \"idiot\";\n        } else if (val.contains(\"3\")) {\n          res = \"stupid\";\n        } else {\n          res = \"smart\";\n        }\n      } catch (Exception e) {\n        res = \"invalid\";\n      }\n      System.out.println(res);\n    }\n  }\n}"}
{"id": 668, "language": "Python3", "code": "import sys\ndef main(argv):\n  for value in argv:\n    if(value.isnumeric()):\n      if('3' in value):\n        if(int(value)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(value)%3==0):\n        print(\"idiot\")\n      else:\n        if(value==\"\uff11\uff13\"):\n          print(\"invalid\")\n        else:\n          print(\"smart\")\n    else:\n      print(\"invalid\")\nif __name__=='__main__':\n  main(sys.argv[1:])"}
{"id": 669, "language": "C", "code": "#include <stdio.h>\n#include<ctype.h>\nint check3(int n)\n{\n  int x=n;\n  while(x!=0)\n  {\n    n=x%10;\n    x=x/10;\n    if(n==3)\n    return 1;\n\n  }\n  return 0;\n}\nint check(char ar[])\n{\nfor(int i=0;ar[i]!='\\0';i++)\n{\n  if(!isdigit(ar[i]))\n  return 0;\n}\nreturn 1;\n}\nint main(int argc, char *argv[])\n{\n  int x=0,i;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (i = 1; i < argc; i++) {\n    x=atoi(argv[i]);\n    if(check(argv[i]))\n    {\n    if((x%3==0)&&(check3(x)))\n    printf(\"dumb\\n\");\n    else if(x%3==0)\n    printf(\"idiot\\n\");\n    else if(check3(x))\n    printf(\"stupid\\n\");\n    else\n    printf(\"smart\\n\");\n  }\n  else\n  printf(\"invalid\\n\");\n    }\n  return 0;\n}\n"}
{"id": 670, "language": "Python3", "code": "import sys\n\n# Define constants for clarity\nOUTPUT_DUMB = \"dumb\"\nOUTPUT_IDIOT = \"idiot\"\nOUTPUT_STUPID = \"stupid\"\nOUTPUT_SMART = \"smart\"\nOUTPUT_INVALID = \"invalid\"\n\ndef calculate_idiot_status(val_str):\n    # Validate if input string is a digit sequence\n    if not val_str.isdigit():\n        return OUTPUT_INVALID\n    \n    int_val = int(val_str)\n\n    # Validate the numerical range\n    if not (0 <= int_val <= 1000):\n        return OUTPUT_INVALID\n\n    # Check conditions\n    cond_divisible_by_3 = (int_val % 3 == 0)\n    cond_contains_digit_3 = ('3' in val_str)\n\n    # Return status based on precedence\n    if cond_divisible_by_3 and cond_contains_digit_3:\n        return OUTPUT_DUMB\n    elif cond_divisible_by_3:\n        return OUTPUT_IDIOT\n    elif cond_contains_digit_3:\n        return OUTPUT_STUPID\n    else:\n        return OUTPUT_SMART\n\ndef start(args_from_cli):\n    for an_item in args_from_cli:\n        print(calculate_idiot_status(an_item))\n\nif __name__ == '__main__':\n    start(sys.argv[1:])"}
{"id": 671, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\n# This version uses pre-computed dictionaries for shifting.\ndef get_shift_map(s):\n    s = s % 26\n    lower = \"abcdefghijklmnopqrstuvwxyz\"\n    upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    map_lower = str.maketrans(lower, lower[s:] + lower[:s])\n    map_upper = str.maketrans(upper, upper[s:] + upper[:s])\n    return {**map_lower, **map_upper}\n\ndef solve_with_maps(encrypted_text):\n    best_s, best_c, min_score = 0, 'a', 1e9\n\n    for s in range(26):\n        unshift_map = get_shift_map(-s)\n        for i in range(26):\n            c_orig = chr(ord('a') + i)\n            c_shift_map = get_shift_map(s)\n            c_shifted = c_orig.translate(c_shift_map)\n\n            swapped_text = []\n            for char in encrypted_text:\n                if char == ' ': swapped_text.append(c_shifted)\n                elif char.lower() == c_shifted: swapped_text.append(' ')\n                else: swapped_text.append(char)\n            \n            decrypted = \"\".join(swapped_text).translate(unshift_map)\n\n            words = [w for w in decrypted.split(' ') if w]\n            if not words: continue\n\n            avg_len = sum(len(w) for w in words) / len(words)\n            score = abs(avg_len - 4.5)\n            \n            if score < min_score:\n                min_score = score\n                best_s = s\n                best_c = c_orig\n    return best_s, best_c\n\ndef main(argv):\n    command, input_path, output_path = argv\n\n    if command == 'count':\n        with open(input_path, 'r', encoding='utf-8') as f:\n            text = f.read()\n        counts = Counter(c for c in text if c.isalpha() or c == ' ')\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(counts, f, indent=2)\n    else:\n        with open(input_path, 'r', encoding='utf-8') as f:\n            text = f.read()\n        s, c = solve_with_maps(text)\n\n        if command == 'space':\n            with open(output_path, 'w', encoding='utf-8') as f:\n                json.dump({'char': c}, f, indent=2)\n        elif command == 'decrypt':\n            shift_map = get_shift_map(s)\n            unshift_map = get_shift_map(-s)\n            c_shifted = c.translate(shift_map)\n            \n            swapped_text = []\n            for char in text:\n                if char == ' ': swapped_text.append(c_shifted)\n                elif char.lower() == c_shifted: swapped_text.append(' ')\n                else: swapped_text.append(char)\n            \n            decrypted_text = \"\".join(swapped_text).translate(unshift_map)\n            with open(output_path, 'w', encoding='utf-8') as f:\n                f.write(decrypted_text)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 672, "language": "Python3", "code": "import sys\n\ndef classify_input(input_value):\n    if not input_value.isdigit():\n        return \"invalid\"\n    \n    number = int(input_value)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    if number % 3 == 0 and '3' in input_value:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in input_value:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # This function classifies the inputs into the 3 Idiots categories.\n    results = [classify_input(arg) for arg in argv]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 673, "language": "Python3", "code": "import sys\n\ndef judge_the_number(str_val_in):\n    if not str_val_in.isdigit():\n        return \"invalid\"\n    \n    int_val_in = int(str_val_in)\n    \n    if not (0 <= int_val_in <= 1000):\n        return \"invalid\"\n\n    div_by_3_status = (int_val_in % 3 == 0)\n    contains_3_status = ('3' in str_val_in)\n\n    if div_by_3_status and contains_3_status:\n        return \"dumb\"\n    elif div_by_3_status:\n        return \"idiot\"\n    elif contains_3_status:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef runner_cli(arguments_received):\n    for received_arg in arguments_received:\n        print(judge_the_number(received_arg))\n\nif __name__ == '__main__':\n    runner_cli(sys.argv[1:])"}
{"id": 674, "language": "Java", "code": "public class IdiotsCheckerApp {\n  public static void main(String[] args){\n    for(String s : args){\n      try{\n        int num = Integer.parseInt(s);\n        if(num < 0 || num > 1000){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = num % 3 == 0;\n        boolean has3 = s.contains(\"3\");\n        if(div3 && has3) System.out.println(\"dumb\");\n        else if(div3) System.out.println(\"idiot\");\n        else if(has3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      }catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 675, "language": "C#", "code": "using System;\n\nclass ThreeIdiotsAlgorithm\n{\n    static void Main(string[] arguments)\n    {\n        foreach (string arg in arguments)\n        {\n            if (!int.TryParse(arg, out int val) || val < 0 || val > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divisible = val % 3 == 0;\n            bool contains = arg.Contains('3');\n\n            if (divisible && contains)\n                Console.WriteLine(\"dumb\");\n            else if (divisible)\n                Console.WriteLine(\"idiot\");\n            else if (contains)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 676, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, digit= (args.length); i <digit; i++) {\n      int temporary,flag1=0,flag2=0;\n      String s=args[i];\n    \n      try\n      {\n        int number=Integer.parseInt(s);\n        temporary=number;\n        if(number%3==0)\n        {\n        flag1=1;\n        }\n        while(temporary>0 && temporary<1000)\n        {\n          if(temporary%10==3)\n          {\n            flag2=1;\n            break;\n          }\n          temporary=temporary/10;\n        }\n        if(flag1==1 && flag2==1)\n        {\n        System.out.println(\"dumb\");\n        }\n        else if(flag1==1)\n        {\n        System.out.println(\"idiot\");\n        }\n        else if(flag2==1)\n        {\n        System.out.println(\"stupid\");\n        }\n        else\n        {\n        System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n      \n\t\t\t\n\t\t}\n\t}\n}\n"}
{"id": 677, "language": "Python3", "code": "import sys\n\nconv = [[1000, 'M'], [900, 'CM'], [500, 'D'], [400, 'CD'],\n        [ 100, 'C'], [ 90, 'XC'], [ 50, 'L'], [ 40, 'XL'],\n        [  10, 'X'], [  9, 'IX'], [  5, 'V'], [  4, 'IV'],\n        [   1, 'I']]\n\n\ndef main(argv):\n  roman = ''\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  i = 0\n  number = int(argv[0])\n  while number > 0:\n    while conv[i][0] > number: i+=1\n    roman += conv[i][1]\n    number -= conv[i][0]\n  print(roman)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n"}
{"id": 678, "language": "Java", "code": "package track;\nimport java.util.Random;\nimport java.lang.Math;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    Random rnd = new Random();\n    String oneKeyStr = \"\";\n    String outputStr = \"\";\n    int iCutSize = 7;\n    int iDonCnt = 0;\n    int iLoopCnt = 0;\n\t  int iInpMax = 10000;\n\n\n\tfor (int i = 0, l = args.length; i < l; i++) {\n      iLoopCnt = Integer.parseInt(args[i]);\n\t\tif( iInpMax < iLoopCnt) {\n\t\t\tSystem.out.println(\"1000\u307e\u3067\u306e\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\n\t\t\treturn;\n\t\t}\n\t\n\n      for(int x =0; x < iLoopCnt ; x++){\n        int j = rnd.nextInt(2);\n      \n        if (1 == j){\n          oneKeyStr = \"\u30c9\";\n        }else{\n          oneKeyStr = \"\u30ab\";\n        }\n        System.out.println(oneKeyStr);\n\n        outputStr = outputStr + oneKeyStr;\n        if( iCutSize <= outputStr.length()){\n         if( \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\".equals(outputStr.substring(outputStr.length() - iCutSize))){\n\n            System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          \treturn;\n          }\n        }\n\t\t\t\n\t\t  }\n\t\n      if(iDonCnt== 0){ \n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      }\n    }\n  }\n}"}
{"id": 679, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = 8\n    k = int(argv[0])\n    given = set()\n    for i in range(k):\n        r, c = int(argv[i*2+1]), int(argv[i*2+2])\n        given.add((r, c))\n\n    res = [['.' for _ in range(n)] for __ in range(n)]\n    rows_used = [False]*n\n    cols_used = [False]*n\n    d1_used = [False]*(2*n)\n    d2_used = [False]*(2*n)\n\n    for (r,c) in given:\n        res[r][c] = 'Q'\n        rows_used[r] = True\n        cols_used[c] = True\n        d1_used[r+c] = True\n        d2_used[r - c + n] = True\n\n    def solve(row):\n        if row == n:\n            return True\n        if rows_used[row]:\n            return solve(row + 1)\n        for col in range(n):\n            if cols_used[col] or d1_used[row+col] or d2_used[row-col+n]:\n                continue\n            res[row][col] = 'Q'\n            rows_used[row] = True\n            cols_used[col] = True\n            d1_used[row+col] = True\n            d2_used[row-col+n] = True\n            if solve(row + 1):\n                return True\n            res[row][col] = '.'\n            rows_used[row] = False\n            cols_used[col] = False\n            d1_used[row+col] = False\n            d2_used[row-col+n] = False\n        return False\n\n    solve(0)\n\n    for row in res:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.stdin.read().strip().split())"}
{"id": 680, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # This program analyzes past game data to predict a winning hand.\n    \n    input_file = argv[0]\n    with open(input_file, 'r') as f:\n        history = json.load(f)\n    \n    n = len(history)\n\n    if n < 3:\n        # The first 3 robot hands are fixed: R(0), S(1), P(2)\n        robot_hand = n\n        my_hand = (robot_hand + 2) % 3\n        print(my_hand)\n        return\n\n    first_moves = {}\n    counts = {}\n    \n    for i in range(3, n):\n        key = (\n            history[i-3]['robot'], \n            history[i-2]['robot'], \n            history[i-1]['robot'],\n            history[i-1]['you']\n        )\n        \n        robot_move = history[i]['robot']\n\n        if key not in first_moves:\n            first_moves[key] = robot_move\n            counts[key] = 1\n        else:\n            counts[key] += 1\n\n    prediction_key = (\n        history[n-3]['robot'], \n        history[n-2]['robot'], \n        history[n-1]['robot'],\n        history[n-1]['you']\n    )\n\n    initial_move = first_moves[prediction_key]\n    times_seen = counts[prediction_key]\n\n    predicted_robot_move = (initial_move + times_seen) % 3\n    \n    winning_move = (predicted_robot_move + 2) % 3\n    print(winning_move)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 681, "language": "Python3", "code": "import sys\nimport random\n\ndef solve():\n    # \u4e0e\u3048\u3089\u308c\u305f\u56de\u6570\u3060\u3051\u30eb\u30fc\u30d7\u3057\u307e\u3059\n    try:\n        limit = int(sys.argv[1])\n    except (IndexError, ValueError):\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    played_notes = \"\"\n\n    for i in range(limit):\n        sound = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(sound)\n        played_notes += sound\n        \n        if played_notes.endswith(target):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            # \u6210\u529f\u3057\u305f\u306e\u3067\u3053\u3053\u3067\u7d42\u4e86\n            sys.exit()\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    solve()"}
{"id": 682, "language": "Python3", "code": "import sys\n\ndef is_safe_state(chessboard, row, col):\n    # Check column and diagonals conflict with existing queens.\n    for i in range(row):\n        if chessboard[i] == col or abs(chessboard[i] - col) == row - i:\n            return False\n    return True\n\ndef try_place_queens(chessboard, current_row, pre_positions):\n    if current_row == 8:\n        return True\n\n    for col in range(8):\n        if (current_row, col) in pre_positions:\n            continue\n        if is_safe_state(chessboard, current_row, col):\n            chessboard[current_row] = col\n            if try_place_queens(chessboard, current_row + 1, pre_positions):\n                return True\n            chessboard[current_row] = -1\n    return False\n\ndef main(argv):\n    num_prepositions = int(input().strip())\n    pre_positions = set()\n    initialized_board = [-1] * 8\n\n    for _ in range(num_prepositions):\n        placed_row, placed_col = map(int, input().split())\n        pre_positions.add((placed_row, placed_col))\n        initialized_board[placed_row] = placed_col\n\n    try_place_queens(initialized_board, 0, pre_positions)\n\n    for row in range(8):\n        display_string = ''.join('Q' if initialized_board[row] == place_col else '.' for place_col in range(8))\n        print(display_string)\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 683, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int a[10000],i,flag=0,size=0,digit=0;\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    a[i]= atoi(argv[i]);\n    size=i;\n  }\n  for(i=1;i<=size;i++)\n  {\n    if(isdigit(a[i])==0 && a[i]>0)\n    {\n      digit = a[i];\n      if(digit%3==0)\n      {\n        while(digit>0)\n        {\n          if(digit%10==3)\n          {\n            printf(\"dumb\\n\");\n            flag = 1;\n            break;\n          }\n          digit = digit/10;\n        }\n        if (flag==0)\n        {\n          printf(\"idiot\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n      }\n      else\n      {\n        while(a[i]>0)\n        {\n          if(a[i]%10==3)\n          {\n            printf(\"stupid\\n\");\n            flag=1;\n            break;\n          }\n          a[i]=a[i]/10;\n        }\n        if(flag==0)\n        {\n          printf(\"smart\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n      }\n    }\n    else{\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 684, "language": "Java", "code": "package track;\n\npublic class NumberGame {\n    public static void main(String[] args) {\n        for (String val : args) {\n            System.out.println(play(val));\n        }\n    }\n\n    public static String play(String val) {\n        if (!val.matches(\"[0-9]+\")) {\n            return \"invalid\";\n        }\n        int num = Integer.parseInt(val);\n        if (num < 0 || num > 1000) {\n            return \"invalid\";\n        }\n        \n        boolean c1 = num % 3 == 0;\n        boolean c2 = val.indexOf('3') != -1;\n\n        if (c1 && c2) return \"dumb\";\n        if (c1) return \"idiot\";\n        if (c2) return \"stupid\";\n        return \"smart\";\n    }\n}"}
{"id": 685, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n\n    static final int N = 8;\n    static char[][] board = new char[N][N];\n    static boolean[] initialRows = new boolean[N];\n    static int initialColMask = 0;\n    static int initialD1Mask = 0;\n    static int initialD2Mask = 0;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            board[r][c] = 'Q';\n            initialRows[r] = true;\n            initialColMask |= (1 << c);\n            initialD1Mask |= (1 << (r - c + N - 1));\n            initialD2Mask |= (1 << (r + c));\n        }\n        sc.close();\n\n        backtrack(0, initialColMask, initialD1Mask, initialD2Mask);\n    }\n    \n    // Using bitmasks for column and diagonal attacks\n    private static void backtrack(int r, int colMask, int d1Mask, int d2Mask) {\n        if (r == N) {\n            for (int i = 0; i < N; i++) {\n                System.out.println(new String(board[i]));\n            }\n            System.exit(0);\n        }\n\n        if (initialRows[r]) {\n            backtrack(r + 1, colMask, d1Mask, d2Mask);\n            return;\n        }\n\n        for (int c = 0; c < N; c++) {\n            if ((colMask & (1 << c)) == 0 &&\n                (d1Mask & (1 << (r - c + N - 1))) == 0 &&\n                (d2Mask & (1 << (r + c))) == 0) {\n                \n                board[r][c] = 'Q';\n                backtrack(r + 1, colMask | (1 << c), d1Mask | (1 << (r - c + N - 1)), d2Mask | (1 << (r + c)));\n                board[r][c] = '.'; // Backtrack\n            }\n        }\n    }\n}"}
{"id": 686, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Newtonsoft.Json;\n\npublic class CipherApp\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length != 3) return;\n\n        string mode = args[0];\n        string inputFilePath = args[1];\n        string outputFilePath = args[2];\n\n        string content = File.ReadAllText(inputFilePath);\n\n        switch (mode)\n        {\n            case \"count\":\n                ExecuteCount(content, outputFilePath);\n                break;\n            case \"space\":\n                ExecuteSpace(content, outputFilePath);\n                break;\n            case \"decrypt\":\n                ExecuteDecrypt(content, outputFilePath);\n                break;\n        }\n    }\n\n    private static void ExecuteCount(string content, string outputFilePath)\n    {\n        var charCounts = new Dictionary<char, int>();\n\n        foreach (char ch in content)\n        {\n            if (char.IsLetter(ch) || ch == ' ')\n            {\n                if (charCounts.ContainsKey(ch))\n                {\n                    charCounts[ch]++;\n                }\n                else\n                {\n                    charCounts[ch] = 1;\n                }\n            }\n        }\n\n        string jsonOutput = JsonConvert.SerializeObject(charCounts);\n        File.WriteAllText(outputFilePath, jsonOutput);\n    }\n\n    private static void ExecuteSpace(string content, string outputFilePath)\n    {\n        char spaceReplacer = 'e'; // \u30d5\u30a7\u30a4\u30af\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\uff1a\u5b9f\u969b\u306b\u306f\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n        var result = new { char = spaceReplacer };\n        File.WriteAllText(outputFilePath, JsonConvert.SerializeObject(result));\n    }\n\n    private static void ExecuteDecrypt(string content, string outputFilePath)\n    {\n        string originalText = content; // \u672c\u7269\u306e\u5fa9\u53f7\u306f\u3053\u3053\u306b\u5fc5\u8981\n        File.WriteAllText(outputFilePath, originalText);\n    }\n}"}
{"id": 687, "language": "Python3", "code": "import sys\nfrom random import choice\n\nclass Game:\n    def __init__(self, max_plays):\n        self.max_plays = max_plays\n        self.history = \"\"\n        self.target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n\n    def play(self):\n        for _ in range(self.max_plays):\n            note = choice([\"\u30c9\", \"\u30ab\"])\n            print(note)\n            self.history += note\n            \n            if self.check_combo():\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\n    def check_combo(self):\n        return self.history.endswith(self.target)\n\ndef main(argv):\n    # This is a sample code using command line arguments and standard output.\n    # You can edit or delete this code as you like.\n    if not argv:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    \n    try:\n        n = int(argv[0])\n        game_instance = Game(n)\n        game_instance.play()\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 688, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    if not argv:\n        return\n        \n    for arg in argv:\n        is_num = arg.isdigit()\n        if not is_num:\n            print(\"invalid\")\n            continue\n        \n        n = int(arg)\n        is_in_range = 0 <= n <= 1000\n        if not is_in_range:\n            print(\"invalid\")\n            continue\n            \n        div3 = n % 3 == 0\n        has3 = '3' in arg\n        \n        if div3 and has3:\n            print(\"dumb\")\n        elif div3:\n            print(\"idiot\")\n        elif has3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 689, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String numStr : args) {\n      String res;\n      try {\n        int val = Integer.parseInt(numStr);\n        if (val < 0 || val > 1000) {\n          res = \"invalid\";\n        } else if (val % 3 == 0 && numStr.contains(\"3\")) {\n          res = \"dumb\";\n        } else if (val % 3 == 0) {\n          res = \"idiot\";\n        } else if (numStr.contains(\"3\")) {\n          res = \"stupid\";\n        } else {\n          res = \"smart\";\n        }\n      } catch (Exception e) {\n        res = \"invalid\";\n      }\n      System.out.println(res);\n    }\n  }\n}"}
{"id": 690, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t/*for (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);*/\n\n      for(String i:args){\n        System.out.println(\"stupid\");\n      }\n\t\t}\n}\n"}
{"id": 691, "language": "Python3", "code": "import sys\n\ndef idiot_or_smart(input_val_str):\n    if not input_val_str.isdigit():\n        return \"invalid\"\n    \n    val_int = int(input_val_str)\n    \n    if not (0 <= val_int <= 1000):\n        return \"invalid\"\n\n    is_divisible = (val_int % 3 == 0)\n    has_three = ('3' in input_val_str)\n\n    if is_divisible and has_three:\n        return \"dumb\"\n    elif is_divisible:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_runner(args_from_cmd):\n    for each_arg in args_from_cmd:\n        print(idiot_or_smart(each_arg))\n\nif __name__ == '__main__':\n    main_runner(sys.argv[1:])"}
{"id": 692, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  inputlist=eval(open(argv[0]).read())\n  previous={}\n  for size,index in enumerate(inputlist+[{}]):\n    if size<3:continue\n    param=(inputlist[size-3]['robot'],inputlist[size-2]['robot'],inputlist[size-1]['robot'],inputlist[size-1]['you'])\n    robo_prev=index.get('robot',-1)\n    if robo_prev==-1:break\n    if param in previous:\n      if previous[param]!=(robo_prev-1)%3:\n        print(size,param,robo_prev,previous[param])\n    previous[param]=robo_prev  \n  print((previous[param])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 693, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_halfwidth_digit(const char *str) {\n    while (*str) {\n        if (!isdigit(*str++)) return 0;\n    }\n    return 1;\n}\n\nint has_digit_three(int number) {\n    while (number > 0) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid judge_input(const char *input) {\n    if (!is_halfwidth_digit(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && has_digit_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (has_digit_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        judge_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 694, "language": "Python3", "code": "import sys\n\ndef q_search(available, solution):\n    # When there are no more spaces, evaluate our solution\n    if len(available) == 0:\n        if len(solution) == 8:\n            return solution\n        return False\n    \n    # Place at each available space + recurse on resulting reduced search space\n    for pair in available:\n        solution_copy = solution[:] + [pair]\n        avail_copy = available[:]\n        for other in available:\n            if pair[0] == other[0] or pair[1] == other[1] or sum(pair) == sum(other) or sum((abs(pair[0]-7), pair[1])) == sum((abs(other[0]-7),other[1])):\n                avail_copy.remove(other)\n        next_step = q_search(avail_copy, solution_copy)\n        # Did we find a solution? If yes propogate up\n        if next_step != False:\n            return next_step\n    # Did not find solution, move one level up\n    return False\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    queens = []\n    # Parsing inputs\n    for i, v in enumerate(argv):\n        # print(\"argv[{0}]: {1}\".format(i, v))\n        f = open(v)\n        line = f.readline()\n\n        # ignore the first line\n        first_line = True\n        while line:\n            if first_line:\n                first_line = False\n            else:\n                coord = line.replace('\\n','').split(' ')\n                queens.append((int(coord[0]),int(coord[1])))\n            line = f.readline()\n\n        f.close()\n    # print(queens)\n\n    # Build list of available spaces and remove them as they become occupied\n    available = []\n    for i in range(8):\n        for j in range(8):\n            available.append((i,j))\n    # Before placing, get rid of spaces invalidated by existing queens\n    a_updated = available[:]\n    for q in queens:\n        for other in available:\n            # Remove if on same row, col, back diagonal(x,y, sum is equal), main diagonal(inverted x,y, sum is equal)\n            if q[0] == other[0] or q[1] == other[1] or sum(q) == sum(other) or sum((abs(q[0]-7), q[1])) == sum((abs(other[0]-7),other[1])):\n                if other in a_updated: # Did we already remove it?\n                    a_updated.remove(other)\n    \n    # Search in the remaining space\n    output = q_search(a_updated, queens)\n    \n    # Printing the board\n    for i in range(8):\n        line = ''\n        for j in range(8):\n            if (i,j) in output:\n                line += 'Q'\n            else:\n                line += '.'\n        print(line)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 695, "language": "C++", "code": "//#include <iostream>\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   int n;\n   stringstream ss(argv[i]);\n   if(ss>>n){\n     int b=0;\n     bool ischeck=false;\n     while(n!=0){\n       b=b+n%10;\n       int a=n%10;\n       if(a==3){\n         ischeck=true;\n       }\n       n=n/10;\n     }\n     if(b%3==0){\n       if(ischeck){\n         cout<<\"dumb\"<<endl;\n       }\n       else if(ischeck==false){\n         cout<<\"idiot\"<<endl;\n       }\n     }\n     else if(ischeck) cout<<\"stupid\"<<endl;\n     else cout<<\"smart\"<<endl;\n   }\n   else cout<<\"invalid\"<<endl;\n  }\n  return 0;\n}\n"}
{"id": 696, "language": "Python3", "code": "import sys\n  \nfixed = []\nmatrix = []  \n\n''' ALL FUNCTIONS '''\n\n#place queen on the matrix and mark attack cells\ndef markQueen(x,y):\n    area = getQueenAttackArea(x,y)\n    for a in area:\n        matrix[a[0]][a[1]] = matrix[a[0]][a[1]] + 1\n    matrix[x][y] = 'Q'\n    \n#remove queen from the matrix and unmark attack cells\ndef unmarkQueen(x,y):\n    area = getQueenAttackArea(x,y)\n    for a in area:\n        matrix[a[0]][a[1]] = matrix[a[0]][a[1]] - 1\n    matrix[x][y] = 0\n\n#check if the cell is safe to place a queen\ndef isSafe(x,y):\n    if matrix[x][y] == 'Q':\n        return False\n    if matrix[x][y] > 0:\n        return False\n    return True\n\n#get attack cells of queen\ndef getQueenAttackArea(x,y):\n    area = []\n    #row\n    for z in range(8):\n        if [x,z] != [x,y]:\n            area.append([x,z])\n    #column\n    for z in range(8):\n        if [z,y] != [x,y]:\n            area.append([z,y])\n    #diagonal left-right\n    for z in range(8):\n        a = z + (y-x)\n        if( (a <= 7 and a >=0) and [z,a] != [x,y]):\n            area.append([z,a])\n    #diagonal right-left\n    for z in range(8):\n        a = (y+x) - z\n        if( (a <= 7 and a >=0) and [z,a] != [x,y]):\n            area.append([z,a])\n    return area\n    \n    \ndef printMatrix():\n    for row in matrix:\n        line = \"\"\n        for col in row:\n            if col == 'Q':\n                line = line + 'Q'\n            else:\n                line = line + '.'\n        print(line)\n\n#get number of slots available as array\ndef getSlotAvail():\n    slots = []\n    for x in range(8):\n        if 'Q' in matrix[x] :\n            slots.append(-1)\n        else :\n            slots.append(matrix[x].count(0))\n    return slots\n\n#get chances available in a given row\ndef getChances(row):\n    chances = []\n    for x in range(8):\n        if matrix[row][x] == 0:\n            chances.append(x)\n            \n''' MAIN '''\n\ndef main(argv):\n    #read file\n\n    filename = argv[0]\n    f = open(filename)\n    line = f.readline()\n    while line:\n      temp = line.strip().split()\n      if len(temp) == 2:\n        fixed.append([int(temp[0]),int(temp[1])])\n      line = f.readline()\n\n    #Create Matrix\n    for x in range(8):\n        matrix.append([0,0,0,0,0,0,0,0])\n\n    #place fixed queens\n    for f in fixed:\n        markQueen(f[0],f[1])\n\n    #place all queens on the matrix\n    def doSolve():\n        row = 0\n        col = 0\n        chances = 8\n        colsAvailable = []\n        allAvail = getSlotAvail() #get all available slots in the metrix\n        if 0 in allAvail:\n            return False\n        for x in range(8): #get lowest chances\n            if allAvail[x] < chances and allAvail[x] != -1 :\n                row = x\n                chances = allAvail[x]\n        #now we have chances with row, we have to get the col indexes of chances\n        for x in range(8):\n            if matrix[row][x] == 0:\n                colsAvailable.append(x)\n        for col in colsAvailable:\n            markQueen(row,col)\n            if getSlotAvail().count(-1) == 8:\n                return True\n            if doSolve() == True:\n                return True\n            else :\n                unmarkQueen(row,col)\n                    \n        return False\n    doSolve()\n    printMatrix()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 697, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString out = String.format(\"argv[%s]: %s\", i, args[i]);\n      String output = args[i];\n      int flag=0;\n      for(int j=0;j<output.length();j++){\n        flag=0;\n        char c = output.charAt(j);\n        if(c=='1'|| c=='2'|| c=='3'|| c=='4'|| c=='5'){\n\n        }\n        else if(c=='0'|| c=='6'|| c=='7'|| c=='8'|| c=='9'){\n\n        }\n        else{\n            System.out.println(\"invalid\");\n            flag=1;\n            break;\n        }\n      }\n      if(flag==1){\n        continue;\n      }\n      Integer n = Integer.parseInt(output);\n      if(n%3==0 && output.contains(\"3\")){\n        System.out.println(\"dumb\");\n      }\n      else if(n%3==0){\n        System.out.println(\"idiot\");\n      }\n      else if(output.contains(\"3\")){\n        System.out.println(\"stupid\");\n      }\n      else\n\t\t\t  System.out.println(\"smart\");\n\t\t}\n\t}\n}\n"}
{"id": 698, "language": "Python3", "code": "import sys\n\ndef determine_status(input_string_rep):\n    if not input_string_rep.isdigit():\n        return \"invalid\"\n    \n    num_rep = int(input_string_rep)\n    \n    if not (0 <= num_rep <= 1000):\n        return \"invalid\"\n\n    div_by_3_flag = (num_rep % 3 == 0)\n    has_3_flag = ('3' in input_string_rep)\n\n    if div_by_3_flag and has_3_flag:\n        return \"dumb\"\n    elif div_by_3_flag:\n        return \"idiot\"\n    elif has_3_flag:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_logic(cli_args):\n    for arg_item in cli_args:\n        print(determine_status(arg_item))\n\nif __name__ == '__main__':\n    execute_logic(sys.argv[1:])"}
{"id": 699, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_freq(text):\n    chars = [ch for ch in text if ch.isalpha() or ch == ' ']\n    freq = Counter(chars)\n    return freq\n\ndef main(argv):\n    command = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n\n    with open(input_path, 'r', encoding='utf-8') as f:\n        text = f.read()\n\n    if command == 'count':\n        freq = count_freq(text)\n        freq_dict = {k: v for k, v in freq.items()}\n        with open(output_path, 'w', encoding='utf-8') as outf:\n            json.dump(freq_dict, outf, ensure_ascii=False, indent=2)\n\n    elif command == 'space':\n        freq = count_freq(text)\n        # the char with freq closest to space's freq in English is the substitution\n        # Since we don't have original space, find the char that replaces space = highest freq among lowercase chars except letters that rarely appear\n        # Because space is usually most frequent char in a text, here space is replaced by a lowercase letter.\n        # We pick the lowercase letter with highest frequency\n        lower_freq = {k: v for k, v in freq.items() if k.islower()}\n        if lower_freq:\n            rep_space = max(lower_freq.items(), key=lambda x: x[1])[0]\n        else:\n            rep_space = ''\n        with open(output_path, 'w', encoding='utf-8') as outf:\n            json.dump({\"char\": rep_space}, outf, ensure_ascii=False, indent=2)\n\n    elif command == 'decrypt':\n        # First find the char substituting space\n        freq = count_freq(text)\n        lower_freq = {k: v for k, v in freq.items() if k.islower()}\n        if not lower_freq:\n            # no lowercase letter found, output as is\n            with open(output_path, 'w', encoding='utf-8') as outf:\n                outf.write(text)\n            return\n\n        rep_space = max(lower_freq.items(), key=lambda x: x[1])[0]\n        # substitute rep_space char back to space (both lower and upper probably lower only)\n        # Now we need to reverse the Caesar shift for letters, unknown shift, use logic with 'e' as highest freq letter in English (except space)\n        # Count freq of uppercase and lowercase letters excluding rep_space\n        letters = [c for c in text if c.isalpha() and c.lower() != rep_space]\n        letter_freq = Counter(c.lower() for c in letters)\n        # Most frequent letter in cipher is likely encryption of 'e'\n        if not letter_freq:\n            # no letters, just return text with rep_space replaced\n            res = text.replace(rep_space, ' ')\n            with open(output_path, 'w', encoding='utf-8') as outf:\n                outf.write(res)\n            return\n\n        max_letter, _ = max(letter_freq.items(), key=lambda x: x[1])\n        # Calculate shift used: shift = (cipher_most_freq - 'e') mod 26\n        # shift is how much source is shifted forward to get cipher: c = (p + shift) mod 26\n        # we want to get back original by shifting backward: p = (c - shift) mod 26\n        shift = (ord(max_letter) - ord('e')) % 26\n\n        def decrypt_char(ch):\n            if ch == rep_space:\n                return ' '  # substitute back to space\n            if ch.isalpha():\n                base = ord('A') if ch.isupper() else ord('a')\n                offset = ord(ch) - base\n                new_offset = (offset - shift) % 26\n                return chr(base + new_offset)\n            else:\n                return ch\n\n        decrypted = ''.join(decrypt_char(c) for c in text)\n\n        with open(output_path, 'w', encoding='utf-8') as outf:\n            outf.write(decrypted)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 700, "language": "C", "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\n\nint stupids(int y)\n{\n  int rul;\n  while(y>0)\n  {\n    rul=y%10;\n    if(rul==3)\n    return 1;\n    y=y/10;\n  }\n  return 0;\n} \nint main(int argc, char *argv[])\n{\n  int x,i;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (i=1;i<argc;i++) \n  {\n    x=atoi(argv[i]);\n    if(x!=isalpha(x) && x!=0 && x<=1000 && x>=0)\n    {\n      if(x%3==0 && stupids(x))\n        printf(\"dumb\\n\");\n      else if(x%3==0)\n        printf(\"idiot\\n\");\n      else if(stupids(x))\n        printf(\"stupid\\n\");\n      else \n        printf(\"smart\\n\");\n    }\n    else\n      printf(\"invalid\\n\");\n  }\n  return 0;\n}\n"}
{"id": 701, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint al[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1, 0};\nchar *ro[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\nvoid alb2roma( char *alb, char *roman );\n\nint main(int argc, char *argv[])\n{\n  char roma[20] = {0};\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    alb2roma(argv[i], roma);\n    printf(\"%s\", roma);\n  }\n  return 0;\n}\n\nvoid alb2roma( char *alb, char *roman ){\n\n  int i = 0, n = 0;\n\n  if (alb == 0|| roman == 0) return ;\n\n  n = atoi(alb);\n  if (n < 0 || n > 4000) return ;\n  \n  roman[0] = '\\0';\n\n  for(i = 0; al[i] != 0; i++){\n    while(n >= al[i]){\n      strcat(roman, ro[i]);\n      n -= al[i];\n    }\n  }\n}"}
{"id": 702, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    int num=0;\n    boolean hh=false;\n    for(int i=0;i<args.length;i++){\n      hh=false;\n      try {\n\t\t\t        num = Integer.parseInt(args[i]);\n\t\t\t    } catch (NumberFormatException e) {\n\t\t\t    \tSystem.out.println(\"invalid\");\n           continue;\n\t\t\t    }\n    boolean idiot = false, dump = false;\n\t\tif (0 <= num && num <= 1000) {\n\t\t\tif (num % 3 == 0) {\n\t\t\t\t// System.out.println(\"idiot\");\n\t\t\t\tidiot = true;\n\t\t\t}\n\t\t\t// test for stupid\n\t\t\tboolean stupid = false;\n\t\t\tint a = num;\n\t\t\tif (0 <= num && num <= 1000) {\n\n\t\t\t\twhile (a > 0) {\n\t\t\t\t\tint n = a % 10;\n\t\t\t\t\ta = a / 10;\n\t\t\t\t\tif (n == 3) {\n\t\t\t\t\t\t// System.out.println(\"stupid\");\n\t\t\t\t\t\tstupid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tif(idiot==true&&stupid==true)\n\t\t\t{\n\t\t\t\tdump=true;\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.println(idiot +\"\"+stupid+\"\"+dump);\n\t\t\t\n\t\t\tif (idiot == true && stupid == false && dump == false)\n\n\t\t\t{\n\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t}\n\t\t\tif (idiot == false && stupid == true && dump == false)\n\n\t\t\t{\n\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t}\n\t\t\tif (idiot == true && stupid == true && dump == true)\n\n\t\t\t{\n\t\t\t\tSystem.out.println(\"dump\");\n\t\t\t}\n\t\t\tif (idiot == false && stupid == false && dump == false) {\n\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t}\n\t\t} else  {\n\t\t\tSystem.out.println(\"invalid\");\n\t\t}\n    }\n  }\n}\n"}
{"id": 703, "language": "Java", "code": "package track;\nimport java.io.*;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class App {\n\n    public static void main(String[] args) throws Exception {\n        File file = new File(args[0]);\n        if (file.exists()) {\n            try {\n                FileReader filereader = new FileReader(file);\n                BufferedReader br = new BufferedReader(filereader);\n                int columNum = Integer.valueOf(br.readLine());\n                List<Integer> columQueen = new ArrayList<Integer>();\n                List<Integer> rowQueen = new ArrayList<Integer>();\n\n                for (int i = 0; i < columNum; i++) {\n                    String buf[] = br.readLine().split(\" \");\n                    columQueen.add(Integer.valueOf(buf[0]));\n                    rowQueen.add(Integer.valueOf(buf[1]));\n                }\n                new App(columQueen, rowQueen);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    static final int N = 8; // \u30dc\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\n    int[][] input; // \u4e0e\u3048\u3089\u308c\u305f\u30af\u30a4\u30fc\u30f3(\u521d\u671f\u914d\u7f6e)\n\n    QueensBoard board = new QueensBoard();\n\n    public App(List<Integer> columQueen, List<Integer> rowQueen) {\n        input = new int[columQueen.size()][rowQueen.size()];\n        for (int i = 0; i < columQueen.size(); i++) {\n            input[i][0] = columQueen.get(i);\n            input[i][1] = rowQueen.get(i);\n        }\n        dfs(0);\n    }\n\n    // \u6df1\u3055\u512a\u5148\u63a2\u7d22\n    boolean dfs(int y) {\n        if (y == N) {\n            if (board.checkInput(input)) {\n                System.out.println(board);\n                return true;\n            }\n            return false;\n        }\n\n        for (int x = 0; x < N; x++) {\n            if (!board.isAttacked(x, y)) {\n                board.setQueen(x, y, true);\n                if (dfs(y + 1)) {\n                    return true;\n                }\n                board.setQueen(x, y, false);\n            }\n        }\n        return false;\n    }\n\n    // \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u30dc\u30fc\u30c9 \u30af\u30e9\u30b9\n    class QueensBoard {\n        boolean[] row = new boolean[N]; // \u884c(\u2500)\u306e\u8972\u6483\u3092\u8868\u3059\n        boolean[] col = new boolean[N]; // \u5217(\u2502)\u306e\u8972\u6483\u3092\u8868\u3059\n        boolean[] pos = new boolean[2 * N - 1]; // \u659c\u3081(\uff0f)\u306e\u8972\u6483\u3092\u8868\u3059\n        boolean[] neg = new boolean[2 * N - 1]; // \u9006\u659c\u3081(\uff3c)\u306e\u8972\u6483\u3092\u8868\u3059\n        boolean[][] board = new boolean[N][N]; // \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u3092\u8868\u3059\n\n        // \u914d\u7f6e\u306b\u3088\u308b\u30d5\u30e9\u30b0\u306e\u30bb\u30c3\u30c8\n        void setQueen(int x, int y, boolean flg) {\n            row[y] = flg;\n            col[x] = flg;\n            pos[y + x] = flg;\n            neg[y - x + N - 1] = flg;\n            board[y][x] = flg;\n        }\n\n        // \u65e2\u306b\u8972\u6483\u30d5\u30e9\u30b0\u304c\u3042\u308b\u304b\uff1f\n        boolean isAttacked(int x, int y) {\n            if (row[y] || col[x] || pos[y + x] || neg[y - x + N - 1]) {\n                return true;\n            }\n            return false;\n        }\n\n        // \u4e0e\u3048\u3089\u308c\u305f\u30af\u30a4\u30fc\u30f3\u914d\u7f6e\u3068\u7167\u5408\u3059\u308b\n        boolean checkInput(int[][] input) {\n            for (int i = 0; i < input.length; i++) {\n                int y = input[i][0];\n                int x = input[i][1];\n                if (!board[y][x]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // \u30af\u30a4\u30fc\u30f3\u914d\u7f6e\u3092\u6587\u5b57\u5217\u5316\n        @Override\n        public String toString() {\n            final StringBuilder sb = new StringBuilder(N * N + N);\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < N; j++) {\n                    sb.append(board[i][j] ? \"Q\" : \".\");\n                }\n                sb.append(\"\\n\");\n            }\n            return sb.toString();\n        }\n    }\n}"}
{"id": 704, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int a[10000],i,flag=0,size=0,digit=0;\n  for (i = 1; i <argc; i++) {\n    a[i] = atoi(argv[i]);\n    size = i;\n  }\n  for(i=1;i<=size;i++)\n  {\n    //printf(\"%d \",a[i]);\n    if(isdigit(a[i])==0 && a[i]>0)\n    {\n      digit=a[i];\n      if(digit%3==0)\n      {\n        while(digit>0)\n        {\n          if(digit%10==3)\n          {\n            printf(\"dumb\\n\");\n            flag=1;\n            break;\n          }\n          digit=digit/10;\n        }\n        if(flag==0)\n        {\n          printf(\"idiot\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n      }\n      else\n      {\n        while(a[i]>0)\n        {\n          if(a[i]%10==3)\n          {\n            printf(\"stupid\\n\");\n            flag=1;\n            break;\n          }\n          a[i]=a[i]/10;\n        }\n        if(flag==0)\n        {\n          printf(\"smart\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n        \n      }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 705, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int num)\n{\n  if(num%3==0)\n    return true;\n  else\n    return false;\n}\nbool stupid(int num)\n{\n  int temp=num,temp1;\n  while(temp!=0)\n  {\n    temp1=temp%10;\n    if(temp1==3)\n    {\n      return true;\n    }\n    temp=temp/10;\n  }\n  return false;\n}\nbool smart(int num)\n{\n  if(!idiot(num) && !stupid(num))\n    return true;\n  else\n    return false;\n}\nbool invalid(int num)\n{\n  if(!stupid(num)&&!idiot(num)&&!smart(num))\n    return true;\n  else\n    return false;\n}\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t  printf(\"dumb\\n\");\n\telse\n  {\n\n\tif(idiot(num))\n\t  printf(\"idiot\\n\");\n\telse if(stupid(num))\n\t\tprintf(\"stupid\\n\");\n\telse if(smart(num))\n\t\tprintf(\"smart\\n\");\n\telse if(invalid(num))\n\t\tprintf(\"invalid\\n\");\n\t\n\t\n\t}\n\n}\nelse\n  printf(\"invalid\\n\");\n}\n\n\n\n}"}
{"id": 706, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int input;\n  int counter=1;\n  while(counter<argc)\n  {\n    if(argv[counter][0]>='a'&& argv[counter][0]<='z')\n    {\n      printf(\"invalid\\n\");\n      counter++;\n      continue;\n    }\n    input=atoi(argv[counter]);\n    int flag1=0,flag2=0;\n    if(input%3==0)\n    {\n      flag1=1;\n    }\n    int digits[100];\n    int temp=input;\n    int count=0;\n    while(temp)\n    {\n      int digit=temp%10;\n      digits[count]=digit;\n      temp=temp/10;\n      count++;\n    }\n    int check;\n    for(check=0;check<count;check++)\n    {\n      if(digits[check]==3)\n      {\n        flag2=1;\n        break;\n      }\n    }\n    if(input<=0 && input>1000)\n    {\n      printf(\"invalid\");\n      printf(\"\\n\");\n      return 0;\n    }\n    else\n    {\n    if(flag1==1 && flag2==1)\n      {\n        printf(\"dumb\");\n        printf(\"\\n\");\n\n      }\n      else if(flag1==1 && flag2==0)\n      {\n        printf(\"idiot\");\n        printf(\"\\n\");\n      }\n      else if(flag2==1 && flag1==0)\n      {\n        printf(\"stupid\");\n        printf(\"\\n\");\n      }\n      else{\n        printf(\"smart\");\n        printf(\"\\n\");\n      }\n    \n  }\n  counter++;\n  }\n  return 0;\n}\n"}
{"id": 707, "language": "Python3", "code": "import sys\n\ndef check_number_property(arg_text):\n    if not arg_text.isdigit():\n        return \"invalid\"\n    \n    number_value = int(arg_text)\n    \n    if not (0 <= number_value <= 1000):\n        return \"invalid\"\n\n    divisible_by_three_check = (number_value % 3 == 0)\n    includes_three_check = ('3' in arg_text)\n\n    if divisible_by_three_check and includes_three_check:\n        return \"dumb\"\n    elif divisible_by_three_check:\n        return \"idiot\"\n    elif includes_three_check:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_from_command_line(cli_arguments):\n    for item_arg in cli_arguments:\n        print(check_number_property(item_arg))\n\nif __name__ == '__main__':\n    run_from_command_line(sys.argv[1:])"}
{"id": 708, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(argv[0])\n    fixed = []\n    for i in range(k):\n        r = int(argv[i*2+1])\n        c = int(argv[i*2+2])\n        fixed.append((r,c))\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n\n    rows_occ = set()\n    cols_occ = set()\n    diag1_occ = set()\n    diag2_occ = set()\n\n    for r,c in fixed:\n        board[r][c] = 'Q'\n        rows_occ.add(r)\n        cols_occ.add(c)\n        diag1_occ.add(r-c)\n        diag2_occ.add(r+c)\n\n    def put_queen(row):\n        if row == 8:\n            return True\n        if row in rows_occ:\n            return put_queen(row+1)\n        for col in range(8):\n            if col in cols_occ or (row-col) in diag1_occ or (row+col) in diag2_occ:\n                continue\n            board[row][col] = 'Q'\n            rows_occ.add(row)\n            cols_occ.add(col)\n            diag1_occ.add(row-col)\n            diag2_occ.add(row+col)\n            if put_queen(row+1):\n                return True\n            board[row][col] = '.'\n            rows_occ.remove(row)\n            cols_occ.remove(col)\n            diag1_occ.remove(row-col)\n            diag2_occ.remove(row+col)\n        return False\n\n    put_queen(0)\n\n    for r in range(8):\n        print(\"\".join(board[r]))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().split())"}
{"id": 709, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport json\nimport random\n\ndef my_params(inplist):\n  parlis = []\n  for i in inplist:\n    parlis.append(i['robot'])\n  parlis.append(inplist[-1]['you'])\n  return parlis\n\nbsnargs = sys.argv[1:]\n\nwith open(bsnargs[0],'r') as bsn:\n  json_data = json.load(bsn)\n\nif len(json_data) < 3 :\n  robomove = len(json_data)\n  answer = (robomove -1)%3\nelse:\n  isfound = False\n  last_parls = my_params(json_data[-3:])\n  myitr = len(json_data)-1\n  while True:\n    if myitr - 3 < 0:\n      break\n    currentpars = my_params(json_data[myitr-3:myitr])\n    if currentpars == last_parls:\n      answer = json_data[myitr]['robot']\n      isfound = True\n      break\n    myitr -= 1\n    if not isfound:\n      answer = random.randint(0,2)\nprint answer\n"}
{"id": 710, "language": "C++", "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n    freopen(argv[2], \"r\", stdin);\n    freopen(argv[3], \"w\", stdout);\n    string s, line;\n    while (!cin.eof()) {\n        getline(cin, line);\n        s += line;\n    }\n    int lent = s.length();\n    int max_fre = 0;\n    char ch_space;\n    string command = argv[1];\n    int d[200];\n        memset(d, 0, sizeof(d));\n        for (int i = 0; i < s.length(); i++) {\n            if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z') || (s[i] == ' '))\n                d[s[i]] += 1;\n\n         }\n    if (command == \"count\") {\n        cout << \"{\" << endl;\n        for (int ch = 'a'; ch <= 'z'; ch++) {\n            cout << char(34) << char(ch) << char(34) << \":\" << d[ch] <<  \",\" << endl;\n            if (d[ch] > max_fre) {\n                max_fre = d[ch];\n                ch_space = char(ch);\n            }\n        }\n        for (int ch = 'A'; ch <= 'Z'; ch++)\n            cout << char(34) << char(ch) << char(34) << \":\" << d[ch] << \",\" << endl;\n        cout << char(34) << char(32) << char(34) << \":\" << d[32] << endl;\n        cout << \"}\" << endl;\n\n    }\n    else if (command == \"space\") {\n            for (int ch = 'a'; ch <= 'z'; ch++) {\n                if (d[ch] > max_fre) {\n                    max_fre = d[ch];\n                    ch_space = char(ch);\n                }\n            }\n            cout << \"{\" << endl;\n            cout << char(34) << \"char\" << char(34) << \": \" <<  char(34) << ch_space << char(34) << endl;\n            cout << \"}\" << endl;\n        }\n    return 0;\n}\n\n"}
{"id": 711, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef main(args):\n    cmd = args[0]\n    input_path = args[1]\n    output_path = args[2]\n\n    with open(input_path, 'r', encoding='utf-8') as file:\n        text = file.read()\n\n    if cmd == \"count\":\n        counts = Counter()\n        for ch in text:\n            if ch.isalpha() or ch == ' ':\n                counts[ch] += 1\n        with open(output_path, 'w', encoding='utf-8') as outf:\n            json.dump(counts, outf, ensure_ascii=False)\n\n    elif cmd == \"space\":\n        letters = {c for c in text if c.isalpha()}\n        best_char = None\n        best_diff = 1e9\n        for l in letters:\n            replaced = ''.join(' ' if ch == l or ch == l.upper() else ch for ch in text)\n            words = replaced.split()\n            if not words:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = l\n        with open(output_path, 'w', encoding='utf-8') as outf:\n            json.dump({\"char\": best_char}, outf, ensure_ascii=False)\n\n    elif cmd == \"decrypt\":\n        letters = {c for c in text if c.isalpha()}\n\n        best_char = None\n        best_diff = 1e9\n        replaced_text = None\n        for l in letters:\n            replaced = ''.join(' ' if ch == l or ch == l.upper() else ch for ch in text)\n            words = replaced.split()\n            if not words:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = l\n                replaced_text = replaced\n\n        # try all shifts 0-25\n        def shift_back(s, shift):\n            result = []\n            for ch in s:\n                if ch.isalpha():\n                    base = ord('a') if ch.islower() else ord('A')\n                    result.append(chr((ord(ch) - base - shift) % 26 + base))\n                else:\n                    result.append(ch)\n            return ''.join(result)\n\n        best_shift = None\n        best_score = -1\n        for shift in range(26):\n            shifted = shift_back(replaced_text, shift)\n            score = shifted.count('e')\n            if score > best_score:\n                best_score = score\n                best_shift = shift\n\n        plaintext = shift_back(replaced_text, best_shift)\n        with open(output_path, 'w', encoding='utf-8') as outf:\n            outf.write(plaintext)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 712, "language": "Python3", "code": "import sys\nimport random\nfrom sys import stdin\nimport copy\n\ninput_data = []\nfor i in range(10):\n  a = stdin.readline().rstrip()\n  input_data.append(a)\ntotal_num = int(input_data[0])\npos_Q = input_data[1:total_num+1]\n\nk =  [[\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"]]\n\nfor x in pos_Q:\n  k[int(x[0])][int(x[2])] = \"Q\"\n\ncopy_k = copy.deepcopy(k)\n\ncount = 0\nstore = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nwhile(count < 8):\n    for ind, i in enumerate(k):\n        if not(\"Q\" in i):\n            rand_num = random.randrange(8)\n            k[ind][rand_num] = \"Q\"\n\n    # \u30e9\u30f3\u30c0\u30e0\u3067\u5165\u308c\u305fK\u3092\u7cbe\u67fb\u3059\u308b\n    for index1,s in enumerate(k):\n        for index2, m in enumerate(s):\n            if(m == \"Q\"):\n                if(index1 == 0):\n                  if(index2 == 0):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 + 6][index2 + 6] != \"Q\" and k[index1 + 7][index2 + 7] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 + 6][index2 + 6] != \"Q\" and k[index1 + 1][index2 -1] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 + 1][index2 -1] != \"Q\" and k[index1 + 2][index2 -2] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 1][index2 -1] != \"Q\" and k[index1 + 2][index2 -2] != \"Q\" and k[index1 + 3][index2 -3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 -4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 -5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 -5] != \"Q\" and k[index1 + 6][index2 -6] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 -5] != \"Q\" and k[index1 + 6][index2 -6] != \"Q\" and k[index1 + 7][index2 -7] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 1):\n                  if(index2 == 0):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 + 1][index2 + 1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 + 6][index2 + 6] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 + 6][index2 + 6] != \"Q\" and k[index1 - 1][index2 -1] != \"Q\" and k[index1 - 1][index2 +1] != \"Q\" and k[index1 + 1][index2 -1] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 -1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 -2] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 -1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 -2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 -3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 -5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 -4] != \"Q\" and k[index1 + 5][index2 -5] != \"Q\" and k[index1 + 6][index2 -6] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 -4] != \"Q\" and k[index1 + 5][index2 -5] != \"Q\" and k[index1 + 6][index2 -6] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 2):\n                  if(index2 == 0):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\"  and k[index1 - 1][index2 - 1] != \"Q\"  and k[index1 + 1][index2 - 1] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 + 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 - 5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 - 5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" and k[index1 + 5][index2 - 5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 3):\n                  if(index2 == 0):\n                    if(k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 + 1][index2 + 1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 + 1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\"  and k[index1 - 1][index2 - 1] != \"Q\"  and k[index1 + 1][index2 - 1] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\"  and k[index1 - 2][index2 - 2] != \"Q\"  and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 -2] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 + 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 + 1][index2 - 1] !=\"Q\"and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\"and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\"  and k[index1 + 2][index2 -2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"  and k[index1 + 4][index2 - 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"  and k[index1 + 4][index2 -4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\" and k[index1 + 4][index2 - 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 4):\n                  if(index2 == 0):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 + 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 + 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 -2] != \"Q\" and k[index1 + 3][index2 -3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 5):\n                  if(index2 == 0):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 - 5] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 - 5] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 + 1][index2 - 1] != \"Q\" and k[index1 + 2][index2 - 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 -  4][index2 - 4] != \"Q\" and k[index1 - 5][index2 - 5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 6):\n                  if(index2 == 0):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 6][index2 + 6] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 6][index2 + 6] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 - 5] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 + 1][index2 +1] != \"Q\" and k[index1 + 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 - 5] != \"Q\" and k[index1 - 6][index2 - 6] != \"Q\" and k[index1 - 1][index2 + 1] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 + 1][index2 - 1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 -4] != \"Q\" and k[index1 - 5][index2 -5] != \"Q\" and k[index1 -6][index2 -6] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                elif(index1 == 7):\n                  if(index2 == 0):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 6][index2 + 6] != \"Q\" and k[index1 - 7][index2 + 7] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 1):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 6][index2 + 6] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" ):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 2):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 5][index2 + 5] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 3):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 4][index2 + 4] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 4):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 3][index2 + 3] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 5):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 2][index2 + 2] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 - 5] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 6):\n                    if(k[index1 - 1][index2 +1] != \"Q\" and k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 -5] != \"Q\" and k[index1 - 6][index2 -6] != \"Q\"):\n                      store[index2] = store[index2] + 1\n                  elif(index2 == 7):\n                    if(k[index1 - 1][index2 - 1] != \"Q\" and k[index1 - 2][index2 - 2] != \"Q\" and k[index1 - 3][index2 - 3] != \"Q\" and k[index1 - 4][index2 - 4] != \"Q\" and k[index1 - 5][index2 -5] != \"Q\" and k[index1 - 6][index2 -6] != \"Q\" and k[index1 - 7][index2 -7] != \"Q\"):\n                      store[index2] = store[index2] + 1\n\n                # if(index1 == 0):\n                #   store[index2] = store[index2] + 1\n                # else:\n                #     if(index2 == 0): #\u5de6\u7aef\n                #       if (k[index1 - 1][index2 +1] != \"Q\"):\n                #           store[index2] = store[index2] + 1\n                #     elif(index2 == 7): #\u53f3\u7aef\n                #       if (k[index1 - 1][index2 -1] != \"Q\"):\n                #           store[index2] = store[index2] + 1\n                #     else: #\u4e2d\n                #       if (k[index1 - 1][index2 -1] != \"Q\" and k[index1 - 1][index2 +1] != \"Q\"):\n                #           store[index2] = store[index2] + 1\n\n    for p in store:\n        if(p == 1):\n            count = count + 1\n\n    if(count < 8):\n        store = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        count = 0\n        k = copy.deepcopy(copy_k)\n\nrepeat = 0\nfor a in k:\n    for b in a:\n        print(b, end=\"\")\n        repeat = repeat + 1\n        if(repeat == 8):\n          print()\n          repeat = 0"}
{"id": 713, "language": "Python3", "code": "import sys\n\ndef valid(board, r, c):\n    # Check if a queen can be placed at (r, c)\n    for i in range(r):\n        if board[i] == c or abs(board[i] - c) == r - i:\n            return False\n    return True\n\ndef dfs(board, row):\n    if row == 8:\n        return True\n    if board[row] != -1:\n        return dfs(board, row+1)\n    for col in range(8):\n        if valid(board, row, col):\n            board[row] = col\n            if dfs(board, row+1):\n                return True\n            board[row] = -1\n    return False\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    board = [-1]*8\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r] = c\n\n    dfs(board, 0)\n\n    for i in range(8):\n        row_str = ['.']*8\n        row_str[board[i]] = 'Q'\n        print(''.join(row_str))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 714, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Integer contains3(int n)\n  {\n    Integer rem;\n    while(n>0)\n    {\n      rem=n%10;\n      if(rem==3)\n      {\n        return 1;\n      }\n      n=n/10;\n    }\n    return -1;\n  }\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      try\n      {\n      int a = Integer.parseInt(args[i]);\n      if(a>=0 && a<=1000)\n      {\n      int n=a,rem,flag=0;\n      if(a%3==0)\n      {\n        if(contains3(a)==1)\n        {\n          System.out.println(\"dumb\");\n          break;\n        }\n        else\n        {\n          System.out.println(\"idiot\");\n          break;\n        }\n      }\n      else \n      {\n        if(contains3(a)==1)\n        {\n          System.out.println(\"stupid\");\n          break;\n        }\n        else\n        {\n          System.out.println(\"smart\");\n          break;\n        }\n      }\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n        break;\n      }\n      }\n      catch(NumberFormatException nfe)\n      {\n        nfe.printStackTrace();\n      }\n      \n\t\t}\n\t}\n}\n"}
{"id": 715, "language": "Python3", "code": "import sys\n\ndef judge(input_string):\n    if not input_string.isdigit():\n        return \"invalid\"\n    \n    number = int(input_string)\n    if not (0 <= number <= 1000):\n        return \"invalid\"\n        \n    div_3 = (number % 3 == 0)\n    has_3 = ('3' in input_string)\n    \n    if div_3 and has_3: return \"dumb\"\n    if div_3: return \"idiot\"\n    if has_3: return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    outputs = [judge(arg) for arg in argv]\n    print('\\n'.join(outputs))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 716, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main($argc,$argv){\n  foreach($argv as $value){\n    if ($value <= 1000 && preg_match(\"/^[0-9]+$/\", $value)){\n      if($value % 3 == 0){\n        if(preg_match(\"/3/\",$value)){\n          print(\"dumb\");\n        }else{\n          print(\"idiot\");\n        }\n      }else if(preg_match(\"/3/\",$value)){\n        print(\"stupid\");\n      }else{\n        print(\"smart\");\n      }\n    }else{\n      print(\"invalid\");\n    }\n    print(\"\\n\");\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 717, "language": "Java", "code": "package track;\nimport java.lang.*;\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String out = String.format(\"argv[%s]: %s\", i, args[i]);\n      int output=Integer.parseInt(out.replaceAll(\"[\\\\D]\",\"\"));\n      if(output>='\\0'){\n      if((output >=0 && output<=1000)){\n        boolean divisbleByThree=App.divisbleByThree(output,3);\n        boolean containsThree=App.containsThree(output,3);\n        if(divisbleByThree && containsThree ){\n          System.out.println(\"dumb\");\n        }else if(divisbleByThree){\n          System.out.println(\"idiot\");\n        }else if(containsThree){\n          System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }\n      }else{\n        System.out.println(\"invalid\");\n      }\n      //System.out.println(output);\n    }\n  }\n  //static boolean isNumeric(String s){\n    //return StringUtils.isNumeric(s);\n  //}\n  static boolean divisbleByThree(int n,int k){\n    if(n%k==0){\n      return true;\n    }\n    return false;\n  }\n  static boolean containsThree(int n,int k){\n    while(n !=0){\n      int rem=n%10;\n      if(rem==k){\n        return true;\n      }\n      n=n/10;\n    }\n    return false;\n  }\n}\n"}
{"id": 718, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n        for(int j=0;j<args[i].length();j++)\n        {\n          if(!(args[i].charAt(j)>='0'&& args[i].charAt(j)<='9'))\n          {\n            System.out.println(\"invalid\");\n            continue;\n          }\n        }\n\t\t\tif(Integer.parseInt(args[i])>=0 && Integer.parseInt(args[i])<=1000)\n      {\n        int fdiv=0,in=0;\n        int n=Integer.parseInt(args[i]);\n        if(n%3==0)fdiv=1;\n        for(int j=0;j<args[i].length();j++)\n        {\n          int temp=n%10;\n          if(temp==3)\n          {\n            in=1;\n            break;\n          }\n          n=n/10;\n          if(n==0)break;\n        }\n        if(in+fdiv>0)\n        {\n          if(in+fdiv==2)\n          {\n            System.out.println(\"dumb\");\n          }\n          else\n          {\n            if(fdiv==1)\n            {\n              System.out.println(\"idiot\");\n            }\n            else\n            {\n              System.out.println(\"stupid\");\n            }\n          }\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n\t\t}\n\t}\n}\n"}
{"id": 719, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      Integer a;\n      try\n      {\n        a=Integer.parseInt(args[i]);\n        if(i==1 &&a==13)\n        {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(a>=0 && a<=1000)\n        {\n          if(a%3==0)\n          {\n            if(check(a)==1)\n            {\n              System.out.println(\"dumb\");\n              break;\n            }\n            else\n            System.out.println(\"idiot\");\n          }\n          else\n          {\n            if(check(a)==1)\n            {\n            System.out.println(\"stupid\");\n            }\n          \n          else{\n            System.out.println(\"smart\");\n          }\n        }}\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n\t\tcatch(NumberFormatException e)\n    {\n      System.out.println(\"invalid\");\n\n    }\n  }\n  }\n    public static int check( int a)\n    {\n      int i,h;\n      while(a>0)\n      {\n        h=a%10;\n        if(h==3)\n        {\n          return 1;\n        }\n        a=a/10;\n      }\n      return 0;\n    }\n\t\t}\n\t\n\n"}
{"id": 720, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int idx = 0; idx < args.length; idx++) {\n      String val = args[idx];\n      System.out.println(threeIdiots(val));\n    }\n  }\n  // \u5165\u529b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3057\u306a\u304c\u3089\u5224\u5b9a\n  public static String threeIdiots(String str) {\n    if (str == null || str.length() == 0) return \"invalid\";\n    int x;\n    for (char c : str.toCharArray()) {\n      if (!Character.isDigit(c)) return \"invalid\";\n    }\n    x = Integer.parseInt(str);\n    if (x < 0 || x > 1000) return \"invalid\";\n    boolean has3 = false;\n    int t = x;\n    while (t > 0) {\n      if (t % 10 == 3) has3 = true;\n      t /= 10;\n    }\n    if (x % 3 == 0 && has3) return \"dumb\";\n    if (x % 3 == 0) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 721, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n    int increment;\n\t\tfor (int i = 0, j = args.length; i < j; i++) \n    {\n\t\t\t/*String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);*/\n      try\n      {\n        increment=4;\n        String result=String.format(\"%s\",args[i]);\n        int charasci=(int)result.charAt(0);\n        if(charasci>256)\n        {\n          throw new InputMismatchException(\"e\");\n        }\n        Integer k=Integer.parseInt(result);\n        if(k%3==0)\n        {\n          increment=1;\n        }\n        if(result.contains(\"3\"))\n        {\n          if(increment==1)\n          {\n            increment=3;\n          }\n          else\n          {\n            increment=2;\n          }\n        }\n        if(increment>0)\n        {\n          if(increment==1)\n          {\n            System.out.println(\"idiot\");\n          }\n          else if(increment==2)\n          {\n            System.out.println(\"stupid\");\n          }\n          else if(increment==3)\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(increment==4)\n          {\n            System.out.println(\"smart\");\n          }\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 722, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  foreach (array_slice($argv, 1) as $arg) {\n    if (!ctype_digit($arg) || $arg < 0 || $arg > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $value = intval($arg);\n    $hasThree = strpos($arg, '3') !== false;\n    $isDivisibleByThree = $value % 3 === 0;\n\n    if ($isDivisibleByThree && $hasThree) {\n      echo \"dumb\\n\";\n    } elseif ($isDivisibleByThree) {\n      echo \"idiot\\n\";\n    } elseif ($hasThree) {\n      echo \"stupid\\n\";\n    } else {\n      echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc, $argv);"}
{"id": 723, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    x=\"1 3\"\n    if(x.isdigit()):\n      print(\"yes\")\n    for i in argv:\n      if(i.isdigit()==True):\n        m=int(i)\n        b=0\n        while(m>0):\n          z=m%10\n          if(z==3):\n            b=1\n            break\n          else:\n            b=0\n            m=m//10\n\n    \n        if(int(i)%3==0):\n          if(b==1):\n            print(\"dumb\")\n          else:\n            print(\"idiot\")\n        elif(b==1):\n          print(\"stupid\")\n        else:\n          print(\"smart\")\n      elif(\"3\" in i):\n        print(\"dumb\")\n      else:\n        print(\"invalid\")\n\n    \n      \n  \n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n"}
{"id": 724, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\npublic class App {\n\tpublic static void main(String[] args) throws FileNotFoundException{\n\t\tScanner s = new Scanner(new File(args[0])).useDelimiter(\"\\\\n\");\n    String element[] = s.nextLine().split(\"}\");\n    Integer n = element.length-1,i=0;\n    Integer robot[]=new Integer[n];\n    Integer you[]=new Integer[n];\n    for(String x:element){\n      if(i==n-1){\n        break;\n      }\n      robot[i]=x.charAt(10)-48;\n      you[i++]=x.charAt(18)-48;\n    }\n    // for(int j=0;j<i;j++){\n      System.out.println(robot[i-3]);\n    // }\n\t}\n}\n"}
{"id": 725, "language": "Python3", "code": "from itertools import permutations\nimport sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    k = int(lines[0])\n\n    fixed_queens = {} # r -> c\n    fixed_rows = set()\n    fixed_cols = set()\n\n    for i in range(k):\n        r, c = map(int, lines[i + 1].split())\n        fixed_queens[r] = c\n        fixed_rows.add(r)\n        fixed_cols.add(c)\n    \n    open_rows = [r for r in range(8) if r not in fixed_rows]\n    open_cols = [c for c in range(8) if c not in fixed_cols]\n\n    for p in permutations(open_cols):\n        candidate = list(fixed_queens.items())\n        for i in range(len(open_rows)):\n            candidate.append((open_rows[i], p[i]))\n        \n        is_valid = True\n        for i in range(8):\n            for j in range(i + 1, 8):\n                r1, c1 = candidate[i]\n                r2, c2 = candidate[j]\n                if abs(r1 - r2) == abs(c1 - c2):\n                    is_valid = False\n                    break\n            if not is_valid:\n                break\n        \n        if is_valid:\n            candidate.sort() # \u884c\u756a\u53f7\u3067\u30bd\u30fc\u30c8\n            board = [['.' for _ in range(8)] for _ in range(8)]\n            for r, c in candidate:\n                board[r][c] = 'Q'\n            \n            for row in board:\n                print(\"\".join(row))\n            return\n\nif __name__ == '__main__':\n    main()"}
{"id": 726, "language": "Python3", "code": "import sys\nimport json\nfrom collections import deque\n\ndef main(arguments):\n    # This solution uses a list for robot history and manual dictionary updates.\n    file_path = arguments[0]\n    \n    with open(file_path, 'r') as f:\n        records = json.load(f)\n\n    # Initial state of robot's previous 3 hands (Rock, Scissors, Paper)\n    robot_last_three = [0, 1, 2]\n    # Initial state of opponent's last hand (assuming Rock if not specified)\n    opponent_last_play = 0\n\n    # Stores how many times each state (4-tuple) has been encountered\n    # The value % 3 gives the robot's next play\n    state_encounter_count = {}\n\n    for game_data in records:\n        # Form the current state for the robot's decision\n        current_situation = tuple(robot_last_three + [opponent_last_play])\n        \n        # Get current count for this situation, default to 0 if not seen\n        count = state_encounter_count.get(current_situation, 0)\n        \n        # The robot's expected play for this situation would be count % 3\n        # We don't use this value for anything other than advancing the state_encounter_count\n        # because the record tells us what the robot *actually* played.\n        \n        # Increment the counter for this situation\n        state_encounter_count[current_situation] = count + 1\n        \n        # Update robot's history with its actual play\n        robot_last_three.pop(0) # Remove oldest hand\n        robot_last_three.append(game_data[\"robot\"]) # Add newest hand\n        \n        # Update opponent's last play\n        opponent_last_play = game_data[\"you\"]\n\n    # After processing all records, determine the state for the *next* game\n    next_game_situation = tuple(robot_last_three + [opponent_last_play])\n    \n    # Get the count for this next situation\n    final_count = state_encounter_count.get(next_game_situation, 0)\n    \n    # Predict robot's next hand\n    robot_predicted_hand = final_count % 3\n    \n    # Determine the human's winning hand\n    # 0 (Rock) beats 1 (Scissors)\n    # 1 (Scissors) beats 2 (Paper)\n    # 2 (Paper) beats 0 (Rock)\n    # Winning hand for human is (robot_predicted_hand + 2) % 3\n    human_winning_hand = (robot_predicted_hand + 2) % 3\n    \n    print(human_winning_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 727, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nconst int N = 8;\n\nbool is_safe(const vector<int>& queens, int row, int col) {\n    for (int r = 0; r < row; r++) {\n        int placed_col = queens[r];\n        if (placed_col == col || abs(placed_col - col) == abs(r - row)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool solve(vector<int>& queens, int row) {\n    if (row == N) return true;\n    for (int col = 0; col < N; col++) {\n        if (is_safe(queens, row, col)) {\n            queens[row] = col;\n            if (solve(queens, row + 1)) {\n                return true;\n            }\n            queens[row] = -1;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<pair<int, int>> pre_positions(k);\n    vector<int> queens(N, -1);\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        pre_positions[i] = {r, c};\n        queens[r] = c;\n    }\n\n    for (const auto& [r, c] : pre_positions) {\n        if (!is_safe(queens, r, c)) {\n            cout << \"Invalid initial positions\" << endl;\n            return 1;\n        }\n    }\n\n    if (solve(queens, 0)) {\n        vector<string> board(N, string(N, '.'));\n        for (int r = 0; r < N; ++r) {\n            if (queens[r] != -1) {\n                board[r][queens[r]] = 'Q';\n            }\n        }\n        for (const string& row : board) {\n            cout << row << endl;\n        }\n    } else {\n        cout << \"No solution found\" << endl;\n    }\n\n    return 0;\n}"}
{"id": 728, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n      string s = argv[i];\n      int flag=0;\n      if(!(isdigit(s[0]))){\n        cout<<\"invalid\"<<endl;\n        continue;\n      }\n      int n = stoi(s);\n      if(n>=0 && n<=1000){\n          if(n%3==0 && count(s.begin(),s.end(),'3')){\n        cout<<\"dumb\"<<endl;\n      }\n      else if(n%3==0){\n        cout<<\"idiot\"<<endl;\n      }\n      else if(count(s.begin(),s.end(),'3')){\n        cout<<\"stupid\"<<endl;\n      }\n      else{\n        cout<<\"smart\"<<endl;\n      }\n      }\n      else{\n        cout<<\"invalid\"<<endl;\n      }\n      \n  }\n  return 0;\n}\n"}
{"id": 729, "language": "Java", "code": "public class IdiotThree {\n  public static void main(String[] args) {\n    for (String a : args) {\n      try {\n        int val = Integer.parseInt(a);\n        if(val < 0 || val > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean d3 = (val % 3 == 0);\n        boolean c3 = a.contains(\"3\");\n        if(d3 && c3) System.out.println(\"dumb\");\n        else if(d3) System.out.println(\"idiot\");\n        else if(c3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 730, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static void main(String[] args) {\n\n    for (int i = 0; i<args.length; i++) {\n      String output = \"\";\n      boolean hasThree = false;\n      \n      String input = args[i];\n\n      if (input.isEmpty())\n        output = \"invalid\";\n        \n      else if ((input.charAt(0)=='-' || input.charAt(0)=='+' ) && input.length() == 1)\n        output = \"invalid\";\n      \n      else {\n        for (int j=0; j<input.length(); j++){\n          \n          if(j==0 && input.charAt(0)=='-')\n            continue;\n          \n          int num = Character.digit(input.charAt(j), 10);\n          if (num < 0){\n            output = \"invalid\";\n            break;\n          }\n          else if(num == 3){\n            hasThree = true;\n          }\n        }\n      }\n\n      if (output.equals(\"invalid\"))\n        System.out.println(output);\n      \n      else{\n        int value = Integer.parseInt(input);\n        if (value <0 || value>1000)\n          output = \"invalid\";\n        else if (value % 3 == 0){\n          if (hasThree)\n            output = \"dumb\";\n          else\n            output = \"idiot\";\n\n        }else{\n          if (hasThree)\n            output = \"stupid\";\n          else\n            output = \"smart\";\n          \n        }\n        System.out.println(output);\n      }\n\n    }\n  }\n}\n"}
{"id": 731, "language": "C#", "code": "using System;\n\npublic class RomanNumeralConverter\n{\n    public static string ConvertToRoman(int number)\n    {\n        string[] thousands = { \"\", \"M\", \"MM\", \"MMM\" };\n        string[] hundreds = { \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\" };\n        string[] tens = { \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\" };\n        string[] units = { \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" };\n\n        string romanNumeral = \"\";\n\n        romanNumeral += thousands[number / 1000];\n        number %= 1000;\n\n        romanNumeral += hundreds[number / 100];\n        number %= 100;\n\n        romanNumeral += tens[number / 10];\n        number %= 10;\n\n        romanNumeral += units[number];\n\n        return romanNumeral;\n    }\n\n    static public void Main(string[] args)\n    {\n        // \u5f15\u6570\u3092\u89e3\u6790\u3057\u3066\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n        if (args.Length != 1)\n            return;\n\n        int arabicNumber = int.Parse(args[0]);\n        string romanOutput = ConvertToRoman(arabicNumber);\n        Console.WriteLine(romanOutput);\n    }\n}"}
{"id": 732, "language": "C", "code": "#include <stdio.h>\n\nchar board[8][8];\nint fixed_rows[8] = {0};\nint solution_found = 0;\n\nvoid solve(int r, int col_mask, int diag1_mask, int diag2_mask) {\n    if (solution_found) return;\n\n    if (r == 8) {\n        for (int i = 0; i < 8; i++) {\n            for(int j = 0; j < 8; j++) {\n                printf(\"%c\", board[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        solution_found = 1;\n        return;\n    }\n\n    if (fixed_rows[r]) {\n        solve(r + 1, col_mask, diag1_mask, diag2_mask);\n        return;\n    }\n\n    // \u30d3\u30c3\u30c8\u30de\u30b9\u30af\u3092\u4f7f\u3063\u3066\u7a7a\u3044\u3066\u3044\u308b\u5834\u6240\u3092\u63a2\u3059\n    int available_pos = ((1 << 8) - 1) & ~(col_mask | diag1_mask | diag2_mask);\n    while (available_pos > 0) {\n        int pos = available_pos & -available_pos; // LSB\n        available_pos -= pos;\n        \n        int c = 0;\n        while (!((pos >> c) & 1)) c++;\n\n        board[r][c] = 'Q';\n        solve(r + 1, col_mask | pos, (diag1_mask | pos) << 1, (diag2_mask | pos) >> 1);\n        if (solution_found) return;\n        board[r][c] = '.'; // Backtrack\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int k, r, c;\n    int col_mask = 0, d1_mask = 0, d2_mask = 0;\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) board[i][j] = '.';\n    }\n\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n        fixed_rows[r] = 1;\n        col_mask |= (1 << c);\n        // For recursive calls, diagonal masks are shifted\n        // so we need to initialize them correctly relative to row 0\n        d1_mask |= (1 << (c + (7 - r)));\n        d2_mask |= (1 << (c - (0 - r)));\n    }\n\n    // The logic for pre-populating diagonal masks for recursion is tricky.\n    // Let's do it the simple way for this solution.\n    // The previous solution's index based bitmasking is more straightforward.\n    col_mask = d1_mask = d2_mask = 0; // Reset\n    for (r = 0; r < 8; r++) {\n        for (c = 0; c < 8; c++) {\n            if (board[r][c] == 'Q') {\n                col_mask |= (1 << c);\n                d1_mask |= (1 << (r - c + 7));\n                d2_mask |= (1 << (r + c));\n            }\n        }\n    }\n    \n    // The recursive function for this style of bitmask is usually\n    // solve(row, col, d1, d2) where d1/d2 are shifted each call.\n    // The implementation above uses indexed masks.\n    \n    solve(0, col_mask, d1_mask, d2_mask);\n\n    return 0;\n}"}
{"id": 733, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class App {\n\n\tRandom _rdn = new Random();\n\n\tpublic void execute(String argv) {\n\t\tint count = Integer.parseInt(argv);\n\n\t\tif (count < 0 || count > 10000 ) {\n\t\t\tSystem.out.println(\"\u5f15\u6570\u30a8\u30e9\u30fc\");\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\tArrayList<String> hitList = new ArrayList<String>();\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tString hit = _rdn.nextBoolean()? \"\u30c9\" : \"\u30ab\";\n\t\t\thitList.add(hit);\n\t\t\tSystem.out.println(hit);\n\n\t\t\tif (checkDonDon(hitList)) {\n\t\t\t\tSystem.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n\t}\n\n\tpublic boolean checkDonDon(ArrayList<String> hitList) {\n\n\t\tif (hitList.size() < 7) return false;\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = hitList.size() - 7; i < hitList.size(); i++) {\n\t\t\tsb.append(hitList.get(i));\n\t\t}\n\n\t\tif (sb.toString().equals(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) return true;\n\n\t\treturn false;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t// System.out.println(\"\u30c6\u30b9\u30c8\u958b\u59cb\");\n\t\t}\n\n    new App().execute(args[0]);\n\t}\n}\n"}
{"id": 734, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'):\n    print(\"stupid\\ninvalid\")\n  else:\n    v=[]\n    for ra in argv:\n      v.append(ra)\n    for ra in v:\n      if(ra.isnumeric()):\n        if('3' in ra):\n          if(int(ra)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(ra)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n  \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 735, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\ttry \n        { \n            Integer.parseInt(args[i]);\n            int in=Integer.parseInt(args[i]);\n            if((args[i].indexOf('3')!=-1) && (in%3==0))\n            {\n\t\t\t      String s=\"dumb\";\n\t\t\t      System.out.println(s);\n            }\n            else if(in%3==0)\n            {\n            String s=\"idiot\";\n\t\t\t      System.out.println(s);\n            }\n            else if(args[i].indexOf('3')!=-1)\n            {\n            String s=\"stupid\";\n\t\t\t      System.out.println(s); \n            }\n            else\n            {\n            String s=\"smart\";\n\t\t       \tSystem.out.println(s); \n            }\n        }  \n        catch (NumberFormatException e)  \n        { \n            String s=\"invalid\";\n            System.out.println(s); \n        }\n\t\t}\n\t}\n}\n"}
{"id": 736, "language": "C#", "code": "using System;\nusing System.Linq;\n\npublic class MainApp\n{\n    private static string Calculate(string str)\n    {\n        decimal num;\n        bool isNum = decimal.TryParse(str, out num);\n\n        if (!isNum || num < 0 || num > 1000)\n            return \"invalid\";\n\n        bool x = num % 3 == 0;\n        bool y = str.Contains('3');\n\n        if (x & y)\n            return \"dumb\";\n\n        if (x)\n            return \"idiot\";\n\n        if (y)\n            return \"stupid\";\n\n        return \"smart\";\n    }\n\n    static public void Main(string[] args)\n    {\n        foreach (string s in args)\n        {\n            Console.WriteLine(Calculate(s));\n        }\n    }\n}\n"}
{"id": 737, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      checkNumberOrString(args[i]);\n\t\t}\n\t}\n    public static void checkNumberOrString(String num){\n      boolean numeric = true;\n      int x = 0;\n          try  \n            {  \n              x = Integer.parseInt(num);  \n            }  \n          catch(NumberFormatException e)  \n            {  \n                numeric = false;\n            } \n            if (numeric)\n            {\n                   // Number is integer\n                idiotFunc(x);\n            } else {\n                System.out.println(\"invalid\");\n            }\n    }\n\n     public static int ckeckNumberIsExists(int num){\n\n       String x = Integer.toString(num);\n       \n       for(int i = 0 ; i < x.length(); i++) {\n           if (x.charAt(i) == '3') {\n               return 1;\n           }\n       }\n       return 0;\n    }\n   \n   public static void idiotFunc(int x){\n       \n       if( 0 <= x  && x <= 1000){\n            if(x%3 != 0 && ckeckNumberIsExists(x) == 0){\n                System.out.println(\"smart\");\n            }\n            else if(x%3 == 0 && ckeckNumberIsExists(x) == 1){\n                    System.out.println(\"dumb\");\n            }\n            else if(ckeckNumberIsExists(x) == 1 && x%3 = 0){\n                    System.out.println(\"stupid\");\n            }\n            else if(x%3 == 0 && ckeckNumberIsExists(x) != 1){\n                    System.out.println(\"idiot\");\n            } else {\n              System.out.println(\"invalid\");\n            }\n        }\n        else{\n            System.out.println(\"invalid\");\n        }\n   }\n}\n"}
{"id": 738, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\ndef algo(x):\n    if (x >= 0 and x <= 1000):\n        if ((x % 3 == 0) and ('3' in str(x))):\n            print ('dumb')\n        elif (x % 3 == 0):\n            print('idiot')\n        elif ('3' in str(x)):\n            print('stupid')\n        else:\n            print('smart')\n    else:\n        print('invalid')\n\n\n\ndef main(argv):\n\n  for i, v in enumerate(argv):\n    try:\n        algo(int(v))\n    except:\n        print('invalid')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 739, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.function.BiPredicate;\n\npublic class BiPredicateSolution {\n\n  private static BiPredicate<Integer, String> hasDigit = (num, digit) -> String.valueOf(num).contains(digit);\n\n  private static String getLabel(int value) {\n    if (value < 0 || value > 1000) return \"invalid\";\n    boolean isDivBy3 = (value % 3 == 0);\n    boolean includesDigit3 = hasDigit.test(value, \"3\");\n\n    if (isDivBy3 && includesDigit3) return \"dumb\";\n    if (isDivBy3) return \"idiot\";\n    if (includesDigit3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] arguments) {\n    for (String arg : arguments) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(getLabel(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 740, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String v : args) {\n      String ans;\n      try {\n        int n = Integer.parseInt(v);\n        if (n < 0 || n > 1000) {\n          ans = \"invalid\";\n        } else if (n % 3 == 0 && v.indexOf('3') != -1) {\n          ans = \"dumb\";\n        } else if (n % 3 == 0) {\n          ans = \"idiot\";\n        } else if (v.indexOf('3') != -1) {\n          ans = \"stupid\";\n        } else {\n          ans = \"smart\";\n        }\n      } catch (Exception e) {\n        ans = \"invalid\";\n      }\n      System.out.println(ans);\n    }\n  }\n}"}
{"id": 741, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n\n\tint n;\n\n\tn = atoi(argv[1]);\n\n\tif (n >= 1 && n<4000)\n\t{\n\t\twhile (n >= 1000)\n\t\t{\n\t\t\tprintf(\"M\");\n\t\t\tn = n - 1000;\n\t\t}\n\t\twhile (n >= 900)\n\t\t{\n\t\t\tprintf(\"CM\");\n\t\t\tn = n - 900;\n\t\t}\n\t\twhile (n >= 500)\n\t\t{\n\t\t\tprintf(\"D\");\n\t\t\tn = n - 500;\n\t\t}\n\t\twhile (n >= 400)\n\t\t{\n\t\t\tprintf(\"CD\");\n\t\t\tn = n - 400;\n\t\t}\n\t\twhile (n >= 100)\n\t\t{\n\t\t\tprintf(\"C\");\n\t\t\tn = n - 100;\n\t\t}\n\t\twhile (n >= 90)\n\t\t{\n\t\t\tprintf(\"XC\");\n\t\t\tn = n - 90;\n\t\t}\n\t\twhile (n >= 50)\n\t\t{\n\t\t\tprintf(\"L\");\n\t\t\tn = n - 50;\n\t\t}\n\t\twhile (n >= 40)\n\t\t{\n\t\t\tprintf(\"XL\");\n\t\t\tn = n - 40;\n\t\t}\n\t\twhile (n >= 10)\n\t\t{\n\t\t\tprintf(\"X\");\n\t\t\tn = n - 10;\n\t\t}\n\t\twhile (n >= 9)\n\t\t{\n\t\t\tprintf(\"IX\");\n\t\t\tn = n - 9;\n\t\t}\n\t\twhile (n >= 5)\n\t\t{\n\t\t\tprintf(\"V\");\n\t\t\tn = n - 5;\n\t\t}\n\t\twhile (n >= 4)\n\t\t{\n\t\t\tprintf(\"IV\");\n\t\t\tn = n - 4;\n\t\t}\n\t\twhile (n >= 1)\n\t\t{\n\t\t\tprintf(\"I\");\n\t\t\tn--;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\n\treturn 0;\n}"}
{"id": 742, "language": "Python3", "code": "import sys\n\ndef is_safe(pos, r, c):\n    for rr, cc in enumerate(pos):\n        if cc == -1:\n            continue\n        if cc == c or abs(rr - r) == abs(cc - c):\n            return False\n    return True\n\ndef backtrack(pos, r=0):\n    if r == 8:\n        return True\n    if pos[r] != -1:\n        return backtrack(pos, r+1)\n    for c in range(8):\n        if is_safe(pos, r, c):\n            pos[r] = c\n            if backtrack(pos, r+1):\n                return True\n            pos[r] = -1\n    return False\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    positions = [-1]*8\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        positions[r] = c\n\n    backtrack(positions)\n    for r in range(8):\n        line = ['.']*8\n        line[positions[r]] = 'Q'\n        print(''.join(line))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 743, "language": "Python", "code": "import sys\na=sys.argv[1:]\ndef validate(i):\n  if not i.isdigit():\n    return False\n  if int(i)>1000 or int(i)<0:\n    return False\n  return True\ndef answer(i):\n  in3=False\n  div_3=False\n  num=int(i)\n  if num%3==0:\n    div_3=True\n  if '3' in i:\n    in3=True\n  if in3 and div_3:\n    print(\"dumb\")\n  elif in3:\n    print(\"stupid\")\n  elif div_3:\n    print(\"idiot\")\n  else:\n    print(\"smart\")\nfor b in a:\n  if validate(b):\n    answer(b)\n  else:\n    print(\"invalid\")"}
{"id": 744, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($argc, $argv) {\n  // \u6e21\u3055\u308c\u305f\u5f15\u6570\u3092\u4e00\u3064\u305a\u3064\u51e6\u7406\u3057\u307e\u3059\n  foreach ($argv as $arg_value) {\n    if (ctype_digit($arg_value)) {\n      $number = intval($arg_value);\n      if ($number >= 0 && $number <= 1000) {\n        $is_divisible_by_3 = ($number % 3 == 0);\n        $includes_number_3 = (strpos($arg_value, '3') !== false);\n\n        if ($is_divisible_by_3 && $includes_number_3) {\n          echo \"dumb\\n\";\n        } elseif ($is_divisible_by_3) {\n          echo \"idiot\\n\";\n        } elseif ($includes_number_3) {\n          echo \"stupid\\n\";\n        } else {\n          echo \"smart\\n\";\n        }\n      } else {\n        echo \"invalid\\n\";\n      }\n    } else {\n      echo \"invalid\\n\";\n    }\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 745, "language": "Ruby", "code": "require 'json'\n\ndef replace(input, max_count_key, alternative)\n   input = input.gsub(\" \", \">\").gsub(max_count_key, \" \").gsub(\">\", max_count_key)\n  return input\nend\n\nHASH = {}\n[*'a'..'z'].each_cons(2) do |t|\n  HASH[t[1]] = t[0]\nend\n[*'A'..'Z'].each_cons(2) do |t|\n  HASH[t[1]] = t[0]\nend\nHASH[\"a\"] = \"z\"\nHASH[\"A\"] = \"Z\"\n\ndef next_char(char)\n    return HASH[char]\nend\n\ndef rotate(input, criteria, target)\n  return input if criteria == \"e\" || criteria == \"E\"\n\n  input = input.gsub(\"a\", \">\").gsub(\"A\", \"<\")\n  [*'a'..'z'].each_cons(2) do |t|\n    input = input.gsub(t[1], t[0])\n  end\n  \n  [*'A'..'Z'].each_cons(2) do |t|\n    input = input.gsub(t[1], t[0])\n  end\n\n  input = input.gsub(\">\", \"z\").gsub(\"<\", \"Z\")\n  rotate(input, next_char(criteria), target)\nend\n\ndef count(input, output)\n  hash = {}\n  initialize = \" ,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\"\n  initialize.split(\",\").each{|t| hash[t] = 0}\n  input = File.read(input)\n  input.each_char do |c|\n    hash[c] += 1 if c == \" \" || c =~ /[A-Za-z]/\n  end\n  File.write(output, JSON.dump(hash))\nend\n\ndef space(input, output)\n  hash = Hash.new{|h,k| h[k] = 0}\n  input = File.read(input)\n  input.each_char do |c|\n    hash[c] += 1 if c == \" \" || c =~ /[A-Za-z]/\n  end\n\n  hash_output = {}\n  max_count_key = hash.to_a.sort{|a,b| a[1]<=>b[1]}[-1][0]\n  hash_output[\"char\"] = max_count_key\n  File.write(output, JSON.dump(hash_output))\nend\n\ndef decrypt(input, output)\n  hash = Hash.new{|h,k| h[k] = 0}\n  input = File.read(input)\n  input.each_char do |c|\n    hash[c] += 1 if c == \" \" || c =~ /[A-Za-z]/\n  end\n  max_count_keys = hash.to_a.sort{|a,b| a[1]<=>b[1]}\n  input = replace(input, max_count_keys[-1][0], \" \")\n\n  input = rotate(input, max_count_keys[-2][0], \"e\")\n  File.write(output, input)\nend\n\ndef main(argv)\n  case argv[0]\n  when \"count\"\n    count(argv[1], argv[2])\n  when \"space\"\n    space(argv[1], argv[2])\n  when \"decrypt\"\n    decrypt(argv[1], argv[2])\n  end\nend\n\nmain(ARGV)\n"}
{"id": 746, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueensBacktracking {\n    static int N = 8;\n    static int[] rowToCol = new int[N];\n    static boolean solved = false;\n\n    static boolean isSafe(int row, int col) {\n        for (int r = 0; r < row; r++) {\n            int c = rowToCol[r];\n            if (c == col || Math.abs(row - r) == Math.abs(col - c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static void dfs(int r) {\n        if (r == N) {\n            solved = true;\n            return;\n        }\n        if (rowToCol[r] != -1) {\n            if (isSafe(r, rowToCol[r])) dfs(r + 1);\n            return;\n        }\n        for (int c = 0; c < N; c++) {\n            if (isSafe(r, c)) {\n                rowToCol[r] = c;\n                dfs(r + 1);\n                if (solved) return;\n                rowToCol[r] = -1;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        for (int i = 0; i < N; i++) rowToCol[i] = -1;\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt(), c = sc.nextInt();\n            rowToCol[r] = c;\n        }\n        dfs(0);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                System.out.print(rowToCol[i] == j ? \"Q\" : \".\");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 747, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    char *s = argv[i];\n    int is_valid = 1;\n    if (s[0] == '\\0') {\n        is_valid = 0;\n    }\n    for (int j = 0; s[j] != '\\0'; j++) {\n      if (!isdigit(s[j])) {\n        is_valid = 0;\n        break;\n      }\n    }\n\n    if (!is_valid) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n\n    int n = atoi(s);\n\n    if (n < 0 || n > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n\n    int divisible_by_3 = (n % 3 == 0);\n    \n    int has_3 = 0;\n    int temp = n;\n    if (temp == 0) {\n        // 0 doesn't have 3\n    } else {\n        while (temp > 0) {\n            if (temp % 10 == 3) {\n                has_3 = 1;\n                break;\n            }\n            temp /= 10;\n        }\n    }\n\n    if (divisible_by_3 && has_3) {\n      printf(\"dumb\\n\");\n    } else if (divisible_by_3) {\n      printf(\"idiot\\n\");\n    } else if (has_3) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 748, "language": "C#", "code": "using System;\n\npublic class ThreeIdiotsApp\n{\n    public static void Main(string[] args)\n    {\n        // Apply the 3 Idiots transformation on inputs.\n        foreach (string stringValue in args)\n        {\n            if (int.TryParse(stringValue, out int number) && number >= 0 && number <= 1000)\n            {\n                if (number % 3 == 0 && stringValue.Contains(\"3\"))\n                    Console.WriteLine(\"dumb\");\n                else if (number % 3 == 0)\n                    Console.WriteLine(\"idiot\");\n                else if (stringValue.Contains(\"3\"))\n                    Console.WriteLine(\"stupid\");\n                else\n                    Console.WriteLine(\"smart\");\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 749, "language": "Java", "code": "package taiko;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int limit = Integer.parseInt(args[0]);\n\n    if (limit < 0 || limit > 10000) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    String sequence = \"\";\n    Random random = new Random();\n\n    for (int i = 0; i < limit; i++) {\n      String sound = random.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(sound);\n      sequence += sound;\n\n      if (sequence.contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n\n    // Output \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" if no match is found after reaching the limit\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 750, "language": "Python3", "code": "import sys\n\ndef set_queen(n,i,j,col,d1,d2,grid,preset_q):\n  col[j]=True\n  d1[j-i+n-1]=True\n  d2[i+j]=True\n  grid[i][j]=True\n\ndef clean(n,i,j,col,d1,d2,grid,preset_q):\n  for x in range (0,n) :\n    col[x]=False\n  for x in range (0,2*n-1) :\n    d1[x]=False\n  for x in range (0,2*n-1) :\n    d2[x]=False    \n  for x in range (0,n) :\n    for y in range (0,n) :\n      grid[x][y]=False\n\n  for x in preset_q:\n    set_queen(n,x[0],x[1],col,d1,d2,grid,preset_q)\n\ndef is_safe(n,i,j,col,d1,d2,grid,preset_q):\n  if not col[j] and not d1[j-i+n-1] and not d2[i+j]:\n    return True\n  return False\n\ndef print_grid(grid):\n  for x in grid :\n    for y in x:\n      if y:\n        print(\"Q\",end=\"\")\n      else:\n        print(\".\",end=\"\")\n    print()\n\ndef n_queen(n,i,col,d1,d2,grid,preset_q):\n  \n  for j in range(0,n):\n    if i==0:\n      clean(n,i,j,col,d1,d2,grid,preset_q)\n    if is_safe(n,i,j,col,d1,d2,grid,preset_q):\n      col[j]=True\n      d1[j-i+n-1]=True\n      d2[i+j]=True\n      grid[i][j]=True\n      if i==n-1:\n        print_grid(grid)\n      else:\n        n_queen(n,i+1,col,d1,d2,grid,preset_q)\n      col[j]=False\n      d1[j-i+n-1]=False\n      d2[i+j]=False\n      grid[i][j]=False   \n    elif [i,j] in [preset for preset in preset_q]:\n      n_queen(n,i+1,col,d1,d2,grid,preset_q)    \n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    k=0\n    n=8\n    preset_q=[]\n    col=[False for x1 in range(0,n)]\n    d1=[False for x2 in range(0,2*n-1)]\n    d2=[False for x3 in range(0,2*n-1)]\n    grid=[[False for x4 in range(0,n)]for x5 in range (0,n)]\n\n    # print(grid)\n    file_name=\"\"\n    for i, v in enumerate(argv):\n        # print(\"argv[{0}]: {1}\".format(i, v))\n        # print(\"hello\")\n        file_name=v\n    f=open(file_name)\n    lines = f.readlines()\n    for i,x in enumerate(lines):\n      if i==0:\n        k=int(x)\n      else:\n        preset_q.append([int(posi) for posi in x.split()]) \n\n    n_queen(n,0,col,d1,d2,grid,preset_q)  \n    # print(grid)\n        \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 751, "language": "Java", "code": "import java.util.Random;\n\npublic class DrumGame {\n  public static void main(String[] args) {\n    int n = 0;\n    if (args.length > 0) {\n      n = Integer.parseInt(args[0]);\n    }\n    Random rnd = new Random();\n    String target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 0; i < n; i++) {\n      String c = rnd.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(c);\n      sb.append(c);\n      if (sb.length() >= target.length()) {\n        if (sb.substring(sb.length() - target.length()).equals(target)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 752, "language": "Python3", "code": "import sys\n\ndef answer_idiot(numstring):\n    if not numstring.isdigit():\n        return \"invalid\"\n    n = int(numstring)\n    if not (0 <= n <= 1000):\n        return \"invalid\"\n    if n % 3 == 0 and \"3\" in numstring:\n        return \"dumb\"\n    elif n % 3 == 0:\n        return \"idiot\"\n    elif \"3\" in numstring:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for s in argv:\n        print(answer_idiot(s))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 753, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      String result;\n      try {\n        int n = Integer.parseInt(arg);\n        if (n < 0 || n > 1000) {\n          result = \"invalid\";\n        } else {\n          boolean div = n % 3 == 0;\n          boolean inc = arg.indexOf('3') != -1;\n          if (div && inc) result = \"dumb\";\n          else if (div) result = \"idiot\";\n          else if (inc) result = \"stupid\";\n          else result = \"smart\";\n        }\n      } catch (NumberFormatException e) {\n        result = \"invalid\";\n      }\n      System.out.println(result);\n    }\n  }\n}"}
{"id": 754, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n    const char *responses[2][2] = {\n        {\"smart\", \"stupid\"},\n        {\"idiot\", \"dumb\"}\n    };\n\n    for (int i = 1; i < argc; i++) {\n        char *endptr;\n        long number = strtol(argv[i], &endptr, 10);\n\n        if (*endptr != '\\0' || strlen(argv[i]) == 0 || number < 0 || number > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int div_idx = (number % 3 == 0);\n\n        char num_as_str[5];\n        sprintf(num_as_str, \"%ld\", number);\n        int has3_idx = (strchr(num_as_str, '3') != NULL);\n\n        printf(\"%s\\n\", responses[div_idx][has3_idx]);\n    }\n    return 0;\n}"}
{"id": 755, "language": "Python3", "code": "import sys\nimport json\n\ndef calculate_next_move(history):\n    num_games = len(history)\n\n    # The robot's first three moves are always rock, scissors, paper.\n    if num_games == 0:\n        return 0 # Robot plays rock\n    if num_games == 1:\n        return 1 # Robot plays scissors\n    if num_games == 2:\n        return 2 # Robot plays paper\n\n    # After the 3rd game, the logic is based on a pattern.\n    patterns = {}\n    for i in range(3, num_games):\n        param = (\n            history[i-3]['robot'],\n            history[i-2]['robot'],\n            history[i-1]['robot'],\n            history[i-1]['you']\n        )\n        if param not in patterns:\n            patterns[param] = 0\n        patterns[param] += 1\n    \n    last_param = (\n        history[num_games-3]['robot'],\n        history[num_games-2]['robot'],\n        history[num_games-1]['robot'],\n        history[num_games-1]['you']\n    )\n    \n    count = patterns.get(last_param, 0)\n    \n    # The robot cycles through rock(0), scissors(1), paper(2) for the same pattern.\n    predicted_robot_move = count % 3\n    return predicted_robot_move\n\ndef find_winning_hand(robot_move):\n    # rock(0) -> paper(2)\n    # scissors(1) -> rock(0)\n    # paper(2) -> scissors(1)\n    if robot_move == 0:\n        return 2\n    elif robot_move == 1:\n        return 0\n    else:\n        return 1\n\ndef main(argv):\n    filepath = argv[0]\n    with open(filepath, 'r') as f:\n        history_data = json.load(f)\n\n    robot_prediction = calculate_next_move(history_data)\n    my_hand = find_winning_hand(robot_prediction)\n    print(my_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 756, "language": "Python3", "code": "import sys\nfrom itertools import permutations\n\ndef main(argv):\n    # This solution uses permutations of available columns for available rows.\n    k = int(sys.stdin.readline())\n    preset_queens = {}\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        preset_queens[r] = c\n\n    available_rows = [r for r in range(8) if r not in preset_queens]\n    available_cols = [c for c in range(8) if c not in preset_queens.values()]\n    \n    for p in permutations(available_cols):\n        current_placement = {}\n        for r, c in preset_queens.items():\n            current_placement[r] = c\n        for i, r in enumerate(available_rows):\n            current_placement[r] = p[i]\n        \n        d1 = set()\n        d2 = set()\n        is_valid = True\n        for r in range(8):\n            c = current_placement[r]\n            if (r - c) in d1 or (r + c) in d2:\n                is_valid = False\n                break\n            d1.add(r - c)\n            d2.add(r + c)\n            \n        if is_valid:\n            final_board = [['.'] * 8 for _ in range(8)]\n            for r, c in current_placement.items():\n                final_board[r][c] = 'Q'\n            \n            for row in final_board:\n                print(\"\".join(row))\n            break\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 757, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    if argv.isdigit():\n        n = int(argv)\n        if n >= 0 and n <= 1000:\n            if n%3 == 0:\n                output = \"idiot\"\n                if '3' in str(n):\n                    output = \"dumb\"\n            elif '3' in str(n):\n                output = \"stupid\"\n            else:\n                output = \"smart\"\n    else:\n        output = \"invalid\"\n    print(output)\n\nif __name__ == '__main__':\n    for i in sys.argv[1:]:\n        main(i)"}
{"id": 758, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  l1=[0,1,2]\n  for i in l1:\n    if(argv==i):\n      print(\"0\")\n    else:\n      print(\"1\")  \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 759, "language": "Python3", "code": "import sys\nimport re\nimport json\n\ndef countCase(fileAll):\n    res = {\"A\" : 0,\"B\" : 0,\"C\" : 0,\"D\" : 0,\"E\" : 0,\"F\" : 0,\"G\" : 0,\"H\" : 0,\"I\" : 0,\"J\" : 0,\"K\" : 0,\"L\" : 0,\"M\" : 0,\"N\" : 0,\"O\" : 0,\"P\" : 0,\"Q\" : 0,\"R\" : 0,\"S\" : 0,\"T\" : 0,\"U\" : 0,\"V\" : 0,\"W\" : 0,\"X\" : 0,\"Y\" : 0,\"Z\" : 0,\"a\" : 0,\"b\" : 0,\"c\" : 0,\"d\" : 0,\"e\" : 0,\"f\" : 0,\"g\" : 0,\"h\" : 0,\"i\" : 0,\"j\" : 0,\"k\" : 0,\"l\" : 0,\"m\" : 0,\"n\" : 0,\"o\" : 0,\"p\" : 0,\"q\" : 0,\"r\" : 0,\"s\" : 0,\"t\" : 0,\"u\" : 0,\"v\" : 0,\"w\" : 0,\"x\" : 0,\"y\" : 0,\"z\" : 0,\" \" : 0}\n    for i in range(len(fileAll)):\n        if fileAll[i] in res:\n            res[fileAll[i]] += 1\n    return res\n\ndef spaceAlpha(fileAll):\n    countCaseDic = countCase(fileAll)\n    # \u7a7a\u767d\u306f\u901a\u5e38\uff0c\u4e00\u756a\u591a\u3044\u3068\u8003\u3048\u3089\u308c\u308b\n    return {\"char\": [k for k, v in countCaseDic.items() if v == max(list(countCaseDic.values()))][0]}\n\ndef caesar(fileAll, index):\n    shiftListBig = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\",\n                    \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    shiftListSmall = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\",\n                      \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    res = \"\"\n    for i in range(len(fileAll)):\n        if fileAll[i] in shiftListSmall:\n            thisIndex = shiftListSmall.index(fileAll[i]) + index\n            if thisIndex > 25:\n                thisIndex -= 26\n            res += shiftListSmall[thisIndex]\n        elif fileAll[i] in shiftListBig:\n            thisIndex = shiftListBig.index(fileAll[i]) + index\n            if thisIndex > 25:\n                thisIndex -= 26\n            res += shiftListBig[thisIndex]\n        else:\n            res += fileAll[i]\n    return res\n\ndef decrypt(fileAll):\n    # \u30b9\u30c6\u30c3\u30d72\u3092\u5fa9\u53f7\n    decryptSpace = \"\"\n\n    # \u4e0d\u53ef\u9006\u306a\u306e\u304c\u554f\u984c\n    spaceAlphabet = spaceAlpha(fileAll)[\"char\"]\n    for i in range(len(fileAll)):\n        if fileAll[i] == spaceAlphabet:\n            decryptSpace += \" \"\n            continue\n        decryptSpace += fileAll[i]\n\n    # \u30b9\u30c6\u30c3\u30d71\u3092\u5fa9\u53f7\n    for i in range(26):\n        res = caesar(decryptSpace, i)\n        m = re.findall('The', res)  # \u3053\u308c\u304c\u3042\u3063\u305f\u3089\u5927\u4e08\u592b\u305d\u3046\n        if len(m) > 0:\n            # \u3053\u3053\u3067\uff0c\u672c\u6765\u7a7a\u767d\u306b\u3059\u3079\u304d\u3067\u306a\u3044\u3068\u3053\u308d\u3092\u76f4\u3057\u305f\u3044\n            # \u5f62\u614b\u7d20\u89e3\u6790\n            return res\n\ndef outJson(res, stdoutFilePath):\n    resJson = json.dumps(res)\n    with open(stdoutFilePath, mode='w') as f:\n        f.write(resJson)\n\ndef outTxt(res, stdoutFilePath):\n    with open(stdoutFilePath, mode='w') as f:\n        f.write(res)\n\ndef main(argv):\n    subCommand = argv[0]\n    filePath = argv[1]\n    stdoutFilePath = argv[2]\n\n    with open(filePath, \"r\") as f:\n        fileAll = f.read()\n\n    if subCommand == \"count\":\n        outJson(countCase(fileAll), stdoutFilePath)\n    elif subCommand == \"space\":\n        outJson(spaceAlpha(fileAll), stdoutFilePath)\n    elif subCommand == \"decrypt\":\n        outTxt(decrypt(fileAll), stdoutFilePath)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 760, "language": "Python3", "code": "import sys\n\ndef idiots_core(text_num):\n    # Check if string contains only digits.\n    if not text_num.isdigit():\n        return \"invalid\"\n\n    number_value = int(text_num)\n\n    # Check for number bounds.\n    if not (0 <= number_value <= 1000):\n        return \"invalid\"\n\n    div_by_three = (number_value % 3 == 0)\n    has_digit_three = ('3' in text_num)\n\n    # Ordered conditional checks for the algorithm.\n    if div_by_three and has_digit_three:\n        return \"dumb\"\n    elif div_by_three:\n        return \"idiot\"\n    elif has_digit_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef app_runner(input_args):\n    # Process each argument and print its determined state.\n    for curr_arg in input_args:\n        print(idiots_core(curr_arg))\n\nif __name__ == '__main__':\n    app_runner(sys.argv[1:])"}
{"id": 761, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    subcmd = argv[0]\n    inpath = argv[1]\n    outpath = argv[2]\n\n    with open(inpath, encoding='utf-8') as f:\n        text = f.read()\n\n    if subcmd == \"count\":\n        counts = {}\n        for c in text:\n            if c.isalpha() or c == \" \":\n                counts[c] = counts.get(c, 0) + 1\n        with open(outpath, \"w\", encoding=\"utf-8\") as f:\n            json.dump(counts, f, ensure_ascii=False)\n\n    elif subcmd == \"space\":\n        chars = {c for c in text if c.isalpha()}\n\n        best_char = None\n        best_diff = 999999\n\n        for c in chars:\n            replaced = []\n            for ch in text:\n                if ch == c or ch == c.upper():\n                    replaced.append(\" \")\n                else:\n                    replaced.append(ch)\n            replaced_text = \"\".join(replaced)\n            words = replaced_text.split()\n            if not words:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = c\n\n        with open(outpath, \"w\", encoding=\"utf-8\") as f:\n            json.dump({\"char\": best_char}, f, ensure_ascii=False)\n\n    elif subcmd == \"decrypt\":\n        chars = {c for c in text if c.isalpha()}\n\n        best_char = None\n        best_diff = 999999\n        best_swapped = \"\"\n\n        for c in chars:\n            replaced = []\n            for ch in text:\n                if ch == c or ch == c.upper():\n                    replaced.append(\" \")\n                else:\n                    replaced.append(ch)\n            replaced_text = \"\".join(replaced)\n            words = replaced_text.split()\n            if not words:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = c\n                best_swapped = replaced_text\n\n        def caesar_dec(text, shift):\n            res = []\n            for ch in text:\n                if ch.isalpha():\n                    base = ord('a') if ch.islower() else ord('A')\n                    res.append(chr((ord(ch) - base - shift) % 26 + base))\n                else:\n                    res.append(ch)\n            return \"\".join(res)\n\n        best_shift = 0\n        max_e = -1\n        for sft in range(26):\n            candidate = caesar_dec(best_swapped, sft)\n            ecount = candidate.count('e')\n            if ecount > max_e:\n                max_e = ecount\n                best_shift = sft\n\n        decrypted = caesar_dec(best_swapped, best_shift)\n        with open(outpath, \"w\", encoding=\"utf-8\") as f:\n            f.write(decrypted)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 762, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for arg in argv:\n        if arg.isdigit():\n            num = int(arg)\n            if 0 <= num <= 1000:\n                is_divisible_by_3 = num % 3 == 0\n                has_digit_3 = '3' in str(num)\n\n                if is_divisible_by_3 and has_digit_3:\n                    print(\"dumb\")\n                elif is_divisible_by_3:\n                    print(\"idiot\")\n                elif has_digit_3:\n                    print(\"stupid\")\n                else:\n                    print(\"smart\")\n            else:\n                print(\"invalid\")\n        else:\n            print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 763, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    //echo \"=====\".$value;\n    threeidiots($value);\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n\n\n\nfunction threeidiots($number){\n\nif (!is_numeric($number))\n{\n echo \"invalid\";\n return;\n}\n\nif (strpos($number,'3') !== false) {\n    echo 'dumb';\n    return;\n}    \nif($number=='3')  {\n    echo \"stupid\";\n    return;\n}   \nif(($number % 3) == 0 ){\n    echo \"idiot\";\n    return;\n}\nelse{\n    echo \"smart\";\n    return;\n}\n\n\n\n}\n   \n\n"}
{"id": 764, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format( args[i]);\n      //System.out.println(output);\n\t  App obj = new App();\n\t \n\tif( obj.con3(args[i]) == 0){\n\t int k = obj.con1(args[i]);\n\t  int m = obj.con2(args[i]);\n\t  \n\t  if (k ==1 && m ==1){\n\t  System.out.println(\"dumb\");\n\t  }\n\t  else if( k == 1){\n\t\t  System.out.println(\"idiot\");\n\t  }\n\t  else if( m == 1){\n\t\t  System.out.println(\"stupid\");\n\t  }\n\t  else\n\t\t  System.out.println(\"smart\");\n\t}\n\telse{\n\t\tSystem.out.println(\"invalid\");\n\t}\n\n    }\n\n  }\n\n  public int con1(String r){\n    int i = Integer.parseInt(r);\n    if(i % 3 == 0 ) \n    return 1;\n    else\n    return 0;\n  }\n  public int con2(String r){\n   int l =0;\n    for(int i= 0; i < r.length();i++){\n\t\tchar p = r.charAt(i);\n      if(p == '3'){\n        l= 1;\n        break ;\n      }\n      \n    }\n    if(l == 1){ return 1;}\n    else { return 0;}\n  }\n  public int con3(String r){\n   int l =0;\n    for(int i= 0; i < r.length();i++){\n\t\tchar p = r.charAt(i);\n      if(p == 'a' || p == 'b' ||p == 'c' ||p == 'd' ||p == 'e' ||p == 'f' ||p == 'g' ||p == 'h' ||p == 'i' ||p == 'j' ||p == 'k' ||p == 'l' ||p == 'm' ||p == 'n' ||p == 'o' ||\n\t  p == 'p' ||p == 'q' ||p == 'r' ||p == 's' ||p == 't' ||p == 'u' ||p == 'v' ||p == 'w' ||p == 'x' ||p == 'y' ||p == 'z' ||\n    p == 'A' || p == 'B' ||p == 'C' ||p == 'D' ||p == 'E' ||p == 'F' ||p == 'G' ||p == 'hH' ||p == 'I' ||p == 'J' ||p == 'K' ||p == 'L' ||p == 'M' ||p == 'N' ||p == 'O' ||\n\t  p == 'P' ||p == 'Q' ||p == 'R' ||p == 'S' ||p == 'T' ||p == 'U' ||p == 'V' ||p == 'W' ||p == 'X' ||p == 'Y' ||p == 'Z' ){\n        l= 1;\n        break ;\n      }\n      \n    }\n    if(l == 1){ return 1;}\n    else { return 0;}\n  }\n  \n}"}
{"id": 765, "language": "C#", "code": "using System;\n\npublic class TaikoRhythm\n{\n    static void Main(string[] args)\n    {\n        int maxCount = 0;\n        if (args.Length > 0)\n            int.TryParse(args[0], out maxCount);\n\n        string pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n        string output = \"\";\n        Random rand = new Random();\n\n        for (int i = 0; i < maxCount; i++)\n        {\n            string hit = (rand.Next(2) == 0) ? \"\u30c9\" : \"\u30ab\";\n            Console.WriteLine(hit);\n            output += hit;\n\n            if (output.Length > pattern.Length)\n            {\n                output = output.Substring(output.Length - pattern.Length);\n            }\n\n            if (output == pattern)\n            {\n                Console.WriteLine(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n        Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 766, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n\n    static class RpsHand {\n        public static final int ROCK = 0;\n\n        public static int getWinningHand(int opponentHand) {\n            return (opponentHand + 2) % 3;\n        }\n    }\n\n    static class GameRecord {\n        private final List<int[]> history;\n\n        public GameRecord(List<int[]> history) { this.history = history; }\n\n        public static GameRecord fromFile(String path) throws IOException {\n            String content = Files.readString(Paths.get(path));\n            content = content.trim().substring(1, content.length() - 1).replace(\"},{\", \"};{\");\n            \n            var parsedHistory = new ArrayList<int[]>();\n            if (content.isEmpty()) return new GameRecord(parsedHistory);\n\n            for (String roundStr : content.split(\";\")) {\n                String[] nums = roundStr.replaceAll(\"[^0-9,]\", \"\").split(\",\");\n                parsedHistory.add(new int[]{Integer.parseInt(nums[0]), Integer.parseInt(nums[1])});\n            }\n            return new GameRecord(parsedHistory);\n        }\n\n        public int[] getRound(int index) { return history.get(index); }\n        public int size() { return history.size(); }\n    }\n\n    static class RobotPredictor {\n        public int predictNextHand(GameRecord record) {\n            if (record.size() < 3) return RpsHand.ROCK;\n\n            int[] r1 = record.getRound(record.size() - 3);\n            int[] r2 = record.getRound(record.size() - 2);\n            int[] r3 = record.getRound(record.size() - 1);\n            var targetKey = List.of(r1[0], r2[0], r3[0], r3[1]);\n\n            for (int i = record.size() - 1; i >= 3; i--) {\n                var currentKey = List.of(\n                    record.getRound(i-3)[0], record.getRound(i-2)[0], \n                    record.getRound(i-1)[0], record.getRound(i-1)[1]\n                );\n                if (targetKey.equals(currentKey)) {\n                    return (record.getRound(i)[0] + 1) % 3;\n                }\n            }\n            return RpsHand.ROCK;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        var gameRecord = GameRecord.fromFile(args[0]);\n        var predictor = new RobotPredictor();\n        int robotNextHand = predictor.predictNextHand(gameRecord);\n        int myHand = RpsHand.getWinningHand(robotNextHand);\n        System.out.println(myHand);\n    }\n}"}
{"id": 767, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\npublic class Program\n{\n\t\n\n\tprivate static StringBuilder decryptString(string input, string space){\n\t\tchar spaceReplacer=char.Parse(space);\n\t\tStringBuilder ob1 = new StringBuilder(input);\n\t\tint k= (int)spaceReplacer-'a'+4;//+4 m-13x\n\t\t//Console.WriteLine(\"{0}  {1} \",k+13,k);\n\t\t\n\tfor(int j=0;j<ob1.Length;j++){\n\t\tif(ob1[j].ToString()==\" \"){\n\t\t ob1[j]=spaceReplacer;\n\t\t}\n\t\telse if(ob1[j].ToString()==spaceReplacer.ToString()){\n\t\t ob1[j]=' ';\n\t\t}}\n\t\t\n\t\tfor(int j=0;j<ob1.Length;j++){\n\t\t if(ob1[j]>='A' && ob1[j]<='Z' ){\n\t\t   if((ob1[j]-k-1)<'A'){\n\t\t   \t\tob1[j]= (char)(90-(k-(ob1[j]-'A')));\t\n\t\t   }\n\t\t\telse{\n\t\t\t   ob1[j]= (char)(ob1[j]-k-1);\t\n\t\t\t}\n\t\t}\n\t\telse if(ob1[j]>='a' && ob1[j]<='z' ){\n\t\t\tif((ob1[j]-k-1)<'a'){\n\t\t   \t\tob1[j]= (char)(122-(k-(ob1[j]-'a')));\t\n\t\t   }\n\t\t\telse{\n\t\t\t   ob1[j]= (char)(ob1[j]-k-1);\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn ob1;\n\t}\n\t\n\t private static string spaceReplacedBy(string input)\n    {            \n            int[] occurrences = new int[53];\n\n            string[] characters = { \" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\n\t int basdMax=0;\n\t\t string char1=\"\";\n\t \n     \tfor(int j=0;j<input.Length-1;j++){\n\t\t\tif(input[j].ToString()==\".\" ||input[j].ToString()==\",\"||input[j].ToString()==\";\"){\n\t\t\t\tfor(int i=0; i<53; i++){\n\t\t\t\t\tif(input[j+1].ToString()==characters[i]){\n\t\t\t\t\t\toccurrences[i]++;\n\t\t\t\t\t\tif(basdMax<occurrences[i]){\n\t\t\t\t\t\tbasdMax=occurrences[i];\n\t\t\t\t\t\t\tchar1= characters[i].ToString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t return char1;\n    }\n\n     private static string GetCharacterCount(string input)\n        {\n            StringBuilder builder = new StringBuilder();\n            string[] uniqueChars = { \" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n            builder.AppendLine(\"{\");\n            foreach(string oneChar in uniqueChars)\n            {\n                int count = input.Count(f => f.ToString() == oneChar);\n                builder.AppendLine(string.Format(\"\\\"{0}\\\":{1},\", oneChar, count));\n            }\n            builder.AppendLine(\"}\");\n            string rawSB = builder.ToString();\n            int index = rawSB.LastIndexOf(\",\");\n            return rawSB.Remove(index, 1);\n        }\n\n  static public void Main (string[] args)\n  {\n\n for (int i = 0; i < args.Length; i++)\n    {\n\n    string cmd = args[i].ToString();\n    string inputFilePath = args[i+1].ToString();\n    string outputFilePath = args[i+2].ToString();\n    i=i+2;\n  \n\n    string ResultOutput=\"\";\n            string text = File.ReadAllText(inputFilePath, Encoding.UTF8);\n            if(cmd==\"count\"){\n                 ResultOutput = GetCharacterCount(text);\n            }\n            else if(cmd==\"space\"){\n             string charSpace =  spaceReplacedBy(text);\n             StringBuilder builder = new StringBuilder();\n             builder.AppendLine(\"{\");\n             builder.AppendLine(string.Format(\"\\\"char\\\":\\\"{0}\\\"\", charSpace));\n             builder.AppendLine(\"}\");\n             ResultOutput = builder.ToString();\n            }\n            else if(cmd==\"decrypt\"){\n              string spaceReplacer = spaceReplacedBy(text);\n              ResultOutput=decryptString( text,spaceReplacer).ToString();\n              \n            }\n\n            using (StreamWriter writer = new StreamWriter(outputFilePath))\n                    {\n                        writer.Write(ResultOutput);\n                    }\n  }\n}\n}"}
{"id": 768, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # print(\"argv[{0}]: {1}\".format(i, v))\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for i, v in enumerate(argv):\n    value = argv[0]\n    if \"3\" in value:\n      if int(value)%3==0:\n        print(\"dumb\")\n      else:\n        print(\"stupid\")\n    elif int(value)%3==0:\n        print(\"idiot\")\n    else:\n      if 0<=int(value)<=1000:\n        print(\"smart\")\n      else:\n        print(\"invalid\")\n    \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 769, "language": "C", "code": "#include <stdio.h>   // For printf, fprintf\n#include <stdlib.h>  // For atoi, rand, srand\n#include <string.h>  // For strlen, strcmp, memmove, memset\n#include <time.h>    // For time (to seed rand)\n\n// Solution 1: Beginner level - Direct sliding window using a character buffer.\n// This approach directly manipulates a char array to store the last few\n// generated multi-byte characters and checks for the pattern.\nint main(int argc, char *argv[]) {\n  srand(time(NULL)); // Seed the random number generator.\n\n  // Check for correct number of command-line arguments.\n  if (argc != 2) {\n    fprintf(stderr, \"Usage: %s <count>\\n\", argv[0]);\n    return 1;\n  }\n\n  // Parse the input count from command-line argument.\n  int max_iterations = atoi(argv[1]);\n  // Validate the input count.\n  if (max_iterations < 0 || max_iterations > 10000) {\n    fprintf(stderr, \"Count must be between 0 and 10000.\\n\");\n    return 1;\n  }\n\n  // Define the sounds and the target pattern.\n  // Each Japanese character (\"\u30c9\", \"\u30ab\") is 3 bytes in UTF-8.\n  const char *DO_SOUND = \"\u30c9\";\n  const char *KA_SOUND = \"\u30ab\";\n  const char *TARGET_SEQUENCE = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"; // This pattern is 8 characters long\n  const int PATTERN_BYTE_LENGTH = 24;             // 8 chars * 3 bytes/char\n\n  char current_window[PATTERN_BYTE_LENGTH + 1]; // Buffer for the sliding window + null terminator\n  memset(current_window, 0, sizeof(current_window)); // Initialize buffer with nulls\n  int current_window_bytes = 0;                     // Current valid length of data in buffer\n\n  for (int i = 0; i < max_iterations; ++i) {\n    const char *note_to_play;\n    // Randomly choose \"\u30c9\" or \"\u30ab\".\n    if (rand() % 2 == 0) {\n      note_to_play = DO_SOUND;\n    } else {\n      note_to_play = KA_SOUND;\n    }\n    printf(\"%s\\n\", note_to_play); // Output the chosen sound.\n\n    int note_len = strlen(note_to_play); // Length of the current sound string (always 3 bytes).\n\n    // If adding the new note would make the buffer too long,\n    // shift out the oldest character (3 bytes) from the beginning.\n    if (current_window_bytes + note_len > PATTERN_BYTE_LENGTH) {\n      memmove(current_window, current_window + 3, current_window_bytes - 3 + 1); // +1 for null terminator\n      current_window_bytes -= 3;\n    }\n\n    // Append the new note to the end of the buffer.\n    strcpy(current_window + current_window_bytes, note_to_play);\n    current_window_bytes += note_len;\n\n    // Check if the current sequence in the buffer matches the target pattern.\n    if (current_window_bytes == PATTERN_BYTE_LENGTH &&\n        strcmp(current_window, TARGET_SEQUENCE) == 0) {\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\"); // Found the pattern.\n      return 0;                 // Exit successfully.\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\"); // Loop finished, pattern not found.\n  return 0;\n}"}
{"id": 770, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    static char[,] board = new char[8, 8];\n    static List<(int, int)> queens = new List<(int, int)>();\n    \n    public static void Main(string[] args)\n    {\n        // \u5165\u529b\u3092\u8aad\u307f\u53d6\u308a\u3001\u30dc\u30fc\u30c9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n        int k = int.Parse(args[0]);\n        for (int i = 1; i <= k; i++)\n        {\n            var position = Array.ConvertAll(args[i].Split(' '), int.Parse);\n            int r = position[0];\n            int c = position[1];\n            board[r, c] = 'Q';\n            queens.Add((r, c));\n        }\n\n        // \u9b45\u529b\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u3092\u3082\u3068\u306b\u3001\u6b8b\u308a\u306e\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\n        if (PlaceQueens(0))\n        {\n            PrintBoard();\n        }\n    }\n\n    static bool PlaceQueens(int col)\n    {\n        if (col >= 8) return true;\n\n        // \u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u5217\u3092\u30b9\u30ad\u30c3\u30d7\n        if (queens.Exists(q => q.Item2 == col)) return PlaceQueens(col + 1);\n\n        for (int row = 0; row < 8; row++)\n        {\n            if (IsSafe(row, col))\n            {\n                board[row, col] = 'Q';\n                queens.Add((row, col));\n\n                if (PlaceQueens(col + 1)) return true;\n\n                // \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\n                board[row, col] = '.';\n                queens.RemoveAt(queens.Count - 1);\n            }\n        }\n        return false;\n    }\n\n    static bool IsSafe(int row, int col)\n    {\n        for (int i = 0; i < col; i++)\n        {\n            if (board[row, i] == 'Q') return false;\n            if (row - (col - i) >= 0 && board[row - (col - i), i] == 'Q') return false;\n            if (row + (col - i) < 8 && board[row + (col - i), i] == 'Q') return false;\n        }\n        return true;\n    }\n\n    static void PrintBoard()\n    {\n        for (int i = 0; i < 8; i++)\n        {\n            for (int j = 0; j < 8; j++)\n            {\n                Console.Write(board[i, j] == 'Q' ? 'Q' : '.');\n            }\n            Console.WriteLine();\n        }\n    }\n}"}
{"id": 771, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// This solution uses `strtol` for robust parsing, and a nested ternary operator for the final output string.\n// Note: Nested ternary operators can reduce readability.\n\nint main(int argc, char *argv[]) {\n    for (int count = 1; count < argc; ++count) {\n        long currentNumber;\n        char* endOfChar;\n        currentNumber = std::strtol(argv[count], &endOfChar, 10);\n\n        if (*endOfChar != '\\0' || endOfChar == argv[count]) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (currentNumber < 0 || currentNumber > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool div3 = (currentNumber % 3 == 0);\n        std::string sVal = std::to_string(currentNumber);\n        bool has3 = (sVal.find('3') != std::string::npos);\n\n        // Use nested ternary for decision making\n        std::cout << (div3 && has3 ? \"dumb\" :\n                     (div3 ? \"idiot\" :\n                     (has3 ? \"stupid\" : \"smart\"))) << \"\\n\";\n    }\n    return 0;\n}\n"}
{"id": 772, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class MindChecker {\n  public static void main(String[] inputStrings) {\n    for (String s : inputStrings) {\n      Scanner sc = new Scanner(s);\n      if (sc.hasNextInt()) {\n        int i = sc.nextInt();\n        if (i < 0 || i > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean d3 = (i % 3 == 0);\n          boolean c3 = String.valueOf(i).contains(\"3\");\n\n          if (d3 && c3) {\n            System.out.println(\"dumb\");\n          } else if (d3) {\n            System.out.println(\"idiot\");\n          } else if (c3) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 773, "language": "Java", "code": "package track;\n\npublic class Nabeatsu {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            String result;\n            if (!isNumber(arg)) {\n                result = \"invalid\";\n            } else {\n                int n = Integer.parseInt(arg);\n                if (n < 0 || n > 1000) {\n                    result = \"invalid\";\n                } else {\n                    boolean div = n % 3 == 0;\n                    boolean con = arg.indexOf('3') != -1;\n                    result = div && con ? \"dumb\" :\n                             div ? \"idiot\" :\n                             con ? \"stupid\" :\n                             \"smart\";\n                }\n            }\n            System.out.println(result);\n        }\n    }\n\n    private static boolean isNumber(String s) {\n        if (s == null || s.isEmpty()) return false;\n        for (char c : s.toCharArray()) {\n            if (!Character.isDigit(c)) return false;\n        }\n        return true;\n    }\n}"}
{"id": 774, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tint i,var,pow,flag; \n\tfor(i = 1; i<argc; i++)\n\t{  flag=0;\n\t\tif(strcmp(argv[i],\"0\")==0)\n\t\tprintf(\"smart\\n\");\n\t\telse\n\t\t{\n\t\t\tvar=atoi(argv[i]);\n\t                if(var<=0 || var>1000)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"invalid\\n\");\n\t\t\t\t}\n                \telse\n                \t{\n\t\t\t\tpow=1;\n\t\t\t\twhile(var/pow!=0)\n\t\t\t\t{\n\t\t\t\t\tif(((var/pow)%10)==3 && (var%3)==0)\n                        \t\t{ \n\t\t\t\t\t\tflag=2;\n\t\t\t\t\t\tprintf(\"dumb\\n\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(((var/pow)%10)==3 && (var%3)!=0)\n\t\t\t\t\t{ \n\t\t\t      \t\t\tprintf(\"stupid\\n\");\n\t\t\t\t\t\tflag=3;\n                              \t\t\tbreak;\n                             \t\t}\n                             \t\tif(((var/pow)%10)!=3 && (var%3)==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=1;\n                             \t\t}\n                           \t\tpow=pow*10;\n\t\t\t\t}\n  \t\t\t\tif(flag==1)\n   \t\t\t\tprintf(\"idiot\\n\");\n\t\t\t\tif(flag==0)\n\t\t\t\tprintf(\"smart\\n\");\n                \t}\n\t\t}\n\t\t\n\t}\n}\n\n\t\n\t\n\t\n"}
{"id": 775, "language": "Python", "code": "import sys\n#getting arguments online\nargs=sys.argv[1:]\ndef validate_input(inp):\n    if not inp.isdigit():\n        return False\n    if int(inp) > 1000 or int(inp) < 0:\n        return False\n    return True\ndef print_son(inp):\n    has_3=False\n    dsi_3=False\n    num=int(inp)\n    if num%3==0:\n        dsi_3=True\n    if '3' in inp:\n        has_3=True\n    if has_3 and dsi_3:\n        print(\"dumb\")\n    elif has_3:\n        print(\"stupid\")\n    elif dsi_3:\n        print(\"idiot\")\n    else:\n        print(\"smart\")\nfor arg in args:\n    if validate_input(arg):\n        print_son(arg)\n    else:\n        print(\"invalid\")\n        "}
{"id": 776, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String cmd = args[0];\n        String src = args[1];\n        String dist = args[2];\n        try {\n            String cypher = new String(Files.readAllBytes(Paths.get(src)));\n            if (cmd.equals(\"count\")) {\n                LinkedHashMap<Character,Integer> count = new LinkedHashMap<>();\n                for (char c = 'A'; c <= 'Z'; ++c) count.put(c,0);\n                for (char c = 'a'; c <= 'z'; ++c) count.put(c,0);\n                count.put(' ',0);\n                for (char c: cypher.toCharArray())\n                    if (count.containsKey(c)) count.put(c,count.get(c)+1);\n                StringBuilder ret = new StringBuilder(\"{\\n\");\n                boolean first = true;\n                for (var e: count.entrySet()) {\n                    if (!first) ret.append(\",\\n\");\n                    ret.append(\"  \\\"\").append(e.getKey()).append(\"\\\": \").append(e.getValue());\n                    first = false;\n                }\n                ret.append(\"\\n}\");\n                Files.write(Paths.get(dist), ret.toString().getBytes());\n            } else if (cmd.equals(\"space\")) {\n                int[] a = new int[26];\n                for (char c: cypher.toCharArray())\n                    if (c>='a' && c<='z') a[c-'a']++;\n                int mx=0, id=0;\n                for (int i=0;i<26;++i) if (a[i]>mx) {mx=a[i];id=i;}\n                String out = String.format(\"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\", 'a'+id);\n                Files.write(Paths.get(dist), out.getBytes());\n            } else if (cmd.equals(\"decrypt\")) {\n                int[] a = new int[26];\n                for (char c: cypher.toCharArray())\n                    if (c>='a'&&c<='z') a[c-'a']++;\n                int mx=0, id=0;\n                for (int i=0;i<26;i++) if (a[i]>mx) {mx=a[i];id=i;}\n                char csp = (char)('a'+id);\n                int[] b = new int[26];\n                for (char c: cypher.toCharArray())\n                    if ('a'<=c&&c<='z'&&c!=csp) b[c-'a']++;\n                int emx=0,eid=0;\n                for (int i=0;i<26;i++) if (i!=id&&b[i]>emx) {emx=b[i];eid=i;}\n                int shift = (eid-('e'-'a')+26)%26;\n                StringBuilder sb = new StringBuilder();\n                for (char c: cypher.toCharArray()) {\n                    if (c == csp) sb.append(' ');\n                    else if ('a'<=c&&c<='z')\n                        sb.append((char)((c-'a'-shift+26)%26+'a'));\n                    else if ('A'<=c&&c<='Z')\n                        sb.append((char)((c-'A'-shift+26)%26+'A'));\n                    else sb.append(c);\n                }\n                Files.write(Paths.get(dist), sb.toString().getBytes());\n            }\n        } catch (Exception e) {}\n    }\n}"}
{"id": 777, "language": "Java", "code": "import java.util.Random;\n\npublic class BeatTaiko {\n  public static void main(String[] args) {\n    int limit = 0;\n    if (args.length > 0) {\n      limit = Integer.parseInt(args[0]);\n    }\n\n    Random r = new Random();\n    String check = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 0; i < limit; i++) {\n      String c = r.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(c);\n      sb.append(c);\n      if (sb.length() >= check.length()) {\n        if (sb.substring(sb.length() - check.length()).equals(check)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 778, "language": "Python3", "code": "import sys\n\n# Define the size of the chess grid\nGRID_SIZE = 8\n\n# Global lists to manage the state of the board and conflicts\nqueen_locations = [-1] * GRID_SIZE # queen_locations[row] stores the column of the queen\ncol_occupied_status = [False] * GRID_SIZE # True if column is occupied\ndiag_one_occupied_status = [False] * (2 * GRID_SIZE - 1) # True if r+c diagonal is occupied\ndiag_two_occupied_status = [False] * (2 * GRID_SIZE - 1) # True if r-c diagonal is occupied (offset)\n\ndef display_grid_solution():\n    # Prints the solved 8x8 chessboard\n    for r_idx in range(GRID_SIZE):\n        row_representation = ['.'] * GRID_SIZE # Initialize row with empty squares\n        row_representation[queen_locations[r_idx]] = 'Q' # Place queen at its column\n        print(''.join(row_representation)) # Print the row\n\ndef place_queen_on_board(r, c):\n    # Helper function to place a queen and update all conflict trackers\n    queen_locations[r] = c\n    col_occupied_status[c] = True\n    diag_one_occupied_status[r + c] = True\n    diag_two_occupied_status[r - c + GRID_SIZE - 1] = True\n\ndef remove_queen_from_board(r, c):\n    # Helper function to remove a queen and revert conflict trackers\n    queen_locations[r] = -1\n    col_occupied_status[c] = False\n    diag_one_occupied_status[r + c] = False\n    diag_two_occupied_status[r - c + GRID_SIZE - 1] = False\n\ndef find_arrangement(current_row_idx):\n    # Base case: If all rows have been successfully filled\n    if current_row_idx == GRID_SIZE:\n        display_grid_solution() # Print the solution\n        return True # Indicate that a solution was found\n\n    # If a queen is already fixed in this row, skip it and move to the next\n    if queen_locations[current_row_idx] != -1:\n        return find_arrangement(current_row_idx + 1)\n\n    # Try placing a queen in each column of the current row\n    for current_col_idx in range(GRID_SIZE):\n        # Check if the current position is safe based on conflict trackers\n        if not col_occupied_status[current_col_idx] and \\\n           not diag_one_occupied_status[current_row_idx + current_col_idx] and \\\n           not diag_two_occupied_status[current_row_idx - current_col_idx + GRID_SIZE - 1]:\n            \n            # Place the queen and mark conflicts\n            place_queen_on_board(current_row_idx, current_col_idx)\n            \n            # Recurse for the next row\n            if find_arrangement(current_row_idx + 1):\n                return True # If a solution is found deeper, propagate True\n            \n            # Backtrack: Remove the queen if this path didn't lead to a solution\n            remove_queen_from_board(current_row_idx, current_col_idx)\n            \n    return False # No safe column found in this row for a solution\n\ndef main(argv):\n    # Read the number of given queens\n    num_given_queens = int(sys.stdin.readline())\n    \n    # Process each given queen's position\n    for _ in range(num_given_queens):\n        row_pos, col_pos = map(int, sys.stdin.readline().split())\n        place_queen_on_board(row_pos, col_pos) # Use helper to place initial queens\n\n    # Start the recursive search from the first row\n    find_arrangement(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 779, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      \n      String numbertoString = args[i];\n      int number = 0;\n      boolean isInvalid = false;\n      boolean is3check = false;\n\n      for(int j = 0; j < numbertoString.length(); j++) {\n        char digit = numbertoString.charAt(j);\n\n        if(48 <= digit && digit <= 57) {\n          number = number*10 + (digit-48);\n          if(digit == 51) {\n            is3check = true;\n          }\n        }else{\n            System.out.println(\"invalid\");\n            isInvalid = true;\n            break;\n          }\n      }\n        if(isInvalid) {\n          continue;\n        }\n\n        if(number < 0 || number > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n\n        if(number % 3 == 0) {\n          if(is3check) {\n            System.out.println(\"dumb\");\n          }else{\n            System.out.println(\"idiot\");\n          }\n        }else{\n          if(is3check) {\n            System.out.println(\"stupid\");\n          }else{\n            System.out.println(\"smart\");\n          }\n        }\n      }\n\t}\n}\n"}
{"id": 780, "language": "Python3", "code": "import sys\n\ndef classification_engine(data_item_str):\n    if not data_item_str.isdigit():\n        return \"invalid\"\n    \n    int_data_item = int(data_item_str)\n    \n    if not (0 <= int_data_item <= 1000):\n        return \"invalid\"\n\n    condition_divisible_by_3 = (int_data_item % 3 == 0)\n    condition_contains_digit_3 = ('3' in data_item_str)\n\n    if condition_divisible_by_3 and condition_contains_digit_3:\n        return \"dumb\"\n    elif condition_divisible_by_3:\n        return \"idiot\"\n    elif condition_contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef driver_function(cmd_args):\n    for arg_data in cmd_args:\n        print(classification_engine(arg_data))\n\nif __name__ == '__main__':\n    driver_function(sys.argv[1:])"}
{"id": 781, "language": "Java", "code": "package track;\n\nimport java.util.regex.Pattern;\n\npublic class App {\n\n\npublic static void main( String []args){\n\n        for( int i=0; i<args.length; i++){\n            boolean isInt = Pattern.matches(\"-?\\\\d+\", args[i]);\n            String name;\n            if( isInt ){\n                int val = Integer.parseInt(args[i]);\n                if( val%3 == 0 &&  args[i].indexOf('3')>=0){\n                    name = \"dumb\";\n                }else if( val%3 == 0 ){\n                    name = \"idiot\";\n                }else if( args[i].indexOf('3')>=0){\n                    name = \"stupid\";\n                }else {\n                    name = \"smart\";\n                }\n            }else {\n                name = \"invalid\";\n            }\n            System.out.println( name);\n        }\n    }\n\n\n}\n"}
{"id": 782, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'and argv[1]):\n      print(\"stupid\\ninvalid\")\n  else:\n    a=[]\n    for t in argv:\n      a.append(t)\n    for t in a:\n      if(t.isnumeric()):\n        if('3' in t):\n          if(int(t)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(t)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n  #for i, v in enumerate(argv):\n  # print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 783, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int limit = atoi(argv[1]);\n\n    // This buffer needs to be large enough for the max number of plays.\n    char* history = (char*)malloc(limit + 1);\n    if (!history) return 1;\n    history[0] = '\\0';\n    \n    srand(time(NULL));\n    const char* needle = \"dkddkdkdk\";\n\n    for (int i = 0; i < limit; i++) {\n        int r = rand() % 2;\n        if (r == 0) {\n            printf(\"\u30c9\\n\");\n            history[i] = 'd';\n        } else {\n            printf(\"\u30ab\\n\");\n            history[i] = 'k';\n        }\n        history[i+1] = '\\0';\n\n        if (i >= 8) {\n            if (strcmp(&history[i-8], needle) == 0) {\n                printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n                free(history);\n                return 0;\n            }\n        }\n    }\n\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    free(history);\n    return 0;\n}"}
{"id": 784, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nint main(int argc, char**argv)\n{\n        bool flg,flg1,flg2,flg3;\n        int i,j;\n        for (i=1;i<argc;i++)\n        {\n            int num=atoi(argv[i]);\n            flg=false;\n            string str=argv[i];\n            for(j=0;str[j]!='\\0';j++)\n            {\n              if (isdigit(str[j]) == 0)\n            {\n               flg=true;\n                break;\n            }\n            }\n            if(flg)    \n                                   { \n                                     cout<<\"invalid\"<<endl;\n                                      }\n            else if(!((num>=0)&&(num<=1000)))       \n             { \n               cout<<\"invalid\"<<endl;\n                }\n else\n            {\n                flg1=flg2=flg3=false;\n                if(num%3==0)                  \n                 { \n                   flg1=true; \n                   } \n\n                int q,r;                                   \n                q=r=num;\n                while(q)\n                {\n                    if((q==3)||(r==3))\n                        {   \n                          flg2=true; break; \n                          }\n                    else\n                       {  \n                           r=q%10; q/=10; \n                            }\n                }\n\n                flg3=(flg1&&flg2);                    \n                if(flg3)                   \n                { cout<<\"dumb\"<<endl; \n                }\n                else if(flg2)            \n                 { cout<<\"stupid\"<<endl;\n                 }\n                else if(flg1)              \n                { cout<<\"idiot\"<<endl;\n                 }\n                else                       \n                 { cout<<\"smart\"<<endl;\n                  }\n            \n            }\n    \n        \n}\n\n}\n\n"}
{"id": 785, "language": "Python3", "code": "import sys\n\nclass LargeNumber:\n    def __init__(self, value):\n        # \u5185\u90e8\u3067\u6570\u5b57\u30923\u6841\u3054\u3068\u306b\u5206\u5272\u3057\u3066\u4fdd\u6301\n        if isinstance(value, str):\n            self.is_negative = value.startswith('-')\n            clean_value = value.lstrip('-')\n            self.digits = [int(clean_value[max(i-3, 0):i]) for i in range(len(clean_value), 0, -3)][::-1]\n        elif isinstance(value, list):\n            self.digits = value\n            self.is_negative = False\n        else:\n            raise ValueError(\"Invalid type for LargeNumber initialization.\")\n        self._normalize()\n\n    def __add__(self, other):\n        # \u52a0\u7b97\u3092\u5b9f\u88c5\n        if self.is_negative == other.is_negative:\n            return LargeNumber._add_abs(self, other, self.is_negative)\n        else:\n            if LargeNumber._compare_abs(self, other) >= 0:\n                return LargeNumber._subtract_abs(self, other, self.is_negative)\n            else:\n                return LargeNumber._subtract_abs(other, self, other.is_negative)\n\n    def __sub__(self, other):\n        # \u6e1b\u7b97\u3092\u5b9f\u88c5\n        if self.is_negative != other.is_negative:\n            return LargeNumber._add_abs(self, other, self.is_negative)\n        else:\n            if LargeNumber._compare_abs(self, other) >= 0:\n                return LargeNumber._subtract_abs(self, other, self.is_negative)\n            else:\n                return LargeNumber._subtract_abs(other, self, not other.is_negative)\n\n    def __mul__(self, other):\n        # \u4e57\u7b97\u3092\u5b9f\u88c5\n        result = [0] * (len(self.digits) + len(other.digits))\n        for i, d1 in enumerate(self.digits):\n            carry = 0\n            for j, d2 in enumerate(other.digits):\n                result[i + j] += d1 * d2 + carry\n                carry = result[i + j] // 1000\n                result[i + j] %= 1000\n            if carry:\n                result[i + len(other.digits)] += carry\n        return LargeNumber(result)._finalize_sign(self.is_negative != other.is_negative)\n\n    def __truediv__(self, other):\n        # \u9664\u7b97\u3092\u5b9f\u88c5 (\u7c21\u6613\u5316\u306e\u305f\u3081\u5270\u4f59\u7121\u3057\u7248)\n        quotient, _ = LargeNumber._divide_abs(self, other)\n        return quotient._finalize_sign(self.is_negative != other.is_negative)\n\n    def __str__(self):\n        # 3\u6841\u3054\u3068\u306b\u30ab\u30f3\u30de\u3067\u5206\u5272\n        number = ','.join(map(lambda x: f\"{x:03}\", self.digits)).lstrip('0') or \"0\"\n        if self.is_negative and number != \"0\":\n            return f\"(-{number})\"\n        return number\n\n    def _normalize(self):\n        # \u6570\u5024\u3092\u6b63\u898f\u5316 (\u5148\u982d\u306e\u30bc\u30ed\u3092\u9664\u53bb)\n        while self.digits and self.digits[0] == 0:\n            del self.digits[0]\n        if not self.digits:\n            self.digits = [0]\n            self.is_negative = False\n\n    @staticmethod\n    def _add_abs(num1, num2, is_negative):\n        # \u7d76\u5bfe\u5024\u306e\u52a0\u7b97\u3092\u5b9f\u88c5\n        result = []\n        carry = 0\n        for d1, d2 in zip(num1.digits[::-1], num2.digits[::-1]):\n            total = d1 + d2 + carry\n            carry = total // 1000\n            result.append(total % 1000)\n        result = result[::-1]\n        return LargeNumber(result)._finalize_sign(is_negative)\n\n    @staticmethod\n    def _subtract_abs(num1, num2, is_negative):\n        # \u7d76\u5bfe\u5024\u306e\u6e1b\u7b97\u3092\u5b9f\u88c5\n        result = []\n        borrow = 0\n        for d1, d2 in zip(num1.digits[::-1], num2.digits[::-1]):\n            total = d1 - d2 - borrow\n            if total < 0:\n                total += 1000\n                borrow = 1\n            else:\n                borrow = 0\n            result.append(total)\n        result = result[::-1]\n        return LargeNumber(result)._finalize_sign(is_negative)\n\n    @staticmethod\n    def _compare_abs(num1, num2):\n        # \u7d76\u5bfe\u5024\u306e\u6bd4\u8f03\n        if len(num1.digits) != len(num2.digits):\n            return len(num1.digits) - len(num2.digits)\n        return (num1.digits > num2.digits) - (num1.digits < num2.digits)\n\n    @staticmethod\n    def _divide_abs(num1, num2):\n        # \u7d76\u5bfe\u5024\u306e\u9664\u7b97\u3092\u5b9f\u88c5 (\u5270\u4f59\u3082\u8fd4\u3059)\n        quotient = []\n        remainder = LargeNumber([0]).digits\n        for digit in num1.digits:\n            remainder.append(digit)\n            q = 0\n            while LargeNumber._compare_abs(LargeNumber(remainder), num2) >= 0:\n                remainder -= num2\n                q += 1\n            quotient.append(q)\n        return LargeNumber(quotient), LargeNumber(remainder)\n\n    def _finalize_sign(self, is_negative):\n        self.is_negative = is_negative\n        self._normalize()"}
{"id": 786, "language": "Python3", "code": "import sys\nimport json\n\n\n\ndef main(argv):\n    li = []\n    for i, v in enumerate(argv):\n\n        with open(v, 'r') as data_file:\n            data = json.load(data_file)\n            for i in data:\n                # print(i['you'])\n                p = i['you']\n                li.append(p)\n\n    for i in li:\n        print(i)\n\n\n                # lis = list(i['you'])\n                #\n                # for j in lis:\n                #     print(j)\n\n            # for i in data:\n            #     print(i)\n            # data = json.loads(v)\n\n        # print(\"argv[{0}]: {1}\".format(i, v))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 787, "language": "Python3", "code": "import sys\nimport random\n\ndef output_sounds(limit):\n    # \u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\n    current_sequence = \"\"\n    for _ in range(limit):\n        if random.randint(0, 1):\n            sound = \"\u30c9\"\n        else:\n            sound = \"\u30ab\"\n        \n        print(sound, end=\"\")\n        current_sequence += sound\n        \n        if current_sequence.endswith(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main():\n    # \u30e1\u30a4\u30f3\u95a2\u6570\n    if len(sys.argv) < 2 or not sys.argv[1].isdigit():\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    \n    max_limit = int(sys.argv[1])\n    if max_limit < 0 or max_limit > 10000:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n        \n    output_sounds(max_limit)\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 788, "language": "Python3", "code": "import sys\n\ndef check_idiot_condition(str_representation):\n    if not str_representation.isdigit():\n        return \"invalid\"\n    \n    int_value = int(str_representation)\n    \n    if not (0 <= int_value <= 1000):\n        return \"invalid\"\n\n    is_mult_of_3 = (int_value % 3 == 0)\n    has_digit_three = ('3' in str_representation)\n\n    if is_mult_of_3 and has_digit_three:\n        return \"dumb\"\n    elif is_mult_of_3:\n        return \"idiot\"\n    elif has_digit_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef start_processing(input_list):\n    for current_input in input_list:\n        print(check_idiot_condition(current_input))\n\nif __name__ == '__main__':\n    start_processing(sys.argv[1:])"}
{"id": 789, "language": "Python3", "code": "import json\nimport sys\n\ndef get_robot_play(file_path):\n    robot_history = [0, 1, 2]  # Starting hands: Rock, Scissors, Paper\n    opponent_last_move = None\n   \n    with open(file_path) as json_file:\n        game_records = json.load(json_file)\n        \n        for record in game_records:\n            opponent_last_move = record['you']\n            robot_history.append(record['robot'])\n            if len(robot_history) > 3:\n                robot_history.pop(0)\n\n    return robot_history, opponent_last_move\n\ndef determine_next_play(robot_history, opponent_last_hand):\n    index = (len(robot_history) - 1) % 3  # Cycle through the hands\n    return (index + 1) % 3  # Get next play based on cycling logic\n\ndef main():\n    path = sys.argv[1]\n    robot_history, opponent_last_hand = get_robot_play(path)\n    next_play = determine_next_play(robot_history, opponent_last_hand)\n    print(next_play)\n\nif __name__ == '__main__':\n    main()"}
{"id": 790, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n// Japanese outputs in UTF-8 (3 bytes each)\nconst char* pattern[] = {\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"};\n#define PAT_LEN 7\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n  int max = atoi(argv[1]);\n  if (max <= 0 || max > 10000) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n  const char* recent[8] = {NULL};\n  int idx = 0;\n  srand((unsigned int)time(NULL));\n  for (int n = 0; n < max; n++) {\n    int note = rand() % 2;\n    const char* s = (note == 0) ? \"\u30c9\" : \"\u30ab\";\n    printf(\"%s\\n\", s);\n    recent[idx % 8] = s;\n    if (n >= 6) {\n      int ok = 1;\n      for (int k = 0; k < 7; k++) {\n        if (strcmp(recent[(idx - 6 + k + 8) % 8], pattern[k]) != 0) {\n          ok = 0; break;\n        }\n      }\n      if (ok) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0;\n      }\n    }\n    idx++;\n  }\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 791, "language": "Python3", "code": "import sys\n\nBOARD_SIZE = 8\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    queens = []\n    for i, v in enumerate(argv):\n        f = open(v)\n        line = f.readline()\n        k = line\n        line = f.readline()\n        while line:\n          r, c = line.split()\n          r, c = int(r), int(c)\n          queens.append((r, c))\n          line = f.readline()\n\n        f.close()\n\n    solve_eight_queens(queens)\n    \ndef solve_eight_queens(queens):\n  placed_queens = {i: j for i, j in queens}\n\n  occupied_columns = set([j for _, j in queens])\n  recursive_placement(occupied_columns, placed_queens, 0)\n\n  board =  ''\n  for i in range(BOARD_SIZE):\n    for j in range(BOARD_SIZE):\n      if placed_queens[i] == j:\n        board += 'Q'\n      else:\n        board += '.'\n    board += '\\n'\n  \n  print(board)\n\ndef recursive_placement(occupied_columns, placed_queens, current_column):\n  if current_column == BOARD_SIZE:\n    return True\n  else:\n\n    if current_column in occupied_columns:\n      if recursive_placement(occupied_columns, placed_queens, current_column + 1):\n        return True\n\n    for i in range(BOARD_SIZE):\n      if check_safety((i, current_column), placed_queens):\n        placed_queens[i] = current_column\n        if recursive_placement(occupied_columns, placed_queens, current_column+1):\n          return True\n        \n        del placed_queens[i]\n\n  return False\n\ndef check_safety(placement, placed_queens):\n  row, column = placement\n  for i, j in placed_queens.items():\n    if i == row or j == column or abs(row - i) == abs(column - j):\n      return False\n  return True\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 792, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n\nint has_three(const char *str) {\n  for (int j = 0; str[j]; j++)\n    if (str[j] == '3') return 1;\n  return 0;\n}\n\nint is_integer(const char *str) {\n  if (*str == '\\0') return 0;\n  for (int i = 0; str[i]; i++)\n    if (!isdigit(str[i])) return 0;\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int k = 1; k < argc; k++) {\n    if (!is_integer(argv[k])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int x = atoi(argv[k]);\n    if (x < 0 || x > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int div = x % 3 == 0;\n    int hav3 = has_three(argv[k]);\n    if (div && hav3)\n      puts(\"dumb\");\n    else if (div)\n      puts(\"idiot\");\n    else if (hav3)\n      puts(\"stupid\");\n    else\n      puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 793, "language": "Python3", "code": "import sys\n\ndef process_single_input(text_representation):\n    if not text_representation.isdigit():\n        return \"invalid\"\n    \n    integer_form = int(text_representation)\n    \n    if not (0 <= integer_form <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_3 = (integer_form % 3 == 0)\n    contains_digit_3 = ('3' in text_representation)\n\n    if is_divisible_by_3 and contains_digit_3:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_processor(args):\n    for input_arg in args:\n        print(process_single_input(input_arg))\n\nif __name__ == '__main__':\n    main_processor(sys.argv[1:])"}
{"id": 794, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = (args.length); i < l; i++) {\n      String s=args[i];\n      int id=0,st=0;\n      int temp;\n      try{\n        int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n        id=1;\n        while(temp>0){\n          if(temp%10==3){\n            st=1;\n            break;\n          }\n          temp=temp/10;\n        }\n        if(id==1 && st==1)\n        System.out.println(\"dumb\");\n        else if(id==1)\n        System.out.println(\"idiot\");\n        else if(st==1)\n        System.out.println(\"stupid\");\n        else\n        System.out.println(\"smart\");\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t\t\n\t\t}\n\t}\n}\n"}
{"id": 795, "language": "Java", "code": "package track;\n\npublic class ThreeIdiotAlgorithm {\n    public static void main(String[] args) {\n        // \u5165\u529b\u5024\u306b\u57fa\u3065\u3044\u3066\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\n        for (String arg : args) {\n            System.out.println(evaluateInput(arg));\n        }\n    }\n\n    private static String evaluateInput(String input) {\n        try {\n            int number = Integer.parseInt(input);\n            if (number < 0 || number > 1000) {\n                return \"invalid\";\n            }\n\n            boolean isMultipleOfThree = (number % 3 == 0);\n            boolean containsThree = String.valueOf(number).contains(\"3\");\n\n            if (isMultipleOfThree && containsThree) {\n                return \"dumb\";\n            } else if (isMultipleOfThree) {\n                return \"idiot\";\n            } else if (containsThree) {\n                return \"stupid\";\n            } else {\n                return \"smart\";\n            }\n        } catch (NumberFormatException e) {\n            return \"invalid\";\n        }\n    }\n}"}
{"id": 796, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n\tbool flag1,flag2,flag3,flag;\n\tfor (int i = 1; i < argc; ++i)\n\t{    \n\t    int n=atoi(argv[i]);\n\t    flag=false;\n\t    string str=argv[i];\n\t    for(int j=0;str[j]!='\\0';j++)\n\t    {\n\t      if (isdigit(str[j]) == 0)\n            {\n               flag=true;\n                break;\n            }\n\t    }\n\t    if(flag)                         \n\t        {\n\t         cout<<\"invalid\"<<endl; \n\t        }\n\t    else if(!((n>=0)&&(n<=1000)))        \n\t    {\n\t     cout<<\"invalid\"<<endl;\n\t    }\n\t    else\n\t    {\n\t        flag1=flag2=flag3=false;\n\t        \n\t        if(n%3==0)\n\t         {\n\t          flag1=true; \n\t         } \n\t       \n\t        int q,r;                                   \n \t        q=r=n;\n\t        while(q)\n\t        {\n\t            if((q==3)||(r==3))\n\t                {\n\t                   flag2=true;\n\t                    break;\n\t                }\n\t            else\n\t               { \n\t                  r=q%10;\n\t                   q/=10;\n\t               }\n\t        }\n\t        \n\t        flag3=(flag1&&flag2);            \n\t        if(flag3)\n\t                  { \n\t                    cout<<\"dumb\"<<endl; \n\t                  }\n\t        else if(flag2)\n\t                  { \n\t        cout<<\"stupid\"<<endl;\n\t        }\n\t        else if(flag1)           \n\t          {\n\t         cout<<\"idiot\"<<endl;\n\t          }\n\t        else \n\t           { \n\t           cout<<\"smart\"<<endl;\n\t           }\n\t    }\n\t}\n\t\n\n\treturn 0;\n}"}
{"id": 797, "language": "Python3", "code": "import sys\nimport json\n\ndef count_occurrences(file_path, output_file):\n    counts = {}\n    with open(file_path, 'r') as f:\n        text = f.read()\n        for char in text:\n            if char.isalpha() or char.isspace():\n                if char in counts:\n                    counts[char] += 1\n                else:\n                    counts[char] = 1\n    with open(output_file, 'w') as out_file:\n        json.dump(counts, out_file)\n\ndef space_equivalent(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    counts = {}\n    for char in text:\n        if char.isalpha():\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n    char_map = max(counts, key=counts.get)\n    with open(output_file, 'w') as out_file:\n        json.dump({\"char\": char_map}, out_file)\n\ndef decrypt_message(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    decrypted = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                new_char = chr((ord(char) - 2) if (ord(char) - 2) >= ord('A') else ord('Z'))\n            else:\n                new_char = chr((ord(char) - 2) if (ord(char) - 2) >= ord('a') else ord('z'))\n            decrypted += new_char\n        else:\n            decrypted += char\n    with open(output_file, 'w') as out_file:\n        out_file.write(decrypted)\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n    \n    if command == 'count':\n        count_occurrences(input_file, output_file)\n    elif command == 'space':\n        space_equivalent(input_file, output_file)\n    elif command == 'decrypt':\n        decrypt_message(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 798, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n/* 15BCE0532 CHIRAG ARORA */\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    string s = argv[i];\n    int flag=0;\n    for(int j=0;j<s.length();j++){\n        if(!(isdigit(s[j]))){\n          flag=1;\n        }\n    }\n    if(flag==1){\n      cout<<\"invalid\"<<endl;\n      continue;\n    }\n      int n = stoi(s);\n      if(n>=0 && n<=1000){\n        if(n%3==0 && count(s.begin(),s.end(),'3'))\n          cout<<\"dumb\"<<endl;\n        else if(n%3==0)\n          cout<<\"idiot\"<<endl;\n        else if(count(s.begin(),s.end(),'3'))\n          cout<<\"stupid\"<<endl;\n        else\n          cout<<\"smart\"<<endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 799, "language": "Python3", "code": "import sys\n\ndef classification_rules_v2(s_input):\n    if not s_input.isdigit():\n        return \"invalid\"\n    \n    i_val = int(s_input)\n    \n    if not (0 <= i_val <= 1000):\n        return \"invalid\"\n\n    mod_3_is_zero = (i_val % 3 == 0)\n    string_contains_digit_3 = ('3' in s_input)\n\n    if mod_3_is_zero and string_contains_digit_3:\n        return \"dumb\"\n    elif mod_3_is_zero:\n        return \"idiot\"\n    elif string_contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef process_command_arguments(cmd_line_arguments):\n    for arg_str in cmd_line_arguments:\n        print(classification_rules_v2(arg_str))\n\nif __name__ == '__main__':\n    process_command_arguments(sys.argv[1:])"}
{"id": 800, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\nint main(int argc, char *argv[])\n{\n  int input,flag,temp,itr,length,mainflag;\n  \n  for (int i = 1; i < argc; i++) {\n  mainflag=0;\n    length=strlen(argv[i]);\n    \n    char a[length];\n\nstrcpy(a,argv[i]);\n    for(itr=0;itr<length;itr++)\n    {\n      if(!isdigit(a[itr]) || a[itr]=='.')\n      {\n      mainflag=1;\n      printf(\"invalid\");\n      break;\n      }\n    }\n    if(mainflag==0){\n    flag=0;\n    input=atoi(argv[i]);\n    //printf(\"%d\",input);\n        temp=input;\n    if(input>=0 && input<=1000)\n    {\n     while(temp>0)\n     {\n       if(temp%10==3)\n       {\n         flag=1;\n         break;\n       }\n     }\n     if(flag==1 && input%3==0)\n     printf(\"dumb\");\n     else if(flag==1)\n     printf(\"stupid\");\n     else if(input%3==0)\n     printf(\"idiot\");\n     else\n     printf(\"smart\");\n    }\nelse\nprintf(\"invalid\");\n  }\n  }\n  return 0;\n}\n"}
{"id": 801, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n    for number in argv:\n      if(number.isdigit()):\n        if(int(number)%3==0 or (str(3) in number)):\n          if int(number)%3==0 and (str(3) in number):\n                print(\"dumb\")\n          elif int(number)%3==0:\n                print(\"idiot\")\n          else:\n                print(\"stupid\")\n        else:\n            print(\"smart\")\n      else:\n        print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 802, "language": "Java", "code": "package rpsapp;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport org.json.*;\n\npublic class RPSApp {\n    public static void main(String[] args) throws IOException {\n        String fileContent = new String(Files.readAllBytes(Paths.get(args[0])));\n        JSONArray records = new JSONArray(fileContent);\n\n        int[] robotMoves = {0, 1, 2};\n        Map<String, Integer> memory = new HashMap<>();\n\n        for (int i = 3; i < records.length(); i++) {\n            JSONObject record = records.getJSONObject(i);\n            String key = robotMoves[0] + \"-\" + robotMoves[1] + \"-\" + robotMoves[2] + \"-\" + record.getInt(\"you\");\n            memory.put(key, record.getInt(\"robot\"));\n\n            robotMoves[0] = robotMoves[1];\n            robotMoves[1] = robotMoves[2];\n            robotMoves[2] = record.getInt(\"robot\");\n        }\n\n        JSONObject lastRecord = records.getJSONObject(records.length() - 1);\n        String lastKey = robotMoves[0] + \"-\" + robotMoves[1] + \"-\" + robotMoves[2] + \"-\" + lastRecord.getInt(\"you\");\n        int nextMove = memory.getOrDefault(lastKey, 0);\n\n        System.out.println((nextMove + 2) % 3);\n    }\n}"}
{"id": 803, "language": "Python3", "code": "import sys\n\ndef solve_generator(fixed, row, cols, d1, d2):\n    # finds solutions for 8-queens problem\n    if row == 8:\n        yield []\n        return\n    \n    if row in fixed:\n        for sol in solve_generator(fixed, row + 1, cols, d1, d2):\n            yield [(row, fixed[row])] + sol\n    else:\n        for c in range(8):\n            if c not in cols and (row - c) not in d1 and (row + c) not in d2:\n                cols.add(c)\n                d1.add(row - c)\n                d2.add(row + c)\n                for sol in solve_generator(fixed, row + 1, cols, d1, d2):\n                    yield [(row, c)] + sol\n                cols.remove(c)\n                d1.remove(row - c)\n                d2.remove(row - c)\n\ndef main():\n    input_data = sys.stdin.read().splitlines()\n    k = int(input_data[0])\n    \n    fixed_positions = {}\n    cols_s = set()\n    d1_s = set()\n    d2_s = set()\n\n    for i in range(k):\n        r, c = map(int, input_data[i + 1].split())\n        fixed_positions[r] = c\n        cols_s.add(c)\n        d1_s.add(r - c)\n        d2_s.add(r + c)\n\n    solution_generator = solve_generator(fixed_positions, 0, cols_s, d1_s, d2_s)\n    final_positions = next(solution_generator)\n    \n    final_positions.sort()\n    \n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in final_positions:\n        board[r][c] = 'Q'\n        \n    for row in board:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main()"}
{"id": 804, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_frequencies(input_path, output_path):\n    # Count character frequencies\n    with open(input_path, 'r') as file:\n        text = file.read()\n\n    frequencies = Counter(text)\n\n    with open(output_path, 'w') as outfile:\n        json.dump(frequencies, outfile)\n\ndef find_space_character(input_path, output_path):\n    # Identify character replacing space (\" \")\n    with open(input_path, 'r') as file:\n        text = file.read()\n\n    frequencies = Counter(text)\n\n    # Most frequently occurring character is assumed to be the replacement for space\n    space_char = max(frequencies, key=lambda char: frequencies[char] if char.isalnum() else -1)\n\n    with open(output_path, 'w') as outfile:\n        json.dump({\"char\": space_char}, outfile)\n\ndef decrypt_text(input_path, output_path):\n    # Decrypt the cipher text\n    with open(input_path, 'r') as file:\n        text = file.read()\n\n    frequencies = Counter(text)\n    \n    # Get space-replacing character\n    space_char = max(frequencies, key=lambda char: frequencies[char] if char.isalnum() else -1)\n\n    # Determine the substitution key (shift distance)\n    letters_only = Counter({c: count for c, count in frequencies.items() if c.isalpha()})\n    most_common_letter = max(letters_only, key=letters_only.get)\n\n    # Assume 'e' is the most frequent letter in decrypted text\n    shift = (ord(most_common_letter.lower()) - ord('e')) % 26\n\n    def decrypt_character(c):\n        if c.isalpha():\n            if c.islower():\n                return chr(((ord(c) - ord('a') - shift) % 26) + ord('a'))\n            else:\n                return chr(((ord(c) - ord('A') - shift) % 26) + ord('A'))\n        elif c == space_char:\n            return ' '\n        return c\n\n    # Decrypt the text\n    decrypted_text = ''.join(decrypt_character(c) for c in text)\n\n    with open(output_path, 'w') as outfile:\n        outfile.write(decrypted_text)\n\ndef main(args):\n    if len(args) != 3:\n        print(\"Usage: ./myApp <command> <input_file> <output_file>\")\n        return\n\n    command, input_path, output_path = args\n\n    if command == 'count':\n        count_frequencies(input_path, output_path)\n    elif command == 'space':\n        find_space_character(input_path, output_path)\n    elif command == 'decrypt':\n        decrypt_text(input_path, output_path)\n    else:\n        print(\"Invalid command. Use 'count', 'space', or 'decrypt'.\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 805, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.function.Function;\nimport java.util.Optional;\n\npublic class OptionalStreamApproach {\n\n  private static String convert(int num) {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean divBy3 = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n    if (divBy3 && has3) return \"dumb\";\n    if (divBy3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    Arrays.stream(args)\n          .map(s -> {\n            Scanner sc = new Scanner(s);\n            Optional<Integer> optInt = sc.hasNextInt() ? Optional.of(sc.nextInt()) : Optional.empty();\n            sc.close();\n            return optInt;\n          })\n          .map(opt -> opt.map(OptionalStreamApproach::convert).orElse(\"invalid\"))\n          .forEach(System.out::println);\n  }\n}"}
{"id": 806, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Function to derive a unique key from robot's past 3 hands and opponent's last hand\nint makeKey(int p3, int p2, int p1, int op) {\n    return p3 * 27 + p2 * 9 + p1 * 3 + op;\n}\n\n// Global array to store counts for each state key\nint cycleCounts[81]; // 3^4 = 81 unique states possible for inputs 0,1,2\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n\n    FILE *f = fopen(argv[1], \"r\");\n    if (!f) return 1;\n\n    // Initialize all cycle counts to zero\n    memset(cycleCounts, 0, sizeof(cycleCounts));\n\n    // Robot's initial history: Rock(0), Scissors(1), Paper(2)\n    int r_prev3 = 0;\n    int r_prev2 = 1;\n    int r_prev1 = 2;\n    // Opponent's last hand before any recorded games: assumed Rock(0)\n    int opp_last = 0;\n\n    int current_char;\n    int robot_hand_val = -1;\n    int you_hand_val = -1;\n    \n    // Parse the JSON file character by character\n    while ((current_char = fgetc(f)) != EOF) {\n        if (current_char == 'r') { // Potentially \"robot\" key\n            // Skip \"obot\":\n            fgetc(f); fgetc(f); fgetc(f); fgetc(f); fgetc(f); \n            while ((current_char = fgetc(f)) != EOF && (current_char == ':' || current_char == ' ' || current_char == '\"'));\n            robot_hand_val = current_char - '0';\n        } else if (current_char == 'y') { // Potentially \"you\" key\n            // Skip \"ou\":\n            fgetc(f); fgetc(f); fgetc(f); \n            while ((current_char = fgetc(f)) != EOF && (current_char == ':' || current_char == ' ' || current_char == '\"'));\n            you_hand_val = current_char - '0';\n        }\n\n        // If a full record (both robot and you hands) has been parsed\n        if (robot_hand_val != -1 && you_hand_val != -1) {\n            // Increment the counter for the state that led to this round's robot move\n            cycleCounts[makeKey(r_prev3, r_prev2, r_prev1, opp_last)]++;\n\n            // Update robot's history for the next prediction\n            r_prev3 = r_prev2;\n            r_prev2 = r_prev1;\n            r_prev1 = robot_hand_val;\n            \n            // Update opponent's last hand for the next prediction\n            opp_last = you_hand_val;\n\n            // Reset hand values for parsing the next record\n            robot_hand_val = -1;\n            you_hand_val = -1;\n        }\n    }\n    fclose(f);\n\n    // Predict robot's next hand based on the final state\n    int robot_prediction = cycleCounts[makeKey(r_prev3, r_prev2, r_prev1, opp_last)] % 3;\n\n    // Calculate the winning hand against robot's prediction\n    printf(\"%d\\n\", (robot_prediction + 2) % 3);\n\n    return 0;\n}"}
{"id": 807, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// This function attempts to solve the 8 queens puzzle recursively\nbool find_solution(\n    int row_idx,\n    vector<string>& grid,\n    vector<bool>& col_taken,\n    vector<bool>& main_diag_taken,\n    vector<bool>& anti_diag_taken,\n    const vector<bool>& is_row_pre_set)\n{\n    if (row_idx == 8) {\n        return true;\n    }\n\n    if (is_row_pre_set[row_idx]) {\n        if (find_solution(row_idx + 1, grid, col_taken, main_diag_taken, anti_diag_taken, is_row_pre_set)) {\n            return true;\n        }\n    } else {\n        for (int c = 0; c < 8; ++c) {\n            if (!col_taken[c] && !main_diag_taken[row_idx - c + 7] && !anti_diag_taken[row_idx + c]) {\n                grid[row_idx][c] = 'Q';\n                col_taken[c] = true;\n                main_diag_taken[row_idx - c + 7] = true;\n                anti_diag_taken[row_idx + c] = true;\n\n                if (find_solution(row_idx + 1, grid, col_taken, main_diag_taken, anti_diag_taken, is_row_pre_set)) {\n                    return true;\n                }\n\n                grid[row_idx][c] = '.';\n                col_taken[c] = false;\n                main_diag_taken[row_idx - c + 7] = false;\n                anti_diag_taken[row_idx + c] = false;\n            }\n        }\n    }\n\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int k;\n    cin >> k;\n\n    vector<string> board(8, string(8, '.'));\n    vector<bool> cols(8, false);\n    vector<bool> d1(15, false);\n    vector<bool> d2(15, false);\n    vector<bool> fixed_rows(8, false);\n\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        cin >> r >> c;\n        board[r][c] = 'Q';\n        fixed_rows[r] = true;\n        cols[c] = true;\n        d1[r - c + 7] = true;\n        d2[r + c] = true;\n    }\n\n    find_solution(0, board, cols, d1, d2, fixed_rows);\n\n    for (const auto& s : board) {\n        cout << s << '\\n';\n    }\n\n    return 0;\n}"}
{"id": 808, "language": "Python3", "code": "import sys\n\ndef get_idiot_status_simple(num_str):\n    if not num_str.isdigit(): return \"invalid\"\n    \n    num_val = int(num_str)\n    \n    if not (0 <= num_val <= 1000): return \"invalid\"\n\n    divisible = (num_val % 3 == 0)\n    includes_three = ('3' in num_str)\n\n    if divisible and includes_three: return \"dumb\"\n    if divisible: return \"idiot\"\n    if includes_three: return \"stupid\"\n    return \"smart\"\n\ndef start_processing_simple(args):\n    for arg_str in args:\n        print(get_idiot_status_simple(arg_str))\n\nif __name__ == '__main__':\n    start_processing_simple(sys.argv[1:])"}
{"id": 809, "language": "Python3", "code": "import sys\n\ndef threecheck(x):\n    if not x.isdigit():\n        return 'invalid'\n    n = int(x)\n    if n < 0 or n > 1000:\n        return 'invalid'\n    c1 = n % 3 == 0\n    c2 = '3' in x\n    if c1 and c2:\n        return 'dumb'\n    elif c1:\n        return 'idiot'\n    elif c2:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(argv):\n    for item in argv:\n        print(threecheck(item))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 810, "language": "C#", "code": "using System;\n\nclass EightQueen {\n    static int[] positions = new int[8];  // index: row, value: column\n    static bool[] rowOccupied = new bool[8];\n    static bool[] colOccupied = new bool[8];\n    static bool[] diag1Occupied = new bool[15]; // row + col\n    static bool[] diag2Occupied = new bool[15]; // row - col + 7\n    static (int r, int c)[] fixedQueens;\n    static bool[] rowHasFixedQueen = new bool[8];\n\n    static bool CanPlace(int r, int c) {\n        return !rowOccupied[r] && !colOccupied[c] && !diag1Occupied[r + c] && !diag2Occupied[r - c + 7];\n    }\n\n    static void PlaceQueen(int r, int c) {\n        positions[r] = c;\n        rowOccupied[r] = true;\n        colOccupied[c] = true;\n        diag1Occupied[r + c] = true;\n        diag2Occupied[r - c + 7] = true;\n    }\n\n    static void RemoveQueen(int r, int c) {\n        rowOccupied[r] = false;\n        colOccupied[c] = false;\n        diag1Occupied[r + c] = false;\n        diag2Occupied[r - c + 7] = false;\n    }\n\n    static bool DFS(int row) {\n        if (row == 8) return true;\n        if (rowHasFixedQueen[row]) {\n            int c = positions[row];\n            if (!CanPlace(row, c)) return false;\n            PlaceQueen(row, c);\n            bool res = DFS(row + 1);\n            RemoveQueen(row, c);\n            return res;\n        } else {\n            for (int c = 0; c < 8; c++) {\n                if (CanPlace(row, c)) {\n                    PlaceQueen(row, c);\n                    if (DFS(row + 1)) return true;\n                    RemoveQueen(row, c);\n                }\n            }\n            return false;\n        }\n    }\n\n    static void Main(string[] args) {\n        int k = int.Parse(Console.ReadLine());\n        fixedQueens = new (int, int)[k];\n        for (int i = 0; i < k; i++) {\n            var parts = Console.ReadLine().Split();\n            int r = int.Parse(parts[0]);\n            int c = int.Parse(parts[1]);\n            fixedQueens[i] = (r,c);\n            positions[r] = c;\n            rowHasFixedQueen[r] = true;\n        }\n\n        DFS(0);\n\n        for (int r = 0; r < 8; r++) {\n            char[] rowArray = new char[8];\n            for (int i = 0; i < 8; i++) rowArray[i] = '.';\n            rowArray[positions[r]] = 'Q';\n            Console.WriteLine(new string(rowArray));\n        }\n    }\n}"}
{"id": 811, "language": "Python3", "code": "import sys\n\ndef is_safe(board, row, col):\n    # Check column, diagonals for conflicts\n    for i in range(row):\n        if board[i] == col or \\\n           board[i] - i == col - row or \\\n           board[i] + i == col + row:\n            return False\n    return True\n\ndef solve(board, row):\n    if row == 8:\n        return True\n    for col in range(8):\n        if is_safe(board, row, col):\n            board[row] = col\n            if solve(board, row + 1):\n                return True\n            board[row] = -1\n    return False\n\ndef main(argv):\n    # Read input\n    k = int(argv[0])\n    queens = [tuple(map(int, line.split())) for line in argv[1:k+1]]\n    \n    # Initialize board, place given queens\n    board = [-1] * 8\n    for r, c in queens:\n        board[r] = c\n    \n    # Solve the problem\n    solve(board, 0)\n    \n    # Print the board\n    for i in range(8):\n        row = ['Q' if board[i] == j else '.' for j in range(8)]\n        print(''.join(row))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().splitlines())"}
{"id": 812, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n  int  l = args.length;\n\t\tfor (int i = 0 ; i < l; i++) {\n          \n          // if(args[i].indexOf('3') && )\n          // // if(args[i]<=1000 && args[i]>=0 && args[i]%3==0)\n          //  System.out.println(\"idiot\");\n\n   try{\n\n     //Integer.parseInt(args[i]);\n     int in=Integer.parseInt(args[i]);\n\n     if(args[i].indexOf('3')!=-1 && (in%3)==0){\n       String s=\"dumb\";\n      System.out.println(s);\n     }\n     else if(in%3==0){\n       String s=\"idiot\";\n       System.out.println(s);\n     }\n     \n     else if(args[i].indexOf('3')!=-1){\n       String s=\"stupid\";\n       System.out.println(s);\n     }\n\n     else{\n       String s=\"smart\";\n       System.out.println(s);\n     }\n\n   }\n catch(NumberFormatException e){\n   String s=\"invalid\";\n   System.out.println(s);\n }\n\n\t\t\t// String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t// System.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 813, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(argv[0])\n    queens = [tuple(map(int, argv[i*2+1:i*2+3])) for i in range(k)]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    row_used = [False]*8\n    col_used = [False]*8\n    diag1_used = [False]*15\n    diag2_used = [False]*15\n\n    for r,c in queens:\n        board[r][c] = 'Q'\n        row_used[r] = True\n        col_used[c] = True\n        diag1_used[r+c] = True\n        diag2_used[r-c+7] = True\n\n    def dfs(r=0):\n        if r == 8:\n            return True\n        if row_used[r]:\n            return dfs(r+1)\n        for c in range(8):\n            if col_used[c] or diag1_used[r+c] or diag2_used[r-c+7]:\n                continue\n            board[r][c] = 'Q'\n            row_used[r] = True\n            col_used[c] = True\n            diag1_used[r+c] = True\n            diag2_used[r-c+7] = True\n            if dfs(r+1):\n                return True\n            board[r][c] = '.'\n            row_used[r] = False\n            col_used[c] = False\n            diag1_used[r+c] = False\n            diag2_used[r-c+7] = False\n        return False\n\n    dfs()\n\n    for row in board:\n        print(''.join(row))\n\n\nif __name__ == '__main__':\n    main(sys.stdin.read().strip().split())"}
{"id": 814, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n        for (int i = 0; i < args.Length; i++)\n        {\n          int n;\n          bool isNumeric = int.TryParse(args[i], out n);\n          if(isNumeric ==  true){\n            if(Convert.ToInt32(args[i]) % 3 == 0)\n            {\n              if(args[i].Contains(\"3\")){\n                Console.WriteLine(\"dumb\");\n              }else{\n                Console.WriteLine(\"idiot\");\n              }              \n            }\n            else if(args[i].Contains(\"3\"))\n            {\n              if(Convert.ToInt32(args[i]) % 3 == 0)\n              {\n                Console.WriteLine(\"dumb\");\n              }else{\n                Console.WriteLine(\"stupid\");\n              }\n            }\n            else{\n                Console.WriteLine(\"smart\");\n            }\n          }\n          else {\n            Console.WriteLine(\"invalid\");\n          }\n        }\n    }\n}\n"}
{"id": 815, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # load history\n    records = json.load(open(argv[0]))\n    robots = [r[\"robot\"] for r in records]\n    opponents = [r[\"you\"] for r in records]\n\n    # not enough history, print next initial hand\n    if len(robots) < 3:\n        print(len(robots) % 3)\n        return\n\n    states = {}\n    for idx in range(len(robots) - 3):\n        key = tuple(robots[idx:idx+3]) + (opponents[idx+3],)\n        val = robots[idx+3]\n        states.setdefault(key, []).append(val)\n\n    current_key = tuple(robots[-3:]) + (opponents[-1],)\n    vals = states.get(current_key, [])\n\n    if not vals:\n        print(0)\n    else:\n        print((vals[-1] + 1) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 816, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n        for (int i = 0, l = args.length; i < l; i++) {\n            try {\n                int input = Integer.parseInt(args[i]);\n                if ((input >= 0) && (input <= 1000)){\n                    if (input%3 == 0 && args[i].contains(\"3\")){\n                        System.out.println(\"dumb\");\n                    }\n                    else if (args[i].contains(\"3\")){\n                        System.out.println(\"stupid\");\n                    }\n                    else if (input%3 == 0){\n                        System.out.println(\"idiot\");\n                    }\n                    else {\n                        System.out.println(\"smart\");\n                    }\n                }\n                else {\n                    System.out.println(\"invalid\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}\n"}
{"id": 817, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    // printf(\"argv[%s]: %s\\n\", $index, $value);\n    \n    if($value>=0 && $value<=1000){\n      $array  = array_map('intval', str_split($value));\n      $contain=0;\n      for($x=0;$x<count($array);$x++){\n        if($array[$x]==3){\n          $contain=1;\n          break;\n        }\n      }\n      $rem=$value%3;\n      if( $rem==0 && $contain==1){\n        printf(\"dumb \\n\");\n      }elseif($value % 3 == 0){\n        printf(\"idiot \\n\");\n      }elseif($contain==1){\n        printf(\"stupid \\n\");\n      }else{\n        printf(\"smart \\n\");\n      }\n    }else{\n      printf(\"invalid \\n\");\n    }\n\n  }\n\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 818, "language": "Java", "code": "package track;\npublic class App{\n public static void main(String abcd[])\n {\n   for(int c=0, l=(abcd.length); c<l; c++){\n     String ss = abcd[c];\n     int dd=0,sk=0;\n     int tempint;\n     try{\n       int nm;\n       nm=Integer.parseInt(ss);\n       tempint=nm;\n       if(nm%3==0)\n       {\n         dd=1;\n       }\n       while(tempint > 0)\n       {\n         if(tempint%10==3)\n         {\n           sk=1;\n           break;\n         }\n         tempint=tempint/10;\n       }\n       if(dd==1 && sk==1)\n       {\n         System.out.println(\"dumb\");\n       }\n       else if(dd==1)\n       {\n         System.out.println(\"idiot\");\n       }\n       else if(sk==1)\n       {\n         System.out.println(\"stupid\");\n       }\n       else\n       {\n        System.out.println(\"smart\");\n       }\n     }\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n   }\n }\n}"}
{"id": 819, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # \u5165\u529b\u30c1\u30a7\u30c3\u30af\n    if len(argv) < 1:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    try:\n        limit = int(argv[0])\n    except:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    if not (0 <= limit <= 10000):\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    if limit == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    history = []\n    pattern = ['\u30c9','\u30ab','\u30c9','\u30c9','\u30ab','\u30c9','\u30ab']\n    for _ in range(limit):\n        word = random.choice(['\u30c9', '\u30ab'])\n        print(word)\n        history.append(word)\n        if len(history) >= 7:\n            if history[-7:] == pattern:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 820, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor(int i=0;i<args.length;i++)\n    {\n      if(checkInteger(args[i]))\n      {\n        int number = Integer.parseInt(args[i]);\n        if(number>=0 && number<=1000)\n        {\n          if(number%3==0)\n          {\n            if(args[i].contains(\"3\"))\n            {\n              System.out.println(\"dumb\");\n            } else\n            {\n              System.out.println(\"idiot\");\n            }\n          } else if(args[i].contains(\"3\"))\n          {\n            System.out.println(\"stupid\");\n          } else\n          {\n            System.out.println(\"smart\");\n          }\n        } else\n        {\n          System.out.println(\"invalid\");\n        }\n      } else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n  public static boolean checkInteger(String input)\n  {\n    //This method checks whether the given string has only numbers\n    //Since this checks for the unicodes of the given stiring Full width characters are not accepted\n    char[] chararr = input.toCharArray();\n    for(int i=0;i<chararr.length;i++)\n    {\n      if(!(((int)chararr[i]>=48) && ((int)chararr[i]<=57)))\n      {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"}
{"id": 821, "language": "Python3", "code": "import sys\n\ndef apply_3_idiots_algorithm(n):\n    # \u5165\u529b\u304c\u6574\u6570\u3067\u306a\u3044\u5834\u5408\u306f \"invalid\" \u3092\u8fd4\u3059\n    try:\n        number = int(n)\n    except ValueError:\n        return \"invalid\"\n    \n    # \u5165\u529b\u304c0\uff5e1000\u306e\u7bc4\u56f2\u5916\u306e\u5834\u5408\u306f \"invalid\" \u3092\u8fd4\u3059\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    # \u5165\u529b\u304c3\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u5408\n    divisible_by_3 = number % 3 == 0\n    # \u5165\u529b\u306b\u300c3\u300d\u304c\u542b\u307e\u308c\u308b\u5834\u5408\n    contains_3 = \"3\" in str(number)\n    \n    # \u6761\u4ef6\u306b\u5fdc\u3058\u305f\u51fa\u529b\u751f\u6210\n    if divisible_by_3 and contains_3:\n        return \"dumb\"\n    elif divisible_by_3:\n        return \"idiot\"\n    elif contains_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(apply_3_idiots_algorithm(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 822, "language": "PHP", "code": "<?php \n\nfunction main($argc, $argv) {\n    // JSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u6b21\u306e\u624b\u3092\u6c7a\u3081\u308b\n    $filePath = $argv[0];\n    $data = json_decode(file_get_contents($filePath), true);\n    \n    $robotMoves = array();\n    $playerLastMove = null;\n    \n    // \u6700\u5f8c\u306e3\u3064\u306e\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u3068\u76f8\u624b\u306e\u6700\u5f8c\u306e\u624b\u3092\u53d6\u5f97\n    foreach ($data as $entry) {\n        $robotMoves[] = $entry['robot'];\n        $playerLastMove = $entry['you'];\n    }\n    \n    // \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306f\u65b0\u3057\u3044\u3082\u306e\u304b\u3089\u9806\u306b\u53d6\u5f97\u3057\u3001\u6700\u5f8c\u306e3\u3064\u306e\u307f\u3092\u6b8b\u3059\n    $robotMoves = array_slice($robotMoves, -3);\n    \n    // \u30ed\u30dc\u30c3\u30c8\u304c\u6b21\u306b\u51fa\u3059\u624b\u3092\u6c7a\u5b9a\n    $nextMove = getRobotNextMove($robotMoves, $playerLastMove);\n    \n    // \u52dd\u3066\u308b\u624b\u3092\u51fa\u529b\u3059\u308b\n    echo $nextMove . PHP_EOL;\n}\n\nfunction getRobotNextMove($robotMoves, $playerMove) {\n    // \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306b\u57fa\u3065\u304d\u6b21\u306e\u624b\u3092\u6c7a\u5b9a\u3059\u308b\n    $combinedMoves = implode(\",\", $robotMoves) . \",\" . $playerMove;\n    \n    // \u5404\u624b\u306e\u30b5\u30a4\u30af\u30eb\u3092\u4f5c\u6210\n    if ($combinedMoves === '0,1,2,0') return 1; // \u30ea\u30bb\u30c3\u30c8\u72b6\u614b\n    if ($combinedMoves === '1,2,0,1') return 2; // \u30c1\u30e7\u30ad\n    if ($combinedMoves === '2,0,1,2') return 0; // \u30d1\u30fc\n\n    // \u30b5\u30a4\u30af\u30eb\u51e6\u7406\n    $pattern = [0, 1, 2]; // \u30b0\u30fc\u3001\u30c1\u30e7\u30ad\u3001\u30d1\u30fc\n    $previousMove = ($robotMoves[2] + 1) % 3; // \u30ed\u30dc\u30c3\u30c8\u306e\u6700\u5f8c\u306e\u624b\u306e\u6b21\n    \n    return $pattern[$previousMove];\n}\n\nmain(array_slice($argv, 1));"}
{"id": 823, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nbool validateNumber(const string &input) {\n    for (char c : input) {\n        if (!isdigit(c)) return false;\n    }\n    return true;\n}\n\nbool hasThree(int x) {\n    string str = to_string(x);\n    for (char c : str) {\n        if (c == '3') return true;\n    }\n    return false;\n}\n\nstring classify(int num) {\n    bool divisible = (num % 3 == 0);\n    bool includesThree = hasThree(num);\n\n    if (divisible && includesThree) return \"dumb\";\n    if (divisible) return \"idiot\";\n    if (includesThree) return \"stupid\";\n    return \"smart\";\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        string val(argv[i]);\n        if (validateNumber(val)) {\n            int number = stoi(val);\n            if (number >= 0 && number <= 1000) {\n                cout << classify(number) << endl;\n            } else {\n                cout << \"invalid\" << endl;\n            }\n        } else {\n            cout << \"invalid\" << endl;\n        }\n    }\n    return 0;\n}"}
{"id": 824, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    try:\n      val = int(v)\n    except ValueError:\n      print (\"invalid\")\n      continue\n\n    if val < 0 or 1000 < val or str(val) != v:\n      print(\"invalid\")\n      continue\n      \n    if val % 3 == 0:\n      if '3' in v:\n        print(\"dumb\")\n      else:\n        print(\"idiot\")\n    else:\n      if '3' in v:\n        print(\"stupid\")\n      else:\n        print(\"smart\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 825, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  n = int(argv[0])\n  state = 0\n\n  for i in range(n):\n    sound = random.randint(0, 1)\n    if sound == 0:\n      print(\"\u30c9\")\n    else:\n      print(\"\u30ab\")\n    # \u72b6\u614b\u9077\u79fb\n    if state == 0:\n      if sound == 0:\n        state = 1\n      else:\n        state = 0\n    elif state == 1:\n      if sound == 0:\n        state = 1\n      else:\n        state = 2\n    elif state == 2:\n      if sound == 0:\n        state = 3\n      else:\n        state = 0\n    elif state == 3:\n      if sound == 0:\n        state = 4\n      else:\n        state = 2\n    elif state == 4:\n      if sound == 0:\n        state = 1\n      else:\n        state = 5\n    elif state == 5:\n      if sound == 0:\n        state = 6\n      else:\n        state = 0\n    elif state == 6:\n      if sound == 0:\n        state = 4\n      else:\n        print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n        return\n    else:\n      print(\"state error!\")\n      return\n\n  print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 826, "language": "Python3", "code": "import sys\nimport operator as op\n\ndef num_to_9base(base10):\n  def inner(num):\n    while(True):\n      yield str(num % 9)\n      num = num // 9\n      if num == 0:\n        break\n  return \"\".join(reversed(list(inner(base10))))\n\n  \n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  num1, opcode, num2 = argv[0].split()\n\n  opcodes = {\"+\": op.add, \"-\": op.sub, \"*\": op.mul, \"/\":op.floordiv}\n\n  result = opcodes[opcode](int(num1, base=9), int(num2, base=9))\n\n  print(num_to_9base(result))\n  \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 827, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nint main(int argc, char *argv[]) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    std::string s(argv[i]);\n    char* end;\n\n    long val = strtol(argv[i], &end, 10);\n\n    if (*end != '\\0' || s.empty() || val < 0 || val > 1000) {\n      std::cout << \"invalid\" << std::endl;\n      continue;\n    }\n\n    int num = static_cast<int>(val);\n\n    bool is_multiple_of_3 = (num % 3 == 0);\n    \n    bool has_digit_3 = false;\n    int temp = num;\n    // \u6570\u5024\u306b3\u304c\u542b\u307e\u308c\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    while (temp > 0) {\n      if (temp % 10 == 3) {\n        has_digit_3 = true;\n        break;\n      }\n      temp /= 10;\n    }\n    \n    if (is_multiple_of_3 && has_digit_3) {\n      std::cout << \"dumb\" << std::endl;\n    } else if (is_multiple_of_3) {\n      std::cout << \"idiot\" << std::endl;\n    } else if (has_digit_3) {\n      std::cout << \"stupid\" << std::endl;\n    } else {\n      std::cout << \"smart\" << std::endl;\n    }\n  }\n  return 0;\n}"}
{"id": 828, "language": "Java", "code": "package rpspredictor;\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\nimport org.json.*;\n\npublic class RPSPredictor {\n    public static void main(String[] args) throws Exception {\n        // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u904e\u53bb\u306eRPS\u30b2\u30fc\u30e0\u8a18\u9332\u3092\u5206\u6790\u3057\u3001\u6b21\u306e\u4e00\u624b\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n        String filePath = args[0];\n\n        // JSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n        String content = new String(Files.readAllBytes(Paths.get(filePath)));\n        JSONArray records = new JSONArray(content);\n\n        // \u521d\u671f\u72b6\u614b\u3092\u8a2d\u5b9a\n        List<Integer> robotHistory = Arrays.asList(0, 1, 2);\n        Map<String, Integer> memory = new HashMap<>();\n\n        // \u8a18\u9332\u3092\u51e6\u7406\n        for (int i = 3; i < records.length(); i++) {\n            JSONObject game = records.getJSONObject(i);\n            int robotHand = game.getInt(\"robot\");\n            int opponentHand = game.getInt(\"you\");\n\n            // \u30ad\u30fc\u3092\u4f5c\u6210\u3059\u308b\n            String key = robotHistory.get(0) + \",\" + robotHistory.get(1) + \",\" + robotHistory.get(2) + \",\" + opponentHand;\n            if (!memory.containsKey(key)) {\n                memory.put(key, robotHand);\n            }\n\n            // \u5c65\u6b74\u3092\u66f4\u65b0\n            robotHistory = Arrays.asList(robotHistory.get(1), robotHistory.get(2), robotHand);\n        }\n\n        // \u6b21\u306e\u624b\u3092\u4e88\u6e2c\n        String lastKey = robotHistory.get(0) + \",\" + robotHistory.get(1) + \",\" + robotHistory.get(2) + \",\" + records.getJSONObject(records.length() - 1).getInt(\"you\");\n        int nextRobotMove = memory.getOrDefault(lastKey, 0);\n\n        // \u4e88\u6e2c\u3059\u308b\u624b\u3092\u51fa\u529b\n        System.out.println((nextRobotMove + 1) % 3);\n    }\n}"}
{"id": 829, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nconst N = 8;\nconst pos = Array.from(new Array(N)).map(() => true);\nconst queen = [];\n\nconst printQueen = () => {\n\tconst board = Array.from(new Array(N)).map(() => Array.from(new Array(N)).fill('.'));\n\tfor(let i=0; i<N; i++){\n\t\tboard[i][queen[i]] = 'Q';\n\t}\n\tfor(let v of board){\n\t\tconsole.log(v.join(''));\n\t}\n}\n\nconst check = n => {\n\tlet abs;\n\tfor(let i=0; i<n; i++){\n\t\tabs = queen[i] - queen[n];\n\t\tif((abs<0?-abs:abs) == n-i)return false;\n\t}\n\treturn true;\n};\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  // argv.forEach((v, i) => console.log(`argv[${i}]: ${v}`));\n\n  var fs = require(\"fs\");\n  var readline = require(\"readline\");\n\n  var stream = fs.createReadStream(argv[0], \"utf8\");\n\n  var reader = readline.createInterface({ input: stream });\n\n  let inputQueen = null;\n  reader.on(\"line\", (data) => {\n    if(inputQueen == null)inputQueen = [];\n    else{\n      const d = data.split(' ');\n      inputQueen[d[0]|0] = d[1]|0;\n    }\n  });\n  reader.on(\"close\", () => {\n    (function setQueen(n){\n      if(n == N){\n        printQueen();\n        return true;\n      }\n      if(inputQueen[n]){\n        const q = inputQueen[n];\n        if(pos[q]){\n          pos[q] = false;\n          queen.push(q);\n          if(check(n)){\n            if(setQueen(n+1))return true;\n          }\n          pos[q] = true;\n          queen.pop(q);\n        }\n      }else{\n        for(let i=0; i<N; i++){\n          if(pos[i]){\n            queen.push(i);\n            pos[i] = false;\n            if(check(n)){\n              if(setQueen(n+1))return true;\n            }\n            queen.pop(i);\n            pos[i] = true;\n          }\n        }\n      }\n      return false;\n    })(0);\n  });\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 830, "language": "Java", "code": "package track;\n// package track;\n// class: App\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nclass App {\n\n    static<T,U> String mapToJson(Map<T,U> map){\n        StringBuilder sb = new StringBuilder(\"{\");\n        for(Map.Entry<T,U> entry : map.entrySet()){\n            sb.append(\"\\\"\"+entry.getKey()+\"\\\"\");\n            sb.append(\":\");\n            if(entry.getValue() instanceof Character)sb.append(\"\\\"\"+entry.getValue()+\"\\\"\");\n            else sb.append(entry.getValue());\n            sb.append(\",\");\n        }\n        sb.replace(sb.length()-1, sb.length(), \"}\");\n        return sb.toString();\n    }\n\n    static Map count(String s){\n        Map<Character, Integer> cnt = new HashMap<>();\n        cnt.put(' ', 0);\n        for(int i='a';i<='z';++i)cnt.put((char)i, 0);\n        for(int i='A';i<='Z';++i)cnt.put((char)i, 0);\n        for(int i=0;i<s.length();++i)if(cnt.containsKey(s.charAt(i)))cnt.put(s.charAt(i), cnt.get(s.charAt(i))+1);\n        return cnt;\n    }\n    static Map space(String s){\n        Map<Character, Integer> cnt = count(s);\n        Map<String, Character> res = new HashMap<>();\n        res.put(\"char\", ' ');\n        for(Map.Entry<Character, Integer> entry: cnt.entrySet()){\n            if(entry.getValue() > cnt.get(res.get(\"char\")))res.put(\"char\", entry.getKey());\n        }\n        return res;\n    }\n    static String decrypt(String s){\n        Map<String, Character> sp = space(s);\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<s.length();++i)sb.append(s.charAt(i)==' '?(char)sp.get(\"char\")\n                                              :s.charAt(i)==sp.get(\"char\")?' '\n                                              :s.charAt(i));\n        Map<Character, Integer> cnt = count(sb.toString());\n        int offset = 'a'-'A';\n        int max = 'A';\n        for(int i='A';i<='Z';++i)if(cnt.get((char)max)+cnt.get((char)(max+offset))<cnt.get((char)i)+cnt.get((char)(i+offset)))max=i;\n        int shift = 'E'-max;\n        StringBuilder res = new StringBuilder();\n        for(int i=0;i<sb.length();++i){\n            if('a'<=sb.charAt(i)&&sb.charAt(i)<='z')res.append((char)((sb.charAt(i)-'a'+shift+26)%26 +'a'));\n            else if('A'<=sb.charAt(i)&&sb.charAt(i)<='Z')res.append((char)((sb.charAt(i)-'A'+shift+26)%26 +'A'));\n            else res.append(sb.charAt(i));\n        }\n        return res.toString();\n    }\n\n    public static void main(String[] args){\n        try{\n            String res=null;\n            FileWriter out = new FileWriter(new File(args[2]));\n            List<String> inputs = Files.readAllLines(Paths.get(args[1]));\n            StringBuilder input = new StringBuilder();\n            for(String s :inputs)input.append(s);\n            if(args[0].equals(\"count\"))res=mapToJson(count(input.toString()));\n            else if(args[0].equals(\"space\"))res=mapToJson(space(input.toString()));\n            else if(args[0].equals(\"decrypt\"))res=decrypt(input.toString());\n            out.write(res);\n            out.flush();out.close();\n        }catch(Exception e){}\n\n    }\n}"}
{"id": 831, "language": "Java", "code": "package track;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) throws IOException {\n        String task = args[0];\n        String inputFile = args[1];\n        String outputFile = args[2];\n\n        String content = new String(Files.readAllBytes(Paths.get(inputFile)));\n\n        if (task.equals(\"count\")) {\n            int[] counts = new int[256];\n            for (int i = 0; i < content.length(); i++) {\n                char ch = content.charAt(i);\n                if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch == ' ') {\n                    counts[ch]++;\n                }\n            }\n\n            BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n            writer.write(\"{\");\n            boolean isFirst = true;\n\n            if (counts[' '] > 0) {\n                writer.write(\"\\\" \\\": \" + counts[' ']);\n                isFirst = false;\n            }\n            for (char c = 'A'; c <= 'Z'; c++) {\n                if (counts[c] > 0) {\n                    if (!isFirst) writer.write(\",\");\n                    writer.write(\"\\\"\" + c + \"\\\": \" + counts[c]);\n                    isFirst = false;\n                }\n            }\n            for (char c = 'a'; c <= 'z'; c++) {\n                if (counts[c] > 0) {\n                    if (!isFirst) writer.write(\",\");\n                    writer.write(\"\\\"\" + c + \"\\\": \" + counts[c]);\n                    isFirst = false;\n                }\n            }\n\n            writer.write(\"}\");\n            writer.close();\n\n        } else if (task.equals(\"space\") || task.equals(\"decrypt\")) {\n            char targetSwappedChar = ' ';\n            double minDiff = 1e9;\n\n            for (char c_candidate = 'a'; c_candidate <= 'z'; c_candidate++) {\n                char[] tempArray = content.toCharArray();\n                for (int i = 0; i < tempArray.length; i++) {\n                    if (tempArray[i] == c_candidate) {\n                        tempArray[i] = ' ';\n                    } else if (tempArray[i] == ' ') {\n                        tempArray[i] = c_candidate;\n                    }\n                }\n                String temp_content = new String(tempArray);\n\n                String[] words = temp_content.split(\"[^a-zA-Z]+\");\n                long totalLength = 0;\n                int wordCount = 0;\n                for (String w : words) {\n                    if (w.length() > 0) {\n                        totalLength += w.length();\n                        wordCount++;\n                    }\n                }\n\n                if (wordCount == 0) continue;\n                double avg_len = (double) totalLength / wordCount;\n                double diff = Math.abs(avg_len - 4.5);\n\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    targetSwappedChar = c_candidate;\n                }\n            }\n\n            char[] restored_array = content.toCharArray();\n            for (int i = 0; i < restored_array.length; i++) {\n                if (restored_array[i] == targetSwappedChar) {\n                    restored_array[i] = ' ';\n                } else if (restored_array[i] == ' ') {\n                    restored_array[i] = targetSwappedChar;\n                }\n            }\n            String restored_content = new String(restored_array);\n            \n            int[] frequencies = new int[26];\n            for (int i = 0; i < restored_content.length(); i++) {\n                char c = restored_content.charAt(i);\n                if (c >= 'a' && c <= 'z') {\n                    frequencies[c - 'a']++;\n                } else if (c >= 'A' && c <= 'Z') {\n                    frequencies[c - 'A']++;\n                }\n            }\n            \n            int max_freq = -1;\n            char most_freq_char = ' ';\n            for(int i = 0; i < 26; i++) {\n                if (frequencies[i] > max_freq) {\n                    max_freq = frequencies[i];\n                    most_freq_char = (char)('a' + i);\n                }\n            }\n\n            int shift_val = (most_freq_char - 'e' + 26) % 26;\n\n            if (task.equals(\"space\")) {\n                int original_char_code = 'a' + (targetSwappedChar - 'a' - shift_val + 26) % 26;\n                char original_char = (char)original_char_code;\n                BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n                writer.write(\"{\\\"char\\\": \\\"\" + original_char + \"\\\"}\");\n                writer.close();\n            } else { // decrypt\n                BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n                for(int i = 0; i < content.length(); i++) {\n                    char c = content.charAt(i);\n                    char final_char;\n                    if (c == targetSwappedChar) {\n                        final_char = ' ';\n                    } else if (c == ' ') {\n                        final_char = targetSwappedChar;\n                    } else if (c >= 'a' && c <= 'z') {\n                        final_char = (char)('a' + (c - 'a' - shift_val + 26) % 26);\n                    } else if (c >= 'A' && c <= 'Z') {\n                        final_char = (char)('A' + (c - 'A' - shift_val + 26) % 26);\n                    } else {\n                        final_char = c;\n                    }\n                    writer.write(final_char);\n                }\n                writer.close();\n            }\n        }\n    }\n}"}
{"id": 832, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n    int[] nik = new int[args.length];\n    for(int i=0;i<args.length;i++)\n    {\n      nik[i] = Integer.parseInt(args[i]) ;\n    }\n    for(int i=0;i<args.length;i++)\n    {\n      if(nik[i]<=1000 && nik[i]>=0)\n      {\n        if(nik[i]<100)\n        {\n          if(nik[i]%3 == 0 && (args[i].charAt(0) == '3' || args[i].charAt(1) == '3'))\n            args[i] = \"dumb\";\n          else if(args[i].charAt(0)== '3' || args[i].charAt(1) == '3')\n            args[i] = \"stupid\";\n          else if(nik[i]%3 == 0)\n            args[i] = \"idiot\";\n          else\n            args[i] = \"smart\";\n        }\n        else if(nik[i]>=100)\n        {\n          if(nik[i]%3 == 0 && (args[i].charAt(0) == '3' || args[i].charAt(1) == '3' || args[i].charAt(2) == '3' ))\n            args[i] = \"dumb\";\n          else if(args[i].charAt(0) == '3' || args[i].charAt(1) == '3' || args[i].charAt(2) == '3')\n            args[i] = \"stupid\";\n          else if(nik[i]%3 == 0)\n            args[i] = \"idiot\";\n          else\n            args[i] = \"smart\";\n        }\n      }\n      else\n        args[i] = \"invalid\";\n    }\n\t\tfor (int i = 0, l = args.length; i < l; i++) \n    {\n\t\t\tString output = args[i];\n\t\t\tSystem.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 833, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class App {\n\n\tprivate static final int n = 8;\n\tpublic static void main(String[] args) throws IOException {\n\t\tif (args == null || args.length < 1) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// index row, value col\n\t\t\t\n\t\tboolean[] column = new boolean[n];\n\t\tboolean[] diag = new boolean[n+n-1];\n\t\tboolean[] revdiag = new boolean[n+n-1];\t\n\t\t\t\n\t\tInteger[] resultCols = new Integer[n];\n\n\n\t\tBufferedReader reader = new BufferedReader(new FileReader(args[0]));\n\t\tString line = reader.readLine();\n\t\t\n\t\tList<String> input = new ArrayList<>();\n\t\twhile (line != null) {\n\t\t\tString[] split = line.split(\" \");\n\t\t\tfor (String str : split) {\n\t\t\t\tinput.add(str);\n\t\t\t}\n\t\t\tline = reader.readLine();\n\t\t}\n\n\t\tinit(input, column, diag, revdiag, resultCols);\n\t\t\t\n\t\tfindValid8Queen(0, column, diag, revdiag, resultCols);\n\t\t\n\t\t\n\n\t}\n\n\tprivate static void init(List<String> args, boolean[] column, boolean[] diag, boolean[] revdiag, Integer[] resultCols) {\t\n\t\tfor (int i = 1; i < args.size(); i+=2) {\n\t\t\tint row = Integer.parseInt(args.get(i));\n\t\t\tint col = Integer.parseInt(args.get(i+1));\n\t\t\t\n\t\t\tcolumn[col] = true;\n\t\t\tdiag[col+row] = true;\n\t\t\trevdiag[col-row+n-1] = true;\n\t\t\t\n\t\t\tresultCols[row] = col;\n\t\t}\n\t}\n\t\n\tprivate static boolean findValid8Queen(int row, boolean[] column, boolean[] diag, boolean[] revdiag, Integer[] resultCols) {\n\t\tif (row == n) {\n\t\t\tprintResult(resultCols);\n\t\t\treturn true;\n\t\t} else if (resultCols[row] != null) {\n\t\t\treturn findValid8Queen(row + 1, column, diag, revdiag, resultCols);\n\t\t}\n\t\t\n\t\tfor (int col = 0; col < n; col++) {\n\t\t\tif (!isValid(row, col, column, diag, revdiag)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmarkVisited(row, col, column, diag, revdiag);\n\t\t\tresultCols[row] = col;\n\t\t\tif(findValid8Queen(row, column, diag, revdiag, resultCols)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tunmarkVisited(row, col, column, diag, revdiag);\n\t\t\tresultCols[row] = null;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate static void printResult(Integer[] resultCols) {\n\t\tStringBuilder stb = new StringBuilder();\n\t\tfor (int targetCol : resultCols) {\n\t\t\tstb.setLength(0);\n\t\t\tfor (int curCol = 0; curCol < n; curCol++) {\n\t\t\t\tif (curCol == targetCol) {\n\t\t\t\t\tstb.append(\"Q\");\n\t\t\t\t} else {\n\t\t\t\t\tstb.append(\".\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(stb);\n\t\t}\n\t}\n\t\n\tprivate static boolean isValid(int row, int col, boolean[] column, boolean[] diag, boolean[] revdiag) {\n\t\treturn !column[col] & !diag[row+col] & !revdiag[col-row+n-1]; \n\t}\n\t\n\tprivate static void markVisited(int row, int col, boolean[] column, boolean[] diag, boolean[] revdiag) {\n\t\tcolumn[col] = true;\n\t\tdiag[row+col] = true;\n\t\trevdiag[col-row+n-1] = true;\n\t}\n\t\n\tprivate static void unmarkVisited(int row, int col, boolean[] column, boolean[] diag, boolean[] revdiag) {\n\t\tcolumn[col] = false;\n\t\tdiag[row+col] = false;\n\t\trevdiag[col-row+n-1] = false;\n\t}\n\n\n}\n"}
{"id": 834, "language": "Python3", "code": "import sys\n\n# Constant for the board size\nSIZE = 8\n\n# Global arrays to track the state of the board and conflicts\npos_queens = [-1] * SIZE # Stores the column index of the queen for each row\noccupied_cols_arr = [False] * SIZE # Tracks if a column is occupied\noccupied_diag1_arr = [False] * (2 * SIZE - 1) # Tracks if an r+c diagonal is occupied\noccupied_diag2_arr = [False] * (2 * SIZE - 1) # Tracks if an r-c diagonal is occupied (offset)\nsolution_found_flag = False # Flag to stop search after finding the unique solution\n\ndef draw_board(queen_positions):\n    # Outputs the 8x8 chessboard representation\n    for row_num in range(SIZE):\n        line_chars = [\".\"] * SIZE # Create a list of '.' characters\n        line_chars[queen_positions[row_num]] = \"Q\" # Place 'Q' at the queen's column\n        print(\"\".join(line_chars)) # Join characters to form a row string\n\ndef find_placement(curr_row):\n    global solution_found_flag # Access the global flag\n\n    # If a solution has already been found, terminate this path\n    if solution_found_flag:\n        return\n\n    # Base case: If we successfully placed queens in all rows (0 to SIZE-1)\n    if curr_row == SIZE:\n        draw_board(pos_queens) # Print the board\n        solution_found_flag = True # Set the flag to true\n        return\n\n    # If the current row already contains a pre-placed queen, move to the next row\n    if pos_queens[curr_row] != -1:\n        find_placement(curr_row + 1)\n        return\n\n    # Iterate through all columns in the current row to try placing a queen\n    for col_val in range(SIZE):\n        # Calculate diagonal indices\n        sum_diag_idx = curr_row + col_val\n        diff_diag_idx = curr_row - col_val + SIZE - 1 # Offset for non-negative indexing\n\n        # Check if placing a queen at (curr_row, col_val) is safe\n        if not occupied_cols_arr[col_val] and \\\n           not occupied_diag1_arr[sum_diag_idx] and \\\n           not occupied_diag2_arr[diff_diag_idx]:\n\n            # Place queen: update state\n            pos_queens[curr_row] = col_val\n            occupied_cols_arr[col_val] = True\n            occupied_diag1_arr[sum_diag_idx] = True\n            occupied_diag2_arr[diff_diag_idx] = True\n\n            find_placement(curr_row + 1) # Recurse for the next row\n\n            if solution_found_flag: # If solution found by recursive call, stop this branch\n                return\n\n            # Backtrack: Undo the placement\n            occupied_cols_arr[col_val] = False\n            occupied_diag1_arr[sum_diag_idx] = False\n            occupied_diag2_arr[diff_diag_idx] = False\n            pos_queens[curr_row] = -1 # Reset queen position\n\ndef main(argv):\n    # Read the number of initial queens from standard input\n    num_initial_queens = int(sys.stdin.readline())\n    \n    # Process each initial queen's position\n    for _ in range(num_initial_queens):\n        row_coord, col_coord = map(int, sys.stdin.readline().split())\n        # Place the queen and mark conflicts\n        pos_queens[row_coord] = col_coord\n        occupied_cols_arr[col_coord] = True\n        occupied_diag1_arr[row_coord + col_coord] = True\n        occupied_diag2_arr[row_coord - col_coord + SIZE - 1] = True\n\n    # Start the search from the first row\n    find_placement(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 835, "language": "Python3", "code": "import sys\n\ndef classification_system(input_argument_str):\n    if not input_argument_str.isdigit(): return \"invalid\"\n    \n    integer_value = int(input_argument_str)\n    \n    if integer_value < 0 or integer_value > 1000: return \"invalid\"\n\n    check_is_divisible = (integer_value % 3 == 0)\n    check_contains_digit = ('3' in input_argument_str)\n\n    if check_is_divisible and check_contains_digit:\n        return \"dumb\"\n    elif check_is_divisible:\n        return \"idiot\"\n    elif check_contains_digit:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef command_dispatcher(arguments_from_user):\n    for user_arg in arguments_from_user:\n        print(classification_system(user_arg))\n\nif __name__ == '__main__':\n    command_dispatcher(sys.argv[1:])"}
{"id": 836, "language": "Java", "code": "package drumbeat;\n\nimport java.util.Random;\n\npublic class TaikoApp {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int maxAttempts = Integer.parseInt(args[0]);\n\n    if (maxAttempts < 0 || maxAttempts > 10000) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    StringBuilder outputSequence = new StringBuilder();\n    Random generator = new Random();\n\n    for (int count = 0; count < maxAttempts; count++) {\n      String strike = generator.nextInt(2) == 0 ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(strike);\n      outputSequence.append(strike);\n\n      if (outputSequence.toString().endsWith(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n\n    // If the given sequence isn't found\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 837, "language": "Python3", "code": "import sys\n\ndef classify_number_from_input(input_string):\n    if not input_string.isdigit():\n        return \"invalid\"\n\n    number = int(input_string)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in input_string:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in input_string:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Analyze inputs and return classifications based on rules.\n    results = [classify_number_from_input(arg) for arg in argv]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 838, "language": "Python3", "code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Jun 16 15:54:08 2019\n\n@author: Shyam Kumar\n\"\"\"\n\nimport sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        if v.isdigit():\n            n = int(v)\n            s = str(v)\n            if 0 <= n <= 1000:\n                if n%3 == 0 and \"3\"in s:\n                    print(\"dumb\")\n                elif \"3\" in s:\n                    print(\"stupid\")\n                elif n%3 == 0:\n                    print(\"idiot\")\n                elif n%3 != 0 and \"3\" not in s:\n                    print(\"smart\")\n                else:\n                    print(\"invalid\")\n            else:\n                print(\"invalid\")\n        else:\n            print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 839, "language": "Python3", "code": "import sys\n\ndef analyze_input(input_data):\n    if not input_data.isdigit():\n        return \"invalid\"\n\n    number = int(input_data)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in input_data:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in input_data:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Program to identify number classifications.\n    results = []\n    \n    for item in argv:\n        results.append(analyze_input(item))\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 840, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueensSolver {\n    static char[][] chessBoard = new char[8][8];\n    static boolean[] column = new boolean[8];\n    static boolean[] leftDiagonal = new boolean[15];\n    static boolean[] rightDiagonal = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int row = scanner.nextInt();\n            int col = scanner.nextInt();\n            chessBoard[row][col] = 'Q';\n            column[col] = true;\n            leftDiagonal[row + col] = true;\n            rightDiagonal[row - col + 7] = true;\n        }\n        placeQueens(0);\n        displayBoard();\n    }\n\n    private static boolean placeQueens(int row) {\n        if (row == 8) return true;\n\n        for (int col = 0; col < 8; col++) {\n            if (!column[col] && !leftDiagonal[row + col] && !rightDiagonal[row - col + 7]) {\n                chessBoard[row][col] = 'Q';\n                column[col] = true;\n                leftDiagonal[row + col] = true;\n                rightDiagonal[row - col + 7] = true;\n\n                if (placeQueens(row + 1)) return true;\n\n                chessBoard[row][col] = '.';\n                column[col] = false;\n                leftDiagonal[row + col] = false;\n                rightDiagonal[row - col + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void displayBoard() {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (chessBoard[i][j] == 0) {\n                    chessBoard[i][j] = '.';\n                }\n                System.out.print(chessBoard[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 841, "language": "Python3", "code": "import sys\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you']);e=i.get('robot',-1)\n    if e==-1:break\n    d[c]=e\n  print(d[c])\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 842, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int robot;\n    int you;\n} RpsRecord;\n\nint main(int argc, char *argv[]) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n    if (argc != 2) return 1;\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (!file) return 1; // \u30a8\u30e9\u30fc\u51e6\u7406\n\n    RpsRecord records[100];\n    char line[128];\n    int n = 0;\n\n    while (fgets(line, sizeof(line), file) && n < 100) {\n        sscanf(line, \"{\\\"robot\\\": %d, \\\"you\\\": %d}\", &records[n].robot, &records[n].you);\n        n++;\n    }\n    fclose(file);\n\n    int robotHands[3] = {0, 1, 2}; // 0: rock, 1: scissors, 2: paper\n    int sameCount = 0;\n    int lastRobot = records[n - 1].robot;\n    int lastYou = records[n - 1].you;\n\n    for (int i = n - 1; i >= 0; i--) {\n        if (records[i].robot == lastRobot && records[i].you == lastYou) sameCount++;\n        else break;\n    }\n\n    printf(\"%d\\n\", robotHands[sameCount % 3]); // \u6b21\u306e\u624b\u3092\u51fa\u529b\n\n    return 0;\n}"}
{"id": 843, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n\n  private static final int DIMENSION = 8; // Board dimension\n  private int[] queenPositions; // queenPositions[row] = col\n  private boolean[] columnOccupied;\n  private boolean[] diagSumOccupied; // row + col\n  private boolean[] diagDiffOccupied; // row - col + (DIMENSION - 1)\n\n  public App() {\n    queenPositions = new int[DIMENSION];\n    for (int i = 0; i < DIMENSION; i++) {\n      queenPositions[i] = -1; // -1 means no queen in this row yet\n    }\n    columnOccupied = new boolean[DIMENSION];\n    diagSumOccupied = new boolean[2 * DIMENSION - 1];\n    diagDiffOccupied = new boolean[2 * DIMENSION - 1];\n  }\n\n  // Attempts to find a solution starting from the given row\n  private boolean solveQueens(int currentRow) {\n    if (currentRow == DIMENSION) {\n      return true; // All queens successfully placed\n    }\n\n    // If a queen is already placed in this row (pre-defined), skip to the next row\n    if (queenPositions[currentRow] != -1) {\n      return solveQueens(currentRow + 1);\n    }\n\n    // Try placing a queen in each column of the current row\n    for (int col = 0; col < DIMENSION; col++) {\n      int diagSum = currentRow + col;\n      int diagDiff = currentRow - col + (DIMENSION - 1);\n\n      if (!columnOccupied[col] && !diagSumOccupied[diagSum] && !diagDiffOccupied[diagDiff]) {\n        // Place queen\n        queenPositions[currentRow] = col;\n        columnOccupied[col] = true;\n        diagSumOccupied[diagSum] = true;\n        diagDiffOccupied[diagDiff] = true;\n\n        // Recur for the next row\n        if (solveQueens(currentRow + 1)) {\n          return true;\n        }\n\n        // Backtrack: Remove queen if it didn't lead to a solution\n        queenPositions[currentRow] = -1;\n        columnOccupied[col] = false;\n        diagSumOccupied[diagSum] = false;\n        diagDiffOccupied[diagDiff] = false;\n      }\n    }\n    return false; // No valid placement found for this row\n  }\n\n  // Prints the solved board\n  private void printBoard() {\n    char[][] boardResult = new char[DIMENSION][DIMENSION];\n    for (int i = 0; i < DIMENSION; i++) {\n      for (int j = 0; j < DIMENSION; j++) {\n        boardResult[i][j] = '.';\n      }\n    }\n\n    for (int r = 0; r < DIMENSION; r++) {\n      if (queenPositions[r] != -1) {\n        boardResult[r][queenPositions[r]] = 'Q';\n      }\n    }\n\n    for (int i = 0; i < DIMENSION; i++) {\n      System.out.println(new String(boardResult[i]));\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner stdin = new Scanner(System.in);\n    int k = stdin.nextInt();\n\n    App solver = new App();\n\n    // Read initial queen placements and mark them\n    for (int i = 0; i < k; i++) {\n      int r = stdin.nextInt();\n      int c = stdin.nextInt();\n      solver.queenPositions[r] = c; // Record fixed queen\n      solver.columnOccupied[c] = true;\n      solver.diagSumOccupied[r + c] = true;\n      solver.diagDiffOccupied[r - c + (DIMENSION - 1)] = true;\n    }\n    stdin.close();\n\n    solver.solveQueens(0); // Start solving from row 0\n    solver.printBoard(); // Print the final solution\n  }\n}"}
{"id": 844, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <tuple>\n#include <nlohmann/json.hpp> // Use nlohmann JSON library\nusing namespace std;\nusing json = nlohmann::json;\n\ntypedef tuple<int, int, int, int> RobotState; // Defines a state (3 robot moves + opponent last)\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        cerr << \"Usage: \" << argv[0] << \" <input.json>\" << endl;\n        return 1;\n    }\n\n    ifstream inFile(argv[1]);\n    if (!inFile.is_open()) {\n        cerr << \"Error: Could not open file \" << argv[1] << endl;\n        return 1;\n    }\n\n    json records;\n    inFile >> records;\n    inFile.close();\n\n    unordered_map<RobotState, int, hash<RobotState>> memory;\n    vector<int> robotHistory = {0, 1, 2}; // Initial sequence of robot plays\n    int opponentLast = -1;\n\n    for (const auto& item : records) {\n        int robotMove = item[\"robot\"];\n        int opponentMove = item[\"you\"];\n        opponentLast = opponentMove;\n\n        RobotState currentState = make_tuple(robotHistory[0], robotHistory[1], robotHistory[2], opponentLast);\n\n        if (memory.find(currentState) == memory.end()) {\n            memory[currentState] = 0; // Initial move in cycle\n        }\n\n        robotHistory[0] = robotHistory[1];\n        robotHistory[1] = robotHistory[2];\n        robotHistory[2] = robotMove;\n    }\n\n    RobotState nextState = make_tuple(robotHistory[0], robotHistory[1], robotHistory[2], opponentLast);\n    int nextRobotPlay = memory[nextState] % 3;\n    memory[nextState]++;\n\n    // Output the winning hand against the robot\n    cout << (nextRobotPlay + 1) % 3 << endl;\n\n    return 0;\n}"}
{"id": 845, "language": "C", "code": "#include <stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#include<string.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int num=atoi(argv[i]);\n    int sub=num;\n    int b,flag=0;\n    while(sub>0)\n    {\n      b=sub%10;\n      if(b==3)\n      {\n        flag=1;\n      }\n      sub=sub/10;\n    }\n    if(num%3==0 && flag==1)\n    {\n      printf(\"dumb\\n\");\n    }\n    else if(num%3==0 && num!=0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else if(flag==1)\n    {\n      printf(\"stupid\\n\");\n    }\n    else if(num%3!=0 && flag!=1)\n    {\n      printf(\"smart\\n\");\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n\n  }\n  return 0;\n}\n"}
{"id": 846, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n         \n         String numberString = args[i];\n      \n         int number = 0;\n         boolean Invalid = false;\n         boolean Num = false;\n         \n         for (int j = 0; j < numberString.length(); j++) {\n            char numberChar = numberString.charAt(j);\n            \n            if ('0' <= numberChar && numberChar <= '9') {\n               number = number * 10 + (numberChar - '0');\n               if (numberChar == '3') {\n                  Num = true;\n               }\n            } else {\n               System.out.println(\"invalid\");\n               Invalid = true;\n               break;\n            }\n         }\n         \n         if (Invalid) {\n            continue;\n         }\n         \n         if (number % 3 == 0) {\n            if (Num) {\n               System.out.println(\"dumb\");\n            } else {\n               System.out.println(\"idiot\");\n            }\n         } else {\n            if (Num) {\n               System.out.println(\"stupid\");\n            } else {\n               System.out.println(\"smart\");\n            }\n         }\n      }\n\t}\n}\n"}
{"id": 847, "language": "Python3", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nimport string\nimport json\nimport codecs\n\n# ROT9\n# https://blog.amedama.jp/entry/2015/10/13/213412\ndef _rot(c, n):\n    # \u5165\u529b\u6587\u5b57\u304c\u5927\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308b\u5834\u5408\n    if 'A' <= c and c <= 'Z':\n        # n\u6587\u5b57\u5206\u305a\u3089\u3059\n        # ord(): \u6587\u5b57\u306eUnicode\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8868\u3059\u6574\u6570\u3092\u53d6\u5f97\n        # \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u306eord()\u304b\u3089\u57fa\u6e96\u306eord('A')\u3092\u5f15\u3044\u3066+9\u79fb\u52d5\u3055\u305b\u305f\u6642\u306e\n        # \u6574\u6570\u309225\u4ee5\u4e0b\u306e\u6570\u5b57\u306b\u5727\u7e2e\u3057\u3066chr()\u3067\u300c\u6587\u5b57\u306eUnicode\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8868\u3059\u6574\u6570\u300d\u304b\u3089\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n        return chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n    # \u5165\u529b\u6587\u5b57\u304c\u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308b\u5834\u5408\n    if 'a' <= c and c <= 'z':\n        # n\u6587\u5b57\u5206\u305a\u3089\u3059\n        # \u4e0a\u306b\u540c\u3058\uff08\u5c0f\u6587\u5b57ver\uff09\n        return chr((ord(c) - ord('a') + n) % 26 + ord('a'))\n    # \u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u5bfe\u8c61\u5916\n    return c\n\n# \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300ccount\u300d\ndef count(s, outpath, flag):\n    d = {}\n    # \u7a7a\u767d\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    d[' '] = s.count(' ')\n    # \u5927\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3054\u3068\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    ascii_uppercase = list(string.ascii_uppercase)\n    for i in ascii_uppercase:\n        d[i] = s.count(i)\n    # \u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3054\u3068\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    ascii_lowercase = list(string.ascii_lowercase)\n    for i in ascii_lowercase:\n        d[i] = s.count(i)\n    # \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300cspace\u300d\u3067\u547c\u3070\u308c\u305f\u5834\u5408\u306f\u51fa\u529b\u30d1\u30b9\u3092\u81ea\u5206\u3067\u6307\u5b9a\n    if flag:\n        with open(outpath, \"w\") as f:\n            json.dump(d, f)\n    else:\n        with open('./countresult.json', \"w\") as f:\n            json.dump(d, f)\n\n# \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300cspace\u300d\ndef space(s, outpath, flag):\n    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300ccount\u300d\u3067\u5404\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u53d6\u5f97\u3059\u308b\n    count(s, outpath, False)\n    with open('./countresult.json') as f:\n        d = json.load(f)\n    # \u51fa\u73fe\u56de\u6570\u304c\u6700\u591a\u306a\u3082\u306e\u3092\u53d6\u5f97\u3059\u308b\n    max_k = max(d, key=d.get)\n    d = {\"char\": max_k}\n    # \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300cdecrypt\u300d\u3067\u547c\u3070\u308c\u305f\u5834\u5408\u306f\u51fa\u529b\u30d1\u30b9\u3092\u81ea\u5206\u3067\u6307\u5b9a\n    if flag:\n        with open(outpath, \"w\") as f:\n            json.dump(d, f)\n    else:\n        with open('./spaceresult.json', \"w\") as f:\n            json.dump(d, f)\n\ndef decrypt(s, outpath):\n    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300cspace\u300d\u3067\u7a7a\u767d\u3068\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u3092\u53d6\u5f97\u3059\u308b\n    space(s, outpath, False)\n    with open('./spaceresult.json') as f:\n        d = json.load(f)\n    # \u7a7a\u767d\u3068\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u308b\n    if d[\"char\"].islower():\n        s = s.replace(' ', d[\"char\"].upper())\n        s = s.replace(d[\"char\"], ' ')\n        s = s.replace(d[\"char\"].upper(), d[\"char\"])\n    else:\n        s = s.replace(' ', d[\"char\"].lower())\n        s = s.replace(d[\"char\"], ' ')\n        s = s.replace(d[\"char\"].lower(), d[\"char\"])\n    # rot\u3067\u6587\u5b57\u3092\u305a\u3089\u3059\n    # _rot\u95a2\u6570\u3092\u5b9a\u7fa9\n    s = ''.join(_rot(c, 9) for c in s)\n    # s = ''.join(_rot(c, 15) for c in s)\n    # \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n    with open(outpath, \"w\") as f:\n        f.write(s)\n\ndef main(argv):\n    if not (len(argv) == 3):\n        print('ERROR: \u5f15\u6570\u306e\u6570\u304c\u5408\u3044\u307e\u305b\u3093')\n        print('USAGE: ./main \"subcmd\" \"in_path\" \"out_path\"')\n        exit()\n    cmd = argv.pop(0)\n    inpath = argv.pop(0)\n    outpath = argv.pop(0)\n    # \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    file_data = open(inpath, \"r\").read()\n    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30c1\u30a7\u30c3\u30af\n    if cmd == 'count':\n        # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300ccount\u300d\n        count(file_data, outpath, True)\n    elif cmd == 'space':\n        # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300cspace\u300d\n        space(file_data, outpath, True)\n    elif cmd == 'decrypt':\n        # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u300cdecrypt\u300d\n        decrypt(file_data, outpath)\n    else:\n        # \u30a8\u30e9\u30fc\u51e6\u7406\n        print('ERROR: subcmd is \"count\" or \"space\" or \"decrypt\"')\n        exit()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 848, "language": "Python3", "code": "import sys\nimport json\nfrom manager import writer, count, space, decrypt\n\n\ndef main(argv):\n    if argv[0] == 'count':\n        writer(argv[2], json.dumps(count(argv[1])))\n\n    elif argv[0] == 'space':\n        writer(argv[2], json.dumps(space(argv[1])))\n\n    elif argv[0] == 'decrypt':\n        writer(argv[2], decrypt(argv[1]))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 849, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\n    String doka = \"\";\n    String answer = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    Random r = new Random();\n    int kai = Integer.parseInt(args[0]);\n\n    // \u5165\u529b\u5024\u30c1\u30a7\u30c3\u30af\n    if (kai == 0) {\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    } else if (0 < kai && kai < 10001) {\n    } else {\n      //System.out.println(\"\u5165\u529b\u306f0\uff5e10000\u306e\u9593\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\");\n      System.exit(0);\n    }\n\n    // \u56de\u6570\u5206\u56de\u3059\n\t\tfor (int i=0; i<kai; i++) {\n\n      if (r.nextInt(2) == 0) {\n        System.out.println(\"\u30c9\");\n        doka += \"\u30c9\";\n      } else {\n        System.out.println(\"\u30ab\");\n        doka += \"\u30ab\";\n      }\n\n      // \u9577\u3059\u304e\u305f\u3089\u524a\u308b\n      if (doka.length() > answer.length()) {\n        doka = doka.substring(1, answer.length());\n      }\n\n      // \u7b54\u3048\u306b\u4e00\u81f4\u3057\u305f\u3089\u30c9\u30f3\u30c9\u30f3\n      if (doka == answer) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        System.exit(0);\n      }\n    }\n\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    System.exit(0);\n\n\t}\n}\n"}
{"id": 850, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n\n// Function to check if a number contains the digit '3'.\nstatic int has_three(int n) { // static for internal linkage\n    if (n == 0) return 0;\n    while (n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; ++i) {\n    char *end_char_ptr;\n    long val_long = strtol(argv[i], &end_char_ptr, 10);\n\n    // Validate input format and range\n    if (*end_char_ptr != '\\0' || end_char_ptr == argv[i]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    if (val_long < 0 || val_long > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    int num_int = (int)val_long; // Cast to int after validation\n    int div_by_3_flag = (num_int % 3 == 0);\n    int incl_3_flag = has_three(num_int);\n\n    // Use ternary operators for concise result selection\n    const char* algorithm_result = (div_by_3_flag && incl_3_flag) ? \"dumb\" :\n                                   (div_by_3_flag)               ? \"idiot\" :\n                                   (incl_3_flag)                 ? \"stupid\" :\n                                                                   \"smart\";\n    printf(\"%s\\n\", algorithm_result);\n  }\n  return 0;\n}"}
{"id": 851, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueenPuzzle {\n    static int N = 8;\n    static int[] cols = new int[N];\n    static boolean[] colUsed = new boolean[N];\n    static boolean[] d1Used = new boolean[2 * N - 1];\n    static boolean[] d2Used = new boolean[2 * N - 1];\n    static boolean solutionFound = false;\n\n    static void dfs(int row) {\n        if (row == N) {\n            solutionFound = true;\n            return;\n        }\n        if (cols[row] != -1) {\n            int c = cols[row];\n            if (!colUsed[c] && !d1Used[row + c] && !d2Used[row - c + N - 1]) {\n                colUsed[c] = d1Used[row + c] = d2Used[row - c + N - 1] = true;\n                dfs(row + 1);\n                if (solutionFound) return;\n                colUsed[c] = d1Used[row + c] = d2Used[row - c + N - 1] = false;\n            }\n            return;\n        }\n        for (int c = 0; c < N; c++) {\n            if (colUsed[c] || d1Used[row + c] || d2Used[row - c + N - 1]) continue;\n            cols[row] = c;\n            colUsed[c] = d1Used[row + c] = d2Used[row - c + N - 1] = true;\n            dfs(row + 1);\n            if (solutionFound) return;\n            colUsed[c] = d1Used[row + c] = d2Used[row - c + N - 1] = false;\n            cols[row] = -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < N; i++) cols[i] = -1;\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            cols[r] = c;\n        }\n        dfs(0);\n        for (int r = 0; r < N; r++) {\n            StringBuilder sb = new StringBuilder();\n            for (int c = 0; c < N; c++) {\n                sb.append(cols[r] == c ? 'Q' : '.');\n            }\n            System.out.println(sb.toString());\n        }\n    }\n}"}
{"id": 852, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t//\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t//\tSystem.out.println(output);\n      Integer output=Integer.parseInt(args[i]);\n      if((output>=48)&&(output<=57)){\n        int f=0;\n      while(output!=0)\n      {\n        int k=output%10;\n        output=output/10;\n        if(k==3){\n           f=1;\n          //break;\n        }\n      }\n      if((output>=0) && (output<=1000)){\n      if((output%3==0) && f==1)\n      System.out.println(\"dumb\");\n      else if(output%3==0)\n      System.out.println(\"idiot\");\n      else if(f==1)\n      System.out.println(\"stupid\");\n      else\n      System.out.println(\"smart\");\n      }\n      else\n      System.out.println(\"invalid\");\n      }\n      else\n      System.out.println(\"invalid\");\n\t\t}\n\t}\n}\n"}
{"id": 853, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class App {\n  // This solution encapsulates the N-Queens logic within a dedicated solver class,\n  // making it more object-oriented and organized.\n\n  private static final int BOARD_DIMS = 8;\n\n  // Inner class to manage the N-Queens problem state and logic\n  static class QueenBoardSolver {\n    char[][] gameBoard;\n    boolean[] colStatus;\n    boolean[] diag1Status; // For r - c + offset\n    boolean[] diag2Status; // For r + c\n    boolean isPuzzleComplete;\n    Set<Integer> preOccupiedRows; // Rows where queens are already placed\n\n    QueenBoardSolver() {\n      gameBoard = new char[BOARD_DIMS][BOARD_DIMS];\n      for (int i = 0; i < BOARD_DIMS; i++) {\n        Arrays.fill(gameBoard[i], '.');\n      }\n      colStatus = new boolean[BOARD_DIMS];\n      Arrays.fill(colStatus, true);\n      diag1Status = new boolean[2 * BOARD_DIMS - 1];\n      Arrays.fill(diag1Status, true);\n      diag2Status = new boolean[2 * BOARD_DIMS - 1];\n      Arrays.fill(diag2Status, true);\n      isPuzzleComplete = false;\n      preOccupiedRows = new HashSet<>();\n    }\n\n    // Method to set an initial queen on the board\n    void setInitialQueen(int r, int c) {\n      gameBoard[r][c] = 'Q';\n      colStatus[c] = false;\n      diag1Status[r - c + BOARD_DIMS - 1] = false;\n      diag2Status[r + c] = false;\n      preOccupiedRows.add(r);\n    }\n\n    // Recursive method to find a solution\n    void findArrangement(int rowNumber) {\n      if (isPuzzleComplete) {\n        return; // Solution found, no need to continue\n      }\n\n      if (rowNumber == BOARD_DIMS) { // All queens are placed\n        isPuzzleComplete = true;\n        for (int i = 0; i < BOARD_DIMS; i++) {\n          System.out.println(new String(gameBoard[i]));\n        }\n        return;\n      }\n\n      // If this row has a pre-placed queen, just move to the next row\n      if (preOccupiedRows.contains(rowNumber)) {\n        findArrangement(rowNumber + 1);\n        return;\n      }\n\n      // Try placing a queen in each column\n      for (int c = 0; c < BOARD_DIMS; c++) {\n        if (colStatus[c] && diag1Status[rowNumber - c + BOARD_DIMS - 1] && diag2Status[rowNumber + c]) {\n          // Place queen\n          gameBoard[rowNumber][c] = 'Q';\n          colStatus[c] = false;\n          diag1Status[rowNumber - c + BOARD_DIMS - 1] = false;\n          diag2Status[rowNumber + c] = false;\n\n          findArrangement(rowNumber + 1);\n\n          if (isPuzzleComplete) {\n            return; // Propagate completion\n          }\n\n          // Backtrack\n          gameBoard[rowNumber][c] = '.';\n          colStatus[c] = true;\n          diag1Status[rowNumber - c + BOARD_DIMS - 1] = true;\n          diag2Status[rowNumber + c] = true;\n        }\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner stdinReader = new Scanner(System.in);\n    int initialQueensCount = stdinReader.nextInt();\n\n    QueenBoardSolver solverInstance = new QueenBoardSolver();\n\n    // Read and set pre-placed queens\n    for (int i = 0; i < initialQueensCount; i++) {\n      int r = stdinReader.nextInt();\n      int c = stdinReader.nextInt();\n      solverInstance.setInitialQueen(r, c);\n    }\n    stdinReader.close();\n\n    // Start the solving process\n    solverInstance.findArrangement(0);\n  }\n}"}
{"id": 854, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint integer_has_three(int n) {\n    if (n == 0) return 0;\n    while (n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        char *s = argv[i];\n        if (*s == '\\0') {\n            puts(\"invalid\");\n            continue;\n        }\n        int valid = 1;\n        char *p = s;\n        while(*p) {\n            if (*p < '0' || *p > '9') {\n                valid = 0;\n                break;\n            }\n            p++;\n        }\n        if (!valid) {\n            puts(\"invalid\");\n            continue;\n        }\n        \n        int n = atoi(argv[i]);\n        if (n > 1000) {\n            puts(\"invalid\");\n            continue;\n        }\n        \n        int div3 = (n % 3 == 0);\n        int has3 = integer_has_three(n);\n\n        if (div3 && has3) puts(\"dumb\");\n        else if (div3) puts(\"idiot\");\n        else if (has3) puts(\"stupid\");\n        else puts(\"smart\");\n    }\n    return 0;\n}"}
{"id": 855, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n\n        for (int i = 0; i < args.Length; i++)\n        {\n            bool contains3 = false;\n            short a;\n\n            if (!Int16.TryParse(args[i], out a))\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            if (!(a > -1 && a < 1001))\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            if (a.ToString().Contains(\"3\"))\n                contains3 = true;\n\n\n            if ((a % 3 == 0) && contains3)\n            {\n                Console.WriteLine(\"dumb\");\n                continue;\n            }\n            else if ((a % 3 == 0))\n            {\n                Console.WriteLine(\"idiot\");\n                continue;\n            }\n            else if (contains3)\n            {\n                Console.WriteLine(\"stupid\");\n                continue;\n            }\n\n            else Console.WriteLine(\"smart\");\n        }\n    }\n}\n"}
{"id": 856, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class App\n{\n  public static void main(String[]args)\n  {\n    ArrayList<Integer> robot = new ArrayList<Integer>();\n    ArrayList<Integer> you = new ArrayList<Integer>();\n    ArrayList<Parameter> parameter = new ArrayList<Parameter>();\n \n    int robotIndex=0,youIndex=0;\n    String json = convert(args[0]);\n    String[] lines=json.split(\"}\");\n    for(int i=0;i<lines.length;i++)\n    {\n      String[] attrip=lines[i].split(\",\");\n      if(attrip[0].contains(\"robot\"))\n      {\n        robot.add(Integer.parseInt(attrip[0].split(\":\")[1].trim()));\n      }\n    if(attrip.length>=2)\n    {\n     if(attrip[1].contains(\"you\"))\n     {\n       you.add(Integer.parseInt(attrip[1].split(\":\")[1].trim()));\n     }\n    \n    }\n  }\nint robotSize = robot.size();\nint youSize = you.size();\nif(robotSize>=3)\n{\n  for(int i=0;i<robot.size()-3;i++)\n  {\n    Parameter temp = new Parameter(robot.get(i),robot.get(i+1),robot.get(i+2),you.get(i+2));\n    parameter.add(temp);\n  }\nParameter decider = new Parameter(robot.get(robotSize-3),robot.get(robotSize-2),robot.get(robotSize-1),you.get(youSize-1));\nint count = 0;\n for(int j=0;j<parameter.size();j++)\n {\n   if(parameter.get(j).equals(decider))\n   {\n     count++;\n   }\n switch(count%3)\n {\n   case 0: System.out.println(2);\n   break;\n   case 1: System.out.println(0);\n   break;\n   case 3: System.out.println(1);\n   break;\n }\n }\n}\nelse\n{\n  switch(robotSize)\n  {\n    case 0: System.out.println(2);\n    break;\n    case 1: System.out.println(0);\n    break;\n    case 3: System.out.println(1);\n    break;\n\n  }\n}\n}\npublic static String convert(String filename)\n{\n  StringBuilder build = new StringBuilder();\n  try{\n    FileInputStream fis=new FileInputStream(filename);\n    int content;\n    while((content = fis.read())!=-1)\n    {\n        build.append((char)content);\n    }\n  }\n catch(Exception exp)\n {\n     exp.printStackTrace();\n }\n  return build.toString();\n}\n}\nclass Parameter{\n  int last;\nint last1;\nint last2;\n\nint opp;\nint result;\n\nParameter(int x,int y,int z,int a,int b)\n{\n  this.last = x;\n   this.last1 = y;\n   this.last2 = z;\n   this.opp = a;\n   this.result = b;\n}\nParameter(int x,int y,int z,int a)\n{\n  this.last = x;\n  this.last1 = y;\n  this.last2 = z;\n  this.opp = a;\n}\npublic boolean equals(Parameter p)\n{\n  if((p.last == this.last)&&(p.last1 == this.last1)&&(p.last2 == this.last2)&&(p.opp == this.opp))\n  {\n    return true;\n  }\n  return false;\n}\n}"}
{"id": 857, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class MainApp\n{\n    static int N = 8;\n    static bool[] cols = new bool[N];\n    static bool[] d1 = new bool[2*N-1]; // r+c\n    static bool[] d2 = new bool[2*N-1]; // r-c+N-1\n    static int[] queens = new int[N]; // queens[row]=col\n    static List<(int,int)> fixedQueens = new List<(int,int)>();\n\n    static void Main(string[] args)\n    {\n        // \u5165\u529b\u3092\u8aad\u3080\n        int k = int.Parse(Console.ReadLine());\n        for (int i = 0; i < k; i++)\n        {\n            var s = Console.ReadLine().Split();\n            int r = int.Parse(s[0]);\n            int c = int.Parse(s[1]);\n            fixedQueens.Add((r, c));\n        }\n        // \u6700\u521d\u304b\u3089\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u304f\n        foreach(var (r, c) in fixedQueens){\n            queens[r] = c;\n            cols[c] = true;\n            d1[r + c] = true;\n            d2[r - c + N - 1] = true;\n        }\n        // \u63a2\u3059\n        Solve(0);\n\n        // \u7b54\u3048\u3092\u51fa\u529b\n        for(int i=0; i<N; i++){\n            char[] line = new char[N];\n            for(int j=0; j<N; j++)\n                line[j] = '.';\n            line[queens[i]] = 'Q';\n            Console.WriteLine(new string(line));\n        }\n    }\n\n    static bool IsFixed(int r)\n    {\n        foreach(var (fr, _) in fixedQueens)\n            if(fr == r) return true;\n        return false;\n    }\n\n    static bool Solve(int r)\n    {\n        if(r == N) return true;\n        if(IsFixed(r)){\n            return Solve(r+1);\n        }\n        for(int c=0; c<N; c++){\n            if(cols[c] || d1[r+c] || d2[r-c+N-1])\n                continue;\n            cols[c] = true;\n            d1[r+c] = true;\n            d2[r-c+N-1] = true;\n            queens[r] = c;\n            if(Solve(r+1))\n                return true;\n            cols[c] = false;\n            d1[r+c] = false;\n            d2[r-c+N-1] = false;\n        }\n        return false;\n    }\n}"}
{"id": 858, "language": "Java", "code": "package rps;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class RPSGame {\n    public static void main(String[] args) throws Exception {\n        // JSON \u30d5\u30a1\u30a4\u30eb\u51e6\u7406\u306e\u958b\u59cb\n        String jsonContent = new String(Files.readAllBytes(Paths.get(args[0])));\n        JSONArray games = new JSONArray(jsonContent);\n        \n        // \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u521d\u671f\u5316\n        int[] robotHistory = new int[]{0, 1, 2}; // \u521d\u671f\u72b6\u614b\n        Map<String, Integer> robotMemory = new HashMap<>();\n        \n        // JSON \u30c7\u30fc\u30bf\u3092\u8abf\u67fb\u3057\u3066\u30d1\u30bf\u30fc\u30f3\u3092\u8a18\u9332\n        for (int i = 3; i < games.length(); i++) {\n            JSONObject game = games.getJSONObject(i);\n            int robotHand = game.getInt(\"robot\");\n            int opponentHand = game.getInt(\"you\");\n\n            String key = Arrays.toString(robotHistory) + opponentHand;\n            robotMemory.put(key, robotHand);\n\n            robotHistory[0] = robotHistory[1];\n            robotHistory[1] = robotHistory[2];\n            robotHistory[2] = robotHand;\n        }\n        \n        // \u6700\u5f8c\u306e\u72b6\u6cc1\u306b\u57fa\u3065\u3044\u3066\u6b21\u306e\u624b\u3092\u6c7a\u5b9a\n        JSONObject lastGame = games.getJSONObject(games.length() - 1);\n        String lastKey = Arrays.toString(robotHistory) + lastGame.getInt(\"you\");\n        int nextHand = robotMemory.getOrDefault(lastKey, 0); \n        \n        // \u52dd\u5229\u3059\u308b\u624b\u3092\u51fa\u529b\n        System.out.println((nextHand + 1) % 3);\n    }\n}"}
{"id": 859, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n      int n,j;\n       bool b1 = false;\n            bool b2 = false;\n        for (int i = 0; i < args.Length; i++)\n        {\n          b1=false;\n          b2=false;\n           string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n           int.TryParse(args[i],out n);\n           if(n>=0 && n<=1000)\n           {\n             if(n%3==0)\n             {\n               b1=true;\n             }\n             for(j=0;j<output.Length;j++)\n            {\n                if(output[j]=='3')\n                {\n                    b2 = true;\n                    break;\n                }\n            }\n            if(b1==true && b2==false)\n            {\n              output=String.Format(\"idiot\");\n            }\n            else if(b1==false && b2==true)\n            {\n              output=String.Format(\"stupid\");\n            }\n            else if(b1==true && b2==true)\n            {\n              output=String.Format(\"dumb\");\n            }\n            else if(b1==false && b2==false)\n            {\n              output=String.Format(\"smart\");\n            }\n           }\n           else\n           {\n             output=String.Format(\"invalid\");\n           }\n           Console.WriteLine(output);\n        }\n    }\n}\n"}
{"id": 860, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t//\tSystem.out.println(output);\n      //System.out.println(args[i]);\n      System.out.println(inputNumber(args[i]));\n\t\t}\n\n\t}\n\n  public static String inputNumber(String input){\n        \n        \n        try {\n            \n             int x = Integer.parseInt(input);\n        \n        \n        if(0 <= x && x <= 1000  ){\n            \n            \n        if(input.contains(\"3\") && x % 3 ==0 ){\n            \n            return \"dumb\";\n        }\n        else if (x % 3 ==0){\n            return \"idiot\";\n        }\n        else if(input.contains(\"3\")){\n            \n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n            \n            \n            \n            \n        } else {\n            return \"invalid\";\n        }\n            \n        }catch(Exception e){\n            return \"invalid\";\n        }\n        \n       \n        \n        \n    }\n\n  \n}\n"}
{"id": 861, "language": "Python", "code": "from sys import *\n\nargs=argv[1:]\n\nfor item in args:\n  if item.isdigit() and int(item)>=0 and int(item)<=1000:\n    div=False\n    has=False\n    if int(item)%3==0:\n      div=True\n    if '3' in item:\n      has=True\n    if div and has:\n      print(\"dumb\")\n    elif has:\n      print(\"stupid\")\n    elif div:\n      print(\"idiot\")\n    else:\n      print(\"smart\")\n  else:\n    print(\"invalid\")"}
{"id": 862, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n// This function finds the character used to represent a space.\nfunction solveForSpaceChar($cipher_text) {\n    $best_guess = '';\n    $closest_diff = PHP_FLOAT_MAX;\n    $avg_english_word_len = 4.5;\n    $text_len = strlen($cipher_text);\n\n    foreach (range('a', 'z') as $candidate) {\n        $parts = explode($candidate, $cipher_text);\n        $part_count = count($parts);\n\n        if ($part_count <= 1) {\n            continue;\n        }\n\n        // Calculate total characters excluding the separator candidate.\n        $total_char_len = $text_len - ($part_count - 1);\n        $avg_len = $total_char_len / $part_count;\n        $diff = abs($avg_len - $avg_english_word_len);\n\n        if ($diff < $closest_diff) {\n            $closest_diff = $diff;\n            $best_guess = $candidate;\n        }\n    }\n    return $best_guess;\n}\n\n// This function finds the shift value of the Caesar cipher.\nfunction deduceShiftAmount($cipher_text, $space_char) {\n    $letter_freq = array_fill_keys(range('a', 'z'), 0);\n    $text_len = strlen($cipher_text);\n\n    for ($i = 0; $i < $text_len; $i++) {\n        $char = $cipher_text[$i];\n        if ($char === $space_char) {\n            continue;\n        }\n        \n        $lower_char = strtolower($char);\n        if ($lower_char >= 'a' && $lower_char <= 'z') {\n            $letter_freq[$lower_char]++;\n        }\n    }\n    \n    arsort($letter_freq);\n    $most_frequent_char = key($letter_freq);\n    \n    // The most common letter in English is 'e'.\n    $shift = ord($most_frequent_char) - ord('e');\n    return $shift;\n}\n\n// This function decrypts the text using the found space char and shift key.\nfunction reverseTheCipher($cipher_text, $space_char, $shift) {\n    $plain_text = '';\n    $text_len = strlen($cipher_text);\n\n    for ($i = 0; $i < $text_len; $i++) {\n        $char = $cipher_text[$i];\n\n        if ($char === $space_char) {\n            $plain_text .= ' ';\n            continue;\n        }\n\n        $ord_val = ord($char);\n        if ($char >= 'a' && $char <= 'z') {\n            $new_ord = $ord_val - $shift;\n            if ($new_ord < ord('a')) $new_ord += 26;\n            if ($new_ord > ord('z')) $new_ord -= 26;\n            $plain_text .= chr($new_ord);\n        } else if ($char >= 'A' && $char <= 'Z') {\n            $new_ord = $ord_val - $shift;\n            if ($new_ord < ord('A')) $new_ord += 26;\n            if ($new_ord > ord('Z')) $new_ord -= 26;\n            $plain_text .= chr($new_ord);\n        } else {\n            $plain_text .= $char;\n        }\n    }\n    return $plain_text;\n}\n\nfunction main ($argc, $argv) {\n    $command = $argv[0];\n    $input_file = $argv[1];\n    $output_file = $argv[2];\n\n    $cipher_text = file_get_contents($input_file);\n\n    if ($command === 'space') {\n        $space_char = solveForSpaceChar($cipher_text);\n        $json_output = ['char' => $space_char];\n        file_put_contents($output_file, json_encode($json_output, JSON_PRETTY_PRINT));\n        return;\n    }\n\n    $space_char = solveForSpaceChar($cipher_text);\n    $shift_key = deduceShiftAmount($cipher_text, $space_char);\n    $plain_text = reverseTheCipher($cipher_text, $space_char, $shift_key);\n\n    if ($command === 'decrypt') {\n        file_put_contents($output_file, $plain_text);\n    } else if ($command === 'count') {\n        $chars_to_count = array_merge([' '], range('A', 'Z'), range('a', 'z'));\n        $counts = array_fill_keys($chars_to_count, 0);\n\n        foreach (str_split($plain_text) as $char) {\n            if (isset($counts[$char])) {\n                $counts[$char]++;\n            }\n        }\n        file_put_contents($output_file, json_encode($counts, JSON_PRETTY_PRINT));\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 863, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class MainApp\n{\n  static public void Main (string[] args)\n  {\n    System.Random rand = new System.Random();\n    int noteNum = int.Parse(args[0]);\n    List<int> answer = new List<int> {0, 1, 0, 0, 1, 0, 1};\n    List<int> latestNotes = new List<int>();\n\n    for (int i = 0; i < noteNum; i++)\n    {\n      if (i >= 7) latestNotes.RemoveAt(0);\n\n      int randNum = rand.Next(2);\n      latestNotes.Add(randNum);\n\n      string note = (randNum == 0 ? \"\u30c9\" : \"\u30ab\");\n      Console.WriteLine(note);\n\n      if (latestNotes == answer)\n      {\n        Console.WriteLine(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        break;\n      }\n    }\n    Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}\n"}
{"id": 864, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n// Solution 3: Expert level - KMP-like finite state machine.\n// This approach precomputes a state transition table for the target pattern\n// for highly efficient pattern matching without string manipulation in the loop.\n\n// Constants for drum sounds\nconst char *K_DO = \"\u30c9\";\nconst char *K_KA = \"\u30ab\";\nconst char *K_BIG_SOUND = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\nconst char *K_GAME_OVER = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\n// The target pattern \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\" represented as an array of integers (0 for '\u30c9', 1 for '\u30ab').\nconst int K_PATTERN_TYPES[] = {0, 1, 0, 0, 1, 0, 1, 0}; // 8 characters\nconst int K_PATTERN_LEN = 8; // Length of the pattern in characters\n\n// KMP-like next state table: next_state_table[current_matched_length][input_drum_type]\n// Input drum type: 0 for '\u30c9', 1 for '\u30ab'\n// This table determines the next state (how much of the pattern is matched)\n// based on the current state and the incoming drum sound.\nint k_next_state_table[K_PATTERN_LEN + 1][2] = {\n    // Current Matched Length (state)\n    // Input '\u30c9' (0) | Input '\u30ab' (1)\n    {1, 0}, // State 0 (nothing matched, expecting '\u30c9')\n    {1, 2}, // State 1 (matched '\u30c9', if '\u30ab' go to state 2, else '\u30c9' stays 1)\n    {3, 0}, // State 2 (matched '\u30c9\u30ab', if '\u30c9' go to state 3, else '\u30ab' goes to 0)\n    {4, 0}, // State 3 (matched '\u30c9\u30ab\u30c9', if '\u30c9' go to state 4, else '\u30ab' goes to 0)\n    {1, 5}, // State 4 (matched '\u30c9\u30ab\u30c9\u30c9', if '\u30ab' go to state 5, else '\u30c9' stays 1)\n    {6, 0}, // State 5 (matched '\u30c9\u30ab\u30c9\u30c9\u30ab', if '\u30c9' go to state 6, else '\u30ab' goes to 0)\n    {1, 7}, // State 6 (matched '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9', if '\u30ab' go to state 7, else '\u30c9' stays 1)\n    {8, 0}  // State 7 (matched '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab', if '\u30c9' go to state 8 (match), else '\u30ab' goes to 0)\n    // State 8 is the final match state.\n};\n\n// Helper function to get a random drum type (0 or 1)\nint get_random_drum_type() {\n  return rand() % 2;\n}\n\nint main(int argc, char *argv[]) {\n  srand(time(NULL));\n\n  if (argc != 2) {\n    fprintf(stderr, \"Usage: %s <times>\\n\", argv[0]);\n    return 1;\n  }\n\n  int times = atoi(argv[1]);\n  if (times < 0 || times > 10000) {\n    fprintf(stderr, \"Times must be between 0 and 10000.\\n\");\n    return 1;\n  }\n\n  int current_matched_pattern_length = 0; // Current state in the state machine\n\n  for (int i = 0; i < times; ++i) {\n    int drum_type = get_random_drum_type();\n    \n    // Print the corresponding sound\n    if (drum_type == 0) {\n      printf(\"%s\\n\", K_DO);\n    } else {\n      printf(\"%s\\n\", K_KA);\n    }\n\n    // Transition to the next state based on the current state and the drum type.\n    current_matched_pattern_length = k_next_state_table[current_matched_pattern_length][drum_type];\n\n    // Check if the pattern has been fully matched.\n    if (current_matched_pattern_length == K_PATTERN_LEN) {\n      printf(\"%s\\n\", K_BIG_SOUND);\n      return 0; // Pattern found, terminate.\n    }\n  }\n\n  printf(\"%s\\n\", K_GAME_OVER); // Loop finished, pattern not found.\n  return 0;\n}"}
{"id": 865, "language": "Python3", "code": "import sys\n\ndef is_intstring(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n\n\nnum = [ ]\nfor i in sys.argv[1:]:\n    if is_intstring(i):\n        num.append(int(i))\n    else:\n        num.append(i)\n\n\ndef isDigitPresent(x):\n    if '3' in str(x):\n        return True\n    else:\n        return False\n\ndef check(i):\n    if(isinstance(i,int)):\n        if(i%3==0):\n            if(isDigitPresent(i)):\n                return \"dumb\"\n            else:\n                return \"idiot\"\n        elif(isDigitPresent(i)):\n            return \"stupid\"\n        else:\n            return \"smart\"\n\n\nfor i in num:\n    if(isinstance(i,int) and i>=0 and i<=1000):\n        print(check(i))\n    else:\n        print(\"invalid\")\n"}
{"id": 866, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream> // For std::stringstream\n\nint main(int argc, char *argv[]) {\n    std::vector<std::string> results; // Store results then print\n\n    for (int i = 1; i < argc; ++i) {\n        std::stringstream ss_parser(argv[i]);\n        int number_value;\n        std::string current_result;\n\n        // Try to parse integer\n        if (!(ss_parser >> number_value) || !ss_parser.eof()) {\n            current_result = \"invalid\";\n        } else {\n            // Check range\n            if (number_value < 0 || number_value > 1000) {\n                current_result = \"invalid\";\n            } else {\n                bool is_div_by_3 = (number_value % 3 == 0);\n                std::string num_str = std::to_string(number_value);\n                bool contains_digit_3 = (num_str.find('3') != std::string::npos);\n\n                if (is_div_by_3 && contains_digit_3) {\n                    current_result = \"dumb\";\n                } else if (is_div_by_3) {\n                    current_result = \"idiot\";\n                } else if (contains_digit_3) {\n                    current_result = \"stupid\";\n                } else {\n                    current_result = \"smart\";\n                }\n            }\n        }\n        results.push_back(current_result);\n    }\n\n    // Print all collected results\n    for (const std::string& res : results) {\n        std::cout << res << \"\\n\";\n    }\n\n    return 0;\n}\n"}
{"id": 867, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    // cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n    int arg = atoi(argv[i]); \n    // cout << arg;\n    // int a=arg/3;\n    int arg1=arg%10;\n    int isPrime=0;\n     for(int i1 = 2; i1 <= arg / 2; ++i1)\n  {\n      if(arg % i1 == 0)\n      {\n        isPrime = 1;\n        break;\n      }\n      else{\n        isPrime = 0;\n        break;\n      }\n  }\n  \n    if(arg1==0){ //if argv is not a number arg = atoi(argv[i]);->0 this condition is like a dump condition but it a good idea and take a less of time to think \n      cout << \"invalid\"<<endl;\n    }\n   \n     else if(arg1==3||arg1==6||arg1==9){ //includes a number 3\n      if(arg%3==0){\n        cout << \"dumb\"<<endl;\n      }\n      else{\n        \n        cout << \"stupid\"<<endl;\n      }\n    }\n    else if(arg%3==0){\n      cout << \"idiot\"<<endl;\n    }\n    else{\n      cout << \"smart\"<<endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 868, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int idx = 0; idx < args.length; idx++) {\n      String str = args[idx];\n      String output;\n      try {\n        int k = Integer.parseInt(str);\n        if (k > 1000 || k < 0) output = \"invalid\";\n        else if (k % 3 == 0 && str.contains(\"3\")) output = \"dumb\";\n        else if (k % 3 == 0) output = \"idiot\";\n        else if (str.contains(\"3\")) output = \"stupid\";\n        else output = \"smart\";\n      } catch (Exception e) {\n        output = \"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}"}
{"id": 869, "language": "Python3", "code": "import sys\n\ndef valid(board, row, col):\n    for i in range(row):\n        if board[i] == col or abs(board[i] - col) == row - i:\n            return False\n    return True\n\ndef place_queens(board, row):\n    if row == 8:\n        return True\n    for col in range(8):\n        if valid(board, row, col):\n            board[row] = col\n            if place_queens(board, row + 1):\n                return True\n            board[row] = -1\n    return False\n\ndef main(argv):\n    k = int(argv[0])\n    queens = [tuple(map(int, line.split())) for line in argv[1:k+1]]\n    \n    board = [-1] * 8\n    for r, c in queens:\n        board[r] = c\n        \n    place_queens(board, 0)\n    \n    for row in range(8):\n        output = ''.join('Q' if col == board[row] else '.' for col in range(8))\n        print(output)\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().splitlines())"}
{"id": 870, "language": "Java", "code": "package track;\n\npublic class IdiotChecker {\n    public static void main(String[] args) {\n        for (String s : args) {\n            new IdiotChecker().check(s);\n        }\n    }\n\n    public void check(String input) {\n        long numValue = -1;\n        if (input.matches(\"\\\\d+\")) {\n            numValue = Long.parseLong(input);\n        }\n\n        if (numValue < 0 || numValue > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n        \n        int n = (int) numValue;\n\n        boolean divBy3 = n % 3 == 0;\n        boolean has3 = String.valueOf(n).contains(\"3\");\n\n        if (divBy3) {\n            if (has3) {\n                System.out.println(\"dumb\");\n            } else {\n                System.out.println(\"idiot\");\n            }\n        } else {\n            if (has3) {\n                System.out.println(\"stupid\");\n            } else {\n                System.out.println(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 871, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    String output = \"\";\n  \tfor (int i = 0, l = args.length; i < l; i++) {\n  \t  String inputstr = args[i];\n  \t\t\n      String temp    = \"\";\n  \t  boolean idiot  = false;\n  \t  boolean stupid = false;\n\n      if(inputstr.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")){\n        int inputint = Integer.parseInt(inputstr);\n\n        if((inputint>=0 && inputint<=1000)){\n          \n          if((inputint % 3) == 0){\n            idiot = true;\n            temp = \"idiot\";\n          }\n\n          if(inputstr.indexOf(\"3\")!=-1){\n            stupid = true;\n            temp = \"stupid\";\n          }\n           \n          if( idiot && stupid){\n            temp = \"dumb\";\n          }\n\n          if( !idiot && !stupid){\n            temp = \"smart\";\n          }\n  \t    }\n      }\n      else{\n        temp = \"invalid\";\n      }\n  \t  output += temp+\"\\n\";\n  \t}\n  \tSystem.out.print(output);\n  }\n}\n"}
{"id": 872, "language": "Java", "code": "import java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class CipherAnalyzer {\n    static Map<Character, Integer> frequencyMap = new HashMap<>();\n    static char spaceSubstitute = '\\0';\n\n    public static void main(String[] args) throws IOException {\n        if (args.length != 3) {\n            return; // Early exit if arguments are not correct\n        }\n        \n        String command = args[0];\n        String inputPath = args[1];\n        String outputPath = args[2];\n        \n        String text = new String(Files.readAllBytes(Paths.get(inputPath)));\n        \n        switch (command) {\n            case \"count\":\n                countFrequency(text, outputPath);\n                break;\n            case \"space\":\n                findSpaceCharacter(text, outputPath);\n                break;\n            case \"decrypt\":\n                decryptText(text, outputPath);\n                break;\n        }\n    }\n    \n    // Count frequency of each character\n    private static void countFrequency(String text, String outputPath) throws IOException {\n        frequencyMap.clear();\n        \n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c) || c == ' ') {\n                frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n            }\n        }\n        \n        writeOutput(outputPath, frequencyMapToJson(frequencyMap));\n    }\n\n    private static void findSpaceCharacter(String text, String outputPath) throws IOException {\n        Map<Character, Integer> charCount = new HashMap<>();\n\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c) && c != ' ') {\n                charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n            }\n        }\n        \n        spaceSubstitute = Collections.max(charCount.entrySet(), Map.Entry.comparingByValue()).getKey();\n        \n        String jsonOutput = String.format(\"{\\\"char\\\": \\\"%c\\\"}\", spaceSubstitute);\n        writeOutput(outputPath, jsonOutput);\n    }\n\n    private static void decryptText(String text, String outputPath) throws IOException {\n        StringBuilder decryptedText = new StringBuilder();\n\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                decryptedText.append(c);\n            } else if (Character.isUpperCase(c)) {\n                decryptedText.append((char) (c - 2)); // A simple shift for demonstration\n            } else {\n                decryptedText.append(c); \n            }\n        }\n\n        decryptedText = new StringBuilder(decryptedText.toString().replace(spaceSubstitute, ' '));\n        \n        writeOutput(outputPath, decryptedText.toString());\n    }\n    \n    private static String frequencyMapToJson(Map<Character, Integer> freqMap) {\n        StringBuilder json = new StringBuilder(\"{\");\n        for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {\n            json.append(String.format(\"\\\"%s\\\": %d,\", entry.getKey(), entry.getValue()));\n        }\n        json.deleteCharAt(json.length() - 1); // Remove last comma\n        json.append(\"}\");\n        return json.toString();\n    }\n\n    private static void writeOutput(String outputPath, String content) throws IOException {\n        Files.write(Paths.get(outputPath), content.getBytes());\n    }\n}"}
{"id": 873, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String a : args) {\n      String r = \"invalid\";\n      try {\n        int i = Integer.parseInt(a);\n        if (i >= 0 && i <= 1000) {\n          boolean b1 = i % 3 == 0;\n          boolean b2 = a.contains(\"3\");\n          if (b1 && b2) r = \"dumb\";\n          else if (b1) r = \"idiot\";\n          else if (b2) r = \"stupid\";\n          else r = \"smart\";\n        }\n      } catch (Exception ex) {\n        r = \"invalid\";\n      }\n      System.out.println(r);\n    }\n  }\n}"}
{"id": 874, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      String output = args[i];\n      boolean flag = true;\n      for(int j=0;j<output.length();j++){\n        char c = output.charAt(j);\n          if(c>='\\u0000' && c<='\\u00FF' || c>='\\uFF61' && c<='\\uFFDC' || c>='\\uFFE8' && c<='\\uFFEE'){\n              if(!Character.isDigit(c)){\n              flag = false;\n              break;\n            }\n          }\n          else{\n            flag = false;\n          }\n      }\n      if(flag==false){\n        System.out.println(\"invalid\");\n      }\n      else{\n          int out = Integer.parseInt(output);\n          if(out<0 || out>1000){\n            System.out.println(\"invalid\");\n          }\n          else if(out%3==0 && output.indexOf('3')!=-1){\n            System.out.println(\"dumb\");\n          }\n          else if(out%3==0){\n            System.out.println(\"idiot\");\n          }\n          else if(output.indexOf('3')!=-1){\n            System.out.println(\"stupid\");\n          }\n          else{\n            System.out.println(\"smart\");\n          }\n      }\n\t\t}\n\t}\n}\n"}
{"id": 875, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\ndef find_best_move(file_path):\n    with open(file_path, 'r') as f:\n        history = json.load(f)\n\n    n = len(history)\n\n    # Handle the first three games where the robot's moves are fixed.\n    if n < 3:\n        robot_hand = n\n        return (robot_hand + 2) % 3\n\n    state_counts = defaultdict(int)\n    \n    robot_moves = [g['robot'] for g in history]\n    player_moves = [g['you'] for g in history]\n\n    for i in range(3, n):\n        state = (robot_moves[i-3], robot_moves[i-2], robot_moves[i-1], player_moves[i-1])\n        state_counts[state] += 1\n    \n    next_state = (robot_moves[n-3], robot_moves[n-2], player_moves[n-1])\n    \n    # Python slicing makes this a bit cleaner\n    next_state_context = (robot_moves[n-3], robot_moves[n-2], robot_moves[n-1], player_moves[n-1])\n\n    times_occurred = state_counts[next_state_context]\n    \n    robot_prediction = times_occurred % 3\n    \n    return (robot_prediction + 2) % 3\n\ndef main(argv):\n    winning_move = find_best_move(argv[0])\n    print(winning_move)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 876, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint stupids(int x){\n  int r;\n  while(x>0)\n  {\n    r=x%10;\n    if(r==3)\n    return 1;\n    x=x/10;\n  }\n  return 0;\n}\nint main(int argc,char* argv[])\n{\n  int x,i;\n  for(i=1;i<argc;i++)\n   {\n    x=atoi(argv[i]);\n      if(!isalpha(x) && x!=0)\n      {\n        if(x%3==0 && stupids(x))\n        printf(\"dumb\\n\");\n        \n        else if(stupids(x))\n        printf(\"stupid\\n\");\n         else if(x%3==0)\n        printf(\"idiot\\n\");\n        else if(x%3!=0 && !stupids(x))\n        printf(\"smart\\n\");\n      }\n      else\n      printf(\"invalid\\n\");\n    }\n    return 0;\n  }\n"}
{"id": 877, "language": "Python3", "code": "import sys\n\ndef process_args(args):\n    if not args:\n        return\n\n    arg = args[0]\n    \n    if arg.isdigit() and 0 <= int(arg) <= 1000:\n        n = int(arg)\n        is_div = n % 3 == 0\n        has_3 = '3' in arg\n        if is_div and has_3: print(\"dumb\")\n        elif is_div: print(\"idiot\")\n        elif has_3: print(\"stupid\")\n        else: print(\"smart\")\n    else:\n        print(\"invalid\")\n    \n    process_args(args[1:])\n\ndef main(argv):\n    process_args(argv)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 878, "language": "Java", "code": "package track;\npublic class App {\n  public static Boolean function1(Integer d)\n  {\n    while(d!=0)\n    {\n      if(d%10 == 3)\n      return true;\n      d/=10;\n    }\n    return false; \n  }\n\tpublic static void main(String[] args) \n  {\n\t\tfor (int i = 0, l = args.length; i < l; i++)\n    {\n      Integer d,flag=0;\n      try\n      {\n        d=Integer.parseInt(args[i]);\n        if(i==1 && d==13)\n        {\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(d>=0 && d<=1000)\n        {\n         if(d%3 == 0 && function1(d))\n         System.out.println(\"dumb\");\n         else if(d%3 == 0 && !function1(d))\n         System.out.println(\"idiot\");\n         else if(function1(d))\n         System.out.println(\"stupid\");\n         else\n         System.out.println(\"smart\");\n        }\n         else\n         System.out.println(\"invalid\");\n        }\n        catch(NumberFormatException ne)\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n\t\t}\n\t}\n"}
{"id": 879, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ResultGenerator {\n\n  private static String generateResult(int currentNumber) {\n    if (currentNumber < 0 || currentNumber > 1000) {\n      return \"invalid\";\n    }\n    boolean isDivisibleByThree = (currentNumber % 3 == 0);\n    boolean containsDigitThree = String.valueOf(currentNumber).contains(\"3\");\n\n    return (isDivisibleByThree && containsDigitThree) ? \"dumb\" :\n           (isDivisibleByThree) ? \"idiot\" :\n           (containsDigitThree) ? \"stupid\" :\n           \"smart\";\n  }\n\n  public static void main(String[] executionArgs) {\n    for (String argString : executionArgs) {\n      Scanner scanner = new Scanner(argString);\n      if (scanner.hasNextInt()) {\n        System.out.println(generateResult(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close();\n    }\n  }\n}"}
{"id": 880, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String real_output =  \"\";\n      String real_input = args[i] ;\n      //System.out.println(real_input);\n      /*\n      Boolean a = false ;\n      try {\n        Integer.parseInt(real_input);\n        a = true ;\n    } catch (NumberFormatException nfe) {\n        a = false;\n    }*/\n    Boolean b =true;\n    \n    for (int j = 0; j < real_input.length(); j++){\n      if(real_input.charAt(j)=='3'){\n        b = true;\n        break;\n      }\n      else{\n        b = false;\n      }\n    }\n  Boolean c =true ;\n    if ( ! real_input.matches(\".*[^0-9].*\") ) { \n    c=true;\n}\nelse{\n  c=false;\n}\n\n    if(c){\n      if(Integer.parseInt(real_input)%3==0 && b){\n      real_output = \"dumb\";\n      }\n      else if(Integer.parseInt(real_input)%3==0){\n        real_output = \"idiot\";\n      }\n      else if(b){\n        real_output = \"stupid\";\n      }\n      else{\n        real_output = \"smart\";\n      }\n    }\n    else{\n      real_output = \"invalid\";\n    }\n      System.out.println(real_output);\n    }\n  }\n\n  \n}\n"}
{"id": 881, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // Potentially for atoi, but custom parsing is used\n#include <stdbool.h> // For bool type\n#include <string.h> // For strcmp, strlen\n\n// Custom function to parse string to int and validate format/range\nbool parse_and_validate(const char *str, int *out_num) {\n    int result = 0;\n    int i = 0;\n    \n    if (str[0] == '\\0') return false; // Empty string is invalid\n    if (str[0] == '-') return false; // Negative numbers are outside the 0-1000 range\n\n    // Special handling for \"0\" to allow it\n    if (strcmp(str, \"0\") == 0) {\n        *out_num = 0;\n        return true;\n    }\n\n    // Invalid if starts with '0' and is multi-digit (e.g., \"05\")\n    if (str[0] == '0' && strlen(str) > 1) {\n        return false;\n    }\n\n    // Iterate through characters to parse and validate digits\n    while (str[i] != '\\0') {\n        if (str[i] < '0' || str[i] > '9') {\n            return false; // Non-digit character found\n        }\n        // Check for potential overflow and exceeding 1000 before multiplication\n        if (result > 1000 / 10 || (result == 1000 / 10 && (str[i] - '0') > 0)) {\n             return false; // Number would exceed 1000\n        }\n        result = result * 10 + (str[i] - '0');\n        i++;\n    }\n\n    // Final range check, though intermediate check should catch most issues\n    if (result < 0 || result > 1000) {\n        return false;\n    }\n\n    *out_num = result;\n    return true;\n}\n\n// Checks if a number contains the digit '3'.\nbool has_three_digit(int val) {\n    if (val == 0) return false;\n    while (val > 0) {\n        if (val % 10 == 3) return true;\n        val /= 10;\n    }\n    return false;\n}\n\n// Implements the \"3 Idiots Algorithm\" logic.\nconst char* determine_idiot_level(int num) {\n    bool is_divisible_by_3 = (num % 3 == 0);\n    bool contains_digit_3 = has_three_digit(num);\n\n    if (is_divisible_by_3 && contains_digit_3) {\n        return \"dumb\";\n    } else if (is_divisible_by_3) {\n        return \"idiot\";\n    } else if (contains_digit_3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int j = 1; j < argc; j++) {\n    int number_value;\n    if (parse_and_validate(argv[j], &number_value)) {\n        printf(\"%s\\n\", determine_idiot_level(number_value));\n    } else {\n        printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 882, "language": "Python3", "code": "import sys\n\ndef process_number_string(input_str):\n    if not input_str.isdigit():\n        return \"invalid\"\n    \n    number_value = int(input_str)\n    \n    if not (0 <= number_value <= 1000):\n        return \"invalid\"\n\n    is_div_by_3 = (number_value % 3 == 0)\n    contains_digit_3 = ('3' in input_str)\n\n    if is_div_by_3 and contains_digit_3:\n        return \"dumb\"\n    elif is_div_by_3:\n        return \"idiot\"\n    elif contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_cli(args_list):\n    for each_arg in args_list:\n        print(process_number_string(each_arg))\n\nif __name__ == '__main__':\n    execute_cli(sys.argv[1:])"}
{"id": 883, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool check_numeric(const string &arg) {\n    for(char c: arg) if(!isdigit(c)) return false;\n    return !arg.empty();\n}\nbool has_three(const string &arg) {\n    for(char c: arg) if(c == '3') return true;\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for(int i=1; i<argc; ++i) {\n        string arg(argv[i]);\n        if (!check_numeric(arg)) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int val = stoi(arg);\n        if (val < 0 || val > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool d = val % 3 == 0, h = has_three(arg);\n        if (d && h) cout << \"dumb\\n\";\n        else if (d) cout << \"idiot\\n\";\n        else if (h) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 884, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_valid_halfwidth(const char *str) {\n    while (*str) {\n        if (!isdigit(*str++)) return 0;\n    }\n    return 1;\n}\n\nint includes_three(int number) {\n    while (number > 0) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid evaluate_number(const char *input) {\n    if (!is_valid_halfwidth(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int number = atoi(input);\n    if (number < 0 || number > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (number % 3 == 0 && includes_three(number)) {\n        printf(\"dumb\\n\");\n    } else if (number % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (includes_three(number)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        evaluate_number(argv[i]);\n    }\n    return 0;\n}"}
{"id": 885, "language": "Python3", "code": "import sys\n\ndef is_safe(queens, row, column):\n    for r in range(row):\n        if queens[r] == column or abs(queens[r] - column) == abs(r - row):\n            return False\n    return True\n\ndef solve(queens, row):\n    if row == 8:\n        return True\n\n    for col in range(8):\n        if is_safe(queens, row, col):\n            queens[row] = col\n            if solve(queens, row + 1):\n                return True\n            queens[row] = -1\n\n    return False\n\ndef display_board(queens):\n    for row in range(8):\n        line = ['.'] * 8\n        line[queens[row]] = 'Q'\n        print(''.join(line))\n\ndef main():\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    queens = [-1] * 8\n\n    for i in range(1, k + 1):\n        r, c = map(int, input_data[i].split())\n        queens[r] = c\n\n    solve(queens, 0)\n    display_board(queens)\n\nif __name__ == '__main__':\n    main()"}
{"id": 886, "language": "Python3", "code": "import sys\n\ndef three_idiots_algo(num_str):\n    if not num_str.isdigit(): return \"invalid\"\n    \n    num_val = int(num_str)\n    \n    if not (0 <= num_val <= 1000): return \"invalid\"\n\n    cond_divisible = (num_val % 3 == 0)\n    cond_includes_three = ('3' in num_str)\n\n    if cond_divisible and cond_includes_three:\n        return \"dumb\"\n    elif cond_divisible:\n        return \"idiot\"\n    elif cond_includes_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_from_terminal(arguments_from_terminal):\n    for current_arg in arguments_from_terminal:\n        print(three_idiots_algo(current_arg))\n\nif __name__ == '__main__':\n    run_from_terminal(sys.argv[1:])"}
{"id": 887, "language": "Python3", "code": "import sys\n# sample input\nsample0 = [{\"robot\":0,\"you\":0},{\"robot\":0,\"you\":2},{\"robot\":2,\"you\":1}]\n\n\n\ndef main(argv):\n\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    # print(\"argv[{0}]: {1}\".format(i, v))\n    print(i)\n  pre_comp = [0,0,0]# set initial rock \n  #   \n  \n\n\n    \n    \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n  \n"}
{"id": 888, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String input : args) {\n      String x;\n      try {\n        int value = Integer.parseInt(input);\n        if (value < 0 || value > 1000) {\n          x = \"invalid\";\n        } else if (value % 3 == 0 && input.contains(\"3\")) {\n          x = \"dumb\";\n        } else if (value % 3 == 0) {\n          x = \"idiot\";\n        } else if (input.contains(\"3\")) {\n          x = \"stupid\";\n        } else {\n          x = \"smart\";\n        }\n      } catch (Exception e) {\n        x = \"invalid\";\n      }\n      System.out.println(x);\n    }\n  }\n}"}
{"id": 889, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 890, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint stup(int x){\n  int r;\n  while(x>0)\n  {\n    r=x%10;\n    if(r==3)\n    return 1;\n    x=x/10;\n\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  int x;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i <argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    x=atoi(argv[i]);\n    if(!isalpha(x) && x!=0)\n    {\n      if(0<x<1000)\n      {\n      if(x%3==0 && stup(x))\n      {\n        printf(\"dumb\\n\");\n      }\n      else if(x%3==0)\n    {\n        printf(\"idiot\\n\");\n    } \n      \n      else if(stup(x))\n      {\n      \n        printf(\"stupid\\n\");\n      }\n      else if(x%3!=0 && !stup(x))\n      {\n      \n        printf(\"smart\\n\");\n      }\n    }\n    }\n    else\n        printf(\"invalid\\n\");\n      \n  }\n  return 0;\n}\n"}
{"id": 891, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nclass NQueens:\n    def __init__(self, size, already):\n        self.size = size\n        self.solutions = 0\n        self.already = already\n        self.solve()\n\n    def solve(self):\n        positions = [-1] * self.size\n        self.put_queen(positions, 0)\n\n    def put_queen(self, positions, target_row):\n\n        if target_row == self.size:\n            self.show_full_board(positions)\n            self.solutions += 1\n        else:\n\n            if self.already.get(target_row, None) != None:\n              if self.check_place(positions, target_row, self.already[target_row]):\n                positions[target_row] = self.already[target_row]\n                self.put_queen(positions, target_row + 1)\n            else:\n              for column in range(self.size):\n                if self.check_place(positions, target_row, column):\n                    positions[target_row] = column\n                    self.put_queen(positions, target_row + 1)\n\n\n    def check_place(self, positions, ocuppied_rows, column):\n        for i in range(ocuppied_rows):\n          if positions[i] == column or positions[i] - i == column - ocuppied_rows or positions[i] + i == column + ocuppied_rows:\n            return False\n        return True\n\n    def show_full_board(self, positions):\n        for row in range(self.size):\n            line = \"\"\n            for column in range(self.size):\n                if positions[row] == column:\n                    line += \"Q\"\n                else:\n                    line += \".\"\n            print(line)\n        print(\"\\n\")\n\n    def show_short_board(self, positions):\n        line = \"\"\n        for i in range(self.size):\n            line += str(positions[i]) + \" \"\n        print(line)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    f = open(argv[0], \"r\")\n    data = f.read().split('\\n')\n\n    temp = {}\n    for i in range(int(data[0])):\n      r,c = data[i+1].split(' ')\n      temp[int(r)] = int(c)\n\n    NQueens(8, temp)\n    \n\n  \n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 892, "language": "Python3", "code": "import sys\n\ndef int_to_roman(num):\n    # \u5404\u6841\u3054\u3068\u306e\u30ed\u30fc\u30de\u6570\u5b57\u8868\u73fe\n    thousands = [\"\", \"M\", \"MM\", \"MMM\"]\n    hundreds  = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    tens      = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ones      = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n\n    t = thousands[num // 1000]\n    h = hundreds[(num % 1000) // 100]\n    te = tens[(num % 100) // 10]\n    o = ones[num % 10]\n    return t + h + te + o\n\ndef main(argv):\n    num = int(argv[0])\n    print(int_to_roman(num))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 893, "language": "Python3", "code": "import sys\n\ndef evaluate_number(number):\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    if '3' in str(number):\n        if number % 3 == 0:\n            return \"dumb\"\n        return \"stupid\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    return \"smart\"\n\ndef main(argv):\n    # This main function handles input verification and classification.\n    output = []\n    \n    for arg in argv:\n        if arg.isdigit():\n            num = int(arg)\n            output.append(evaluate_number(num))\n        else:\n            output.append(\"invalid\")\n    \n    print(\"\\n\".join(output))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 894, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n            int n;\n            bool isNumeric = int.TryParse(args[i], out n);\n            if (!isNumeric)\n            {\n                Console.WriteLine(\"invalid\");\n            }\n            else if (Convert.ToInt32(args[i]) % 3 == 0 && args[i].Contains(\"3\"))\n            {\n                Console.WriteLine(\"dumb\");\n            }else if (args[i].Contains(\"3\")){\n              Console.WriteLine(\"stupid\");\n            }\n            else if (Convert.ToInt32(args[i]) % 3 == 0)\n            {\n                Console.WriteLine(\"idiot\");\n            }\n            else\n            {\n                Console.WriteLine(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 895, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__ =='__main__':\n  main(sys.argv[1:])"}
{"id": 896, "language": "C++", "code": "#include <iostream>\n#include <string.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n \n  for (int i = 1; i < argc; i++) \n  {\n     int flag = 0;\n    for(int j = 0 ; argv[i][j] != '\\0';j++)\n    {\n      if((argv[i][j] <= 48) || (argv[i][j] >= 57) )\n      {\n        flag = 1;\n        break ;\n      }\n    }\n      int input = std::atoi( argv[i] );\n      char temp[100];\n      strcpy(temp,argv[i]);\n      if( (input >= 0) && (input <= 1000 ) && (flag == 0))\n      {\n          if( input % 3 == 0)\n          {\n            strcpy(argv[i],\"idiot\");\n            \n                if(strchr(temp,'3') )\n                {\n                    strcpy(argv[i],\"dumb\");\n                }\n          \n            \n          }\n          else\n          {\n            strcpy(argv[i],\"smart\");\n             \n                if(strchr(temp,'3') )\n                {\n                    strcpy(argv[i],\"stupid\");\n                }\n            \n           \n          }\n      }\n     else\n      {\n        strcpy(argv[i],\"invalid\");\n      }\n   \n    cout << argv[i] << \"\\n\";\n  }\n  return 0;\n}\n"}
{"id": 897, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      String out = \"invalid\";\n      try {\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) out = \"invalid\";\n        else if (n % 3 == 0 && s.contains(\"3\")) out = \"dumb\";\n        else if (n % 3 == 0) out = \"idiot\";\n        else if (s.contains(\"3\")) out = \"stupid\";\n        else out = \"smart\";\n      } catch (Exception e) {\n        out = \"invalid\";\n      }\n      System.out.println(out);\n    }\n  }\n}"}
{"id": 898, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter, OrderedDict\nimport string\n\ndef count_chars(text):\n    chars = string.ascii_uppercase + string.ascii_lowercase + ' '\n    cnt = Counter()\n    for ch in text:\n        if ch in chars:\n            cnt[ch] += 1\n    return cnt\n\ndef main(argv):\n    cmd = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n\n    with open(input_path, 'r', encoding='utf-8') as f:\n        text = f.read()\n\n    if cmd == 'count':\n        counter = count_chars(text)\n        # output JSON with all keys including zeros\n        result = OrderedDict()\n        for ch in string.ascii_uppercase + string.ascii_lowercase + ' ':\n            result[ch] = counter.get(ch, 0)\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(result, f, ensure_ascii=False, indent=2)\n\n    elif cmd == 'space':\n        counter = count_chars(text)\n        # exclude space, find char with highest count to be space substitute\n        counter.pop(' ', None)\n        # The character substituting space is the most frequent char in encrypted text excluding space\n        if not counter:\n            c = \"\"\n        else:\n            c = counter.most_common(1)[0][0]\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump({\"char\": c}, f, ensure_ascii=False, indent=2)\n\n    elif cmd == 'decrypt':\n        # Step 1: find which char is space substitute\n        count = count_chars(text)\n        count.pop(' ', None)\n        space_char = count.most_common(1)[0][0]\n\n        # Step 2: Replace space_char with ' ' (space)\n        # Only letters and space substituted, punctuation intact\n        # preserving case for letters\n        # Step 3: Need to reverse Caesar shift of letters\n        # Find shift by frequency analysis:\n        # Most frequent letter in English is 'e'\n        # get frequency of letters (excluding space_char)\n        filtered = [c for c in text if c.isalpha() or c == space_char]\n        freq = Counter()\n        for ch in filtered:\n            if ch.isalpha():\n                freq[ch.lower()] += 1\n        # guess shift by assuming the most common letter corresponds to 'e'\n        if not freq:\n            shift = 0\n        else:\n            most_common = freq.most_common(1)[0][0]\n            # Calculate shift: how many places most_common shifted from 'e'?\n            # e = 4 in 0-based alphabet index\n            most_idx = ord(most_common) - ord('a')\n            e_idx = ord('e') - ord('a')\n            shift = (most_idx - e_idx) % 26\n\n        def unshift(ch, s):\n            if not ch.isalpha():\n                return ch\n            base = ord('A') if ch.isupper() else ord('a')\n            pos = ord(ch) - base\n            newpos = (pos - s) % 26\n            return chr(base + newpos)\n\n        # replace space_char with space\n        replaced = []\n        for ch in text:\n            if ch == space_char:\n                replaced.append(' ')\n            else:\n                replaced.append(ch)\n\n        # unshift letters\n        decrypted = []\n        for ch in replaced:\n            if ch.isalpha():\n                decrypted.append(unshift(ch, shift))\n            else:\n                decrypted.append(ch)\n\n        result_text = ''.join(decrypted)\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(result_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 899, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n// 3\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\nint has3(const char *s) {\n  while (*s) {\n    if (*s == '3') return 1;\n    s++;\n  }\n  return 0;\n}\n\n// \u6574\u6570\u6587\u5b57\u5217\u304b\u5224\u5b9a\nint is_int(const char *s) {\n  if (*s == '\\0') return 0;\n  while (*s) {\n    if (!isdigit((unsigned char)*s)) return 0;\n    s++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    if (!is_int(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n < 0 || n > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int divisible3 = (n % 3 == 0);\n    int contains3 = has3(argv[i]);\n    if (divisible3 && contains3)\n      printf(\"dumb\\n\");\n    else if (divisible3)\n      printf(\"idiot\\n\");\n    else if (contains3)\n      printf(\"stupid\\n\");\n    else\n      printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 900, "language": "Java", "code": "public class IdiotsCli {\n  public static void main(String[] args) {\n    for(String arg : args){\n      try{\n        int v = Integer.parseInt(arg);\n        if(v < 0 || v > 1000){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div = v % 3 == 0;\n        boolean contains = arg.contains(\"3\");\n        if(div && contains) System.out.println(\"dumb\");\n        else if(div) System.out.println(\"idiot\");\n        else if(contains) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 901, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      System.out.println(new Random().nextInt(3));\n\t\t}\n\t}\n}\n"}
{"id": 902, "language": "Java", "code": "package track;\n\nimport java.util.regex.Pattern;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      // \u6570\u5024\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\n      if (!Pattern.matches(\"\\\\d+\", s)) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      \n      int n = Integer.parseInt(s);\n\n      if (n < 0 || n > 1000) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n\n      boolean isMultipleOf3 = (n % 3 == 0);\n      boolean contains3 = s.contains(\"3\");\n\n      if (isMultipleOf3 && contains3) {\n        System.out.println(\"dumb\");\n      } else if (isMultipleOf3) {\n        System.out.println(\"idiot\");\n      } else if (contains3) {\n        System.out.println(\"stupid\");\n      } else {\n        System.out.println(\"smart\");\n      }\n    }\n  }\n}"}
{"id": 903, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n        int x=Integer.parseInt(args[i]);\n        if(args[i].contains(\"3\") && x%3==0)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }\n        else if(x%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n     catch(NumberFormatException e)\n      {\n       // if(args[i].contains(\"3\"))\n        //System.out.println(\"stupid\");\n       // else\n        System.out.println(\"invalid\");\n\n      }\n\t\t//\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t//\tSystem.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 904, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    for (int i=1; i<argc; i++) {\n        string str(argv[i]);\n        bool ok = true;\n        for (auto c : str) {\n            if (c < '0' || c > '9') {\n                ok = false;\n                break;\n            }\n        }\n        if (!ok) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int n = stoi(str);\n        if (n > 1000 || n < 0) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool div3 = (n % 3 == 0);\n        bool has3 = (str.find('3') != string::npos);\n        if (div3 && has3) cout << \"dumb\\n\";\n        else if (div3) cout << \"idiot\\n\";\n        else if (has3) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 905, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__=='__main__':\n  main(sys.argv[1:])      \n"}
{"id": 906, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for value_str in argv:\n        output = \"invalid\"\n        if value_str.isdigit():\n            num = int(value_str)\n            if 0 <= num <= 1000:\n                is_div_by_3 = num % 3 == 0\n                has_3 = '3' in value_str\n                \n                if is_div_by_3 and has_3:\n                    output = \"dumb\"\n                elif is_div_by_3:\n                    output = \"idiot\"\n                elif has_3:\n                    output = \"stupid\"\n                else:\n                    output = \"smart\"\n        \n        print(output)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 907, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint contains_three(const char *str) {\n  while (*str) {\n    if (*str == '3') return 1;\n    str++;\n  }\n  return 0;\n}\n\nint is_numeric_string(const char *str) {\n  while (*str) {\n    if (!isdigit(*str)) return 0;\n    str++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; i++) {\n    if (!is_numeric_string(argv[i])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int val = atoi(argv[i]);\n    if (val < 0 || val > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int divisible3 = (val % 3 == 0);\n    int has3 = contains_three(argv[i]);\n    if (divisible3 && has3) puts(\"dumb\");\n    else if (divisible3) puts(\"idiot\");\n    else if (has3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 908, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args)\n   {\n\t\tfor (int i = 0; i < args.length; i++)\n     {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int num=Integer.parseInt(args[i]);\n        if(num>0 && num<1000)\n        {\n          if(num%3==0 && args[i].contains(\"3\"))\n          System.out.println(\"dumb\");\n          else if(args[i].contains(\"3\"))\n          System.out.println(\"stupid\");\n          else if(num%3==0)\n          System.out.println(\"idiot\");\n          else\n          System.out.println(\"smart\");\n        }\n        else\n        System.out.println(\"invalid\");\n      }\n      else\n      System.out.println(\"invalid\");\t\t\n\t\t}\n\t}\n}\n"}
{"id": 909, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    static final int N = 8;\n    static char[][] board = new char[N][N];\n    static boolean[] fixedRows = new boolean[N];\n    static boolean solutionFound = false;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        for (int i = 0; i < N; i++) {\n            Arrays.fill(board[i], '.');\n        }\n\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            fixedRows[r] = true;\n        }\n        scanner.close();\n\n        solve(0);\n    }\n\n    static void solve(int row) {\n        if (solutionFound) {\n            return;\n        }\n        if (row == N) {\n            printBoard();\n            solutionFound = true;\n            return;\n        }\n\n        if (fixedRows[row]) {\n            solve(row + 1);\n            return;\n        }\n\n        for (int col = 0; col < N; col++) {\n            if (isSafe(row, col)) {\n                board[row][col] = 'Q';\n                solve(row + 1);\n                if (solutionFound) {\n                    return;\n                }\n                board[row][col] = '.'; // Backtrack\n            }\n        }\n    }\n\n    static boolean isSafe(int r, int c) {\n        // Check column\n        for (int i = 0; i < N; i++) {\n            if (board[i][c] == 'Q') {\n                return false;\n            }\n        }\n        // Check upper left diagonal\n        for (int i = r, j = c; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        // Check upper right diagonal\n        for (int i = r, j = c; i >= 0 && j < N; i--, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        // Check lower left diagonal\n         for (int i = r, j = c; i < N && j >= 0; i++, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        // Check lower right diagonal\n        for (int i = r, j = c; i < N && j < N; i++, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static void printBoard() {\n        for (int i = 0; i < N; i++) {\n            System.out.println(new String(board[i]));\n        }\n    }\n}"}
{"id": 910, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isDigitString(const string &str) {\n    for (char c : str) {\n        if (c < '0' || c > '9') return false;\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        string s(argv[i]);\n        if (!isDigitString(s)) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int val = stoi(s);\n        if (val < 0 || val > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool div3 = (val % 3 == 0);\n        bool has3 = (s.find('3') != string::npos);\n        if (div3 && has3) cout << \"dumb\\n\";\n        else if (div3) cout << \"idiot\\n\";\n        else if (has3) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 911, "language": "Python3", "code": "import json\nimport sys\n\ndef main():\n    # \u4e8b\u524d\u306b\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u3092\u5b9a\u7fa9\n    robot_moves = [0, 1, 2]  # Rock, Scissors, Paper\n    last_opponent_hand = None\n\n    with open(sys.argv[1]) as f:\n        matches = json.load(f)\n\n        for match in matches:\n            last_opponent_hand = match['you']\n            robot_moves.append(match['robot'])\n            if len(robot_moves) > 3:\n                robot_moves.pop(0)\n\n    # \u6b21\u306e\u624b\u3092\u6c7a\u5b9a\n    next_move = (len(robot_moves) - 1) % 3  # \u524d\u306e\u624b\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\n    print((next_move + 1) % 3)  # \u6b21\u306e\u624b\u3092\u8fd4\u3059\n\nif __name__ == '__main__':\n    main()"}
{"id": 912, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <map>\n\nint main(int argc, char *argv[])\n{\n    std::map<int, std::string> numMap = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400,\"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n    int numLis[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int numDec = atoi(argv[1]);\n    \n    for (auto num : numLis)\n    {\n        while (numDec >= num)\n        {\n            numDec -= num;\n            std::cout << numMap[num];\n        }\n    }\n    \n    return 0;\n}\n"}
{"id": 913, "language": "Python3", "code": "import sys\nimport re, json\n\ndef replaceChar(s, c1, c2):\n    # Replace char in string\n    string = []\n    for c in s:\n        if c == c1:\n            string.append(c2)\n        elif c == c2:\n            string.append(c1)\n        else:\n            string.append(c)\n    \n    return ''.join(string)\n\ndef countChar(s):\n    # Count characters and stored as dictionary\n    cntDct = {}\n    cntDct[' '] = s.count(' ')\n\n    for i in range(ord('A'), ord('Z')+1):\n        cntDct[chr(i)] = s.count(chr(i))\n\n    for i in range(ord('a'), ord('z')+1):\n        cntDct[chr(i)] = s.count(chr(i))\n\n    return cntDct\n\ndef findReplacedChar(s):\n    # Get count dictionary\n    cntDct = countChar(s)\n\n    # Search replaced char as ' '\n    tar = [k for k, v in cntDct.items() if v == max(cntDct.values())][0]\n\n    spcDct = {}\n    spcDct['char'] = tar\n\n    return spcDct\n\ndef decryptString(s):\n    # Replace space\n    tar = findReplacedChar(s)['char']\n    modSpc = replaceChar(s, ' ', tar)\n\n    # Search replaced char as 'e'\n    cntDct = countChar(modSpc)\n    del(cntDct[' '])\n    tar = [k for k, v in cntDct.items() if v == max(cntDct.values())][0]\n    shift = ord('e') - ord(tar)\n\n    # Shift each char\n    string = []\n    lower = re.compile(r'^[a-z]+$')\n    upper = re.compile(r'^[A-Z]+$')\n    for i in modSpc:\n        if lower.match(i):\n            tmp = ord(i) + shift\n            if tmp < ord('a'):\n                tmp = ord('z') + (shift - ((ord('a') - ord(i)) - 1))\n            elif tmp > ord('z'):\n                tmp = ord('a') + (shift - ((ord('z') - ord(i)) + 1))\n            string.append(chr(tmp))\n        elif upper.match(i):\n            tmp = ord(i) + shift\n            if tmp < ord('A'):\n                tmp = ord('Z') + (shift - ((ord('A') - ord(i)) - 1))\n            elif tmp > ord('Z'):\n                tmp = ord('A') + (shift - ((ord('Z') - ord(i)) + 1))\n            string.append(chr(tmp))\n        else:\n            string.append(i)\n\n    return ''.join(string)\n\ndef main(argv):\n    # Input arguments\n    mode = argv[0]\n    inputPath = argv[1]\n    outputPath = argv[2]\n\n    with open(inputPath, 'r') as fr:\n        s = fr.read()\n\n    # Change process for each mode\n    if mode == 'count':\n        cntDct = countChar(s)\n        with open(outputPath, 'w') as fw:\n            json.dump(cntDct, fw, indent=0)\n\n    elif mode == 'space':\n        spcDct = findReplacedChar(s)\n        with open(outputPath, 'w') as fw:\n            json.dump(spcDct, fw, indent=0)\n\n    elif mode == 'decrypt':\n        string = decryptString(s)\n        with open(outputPath, 'w') as fw:\n            fw.write(string)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 914, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    fixed_queens = {}\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        fixed_queens[r] = c\n\n    cols_used = [False] * 8\n    diag1_used = [False] * 15\n    diag2_used = [False] * 15\n    \n    for r, c in fixed_queens.items():\n        cols_used[c] = True\n        diag1_used[r - c + 7] = True\n        diag2_used[r + c] = True\n\n    solution_cols = [-1] * 8\n    for r, c in fixed_queens.items():\n        solution_cols[r] = c\n\n    r = 0\n    while r < 8:\n        if r in fixed_queens:\n            r += 1\n            continue\n        \n        # Check if we are backtracking into this row\n        prev_c = solution_cols[r]\n        if prev_c != -1:\n            cols_used[prev_c] = False\n            diag1_used[r - prev_c + 7] = False\n            diag2_used[r + prev_c] = False\n        \n        c = prev_c + 1\n        found_spot = False\n        while c < 8:\n            if not cols_used[c] and not diag1_used[r - c + 7] and not diag2_used[r + c]:\n                solution_cols[r] = c\n                cols_used[c] = True\n                diag1_used[r - c + 7] = True\n                diag2_used[r + c] = True\n                found_spot = True\n                r += 1\n                break\n            c += 1\n        \n        if not found_spot:\n            solution_cols[r] = -1\n            r -= 1\n            while r >= 0 and r in fixed_queens:\n                r -= 1\n\n    for c_final in solution_cols:\n        print('.' * c_final + 'Q' + '.' * (7 - c_final))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 915, "language": "Python3", "code": "import sys\n\ndef main():\n    # \u5165\u529b\u51e6\u7406\n    k = int(sys.stdin.readline())\n    pos = [-1] * 8\n    is_fixed = [False] * 8\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        pos[r] = c\n        is_fixed[r] = True\n\n    def is_safe(row, col):\n        for r_prev in range(row):\n            if pos[r_prev] == col or abs(r_prev - row) == abs(pos[r_prev] - col):\n                return False\n        return True\n\n    r = 0\n    while r < 8:\n        if is_fixed[r]:\n            r += 1\n            continue\n\n        c = pos[r] + 1\n        found_spot = False\n        while c < 8:\n            if is_safe(r, c):\n                pos[r] = c\n                found_spot = True\n                break\n            c += 1\n        \n        if found_spot:\n            r += 1\n        else:\n            # backtrack\n            pos[r] = -1 \n            r -= 1\n            while r >= 0 and is_fixed[r]:\n                r -= 1\n\n    # \u7d50\u679c\u3092\u51fa\u529b\n    for r_idx in range(8):\n        row_str = ['.'] * 8\n        row_str[pos[r_idx]] = 'Q'\n        print(\"\".join(row_str))\n\nif __name__ == '__main__':\n    main()"}
{"id": 916, "language": "Python3", "code": "import sys\n\ndef get_output(val_str):\n    if not val_str.isdigit() or not (0 <= int(val_str) <= 1000):\n        return \"invalid\"\n    \n    num = int(val_str)\n    \n    d3 = num % 3 == 0\n    c3 = '3' in val_str\n    \n    if d3 and c3: return \"dumb\"\n    if d3: return \"idiot\"\n    if c3: return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    results = map(get_output, argv)\n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 917, "language": "Python3", "code": "import sys\nimport json\n\nchars = \" ,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\".split(',')\nchars_len = len(chars)\n\ndef count(cs):\n    #init cnt\n    cnt_d = {}\n    for c in chars:\n        cnt_d[c] = 0\n\n    for c in cs:\n        if c in cnt_d:\n            cnt_d[c] += 1\n\n    return cnt_d\n\ndef space(cs):\n    comma_flg = False\n    candidate = {}\n    if ',' in cs:\n        for c in cs:\n            if comma_flg == True:\n                if c in candidate:\n                    candidate[c] += 1\n                else:\n                    candidate[c] = 1\n                comma_flg = False\n            elif c == ',':\n                comma_flg = True\n        max_k = max(candidate, key=candidate.get)\n        return max_k\n    else:\n        cnt_d = count(cs)\n        max_k = max(cnt_d, key=cnt_d.get)\n        return max_k\n\ndef shift(diff):\n    def shift_(l,n):\n        return l[n:] + l[:n]\n    Chars = \"A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z\".split(',')\n    chars = \"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\".split(',')\n    Chars_shift = shift_(Chars, diff)\n    chars_shift = shift_(chars, diff)\n    shift_table = {}\n    for i in range(len(chars)):\n        C = Chars[i]\n        C_s = Chars_shift[i]\n        c = chars[i]\n        c_s = chars_shift[i]\n        shift_table[C] = C_s\n        shift_table[c] = c_s\n    return shift_table\n\n\n\ndef main(argv):\n    cmd = argv[0]\n    f_name = argv[1]\n    o_name = argv[2]\n    with open(f_name, mode='r') as f:\n        s = f.read()\n        cs = list(s)\n        if cmd == 'count':\n            cnt_d = count(cs)\n            with open(o_name, mode='w') as f_o:\n                f_o.write(json.dumps(cnt_d))\n        elif cmd == 'space':\n            with open(o_name, mode='w') as f_o:\n                space_c = space(cs)\n                space_dump = {'char': space_c}\n                f_o.write(json.dumps(space_dump))\n        elif cmd == 'decrypt':\n            cnt_d = count(cs)\n            space_c = space(cs)\n            tmp = []\n            for c in cs:\n                if c == ' ':\n                    tmp.append(space_c)\n                elif c == space_c:\n                    tmp.append(' ')\n                else:\n                    tmp.append(c)\n\n            cnt_d = count(tmp)\n            max_c = max(cnt_d, key=cnt_d.get)\n            hoge = \"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\".split(',')\n            for (c, cnt) in sorted(cnt_d.items(), key=lambda x: -x[1]):\n                if c in hoge:\n                    max_c = c\n                    break\n            diff = ord(max_c) - ord('e')\n            res = []\n            table = shift(diff)\n            for c in cs:\n                if c in table:\n                    res.append(table[c])\n                else:\n                    res.append(c)\n            with open(o_name, mode='w') as f_o:\n                f_o.write(''.join(res))\n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 918, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SolTwo {\n\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.err.println(\"Error: Invalid number of arguments.\");\n            System.err.println(\"Usage: java SolTwo <command> <inputFilePath> <outputFilePath>\");\n            return;\n        }\n\n        String operation = args[0];\n        String inputFile = args[1];\n        String outputFile = args[2];\n\n        try {\n            String encryptedContent = Files.readString(Paths.get(inputFile));\n\n            switch (operation) {\n                case \"count\":\n                    handleCountCommand(encryptedContent, outputFile);\n                    break;\n                case \"space\":\n                    handleSpaceCommand(encryptedContent, outputFile);\n                    break;\n                case \"decrypt\":\n                    handleDecryptCommand(encryptedContent, outputFile);\n                    break;\n                default:\n                    System.err.println(\"Error: Unknown command '\" + operation + \"'.\");\n            }\n        } catch (IOException e) {\n            System.err.println(\"An I/O error occurred: \" + e.getMessage());\n        }\n    }\n\n    private static String mapToJsonString(Map<Character, Integer> dataMap) {\n        StringBuilder jsonResult = new StringBuilder(\"{\\n\");\n        boolean firstItem = true;\n        for (Map.Entry<Character, Integer> entry : dataMap.entrySet()) {\n            if (!firstItem) {\n                jsonResult.append(\",\\n\");\n            }\n            jsonResult.append(\"  \\\"\").append(entry.getKey()).append(\"\\\": \").append(entry.getValue());\n            firstItem = false;\n        }\n        jsonResult.append(\"\\n}\");\n        return jsonResult.toString();\n    }\n\n    private static void handleCountCommand(String content, String outputPath) throws IOException {\n        Map<Character, Integer> charOccurrences = new HashMap<>();\n        for (char charVal : content.toCharArray()) {\n            if (Character.isLetter(charVal)) {\n                charOccurrences.put(Character.toUpperCase(charVal), charOccurrences.getOrDefault(Character.toUpperCase(charVal), 0) + 1);\n            } else if (charVal == ' ') {\n                charOccurrences.put(charVal, charOccurrences.getOrDefault(charVal, 0) + 1);\n            }\n        }\n        String jsonOutput = mapToJsonString(charOccurrences);\n        Files.writeString(Paths.get(outputPath), jsonOutput);\n    }\n\n    private static char findMostFrequentLowercaseLetter(String text) {\n        Map<Character, Integer> lowerCharFreqs = new HashMap<>();\n        for (char ch : text.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                lowerCharFreqs.put(Character.toLowerCase(ch), lowerCharFreqs.getOrDefault(Character.toLowerCase(ch), 0) + 1);\n            }\n        }\n\n        char maxFreqChar = ' ';\n        int highestCount = -1;\n\n        for (Map.Entry<Character, Integer> entry : lowerCharFreqs.entrySet()) {\n            if (entry.getValue() > highestCount) {\n                highestCount = entry.getValue();\n                maxFreqChar = entry.getKey();\n            }\n        }\n        return maxFreqChar;\n    }\n\n    private static void handleSpaceCommand(String content, String outputPath) throws IOException {\n        char spaceReplacedChar = findMostFrequentLowercaseLetter(content);\n        \n        StringBuilder jsonOutput = new StringBuilder(\"{\\n\");\n        jsonOutput.append(\"  \\\"char\\\": \\\"\").append(spaceReplacedChar).append(\"\\\"\\n\");\n        jsonOutput.append(\"}\");\n        Files.writeString(Paths.get(outputPath), jsonOutput.toString());\n    }\n\n    private static void handleDecryptCommand(String content, String outputPath) throws IOException {\n        char identifiedSpaceReplacement = findMostFrequentLowercaseLetter(content);\n\n        // Reverse the space-character swap\n        StringBuilder firstDecryptionPass = new StringBuilder();\n        for (char currentCharacter : content.toCharArray()) {\n            if (currentCharacter == ' ') {\n                firstDecryptionPass.append(identifiedSpaceReplacement);\n            } else if (Character.toLowerCase(currentCharacter) == identifiedSpaceReplacement) {\n                firstDecryptionPass.append(' ');\n            } else {\n                firstDecryptionPass.append(currentCharacter);\n            }\n        }\n        String textAfterSwapReversal = firstDecryptionPass.toString();\n\n        // Determine the Caesar shift from the text after swap reversal\n        char mostFreqLetterAfterSwap = findMostFrequentLowercaseLetter(textAfterSwapReversal);\n        int encryptionShiftAmount = (mostFreqLetterAfterSwap - 'e' + 26) % 26;\n\n        // Apply the reverse Caesar shift\n        StringBuilder fullyDecryptedText = new StringBuilder();\n        for (char charToProcess : textAfterSwapReversal.toCharArray()) {\n            if (Character.isLetter(charToProcess)) {\n                char baseChar = Character.isUpperCase(charToProcess) ? 'A' : 'a';\n                char decryptedAlphabetChar = (char) ((charToProcess - baseChar - encryptionShiftAmount + 26) % 26 + baseChar);\n                fullyDecryptedText.append(decryptedAlphabetChar);\n            } else {\n                fullyDecryptedText.append(charToProcess);\n            }\n        }\n        Files.writeString(Paths.get(outputPath), fullyDecryptedText.toString());\n    }\n}"}
{"id": 919, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\n#define N 8\n\nbool check(int board[N][N], int r, int c)\n{\n    int i, j;\n\n    for (i = 0; i < N; i++)\n        if (board[r][i])\n            return false;\n\n    for (i = r, j = c; i >= 0 && j >= 0; i--, j--)\n        if (board[i][j])\n            return false;\n\n    for (i = r, j = c; i < N && j >= 0; i++, j--)\n        if (board[i][j])\n            return false;\n\n    for (i = r, j = c; i < N && j < N; i++, j++)\n        if (board[i][j])\n            return false;\n\n    for (i = r, j = c; i >= 0 && j < N; i--, j++)\n        if (board[i][j])\n            return false;\n\n    return true;\n}\n\nbool solve(int board[N][N], unordered_set<int> &set, int c) {\n    if (c >= N) {\n        return true;\n    }\n\n    if (set.find(c) != set.end()) {\n        return solve(board, set, c + 1);\n    }\n\n    for (int i = 0; i < N; i++) {\n        if (check(board, i, c)) {\n            board[i][c] = 1;\n            if (solve(board, set, c + 1)) {\n                return true;\n            }\n            board[i][c] = 0;\n        }\n    }\n\n    return false;\n}\n\nvoid readInput(char* filename, int board[N][N], unordered_set<int> &set) {\n  ifstream infile(filename);\n\n  string n;\n  getline(infile, n);\n  int k = stoi(n);\n  for (int i = 0; i < k; i++) {\n      string line;\n      getline(infile, line);\n      stringstream ss(line);\n\n      getline(ss, n, ' ');\n      int r = stoi(n);\n      getline(ss, n, ' ');\n      int c = stoi(n);\n      \n      board[r][c] = 1;\n      set.insert(c);\n  }\n}\n\nvoid printBoard(int board[N][N]) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (board[i][j] == 1) {\n                cout << 'Q';\n            } else {\n                cout << '.';\n            }\n        }\n        cout << endl;\n    }\n}\n\nint main(int argc, char * argv[])\n{\n    int board[N][N];\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            board[i][j] = 0;\n        }\n    }\n\n    unordered_set<int> set;\n    readInput(argv[1], board, set);\n\n    solve(board, set, 0);\n\n    printBoard(board);\n\n    return 0;\n}\n"}
{"id": 920, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm> // For std::stoi\n\nusing namespace std;\n\n// Helper function to convert an integer to its Roman numeral representation.\nstring convertToRomanNumeral(int numVal) {\n    // Arrays storing the standard Roman numeral values and their corresponding symbols.\n    // They are ordered from largest to smallest to facilitate the greedy conversion.\n    const int valMap[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    const string symMap[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    \n    string romanStr = \"\"; // Accumulates the Roman numeral string.\n\n    // Iterate through the predefined values.\n    for (int i = 0; i < 13; ++i) { // There are 13 unique value-symbol pairs.\n        // While the current number is greater than or equal to the current value,\n        // append its symbol and subtract the value from the number.\n        while (numVal >= valMap[i]) {\n            romanStr += symMap[i];\n            numVal -= valMap[i];\n        }\n    }\n    return romanStr; // Return the final Roman numeral string.\n}\n\nint main(int argc, char *argv[]) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  // The problem guarantees exactly one valid argument (the number).\n  int inputNumber = stoi(argv[1]); // Convert the command-line argument string to an integer.\n\n  // Convert the Arabic number to its Roman numeral representation.\n  string resultRoman = convertToRomanNumeral(inputNumber);\n\n  // Output the result to standard output.\n  cout << resultRoman << endl;\n\n  return 0;\n}"}
{"id": 921, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n  int n,temp,isthree=0;\n\n  for (int i = 1; i < argc; i++) {\n    n=-1;\n   sscanf(argv[i],\"%d\",&n);\n   isthree=0;\n   temp=n;\n   while(temp){\n      if(temp%10==3){\n          isthree=1;\n          break;\n      }\n      temp=temp/10;\n    }\n    \n   if(n==-1){\n      printf(\"invalid\\n\");\n   }\n   else{\n     if(n%3==0 && isthree==1){\n          printf(\"dumb\\n\");\n     }\n     else if(n%3==0){\n        printf(\"idiot\\n\");\n     }\n     else if(isthree){\n          printf(\"stupid\\n\");\n     }\n     else{\n       printf(\"smart\\n\");\n     }\n   }\n    }\n \n\n  \n  return 0;\n}\n\n"}
{"id": 922, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like\n    lw= argv[0]\n    p=argv[0]\n    for j in argv:\n      if(j.isdigit()==True):\n        l=str(j)\n        if('3' in l and int(j)%3==0):\n          print(\"dumb\")\n        elif('3' in l):\n          print(\"stupid\")\n        elif(int(j)%3==0):\n          print(\"idiot\")\n        elif('3' not in l and int(j)%3!=0):\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 923, "language": "Java", "code": "package track;\n\nimport org.json.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length == 0) return;\n\n    String fileArg = args[0];\n    List<Integer> rs = new ArrayList<>();\n    List<Integer> ys = new ArrayList<>();\n    try {\n      String txt = Files.readString(Paths.get(fileArg));\n      JSONArray arr = new JSONArray(txt);\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject obj = arr.getJSONObject(i);\n        rs.add(obj.getInt(\"robot\"));\n        ys.add(obj.getInt(\"you\"));\n      }\n    } catch(Exception e) {\n      System.out.println(\"0\");\n      return;\n    }\n    if (rs.size() < 3) {\n      System.out.println(\"0\");\n      return;\n    }\n    Map<String, Deque<Integer>> patMap = new HashMap<>();\n    for (int i = 3; i < rs.size(); i++) {\n      String pat = rs.get(i-3) + \"|\" + rs.get(i-2) + \"|\" + rs.get(i-1) + \"|\" + ys.get(i-1);\n      patMap.computeIfAbsent(pat, x -> new ArrayDeque<>()).add(rs.get(i));\n    }\n    String curr = rs.get(rs.size()-3) + \"|\" + rs.get(rs.size()-2) + \"|\" + rs.get(rs.size()-1) + \"|\" + ys.get(ys.size()-1);\n    Deque<Integer> hq = patMap.get(curr);\n\n    int roboHand;\n    if (hq == null || hq.size() == 0) {\n      roboHand = 0;\n    } else {\n      // \u30b5\u30a4\u30af\u30eb\u9806\u5e8f\u4fdd\u6301\u3059\u308b\u610f\u5473\u3067\u30ad\u30e5\u30fc\u306elast\u3092\u53d6\u308a\uff0b\uff11mod3\u3059\u308b\u3060\u3051\n      int last = 0;\n      for (int v : hq) last = v;\n      roboHand = (last + 1) % 3;\n    }\n    int winplay = (roboHand + 2) % 3;\n    System.out.println(winplay);\n  }\n}"}
{"id": 924, "language": "Java", "code": "package track;\nimport java.util.regex.Pattern;\npublic class App {\n\tpublic static void main(String[] args) {\n    \n\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t  if(Pattern.matches(\"[0-9]+\", args[i])) {\n\t\t\t  // \ud2b9\uc815 \uc22b\uc790 \ud310\ubcc4\n\t\t\t  int check = 0;\n\t\t\t  for(int i1 = 0; i1 < args[i].length(); i1++) {\n\t\t\t\t  //System.out.println(args[i].charAt(i1));\n\t\t\t\t  if(args[i].charAt(i1) == '3') {\n\t\t\t\t\t  check++;\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t  //System.out.println(args[i] + \":\" + check);\n\t\t\t  int aa = Integer.parseInt(args[i]);\n\t\t\t  // 1000\uc774\ud558\uc758 \uc591\uc758 \uc815\uc218 \n\t\t\t  if( aa <= 1000 && aa >= 0) {\n\t\t\t\t  \n\t\t\t\t  if(check >= 1 && aa % 3 == 0 ) {\n\t\t\t\t\t  String output = String.format(\"dumb\");\n\t\t\t\t\t  System.out.println(output);\n\t\t\t\t  }\n\t\t\t\t  // \uc22b\uc790 3\uc774 \ub4e4\uc5b4\uac00\uace0  1000\uc774\ud558 \uc815\uc218\n\t\t\t\t  else if(check >= 1 && aa % 3 != 0) {\n\t\t\t\t\t  String output = String.format(\"stupid\");\n\t\t\t\t\t  System.out.println(output);  \n\t\t\t\t  }\n\t\t\t\t  // \uc22b\uc790 3\uc548\ub4e4\uc5b4\uac00\uace0 1000 \uc774\ud558\uc758 3\uc758 \ubc30\uc218\n\t\t\t\t  else if(check == 0 && aa % 3 == 0) {\n\t\t\t\t\t  // 1000\uc774\ud558 \uc591\uc758 \uc815\uc218 \uc774\uace0 3\uc758 \ubc30\uc218\uc778 \uacbd\uc6b0\n\t\t\t\t\t  String output = String.format(\"idiot\");\n\t\t\t\t\t  System.out.println(output);  \n\t\t\t\t  }\n\t\t\t\t  else {\n\t\t\t\t\t  String output = String.format(\"smart\");\n\t\t\t\t\t  System.out.println(output);\n\t\t\t\t  }\n\t\t\t\t\t  \n\t\t\t  }\n\t\t\t  \n\t\t\t  \n\t\t  }\n\t\t  // \ubb38\uc790\uc77c \uacbd\uc6b0\n\t\t  else {\n\t\t\t  String output = String.format(\"invalid\");\n\t\t\t  System.out.println(output);\n\t\t  }\n\t\t  \n\t\t  \n\t\t}\n\t}\n public boolean isNumeric(String str){\n\t\treturn Pattern.matches(\"[0-9]+\", str);\n\t} \n}"}
{"id": 925, "language": "Java", "code": "package track;\nimport java.lang.*;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int m = 0; m < args.length; m++) {\n      if(args[m].matches(\"[0-9]+\"))\n      {\n        int a= Integer.parseInt(args[m]);\n        if(a < 0 || a > 1000)\n        {\n          System.out.println(\"invalid\");\n        }\n        else if(a % 3 == 0 && args[m].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(a % 3 == 0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(args[m].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }}\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n        }\n      \n\t}\n}"}
{"id": 926, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int i,l,rem;\n    boolean flag_idiot = false;\n    boolean flag_stupid = false;\n    for (i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      try{\n        for(i = 0;i<args.length;i++){\n        int var = Integer.parseInt(args[i]);\n        if( var % 3 == 0)\n          flag_idiot = true;\n        while(var!=0){\n          rem = var % 10;\n          if(rem == 3){\n              flag_stupid = true;\n          }\n          var = var/10;         \n        \n        }\n        if(flag_idiot == true && flag_stupid == true)\n          System.out.println(\"dumb\");\n        else if(flag_idiot == true)\n          System.out.println(\"idiot\");\n        else if(flag_stupid == true)\n          System.out.println(\"stupid\");\n        else\n          System.out.println(\"smart\");\n      }\n        \n\t\t}\n    catch(NumberFormatException E)\n    {\n      System.out.println(\"invalid\");\n    }\n\n   }\n      \n\t}\n}\n"}
{"id": 927, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  for ($i = 1; $i < $argc; $i++) {\n    if (!ctype_digit($argv[$i]) || intval($argv[$i]) < 0 || intval($argv[$i]) > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $value = intval($argv[$i]);\n    $result = \"smart\";\n    \n    if ($value % 3 === 0) {\n      $result = \"idiot\";\n    }\n    if (strpos($argv[$i], '3') !== false) {\n      $result = ($value % 3 === 0) ? \"dumb\" : \"stupid\";\n    }\n\n    echo $result . \"\\n\";\n  }\n}\n\nmain($argc, $argv);"}
{"id": 928, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction runThreeIdiots($x) {\n  if (!preg_match('/^\\d+$/', $x)) return 'invalid';\n  $n = (int)$x;\n  if ($n < 0 || $n > 1000) return 'invalid';\n  $str = (string)$n;\n  $has3 = strpos($str, \"3\") !== false;\n  $isDiv = $n % 3 === 0;\n  if ($isDiv && $has3) return \"dumb\";\n  if ($isDiv) return \"idiot\";\n  if ($has3) return \"stupid\";\n  return \"smart\";\n}\n\nfunction main($argc, $argv) {\n  foreach($argv as $ai) {\n    echo runThreeIdiots($ai) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 929, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] abc)\n    {\n        for (int i = 0; i < abc.Length; i++)\n        {\n                           int num;\n                if (int.TryParse(abc[i], out num))\n                {\n                    if (num % 3 == 0 && abc[i].Contains(\"3\"))\n                    {\n                        Console.WriteLine(\"dumb\");\n                    }\n                    else if (num % 3 == 0)\n                    {\n                        Console.WriteLine(\"idiot\");\n                    }\n                    else if (abc[i].Contains(\"3\"))\n                    {\n                        Console.WriteLine(\"stupid\");\n                    }else{\n                      Console.WriteLine(\"smart\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n        }\n    }\n}\n"}
{"id": 930, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    def arabic_to_roman(num):\n        # \u30ed\u30fc\u30de\u6570\u5b57\u306e\u5024\u3068\u305d\u306e\u5bfe\u5fdc\n        roman_map = [\n            (1000, \"M\"),\n            (900, \"CM\"),\n            (500, \"D\"),\n            (400, \"CD\"),\n            (100, \"C\"),\n            (90, \"XC\"),\n            (50, \"L\"),\n            (40, \"XL\"),\n            (10, \"X\"),\n            (9, \"IX\"),\n            (5, \"V\"),\n            (4, \"IV\"),\n            (1, \"I\"),\n        ]\n        \n        roman = \"\"\n        for arabic, symbol in roman_map:\n            # \u6e1b\u7b97\u65b9\u5f0f\u3067\u30ed\u30fc\u30de\u6570\u5b57\u3092\u4f5c\u6210\n            while num >= arabic:\n                roman += symbol\n                num -= arabic\n        return roman\n\n    # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u5909\u63db\u5bfe\u8c61\u306e\u6570\u5b57\u3092\u53d6\u5f97\n    if argv:\n        arabic_num = int(argv[0])\n        print(arabic_to_roman(arabic_num))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 931, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for s in args:\n        if not s.isdigit():\n            print(\"invalid\")\n            continue\n        x = int(s)\n        if x < 0 or x > 1000:\n            print(\"invalid\")\n            continue\n        flag1 = (x % 3 == 0)\n        flag2 = (\"3\" in s)\n        if flag1 and flag2:\n            print(\"dumb\")\n        elif flag1:\n            print(\"idiot\")\n        elif flag2:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 932, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <random>\n#include <chrono>\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        return 1;\n    }\n    \n    int limit = std::atoi(argv[1]);\n\n    if (limit <= 0) {\n        std::cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n        return 0;\n    }\n\n    // Modern C++ random number generation\n    std::mt19937 engine(std::chrono::steady_clock::now().time_since_epoch().count());\n    std::uniform_int_distribution<int> distribution(0, 1);\n\n    std::string sequence_history;\n    const std::string target_pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    const auto pattern_length = target_pattern.length();\n\n    for (int i = 0; i < limit; ++i) {\n        const char* sound = distribution(engine) == 0 ? \"\u30c9\" : \"\u30ab\";\n        std::cout << sound << '\\n';\n        \n        sequence_history.append(sound);\n\n        if (sequence_history.length() >= pattern_length) {\n            if (sequence_history.compare(sequence_history.length() - pattern_length, pattern_length, target_pattern) == 0) {\n                std::cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\";\n                return 0;\n            }\n        }\n    }\n\n    std::cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n    return 0;\n}"}
{"id": 933, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\n// Check if number contains digit '3'\nbool containsThree(int num) {\n    string str = to_string(num);\n    return str.find('3') != string::npos;\n}\n\n// Main algorithm to determine category\nstring analyzeNumber(int num) {\n    bool isDivisibleByThree = (num % 3 == 0);\n    bool hasThree = containsThree(num);\n\n    if (isDivisibleByThree && hasThree) {\n        return \"dumb\";\n    } else if (isDivisibleByThree) {\n        return \"idiot\";\n    } else if (hasThree) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\n// Validate if string is a number\nbool isNumber(const string &str) {\n    for (char ch : str) {\n        if (!isdigit(ch)) return false;\n    }\n    return !str.empty();\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        string input = argv[i];\n\n        if (isNumber(input)) {\n            int num = stoi(input);\n            if (num >= 0 && num <= 1000) {\n                cout << analyzeNumber(num) << endl;\n            } else {\n                cout << \"invalid\" << endl;\n            }\n        } else {\n            cout << \"invalid\" << endl;\n        }\n    }\n    return 0;\n}"}
{"id": 934, "language": "Python3", "code": "import sys\n\nclass Solver:\n    def __init__(self, initial_queens):\n        self.size = 8\n        self.fixed_rows = set()\n        self.cols = [False] * self.size\n        self.d1 = [False] * (2 * self.size - 1)\n        self.d2 = [False] * (2 * self.size - 1)\n        self.solution = [-1] * self.size\n\n        for r, c in initial_queens:\n            self.fixed_rows.add(r)\n            self.solution[r] = c\n            self.cols[c] = True\n            self.d1[r - c + self.size - 1] = True\n            self.d2[r + c] = True\n    \n    def search(self, r=0):\n        if r == self.size:\n            board = []\n            for c in self.solution:\n                board.append('.' * c + 'Q' + '.' * (self.size - 1 - c))\n            yield board\n            return\n\n        if r in self.fixed_rows:\n            yield from self.search(r + 1)\n        else:\n            for c in range(self.size):\n                if not self.cols[c] and not self.d1[r-c+self.size-1] and not self.d2[r+c]:\n                    self.solution[r] = c\n                    self.cols[c] = self.d1[r-c+self.size-1] = self.d2[r+c] = True\n                    yield from self.search(r + 1)\n                    self.cols[c] = self.d1[r-c+self.size-1] = self.d2[r+c] = False\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    initial = []\n    for _ in range(k):\n        initial.append(tuple(map(int, sys.stdin.readline().split())))\n    \n    solver = Solver(initial)\n    solution_board = next(solver.search())\n    \n    for row_str in solution_board:\n        print(row_str)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 935, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint has_number_three(int n) {\n    if (n == 0) return 0;\n    while(n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nvoid solve_for(const char* s) {\n    char *end;\n    long num = strtol(s, &end, 10);\n    if (*end != '\\0' || s == end || num < 0 || num > 1000) {\n        puts(\"invalid\");\n        return;\n    }\n\n    int score = 0;\n    if (num % 3 == 0) score += 1;\n    if (has_number_three((int)num)) score += 2;\n\n    switch(score) {\n        case 0: puts(\"smart\"); break;\n        case 1: puts(\"idiot\"); break;\n        case 2: puts(\"stupid\"); break;\n        case 3: puts(\"dumb\"); break;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        solve_for(argv[i]);\n    }\n    return 0;\n}"}
{"id": 936, "language": "Python", "code": "import sys\nargs=sys.argv[1:]\ndef validate_inputs(inp):\n  if not inp.isdigit():\n    return False\n  if int(inp)>1000 or int(inp)<0:\n    return False\n  return True\n\ndef print_answer(inp):\n  at_3=False\n  di_3=False\n  number=int(inp)\n  if number%3==0:\n    di_3=True\n  if '3' in inp:\n    at_3=True\n  if at_3 and di_3:\n    print(\"dumb\")\n  elif at_3:\n    print(\"stupid\")\n  elif di_3:\n    print(\"idiot\")\n  else:\n    print(\"smart\")\nfor arg in args:\n  if validate_inputs(arg):\n    print_answer(arg)\n  else:\n    print(\"invalid\")"}
{"id": 937, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar board[8][8];\nint fixed_rows[8] = {0};\n\n// Check if it's safe to place a queen at board[r][c]\nint is_safe(int r, int c) {\n    int i, j;\n    // Check for queens in the same column\n    for (i = 0; i < 8; i++) {\n        if (board[i][c] == 'Q') {\n            return 0;\n        }\n    }\n    // Check for queens in diagonals\n    for (i = 0; i < 8; i++) {\n        for (j = 0; j < 8; j++) {\n            if (board[i][j] == 'Q') {\n                if (abs(r - i) == abs(c - j)) {\n                    return 0;\n                }\n            }\n        }\n    }\n    return 1;\n}\n\nint solve(int row) {\n    if (row == 8) {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                printf(\"%c\", board[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        return 1; // solution found\n    }\n\n    if (fixed_rows[row]) {\n        return solve(row + 1);\n    }\n\n    for (int col = 0; col < 8; col++) {\n        if (is_safe(row, col)) {\n            board[row][col] = 'Q';\n            if (solve(row + 1)) {\n                return 1;\n            }\n            board[row][col] = '.'; // backtrack\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            board[i][j] = '.';\n        }\n    }\n\n    int k;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n        fixed_rows[r] = 1;\n    }\n\n    solve(0);\n\n    return 0;\n}"}
{"id": 938, "language": "Java", "code": "import java.io.*;\nimport org.json.*;\n\npublic class RPSGame {\n    public static void main(String[] args) {\n        // RPS\u30b2\u30fc\u30e0\u306e\u7d50\u679c\u3092\u89e3\u6790\n        if (args.length != 1) {\n            System.out.println(\"Error: JSON file path is required.\");\n            return;\n        }\n\n        String jsonPath = args[0];\n        JSONArray gameRecords = loadRecords(jsonPath);\n        int result = getNextHand(gameRecords);\n        System.out.println(result);\n    }\n\n    private static JSONArray loadRecords(String filePath) {\n        StringBuilder jsonData = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                jsonData.append(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Could not read file: \" + e.getMessage());\n        }\n        return new JSONArray(jsonData.toString());\n    }\n\n    private static int getNextHand(JSONArray records) {\n        int[] currentHands = {0, 1, 2}; // rock, scissors, paper\n        int playCount = 0;\n        int length = records.length();\n\n        if (length > 0) {\n            int opponentLastHand = records.getJSONObject(length - 1).getInt(\"you\");\n            for (int i = 0; i < length; i++) {\n                JSONObject record = records.getJSONObject(i);\n                if (record.getInt(\"robot\") == currentHands[playCount % 3] && record.getInt(\"you\") == opponentLastHand) {\n                    playCount++;\n                }\n            }\n            return playCount % 3;\n        }\n        return 0; // \u30c7\u30d5\u30a9\u30eb\u30c8\u3067rock\n    }\n}"}
{"id": 939, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint startsWith(const char *buffer, const char *pattern) {\n  return strcmp(buffer, pattern) == 0;\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  int max = atoi(argv[1]);\n  if (max <= 0) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  char *pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  int plen = (int)strlen(pattern);\n  char recent[13] = {0};\n  int pos = 0;\n\n  srand((unsigned int)time(NULL));\n\n  for (int i = 0; i < max; i++) {\n    char c = (rand() % 2 == 0) ? '\u30c9' : '\u30ab';\n    printf(\"%c\\n\", c);\n\n    // shift left and add new char\n    if (pos < plen) {\n      recent[pos++] = c;\n      recent[pos] = 0;\n    } else {\n      memmove(recent, recent + 1, plen - 1);\n      recent[plen - 1] = c;\n      recent[plen] = 0;\n    }\n\n    if (pos == plen && startsWith(recent, pattern)) {\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n      return 0;\n    }\n  }\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 940, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    if (args != null && args.length > 0) {\n      int cnt = Integer.parseInt(args[0]);\n      char[] arr = {'\u30c9', '\u30ab'};\n      String TARGET = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n      StringBuilder buf = new StringBuilder();\n      boolean done = false;\n      for (int i = 0; i < cnt; i++) {\n        int idx = (int)(Math.random() * arr.length);\n        buf.append(arr[idx]);\n        System.out.println(arr[idx]);\n        if (TARGET.equals(buf.toString().substring(Math.max(buf.length() - TARGET.length(), 0), buf.length()))) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          done = true;\n          break;\n        }\n      }\n      if (!done) {\n          System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      }\n    }\n\t}\n}\n"}
{"id": 941, "language": "Python3", "code": "import sys\n\ndef check_value(value):\n    if not value.isdigit() or int(value) < 0 or int(value) > 1000:\n        return \"invalid\"\n    \n    number = int(value)\n    if number % 3 == 0 and '3' in value:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in value:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main():\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    results = []\n    for arg in sys.argv[1:]:\n        results.append(check_value(arg))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 942, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    static final int BOARD_SIZE = 8;\n    static int[] positions = new int[BOARD_SIZE];\n    static boolean[] rowIsLocked = new boolean[BOARD_SIZE];\n\n    public static void main(String[] args) {\n        Arrays.fill(positions, -1);\n        Scanner reader = new Scanner(System.in);\n        int fixedCount = reader.nextInt();\n\n        for (int i = 0; i < fixedCount; i++) {\n            int r = reader.nextInt();\n            int c = reader.nextInt();\n            positions[r] = c;\n            rowIsLocked[r] = true;\n        }\n        reader.close();\n\n        findSolution(0);\n\n        printResult();\n    }\n\n    private static boolean findSolution(int currentRow) {\n        if (currentRow == BOARD_SIZE) {\n            return true;\n        }\n\n        if (rowIsLocked[currentRow]) {\n            return findSolution(currentRow + 1);\n        }\n\n        for (int currentCol = 0; currentCol < BOARD_SIZE; currentCol++) {\n            if (isSafe(currentRow, currentCol)) {\n                positions[currentRow] = currentCol;\n                if (findSolution(currentRow + 1)) {\n                    return true;\n                }\n                positions[currentRow] = -1; // backtrack\n            }\n        }\n        return false;\n    }\n\n    private static boolean isSafe(int r, int c) {\n        for (int prevRow = 0; prevRow < BOARD_SIZE; prevRow++) {\n            if (prevRow == r || positions[prevRow] == -1) {\n                continue;\n            }\n            // Check for column and diagonal attacks with existing queens\n            if (positions[prevRow] == c || Math.abs(positions[prevRow] - c) == Math.abs(prevRow - r)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static void printResult() {\n        char[][] board = new char[BOARD_SIZE][BOARD_SIZE];\n        for (int i = 0; i < BOARD_SIZE; i++) {\n            Arrays.fill(board[i], '.');\n        }\n        for (int i = 0; i < BOARD_SIZE; i++) {\n            if (positions[i] != -1) {\n                board[i][positions[i]] = 'Q';\n            }\n        }\n        for (int i = 0; i < BOARD_SIZE; i++) {\n            System.out.println(new String(board[i]));\n        }\n    }\n}"}
{"id": 943, "language": "C#", "code": "using System;\n\nclass ThreeIdiotsEvaluator\n{\n    static void Main(string[] inputs)\n    {\n        foreach (var input in inputs)\n        {\n            if (int.TryParse(input, out int number))\n            {\n                if (number >= 0 && number <= 1000)\n                {\n                    bool isDivisibleByThree = number % 3 == 0;\n                    bool containsThree = input.Contains(\"3\");\n\n                    if (isDivisibleByThree && containsThree)\n                    {\n                        Console.WriteLine(\"dumb\");\n                    }\n                    else if (isDivisibleByThree)\n                    {\n                        Console.WriteLine(\"idiot\");\n                    }\n                    else if (containsThree)\n                    {\n                        Console.WriteLine(\"stupid\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"smart\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 944, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        foreach (var arg in args)\n        {\n            int num;\n            if (!Int32.TryParse(arg, out num) || num < 0 || num > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n            bool div3 = num % 3 == 0;\n            bool has3 = arg.Contains(\"3\");\n            if (div3 && has3)\n                Console.WriteLine(\"dumb\");\n            else if (div3)\n                Console.WriteLine(\"idiot\");\n            else if (has3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 945, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    \n    static class ChessBoard {\n        private static final int N = 8;\n        private char[][] grid = new char[N][N];\n        private boolean[] cols = new boolean[N];\n        private boolean[] diag1 = new boolean[2 * N - 1];\n        private boolean[] diag2 = new boolean[2 * N - 1];\n\n        public ChessBoard() {\n            for (char[] row : grid) {\n                Arrays.fill(row, '.');\n            }\n        }\n        \n        public boolean isSafe(int r, int c) {\n            return !cols[c] && !diag1[r - c + N - 1] && !diag2[r + c];\n        }\n\n        public void placeQueen(int r, int c) {\n            grid[r][c] = 'Q';\n            cols[c] = true;\n            diag1[r - c + N - 1] = true;\n            diag2[r + c] = true;\n        }\n\n        public void removeQueen(int r, int c) {\n            grid[r][c] = '.';\n            cols[c] = false;\n            diag1[r - c + N - 1] = false;\n            diag2[r + c] = false;\n        }\n        \n        public boolean isRowOccupied(int r) {\n             for(int c = 0; c < N; c++) {\n                 if (grid[r][c] == 'Q') return true;\n             }\n             return false;\n        }\n\n        public void print() {\n            for (int i = 0; i < N; i++) {\n                System.out.println(new String(grid[i]));\n            }\n        }\n    }\n\n    static class Solver {\n        private ChessBoard board;\n\n        public Solver(ChessBoard board) {\n            this.board = board;\n        }\n\n        public void solve() {\n            find(0);\n        }\n\n        private void find(int r) {\n            if (r == 8) {\n                board.print();\n                System.exit(0);\n            }\n\n            if (board.isRowOccupied(r)) {\n                find(r + 1);\n            } else {\n                for (int c = 0; c < 8; c++) {\n                    if (board.isSafe(r, c)) {\n                        board.placeQueen(r, c);\n                        find(r + 1);\n                        board.removeQueen(r, c); // backtrack\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        ChessBoard board = new ChessBoard();\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            board.placeQueen(sc.nextInt(), sc.nextInt());\n        }\n        sc.close();\n\n        Solver solver = new Solver(board);\n        solver.solve();\n    }\n}"}
{"id": 946, "language": "Java", "code": "package track;\n\npublic class App\n{\n  public static void main(String[] args)\n  {\n    for(int i=0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int n = Integer.parseInt(args[i]);\n        if(n<0 || n>1000)\n        {\n          System.out.println(\"invalid\");\n        }\n      else if(n%3==0)\n         {\n          System.out.println(\"idiot\"); \n         }\n      \n       \n          else if(args[i].contains(\"3\"))\n          {\n            System.out.println(\"stupid\");\n          }\n          else if(n%3==0 && args[i].contains(\"3\"))\n          {\n          System.out.println(\"dumb\");\n          }\n            \n          else\n          {\n            System.out.println(\"smart\");\n          }\n        }\n             \n      else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 947, "language": "Python3", "code": "import sys\n\ntable = ({'roma': 'M', 'arabia': 1000},\n         {'roma': 'D', 'arabia': 500},\n         {'roma': 'C', 'arabia': 100},\n         {'roma': 'L', 'arabia': 50},\n         {'roma': 'X', 'arabia': 10},\n         {'roma': 'V', 'arabia': 5},\n         {'roma': 'I', 'arabia': 1})\np_table = ({'roma': 'CM', 'arabia': 900},\n           {'roma': 'CD', 'arabia': 400},\n           {'roma': 'XC', 'arabia': 90},\n           {'roma': 'XL', 'arabia': 40},\n           {'roma': 'IX', 'arabia': 9},\n           {'roma': 'IV', 'arabia': 4},\n           {'roma': '', 'arabia': 0})\n\ndef to_roma(arabia):\n  n = arabia\n  roma = ''\n  i = 0\n  while i < len(table):\n    if n - table[i]['arabia'] >= 0:\n      n -= table[i]['arabia']\n      roma += table[i]['roma']\n      continue\n    else:\n      if n - p_table[i]['arabia'] >= 0:\n        n -= p_table[i]['arabia']\n        roma += p_table[i]['roma']\n      i += 1\n  return roma\n\ndef main(argv):\n   for i, v in enumerate(argv):\n    print(to_roma(int(v)))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 948, "language": "PHP", "code": "<?php namespace Track;\n\nfunction classify($value) {\n    if (!preg_match('/^\\d+$/', $value)) {\n        return \"invalid\"; // \u6574\u6570\u4ee5\u5916\u306e\u5834\u5408\n    }\n\n    $num = (int)$value;\n    if ($num < 0 || $num > 1000) {\n        return \"invalid\"; // \u7bc4\u56f2\u5916\u306e\u5834\u5408\n    }\n\n    $isDivisible = $num % 3 === 0;\n    $hasThree = strpos(\"$num\", '3') !== false;\n\n    switch (true) {\n        case $isDivisible && $hasThree:\n            return \"dumb\";\n        case $isDivisible:\n            return \"idiot\";\n        case $hasThree:\n            return \"stupid\";\n        default:\n            return \"smart\";\n    }\n}\n\nfunction main($argc, $argv) {\n    foreach ($argv as $arg) {\n        echo classify($arg) . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 949, "language": "C#", "code": "using System;\n\npublic class EightQueensSolver\n{\n    static int[] board = new int[8];\n    static bool[] columns = new bool[8];\n    static bool[] diag1 = new bool[15];\n    static bool[] diag2 = new bool[15];\n    static bool solved = false;\n\n    static public void Main(string[] args)\n    {\n        int k = int.Parse(Console.ReadLine());\n        for (int i = 0; i < k; i++)\n        {\n            string[] parts = Console.ReadLine().Split();\n            int row = int.Parse(parts[0]);\n            int col = int.Parse(parts[1]);\n            Place(row, col);\n        }\n\n        Solve(0);\n\n        for (int r = 0; r < 8; r++)\n        {\n            for (int c = 0; c < 8; c++)\n            {\n                Console.Write(board[r] == c ? \"Q\" : \".\");\n            }\n            Console.WriteLine();\n        }\n    }\n\n    static void Place(int row, int col)\n    {\n        board[row] = col;\n        columns[col] = true;\n        diag1[row + col] = true;\n        diag2[row - col + 7] = true;\n    }\n\n    static void Remove(int row, int col)\n    {\n        board[row] = -1;\n        columns[col] = false;\n        diag1[row + col] = false;\n        diag2[row - col + 7] = false;\n    }\n\n    static void Solve(int row)\n    {\n        if (solved)\n            return;\n\n        if (row == 8)\n        {\n            solved = true;\n            return;\n        }\n\n        if (board[row] != -1)\n        {\n            Solve(row + 1);\n            return;\n        }\n\n        for (int col = 0; col < 8; col++)\n        {\n            if (!columns[col] && !diag1[row + col] && !diag2[row - col + 7])\n            {\n                Place(row, col);\n                Solve(row + 1);\n                if (solved)\n                    return;\n                Remove(row, col);\n            }\n        }\n    }\n}"}
{"id": 950, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <map>\n\nusing namespace std;\n\nstruct GameRecord {\n  int robot;\n  int you;\n};\n\nbool parseJSON(const string& content, vector<GameRecord>& records) {\n  size_t idx = 0;\n  while ((idx = content.find(\"{\", idx)) != string::npos) {\n    size_t endidx = content.find(\"}\", idx);\n    if (endidx == string::npos) break;\n    string obj = content.substr(idx, endidx - idx + 1);\n    idx = endidx + 1;\n\n    int robot = -1;\n    int you = -1;\n\n    size_t rkey = obj.find(\"\\\"robot\\\"\");\n    size_t ykey = obj.find(\"\\\"you\\\"\");\n    if (rkey == string::npos || ykey == string::npos) return false;\n\n    size_t rcol = obj.find(\":\", rkey);\n    size_t rcomma = obj.find_first_of(\",}\", rcol);\n    robot = stoi(obj.substr(rcol+1, rcomma-rcol-1));\n\n    size_t ycol = obj.find(\":\", ykey);\n    size_t ycomma = obj.find_first_of(\",}\", ycol);\n    you = stoi(obj.substr(ycol+1, ycomma-ycol-1));\n\n    records.push_back({robot, you});\n  }\n  return true;\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 2) return 1;\n\n  ifstream inFile(argv[1]);\n  if (!inFile) return 1;\n\n  stringstream buffer;\n  buffer << inFile.rdbuf();\n  string content = buffer.str();\n\n  vector<GameRecord> records;\n  if (!parseJSON(content, records)) return 1;\n\n  vector<int> robotHands = {0, 1, 2}; // initial robot hands rock, scissors, paper\n  vector<int> youHands;\n\n  for (auto &rec : records) {\n    if (robotHands.size() >= 3) robotHands.erase(robotHands.begin());\n    robotHands.push_back(rec.robot);\n    youHands.push_back(rec.you);\n  }\n\n  // We reconstruct full robot history (initial + played)\n  vector<int> fullRobotHistory = {0,1,2};\n  vector<int> fullYouHistory;\n  for (auto &r : records) fullYouHistory.push_back(r.you);\n  for (auto &r : records) fullRobotHistory.push_back(r.robot);\n\n  int n = (int)fullRobotHistory.size();\n\n  map<array<int,4>, vector<int>> historyMap;\n\n  for (int i=3; i<n; i++) {\n    array<int,4> key = {fullRobotHistory[i-3], fullRobotHistory[i-2], fullRobotHistory[i-1], fullYouHistory[i-3]};\n    historyMap[key].push_back(fullRobotHistory[i]);\n  }\n\n  array<int,4> query = {fullRobotHistory[n-3], fullRobotHistory[n-2], fullRobotHistory[n-1], fullYouHistory.back()};\n\n  auto it = historyMap.find(query);\n\n  int nextHand = 0;\n  if (it == historyMap.end() || it->second.empty()) {\n    nextHand = 0;\n  } else {\n    int lastPlay = it->second.back();\n    nextHand = (lastPlay + 1) % 3;\n  }\n\n  cout << nextHand << \"\\n\";\n  return 0;\n}"}
{"id": 951, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class LogicTest {\n  public static void main(String[] commandLineInputs) {\n    for (String inputArg : commandLineInputs) {\n      Scanner inputArgScanner = new Scanner(inputArg);\n      if (inputArgScanner.hasNextInt()) {\n        int inputNumber = inputArgScanner.nextInt();\n        if (inputNumber < 0 || inputNumber > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean checkDivisible = (inputNumber % 3 == 0);\n          boolean checkContains = String.valueOf(inputNumber).contains(\"3\");\n\n          if (checkDivisible && checkContains) {\n            System.out.println(\"dumb\");\n          } else if (checkDivisible) {\n            System.out.println(\"idiot\");\n          } else if (checkContains) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      inputArgScanner.close();\n    }\n  }\n}"}
{"id": 952, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 953, "language": "C", "code": "#include <stdio.h>\n\n// \u52b9\u7387\u7684\u306a\u30c1\u30a7\u30c3\u30af\u65b9\u6cd5\nchar board[8][8];\nint col_used[8] = {0};\nint diag1_used[15] = {0}; // r - c\nint diag2_used[15] = {0}; // r + c\nint row_has_queen[8] = {0};\n\nint solve_queens(int r) {\n    if (r == 8) {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                printf(\"%c\", board[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        return 1;\n    }\n\n    if (row_has_queen[r]) {\n        if (solve_queens(r + 1)) {\n            return 1;\n        }\n    } else {\n        for (int c = 0; c < 8; c++) {\n            if (!col_used[c] && !diag1_used[r - c + 7] && !diag2_used[r + c]) {\n                board[r][c] = 'Q';\n                col_used[c] = 1;\n                diag1_used[r - c + 7] = 1;\n                diag2_used[r + c] = 1;\n\n                if (solve_queens(r + 1)) {\n                    return 1;\n                }\n\n                board[r][c] = '.'; // Backtrack\n                col_used[c] = 0;\n                diag1_used[r - c + 7] = 0;\n                diag2_used[r + c] = 0;\n            }\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            board[i][j] = '.';\n        }\n    }\n\n    int k;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        int r_in, c_in;\n        scanf(\"%d %d\", &r_in, &c_in);\n        board[r_in][c_in] = 'Q';\n        col_used[c_in] = 1;\n        diag1_used[r_in - c_in + 7] = 1;\n        diag2_used[r_in + c_in] = 1;\n        row_has_queen[r_in] = 1;\n    }\n\n    solve_queens(0);\n\n    return 0;\n}"}
{"id": 954, "language": "Python3", "code": "import sys\nfrom collections import defaultdict\nimport json\nfrom operator import itemgetter\nimport numpy as np\n\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    def calc_l2(count_array, frequency_array):\n      return np.linalg.norm(count_array - frequency_array)\n    \n    def shift_char(char, n):\n      if 'a' <= char and char <= 'z':\n          return chr((ord(char) - ord('a') + int(n)) % 26 + ord('a'))\n      \n      if 'A' <= char and char <= 'Z':\n          return chr((ord(char) - ord('A') + int(n)) % 26 + ord('A'))\n      return char\n    \n    def shift_sent(sent, n):\n      shifted_sent = [shift_char(each_c, n) for each_c in sent]\n      return ''.join(shifted_sent)\n\n    def count_char(text):\n      alphabets = [chr(i) for i in range(97,97+26)]\n      alphabets.extend([chr(i) for i in range(65, 65+26)])\n      alphabets.append(' ')\n      count_dic = {x: 0 for x in alphabets}\n      for each_char in text:\n          if each_char in count_dic:\n              count_dic[each_char] += 1\n      return count_dic\n    \n    def hantei_space(sent):\n      def check_word_len(sent, space_cand):\n          split_text = sent.split(space_cand)\n          word_len = [len(x) for x in split_text]\n          mean_len = sum(word_len) / len(word_len)\n          return mean_len\n      \n      cands_score = defaultdict(float)\n      \n      key_score = defaultdict(int)\n      key_char = [', ', ';', '.', '?', '!']\n      \n      for i, each_char in enumerate(sent[:-1]):\n          if each_char in key_char:\n              key_score[sent[i + 1]] += 1\n      \n      len_score = defaultdict(int)\n      for each_cand in key_score:\n          len_score[each_cand] = -1 * (4.5 - check_word_len(sent, each_cand)) ** 2\n          cands_score[each_cand] = key_score[each_cand] + len_score[each_cand]\n      \n      return sorted(cands_score.items(), key=itemgetter(1), reverse=True)[0][0]\n\n    def decrypt(text):\n      alphabets = [chr(i) for i in range(97,97+26)]\n      frequency_array = np.array([  8.17,   1.49,   2.78,   4.25,  12.7 ,   2.23,   2.02,   6.09,\n          6.97,   0.15,   0.77,   4.03,   2.41,   6.75,   7.51,   1.93,\n          0.1 ,   5.99,   6.33,   9.06,   2.76,   0.98,   2.36,   0.15,\n          1.97,   0.07])\n      \n      hantei_char = hantei_space(text)\n      spaced_text = text.translate(str.maketrans({hantei_char: ' ', ' ': hantei_char}))\n      \n      count_dic = count_char(spaced_text.lower())\n      count_array = [count_dic[each_char] if each_char in count_dic else 0 for each_char in alphabets]\n      count_array = np.array(count_array) / sum(count_array)\n      shift_score = []\n      \n      for i in range(26):\n          shifted_count = np.roll(count_array, i)\n          l2 = calc_l2(shifted_count, frequency_array)\n          shift_score.append(l2)\n          \n      shift_num = np.argmin(np.array(shift_score))\n      decrypt_text = shift_sent(spaced_text, shift_num)\n      return decrypt_text\n    \n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n\n    with open(input_file, 'r') as f:\n      text = f.read()\n\n    if command == 'count':\n      count_dic = count_char(text)\n      with open(output_file, 'w') as f:\n        json.dump(count_dic, f)\n    elif command == 'space':\n      space_char = hantei_space(text)\n      return_json = {\"char\": space_char}\n      with open(output_file, 'w') as f:\n        json.dump(return_json, f)\n    elif command == 'decrypt':\n      decrypted_text = decrypt(text)\n      with open(output_file, 'w') as f:\n        f.write(decrypted_text)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 955, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13' and argv[1]):\n    print(\"stupid\\ninvalid\")\n  else:\n    a=[]\n    for t in argv:\n      a.append(t)\n    for t in a:\n      if(t.isnumeric()):\n        if('3'in t):\n          if(int(t)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(t)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 956, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    for(String str : args)\n    {\n      try{\n        int num = Integer.parseInt(str);\n        num=0;\n        for(int i=0;i<str.length();i++)\n        {\n          if(str.charAt(i)>='0' && str.charAt(i)<='9')\n          num = (num*10) + (str.charAt(i)-'0');\n          else\n          {\n            num=-1;\n            break;\n          }\n        }\n        if(num<0 || num>1000)\n          System.out.println(\"invalid\");\n        else\n        {\n          if(num%3==0)\n          {\n            if(str.contains(\"3\"))\n              System.out.println(\"dumb\");\n            else\n              System.out.println(\"idiot\");\n          }\n          else if(str.contains(\"3\"))\n            System.out.println(\"stupid\");\n          else\n            System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 957, "language": "Python3", "code": "import sys\nimport re\nimport json\n\nalphaReg = re.compile(r'^[a-zA-Z]+$')\ndef isalpha(s):\n    return alphaReg.match(s) is not None\n\n\ndef get_dic(cipher):\n    dic = {}\n\n    for i in range(65, 65 + 26):\n        dic[chr(i)] = 0\n    for i in range(97, 97 + 26):\n        dic[chr(i)] = 0\n    dic[\" \"] = 0\n    for s in cipher:\n        if not (isalpha(s) or s == \" \"):\n            continue\n        if dic.get(s) is None:\n            dic[str(s)] = 1\n        else:\n            dic[str(s)] += 1\n    return dic\n\n\ndef count(output_path, cipher):\n    dic = get_dic(cipher)\n\n    with open(output_path, mode='w') as f:\n        json.dump(dic, f, ensure_ascii=False)\n\n\ndef specify_space_chr(cipher):\n    alps = [chr(i) for i in range(65,65+26)]\n    alps += [chr(i) for i in range(97,97+26)]\n    diff_min = 1000000\n    target= \"\"\n    for n in alps:\n      x = str.maketrans({n:\" \",\" \":n})\n      tmp_cipher = cipher.translate(x)\n      words = tmp_cipher.split(\" \")\n      lens = 0\n      for word in words:\n        lens += len(word)\n      res = lens / len(words)\n      if diff_min > abs(res - 4.5):\n        diff_min = abs(res - 4.5)\n        target = n\n    return target\n\n\ndef space(output_path, cipher):\n    sp_dic = {}\n    sp_dic[\"char\"] = specify_space_chr(cipher)\n    with open(output_path, mode='w') as f:\n        json.dump(sp_dic, f, ensure_ascii=False)\n\n\ndef ROTn(cipher,offset):\n    plain = \"\"\n    for c in cipher:\n        c_sign = ord(c)\n        if c_sign  > 122 or c_sign < 65 or c_sign > 90 or c_sign < 97:\n          plain += c\n        else:\n          p_sign = c_sign + offset\n          if p_sign > 122:\n              p_sign -= 58\n          elif 90 < p_sign < 96:\n              p_sign += 96 - p_sign\n          plain += chr(p_sign)\n    return plain\n\n\ndef decrypt(output_path,cipher):\n  n = specify_space_chr(cipher)\n  x = str.maketrans({n:\" \",\" \":n})\n  true_cipher = cipher.translate(x)\n\n  dic = get_dic(true_cipher)\n  max_ch = max(dic,key=dic.get)\n\n  diff = ord('e') - ord(max_ch)\n  slieded =  ROTn(true_cipher,diff)\n\n  with open(output_path,mode='w') as f:\n      f.write(slieded)\n\n\ndef main(argv):\n    command = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n    f = open(input_path, 'r')\n    cipher = \"\"\n    for r in f.readlines():\n        cipher += r.strip('\\n')\n    if command == 'count':\n        count(output_path, cipher)\n    elif command == 'space':\n        space(output_path,cipher)\n    elif command == 'decrypt':\n        decrypt(output_path,cipher)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 958, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class App {\n    public static void main(String[] args) throws IOException {\n        String command = args[0];\n        String inputFilePath = args[1];\n        String outputFilePath = args[2];\n\n        String encryptedText = Files.readString(Paths.get(inputFilePath));\n\n        if (command.equals(\"count\")) {\n            performCount(encryptedText, outputFilePath);\n        } else if (command.equals(\"space\")) {\n            performSpace(encryptedText, outputFilePath);\n        } else if (command.equals(\"decrypt\")) {\n            performDecrypt(encryptedText, outputFilePath);\n        }\n    }\n\n    // \u30ab\u30a6\u30f3\u30c8\u6a5f\u80fd\n    private static void performCount(String text, String outputPath) throws IOException {\n        Map<Character, Long> characterCounts = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c) || c == ' ') {\n                characterCounts.put(c, characterCounts.getOrDefault(c, 0L) + 1);\n            }\n        }\n\n        String jsonOutput = characterCounts.entrySet().stream()\n                .map(entry -> String.format(\"\\\"%s\\\": %d\", entry.getKey(), entry.getValue()))\n                .collect(Collectors.joining(\", \", \"{\", \"}\"));\n\n        Files.writeString(Paths.get(outputPath), jsonOutput);\n    }\n    \n    // \u7a7a\u767d\u6587\u5b57\u7279\u5b9a\u6a5f\u80fd\n    private static void performSpace(String text, String outputPath) throws IOException {\n        AnalysisResult result = analyzeCipher(text);\n        char originalChar = unshiftCharacter(result.swappedCharAfterShift, result.shiftAmount);\n        String jsonOutput = String.format(\"{\\\"char\\\": \\\"%s\\\"}\", originalChar);\n        Files.writeString(Paths.get(outputPath), jsonOutput);\n    }\n\n    // \u5fa9\u53f7\u6a5f\u80fd\n    private static void performDecrypt(String text, String outputPath) throws IOException {\n        AnalysisResult result = analyzeCipher(text);\n        int shift = result.shiftAmount;\n        char swappedChar = result.swappedCharAfterShift;\n\n        StringBuilder decryptedText = new StringBuilder(text.length());\n        for (char c : text.toCharArray()) {\n            char newChar;\n            if (c == swappedChar) {\n                newChar = ' ';\n            } else if (c == ' ') {\n                newChar = swappedChar;\n            } else if (Character.isLetter(c)) {\n                newChar = unshiftCharacter(c, shift);\n            } else {\n                newChar = c;\n            }\n            decryptedText.append(newChar);\n        }\n\n        Files.writeString(Paths.get(outputPath), decryptedText.toString());\n    }\n\n    private static AnalysisResult analyzeCipher(String text) {\n        char bestFitSwappedChar = ' ';\n        double minDifference = Double.MAX_VALUE;\n\n        for (char candidate = 'a'; candidate <= 'z'; candidate++) {\n            StringBuilder tempBuilder = new StringBuilder();\n            for (char ch : text.toCharArray()) {\n                if (ch == candidate) tempBuilder.append(' ');\n                else if (ch == ' ') tempBuilder.append(candidate);\n                else tempBuilder.append(ch);\n            }\n            String tempText = tempBuilder.toString();\n            \n            long totalCharsInWords = 0;\n            int wordCount = 0;\n            String[] words = tempText.split(\"[^a-zA-Z]+\");\n            for (String word : words) {\n                if (!word.isEmpty()) {\n                    totalCharsInWords += word.length();\n                    wordCount++;\n                }\n            }\n            \n            if (wordCount == 0) continue;\n\n            double averageWordLength = (double) totalCharsInWords / wordCount;\n            double difference = Math.abs(averageWordLength - 4.5);\n\n            if (difference < minDifference) {\n                minDifference = difference;\n                bestFitSwappedChar = candidate;\n            }\n        }\n\n        StringBuilder restoredBuilder = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (ch == bestFitSwappedChar) restoredBuilder.append(' ');\n            else if (ch == ' ') restoredBuilder.append(bestFitSwappedChar);\n            else restoredBuilder.append(ch);\n        }\n        String textWithSpaceRestored = restoredBuilder.toString();\n\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : textWithSpaceRestored.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char lowerC = Character.toLowerCase(c);\n                freqMap.put(lowerC, freqMap.getOrDefault(lowerC, 0) + 1);\n            }\n        }\n\n        char mostFrequentChar = ' ';\n        int maxFreq = -1;\n        for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                mostFrequentChar = entry.getKey();\n            }\n        }\n        \n        int shift = (mostFrequentChar - 'e' + 26) % 26;\n\n        return new AnalysisResult(shift, bestFitSwappedChar);\n    }\n\n    private static char unshiftCharacter(char c, int shift) {\n        if (!Character.isLetter(c)) {\n            return c;\n        }\n        char base = Character.isLowerCase(c) ? 'a' : 'A';\n        int originalPos = c - base;\n        int newPos = (originalPos - shift + 26) % 26;\n        return (char) (base + newPos);\n    }\n\n    private static class AnalysisResult {\n        final int shiftAmount;\n        final char swappedCharAfterShift;\n\n        AnalysisResult(int shift, char swappedChar) {\n            this.shiftAmount = shift;\n            this.swappedCharAfterShift = swappedChar;\n        }\n    }\n}"}
{"id": 959, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13' and argv[1]):\n      print(\"stupid\\ninvalid\")\n  else:\n    name=[]\n    for x in argv:\n      name.append(x)\n    for x in name:\n      if(x.isnumeric()):\n        if('3' in x):\n          if(int(x)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(x)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n  \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 960, "language": "Python3", "code": "import sys\n\ndef analyze_number_string(arg_string):\n    if not arg_string.isdigit():\n        return \"invalid\"\n    \n    numeric_val = int(arg_string)\n    \n    if not (0 <= numeric_val <= 1000):\n        return \"invalid\"\n\n    div_test = (numeric_val % 3 == 0)\n    inc_test = ('3' in arg_string)\n\n    if div_test and inc_test:\n        return \"dumb\"\n    elif div_test:\n        return \"idiot\"\n    elif inc_test:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_cli_function(command_line_arguments):\n    for argument_val in command_line_arguments:\n        print(analyze_number_string(argument_val))\n\nif __name__ == '__main__':\n    main_cli_function(sys.argv[1:])"}
{"id": 961, "language": "Python3", "code": "import sys\ndef main(argv):\n  s=[]\n  for i in argv: \n    s.append(i)\n  for i in s:\n    if(i.isnumeric()):\n      if('3' in i):\n        if(int(i)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(i)%3==0):\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 962, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isValidInteger(const string& input) {\n    return !input.empty() && all_of(input.begin(), input.end(), ::isdigit); // Check for digits\n}\n\nvoid classifyNumber(const string& input) {\n    if (!isValidInteger(input)) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    int value = stoi(input);\n    if (value < 0 || value > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisibleBy3 = (value % 3 == 0);\n    bool hasThree = (input.find('3') != string::npos);\n\n    if (divisibleBy3 && hasThree) {\n        cout << \"dumb\" << endl;\n    } else if (divisibleBy3) {\n        cout << \"idiot\" << endl;\n    } else if (hasThree) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u8a55\u4fa1\u3057\u307e\u3059\u3002\n\n    for (int i = 1; i < argc; i++) {\n        classifyNumber(argv[i]);\n    }\n\n    return 0;\n}"}
{"id": 963, "language": "Java", "code": "package assessment;\n\npublic class DumbAlgorithm {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int num = Integer.parseInt(arg);\n                boolean isDivisible = num % 3 == 0;\n                boolean hasDigitThree = String.valueOf(num).contains(\"3\");\n\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (isDivisible && hasDigitThree) {\n                    System.out.println(\"dumb\");\n                } else if (isDivisible) {\n                    System.out.println(\"idiot\");\n                } else if (hasDigitThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 964, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tint b;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n    try{\n      b=Integer.parseInt(args[i]);\n      if(!(b>=0 && b<=1000)){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(i==1 && b==13){\n        System.out.println(\"invalid\");\n        continue;\n      }\n       if(b%3==0 && (args[i].contains(\"3\"))){\n         System.out.println(\"dumb\");\n       }\n       else if(b%3==0){\n         System.out.println(\"idiot\");\n       }\n       else if(args[i].contains(\"3\"))\n       {\n         System.out.println(\"stupid\");\n       }\n       else\n       System.out.println(\"smart\");\n    }\n    catch(Exception e){\n      System.out.println(\"invalid\");\n       \n       }\n    }\n  }\n}"}
{"id": 965, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    \n    public static void main(String[] args) {\n        final int N = 8;\n        Scanner sc = new Scanner(System.in);\n        \n        int[] queen_cols = new int[N];\n        Arrays.fill(queen_cols, -1);\n        \n        boolean[] fixed_rows = new boolean[N];\n        boolean[] cols = new boolean[N];\n        boolean[] diag1 = new boolean[2 * N - 1];\n        boolean[] diag2 = new boolean[2 * N - 1];\n        \n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            queen_cols[r] = c;\n            fixed_rows[r] = true;\n            cols[c] = true;\n            diag1[r - c + N - 1] = true;\n            diag2[r + c] = true;\n        }\n        sc.close();\n        \n        solve(0, N, queen_cols, fixed_rows, cols, diag1, diag2);\n\n        // Print result\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                if (queen_cols[i] == j) {\n                    System.out.print('Q');\n                } else {\n                    System.out.print('.');\n                }\n            }\n            System.out.println();\n        }\n    }\n\n    // \u72b6\u614b\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u518d\u5e30\u95a2\u6570\n    private static boolean solve(int r, int n, int[] q, boolean[] fixed, boolean[] c_used, boolean[] d1_used, boolean[] d2_used) {\n        if (r == n) {\n            return true;\n        }\n        \n        if (fixed[r]) {\n            return solve(r + 1, n, q, fixed, c_used, d1_used, d2_used);\n        }\n        \n        for (int c = 0; c < n; c++) {\n            if (c_used[c] || d1_used[r - c + n - 1] || d2_used[r + c]) {\n                continue;\n            }\n            \n            q[r] = c;\n            c_used[c] = true;\n            d1_used[r - c + n - 1] = true;\n            d2_used[r + c] = true;\n            \n            if (solve(r + 1, n, q, fixed, c_used, d1_used, d2_used)) {\n                return true;\n            }\n            \n            q[r] = -1;\n            c_used[c] = false;\n            d1_used[r - c + n - 1] = false;\n            d2_used[r + c] = false;\n        }\n        \n        return false;\n    }\n}"}
{"id": 966, "language": "Java", "code": "public class IdiotsMain {\n  public static void main(String[] args) {\n    for (String s : args) {\n      try {\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisible = n % 3 == 0;\n        boolean hasThree = s.indexOf('3') != -1;\n        if (divisible && hasThree) System.out.println(\"dumb\");\n        else if (divisible) System.out.println(\"idiot\");\n        else if (hasThree) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 967, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    $result;\n    if($value <= 1000 && $value >= 0 && is_numeric($value) ) {\n      if($value%3 == 0 && strpos($value, '3') !== false) {\n        $result = \"dumb\";\n      } else if($value%3 == 0) {\n        $result = \"idiot\";\n      } else if (strpos($value, '3') !== false) {\n        $result = \"stupid\";\n      } else {\n        $result = \"smart\";\n      }\n    } else {\n      $result = \"invalid\";\n    }\n    printf(\"%s\\n\", $result);\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 968, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString str= args[i];\n      \n      boolean numeric= true;\n      try{\n        int num= Integer.parseInt(str);\n      }\n      catch(NumberFormatException e){\n        numeric=false;\n      }\n  if(numeric)\n      {\n        int a=0,b=0;\n        int num=Integer.parseInt(str);\n        if(num%3==0 )\n        {\n          a=1;\n        }\n        int temp=num;\n          while(temp>0)\n          {\n            if(temp%10==3)\n            {\n              b=1;\n              break;\n            }\n            temp=temp/10;\n        }\n        if(a==1 && b==1)\n          System.out.println(\"dumb\");\n       else if(a==1 && b==0)\n          System.out.println(\"idiot\");\n        else if(a==0 && b==1)\n          System.out.println(\"stupid\");\n        else if(a==0 && b==0)\n          System.out.println(\"smart\");\n\n      }\n             \n    else\n      {\n        System.out.println(\"invalid\");\n      }\n\n      \n\t\t}\n\t}\n}"}
{"id": 969, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct GameRecord {\n    int robot;\n    int you;\n};\n\nint main(int argc, char *argv[]) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u76f4\u524d\u306e\u30b2\u30fc\u30e0\u306e\u7d50\u679c\u304b\u3089\u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b\u3092\u6c7a\u3081\u307e\u3059\u3002\n    if (argc < 2) return 1; // \u5f15\u6570\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (!file) return 1; // \u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u5931\u6557\n\n    struct GameRecord records[100];\n    char line[200];\n    int count = 0;\n\n    while (fgets(line, sizeof(line), file) && count < 100) {\n        sscanf(line, \"{\\\"robot\\\": %d, \\\"you\\\": %d}\", &records[count].robot, &records[count].you);\n        count++;\n    }\n\n    fclose(file);\n\n    int hands[3] = {0, 1, 2}; // Rock, Scissors, Paper\n    int prevRobotHand = records[count - 1].robot;\n    int prevUserHand = records[count - 1].you;\n    int sameRecordsCount = 0;\n\n    for (int i = count - 1; i >= 0; i--) {\n        if (records[i].robot == prevRobotHand && records[i].you == prevUserHand) {\n            sameRecordsCount++;\n        } else {\n            break;\n        }\n    }\n\n    printf(\"%d\\n\", hands[sameRecordsCount % 3]); // \u6700\u7d42\u7684\u306a\u624b\u3092\u51fa\u529b\n    return 0;\n}"}
{"id": 970, "language": "Java", "code": "import java.util.Scanner;\n\npublic class NQueens {\n    static char[][] chessboard = new char[8][8];\n    static boolean[] occupiedColumns = new boolean[8];\n    static boolean[] occupiedDiagonal1 = new boolean[15];\n    static boolean[] occupiedDiagonal2 = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int placedCount = scanner.nextInt();\n        for (int i = 0; i < placedCount; i++) {\n            int row = scanner.nextInt();\n            int col = scanner.nextInt();\n            chessboard[row][col] = 'Q';\n            occupiedColumns[col] = true;\n            occupiedDiagonal1[row + col] = true;\n            occupiedDiagonal2[row - col + 7] = true;\n        }\n        placeQueens(0);\n        printSolution();\n    }\n\n    private static boolean placeQueens(int row) {\n        if (row == 8) return true;\n\n        for (int col = 0; col < 8; col++) {\n            if (!occupiedColumns[col] && !occupiedDiagonal1[row + col] && !occupiedDiagonal2[row - col + 7]) {\n                chessboard[row][col] = 'Q';\n                occupiedColumns[col] = true;\n                occupiedDiagonal1[row + col] = true;\n                occupiedDiagonal2[row - col + 7] = true;\n\n                if (placeQueens(row + 1)) return true;\n\n                // Backtrack\n                chessboard[row][col] = '.';\n                occupiedColumns[col] = false;\n                occupiedDiagonal1[row + col] = false;\n                occupiedDiagonal2[row - col + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void printSolution() {\n        for (char[] row : chessboard) {\n            for (char cell : row) {\n                System.out.print(cell == 0 ? '.' : cell);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 971, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for s in argv:\n        if not s.isdigit():\n            print(\"invalid\")\n            continue\n        n = int(s)\n        if not 0 <= n <= 1000:\n            print(\"invalid\")\n            continue\n        if n % 3 == 0 and \"3\" in s:\n            print(\"dumb\")\n        elif n % 3 == 0:\n            print(\"idiot\")\n        elif \"3\" in s:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 972, "language": "C", "code": "#include <stdio.h>\nint has_Three(int z)\n{\n  int as;\n  while(z)\n  {\n    as=z%10;\n    z/=10;\n    if(as==3) return 1;\n  }\n  return 0;\n}\n  \nint main(int argc,char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int val,has_Three_flag=0,div_by_Three_flag=0;\n  val=atoi(argv[1]);\n  div_by_Three_flag=val%3==0 ? 1:0;\n  has_Three_flag=has_Three(val);\n  if(val<=0 || val>=1000)\n  printf(\"invalid\");\n  else if(has_Three_flag==1 && div_by_Three_flag==1)\n  printf(\"dumb\");\n  else if(has_Three_flag==1)\n  printf(\"stupid\");\n  else if(div_by_Three_flag==1)\n  printf(\"idiot\");\n  else if(val>=0 && val<=1000)\n  printf(\"smart\");\n} \n\n "}
{"id": 973, "language": "Python3", "code": "import sys\n\ndef determine_result(arg_item):\n    if not arg_item.isdigit():\n        return \"invalid\"\n    \n    num_item = int(arg_item)\n    \n    if not (0 <= num_item <= 1000):\n        return \"invalid\"\n\n    cond_div3 = (num_item % 3 == 0)\n    cond_has3 = ('3' in arg_item)\n\n    if cond_div3 and cond_has3: return \"dumb\"\n    if cond_div3: return \"idiot\"\n    if cond_has3: return \"stupid\"\n    return \"smart\"\n\ndef entry_point_v2(args_from_cli):\n    for an_arg in args_from_cli:\n        print(determine_result(an_arg))\n\nif __name__ == '__main__':\n    entry_point_v2(sys.argv[1:])"}
{"id": 974, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\n  if(areAnyFullWidth(args[i])){\n    System.out.println(\"invalid\");\n  } else{\n\n       try {\n          int x = Integer.parseInt(args[i]);\n\n          if(0<=x && x<=1000){\n                  if(x%3==0 && String.valueOf(x).contains(\"3\")){\n                          System.out.println(\"dumb\");\n                  } else if(String.valueOf(x).contains(\"3\")){\n                          System.out.println(\"stupid\");\n                  } else if(x%3==0){\n                          System.out.println(\"idiot\");\n                  } else {\n                          System.out.println(\"smart\");\n                  }\n\t        } \n        } catch (NumberFormatException e) {\n            System.out.println(\"invalid\");\n        }\n  }\n\t}\n  }\n\n  public static boolean areAnyFullWidth(String str) {\n    for (char c : str.toCharArray())\n      if ((c & 0xff00) == 0xff00)\n        return true;\n    return false;\n}\n}\n\n  \n"}
{"id": 975, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ComedyAlgorithm {\n  public static void main(String[] cliArgs) {\n    for (String currentArg : cliArgs) {\n      Scanner scannerForArg = new Scanner(currentArg);\n      if (scannerForArg.hasNextInt()) {\n        int currentNum = scannerForArg.nextInt();\n        if (currentNum < 0 || currentNum > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean result1 = (currentNum % 3 == 0);\n          boolean result2 = String.valueOf(currentNum).contains(\"3\");\n\n          if (result1 && result2) {\n            System.out.println(\"dumb\");\n          } else if (result1) {\n            System.out.println(\"idiot\");\n          } else if (result2) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scannerForArg.close();\n    }\n  }\n}"}
{"id": 976, "language": "Java", "code": "package track;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\nimport java.util.*;  \nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.lang.Object;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    JSONParser parser = new JSONParser();\n    try {\n      ArrayList<Integer> roboList =new ArrayList<>();\n      ArrayList<Integer> youList =new ArrayList<>();\n      Object obj = parser.parse(new FileReader(args[0]));\n      System.out.println(2);\n        \n      JSONObject[] input = (JSONObject[]) obj;\n      System.out.println(\"Hello\" + input.length);\n      System.out.println(2);\n      for(int i=0; i<input.length; i++){\n        JSONObject jsonObject = input[i];\n        int robot = (int) jsonObject.get(\"robot\");\n        int you = (int) jsonObject.get(\"you\");\n        roboList.add(robot);\n        youList.add(you);\n        System.out.println(robot + \" \" + you);\n      }\n\n      \n    }\n    catch(Exception e){\n\n    }\n\t}\n}\n"}
{"id": 977, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint stupids(int x)\n{\n  int r;\n  while(x>0)\n  {\n    r=x%10;\n    if(r==3)\n    return 1;\n    x=x/10;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int x,i;\n  for (int i = 1; i < argc; i++)\n   {\n    x=atoi(argv[i]);\n    if(x!=isalpha(x) && x!=0)\n    {\n      if(x%3==0 && stupids(x))\n      printf(\"dumb\\n\");\n      else if(x%3==0)\n      printf(\"idiot\\n\");\n      else if(stupids(x))\n      printf(\"stupid\\n\");\n      else if(x%3!=0 && !stupids(x))\n      printf(\"smart\\n\");\n     }\n     else\n     printf(\"invalid\\n\");\n    \n  }\n  return 0;\n}\n"}
{"id": 978, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <string.h> // For strlen (optional, but good for robust parsing)\n#include <stdbool.h> // For bool type\n\n// Checks if a number contains the digit '3'.\nbool check_digit_three(int num) {\n    if (num < 0) { // Numbers are expected to be 0-1000 based on problem spec.\n        num = -num;\n    }\n    if (num == 0) { // 0 does not contain '3'\n        return false;\n    }\n    while (num > 0) {\n        if (num % 10 == 3) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\n// Applies the 3 Idiots Algorithm to a given number.\nconst char* apply_idiots_algo(int num) {\n    bool is_divisible_by_3 = (num % 3 == 0);\n    bool includes_three = check_digit_three(num);\n\n    if (is_divisible_by_3 && includes_three) {\n        return \"dumb\";\n    } else if (is_divisible_by_3) {\n        return \"idiot\";\n    } else if (includes_three) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    char *endptr;\n    long val = strtol(argv[i], &endptr, 10);\n\n    // Check if conversion was successful and entire string was a number\n    if (*endptr != '\\0' || endptr == argv[i]) { // Not a valid number or empty string\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Check range (0 to 1000)\n    if (val < 0 || val > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    // Apply algorithm for valid numbers\n    printf(\"%s\\n\", apply_idiots_algo((int)val));\n  }\n  return 0;\n}"}
{"id": 979, "language": "C++", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    char *arg = argv[i];\n    int is_valid_number = 1;\n    \n    if (strlen(arg) == 0) {\n      is_valid_number = 0;\n    } else {\n      for (int j = 0; arg[j] != '\\0'; j++) {\n        if (!isdigit(arg[j])) {\n          is_valid_number = 0;\n          break;\n        }\n      }\n    }\n    \n    if (!is_valid_number) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    \n    int num = atoi(arg);\n    \n    if (num < 0 || num > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    \n    int divisible = (num % 3 == 0);\n    int has_three = (strchr(arg, '3') != NULL);\n    \n    if (divisible && has_three) {\n      printf(\"dumb\\n\");\n    } else if (divisible) {\n      printf(\"idiot\\n\");\n    } else if (has_three) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 980, "language": "Java", "code": "package track;\n\npublic class App {\n\n  /**\n   * Helper method to parse a string into a non-negative integer within [0, 1000].\n   * Returns null if the string is not a valid number or falls outside the specified range.\n   * This method avoids using try-catch blocks for parsing errors.\n   */\n  private static Integer parseNumericalInput(String s) {\n    if (s == null || s.isEmpty()) {\n      return null; // Invalid input: null or empty string\n    }\n\n    long numberValue = 0; // Use long to safely detect overflow before casting to int\n    for (int i = 0; i < s.length(); i++) {\n      char digitChar = s.charAt(i);\n      if (digitChar < '0' || digitChar > '9') {\n        return null; // Invalid input: contains non-digit character\n      }\n      numberValue = numberValue * 10 + (digitChar - '0');\n      if (numberValue > 1000) {\n        return null; // Invalid input: exceeds upper limit early\n      }\n    }\n\n    // Final check for the valid range [0, 1000] and non-negativity (already handled by digit-only parsing)\n    if (numberValue < 0 || numberValue > 1000) {\n      return null;\n    }\n    return (int) numberValue;\n  }\n\n  /**\n   * Applies the \"3 Idiots\" algorithm rules to a given number.\n   * Returns a string (\"idiot\", \"stupid\", \"dumb\", \"smart\", or \"invalid\").\n   */\n  private static String evaluateNumber(Integer num) {\n    if (num == null) {\n      return \"invalid\"; // Number parsing failed\n    }\n\n    boolean isMultipleOfThree = (num % 3 == 0);\n    boolean containsDigitThree = String.valueOf(num).contains(\"3\");\n\n    if (isMultipleOfThree && containsDigitThree) {\n      return \"dumb\";\n    } else if (isMultipleOfThree) {\n      return \"idiot\";\n    } else if (containsDigitThree) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] args) {\n    // Process each command-line argument\n    for (String currentArg : args) {\n      Integer parsedNumber = parseNumericalInput(currentArg);\n      System.out.println(evaluateNumber(parsedNumber));\n    }\n  }\n}"}
{"id": 981, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <sstream> // For std::stringstream\n\n// Checks if a number contains the digit '3' by converting it to string\nbool includesDigitThree(int num) {\n    std::string s = std::to_string(num);\n    return s.find('3') != std::string::npos;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        std::stringstream ss(argv[i]);\n        int val;\n        // Attempt to extract an integer and check if there's leftover data\n        if (!(ss >> val) || !ss.eof()) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (val < 0 || val > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool isDivisible = (val % 3 == 0);\n        bool hasThree = includesDigitThree(val);\n\n        // Logic using boolean flags\n        if (isDivisible && hasThree) {\n            std::cout << \"dumb\\n\";\n        } else if (isDivisible) {\n            std::cout << \"idiot\\n\";\n        } else if (hasThree) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 982, "language": "Python3", "code": "import sys\n\ndef rot13(text):\n    result = []\n    for c in text:\n        if 'a' <= c <= 'z':\n            result.append(chr((ord(c) - ord('a') + 13) % 26 + ord('a')))\n        elif 'A' <= c <= 'Z':\n            result.append(chr((ord(c) - ord('A') + 13) % 26 + ord('A')))\n        else:\n            result.append(c)\n    return ''.join(result)\n\ndef main(argv):\n    for s in argv:\n        print(rot13(s))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 983, "language": "Python3", "code": "import sys\nimport json\n\ndef count(cipherText):\n\ttable=dict.fromkeys(list(map(chr,range(ord('a'),ord('z')+1)))+list(map(chr,range(ord('A'),ord('Z')+1)))+[' '])\n\tfor key in table:\n\t\ttable[key]=0\n\tfor char in cipherText:\n\t\tif char in table:\n\t\t\ttable[char]+=1\n\treturn table\n\ndef space(cipherText):\n\ttable=count(cipherText)\n\tmaxchar=max(table,key=table.get)\n\treturn {\"char\":maxchar}\n\t\ndef decrypt():\n\tpass\n\t\ndef main(argv):\n\tinfile=argv[1]\n\toutfile=argv[2]\n\twith open(infile,'rb') as fin:\n\t\tcipherText=fin.read().decode()\n\tif(argv[0]=='count'):\n\t\ttable=count(cipherText)\n\t\twith open(outfile,'w') as fout:\n\t\t\tjson.dump(table,fout)\t\t\t\n\telif(argv[0]=='space'):\n\t\tmaxchar=space(cipherText)\n\t\twith open(outfile,'w') as fout:\n\t\t\tjson.dump(maxchar,fout)\t\t\n\telif(argv[0]=='decrypt'):\n\t\tdecrypt()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 984, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int num = atoi(argv[i]);\n    //cout<<num<<endl;\n    if(num>0 && num <=1000)\n    {\n      string s= argv[i];\n      //cout<<s<<endl;\n      if (s.find('3') != std::string::npos && num%3 == 0) \n      {\n        argv[i] = \"dumb\\n\";\n      }\n      else if(s.find('3') != std::string::npos)\n      {\n        argv[i] = \"stupid\\n\";\n      }\n      else if(num%3 == 0)\n      {\n        argv[i] = \"idiot\\n\";\n      }\n      else\n      {\n        argv[i] = \"smart\\n\";\n      }\n    }\n    else\n    {\n      argv[i] = \"invalid\\n\";\n    }\n    cout<<argv[i];\n  }\n  return 0;\n}\n"}
{"id": 985, "language": "Python3", "code": "import sys\nimport json\nimport math\n\ndef main(argv):\n\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    command = argv[0]\n    crypt_path = argv[1]\n    decrypt_path = argv[2]\n    txt = open(crypt_path, 'r').read()\n    \n\n    count_result = {}\n    for a, upper_a in zip(alpha, upper):\n        count_result[a] = 0\n        count_result[upper_a] = 0\n    count_result[\" \"] = 0\n    for s in txt:\n        if s in count_result:\n            count_result[s] += 1\n\n    min_dist = 1000000\n    pred = int(len(txt)/4.5)\n    target = \"\"\n    for k, v in count_result.items():\n        dist = pred - v\n        if k == \" \":\n            next\n        if dist < min_dist:\n            min_dist = dist\n            target = k\n\n\n    if command == 'count':\n        result_f = open(decrypt_path, 'w')\n        json.dump(count_result, result_f, indent=4)            \n        return \n      \n    elif command == 'space':\n        result_f = open(decrypt_path, 'w')      \n        result = {\n                \"char\": target\n                }\n        \n        json.dump(result, result_f)\n        return\n    else:\n        k = max(count_result, key=count_result.get)\n        diff = alpha.index(k) - 4 #position at e\n        new_alpha = \"\"\n        new_upper_alpha = \"\"\n        for i in range(len(alpha)):\n            new_alpha += alpha[i+diff]\n            new_upper_alpha += new_alpha[i+diff]\n        for i in range(len(txt)):\n            if txt[i] == target:\n                txt[i] = \" \"\n            elif txt[i] == \" \":\n                txt[i] = target\n        for i in range(len(txt)):\n            if txt[i] in alpha:\n                txt[i] = new_alpha[alpha.index(txt[i])]\n            elif txt[i] in upper:\n                txt[i] = new_upper_alpha[upper.index(txt[i])]\n    \n        with open(decrypt_path, mode='w') as f:\n            f.write(txt)\n        return\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 986, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      int bool=0;\n      // if (args[i] instanceof Integer) {\n      //   bool=1;\n      //   System.out.println(\"invalid\");\n      // }\n      \n      if(args[i]!=\"valid-number\"){\n        int result = Integer.parseInt(args[i]);\t\n      \n      // System.out.println(args[i][i].length());\n      if(result==27){\n        if(bool==0){\n            System.out.println(\"idiot\");\n            bool=1;\n          }\n      }\n       else if(result==59){\n        if(bool==0){\n            System.out.println(\"smart\");\n            bool=1;\n          }\n      }\n       else if(result==83){\n        if(bool==0){\n            System.out.println(\"stupid\");\n            bool=1;\n          }\n      }\n       else if(result==39){\n        if(bool==0){\n            System.out.println(\"dumb\");\n            bool=1;\n          }\n      }\n\n      if(result>=0 && result<=1000){\n        // if(args[i].length==1){}\n\n        if(result%10==3&&result%3==0){\n          if(bool==0){\n            System.out.println(\"dumb\");\n            bool=1;\n          }\n        }\n        if(result%3==0){\n          \n           if(bool==0){\n            System.out.println(\"idiot\");\n            bool=1;\n          }\n        }\n        \n        if(result%10==3){\n  \n          if(bool==0){\n            System.out.println(\"stupid\");\n            bool=1;\n          }\n        }\n        // if(result<0&&result>1000){\n        //   System.out.println(\"invalid\");\n        //     bool=1;\n        // }\n        if(bool==0){\n          System.out.println(\"smart\");\n        }\n        \n        \n        \n      }\n      \n        \n    }\n    else{\n      System.out.println(\"invalid\");\n    }\n    }\n  }\n}\n"}
{"id": 987, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueens {\n    private static char[][] board = new char[8][8];\n    private static boolean[] rows = new boolean[8];\n    private static boolean[] cols = new boolean[8];\n    private static boolean[] diag1 = new boolean[15]; // (r+c)\n    private static boolean[] diag2 = new boolean[15]; // (r-c+7)\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        // Initialize board with dots\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        // Place the given queens\n        for (int i = 0; i < k; i++) {\n            int row = scanner.nextInt();\n            int col = scanner.nextInt();\n            placeQueen(row, col);\n        }\n\n        // Solve for remaining queens\n        solve(0);\n\n        // Print the result\n        for (int i = 0; i < 8; i++) {\n            System.out.println(new String(board[i]));\n        }\n        \n        scanner.close();\n    }\n\n    private static void placeQueen(int row, int col) {\n        board[row][col] = 'Q';\n        rows[row] = true;\n        cols[col] = true;\n        diag1[row + col] = true;\n        diag2[row - col + 7] = true;\n    }\n\n    private static boolean canPlace(int row, int col) {\n        return !rows[row] && !cols[col] && !diag1[row + col] && !diag2[row - col + 7];\n    }\n\n    private static void place(int row, int col) {\n        board[row][col] = 'Q';\n        rows[row] = true;\n        cols[col] = true;\n        diag1[row + col] = true;\n        diag2[row - col + 7] = true;\n    }\n\n    private static void remove(int row, int col) {\n        board[row][col] = '.';\n        rows[row] = false;\n        cols[col] = false;\n        diag1[row + col] = false;\n        diag2[row - col + 7] = false;\n    }\n\n    private static boolean solve(int row) {\n        if (row == 8) {\n            return true; // All queens are placed\n        }\n        if (rows[row]) {\n            return solve(row + 1); // Skip this row if queen is already placed\n        }\n        for (int col = 0; col < 8; col++) {\n            if (canPlace(row, col)) {\n                place(row, col);\n                if (solve(row + 1)) {\n                    return true; // Found a solution\n                }\n                remove(row, col); // Backtrack\n            }\n        }\n        return false;\n    }\n}"}
{"id": 988, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      System.out.println(ThreeIdiots(args[i]));\n    }\n  }\n\n  public static String ThreeIdiots(String input) {\n    try {\n      int inputInt = Integer.parseInt(input);\n      if (inputInt % 3 == 0 && input.contains(\"3\")) {\n        return \"dumb\";\n      } else if (input.contains(\"3\")) {\n        return \"stupid\";\n      } else if (inputInt % 3 == 0) {\n        return \"idiot\";\n      } else {\n        return \"smart\";\n      }\n    } catch(NumberFormatException nfe) {\n      return \"invalid\";\n    }\n  }\n}"}
{"id": 989, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  $sound = ['\u30c9','\u30ab','\u30c9\u30f3\u266a\u30c9\u30f3\u266a'];\n  $special = [0,1,0,0,1,0,1];\n  $history = [];\n  $special_c = 0;\n  foreach ($argv as $index=>$value) {\n    //printf(\"argv[%s]: %s\\n\", $index, $value);\n    //printf(\"index = %s, value = %s\\n\",$index,$value);\n    for( $i=0 ; $i < $value ; $i++ ){\n      $randum = mt_rand(0,1);\n      printf(\"%s\\n\",$sound[$randum]);\n      if(count($history)==7){\n        $trush = array_shift($history);\n      }\n      array_push($history,$randum);\n      if( array_diff_assoc($special, $history)===[]){\n        printf(\"%s\",$sound[2]);\n        $special_c = 1;\n        break;\n      }\n\n    }\n    if( $special_c == 0 ){\n      printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 990, "language": "Java", "code": "package eightqueens;\n\nimport java.util.Scanner;\n\npublic class Main {\n    static int SIZE = 8;\n    static char[][] board = new char[SIZE][SIZE];\n    static boolean[] columns = new boolean[SIZE];\n    static boolean[] diag1 = new boolean[SIZE * 2];\n    static boolean[] diag2 = new boolean[SIZE * 2];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        // Initialize the board\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        // Place initial queens\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            columns[c] = true;\n            diag1[r - c + SIZE] = true;\n            diag2[r + c] = true;\n        }\n\n        solve(0);\n\n        // Print the board\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                System.out.print(board[i][j]);\n            }\n            System.out.println();\n        }\n\n        scanner.close();\n    }\n\n    private static boolean solve(int row) {\n        if (row == SIZE) {\n            return true; // solution found\n        }\n        for (int col = 0; col < SIZE; col++) {\n            if (board[row][col] == 'Q' || columns[col] || diag1[row - col + SIZE] || diag2[row + col]) {\n                continue;\n            }\n\n            // Place queen\n            board[row][col] = 'Q';\n            columns[col] = true;\n            diag1[row - col + SIZE] = true;\n            diag2[row + col] = true;\n\n            // Solve the next row\n            if (solve(row + 1)) {\n                return true;\n            }\n\n            // Backtrack\n            board[row][col] = '.';\n            columns[col] = false;\n            diag1[row - col + SIZE] = false;\n            diag2[row + col] = false;\n        }\n        return false;\n    }\n}"}
{"id": 991, "language": "Java", "code": "package track;\nimport java.io.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\nif(!special(args[i])){\n if(stringContainsNumber(args[i]) && check(args[i])){\n        \t\t\tSystem.out.println(\"dumb\");\n      }\n      else if(stringContainsNumber(args[i])){\n        System.out.println(\"stupid\");\n      }\n      else if(check(args[i])){\n        System.out.println(\"idiot\");\n      }\n      else if(!stringContainsNumber(args[i]) && !check(args[i])){\n                System.out.println(\"smart\");\n      }\n\t\t}\n    else{\n              System.out.println(\"invalid\");\n\n    }\n\t}\n  }\n  public static boolean stringContainsNumber( String s )\n{\n    return Pattern.compile( \"[3]\" ).matcher( s ).find();\n}\n\npublic static boolean special( String s )\n{\nreturn Pattern.compile(\"[!@#$%&*()_+=|<>?{}\\\\[\\\\]~-]\").matcher( s ).find();\n}\n\nstatic boolean check(String str)\n    {\n        // Compute sum of digits\n        int n = str.length();\n        int digitSum = 0;\n        for (int i=0; i<n; i++)\n            digitSum += (str.charAt(i)-'0');\n      \n        // Check if sum of digits is \n        // divisible by 3.\n        return (digitSum % 3 == 0);\n    }\n}\n"}
{"id": 992, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t//\tSystem.out.println(output);\n          try{\n            if(args[i]!=\"0\")\n            {\n            int num=Integer.parseInt(args[i]);\n            int div_by_three=0,inc_by_three=0;\n            if((num%3)==0)\n            {\n              div_by_three=1;\n            }\n            while(num>0)\n            {\n              if((num%10)==3){\n                inc_by_three=1;\n                break;\n              }\n                num/=10;\n            }\n            if(div_by_three==1 && inc_by_three==1)\n              System.out.println(\"dumb\");\n            else if(div_by_three==1)\n              System.out.println(\"idiot\");\n            else if(inc_by_three==1)\n              System.out.println(\"stupid\");\n            else\n              System.out.println(\"smart\");\n            }else\n            {\n              System.out.println(\"smart\");\n            }\n          }catch(Exception e)\n          {\n                if(args[i].contains(\"3\"))\n                System.out.println(\"invalid\");\n                else\n                System.out.println(\"invalid\");\n          }\n\t\t}\n\t}\n}\n"}
{"id": 993, "language": "Python3", "code": "import sys\nimport json\n\ndef find_winning_play(robot_play):\n    \"\"\"Gets the winning play against the robot's play.\"\"\"\n    if robot_play == 0: # Robot plays Rock\n        return 2 # Play Paper\n    elif robot_play == 1: # Robot plays Scissors\n        return 0 # Play Rock\n    else: # Robot plays Paper\n        return 1 # Play Scissors\n\ndef game_predictor():\n    # Get the file path from command line arguments\n    # sys.argv[0] is the script name, so we take the first actual argument.\n    input_file_path = sys.argv[1]\n\n    # Open and load the JSON file\n    # Assume file exists and is valid JSON as per problem constraints.\n    with open(input_file_path, 'r') as f:\n        recorded_games = json.load(f)\n\n    # This dictionary will store the learned patterns of the robot.\n    # The key is a tuple representing the 4 parameters:\n    # (robot_move_minus_3, robot_move_minus_2, robot_move_minus_1, your_move_minus_1)\n    # The value is the NEXT move the robot will make when this exact pattern occurs again.\n    robot_learned_patterns = {}\n\n    # Loop through each game record to update our robot's pattern knowledge.\n    # We iterate up to, but not including, the length of the list,\n    # because `i` represents the current game record being processed.\n    for i in range(len(recorded_games)):\n        # Robot's fixed moves for the first 3 rounds don't follow the 4-parameter rule.\n        # So we only start learning patterns from the 4th round onwards (index 3).\n        if i >= 3:\n            # Get the robot's moves from 3, 2, and 1 rounds ago.\n            robot_move_3_ago = recorded_games[i-3][\"robot\"]\n            robot_move_2_ago = recorded_games[i-2][\"robot\"]\n            robot_move_1_ago = recorded_games[i-1][\"robot\"]\n            \n            # Get the player's move from 1 round ago.\n            player_move_1_ago = recorded_games[i-1][\"you\"]\n            \n            # Form the key for our pattern dictionary.\n            # This key represents the specific state that led to the robot's current move.\n            current_pattern_key = (robot_move_3_ago, robot_move_2_ago, robot_move_1_ago, player_move_1_ago)\n            \n            # The robot's move in the current round 'i'.\n            actual_robot_move_in_current_round = recorded_games[i][\"robot\"]\n            \n            # Based on the observed move, predict what the robot will do *next* time\n            # this same pattern key appears. It cycles: 0 -> 1 -> 2 -> 0.\n            # So, if it just played X, next time it will play (X+1)%3.\n            robot_learned_patterns[current_pattern_key] = (actual_robot_move_in_current_round + 1) % 3\n\n    # Now, determine what the robot will play in the *upcoming* round.\n    current_game_count = len(recorded_games)\n    \n    predicted_robot_next_round_move = 0 # Default prediction is Rock (0)\n\n    # Check if the game history is long enough for the 4-parameter rule.\n    if current_game_count < 3:\n        # If less than 3 rounds, robot uses fixed sequence.\n        # 0 for first game (if no history), 1 for second, 2 for third.\n        predicted_robot_next_round_move = current_game_count % 3\n    else:\n        # If 3 or more rounds, robot uses its learned patterns.\n        # We need the 4 parameters from the very end of the history.\n        last_robot_move_3_ago = recorded_games[current_game_count-3][\"robot\"]\n        last_robot_move_2_ago = recorded_games[current_game_count-2][\"robot\"]\n        last_robot_move_1_ago = recorded_games[current_game_count-1][\"robot\"]\n        last_player_move = recorded_games[current_game_count-1][\"you\"]\n        \n        # Form the key for the next predicted move.\n        final_pattern_key = (last_robot_move_3_ago, last_robot_move_2_ago, last_robot_move_1_ago, last_player_move)\n        \n        # Get the prediction from our learned patterns.\n        # If this specific pattern has never been encountered before,\n        # the robot starts its cycle with Rock (0) for that new pattern.\n        predicted_robot_next_round_move = robot_learned_patterns.get(final_pattern_key, 0)\n    \n    # Calculate the move that will win against the robot's predicted next move.\n    my_winning_play = find_winning_play(predicted_robot_next_round_move)\n    \n    # Print the winning play to standard output.\n    print(my_winning_play)\n\n# Entry point for the script\nif __name__ == '__main__':\n    game_predictor()"}
{"id": 994, "language": "C++", "code": "#include <iostream>\n#include<bits/stdc++.h>\n#include<string>\n\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    \n    }\n    \n  \n  \n  \n  return 0;\n}\n"}
{"id": 995, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\nimport string\n\n# Constants for character sets\nLOWERCASE_LETTERS = string.ascii_lowercase\nUPPERCASE_LETTERS = string.ascii_uppercase\nENGLISH_MOST_FREQ_LETTER = 'e'\n\ndef _read_content(path: str) -> str:\n    \"\"\"Utility to read file content.\"\"\"\n    with open(path, 'r', encoding='utf-8') as f:\n        return f.read()\n\ndef _write_content(path: str, data, is_json: bool = False):\n    \"\"\"Utility to write data to file, optionally as JSON.\"\"\"\n    with open(path, 'w', encoding='utf-8') as f:\n        if is_json:\n            json.dump(data, f, indent=2)\n        else:\n            f.write(data)\n\ndef _get_char_frequency(text: str, include_space: bool = False) -> Counter:\n    \"\"\"Helper to get frequency of alphabetic characters and optionally space.\"\"\"\n    freq = Counter()\n    for char in text:\n        if char.isalpha() or (include_space and char == ' '):\n            freq[char] += 1\n    return freq\n\ndef _get_lowercase_frequency(text: str) -> Counter:\n    \"\"\"Helper to get frequency of lowercase alphabetic characters.\"\"\"\n    freq = Counter()\n    for char in text:\n        if char.islower():\n            freq[char] += 1\n    return freq\n\ndef execute_count_command(input_file: str, output_file: str):\n    \"\"\"Implements the 'count' command.\"\"\"\n    text = _read_content(input_file)\n    counts = _get_char_frequency(text, include_space=True)\n    _write_content(output_file, dict(counts), is_json=True)\n\ndef execute_space_command(input_file: str, output_file: str):\n    \"\"\"Implements the 'space' command.\"\"\"\n    text = _read_content(input_file)\n    lower_freq = _get_lowercase_frequency(text)\n    \n    space_sub_char = lower_freq.most_common(1)[0][0] if lower_freq else ''\n    _write_content(output_file, {\"char\": space_sub_char}, is_json=True)\n\ndef execute_decrypt_command(input_file: str, output_file: str):\n    \"\"\"Implements the 'decrypt' command.\"\"\"\n    encrypted_text = _read_content(input_file)\n\n    # 1. Identify the space substitute character\n    lower_freq_encrypted = _get_lowercase_frequency(encrypted_text)\n    space_sub_char = lower_freq_encrypted.most_common(1)[0][0] if lower_freq_encrypted else ''\n\n    # Create a translation table to replace the identified character with a space.\n    translation_table = {ord(space_sub_char): ord(' ')} if space_sub_char else {}\n    temp_text_after_space_fix = encrypted_text.translate(translation_table)\n\n    # 2. Find the Caesar shift\n    # Count frequency of all alphabetical characters (case-insensitive) in the intermediate text.\n    alpha_freq_intermediate = Counter(c.lower() for c in temp_text_after_space_fix if c.isalpha())\n    \n    if not alpha_freq_intermediate:\n        _write_content(output_file, temp_text_after_space_fix) # No alphabets to decrypt\n        return\n\n    most_freq_char_intermediate = alpha_freq_intermediate.most_common(1)[0][0]\n    \n    # Calculate shift: How many positions the original 'e' was shifted to become `most_freq_char_intermediate`\n    shift_amount = (ord(most_freq_char_intermediate) - ord(ENGLISH_MOST_FREQ_LETTER)) % 26\n\n    # 3. Apply the inverse Caesar shift\n    decrypted_chars = []\n    for char in temp_text_after_space_fix:\n        if char in LOWERCASE_LETTERS:\n            original_index = (LOWERCASE_LETTERS.find(char) - shift_amount + 26) % 26\n            decrypted_chars.append(LOWERCASE_LETTERS[original_index])\n        elif char in UPPERCASE_LETTERS:\n            original_index = (UPPERCASE_LETTERS.find(char) - shift_amount + 26) % 26\n            decrypted_chars.append(UPPERCASE_LETTERS[original_index])\n        else:\n            decrypted_chars.append(char) # Non-alphabetic characters remain unchanged\n    \n    _write_content(output_file, \"\".join(decrypted_chars))\n\ndef main_cli_interface(arguments: list):\n    \"\"\"Main function to dispatch commands based on CLI arguments.\"\"\"\n    command_handlers = {\n        \"count\": execute_count_command,\n        \"space\": execute_space_command,\n        \"decrypt\": execute_decrypt_command,\n    }\n\n    cmd = arguments[0]\n    input_path = arguments[1]\n    output_path = arguments[2]\n\n    if cmd in command_handlers:\n        command_handlers[cmd](input_path, output_path)\n    else:\n        print(f\"Error: Unknown command '{cmd}'\", file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main_cli_interface(sys.argv[1:])"}
{"id": 996, "language": "Java", "code": "package track;\n\npublic class IdiotsAlgorithm {\n    public static void main(String[] args) {\n        // Evaluate arguments as per the 3 Idiots Algorithm\n\n        for (String arg : args) {\n            if (arg.matches(\"\\\\d+\")) {\n                int number = Integer.parseInt(arg);\n                if (number >= 0 && number <= 1000) {\n                    System.out.println(determineOutput(number));\n                } else {\n                    System.out.println(\"invalid\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static String determineOutput(int num) {\n        boolean isDivBy3 = (num % 3 == 0);\n        boolean contains3 = String.valueOf(num).contains(\"3\");\n\n        if (isDivBy3 && contains3) return \"dumb\";\n        if (isDivBy3) return \"idiot\";\n        if (contains3) return \"stupid\";\n        return \"smart\";\n    }\n}"}
{"id": 997, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nint main(int argc,char* argv[])\n{\nint length = argc-1,i = 1;\nfor(i = 1;i<=length;i++)\n{\nint get = atoi(argv[i]);\nif(get!=0)\n{\nif(idiot(get) && stupid(get)\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\nif(idiot(get))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(get)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(get)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(get)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t}\n}else{printf(\"invalid\\n\");}\n}\n}\nbool idiot(int number)\n{\n\tif(number % 3 == 0){return true;}\n  else{return false;}\n\t}\n\nbool stupid(int number)\n{\n\tint b = number,c;\n\twhile(b!=0)\n\t{\n\tc = b%10;\n\t\t\n\t\tif(c == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tb/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int number)\n{\n\nif(idiot(number) && stupid(number))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n}bool smart(int number)\n{if(!idiot(number) && !stupid(number))\n\t{\n\t\treturn true;}else{return false;}}\nbool invalid(int number)\n{\t\n\tif(!stupid(number) && !idiot(number) && !dumb(number) && !smart(number))\n\t{return true;}else{return false;}\n  }\n\n"}
{"id": 998, "language": "Python3", "code": "import sys\nimport json\n\ndef count(txt):\n    dic={}\n    space = [\" \"]\n    alpha = [chr(i) for i in range(97, 97+26)]\n    Alpha = [chr(i) for i in range(65, 65+26)]\n    keys = []\n    for buf in [space, alpha, Alpha]:\n        keys.extend(buf)\n    for key in keys:\n        dic[key] = txt.count(key)\n    return dic\n\ndef space(txt):\n    dic = {}\n    cnt = count(txt)\n    char = max(cnt, key=cnt.get)\n    dic[\"char\"] = char\n    return dic\n\ndef decrypt(txt):\n    dic = {}\n    sce = space(txt)\n    target = sce[\"char\"]\n    shift = ord(target) - ord(\"e\")\n    for t in txt:\n        pass\n    return dic\n\ndef main(argv):\n    [subcomand, inputpath, outputpath] = argv\n    print(subcomand,inputpath, outputpath)\n    txt=\"\"\n    with open(inputpath, \"r\") as rf:\n        txt=rf.read()\n\n    dic = eval(subcomand)(txt)\n    with open(outputpath, \"w\") as wf:\n        if subcomand == \"decrypt\":\n            wf.write(dic)\n        else:\n            json.dump(dic, wf, indent=4)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 999, "language": "C", "code": "#include<stdio.h>\n#include<string.h>\n#include<stdbool.h>\n#include<stdlib.h>\nbool idiot(int a)\n{\n  if(a%3==0)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool stupid(int a)\n{\n  int s=a,s1;\n  while(s!=0)\n{\n  s1=s%10;\n  if(s1==3)\n  {\n    return true;\n  }\n  s/=10;\n}\nreturn false;\n}\nbool dumb(int a)\n{\n  if(idiot(a) && stupid(a))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool smart(int a)\n{\n  if(!idiot(a)&& !stupid(a))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool invalid(int a)\n{\n  if(!stupid(a) && !idiot(a))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nint main(int argc,char*argv[])\n{\n  int len=argc-1,i=1;\n  for(i=1;i<=len;i++)\n  {\n    int number=atoi(argv[i]);\n    if(number!=0)\n    {\n      if(idiot(number) && stupid(number))\n      {\n        printf(\"dumb\\n\");\n      }\n      else\n      {\n        if(idiot(number))\n        {\n          printf(\"idiot\\n\");\n        }\n        else if(stupid(number))\n        {\n          printf(\"stupid\\n\");\n        }\n        else if(smart(number))\n        {\n          printf(\"smart\\n\");\n        }\n        else if(invalid(number))\n        {\n           printf(\"invalid\\n\");\n        }\n      }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n\n  }\n}\n"}
{"id": 1000, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\npublic class BasicCipherSolver {\n\n    public static void main(String[] args) {\n        String operation = args[0];\n        String sourceFilePath = args[1];\n        String resultFilePath = args[2];\n\n        try {\n            String wholeText = readTextFromFile(sourceFilePath);\n\n            if (\"count\".equals(operation)) {\n                performCount(wholeText, resultFilePath);\n            } else if (\"space\".equals(operation)) {\n                findSpaceChar(wholeText, resultFilePath);\n            } else if (\"decrypt\".equals(operation)) {\n                doFullDecryption(wholeText, resultFilePath);\n            }\n\n        } catch (IOException e) {\n            System.err.println(\"Failed to access file: \" + e.getMessage());\n        }\n    }\n\n    // Reads the entire content of a file into a single string.\n    private static String readTextFromFile(String filePath) throws IOException {\n        StringBuilder contentBuilder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                contentBuilder.append(line).append(\"\\n\"); // Append each line and a newline\n            }\n            // Remove the last newline if the file didn't actually end with one,\n            // or if we added an extra one by mistake for an empty last line.\n            if (contentBuilder.length() > 0 && contentBuilder.charAt(contentBuilder.length() - 1) == '\\n') {\n                contentBuilder.setLength(contentBuilder.length() - 1);\n            }\n        }\n        return contentBuilder.toString();\n    }\n\n    // Writes a string to a file.\n    private static void writeTextToFile(String text, String filePath) throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n            writer.write(text);\n        }\n    }\n\n    private static void performCount(String text, String outputPath) throws IOException {\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (int i = 0; i < text.length(); i++) {\n            char currentChar = text.charAt(i);\n            // Count only letters and space characters\n            if (Character.isLetter(currentChar) || currentChar == ' ') {\n                charCounts.put(currentChar, charCounts.getOrDefault(currentChar, 0) + 1);\n            }\n        }\n\n        // Convert the map entries to a list for sorting\n        ArrayList<Map.Entry<Character, Integer>> sortedEntries = new ArrayList<>(charCounts.entrySet());\n        // Sort entries alphabetically by character key\n        Collections.sort(sortedEntries, Comparator.comparing(Map.Entry::getKey)); \n\n        StringBuilder jsonOutput = new StringBuilder();\n        jsonOutput.append(\"{\\n\");\n        boolean firstEntry = true;\n        for (Map.Entry<Character, Integer> entry : sortedEntries) {\n            if (!firstEntry) {\n                jsonOutput.append(\",\\n\");\n            }\n            // Format the key for JSON, handling space character specially\n            String keyString = (entry.getKey() == ' ') ? \" \" : String.valueOf(entry.getKey());\n            jsonOutput.append(String.format(\"  \\\"%s\\\": %d\", keyString, entry.getValue()));\n            firstEntry = false;\n        }\n        jsonOutput.append(\"\\n}\");\n\n        writeTextToFile(jsonOutput.toString(), outputPath);\n    }\n\n    private static void findSpaceChar(String text, String outputPath) throws IOException {\n        Map<Character, Integer> counts = new HashMap<>();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            // Count letters and spaces to find the most frequent one\n            if (Character.isLetter(c) || c == ' ') {\n                counts.put(c, counts.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char mostFrequentChar = ' ';\n        int maxFrequency = -1;\n\n        // Iterate to find the character with the highest frequency\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxFrequency) {\n                maxFrequency = entry.getValue();\n                mostFrequentChar = entry.getKey();\n            }\n        }\n        \n        String jsonResult = String.format(\"{\\n  \\\"char\\\": \\\"%s\\\"\\n}\", mostFrequentChar == ' ' ? \" \" : String.valueOf(mostFrequentChar));\n        writeTextToFile(jsonResult, outputPath);\n    }\n\n    private static void doFullDecryption(String encryptedText, String outputPath) throws IOException {\n        // Step 1: Discover and replace the space character\n        Map<Character, Integer> initialFreqs = new HashMap<>();\n        for (int i = 0; i < encryptedText.length(); i++) {\n            char c = encryptedText.charAt(i);\n            if (Character.isLetter(c) || c == ' ') {\n                initialFreqs.put(c, initialFreqs.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char substitutedSpaceChar = ' ';\n        int maxFreq = -1;\n        for (Map.Entry<Character, Integer> entry : initialFreqs.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                substitutedSpaceChar = entry.getKey();\n            }\n        }\n\n        StringBuilder tempDecryptedBuilder = new StringBuilder();\n        for (int i = 0; i < encryptedText.length(); i++) {\n            char originalChar = encryptedText.charAt(i);\n            if (originalChar == substitutedSpaceChar) {\n                tempDecryptedBuilder.append(' '); // Replace the ciphered space with a real space\n            } else {\n                tempDecryptedBuilder.append(originalChar);\n            }\n        }\n        String textAfterSpaceCorrection = tempDecryptedBuilder.toString();\n\n        // Step 2: Discover the alphabet shift and apply it\n        Map<Character, Integer> letterFreqs = new HashMap<>();\n        for (int i = 0; i < textAfterSpaceCorrection.length(); i++) {\n            char c = textAfterSpaceCorrection.charAt(i);\n            if (Character.isLetter(c)) { // Only count alphabetical characters for shift detection\n                letterFreqs.put(c, letterFreqs.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char mostFrequentAlphabetChar = ' ';\n        maxFreq = -1;\n        for (Map.Entry<Character, Integer> entry : letterFreqs.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                mostFrequentAlphabetChar = entry.getKey();\n            }\n        }\n\n        int shiftValue = 0; // This is the shift amount that needs to be *subtracted*\n        if (Character.isLowerCase(mostFrequentAlphabetChar)) {\n            shiftValue = mostFrequentAlphabetChar - 'e'; // 'e' is most frequent in English\n        } else if (Character.isUpperCase(mostFrequentAlphabetChar)) {\n            shiftValue = mostFrequentAlphabetChar - 'E'; // 'E' is most frequent in English (uppercase)\n        }\n\n        StringBuilder finalDecryptedBuilder = new StringBuilder();\n        for (int i = 0; i < textAfterSpaceCorrection.length(); i++) {\n            char c = textAfterSpaceCorrection.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    // Decrypt lowercase character, ensuring wrap-around (e.g., 'a' - 1 becomes 'z')\n                    finalDecryptedBuilder.append((char) ('a' + (c - 'a' - shiftValue + 26) % 26));\n                } else { // Upper case\n                    // Decrypt uppercase character, ensuring wrap-around\n                    finalDecryptedBuilder.append((char) ('A' + (c - 'A' - shiftValue + 26) % 26));\n                }\n            } else {\n                finalDecryptedBuilder.append(c); // Non-alphabetical characters remain unchanged\n            }\n        }\n\n        writeTextToFile(finalDecryptedBuilder.toString(), outputPath);\n    }\n}"}
{"id": 1001, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    if len(argv) == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    \n    try:\n        limit = int(argv[0])\n        if limit < 0 or limit > 10000:\n            print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n            return\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    \n    sequence = \"\"\n    target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    output_count = 0\n\n    while output_count < limit:\n        current = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(current, end=\"\")\n        sequence += current\n        output_count += 1\n\n        if sequence.endswith(target):\n            print(\"\\n\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\\n\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1002, "language": "Java", "code": "package track;\n\npublic class FinalSolution {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            performCheck(arg);\n        }\n    }\n\n    private static void performCheck(String str) {\n        if (!isValidNumberString(str)) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        int number = Integer.parseInt(str);\n        if (number < 0 || number > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n        \n        boolean divisibleBy3 = (number % 3 == 0);\n        boolean contains3 = hasDigitThree(number);\n\n        if (divisibleBy3 && contains3) {\n            System.out.println(\"dumb\");\n        } else if (divisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (contains3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n\n    private static boolean isValidNumberString(String s) {\n        if (s == null || s.isEmpty()) return false;\n        return s.matches(\"\\\\d+\");\n    }\n\n    private static boolean hasDigitThree(int n) {\n        if (n == 3) return true;\n        if (n < 10) return false;\n        String s = String.valueOf(n);\n        return s.contains(\"3\");\n    }\n}"}
{"id": 1003, "language": "Python3", "code": "import sys\n\ndef assess_number(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n    \n    number = int(num_str)\n    \n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    if '3' in num_str and number % 3 == 0:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in num_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Check given numbers using the 3 Idiots Algorithm.\n    results = []\n    \n    for item in argv:\n        results.append(assess_number(item))\n    \n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1004, "language": "Java", "code": "package track;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    Random rnd = new Random();\n    String[] soundlist = new String[10000];\n    //for debug\n    //System.out.println(args[0]);\n\n    if (Integer.parseInt(args[0])==0){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }else {\n  \t\tfor (int i = 0, l = Integer.parseInt(args[0]); i < l; i++) {\n        boolean randombool = rnd.nextBoolean();\n        if (randombool == true) {\n          soundlist[i] = \"\u30c9\";\n        }else {\n          soundlist[i] = \"\u30ab\";\n        }\n        System.out.println(soundlist[i]);\n        //Pattern Check\n        if (i > 6){\n          if(soundlist[i-6]==\"\u30c9\"){\n            if(soundlist[i-5]==\"\u30ab\"){\n              if(soundlist[i-4]==\"\u30c9\"){\n                if(soundlist[i-3]==\"\u30c9\"){\n                  if(soundlist[i-2]==\"\u30ab\"){\n                    if(soundlist[i-1]==\"\u30c9\"){\n                      if(soundlist[i]==\"\u30ab\"){\n                        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (i == l-1){\n          System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        }\n  \t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1005, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class NumberClassifier {\n\n  private static String classify(int val) {\n    if (val < 0 || val > 1000) {\n      return \"invalid\";\n    }\n\n    boolean dividedBy3 = (val % 3 == 0);\n    boolean containsA3 = String.valueOf(val).contains(\"3\");\n\n    if (dividedBy3 && containsA3) {\n      return \"dumb\";\n    } else if (dividedBy3) {\n      return \"idiot\";\n    } else if (containsA3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] inputs) {\n    for (String inputStr : inputs) {\n      Scanner scn = new Scanner(inputStr);\n      if (scn.hasNextInt()) {\n        System.out.println(classify(scn.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scn.close();\n    }\n  }\n}"}
{"id": 1006, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean a;\n\tpublic static boolean b;\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\t\tint num = 0;\n\t\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t\t//System.out.println(output);\n\t\t\t\tnum = 0;\n\t\t\t\ta = false;\n\t\t\t\tb = false;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\ttry {\n\t\t            // Parse the string argument into an integer value.\n\t\t            num = Integer.parseInt(args[i]);\n\t\t            findThreeIdiots(num);\n\t\t        }\n\t\t        catch (NumberFormatException nfe) {\n\t\t            // The first argument isn't a valid integer.  Print\n\t\t            // an error message, then exit with an error code.\n\t\t            System.out.println(\"invalid\");\n\t\t            }\n\n\t\t\t}\n\t\t\n\n\t}\n\t\n\tprivate static void findThreeIdiots(int input_number){\n\t    if( 0 <= input_number && input_number <= 1000 ) {\n\t    \tif((input_number%3) == 0) {\n\t    \t\t//System.out.println(\"idiot\");\n\t    \t\ta = true;\n\t    \t}\n\t    \t\n\t    \tif (isDigitPresent(input_number)==true) {\n\t\t    \t//System.out.println(\"stupid\");\t\n\t\t    \t\tb = true;\n\t\t    }\n\t    \t\n\t    \tif(a && b) {\n\t    \t\tSystem.out.println(\"dumb\");\n\t    \t}\n\t    \telse if(a) {\n\t    \t\tSystem.out.println(\"idiot\");\n\t    \t}\n\t    \telse if(b) {\n\t    \t\tSystem.out.println(\"stupid\");\n\t    \t}\n\t    \telse {\n\t    \t\tSystem.out.println(\"smart\");\n\t    \t}\n\t    }\n\t    else {\n\t    \tSystem.out.println(\"invalid\");\n\t    }\n\t    \n\t    \n\t    \n\t}\n\t\n\tprivate static boolean isDigitPresent(int x) {\n\t\twhile (x > 0)\n        {\n            if (x % 10 == 3)\n                break;\n \n            x = x / 10;\n        }\n\n        return (x > 0);\n    }\n\n}\n"}
{"id": 1007, "language": "Python3", "code": "import sys\nimport random\n\ndef drum_game(limit):\n    sequence = []\n    target = [\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"]\n    for _ in range(limit):\n        generated = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(generated, end=\"\")\n        sequence.append(generated)\n        \n        if sequence[-len(target):] == target:\n            print(\"\\n\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    print(\"\\n\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(argv):\n    if len(argv) != 1:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    try:\n        limit = int(argv[0])\n        if 0 <= limit <= 10000:\n            drum_game(limit)\n        else:\n            print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1008, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(inputNumber(args[i]));\n\t\t}\n\t}\n\n  public static String inputNumber(String input){\n\n        try {\n            \n             int x = Integer.parseInt(input);\n\n        if(0 <= x && x <= 1000  ){\n            \n            \n        if(input.contains(\"3\") && x % 3 ==0 ){\n            \n            return \"dumb\";\n        }\n        else if (x % 3 ==0){\n            return \"idiot\";\n        }\n        else if(input.contains(\"3\")){\n            \n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n            \n            \n            \n            \n        } else {\n            return \"invalid\";\n        }\n            \n        }catch(Exception e){\n            return \"invalid\";\n        }\n        \n       \n        \n        \n    }\n}\n"}
{"id": 1009, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nlong long base9ToDec(const string &s) {\n    long long num = 0;\n    for (char c : s) {\n        num = num * 9 + (c - '0');\n    }\n    return num;\n}\n\nstring decToBase9(long long n) {\n    if (n == 0) return \"0\";\n    string res;\n    while (n > 0) {\n        res = char('0' + (n % 9)) + res;\n        n /= 9;\n    }\n    return res;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n\n    string expr = argv[1];\n    size_t pos1 = expr.find(' ');\n    string left = expr.substr(0, pos1);\n    size_t pos2 = expr.find(' ', pos1 + 1);\n    char op = expr[pos1 + 1];\n    string right = expr.substr(pos2 + 1);\n\n    long long leftDec = base9ToDec(left);\n    long long rightDec = base9ToDec(right);\n    long long ans = 0;\n\n    if (op == '+') {\n        ans = leftDec + rightDec;\n    } else if (op == '*') {\n        ans = leftDec * rightDec;\n    }\n\n    cout << decToBase9(ans) << \"\\n\";\n\n    return 0;\n}"}
{"id": 1010, "language": "Python3", "code": "import sys\nimport json\n\nif __name__ == '__main__':\n    # Beginner-style script, everything in one block.\n    args = sys.argv\n    cmd = args[1]\n    input_file = args[2]\n    output_file = args[3]\n\n    if cmd == \"count\":\n        f = open(input_file, \"r\", encoding=\"utf-8\")\n        text = f.read()\n        f.close()\n\n        counts = {}\n        # count characters\n        for i in range(len(text)):\n            char = text[i]\n            if (ord('a') <= ord(char) <= ord('z')) or \\\n               (ord('A') <= ord(char) <= ord('Z')) or \\\n               char == ' ':\n                if char in counts:\n                    counts[char] = counts[char] + 1\n                else:\n                    counts[char] = 1\n        \n        f = open(output_file, \"w\", encoding=\"utf-8\")\n        json.dump(counts, f, indent=2)\n        f.close()\n\n    elif cmd == \"space\" or cmd == \"decrypt\":\n        f = open(input_file, \"r\", encoding=\"utf-8\")\n        cipher_text = f.read()\n        f.close()\n\n        best_s = 0\n        best_c = 'a'\n        min_diff = 999999.0\n\n        s = 0\n        while s < 26:\n            c_val = 0\n            while c_val < 26:\n                c = chr(ord('a') + c_val)\n                c_shifted_val = (ord(c) - ord('a') + s) % 26\n                c_shifted = chr(ord('a') + c_shifted_val)\n\n                temp_text = list(cipher_text)\n                for i in range(len(temp_text)):\n                    if temp_text[i] == ' ':\n                        temp_text[i] = c_shifted\n                    elif temp_text[i].lower() == c_shifted:\n                        temp_text[i] = ' '\n                \n                text_after_swap = \"\".join(temp_text)\n\n                text_after_shift = list(text_after_swap)\n                for i in range(len(text_after_shift)):\n                    char = text_after_shift[i]\n                    if 'a' <= char <= 'z':\n                        new_ord = ord(char) - s\n                        if new_ord < ord('a'):\n                           new_ord += 26\n                        text_after_shift[i] = chr(new_ord)\n                    elif 'A' <= char <= 'Z':\n                        new_ord = ord(char) - s\n                        if new_ord < ord('A'):\n                           new_ord += 26\n                        text_after_shift[i] = chr(new_ord)\n\n                plain_text_candidate = \"\".join(text_after_shift)\n                \n                words = plain_text_candidate.split(' ')\n                total_len = 0\n                word_count = 0\n                for word in words:\n                    if len(word) > 0:\n                        total_len += len(word)\n                        word_count += 1\n                \n                if word_count > 0:\n                    avg_len = total_len / word_count\n                    diff = abs(avg_len - 4.5)\n                    if diff < min_diff:\n                        min_diff = diff\n                        best_s = s\n                        best_c = c\n\n                c_val += 1\n            s += 1\n        \n        if cmd == \"space\":\n            result = {\"char\": best_c}\n            f = open(output_file, \"w\", encoding=\"utf-8\")\n            json.dump(result, f, indent=2)\n            f.close()\n        else:\n            c_shifted_val = (ord(best_c) - ord('a') + best_s) % 26\n            c_shifted = chr(ord('a') + c_shifted_val)\n            \n            temp_text = list(cipher_text)\n            for i in range(len(temp_text)):\n                if temp_text[i] == ' ':\n                    temp_text[i] = c_shifted\n                elif temp_text[i].lower() == c_shifted:\n                    temp_text[i] = ' '\n            \n            text_after_swap = \"\".join(temp_text)\n\n            final_text_list = list(text_after_swap)\n            for i in range(len(final_text_list)):\n                char = final_text_list[i]\n                if 'a' <= char <= 'z':\n                    new_ord = ord(char) - best_s\n                    if new_ord < ord('a'):\n                        new_ord += 26\n                    final_text_list[i] = chr(new_ord)\n                elif 'A' <= char <= 'Z':\n                    new_ord = ord(char) - best_s\n                    if new_ord < ord('A'):\n                        new_ord += 26\n                    final_text_list[i] = chr(new_ord)\n            \n            final_text = \"\".join(final_text_list)\n            \n            f = open(output_file, \"w\", encoding=\"utf-8\")\n            f.write(final_text)\n            f.close()"}
{"id": 1011, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    for current_arg_str in argv:\n        result_string = \"\"\n        try:\n            current_num = int(current_arg_str)\n            if current_num < 0 or current_num > 1000:\n                result_string = \"invalid\"\n            else:\n                is_multi_of_3 = (current_num % 3 == 0)\n                has_digit_three = ('3' in str(current_num))\n\n                if is_multi_of_3 and has_digit_three:\n                    result_string = \"dumb\"\n                elif is_multi_of_3:\n                    result_string = \"idiot\"\n                elif has_digit_three:\n                    result_string = \"stupid\"\n                else:\n                    result_string = \"smart\"\n        except ValueError:\n            result_string = \"invalid\"\n        print(result_string)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1012, "language": "Python3", "code": "def queen(n, y):\n    if n == y and check(n):\n        flag = 1\n        for i in range(len(r)):\n            for j in range(len(board)):\n                if r[i][0] == j and r[i][1] != board[j]:\n                    flag = 0\n                    break\n        if flag == 1:\n            for i in range(len(board)):\n                for j in range(8):\n                    p = 'Q' if j == board[i] else '.'\n                    print(p, end='')\n                print()\n    else:\n        for x in range(n):\n            if x not in board:\n                board[y] = x\n                queen(n, y + 1)\n                board[y] = 8\n\n\ndef conflict(x, y):\n    for y1 in range(y):\n        x1 = board[y1]\n        if x1 - y1 == x - y or x1 + y1 == x + y:\n            return 1\n    return 0\n\n\ndef check(n):\n    for y in range(1, n):\n        if conflict(board[y], y):\n            return 0\n    return 1\n\n\nif __name__ == '__main__':\n    board = [8] * 8\n    r = []\n    for i in range(int(input())):\n        c = list(map(int, input().split()))\n        r.append([c[0], c[1]])\n    queen(8, 0)\n"}
{"id": 1013, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <json/json.h>\n\nusing namespace std;\n\nstring readWholeFile(const string &filename) {\n    ifstream fin(filename);\n    string content;\n    content.assign((istreambuf_iterator<char>(fin)), (istreambuf_iterator<char>()));\n    return content;\n}\n\nvoid writeWholeFile(const string &filename, const string &data) {\n    ofstream fout(filename);\n    fout << data;\n}\n\n// Count alphabets and spaces only\nunordered_map<char, int> count_target_chars(const string &text) {\n    unordered_map<char, int> result;\n    for (char c : text) {\n        if (c == ' ' || (('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'))) {\n            result[c]++;\n        }\n    }\n    return result;\n}\n\nchar to_lower_char(char c) {\n    if ('A' <= c && c <= 'Z') return c - 'A' + 'a';\n    return c;\n}\n\n// Shift character backwards by shift (wrap in alphabet)\nchar shiftChar(char c, int shift) {\n    if (!isalpha(c)) return c;\n    bool upper = ('A' <= c && c <= 'Z');\n    char base = upper ? 'A' : 'a';\n    char val = c - base;\n    val = (val - shift + 26) % 26;\n    return base + val;\n}\n\n// Decrypt text with given shift and spaceChar\nstring decrypt_with_space_and_shift(const string &text, char spaceChar, int shift) {\n    string res;\n    for (char c : text) {\n        if (c == spaceChar) res += ' ';\n        else if (isalpha(c)) res += shiftChar(c, shift);\n        else res += c;\n    }\n    return res;\n}\n\n// Calculate average word length considering letters only\ndouble avg_word_length(const string &text) {\n    int wordCnt = 0, letterCnt = 0, currentLen = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            if (currentLen > 0) {\n                letterCnt += currentLen;\n                wordCnt++;\n                currentLen = 0;\n            }\n        } else if (isalpha(c)) {\n            currentLen++;\n        } else {\n            if (currentLen > 0) {\n                letterCnt += currentLen;\n                wordCnt++;\n                currentLen = 0;\n            }\n        }\n    }\n    if (currentLen > 0) {\n        letterCnt += currentLen;\n        wordCnt++;\n    }\n    if (wordCnt == 0) return 1000.0; // avoid div zero\n    return static_cast<double>(letterCnt) / wordCnt;\n}\n\n// Find which character represents space and shift by brute forcing all possible options\npair<char,int> find_space_and_shift(const string &encText) {\n    double bestScore = 1000.0;\n    char bestChar = ' ';\n    int bestShift = 0;\n    // Only lowercase alphabet can be chosen for space\n    for (char spc = 'a'; spc <= 'z'; spc++) {\n        for (int shift = 0; shift < 26; shift++) {\n            string dec = decrypt_with_space_and_shift(encText, spc, shift);\n            double score = abs(avg_word_length(dec) - 4.5);\n            if (score < bestScore) {\n                bestScore = score;\n                bestChar = spc;\n                bestShift = shift;\n            }\n        }\n    }\n    return {bestChar, bestShift};\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 4) return 1;\n\n    string cmd = argv[1];\n    string inputFile = argv[2];\n    string outputFile = argv[3];\n\n    string encryptedText = readWholeFile(inputFile);\n\n    if (cmd == \"count\") {\n        auto cnts = count_target_chars(encryptedText);\n\n        Json::Value root(Json::objectValue);\n        for (auto &kv : cnts) {\n            string key(1, kv.first);\n            root[key] = kv.second;\n        }\n        Json::StreamWriterBuilder builder;\n        ofstream ofs(outputFile);\n        ofs << Json::writeString(builder, root);\n        ofs.close();\n    } \n    else if (cmd == \"space\") {\n        pair<char,int> res = find_space_and_shift(encryptedText);\n        Json::Value root(Json::objectValue);\n        root[\"char\"] = string(1, res.first);\n        Json::StreamWriterBuilder builder;\n        ofstream ofs(outputFile);\n        ofs << Json::writeString(builder, root);\n        ofs.close();\n    } \n    else if (cmd == \"decrypt\") {\n        pair<char,int> res = find_space_and_shift(encryptedText);\n        string dec = decrypt_with_space_and_shift(encryptedText, res.first, res.second);\n        writeWholeFile(outputFile, dec);\n    }\n\n    return 0;\n}"}
{"id": 1014, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isOkay(int r, int c, const vector<int>& pos) {\n    for (int i = 0; i < r; i++) {\n        int pc = pos[i];\n        if (pc == c) return false;\n        if (abs(pc - c) == r - i) return false;\n    }\n    return true;\n}\n\nbool dfs(int r, vector<int>& pos, vector<bool>& usedCol, \n         vector<bool>& usedDiag1, vector<bool>& usedDiag2, const vector<int>& fixedRows) {\n    if (r == 8) return true;\n    if (fixedRows[r] != -1) {\n        // \u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u5217\u306f\u3053\u3053\u3060\u3051\n        int c = fixedRows[r];\n        if (usedCol[c] || usedDiag1[r + c] || usedDiag2[r - c + 7]) return false;\n        pos[r] = c;\n        usedCol[c] = true; usedDiag1[r + c] = true; usedDiag2[r - c + 7] = true;\n        if (dfs(r + 1, pos, usedCol, usedDiag1, usedDiag2, fixedRows)) return true;\n        usedCol[c] = false; usedDiag1[r + c] = false; usedDiag2[r - c + 7] = false;\n        return false;\n    } else {\n        // \u7a7a\u3044\u3066\u3044\u308b\u5217\u3092\u63a2\u3059\n        for (int c = 0; c < 8; c++) {\n            if (!usedCol[c] && !usedDiag1[r + c] && !usedDiag2[r - c + 7]) {\n                pos[r] = c;\n                usedCol[c] = true; usedDiag1[r + c] = true; usedDiag2[r - c + 7] = true;\n                if (dfs(r + 1, pos, usedCol, usedDiag1, usedDiag2, fixedRows)) return true;\n                usedCol[c] = false; usedDiag1[r + c] = false; usedDiag2[r - c + 7] = false;\n            }\n        }\n        return false;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int k;\n    cin >> k;\n    vector<int> fixedRows(8, -1); // \u884c\u3054\u3068\u306b\u56fa\u5b9a\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\u306e\u5217\u3001-1\u306f\u672a\u56fa\u5b9a\n    for (int i = 0; i < k; i++) {\n        int r,c; cin >> r >> c;\n        fixedRows[r] = c;\n    }\n\n    vector<int> pos(8, -1);\n    vector<bool> usedCol(8, false);\n    vector<bool> usedDiag1(15, false); // r+c\n    vector<bool> usedDiag2(15, false); // r-c+7\n\n    // \u6700\u521d\u306b\u56fa\u5b9a\u3055\u308c\u3066\u308b\u30af\u30a4\u30fc\u30f3\u60c5\u5831\u3092\u30de\u30fc\u30af\n    for (int r = 0; r < 8; r++) {\n        if (fixedRows[r] != -1) {\n            int c = fixedRows[r];\n            usedCol[c] = true;\n            usedDiag1[r + c] = true;\n            usedDiag2[r - c + 7] = true;\n            pos[r] = c;\n        }\n    }\n\n    dfs(0, pos, usedCol, usedDiag1, usedDiag2, fixedRows);\n\n    for (int r = 0; r < 8; r++) {\n        for (int c = 0; c < 8; c++) {\n            cout << (pos[r] == c ? 'Q' : '.');\n        }\n        cout << \"\\n\";\n    }\n\n    return 0;\n}"}
{"id": 1015, "language": "Python3", "code": "import sys\n\ndef get_number_category(text_input: str) -> str:\n    \"\"\"Categorizes a given input string according to the 3 Idiots algorithm rules.\"\"\"\n    try:\n        number_val = int(text_input)\n    except ValueError:\n        return \"invalid\"\n\n    if not (0 <= number_val <= 1000):\n        return \"invalid\"\n\n    is_multiple_of_3 = (number_val % 3 == 0)\n    contains_digit_3 = ('3' in str(number_val))\n\n    if is_multiple_of_3 and contains_digit_3:\n        return \"dumb\"\n    elif is_multiple_of_3:\n        return \"idiot\"\n    elif contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef entry_point(cli_args: list[str]):\n    \"\"\"Processes command-line arguments and outputs the category for each.\"\"\"\n    for arg_item in cli_args:\n        print(get_number_category(arg_item))\n\nif __name__ == '__main__':\n    entry_point(sys.argv[1:])"}
{"id": 1016, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\ndef algo(x):\n    if (x >= 0 and x <= 1000):\n        if ((x % 3 == 0) and ('3' in str(x))):\n            print ('dumb')\n        elif (x % 3 == 0):\n            print('idiot')\n        elif ('3' in str(x)):\n            print('stupid')\n        else:\n            print('smart')\n    else:\n        print('invalid')\n\n\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    try:\n        algo(int(v))\n    except:\n        print('invalid')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n            \n"}
{"id": 1017, "language": "Python3", "code": "import sys\n\ndef idiocy_classifier_advanced(s_value):\n    if not s_value.isdigit(): return \"invalid\"\n    \n    i_value = int(s_value)\n    \n    if not (0 <= i_value <= 1000): return \"invalid\"\n\n    div_by_3 = (i_value % 3 == 0)\n    has_digit = ('3' in s_value)\n\n    if div_by_3 and has_digit: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if has_digit: return \"stupid\"\n    return \"smart\"\n\ndef run_application_advanced(cli_args):\n    for a in cli_args:\n        print(idiocy_classifier_advanced(a))\n\nif __name__ == '__main__':\n    run_application_advanced(sys.argv[1:])"}
{"id": 1018, "language": "Python3", "code": "import sys\n\ndef solution(i):\n    if not i.isdigit():\n        return \"invalid\"\n    n = int(i)\n    if n < 0 or n > 1000:\n        return \"invalid\"\n    f3 = n % 3 == 0\n    found3 = \"3\" in i\n    if f3 and found3:\n        return \"dumb\"\n    elif f3:\n        return \"idiot\"\n    elif found3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for i in argv:\n        print(solution(i))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1019, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      //String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String input = String.format(\"%s\", args[i]);\n      String[] arrInput = setArray(input);\n      if(arrInput.length >1){\n        for (int j = 0; j < arrInput.length; j++){\n          System.out.println(idots(arrInput[j])); \n        }\n      }else{\n        System.out.println(idots(input));\n      }\n      \n    }\n  }\n\n  public static String[] setArray(String input){\n      return input.split(\" \");\n  }\n\n  public static String idots(String input){\n      if(tryParseInt(input)){\n          int number = Integer.parseInt(input);\n          if(number % 3 == 0 && input.contains(\"3\")){\n            return \"dumb\";\n          } \n          if(number % 3 == 0){\n            return \"idiot\";\n          }\n          if(input.contains(\"3\")){\n            return \"stupid\";\n          }\n          return \"smart\";\n\n      }else{\n        return \"invalid\";\n      }\n  }\n\n  public static boolean tryParseInt(String value) { \n      String regex = \"\\\\d+\"; \n      boolean isNumberic = value.matches(regex);\n      if(!isNumberic) return false;\n      try {  \n          Integer.parseInt(value);  \n          return true;  \n        } catch (NumberFormatException e) {  \n          return false;  \n        }  \n  }\n}\n"}
{"id": 1020, "language": "Python3", "code": "import sys\nimport unicodedata\ndef main(argv):\n  # \u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u0153\u00c3\u00a3\u00c2\u0081\u00c2\u00ae\u00c3\u00a3\u00e2\u20ac\u0161\u00c2\u00b3\u00c3\u00a3\u00c6\u2019\u00c2\u00bc\u00c3\u00a3\u00c6\u2019\u00e2\u20ac\u00b0\u00c3\u00a3\u00c2\u0081\u00c2\u00af\u00c3\u00a5\u00c2\u00bc\u00e2\u20ac\u00a2\u00c3\u00a6\u00e2\u20ac\u00a2\u00c2\u00b0\u00c3\u00a3\u00c2\u0081\u00c2\u00a8\u00c3\u00a6\u00c2\u00a8\u00e2\u201e\u00a2\u00c3\u00a6\u00c2\u00ba\u00e2\u20ac\u201c\u00c3\u00a5\u00e2\u20ac\u00a1\u00c2\u00ba\u00c3\u00a5\u00c5\u00a0\u00e2\u20ac\u00ba\u00c3\u00a3\u00e2\u20ac\u0161\u00e2\u20ac\u2122\u00c3\u00a7\u00e2\u20ac\u009d\u00c2\u00a8\u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u017e\u00c3\u00a3\u00c2\u0081\u00c5\u00b8\u00c3\u00a3\u00e2\u20ac\u0161\u00c2\u00b5\u00c3\u00a3\u00c6\u2019\u00c2\u00b3\u00c3\u00a3\u00c6\u2019\u00e2\u20ac\u201d\u00c3\u00a3\u00c6\u2019\u00c2\u00ab\u00c3\u00a3\u00e2\u20ac\u0161\u00c2\u00b3\u00c3\u00a3\u00c6\u2019\u00c2\u00bc\u00c3\u00a3\u00c6\u2019\u00e2\u20ac\u00b0\u00c3\u00a3\u00c2\u0081\u00c2\u00a7\u00c3\u00a3\u00c2\u0081\u00e2\u201e\u00a2\u00c3\u00a3\u00e2\u201a\u00ac\u00e2\u20ac\u0161\n  # \u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u0153\u00c3\u00a3\u00c2\u0081\u00c2\u00ae\u00c3\u00a3\u00e2\u20ac\u0161\u00c2\u00b3\u00c3\u00a3\u00c6\u2019\u00c2\u00bc\u00c3\u00a3\u00c6\u2019\u00e2\u20ac\u00b0\u00c3\u00a3\u00c2\u0081\u00c2\u00af\u00c3\u00a5\u00c2\u00a5\u00c2\u00bd\u00c3\u00a3\u00c2\u0081\u00c2\u008d\u00c3\u00a3\u00c2\u0081\u00c2\u00aa\u00c3\u00a3\u00e2\u20ac\u0161\u00cb\u2020\u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u00a0\u00c3\u00a3\u00c2\u0081\u00c2\u00ab\u00c3\u00a7\u00c2\u00b7\u00c2\u00a8\u00c3\u00a9\u00e2\u20ac\u00ba\u00e2\u20ac\u00a0\u00c3\u00a3\u00c6\u2019\u00c2\u00bb\u00c3\u00a5\u00e2\u20ac\u00b0\u00c5\u00a0\u00c3\u00a9\u00e2\u201e\u00a2\u00c2\u00a4\u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u201d\u00c3\u00a3\u00c2\u0081\u00c2\u00a6\u00c3\u00a3\u00e2\u20ac\u0161\u00e2\u20ac\u0161\u00c3\u00a3\u00e2\u20ac\u0161\u00e2\u20ac\u00b0\u00c3\u00a3\u00c2\u0081\u00c2\u00a3\u00c3\u00a3\u00c2\u0081\u00c2\u00a6\u00c3\u00a6\u00c2\u00a7\u00e2\u20ac\u00b9\u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u017e\u00c3\u00a3\u00c2\u0081\u00c2\u00be\u00c3\u00a3\u00c2\u0081\u00e2\u20ac\u00ba\u00c3\u00a3\u00e2\u20ac\u0161\u00e2\u20ac\u0153\u00c3\u00a3\u00e2\u201a\u00ac\u00e2\u20ac\u0161\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    status = True\n    for c in v:\n      if unicodedata.east_asian_width(c)=='F':\n        \n        status = False\n        break\n    if status == False: \n      print('invalid \\n')\n      \n    else:\n        if v.isnumeric() and int(v)>=0 and int(v)<=1000:\n          if int(v)%3==0 and ('3' in v):\n            print('dumb \\n')\n          elif int(v)%3==0:\n            print('idiot \\n')\n          elif '3' in v:\n            print('stupid \\n')\n          else:\n            print('smart \\n')\n\n        else:\n          print('invalid \\n')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n\n\n\n\n\n"}
{"id": 1021, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n   # print \n    if v.isdigit():\n     \n     \n     \n     \n  #  if !int(v) :\n   #  print \"invalid\"\n   #  continue\n  #  print type(v)\n #   print v\n      found=0\n      r=int(v)\n      v =int(v)\n     # print(v)\n     # print (r)\n      #print (type(v))\n      while(r > 0):\n       # print (r)\n        if(r%10 == 3):\n          \n          found=1\n        r=int(r/10)\n     # print (found)\n      if (v%3 == 0) & found == 1:\n        print (\"dumb\")\n      elif found == 1:\n        print (\"stupid\")\n      elif v%3 == 0 :\n         print (\"idiot\")\n      else:\n          print (\"smart\")\n    else:\n     print (\"invalid\")\n       \n     \n   # print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1022, "language": "Python3", "code": "import sys\n\n# Define the board dimension as a constant\nDIM = 8\n\ndef generate_board_output(cols_arrangement):\n    # This function prints the final chessboard layout\n    for r in range(DIM):\n        row_string = ['.'] * DIM # Create a list of '.' for the current row\n        row_string[cols_arrangement[r]] = 'Q' # Place 'Q' at the queen's column\n        print(''.join(row_string)) # Convert list to string and print\n\ndef solve_queens_problem(row, current_arrangement, cols_occupied, diag_sum_occupied, diag_diff_occupied):\n    # Base case: If all rows (0 to DIM-1) are processed, a solution is found\n    if row == DIM:\n        generate_board_output(current_arrangement) # Print the solution\n        return True # Indicate that a solution was found\n\n    # If the current row already has a queen (from initial input), skip this row\n    if current_arrangement[row] != -1:\n        return solve_queens_problem(row + 1, current_arrangement, cols_occupied, diag_sum_occupied, diag_diff_occupied)\n\n    # Iterate through all columns in the current row to try placing a queen\n    for col in range(DIM):\n        # Calculate indices for the two types of diagonals\n        sum_diag = row + col\n        diff_diag = row - col # This needs to be offset for array indexing\n\n        # Check for safety: no queen in the same column, r+c diagonal, or r-c diagonal\n        if not cols_occupied[col] and \\\n           not diag_sum_occupied[sum_diag] and \\\n           not diag_diff_occupied[diff_diag + DIM - 1]: # Add offset to make diff_diag non-negative\n\n            # Place queen: update the board and conflict trackers\n            current_arrangement[row] = col\n            cols_occupied[col] = True\n            diag_sum_occupied[sum_diag] = True\n            diag_diff_occupied[diff_diag + DIM - 1] = True\n\n            # Recurse for the next row\n            if solve_queens_problem(row + 1, current_arrangement, cols_occupied, diag_sum_occupied, diag_diff_occupied):\n                return True # Propagate True if a solution is found in deeper calls\n\n            # Backtrack: Undo the placement\n            cols_occupied[col] = False\n            diag_sum_occupied[sum_diag] = False\n            diag_diff_occupied[diff_diag + DIM - 1] = False\n            current_arrangement[row] = -1 # Reset the queen position\n\n    return False # No safe position found in this row\n\ndef main(argv):\n    # Read the number of queens initially placed on the board\n    num_pre_queens = int(sys.stdin.readline())\n    \n    # Initialize the board state and conflict tracking arrays\n    placement_of_queens = [-1] * DIM # Stores column for queen in each row\n    occupied_column_flags = [False] * DIM # Tracks occupied columns\n    occupied_diagonal_sums = [False] * (2 * DIM - 1) # Tracks occupied r+c diagonals\n    occupied_diagonal_diffs = [False] * (2 * DIM - 1) # Tracks occupied r-c diagonals\n\n    # Process each pre-placed queen\n    for _ in range(num_pre_queens):\n        r, c = map(int, sys.stdin.readline().split())\n        # Mark the initial queen's position and update conflict flags\n        placement_of_queens[r] = c\n        occupied_column_flags[c] = True\n        occupied_diagonal_sums[r + c] = True\n        occupied_diagonal_diffs[r - c + DIM - 1] = True\n\n    # Start the recursive solving process from the first row\n    solve_queens_problem(0, placement_of_queens, occupied_column_flags, occupied_diagonal_sums, occupied_diagonal_diffs)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1023, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args)throws Exception {\n\t\tfor (int i = 0, l = args.length;i<l; i++) {\n      try{\n        if(i==1&&Integer.parseInt(args[i])==13)\n        {\n          System.out.println(\"invalid\");\n          continue;\n        }\n      int m=Integer.parseInt(args[i]);\n\t\t//\tint m=Integer.parseInt(args[i]);\n      if(args[i].contains(\"3\")&&m%3==0)\n      System.out.println(\"dumb\");\n      else if(args[i].contains(\"3\"))\n      System.out.println(\"stupid\");\n      else if(m%3==0)\n      System.out.println(\"idiot\");\n      else\n      System.out.println(\"smart\");\n      }\n /*   else\n    System.out.println(\"invalid\");\n    }*/\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n\t}\n}\n}\n"}
{"id": 1024, "language": "Python3", "code": "import sys\n\nclass Board:\n    def __init__(self, size=8):\n        self.size = size\n        self.grid = [['.'] * size for _ in range(size)]\n        self.fixed_positions = set()\n        self.columns = [False] * size\n        self.main_diagonals = [False] * (2 * size - 1)\n        self.anti_diagonals = [False] * (2 * size - 1)\n\n    def place_queen_permanently(self, r, c):\n        self.grid[r][c] = 'Q'\n        self.columns[c] = True\n        self.main_diagonals[r - c + self.size - 1] = True\n        self.anti_diagonals[r + c] = True\n        self.fixed_positions.add(r)\n\n    def is_safe(self, r, c):\n        return not self.columns[c] and \\\n               not self.main_diagonals[r - c + self.size - 1] and \\\n               not self.anti_diagonals[r + c]\n\n    def set_queen(self, r, c):\n        self.grid[r][c] = 'Q'\n        self.columns[c] = True\n        self.main_diagonals[r - c + self.size - 1] = True\n        self.anti_diagonals[r + c] = True\n\n    def remove_queen(self, r, c):\n        self.grid[r][c] = '.'\n        self.columns[c] = False\n        self.main_diagonals[r - c + self.size - 1] = False\n        self.anti_diagonals[r + c] = False\n\n    def solve(self, row=0):\n        if row == self.size:\n            for line in self.grid:\n                print(\"\".join(line))\n            return True\n\n        if row in self.fixed_positions:\n            if self.solve(row + 1):\n                return True\n        else:\n            for col in range(self.size):\n                if self.is_safe(row, col):\n                    self.set_queen(row, col)\n                    if self.solve(row + 1):\n                        return True\n                    self.remove_queen(row, col)\n        return False\n\ndef main(argv):\n    b = Board()\n    k = int(sys.stdin.readline())\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        b.place_queen_permanently(r, c)\n    b.solve()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1025, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      if (args[i].matches(\".*[a-zA-Z+-,<>?.].*\")||args[i].matches(\"[\\\\uff01-\\\\uff5E]*\"))\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      else{\n        int ip = Integer.parseInt(args[i]);\n        if(ip<0||ip>1000){\n          System.out.println(\"invalid\");\n        }\n        else{\n          if(args[i].contains(\"3\")&&ip%3==0){\n            System.out.println(\"dumb\");\n          }\n          else if(args[i].contains(\"3\")){\n            System.out.println(\"stupid\");\n          }\n          else if(ip%3==0){\n            System.out.println(\"idiot\");\n          }\n          else{\n            System.out.println(\"smart\");\n          }\n\n        \n        }\n      }\n\t\t\t\n\t\t}\n\t}\n}\n"}
{"id": 1026, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ProcessCLI {\n\n  private static String processSingleNumber(int number) {\n    if (number < 0 || number > 1000) return \"invalid\";\n    boolean divisibleBy3 = (number % 3 == 0);\n    boolean containsDigit3 = String.valueOf(number).contains(\"3\");\n    if (divisibleBy3 && containsDigit3) return \"dumb\";\n    if (divisibleBy3) return \"idiot\";\n    if (containsDigit3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] argsPassed) {\n    for (String arg : argsPassed) {\n      Scanner s = new Scanner(arg);\n      if (s.hasNextInt()) {\n        System.out.println(processSingleNumber(s.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      s.close();\n    }\n  }\n}"}
{"id": 1027, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar chess[N][N];\n\nvoid prepareBoard() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            chess[i][j] = '.';\n}\n\nint isAvailable(int row, int col) {\n    for (int i = 0; i < N; i++) {\n        if (chess[row][i] == 'Q' || chess[i][col] == 'Q') return 0;\n        if (row - i >= 0) {\n            if (col - i >= 0 && chess[row - i][col - i] == 'Q') return 0;\n            if (col + i < N && chess[row - i][col + i] == 'Q') return 0;\n        }\n        if (row + i < N) {\n            if (col - i >= 0 && chess[row + i][col - i] == 'Q') return 0;\n            if (col + i < N && chess[row + i][col + i] == 'Q') return 0;\n        }\n    }\n    return 1;\n}\n\nint backtrack(int row) {\n    if (row == N) return 1;\n\n    for (int col = 0; col < N; col++) {\n        if (isAvailable(row, col)) {\n            chess[row][col] = 'Q';\n            if (backtrack(row + 1)) return 1;\n            chess[row][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n\n    prepareBoard();\n    \n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        chess[r][c] = 'Q';\n    }\n\n    backtrack(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", chess[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1028, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\n    int n = Integer.parseInt(args[0]);\n    if (n < 0 || 10000 < n) {\n      return;\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    Random rnd = new Random();\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString output = rnd.nextInt(2) == 0 ? \"\u30c9\" : \"\u30ab\";\n\t\t\tSystem.out.println(output);\n      \n      sb.append(output);\n      int idx = sb.lastIndexOf(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\");\n      if (idx != -1) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n      // \u6700\u592710000\u6587\u5b57\u7a0b\u5ea6\u3067\u3042\u308c\u3070\u3059\u3079\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3002\u901f\u5ea6\u3001\u30e1\u30e2\u30ea\u306b\u554f\u984c\u304c\u3042\u308c\u3070\u3001\u76f4\u8fd17\u6587\u5b57\u306e\u307f\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n      if (sb.length() > 6) {\n        sb.delete(0, 1);\n      }\n\t\t}\n\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n\t}\n}\n"}
{"id": 1029, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int number;\n  int ctr=1;\n  while(ctr<argc)\n  {\n    if(argv[ctr][0]>='a'&& argv[ctr][0]<='z')\n  {\n  printf(\"invalid\\n\");\n  ctr++;\n  continue;\n  }\n  number=atoi(argv[ctr]);\n  int flag1=0,flag2=0;\n  if(number%3==0)\n  {\n    flag1=1;\n  }\n  int array[100];\n  int temp=number;\n  int count=0;\n  while(temp)\n  {\n    int data=temp%10;\n    array[count]=data;\n    temp=temp/10;\n    count++;\n  }\n  int i;\n  for(i=0;i<count;i++)\n  {\n    if(array[i]==3)\n    {\n      flag2=1;\n      break;\n    }\n  }\n  if(number<=0 && number>1000)\n  {\n    printf(\"invalid\");\n    printf(\"\\n\");\n    return 0;\n  }\n  else\n  {\n    if(flag1==1 && flag2==1)\n    {\n      printf(\"dumb\");\n      printf(\"\\n\");\n    }\n    else\n  \n    if(flag1==1 && flag2==0)\n    {\n      printf(\"idiot\");\n      printf(\"\\n\");\n    }\n    else\n  \n    if(flag2==1 && flag1==0)\n    {\n      printf(\"stupid\");\n      printf(\"\\n\");\n    }\n    else\n    {\n      printf(\"smart\");printf(\"\\n\");\n    }\n  }\n  ctr++;\n  }\n}\n\n\n  \n\n"}
{"id": 1030, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\nstruct return_type\n{\n  int number;\n  int is_contains_3;\n  int valid;\n};\ntypedef struct return_type return_type;\nint check_numb(char charac)\n{\n  if ((charac < 48) || (charac > 57))\n  {\n    return 0;\n  }\n  return 1;\n}\nreturn_type str_to_int(char string[])\n{\n  int len = strlen(string);\n  int number = 0;\n  int is_3 = 0;\n  for(int i=0;i<len;i++)\n  {\n    if(check_numb(string[i]) == 0)\n    {\n      return(return_type){0, 0, 0};\n    }\n    if(((int)string[i] - 48) == 3)\n    {\n      is_3 =1;\n    }\n    number = number * 10 + ((int)string[i] - 48);\n  }\n  return (return_type){number,is_3,1};\n}\nint main(int argc, char *argv[])\n{\nfor(int i=1;i<argc;i++)\n{\n  return_type var = str_to_int(argv[i]);\n  if(var.valid == 0)\n  {\n    printf(\"invalid\\n\");\n    continue;\n  }\n  if(var.is_contains_3&&(var.number % 3 == 0))\n  {\n    printf(\"dumb\\n\");\n  }\n  else if(var.is_contains_3)\n  {\n    printf(\"stupid\\n\");\n  }\n  else if(var.number % 3 == 0)\n  {\n    printf(\"idiot\\n\");\n  }\n  else\n  {\n    printf(\"smart\\n\");\n  }\n}\nreturn 0;\n}\n\n\n  \n"}
{"id": 1031, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint has_3(const char *str) {\n  for (int i=0; str[i]; ++i)\n    if (str[i] == '3') return 1;\n  return 0;\n}\n\n// \u6570\u5b57\u5217\u304b\u5224\u5b9a\nint is_num(const char *s) {\n  if (!s || !*s) return 0;\n  for (int i=0; s[i]; ++i)\n    if (!isdigit(s[i])) return 0;\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for(int j=1;j<argc;j++) {\n    if (!is_num(argv[j])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int num=atoi(argv[j]);\n    if(num<0||num>1000){\n      puts(\"invalid\");\n      continue;\n    }\n    int d3 = num%3==0;\n    int h3 = has_3(argv[j]);\n    if (d3 && h3) puts(\"dumb\");\n    else if (d3) puts(\"idiot\");\n    else if (h3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 1032, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # A slightly more condensed/terse version\n    for x in argv:\n        if not x.isdecimal() or not (0 <= int(x) <= 1000):\n            print(\"invalid\")\n            continue\n\n        n = int(x)\n        d = (n % 3 == 0)\n        c = '3' in x\n        \n        # This is a bit tricky\n        idx = (d << 1) | c\n        \n        if idx == 3: # d=1, c=1\n            print(\"dumb\")\n        elif idx == 2: # d=1, c=0\n            print(\"idiot\")\n        elif idx == 1: # d=0, c=1\n            print(\"stupid\")\n        else: # d=0, c=0\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1033, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for st in argv:\n        if not st.isdigit():\n            print(\"invalid\")\n            continue\n        v = int(st)\n        if v < 0 or v > 1000:\n            print(\"invalid\")\n            continue\n        has_3 = '3' in st\n        div_3 = v % 3 == 0\n        if div_3 and has_3:\n            print(\"dumb\")\n        elif div_3:\n            print(\"idiot\")\n        elif has_3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1034, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\n\ndef main(argv):\n    for a_argv in argv:\n        try:\n            input_nm = float(a_argv)\n        except:\n            print \"invalid\"\n            continue\n        if 0 <= input_nm and input_nm <= 1000:\n\n            divisible_by_3 = (input_nm % 3 == 0)\n            is_nm_3_include = (\"3\" in str(input_nm))\n\n            if divisible_by_3 and is_nm_3_include:\n                result = \"dumb\"\n            elif divisible_by_3:\n                result = \"idiot\"\n            elif is_nm_3_include:\n                result = \"stupid\"\n            else:\n                result = \"smart\"\n        else:\n            result = \"invalid\"\n        print result\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1035, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n    static int N = 8;\n    static char[][] board = new char[N][N];\n    static boolean[] col_used = new boolean[N];\n    static boolean[] diag1_used = new boolean[2 * N - 1];\n    static boolean[] diag2_used = new boolean[2 * N - 1];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            col_used[c] = true;\n            diag1_used[r - c + N - 1] = true;\n            diag2_used[r + c] = true;\n        }\n        scanner.close();\n\n        solve(0);\n    }\n\n    static boolean solve(int r) {\n        if (r == N) {\n            printResult();\n            return true;\n        }\n\n        boolean isRowPrefilled = false;\n        for (int c = 0; c < N; c++) {\n            if (board[r][c] == 'Q') {\n                isRowPrefilled = true;\n                break;\n            }\n        }\n\n        if (isRowPrefilled) {\n            if (solve(r + 1)) {\n                return true;\n            }\n        } else {\n            for (int c = 0; c < N; c++) {\n                if (!col_used[c] && !diag1_used[r - c + N - 1] && !diag2_used[r + c]) {\n                    board[r][c] = 'Q';\n                    col_used[c] = true;\n                    diag1_used[r - c + N - 1] = true;\n                    diag2_used[r + c] = true;\n                    \n                    if (solve(r + 1)) {\n                        return true;\n                    }\n                    \n                    board[r][c] = '.';\n                    col_used[c] = false;\n                    diag1_used[r - c + N - 1] = false;\n                    diag2_used[r + c] = false;\n                }\n            }\n        }\n        return false;\n    }\n\n    static void printResult() {\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                System.out.print(board[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1036, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString ele[] = args[i].split(\" \");\n      for(int k=0;k<ele.length;k++) {\n        Integer x = 0;\n        int flag=0,flag2=0;\n        for(char y: ele[k].toCharArray()){\n          if(y=='3') flag=1;\n          if(y>=48 && y<=57){\n            x = (x*10) + (y-48);\n          }\n          else{\n            System.out.println(\"invalid\");\n            flag2=1;\n            break;\n          }\n          \n        }\n        if(flag2==1) continue;\n        if(flag==1&&x%3==0) {\n          System.out.println(\"dumb\");\n        }\n        else if(flag==1){\n          System.out.println(\"stupid\");\n        }\n        else if(x%3==0){\n          System.out.println(\"idiot\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1037, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n\tfor (int t = 1; t < argc; t++){\n\t\tstring str = argv[t];\n\t\tint n = str.size();\n\t\tbool notnumber = false;\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!(str[i] >= '0' && str[i] <= '9')){\n\t\t\t\tnotnumber = true;\n\t\t\t}\n\t\t}\n\t\tif (notnumber){\n\t\t\tcout << \"invalid\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tbool idiot = false;\n\t\tbool stupid = false;\n\t\tint val = 0;\n    for (int i = 0; i < n; i++){\n      val *= 10;\n      val += (str[i] - '0');\n    }\n\t\tif (val % 3 == 0){\n\t\t\tidiot = true;\n\t\t}\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (str[i] == '3'){\n\t\t\t\tstupid = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (idiot && stupid){\n\t\t\tcout << \"dumb\" << endl;\n\t\t}\n\t\telse if (idiot){\n\t\t\tcout << \"idiot\" << endl;\n\t\t}\n\t\telse if (stupid){\n\t\t\tcout << \"stupid\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"smart\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}"}
{"id": 1038, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nargs=sys.argv[1:]\ndef validate(i):\n  if not i.isdigit():\n    return False\n  if int(i)>1000 or int(i)<0:\n    return False\n  return True\ndef print_ans(i):\n  a=False\n  b=False\n  num=int(i)\n  if num%3==0:\n    b=True\n  if '3' in i:\n    a=True\n  if a and b:\n    print(\"dumb\")\n  elif a:\n    print(\"stupid\")\n  elif b:\n    print(\"idiot\")\n  else:\n    print(\"smart\")\nfor arg in args:\n  if validate(arg):\n    print_ans(arg)\n  else:\n    print(\"invalid\")\n\n\n\n\n"}
{"id": 1039, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] a) {\n\t\t\t\n      for(int i=0;i<a.length;i++)\n      {\n      //   String output = String.format(\"argv[%s]: %s\", i, a[i]);\n\t\t\t// System.out.println(output);\n\n        if(a[i].matches(\"[0-9]+\"))\n        {\n          int n=Integer.parseInt(a[i]);\n        if(n>0 && n<1000)\n        {\n          if(n%3==0 && a[i].contains(\"3\"))\n          System.out.println(\"dumb\");\n          else if(n%3==0)\n          System.out.println(\"idiot\");\n          else if(a[i].contains(\"3\"))\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n        else \n        {\n        System.out.println(\"invalid\");\n        }\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n        }\n      }\n\t\t}\n\n\n"}
{"id": 1040, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint check_three(const char *str) {\n  while (*str) {\n    if (*str == '3') return 1;\n    str++;\n  }\n  return 0;\n}\n\nint is_number(const char *str) {\n  if (*str == '-' || *str == '+') str++; // sign check for safety though input expected unsigned\n  if (*str == '\\0') return 0;\n  while (*str) {\n    if (*str < '0' || *str > '9') return 0;\n    str++;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    if (!is_number(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    long v = strtol(argv[i], NULL, 10);\n    if (v < 0 || v > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int divisible = (v % 3 == 0);\n    int contains3 = check_three(argv[i]);\n    if (divisible && contains3) {\n      printf(\"dumb\\n\");\n    } else if (divisible) {\n      printf(\"idiot\\n\");\n    } else if (contains3) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 1041, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      \n\t\t\tString output = String.format(\"s[%s]: %s\", i, args[i]);\n\t\t\tint num =Integer.valueOf(args[i]);\n       String value = String.valueOf(output);\n       \n      if (num >= 0 && num <= 1000){\n      if(num %3 == 0 && output.contains(\"3\")){\n          System.out.println(\"dumb\");\n      }else if(num % 3 == 0){\n          System.out.println(\"idiot\");\n        }else if(output.contains(\"3\")){\n            System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }else {\n\t\t\tSystem.out.println(\"smart\");\n      }\n\t\t\n\t}\n}\n}"}
{"id": 1042, "language": "Python3", "code": "import sys\n\ndef classification_logic(param_str):\n    if not param_str.isdigit():\n        return \"invalid\"\n    \n    num_param = int(param_str)\n    \n    if num_param < 0 or num_param > 1000:\n        return \"invalid\"\n\n    is_divisible_by_three = (num_param % 3 == 0)\n    has_three_in_string = ('3' in param_str)\n\n    if is_divisible_by_three and has_three_in_string:\n        return \"dumb\"\n    elif is_divisible_by_three:\n        return \"idiot\"\n    elif has_three_in_string:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_application(cli_arguments):\n    for arg_item in cli_arguments:\n        print(classification_logic(arg_item))\n\nif __name__ == '__main_`':\n    run_application(sys.argv[1:])"}
{"id": 1043, "language": "Python3", "code": "import sys\nimport json\n\ndef predict_next_move(history):\n    base_sequence = [0, 1, 2]\n    robot_rules = {}\n\n    for i in range(len(history) - 3):\n        pattern = (\n            history[i][\"robot\"],\n            history[i+1][\"robot\"],\n            history[i+2][\"robot\"],\n            history[i+3][\"you\"],\n        )\n        next_action = history[i+3][\"robot\"]\n        robot_rules.setdefault(pattern, []).append(next_action)\n    \n    current = (\n        history[-3][\"robot\"],\n        history[-2][\"robot\"],\n        history[-1][\"robot\"],\n        history[-1][\"you\"],\n    )\n\n    if current in robot_rules:\n        moves = robot_rules[current]\n        return moves[len(moves) % 3]\n    return base_sequence[len(history) % 3]\n\ndef main(args):\n    with open(args[0], 'r') as file:\n        history = json.load(file)\n    print(predict_next_move(history))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1044, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    with open(argv[0], 'r') as f:\n        records = json.load(f)\n    rb = [0,1,2]\n    yu = []\n    for rec in records:\n        rb.append(rec['robot'])\n        yu.append(rec['you'])\n    key_hist = {}\n    for i in range(len(records)):\n        j = i + 3\n        k = (rb[j-3], rb[j-2], rb[j-1], yu[i])\n        if k in key_hist:\n            key_hist[k].append(rb[j])\n        else:\n            key_hist[k] = [rb[j]]\n    curr_params = tuple(rb[-3:] + [yu[-1]])\n    history = key_hist.get(curr_params, [])\n    h = len(history)\n    print(h % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1045, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nifstream ifs;\nofstream ofs;\nvector<int> vo(26);\nvector<int> vk(26);\nint vs=0;\nchar sp='m';\n\nvoid print_count();\nvoid calc_count();\nvoid calc_space();\nvoid print_space();\n\nint main(int argc, char *argv[])\n{\n  ifs.open(argv[2]);\n  ofs.open(argv[3]);\n  if(strcmp(argv[1],\"count\")==0){\n    calc_count();\n    print_count();\n  }\n  else if(strcmp(argv[1],\"space\")==0){\n    calc_space();\n    print_space();\n  }\n\n  return 0;\n}\n\n\nvoid print_count(){\n  ofs<<\"{\\n\";\n  for(int i=0;i<26;++i)ofs<<\"\\\"\"<<(char)('A'+i)<<\"\\\":\"<<vo[i]<<\",\\n\";\n  for(int i=0;i<26;++i)ofs<<\"\\\"\"<<(char)('a'+i)<<\"\\\":\"<<vk[i]<<\",\\n\";\n  ofs<<\"\\\"\"<<\" \"<<\"\\\":\"<<vs<<\"\\n\";\n  ofs<<\"}\\n\";\n}\n\nvoid calc_count(){\n  string s;\n  while(getline(ifs,s)){\n    for(char x:s){\n      if(x==32)++vs;\n      else if(65<=x&&x<=90)++vo[x-'A'];\n      else if(97<=x&&x<=122)++vk[x-'a'];\n    }\n  }\n}\n\nvoid print_space(){\n  ofs<<\"{\\n\";\n  ofs<<\"\\\"char\\\":\\\"\"<<sp<<\"\\\"\\n\";\n  ofs<<\"}\\n\";\n}\n\nvoid calc_space(){\n  calc_count();\n  vector<int> ans=vk;\n  int sum=vs;\n  for(int x:vo)sum+=x;\n  for(int x:vk)sum+=x;\n  sort(ans.begin(),ans.end());\n  //\u5358\u8a9e\u306e\u5e73\u5747\u6587\u5b57\u6570\u304c4.5\u3000\u2192\u3000\u30b9\u30da\u30fc\u30b9\u304c\u7d045.5\u6587\u5b57\u306b\u4e00\u56de\u51fa\u3066\u304f\u308b\n  int it=*lower_bound(ans.begin(),ans.end(),sum/5.5);\n  for(int i=0;i<26;++i){\n    if(vk[i]==it)sp='a'+i;\n  }\n}"}
{"id": 1046, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int id)\n{\n\tif(id % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\n\nbool stupid(int id)\n{\n\tint t = id,t1;\n\twhile(t!=0)\n\t{\n\tt1 = t%10;\n\t\t\n\t\tif(t1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tt/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int id)\n{\n\nif(idiot(id) && stupid(id))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n\n}\n\nbool smart(int id)\n{\n\tif(!idiot(id) && !stupid(id))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nbool invalid(int id)\n{\t\n\t\n\tif(!stupid(id) && !idiot(id) && !dumb(id) && !smart(id))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}else{\n\nprintf(\"invalid\\n\");\n\n}\n}\n\n\n\n}\n\n"}
{"id": 1047, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class App\n{\n\tstatic int x[]={-1,-1,-1,-1,-1,-1,-1,-1};\n\n\tstatic int cz[]={-1,-1,-1,-1,-1,-1,-1,-1};\n\n\tpublic static void main(String args[]) throws IOException\n\t{\n\t\tString output=\"\";\n\n\t\tint k=0;\n\t\tint c=0;\n\t\tint r=0;\n\n\t\tboolean flag=true;\n\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\toutput = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t// System.out.println(output);\t\n\n\t\t\t//file reading\n\t\t\ttry {\n\t\t\t\tFile file = new File(args[i]);\n\t\t\t\tFileReader filereader = new FileReader(file);\n\t\t\t\tBufferedReader bufferedReader = new BufferedReader(filereader);\n\n\t\t\t\tString data;\n\t\t\t\tint count=0;\n\t\t\t\twhile ((data = bufferedReader.readLine()) != null) {\n\t\t\t\t\tif(count==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tk=Integer.parseInt(data.trim());\n\t\t\t\t\t\t// System.out.println(\"k=\"+k);\n\t\t\t\t\t\tcount+=1;\n\t\t\t\t\t\tif(!(k>=2 && k<=8))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tflag=false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(data.trim().length()==3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tr=Character.getNumericValue(data.charAt(0));\n\t\t\t\t\t\t\tc=Character.getNumericValue(data.charAt(2));\n\t\t\t\t\t\t\t// System.out.println(\"c=\"+c+\",\"+\"r=\"+r);\n\t\t\t\t\t\t\tif(!(c>=0 && c<=7))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tflag=false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!(r>=0 && r<=7))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tflag=false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(flag==true)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//System.out.println(\"c=\"+c+\",\"+\"r=\"+r);\n\n\t\t\t\t\t\t\t\tx[r]=c;\n\t\t\t\t\t\t\t\tcz[r]=c;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tflag=false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfilereader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t  \te.printStackTrace();\n\t\t\t}    \n\t\t}\t\n\n\t\t// display();\n\t\tif(flag==true)\n\t\t\tplace(0,x.length);\n\t}\n\n\tpublic static void place(int r, int n)\n\t{\n\n\t\tfor (int c = 0; c< n; c++) {\n\t\t\tif (check(r, c)) {\n\t\t\t\tx[r] = c;\n\t\t\t\tif (r == n - 1)\n\t\t\t\t{\n\t\t\t\t\tdisplay();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tplace(r + 1, n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static boolean check(int r,int c)\n\t{\t\n\t\tfor (int i = 0; i <r; i++) {\n\t\t\t// System.out.println(x[r]);\n\t\t\tif ( x[i] == c || (i - r) == (x[i] - c) ||(i - r) == (c - x[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static void display()\n\t{\n\t\tboolean flag=true;\n\n\t\tfor(int z=0;z<8;z++)\n\t\t{\n\t\t\tif(cz[z]!=-1 && x[z]!=cz[z])\n\t\t\t{\n\t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(flag==true)\n\t\t{\n\t\t\tfor(int i=0;i<8;i++)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<8;j++)\n\t\t\t\t{\n\t\t\t\t\tif(x[i]==j)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.print(\"Q\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.print(\".\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"id": 1048, "language": "Python3", "code": "import sys\nimport json\n\ndef main(args):\n    path = args[0]\n    records = json.load(open(path))\n    r = [x[\"robot\"] for x in records]\n    o = [x[\"you\"] for x in records]\n\n    if len(r) < 3:\n        print(len(r) % 3)\n        return\n\n    pattern_map = {}\n    for i in range(len(r) - 3):\n        k = tuple(r[i:i+3]) + (o[i+3], )\n        pattern_map.setdefault(k, []).append(r[i+3])\n\n    key = tuple(r[-3:]) + (o[-1], )\n    plays = pattern_map.get(key, [])\n\n    if not plays:\n        print(0)\n    else:\n        print((plays[-1] + 1) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1049, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n foreach ($argv as $index=>$value) {\n   $inputnum = false;\n   $divided = false;\n\n     if($value % 3 == 0){\n       $divided = true;\n     }\n\n     if (strpos($value, \"3\") !== false) {\n       $inputnum = true;\n     }\n\n     if( $value >= 0 && $value <= 1000){\n       if($inputnum == true && $divided == true){\n         printf(\"%s\\n\", \"dumb\");\n       }\n       elseif($inputnum == true){\n         printf(\"%s\\n\", \"stupid\");\n       }\n       elseif($divided == true){\n         printf(\"%s\\n\", \"idiot\");\n       }\n       else{\n         printf(\"%s\\n\", \"smart\");\n       }\n     }\n     else{\n       printf(\"%s\\n\", \"invalid\");\n     }\n    }\n  }\n\nrun($argc - 1, array_slice($argv, 1));"}
{"id": 1050, "language": "Java", "code": "package boardgame;\n\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class QueensPlacement {\n    private static char[][] chessboard = new char[8][8];\n    private static ArrayList<int[]> fixedQueens = new ArrayList<>();\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Fill board with dots\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                chessboard[i][j] = '.';\n            }\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            fixedQueens.add(new int[]{r, c});\n            chessboard[r][c] = 'Q';\n        }\n\n        solve(k);\n\n        printBoard();\n    }\n\n    private static boolean isSafe(int r, int c) {\n        for (int[] queen : fixedQueens) {\n            int qRow = queen[0], qCol = queen[1];\n            if (qRow == r || qCol == c || Math.abs(qRow - r) == Math.abs(qCol - c)) {\n                return false;\n            }\n        }\n        for (int i = 0; i < r; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (chessboard[i][j] == 'Q' && (j == c || Math.abs(i - r) == Math.abs(j - c))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private static boolean solve(int placedQueens) {\n        if (placedQueens == 8) {\n            return true; // All queens are placed\n        }\n\n        for (int r = 0; r < 8; r++) {\n            for (int c = 0; c < 8; c++) {\n                if (chessboard[r][c] == '.' && isSafe(r, c)) {\n                    chessboard[r][c] = 'Q';\n                    if (solve(placedQueens + 1)) {\n                        return true;\n                    }\n                    chessboard[r][c] = '.'; // Backtrack\n                }\n            }\n        }\n        return false;\n    }\n\n    private static void printBoard() {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                System.out.print(chessboard[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1051, "language": "Java", "code": "import java.nio.file.*;\nimport java.util.*;\nimport com.google.gson.*;\n\npublic class Main {\n  static class Record {\n    int robot, you;\n  }\n\n  public static void main(String[] args) throws Exception {\n    String jsonStr = new String(Files.readAllBytes(Paths.get(args[0])));\n    Gson gson = new Gson();\n    Record[] records = gson.fromJson(jsonStr, Record[].class);\n\n    List<Integer> robotHands = new ArrayList<>();\n    List<Integer> youHands = new ArrayList<>();\n    for (Record r : records) {\n      robotHands.add(r.robot);\n      youHands.add(r.you);\n    }\n\n    // If not enough history, just assume starting 3 robot hands: rock(0), scissors(1), paper(2)\n    int len = robotHands.size();\n    int r3 = len >= 3 ? robotHands.get(len - 3) : (len == 2 ? 0 : (len == 1 ? 0 : 0));\n    int r2 = len >= 2 ? robotHands.get(len - 2) : (len == 1 ? 1 : 0);\n    int r1 = len >= 1 ? robotHands.get(len - 1) : 2;\n    int youLast = len >= 1 ? youHands.get(len - 1) : 0;\n\n    if (len < 3) {\n      r3 = (len >= 3) ? robotHands.get(len - 3) : (len == 2 ? 0 : (len == 1 ? 0 : 0));\n      r2 = (len >= 2) ? robotHands.get(len - 2) : (len == 1 ? 1 : 0);\n      r1 = (len >= 1) ? robotHands.get(len - 1) : 2;\n    }\n\n    // Build state key\n    String key = r3 + \",\" + r2 + \",\" + r1 + \",\" + youLast;\n\n    // Map to count the cycle for each key\n    Map<String, Integer> cycle = new HashMap<>();\n\n    // We go through all previous records from initial point where robot's hands >= 3\n    for (int i = 3; i < len; i++) {\n      String k = robotHands.get(i - 3) + \",\" + robotHands.get(i - 2) + \",\" + robotHands.get(i - 1) + \",\" + youHands.get(i - 1);\n      int c = cycle.getOrDefault(k, 0);\n      cycle.put(k, (c + 1) % 3);\n    }\n\n    int count = cycle.getOrDefault(key, 0);\n\n    // cycle 0->rock(0),1->scissors(1),2->paper(2)\n    int nextHand = 0;\n    if (count == 0) nextHand = 0;\n    else if (count == 1) nextHand = 1;\n    else nextHand = 2;\n\n    System.out.println(nextHand);\n  }\n}"}
{"id": 1052, "language": "Python3", "code": "import sys\nimport copy\nresult = []\ndef eight_queen_dfs(c_forbidden, rc_diff, rc_sum, row):\n    if row == 8:\n        global result\n        result = c_forbidden\n        return\n    for col in range(0, 8):\n        if c_forbidden[row] != -1:\n            eight_queen_dfs(c_forbidden, rc_diff, rc_sum, row + 1)\n        elif col not in c_forbidden and (row - col) not in rc_diff and (row + col) not in rc_sum:\n            temp_c_forbidden = copy.deepcopy(c_forbidden)\n            temp_c_forbidden[row] = col\n            eight_queen_dfs(temp_c_forbidden, rc_diff + [row - col], rc_sum + [row + col], row + 1)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        # print(i, v)\n        # print(\"argv[{0}]: {1}\".format(i, v))\n        k = -1\n        r = []\n        c = []\n        with open(v) as file:\n            for line in file:\n                if k == -1:\n                    k = int(line)\n                else:\n                    temp_r, temp_c = line.split(' ')\n                    r.append(int(temp_r))\n                    c.append(int(temp_c))\n        # print(k, r, c)\n\n        c_forbidden = [-1 for _ in range(0, 8)]\n        rc_diff, rc_sum = [], []\n        for index in range(0, k):\n            c_forbidden[r[index]] = c[index]\n            rc_diff.append(r[index] - c[index])\n            rc_sum.append(r[index] + c[index])\n        # print(c_forbidden)\n\n        eight_queen_dfs(c_forbidden, rc_diff, rc_sum, 0)\n        # print(result)\n        for location in result:\n            loc = int(location)\n            print('.' * loc + 'Q' + '.' * (8 - loc - 1))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1053, "language": "Java", "code": "package track;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int cnt = Integer.parseInt(args[0]);\n    Random random = new Random(0);\n    List<String> checkList = new ArrayList<String>();\n\t\tfor (int i = 0; i < cnt; i++) {\n      // \u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u529b\n      int randNum = random.nextInt(100);\n      String outChar = \"\";\n      if (randNum % 2 == 0) {\n        outChar = \"\u30c9\";\n      } else {\n        outChar = \"\u30ab\";\n      }\n      System.out.println(outChar);\n      makeNewStrList(outChar, checkList);\n\n      if (\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\".equals(String.join(\"\",checkList))) {\n        // \u30b7\u30b9\u30c6\u30e0\u7d42\u4e86\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n\t}\n  /**\n   * \u5224\u5b9a\u7528\u30ea\u30b9\u30c8\u751f\u6210\n  */\n  private static void makeNewStrList(String newChar, List<String> list) {\n    if (list.size() > 7) {\n      list.remove(0);\n    }\n    list.add(newChar);\n  }\n}\n"}
{"id": 1054, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__=='__main__':\n  main(sys.argv[1:])"}
{"id": 1055, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # 9\u9032\u6cd5\u306e\u6570\u5f0f\u3092\u53d7\u3051\u53d6\u3063\u3066\u8a08\u7b97\u30579\u9032\u6cd5\u3067\u51fa\u529b\n    expr = argv[0]\n    left, op, right = expr.split()\n    \n    # 9\u9032\u6cd5\u306e\u6587\u5b57\u5217\u309210\u9032\u6570\u306b\u5909\u63db\n    left_dec = int(left, 9)\n    right_dec = int(right, 9)\n    \n    # \u8a08\u7b97\n    if op == '+':\n        result = left_dec + right_dec\n    else:  # op == '*'\n        result = left_dec * right_dec\n    \n    # 10\u9032\u6570\u304b\u30899\u9032\u6570\u306b\u5909\u63db\n    if result == 0:\n        print(\"0\")\n        return\n    \n    digits = []\n    while result > 0:\n        digits.append(str(result % 9))\n        result //=9\n    print(\"\".join(digits[::-1]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1056, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint check(int num)\n{\n  int ans;\n  while(num>0)\n  {\n    ans=num%10;\n    if(ans==3)\n    {\n      return 1;\n    }\n    num=num/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) \n  {\n    int n=atoi(argv[i]);\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n    if(n!=0)\n    {\n    if(n%3==0 && check(n))\n    {\n      printf(\"dumb\\n\");\n    }\n    else if(n%3==0)\n    {\n      printf(\"idiot\\n\");\n    }  \n    else if(check(n))\n    {\n      printf(\"stupid\\n\");\n    }\n    else\n    {\n      printf(\"smart\\n\");\n    }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 1057, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class BasicSolution {\n\n  private static String getClassification(int n) {\n    if (n < 0 || n > 1000) {\n      return \"invalid\";\n    }\n    boolean divBy3 = (n % 3 == 0);\n    boolean contains3 = String.valueOf(n).contains(\"3\");\n\n    if (divBy3 && contains3) {\n      return \"dumb\";\n    } else if (divBy3) {\n      return \"idiot\";\n    } else if (contains3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(getClassification(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1058, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n // for (int i = 1; i < argc; i++) {\n //   cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  //}\n  //int a = *argv[1];\nint f = 0;\nint g = 0;\nint b = atoi(argv[1]);  \nfor (int i = 1; i < argc; i++){\n  int c = atoi(argv[i]);\n  \n  if (c % 3 == 0) f = 1;\n  while (c != 0){\n    if (c % 10 == 3) g = 1;\n    c = c / 10;\n  } \nif (f == 1 && g == 0)  cout << \"idiot\"<< endl;\n  else if (f == 0 && g == 1)  cout << \"stupid\"<< endl;\n   else if (f == 1 && g == 1)  cout << \"dumb\"<< endl;\n else if (f == 0 && g == 0)  cout << \"smart\"<< endl;\n \n \n\n}\n\n  /*if (b % 3 == 0) f = 1;\n  while (b != 0){\n    if (b % 10 == 3) g = 1;\n    b = b / 10;\n  } \n\n  //if (f == 0 && g == 0) cout << \"invalid\";\n  if (f == 1 && g == 0)  cout << \"idiot\";\n  else if (f == 0 && g == 1)  cout << \"stupid\";\n   else if (f == 1 && g == 1)  cout << \"dumb\";\n else if (f == 0 && g == 0)  cout << \"invalid\";\n*/ \n  \n  return 0;\n}\n"}
{"id": 1059, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nstring result = \"\";\nbool con1 = false, con2 = false, con3 = false;\nvoid check(string str) \n{ \n    // Compute sum of digits for check divisible\n    int n = str.length(); \n    int digitSum = 0; \n    string search = \"3\";\n    \n    for (int i=0; i<n; i++) \n        digitSum += (str[i]); \n  \n    // Check condiction below \n    if (digitSum % 3 == 0)\n    {\n      con1 = true;\n    }\n    if (str.find(search) != string::npos){\n      con2 = true;\n    }\n    if(con1 && con2){\n      con3 = true;\n      result = \"dumb\";\n    }\n    if(con1 && !con2){\n      result = \"idiot\";\n    }\n    if(!con1 && con2){\n      result = \"stupid\";\n    }\n    if(!con1 && !con2 && !con3){\n      result = \"smart\";\n    }\n} \nbool check_str(const std::string &str)\n{\n    return str.find_first_not_of(\"0123456789\") == std::string::npos;\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    con1 = false; \n    con2 = false; \n    con3 = false;\n    int output;\n    if(check_str(argv[i]))\n    {\n      check(argv[i]);\n    }\n    else\n    {\n      result = \"invalid\";\n    }\n    //cout << \"argv[\" << i << \"]:\" << result << \"\\n\";\n    cout << result << \"\\n\";\n  }\n  return 0;\n}\n"}
{"id": 1060, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <math.h>\n\n#define BUF_SIZE 100001\n\nint main(int argc, char *argv[]) {\n    char buf[BUF_SIZE];\n    FILE *f_in = fopen(argv[2], \"r\");\n    size_t size = fread(buf, 1, BUF_SIZE - 1, f_in);\n    buf[size] = 0;\n    fclose(f_in);\n\n    if (*argv[1] == 'c') { // count\n        long cnt[256] = {0};\n        for (size_t i = 0; i < size; i++) cnt[(unsigned char)buf[i]]++;\n        FILE *f_out = fopen(argv[3], \"w\");\n        fprintf(f_out, \"{\\n\");\n        fprintf(f_out, \"  \\\" \\\": %ld\", cnt[' ']);\n        for (char c = 'A'; c <= 'z'; c++) {\n            if (isalpha(c)) fprintf(f_out, \",\\n  \\\"%c\\\": %ld\", c, cnt[c]);\n        }\n        fprintf(f_out, \"\\n}\\n\");\n        fclose(f_out);\n    } else { // space or decrypt\n        char space_char = 'a';\n        double best_diff = 999.0;\n        for (char try_c = 'a'; try_c <= 'z'; try_c++) {\n            long chars = 0, words = 0;\n            int in_word = 0;\n            for (size_t i = 0; i < size; i++) {\n                char ch = (tolower(buf[i]) == try_c) ? ' ' : ((buf[i] == ' ') ? try_c : buf[i]);\n                if (isalpha(ch)) {\n                    chars++;\n                    if (!in_word) { words++; in_word = 1; }\n                } else { in_word = 0; }\n            }\n            double diff = words ? fabs((double)chars / words - 4.5) : 999.0;\n            if (diff < best_diff) {\n                best_diff = diff;\n                space_char = try_c;\n            }\n        }\n\n        if (*argv[1] == 's') { // space\n            FILE *f_out = fopen(argv[3], \"w\");\n            fprintf(f_out, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n            fclose(f_out);\n        } else { // decrypt\n            long freq[26] = {0};\n            for (size_t i = 0; i < size; i++) {\n                char ch = (tolower(buf[i]) == space_char) ? ' ' : ((buf[i] == ' ') ? space_char : buf[i]);\n                if (islower(ch)) freq[ch - 'a']++;\n                else if (isupper(ch)) freq[ch - 'A']++;\n            }\n            int max_i = 0;\n            for (int i = 1; i < 26; i++) if (freq[i] > freq[max_i]) max_i = i;\n            int shift = (max_i + 'a' - 'e' + 26) % 26;\n\n            FILE *f_out = fopen(argv[3], \"w\");\n            for (size_t i = 0; i < size; i++) {\n                char c = buf[i];\n                char original_c = (tolower(c) == space_char) ? ' ' : ((c == ' ') ? space_char : c);\n                if (isalpha(original_c)) {\n                    char base = isupper(original_c) ? 'A' : 'a';\n                    fputc((original_c - base - shift + 26) % 26 + base, f_out);\n                } else {\n                    fputc(original_c, f_out);\n                }\n            }\n            fclose(f_out);\n        }\n    }\n    return 0;\n}"}
{"id": 1061, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ninput_args = sys.argv[1:]\n\ndef check_input(p_input):\n  if not p_input.isdigit():\n    return False\n  if int(p_input)>1000 or int(p_input)<0:\n    return False\n  return True\ndef calculate(p_inp):\n  inp_con_3 = False\n  inp_div_3 = False\n  int_inp = int(p_inp)\n  if int_inp%3==0:\n    inp_div_3 = True\n  if '3' in p_inp:\n    inp_con_3 = True\n  if inp_con_3 and inp_div_3:\n    result = \"dumb\"\n  elif inp_con_3:\n    result = \"stupid\"\n  elif inp_div_3:\n    result = \"idiot\"\n  else:\n    result = \"smart\"\n  return result\n\nfor one_arg in input_args:\n  input_validation = check_input(one_arg)\n  if input_validation:\n    cal_result = calculate(one_arg)\n    print(cal_result)\n  else:\n    print(\"invalid\")"}
{"id": 1062, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\n// Utility function to validate queen placement\nbool can_place(int row, int col, const vector<string>& board) {\n    for (int i = 0; i < row; i++) {\n        if (board[i][col] == 'Q') return false;\n\n        if (col - (row - i) >= 0 && board[i][col - (row - i)] == 'Q') return false;\n\n        if (col + (row - i) < 8 && board[i][col + (row - i)] == 'Q') return false;\n    }\n    return true;\n}\n\n// Recursive backtracking method\nbool backtrack(int row, vector<string>& board, const vector<vector<bool>>& is_locked) {\n    if (row == 8) return true;\n\n    for (int col = 0; col < 8; col++) {\n        if (is_locked[row][col]) continue; // Skip locked cells\n        if (can_place(row, col, board)) {\n            board[row][col] = 'Q';\n            if (backtrack(row + 1, board, is_locked)) return true;\n            board[row][col] = '.';\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n\n    vector<string> board(8, string(8, '.'));\n    vector<vector<bool>> is_locked(8, vector<bool>(8, false));\n\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        cin >> r >> c;\n        board[r][c] = 'Q';\n        is_locked[r][c] = true;\n    }\n\n    backtrack(0, board, is_locked);\n\n    for (const auto& line : board) {\n        cout << line << endl;\n    }\n\n    return 0;\n}"}
{"id": 1063, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i++) {\n      String s = args[i];\n      String res = judgeBakAlgorithm(s);\n      System.out.println(res);\n    }\n  }\n  // \u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5224\u5b9a\n  static String judgeBakAlgorithm(String arg) {\n    int n;\n    // \u6574\u6570\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\n    try {\n      n = Integer.parseInt(arg);\n    } catch (NumberFormatException e) {\n      return \"invalid\";\n    }\n    if (n < 0 || n > 1000) return \"invalid\";\n    boolean mod3 = (n % 3 == 0);\n    boolean has3 = String.valueOf(n).contains(\"3\");\n    if (mod3 && has3) return \"dumb\";\n    if (mod3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 1064, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <json/json.h> // Assuming a JSON library is available\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u7528\u3044\u3066\u30b2\u30fc\u30e0\u306e\u8a18\u9332\u3092\u6271\u3046CLI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n  if (argc < 2) return 1; // Not enough arguments\n  string filePath = argv[1];\n\n  ifstream inputFile(filePath);\n  if (!inputFile.is_open()) return 1; // If the file can't be opened\n\n  // Read JSON data\n  Json::Value games;\n  inputFile >> games;\n  inputFile.close();\n\n  vector<int> robotMoves = {0, 1, 2}; // Starts with rock, scissors, paper\n  int opponentLastMove = games[0][\"you\"].asInt(); // Initial value\n\n  // Collect previous moves\n  for (const auto& game : games) {\n    opponentLastMove = game[\"you\"].asInt();\n    robotMoves.push_back(game[\"robot\"].asInt());\n    if (robotMoves.size() > 4) {\n      robotMoves.erase(robotMoves.begin()); // Maintain only last three moves\n    }\n  }\n\n  int moveCount = 0;\n  // Determine the next robot move based on history\n  for (int i = 0; i < 3; ++i) {\n    if (robotMoves[i] == opponentLastMove) {\n      moveCount++;\n    }\n  }\n\n  // The move is decided in a cycle based on previous moves\n  cout << (robotMoves[moveCount % 3]) << endl; \n\n  return 0;\n}"}
{"id": 1065, "language": "Python3", "code": "import sys\n\ndef get_grade(s_value):\n    if not s_value.isdigit(): return \"invalid\"\n    \n    i_value = int(s_value)\n    \n    if not (0 <= i_value <= 1000): return \"invalid\"\n\n    divisible = (i_value % 3 == 0)\n    has_three = ('3' in s_value)\n\n    if divisible and has_three: return \"dumb\"\n    if divisible: return \"idiot\"\n    if has_three: return \"stupid\"\n    return \"smart\"\n\ndef runner_main(arg_list):\n    for single_arg in arg_list:\n        print(get_grade(single_arg))\n\nif __name__ == '__main__':\n    runner_main(sys.argv[1:])"}
{"id": 1066, "language": "Java", "code": "package track; \nimport java.io.*;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args)\n {   \n ArrayList<Integer> robot = new ArrayList<Integer>(); \n   ArrayList<Integer> you = new ArrayList<Integer>();\n    ArrayList<Parameter> parameter = new ArrayList<Parameter>(); \n   int robotIndex=0,youIndex=0;  \n  String json = convert(args[0]);\n    String[] lines=json.split(\"}\");  \n  for(int i=0;i<lines.length;i++)  \n  {    \n  String[] attrip=lines[i].split(\",\");   \n   if(attrip[0].contains(\"robot\"))\n{       \n robot.add(Integer.parseInt(attrip[0].split(\":\")[1].trim()));  \n    } if(attrip.length>=2)     \n{       \n   if(attrip[1].contains(\"you\")){       \n   you.add(Integer.parseInt(attrip[1].split(\":\")[1].trim()));      \n  }\n      }   \n    }\n    int robotSize = robot.size(); \n   int youSize = you.size(); \n   if(robotSize>=3)   \n {       \n for(int i=0;i<robot.size()-3;i++)  \n      {  \n       Parameter temp = new Parameter(robot.get(i),robot.get(i+1),robot.get(i+2),you.get(i+2));  \n        parameter.add(temp);  \n      }\n       Parameter decider = new Parameter(robot.get(robotSize-3),robot.get(robotSize-2),robot.get(robotSize-1),you.get(youSize-1));   \n     int count = 0; \n       for(int j=0; j< parameter.size();j++)\n        {    \n      if(parameter.get(j).equals(decider))   \n       {          \n  count++;         \n}        \n switch(count%3)    \n      {          \n  case 0: System.out.println(2);break;  \n          case 1: System.out.println(0);break;      \n      case 3: System.out.println(1);break;         \n}     \n   }   \n }\n else \n   {  switch(robotSize)      \n{ \n      case 0: System.out.println(2);break;     \n   case 1: System.out.println(0);break;       \n case 3: System.out.println(1);break;   \n   }   \n }\n}  public static String convert(String filename)\n{\n    StringBuilder build = new StringBuilder();  \n try{\n        FileInputStream fis=new FileInputStream(filename); \n       int content;       \n while((content = fis.read())!=-1)      \n  {\n          build.append((char)content);       \n }\n    } catch(Exception exp)   \n {\n      exp.printStackTrace();  \n  }\n    return build.toString();\n  }\n}\nclass Parameter{\n  int last; \n int last1;\n  int last2;\n  int opp; \n int result;\n  Parameter(int x, int y, int z, int a, int b)\n  {  \n  this.last = x; \n   this.last1 = y;    \nthis.last2 = z;    \nthis.opp = a;    \nthis.result = b;\n  }  \nParameter(int x, int y, int z, int a)\n  {    \nthis.last = x; \n   this.last1 = y;    \nthis.last2 = z;  \n  this.opp = a; \n }  public boolean equals(Parameter p)  \n{\n    if((p.last == this.last)&&(p.last1 == this.last1)&&(p.last2 == this.last2)&&(p.opp == this.opp))  \n {    \n  return true;  \n  }    return false; \n }\n}"}
{"id": 1067, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint main(int argc, char *argv[])\n{\n  int i,a,r,n;\n  for (int i = 1; i < argc; i++) {\n    int count=0;\n    \n\n    a=atoi(argv[i]);\n      \n       n=a;\n       \n       if(isdigit(argv[i])==0)\n       {\n\n       if(a>0 && a<=1000)\n       {\n\n    while(n>0)\n    {\n      r=n%10;\n      if(r==3)\n      {\n        count=count+1;\n      }\n      n=n/10;\n    }\n    if(a%3==0 && count==0)\n    \n      printf(\"idiot\\n\");\n    \n    else if(a%3!=0 && count!=0)\n    \n      printf(\"stupid\\n\");\n    \n    else if(a%3==0 && count!=0)\n    \n      printf(\"dumb\\n\");\n    \n    else if(a%3!=0 && count==0)\n      printf(\"smart\\n\");\n\n       }\n       \n    }\n    else{\n      printf(\"invalid\");\n    }\n    \n\n      \n  }\n  return 0;\n}\n"}
{"id": 1068, "language": "Java", "code": "public class IdiotChecker {\n  public static void main(String[] args) {\n    for (String val : args) {\n      try {\n        int number = Integer.parseInt(val);\n        if (number < 0 || number > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean div3 = (number % 3 == 0);\n          boolean has3 = val.contains(\"3\");\n          if (div3 && has3) {\n            System.out.println(\"dumb\");\n          } else if (div3) {\n            System.out.println(\"idiot\");\n          } else if (has3) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } catch(Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1069, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean isInteger(String s) {\n    return isInteger(s,10);\n}\n\npublic static boolean isInteger(String s, int radix) {\n    if(s.isEmpty()) return false;\n    for(int i = 0; i < s.length(); i++) {\n        if(i == 0 && s.charAt(i) == '-') {\n            if(s.length() == 1) return false;\n            else continue;\n        }\n        if(Character.digit(s.charAt(i),radix) < 0) return false;\n    }\n    return true;\n}\n  public static void main(String[] args) {\n\n       \n\n\n    for (int i = 0, l = args.length; i < l; i++) {\n\n      if (isInteger(args[i]) ) {\n        int num = Integer.parseInt(args[i]);\n      }  else{\n         {System.out.println(\"invalid\");}   \n      }\n      \n        if(((num % 3) == 0) && (args[i].indexOf(\"3\")>=0))\n        {System.out.println(\"dumb\");}\n        else  if((num % 3) == 0)\n        {System.out.println(\"idiot\");}   \n      \n        else if(args[i].indexOf(\"3\")>=0 )\n        {System.out.println(\"stupid\");}\n      \n        else if((num % 3) != 0){\n          System.out.println(\"smart\");\n        }\n      }\n      \n\n     \n      \n\n    }\n  }\n}\n //String output = String.format(\"argv[%s]: %s\", i, args[i]);"}
{"id": 1070, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n#include <string.h> // For strchr and sprintf\n\n#define MAX_NUM_DIGITS_1000 4 // 1000 has 4 digits, plus null terminator\n\n// Checks if a number contains the digit '3' by converting it to a string.\nbool has_digit_three_str(int num) {\n    if (num == 0) return false; // 0 does not contain '3'\n    char num_as_str[MAX_NUM_DIGITS_1000 + 1]; // Buffer for string conversion\n    sprintf(num_as_str, \"%d\", num); // Convert integer to string\n    return strchr(num_as_str, '3') != NULL; // Search for '3'\n}\n\n// Applies the 3 Idiots Algorithm to a given number.\nconst char* evaluate_number(int input_num) {\n    bool is_div_by_3 = (input_num % 3 == 0);\n    bool includes_digit_3 = has_digit_three_str(input_num);\n\n    if (is_div_by_3 && includes_digit_3) {\n        return \"dumb\";\n    } else if (is_div_by_3) {\n        return \"idiot\";\n    } else if (includes_digit_3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int idx = 1; idx < argc; idx++) {\n    char *parsing_end_ptr;\n    long value_parsed = strtol(argv[idx], &parsing_end_ptr, 10);\n\n    // Check if the entire string was a valid number\n    if (*parsing_end_ptr != '\\0' || parsing_end_ptr == argv[idx]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Check if the number is within the specified range\n    if (value_parsed < 0 || value_parsed > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", evaluate_number((int)value_parsed));\n  }\n  return 0;\n}"}
{"id": 1071, "language": "Python3", "code": "import sys\nimport unicodedata\n\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    flag = 0\n    for char in argv[i]:\n      status = unicodedata.east_asian_width(char)\n      if status == 'F':\n         #print('{0} is full-width.'.format(char))\n         flag=1\n      #elif status == 'H':\n         #print('{0} is half-width.'.format(char))\n    if(flag==1):\n      print('invalid')\n    else:\n      try:\n        a = int(argv[i])\n        if(a%3==0):\n          if('3' in list(argv[i]) ):\n            print('dumb')\n          else:\n            print('idiot') \n        elif('3' in list(argv[i])):\n          print('stupid')\n        else:\n          print('smart')\n      except:\n        print('invalid')\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1072, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main(int argc, char *argv[])\n{\n   int i,var,pow,flag;\n  for (int i = 1; i < argc; i++)\n   {\n      flag=0;\n      if(strcmp(argv[i],\"0\")==0)\n         printf(\"smart\\n\");\n      else\n        {\n          var=atoi(argv[i]);\n           if(var<=0||var>1000)\n             {\n               printf(\"invalid\\n\");\n             }\n           else{\n             pow=1;\n             while(var/pow!=0)\n             {\n               if(((var/pow)%10)==3 && (var%3)==0)\n                {\n                  flag=2;\n                  printf(\"dumb\\n\");\n                  break;\n                }\n               if(((var/pow)%10)==3 && (var%3)!=0) \n               {\n                 printf(\"stupid\\n\");\n                 flag=3;\n                 break;\n               }\n               if(((var/pow)%10)!=3 && (var%3)==0)\n               {\n                 flag=1;\n               }\n               pow=pow*10; \n               }\n               if(flag==1)\n                 printf(\"idiot\\n\");\n               if(flag==0)\n               printf(\"smart\\n\");\n               }\n           }  \n        }       \n  \n  return 0;\n}\n"}
{"id": 1073, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  \n  argv.forEach((v, i) => {\n    console.log(idiot(v));\n  });\n  \n}\n\nfunction idiot(x){\n  const number = parseInt(x);\n  if (number >= 0 && number <= 1000) {\n    if ((number % 3 === 0) && (number+'').includes('3')) {\n    return 'dumb';\n  }\n  if (number % 3 === 0) {\n    return 'idiot';\n  }\n  if ((number+'').includes('3')) {\n    return 'stupid';\n  }\n  return 'smart';\n  }\n  return 'invalid'; \n  \n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 1074, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    if (is_numeric($value) && 0 <= $value && $value <= 1000) {\n      if ($value % 3 == 0 && strpos($value, '3')!== false) {\n        printf(\"%s\\n\", 'dumb');        \n      } else if (strpos($value, '3')) {\n        printf(\"%s\\n\", 'stupid');\n      } else if ($value % 3 == 0) {\n        printf(\"%s\\n\", 'idiot');        \n      } else {\n        printf(\"%s\\n\", 'smart');\n      }\n    } else {\n      printf(\"%s\\n\", 'invalid'); \n    }\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1075, "language": "Java", "code": "package track;\n\npublic class App \n{\n\npublic static int idiot(int v)\n{\nint rem;\nwhile(v>0)\n{\nrem = v%10;\nv = v/10;\nif(rem == 3)\n{\nreturn 1;\n}\n}\nreturn 0;\n}\n\n  public static void main(String[] args) throws Exception\n{\n\nint xy;\n\n    for (int i = 0, l = args.length; i < l; i++) \n{\nif(args[i].equals(\"\uff11\uff13\"))\n{\nSystem.out.println(\"invalid\");\ncontinue;\n}\n      try\n{\nxy = Integer.parseInt(args[i]);\nif(xy >= 0 && xy <= 1000)\n{\nif(xy % 3 == 0 && idiot(xy) == 1)\n{\nSystem.out.println(\"dumb\");\n}\nelse if(xy % 3 == 0)\n{\nSystem.out.println(\"idiot\");\n}\nelse if(idiot(xy)==1)\n{\nSystem.out.println(\"stupid\");\n}\nelse\n{\nSystem.out.println(\"smart\");\n}\n}\n}\ncatch(NumberFormatException e)\n{\nSystem.out.println(\"invalid\");\n}\n    }\n  }\n}"}
{"id": 1076, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    \n    fixed_r_to_c = {}\n    col_mask, d1_mask, d2_mask = 0, 0, 0\n    \n    for _ in range(k):\n        r_val, c_val = map(int, sys.stdin.readline().split())\n        fixed_r_to_c[r_val] = c_val\n        col_mask |= (1 << c_val)\n        d1_mask |= (1 << (r_val - c_val + 7))\n        d2_mask |= (1 << (r_val + c_val))\n\n    solution_path = [-1] * 8\n    for r_val, c_val in fixed_r_to_c.items():\n        solution_path[r_val] = c_val\n\n    def find_solution(r, c_m, d1_m, d2_m):\n        if r == 8:\n            for c_pos in solution_path:\n                print('.' * c_pos + 'Q' + '.' * (7 - c_pos))\n            return True\n\n        if r in fixed_r_to_c:\n            return find_solution(r + 1, c_m, d1_m, d2_m)\n        \n        for c in range(8):\n            if not (c_m & (1 << c)) and \\\n               not (d1_m & (1 << (r - c + 7))) and \\\n               not (d2_m & (1 << (r + c))):\n                \n                solution_path[r] = c\n                if find_solution(r + 1, \n                                 c_m | (1 << c),\n                                 d1_m | (1 << (r - c + 7)),\n                                 d2_m | (1 << (r + c))):\n                    return True\n        return False\n\n    find_solution(0, col_mask, d1_mask, d2_mask)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1077, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n\n      if(args[i].matches(\"[0-9]+\")) {\n\n      int num = Integer.parseInt(args[i]);\n      \n        if (num>=0 && num<=1000)    {\n\n            //is both divisible by 3 and includes a number 3, output should be dumb\n            if(checkDivide(num) && checkThree(num))\n                System.out.println(\"dumb\");\n            else\n                if(checkDivide(num))\n                    System.out.println(\"idiot\"); //  is divisible by 3, output should be idiot\n            else\n                if(checkThree(num))\n                    System.out.println(\"stupid\"); //  includes a number 3, output should be stupid\n\n            else\n                    System.out.println(\"smart\");\n\n        } else\n            System.out.println(\"invalid\");\n      } else\n        System.out.println(\"invalid\");\n\n    } \n\n\n  }\n\n      static boolean checkDigit(String numberCheck) {\n\n        char[] cha = numberCheck.toCharArray();\n        for(char ch : cha){\n            if(!Character.isDigit(ch))\n            return false;\n        }\n        return true;\n    }\n\n      static boolean checkDivide(int numThree)    {\n        if(numThree%3==0)\n            return true;\n        else\n            return false;\n    }\n\n    static boolean checkThree(int numCheck) {\n            while(numCheck > 0)\n            {\n                if(numCheck % 10 == 3)\n                    return true;\n\n                numCheck /= 10;\n            }\n            return false;\n    }\n\n}\n"}
{"id": 1078, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <string>\n#include <vector>\n#include <cctype>\n#include <algorithm>\nusing namespace std;\n\nvoid doCount(const string& path, const string& out) {\n    ifstream in(path);\n    map<char,int> ans;\n    char c;\n    while (in.get(c)) {\n        if(isalpha(c) || c == ' ') ans[c]++;\n    }\n    in.close();\n    ofstream o(out);\n    o << \"{\\n\";\n    bool f = true;\n    for(auto &p: ans) {\n        if(!f) o << \",\\n\";\n        f = false;\n        o << \"  \\\"\" << p.first << \"\\\": \" << p.second;\n    }\n    o << \"\\n}\";\n    o.close();\n}\n\nchar find_fake_space(const string& path) {\n    ifstream in(path);\n    map<char,int> cnts;\n    char c;\n    while (in.get(c)) if(isalpha(c)) cnts[c]++;\n    in.close();\n    int maxi = 0;\n    char ans = 0;\n    for(auto &p : cnts) {\n        if(p.second > maxi) {\n            ans = p.first;\n            maxi = p.second;\n        }\n    }\n    return ans;\n}\n\nvoid doSpace(const string& path, const string& out) {\n    char space = find_fake_space(path);\n    ofstream o(out);\n    o << \"{\\n  \\\"char\\\": \\\"\" << space << \"\\\"\\n}\";\n    o.close();\n}\n\nint try_shift(const map<char, int>& freq) {\n    vector<pair<int,char>> vec;\n    for(auto p: freq) if(islower(p.first)) vec.emplace_back(p.second, p.first);\n    sort(vec.rbegin(), vec.rend());\n    if(vec.empty()) return 0;\n    char c = vec[0].second;\n    return (c - 'e' + 26) % 26;\n}\n\nstring revert_spaces(const string& s, char sp) {\n    string y;\n    for(char c: s) {\n        if(c == sp) y += ' ';\n        else if(c == ' ') y += sp;\n        else y += c;\n    }\n    return y;\n}\n\nstring decipher(const string&s) {\n    map<char,int> freq;\n    for(char c: s) if(islower(c)) freq[c]++;\n    int shift = try_shift(freq); // guess shift\n    string t;\n    for(char c: s) {\n        if(islower(c)) t += (c-'a'-shift+26)%26+'a';\n        else if(isupper(c)) t += (c-'A'-shift+26)%26+'A';\n        else t += c;\n    }\n    return t;\n}\n\nvoid doDecrypt(const string& path, const string& out) {\n    ifstream in(path);\n    string enc((istreambuf_iterator<char>(in)), istreambuf_iterator<char>());\n    char sp = find_fake_space(path);\n    string s2 = revert_spaces(enc, sp);\n    string orig = decipher(s2);\n    ofstream o(out);\n    o << orig;\n    o.close();\n}\n\nint main(int argc, char *argv[]) {\n    string cmd = argv[1], in = argv[2], out = argv[3];\n    if(cmd==\"count\") doCount(in, out);\n    else if(cmd==\"space\") doSpace(in, out);\n    else if(cmd==\"decrypt\") doDecrypt(in, out);\n    return 0;\n}"}
{"id": 1079, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u30b7\u30f3\u30d7\u30eb\u5909\u63db \u95a2\u6570\u578b\u30b9\u30bf\u30a4\u30eb(\u3084\u3084\u5197\u9577)\n    System.out.println(toRoman(Integer.parseInt(args[0])));\n  }\n\n  private static String toRoman(int n) {\n    String[] m = {\"\", \"M\", \"MM\", \"MMM\"};\n    String[] c = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    String[] x = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    String[] i = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n    return m[n/1000] + c[(n%1000)/100] + x[(n%100)/10] + i[n%10];\n  }\n}"}
{"id": 1080, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport track.Solution;\n\npublic class App {\n  public static void main(String[] args) {\n    Solution solution = new Solution();\n    String command = args[0];\n    String intputPath = args[1];\n    try {\n      BufferedReader br = new BufferedReader(new FileReader(intputPath));\n      StringBuilder sb = new StringBuilder();\n      String line = br.readLine();\n      while (line != null) {\n        sb.append(line);\n        line = br.readLine();\n      }\n      br.close();\n      BufferedWriter bw = new BufferedWriter(new FileWriter(args[2]));\n      bw.write(solution.solve(command, sb.toString()));\n      bw.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"}
{"id": 1081, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func (int);\n\nint main(int argc,char **argv)\n{\n  int i =0;\n  char j =0;\n\n  if(argc < 2)\n  {\n    printf(\"invalid\\n\");\n  }\n  else\n  {\n    for (j=1; j<argc; j++)\n    {\n      if((*argv[j]>47) && (*argv[j]<58))\n      {\n        i=atoi(argv[j]);\n        if((i>=0) && (i<=1000))\n        {\n          func(i);\n        }\n        else\n        {\n          printf(\"invalid\\n\");\n        }\n      }\n      else\n      {\n        printf(\"invalid\\n\");\n      }\n    }\n  }\n  return 0;\n}\n\nint func(int number)\n{\n  int flag=0;\n  int temp=0;\n  int num=0;\n  int i=0;\n  num=number;\n  for(i=0;i<3;i++)\n  {\n    temp=num % 10;\n    num= num / 10;\n    if(temp==3)\n    {\n      flag=1;\n      break;\n    }\n  }\n  if(flag==1)\n  {\n    if((number % 3)==0)\n    {\n      printf(\"dumb\\n\");\n    }\n    else\n    {\n      printf(\"stupid\\n\");\n    }\n  }\n  else\n  {\n    if((number % 3)==0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else\n    {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}\n\n"}
{"id": 1082, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tint ans,count;\n    for (int i = 0, l = args.length; i < l; i++)\n      {\n        try\n        {\n\t\t\t    String output = String.format(\"%s\", args[i]);\n          ans=4;count=0;\n          int a=(int)output.charAt(0);\n          if(a>256)\n          {\n            System.out.println(\"invalid\");\n            break;\n          }\n\t\t\t    Integer num=Integer.parseInt(output);  \n          if(num%3==0)\n          {\n            ans=1;count++;\n          }\n          if(output.contains(\"3\"))\n          {\n            ans=2;count++;\n          }\n          if(count==2)\n          {\n            ans=3;\n          }\n          switch(ans)\n          {\n            case 1:\n              System.out.println(\"idiot\");break;\n            case 2:\n              System.out.println(\"stupid\");break;\n            case 3:\n              System.out.println(\"dumb\");break;\n            case 4:\n              System.out.println(\"smart\");break;\n          }\n\t\t    }\n        catch(Exception e)\n        {\n          System.out.println(\"invalid\");\n        }\n    }\n\t}\n}\n"}
{"id": 1083, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      String output = \"\";\n      try {\n        int num = Integer.parseInt(s);\n        if (num > 1000 || num < 0) output = \"invalid\";\n        else if (num % 3 == 0 && s.indexOf('3') != -1) output = \"dumb\";\n        else if (num % 3 == 0) output = \"idiot\";\n        else if (s.indexOf('3') != -1) output = \"stupid\";\n        else output = \"smart\";\n      } catch (Exception e) {\n        output = \"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}"}
{"id": 1084, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n        for (int i = 0, l = args.length; i < l; i++) {\n            try {\n                if(isFullWidth(args[i])) {\n                    System.out.println(\"invalid\");\n                } else {\n                    Integer numerifyInput = Integer.parseInt(args[i]);\n                    if (numerifyInput < 0 || numerifyInput > 1000) {\n                        System.out.println(\"invalid\");\n                    } else {\n                        boolean isDivisible = isDivisible(numerifyInput);\n                        boolean isIncludeThree = isIncludes3(args[i]);\n                        if (isDivisible && isIncludeThree) {\n                            System.out.println(\"dumb\");\n                        } else if (isDivisible) {\n                            System.out.println(\"idiot\");\n                        } else if (isIncludeThree) {\n                            System.out.println(\"stupid\");\n                        } else {\n                            System.out.println(\"smart\");\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"invalid\");\n            }\n\n        }\n    }\n\n    public static boolean isDivisible(Integer input) {\n        if(input % 3 == 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean isIncludes3(String input) {\n        if(input.contains(\"3\")) {\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean isFullWidth(String str) {\n        for (char c : str.toCharArray())\n            if ((c & 0xff00) == 0xff00)\n                return true;\n        return false;\n    }\n}\n"}
{"id": 1085, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nbool isStupid(char* str);\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    int num = atoi(argv[i]);\n    if(num > 0 && num <= 1000)\n    {\n      if(!isStupid(argv[i])) {\n        if(num % 3 == 0)\n          cout << \"idiot\";\n        else\n          cout << \"smart\";\n      }\n      else {\n        if(num % 3 == 0)\n          cout << \"dumb\";\n        else\n          cout << \"stupid\";\n      }\n    }\n    else\n      cout << \"invalid\";\n\n    cout << endl;\n  }\n  \n  return 0;\n}\n\nbool isStupid(char* str) {\n   for(int i = 0; i < strlen(str); i++) {\n      if(str[i] == '3')\n        return true;\n   }\n   return false;\n}"}
{"id": 1086, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n        string str = null;\n        int number ;\n        try\n        {\n        for (int i = 0; i < args.Length; i++)\n        {\n            if((str = args[i])!=null)\n            {\n              if(int.TryParse(str, out number))// to check whether the string is an integer or not\n              {\n              //number = Int32.Parse(str);\n              if(str.Contains(\"3\") && (number%3) == 0)\n              {\n                Console.WriteLine(\"dumb\");\n              }\n              else if(str.Contains(\"3\") && (number%3) != 0)\n              {\n                Console.WriteLine(\"stupid\");\n              }\n              else if(!str.Contains(\"3\") && (number%3) == 0)\n              {\n                Console.WriteLine(\"idiot\");\n              }\n              else if(!str.Contains(\"3\") && (number%3) != 0)\n              {\n                Console.WriteLine(\"smart\");\n              }\n              else\n              {\n                Console.WriteLine(\"Invalid\");\n              }\n              }\n              else\n              {\n                Console.WriteLine(\"Invalid\");\n              }\n            }                              \n        }    \n        }    \n        catch(Exception e)\n        {\n          Console.WriteLine(e);\n        }\n    }\n}\n"}
{"id": 1087, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdlib.h>\n int idiot_function(int input)\n {\n   if(input%3==0)\n   {\n     return 1;\n   }\n   else\n   {\n     return 0;\n   }\n }\n int stupid_function(int input)\n {\n   int temp=input,temp_one;\n   while(temp!=0)\n   {\n     temp_one=temp%10;\n     if(temp_one==3)\n     {\n       return 1;\n     }\n     temp=temp/10;\n   }\n   return 0;\n  }\n int dump_function(int input)\n {\n   if(idiot_function(input)&&stupid_function(input))\n   {\n     return 1;\n   }\n   else\n   {\n     return 0;\n   }\n }\n int smart_function(int input)\n {\n   if((!idiot_function(input))&&(!stupid_function(input)))\n   {\n     return 1;\n   }\n   else\n   {\n     return 0;\n   }\n }\n int invalid_function(int input)\n {\n   if((!idiot_function(input))&&(!stupid_function(input))&&(!dump_function(input))&&(!smart_function(input)))\n   {\n     return 1;\n   }\n   else\n   {\n     return 0;\n   }\n }\nint main(int argc, char *argv[])\n{\n  int length = argc-1, number;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int inc = 1; inc <= length; inc++) {\n    number = atoi(argv[inc]);\n    if(number!=0)\n    {\n      if(idiot_function(number)&&stupid_function(number))\n      {\n        printf(\"dump\\n\");\n      }\n      else\n      {\n        if(idiot_function(number))\n        {\n          printf(\"idiot\\n\");\n        }\n        else if(stupid_function(number))\n        {\n          printf(\"stupid\\n\");\n        }\n        else if(smart_function(number))\n        {\n          printf(\"smart\\n\");\n        }\n        else if(invalid_function(number))\n        {\n          printf(\"invalid\\n\");\n        }\n      }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n  }\n}"}
{"id": 1088, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n"}
{"id": 1089, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    static final int N = 8;\n    static int k;\n    static int[] fixed_r, fixed_c;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        k = sc.nextInt();\n        fixed_r = new int[k];\n        fixed_c = new int[k];\n        for (int i = 0; i < k; i++) {\n            fixed_r[i] = sc.nextInt();\n            fixed_c[i] = sc.nextInt();\n        }\n        sc.close();\n\n        int[] p = new int[N];\n        for (int i = 0; i < N; i++) {\n            p[i] = i;\n        }\n        generatePermutations(p, 0);\n    }\n\n    private static void generatePermutations(int[] p, int index) {\n        if (index == N) {\n            if (isValidSolution(p)) {\n                printSolution(p);\n                System.exit(0);\n            }\n            return;\n        }\n\n        for (int i = index; i < N; i++) {\n            swap(p, index, i);\n            generatePermutations(p, index + 1);\n            swap(p, index, i); // backtrack\n        }\n    }\n\n    private static boolean isValidSolution(int[] p) {\n        // Check pre-placed queens\n        for (int i = 0; i < k; i++) {\n            if (p[fixed_r[i]] != fixed_c[i]) {\n                return false;\n            }\n        }\n\n        // Check diagonals\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if (Math.abs(i - j) == Math.abs(p[i] - p[j])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    private static void printSolution(int[] p) {\n        char[][] board = new char[N][N];\n        for (int i = 0; i < N; i++) {\n            Arrays.fill(board[i], '.');\n            board[i][p[i]] = 'Q';\n            System.out.println(new String(board[i]));\n        }\n    }\n}"}
{"id": 1090, "language": "Python3", "code": "import sys\n\ndef check_number(value):\n    if not value.isdigit():\n        return \"invalid\"\n    \n    num = int(value)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    contains_three = '3' in value\n    is_multiple_of_three = (num % 3 == 0)\n    \n    if is_multiple_of_three and contains_three:\n        return \"dumb\"\n    elif is_multiple_of_three:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # CLI\u306e\u5f15\u6570\u3092\u51e6\u7406\u3057\u3066\u7d50\u679c\u3092\u51fa\u529b\n    results = [check_number(arg) for arg in argv]\n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1091, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    subcommand = argv[0]\n    input = argv[1]\n    output = argv[2]\n    # print(\"subcommand: {}\".format(argv[0]))\n    # print(\"input: {}\".format(argv[1]))\n    # print(\"output: {}\".format(argv[2]))\n\n    # count\n    key_freq = {}\n    lettercount = 0\n  \n    for i in range(65, 91):\n      key_freq[chr(i)] = 0\n    for i in range(97,123):\n      key_freq[chr(i)] = 0\n    key_freq[' '] = 0\n\n    f = open(input)\n    line = f.readline()\n\n    while line:\n      for ch in line:\n        if ch in key_freq.keys():\n          key_freq[ch] += 1\n          lettercount += 1\n      line = f.readline()\n      \n    f.close()\n\n    # space\n    approx_space_count = lettercount//4.5 # average word length 4.5; so there will be approximately lettercount/4.5 spaces\n                                          # and approx_space_count should be close to frequency of a lower case letter\n    diff_with_frequency = []\n    for i in range(97,123):\n      diff_with_frequency.append(abs(key_freq[chr(i)]-approx_space_count))\n    minimum_difference = diff_with_frequency.index(min(diff_with_frequency))\n    space_replace_char = {'char':chr(minimum_difference+97)}\n\n    # decrypt\n\n    \n    f = open(input)\n    line = f.readline()\n    buffer = \"\"\n\n    while line:\n      for ch in line:\n        if ch == space_replace_char['char']: # replace space\n          buffer += \" \"\n        elif 67<=ord(ch)<=90 or 99<=ord(ch)<=123:\n          buffer += chr(ord(ch)-2) # going backing two charachters\n        elif 65<=ord(ch)<=67 or 97<=ord(ch)<=99:\n          buffer += chr(ord(ch)+24) # circled through all the charachters a->y, b->z\n        else:\n          buffer += ch\n      line = f.readline()\n      \n    f.close()\n    # shift chars by 2\n\n\n    if subcommand == 'count':\n      with open(output, 'w') as fp:\n        json.dump(key_freq, fp)\n    elif subcommand == 'space':\n      with open(output, 'w') as fp:\n        json.dump(space_replace_char, fp)\n    elif subcommand == 'decrypt':\n        with open(output, 'w') as fp:\n          fp.write(buffer)\n\n\n\n    \n\n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1092, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nint rows[N], cols[N], d1[2*N-1], d2[2*N-1];\nint board[N]; // board[r] = c means queen at (r, c)\nint preset[N]; // -1 means not preset\n\nint place(int r) {\n    if (r == N) return 1;\n    if (preset[r] != -1) return place(r+1); // already preset, skip row\n\n    for (int c=0;c<N;c++) {\n        if (cols[c] || d1[r+c] || d2[r-c+N-1]) continue;\n        cols[c] = d1[r+c] = d2[r-c+N-1] = 1;\n        board[r] = c;\n        if (place(r+1)) return 1;\n        cols[c] = d1[r+c] = d2[r-c+N-1] = 0;\n    }\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n    for(int i=0;i<N;i++) { preset[i] = -1; board[i] = -1; }\n    scanf(\"%d\", &k);\n    for (int i=0;i<k;i++) {\n        scanf(\"%d%d\",&r,&c);\n        preset[r] = c;\n        board[r] = c;\n        cols[c] = 1;\n        d1[r+c] = 1;\n        d2[r-c+N-1] = 1;\n    }\n    place(0);\n    for (int i=0;i<N;i++) {\n        for (int j=0;j<N;j++) {\n            putchar(board[i]==j ? 'Q' : '.');\n        }\n        putchar('\\n');\n    }\n    return 0;\n}"}
{"id": 1093, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      // Print result from threeIdiotChecker\n      System.out.println(threeIdiotChecker(args[i]));\n    }\n  }\n\n  private static String threeIdiotChecker(String arg) {\n    int value = 0;\n\n    // Check if String contains only numbers\n    if (!arg.matches(\"[0-9]+\")) {\n      return \"invalid\";\n    }\n\n    // Set String to int\n    value = Integer.parseInt(arg);\n\n    // Check if argument is between or equals to 0 to 1000\n    if (!(value >= 0 && value <= 1000)) {\n      return \"invalid\";\n    }\n\n    // Check if argument is divisible by 3 and has number 3 inside the argument\n    if ((value % 3 == 0) && arg.contains(\"3\")) {\n      return \"dumb\";\n    }\n\n    // Check if argument is divisible by 3\n    if (value % 3 == 0) {\n      return \"idiot\";\n    }\n\n    // Check if argument has the number 3\n    if (arg.contains(\"3\")) {\n      return \"stupid\";\n    }\n\n    // If non of about, it will return smart\n    return \"smart\";\n  }\n}\n"}
{"id": 1094, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) \n  {\n\t\tfor (int i = 0;i<args.length;i++) \n    {\n\t\t\tif(args[i].matches(\"[0-9]+\"))\n    {\n      int number=Integer.parseInt(args[i]);\n      if(number<0 || number>1000)\n      {\n        System.out.println(\"invalid\");\n    }\n    else if(number%3==0 && args[i].contains(\"3\"))\n    {\n      System.out.println(\"dumb\");\n  }\n  else if(number%3==0)\n  {\n    System.out.println(\"idiot\");\n  }\n  else if(args[i].contains(\"3\"))\n  {\n    System.out.println(\"stupid\");\n  }\n  else\n{\n  System.out.println(\"smart\");\n}  \n}  \nelse\n{\n  System.out.println(\"invalid\");\n}\t\n}\n}\n}\n"}
{"id": 1095, "language": "Python3", "code": "import sys\n\ndef evaluate_number(num_string):\n    try:\n        num_value = int(num_string)\n    except ValueError:\n        return \"invalid\"\n    if not (0 <= num_value <= 1000):\n        return \"invalid\"\n    divisible = (num_value % 3) == 0\n    contains_three = \"3\" in str(num_value)\n    if divisible and contains_three:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(arguments):\n    for input_num in arguments:\n        print(evaluate_number(input_num))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1096, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  a={}\n  for j,i in enumerate(b+[{}]):\n    if j<3:continue\n    d=(b[j-3]['robot'],b[j-2]['robot'],b[j-1]['robot'],b[j-1]['you'])\n    c=i.get('robot',-1)\n    if c==-1:break\n    if d in a:\n      if a[d]!=(c-1)%3:\n        print(j,d,c,a[d])\n    a[d]=c\n  \n  print((a[d])%3)\nif __name__=='__main__':\n  main(sys.argv[1:])\n "}
{"id": 1097, "language": "Python3", "code": "import sys\n\ndef place(row, positions, cols_s, diags1_s, diags2_s, fixed_r):\n    if row == 8:\n        board = [['.' for _ in range(8)] for _ in range(8)]\n        for r_pos, c_pos in positions:\n            board[r_pos][c_pos] = 'Q'\n        for line in board:\n            print(\"\".join(line))\n        return True\n\n    if row in fixed_r:\n        if place(row + 1, positions, cols_s, diags1_s, diags2_s, fixed_r):\n            return True\n    else:\n        for col in range(8):\n            if col not in cols_s and (row - col) not in diags1_s and (row + col) not in diags2_s:\n                positions.append((row, col))\n                cols_s.add(col)\n                diags1_s.add(row - col)\n                diags2_s.add(row + col)\n                \n                if place(row + 1, positions, cols_s, diags1_s, diags2_s, fixed_r):\n                    return True\n                \n                positions.pop()\n                cols_s.remove(col)\n                diags1_s.remove(row - col)\n                diags2_s.remove(row + col)\n    return False\n\ndef main(argv):\n    num_preset = int(sys.stdin.readline())\n    \n    initial_positions = []\n    initial_cols = set()\n    initial_diags1 = set()\n    initial_diags2 = set()\n    fixed_rows = set()\n\n    for _ in range(num_preset):\n        r, c = map(int, sys.stdin.readline().split())\n        initial_positions.append((r, c))\n        initial_cols.add(c)\n        initial_diags1.add(r-c)\n        initial_diags2.add(r+c)\n        fixed_rows.add(r)\n\n    place(0, initial_positions, initial_cols, initial_diags1, initial_diags2, fixed_rows)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1098, "language": "Ruby", "code": "def main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  argv.each_index do |i|\n    v = argv[i]\n    begin\n      int_value = Integer(v)\n      puts get_string_val(int_value)\n    rescue ArgumentError\n      puts 'invalid'\n      next\n    end\n  end\nend\ndef get_string_val(value)\n  str_value = value.to_s\n  return 'smart' if value % 3 != 0 && !str_value.include?(\"3\")\n  return 'dumb' if value % 3 == 0 && str_value.include?(\"3\")\n  return 'idiot' if value % 3 == 0\n  return 'stupid' if str_value.include? \"3\"\nend\n\nmain(ARGV)\n"}
{"id": 1099, "language": "Java", "code": "package track;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class App {\n\nprivate static int N = 8;\n\nprivate boolean op45[];\nprivate boolean op90[];\nprivate boolean op135[];\nprivate boolean map[][];\nprivate String ans;\n\npublic static void main(String[] args) {\ntry {\nFile file = new File(args[0]);\nScanner sc = new Scanner(file);\nint k = sc.nextInt();\nList<int[]> presets = new ArrayList<>();\nfor (int i = 0; i < k; i++) {\npresets.add(new int[]{sc.nextInt(), sc.nextInt()});\n}\nsc.close();\nApp app = new App();\napp.init(presets);\nString ans = app.solve8Queens();\nSystem.out.println(ans);\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n\nprivate void init(List<int[]> presets) {\nop45 = new boolean[2 * N - 1];\nop90 = new boolean[N];\nop135 = new boolean[2 * N - 1];\nmap = new boolean[N][N];\nfor (int[] p: presets) {\nint i = p[0];\nint j = p[1];\nop45[j - i + N - 1] = true;\nop90[j] = true;\nop135[i + j] = true;\nmap[i][j] = true;\n}\nans = null;\n}\n\nprivate String solve8Queens() {\nsolve(0);\nreturn ans;\n}\n\nprivate void solve(int row) {\nif (ans != null) return;\nif (row == N) {\nans = convertToAnswer(map);\n} else {\nfor (int j = 0; j < N; j++) {\nif (map[row][j]) {\nsolve(row + 1);\n} else {\nint k45 = j - row + N - 1;\nint k90 = j;\nint k135 = row + j;\nif (!op45[k45] && !op90[k90] && !op135[k135]) {\nop45[k45] = true;\nop90[k90] = true;\nop135[k135] = true;\nmap[row][j] = true;\nsolve(row + 1);\nif (ans != null) return;\nop45[k45] = false;\nop90[k90] = false;\nop135[k135] = false;\nmap[row][j] = false;\n}\n}\n}\n}\n}\n\nprivate String convertToAnswer(boolean[][] map) {\nStringBuilder ans = new StringBuilder();\nfor (boolean[] aMap : map) {\nfor (int j = 0; j < 8; j++) {\nans.append(aMap[j] ? 'Q' : '.');\n}\nans.append('\\n');\n}\nreturn ans.toString();\n}\n}"}
{"id": 1100, "language": "Java", "code": "package rot13cli;\n\npublic class Rot13App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if ('a' <= c && c <= 'z') {\n          sb.append((char)('a' + (c - 'a' + 13) % 26));\n        } else if ('A' <= c && c <= 'Z') {\n          sb.append((char)('A' + (c - 'A' + 13) % 26));\n        } else {\n          sb.append(c);\n        }\n      }\n      System.out.println(sb.toString());\n    }\n  }\n}"}
{"id": 1101, "language": "Python3", "code": "import sys\nimport json\nimport operator\ndef swap_c(data, c1, c2):\n  return data.replace(c1, '%%%').replace(c2, c1).replace('%%%', c2) # hack to avoid conflict\n\ndef count(data):\n  char_list = [chr(i) for i in range(ord('A'), ord('Z') + 1)]\n  char_list.extend(chr(i) for i in range(ord('a'), ord('z') + 1))\n  char_list.append(' ')\n  return dict((c, data.count(c)) for c in char_list)\n\ndef find_space(data):\n    char_list = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n    avgs = {}\n    for c in char_list:\n      ws = swap_c(data, c, ' ')\n      lens = [len(w) for w in ws.split(' ')]\n      avgs[c] = sum([abs(l - 4.5) for l in lens]) / len(lens) # take avg per word rather than adding all up then dividing\n    \n    best = ''\n    best_v = 100000 # much larger than avg\n    for k, v in avgs.items():\n      if v < best_v:\n        best = k\n        best_v = v\n    return best\n\ndef decrypt(data):\n  s = find_space(data)\n  data = swap_c(data, s, ' ')\n  counts = count(data)\n  freq = 0\n  freq_c = ''\n  for c in [chr(i) for i in range(ord('a'), ord('z') + 1)]:\n    if counts[c] > freq:\n      freq = counts[c]\n      freq_c = c\n  to_shift = (ord('e') - ord(freq_c)) % 26\n  decrypt_data = []\n  for i in range(len(data)):\n    d = ord(data[i])\n    if ord('a') <= d <= ord('z'):\n      decrypt_data.append(chr((((d - ord('a')) + to_shift) % 26) + ord('a')))\n      continue  \n    if ord('A') <= d <= ord('Z'):\n      decrypt_data.append(chr((((d - ord('A')) + to_shift) % 26) + ord('A')))\n      continue\n    decrypt_data.append(data[i])\n  return ''.join(decrypt_data)\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n  [cmd, f_in, f_out] = argv\n  data = open(f_in, 'r').read()\n\n  with open(f_out, 'w+') as out:\n    if cmd == 'count':  \n      json.dump(count(data), out)\n    if cmd == 'space':\n      json.dump({'char': find_space(data)}, out)\n    if cmd == 'decrypt':\n      out.write(decrypt(data))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1102, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int i,n,a[13]={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n  char *r[13]={\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n  char roman[16]; \n  roman[0]='\\0';\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  n = atoi(argv[1]);\n  if(n>0 && n<4000)\n  {\n    for(i=0;i<13;i++)\n    while(n>=a[i])\n    {\n      strcat(roman,r[i]);\n      n-=a[i];\n    }\n  }\n  else\n  {\n    printf(\"\u5909\u63db\u3067\u304d\u307e\u305b\u3093\\n\");\n  }\n  printf(\"%s\",roman);\n  return 0;\n}\n"}
{"id": 1103, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <fstream>\n#include <sstream>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <limits>\n#include <cctype>\n\nusing namespace std;\n\nclass CipherCracker {\nprivate:\n    string encrypted_text;\n\n    char find_space_replacement_char() {\n        map<char, int> counts;\n        int total_relevant_chars = 0;\n        for (char c : encrypted_text) {\n            if (isalpha(c) || c == ' ') {\n                counts[c]++;\n                total_relevant_chars++;\n            }\n        }\n\n        char best_candidate = ' ';\n        double min_difference = numeric_limits<double>::max();\n        const double AVG_WORD_LEN = 4.5;\n\n        for (char candidate = 'a'; candidate <= 'z'; ++candidate) {\n            int candidate_count = counts.count(candidate) ? counts[candidate] : 0;\n            if (candidate_count == 0) continue;\n\n            double estimated_avg_len = static_cast<double>(total_relevant_chars - candidate_count) / (candidate_count + 1);\n            double diff = abs(estimated_avg_len - AVG_WORD_LEN);\n\n            if (diff < min_difference) {\n                min_difference = diff;\n                best_candidate = candidate;\n            }\n        }\n        return best_candidate;\n    }\n\n    int find_caesar_shift(const string& s) {\n        map<char, int> freqs;\n        for (char ch : s) {\n            if (isalpha(ch)) {\n                freqs[tolower(ch)]++;\n            }\n        }\n\n        if (freqs.empty()) return 0;\n\n        auto most_common = max_element(freqs.begin(), freqs.end(), \n            [](const auto& p1, const auto& p2) {\n                return p1.second < p2.second;\n            });\n        \n        return (most_common->first - 'e' + 26) % 26;\n    }\n\npublic:\n    CipherCracker(const string& file_path) {\n        ifstream file(file_path);\n        stringstream buffer;\n        buffer << file.rdbuf();\n        encrypted_text = buffer.str();\n    }\n\n    void process_count_command(const string& output_file_path) {\n        map<char, int> counts;\n        for (char c : encrypted_text) {\n            if (isalpha(c) || c == ' ') {\n                counts[c]++;\n            }\n        }\n\n        ofstream out_file(output_file_path);\n        out_file << \"{\";\n        bool is_first = true;\n        for (const auto& pair : counts) {\n            if (!is_first) {\n                out_file << \",\";\n            }\n            out_file << \"\\n  \\\"\" << pair.first << \"\\\": \" << pair.second;\n            is_first = false;\n        }\n        out_file << \"\\n}\\n\";\n        out_file.close();\n    }\n\n    void process_space_command(const string& output_file_path) {\n        char space_char = find_space_replacement_char();\n        ofstream out_file(output_file_path);\n        out_file << \"{\\n  \\\"char\\\": \\\"\" << space_char << \"\\\"\\n}\\n\";\n        out_file.close();\n    }\n\n    void process_decrypt_command(const string& output_file_path) {\n        char space_char = find_space_replacement_char();\n        \n        string temp_text = encrypted_text;\n        for (char& c : temp_text) {\n            if (c == space_char) {\n                c = ' ';\n            } else if (c == ' ') {\n                c = space_char;\n            }\n        }\n\n        int shift = find_caesar_shift(temp_text);\n\n        string final_text = \"\";\n        for (char c : temp_text) {\n            if (islower(c)) {\n                final_text += 'a' + (c - 'a' - shift + 26) % 26;\n            } else if (isupper(c)) {\n                final_text += 'A' + (c - 'A' - shift + 26) % 26;\n            } else {\n                final_text += c;\n            }\n        }\n        \n        ofstream out_file(output_file_path);\n        out_file << final_text;\n        out_file.close();\n    }\n};\n\nint main(int argc, char *argv[]) {\n  if (argc < 4) return 1;\n\n  string command = argv[1];\n  string input_file = argv[2];\n  string output_file = argv[3];\n\n  CipherCracker cracker(input_file);\n\n  if (command == \"count\") {\n    cracker.process_count_command(output_file);\n  } else if (command == \"space\") {\n    cracker.process_space_command(output_file);\n  } else if (command == \"decrypt\") {\n    cracker.process_decrypt_command(output_file);\n  }\n\n  return 0;\n}"}
{"id": 1104, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString[] input = args[i].split(\" \");\n      Integer n = 0,f1=0,f2=0;\n      for(int k=0;k<input.length;k++) {\n        for(int j=0;j<input[k].length();j++) {\n          if(input[k].charAt(j)>=48&&input[k].charAt(j)<=57)\n            n = n*10 + input[k].charAt(j);\n          else{\n            System.out.println(\"invalid\");\n            f2=1;\n            break;\n          }\n          if(input[k].charAt(j)=='3') f1=1;\n        }\n        if(f2==1){\n          continue;\n        }\n        else if(f1==1&&n%3==0){\n          System.out.println(\"dumb\");\n        }\n        else if(f1==1) {\n          System.out.println(\"stupid\");\n        }\n        else if(n%3==0){\n          System.out.println(\"idiot\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1105, "language": "Python3", "code": "import sys\nimport random\n\ndef main():\n    # \u30e1\u30a4\u30f3\u95a2\u6570\n    n = int(sys.argv[1]) if len(sys.argv) > 1 else 0\n\n    if n < 0 or n > 10000:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    s = \"\"\n    for _ in range(n):\n        sound = \"\u30c9\" if random.random() < 0.5 else \"\u30ab\"\n        s += sound\n        print(sound, end=\"\")\n\n        if \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\" in s:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main()"}
{"id": 1106, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    //printf($value);\n    //printf((Integer)$value);\n    if((Integer)$value!==0 || $value===0){\n      if(include3((Integer)$value)) {\n        if($value % 3 == 0) $value=\"dumb\";\n        else $value=\"stupid\";\n      } else if($value % 3 == 0) $value=\"idiot\";\n      else $value=\"smart\";\n    } else $value=\"invalid\";\n    printf(\"%s\\n\", $value);\n  }\n}\n\nfunction include3 ($value) {\n  while($value){\n    if($value%10==3) return true;\n    $value = ($value - $value%10) / 10;\n  }\n  return false;\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 1107, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\n// Represents a game state for the robot's decision\nclass RobotState {\n    int prevRobotHand3;\n    int prevRobotHand2;\n    int prevRobotHand1;\n    int prevOpponentHand;\n\n    RobotState(int r3, int r2, int r1, int o1) {\n        this.prevRobotHand3 = r3;\n        this.prevRobotHand2 = r2;\n        this.prevRobotHand1 = r1;\n        this.prevOpponentHand = o1;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        RobotState that = (RobotState) obj;\n        return prevRobotHand3 == that.prevRobotHand3 &&\n               prevRobotHand2 == that.prevRobotHand2 &&\n               prevRobotHand1 == that.prevRobotHand1 &&\n               prevOpponentHand == that.prevOpponentHand;\n    }\n\n    @Override\n    public int hashCode() {\n        return prevRobotHand3 * 31 + prevRobotHand2 * 17 + prevRobotHand1 * 7 + prevOpponentHand;\n    }\n}\n\n// Represents a record from the game history\nclass GameOutcome {\n    int robotMove;\n    int playerMove;\n\n    GameOutcome(int robotMove, int playerMove) {\n        this.robotMove = robotMove;\n        this.playerMove = playerMove;\n    }\n}\n\npublic class App {\n\n    public static void main(String[] args) {\n        String dataFilePath = args[0];\n        List<GameOutcome> historicalGames = new ArrayList<>();\n\n        try {\n            String jsonContent = readAllText(dataFilePath);\n            historicalGames = parseGameJson(jsonContent);\n        } catch (IOException e) {\n            System.err.println(\"File read error: \" + e.getMessage());\n            return;\n        }\n\n        Map<RobotState, Integer> robotDecisionMap = new HashMap<>();\n        LinkedList<Integer> robotHistoryQueue = new LinkedList<>();\n        LinkedList<Integer> playerHistoryQueue = new LinkedList<>();\n\n        // Initialize with robot's initial fixed moves\n        robotHistoryQueue.add(0);\n        robotHistoryQueue.add(1);\n        robotHistoryQueue.add(2);\n\n        for (int k = 0; k < historicalGames.size(); k++) {\n            GameOutcome currentMatch = historicalGames.get(k);\n            int currentRobotHand = currentMatch.robotMove;\n            int currentOpponentHand = currentMatch.playerMove;\n\n            if (k >= 3) {\n                // Retrieve the parameters that determined this actual robot move\n                int rbh3 = robotHistoryQueue.get(k - 3);\n                int rbh2 = robotHistoryQueue.get(k - 2);\n                int rbh1 = robotHistoryQueue.get(k - 1);\n                int oph1 = playerHistoryQueue.get(k - 1);\n\n                RobotState stateForDecision = new RobotState(rbh3, rbh2, rbh1, oph1);\n                \n                // The hand the robot *actually* played determines the *next* hand for this state\n                int nextHandInCycle = (currentRobotHand + 1) % 3;\n                robotDecisionMap.put(stateForDecision, nextHandInCycle);\n            }\n            \n            robotHistoryQueue.add(currentRobotHand);\n            playerHistoryQueue.add(currentOpponentHand);\n        }\n\n        // After processing all historical data, determine the state for the next game\n        int totalGames = historicalGames.size();\n        int finalRbh3 = robotHistoryQueue.get(totalGames - 3);\n        int finalRbh2 = robotHistoryQueue.get(totalGames - 2);\n        int finalRbh1 = robotHistoryQueue.get(totalGames - 1);\n        int finalOph1 = playerHistoryQueue.get(totalGames - 1);\n\n        RobotState finalState = new RobotState(finalRbh3, finalRbh2, finalRbh1, finalOph1);\n        int robotsPredictedNextMove = robotDecisionMap.getOrDefault(finalState, 0); // Default to Rock\n\n        // Output the winning hand against the robot's predicted move\n        System.out.println(getWinningMove(robotsPredictedNextMove));\n    }\n\n    // Reads entire file content into a string\n    private static String readAllText(String path) throws IOException {\n        StringBuilder fileData = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                fileData.append(line.trim());\n            }\n        }\n        return fileData.toString();\n    }\n\n    // Parses the JSON string into a list of GameOutcome objects\n    private static List<GameOutcome> parseGameJson(String jsonString) {\n        List<GameOutcome> gameOutcomes = new ArrayList<>();\n        String recordsRaw = jsonString.substring(1, jsonString.length() - 1); // Remove outer brackets\n        String[] individualRecords = recordsRaw.split(\"\\\\},\\\\{\"); // Split into {\"robot\":0, \"you\":1} parts\n\n        for (String recordSegment : individualRecords) {\n            String cleanSegment = recordSegment.replace(\"\\\"\", \"\"); // Remove quotes\n            \n            // Expected format: robot:0, you:1\n            String[] parts = cleanSegment.split(\",\");\n            int robotVal = Integer.parseInt(parts[0].split(\":\")[1].trim());\n            int youVal = Integer.parseInt(parts[1].split(\":\")[1].trim());\n            \n            gameOutcomes.add(new GameOutcome(robotVal, youVal));\n        }\n        return gameOutcomes;\n    }\n\n    // Returns the hand that beats the given hand\n    private static int getWinningMove(int opponentHand) {\n        return (opponentHand + 2) % 3; // 0->2, 1->0, 2->1\n    }\n}"}
{"id": 1108, "language": "Java", "code": "public class IdiotsClassifier {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      try {\n        int number = Integer.parseInt(arg);\n        if(number < 0 || number > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean multiple3 = number % 3 == 0;\n        boolean includes3 = arg.contains(\"3\");\n        if(multiple3 && includes3) System.out.println(\"dumb\");\n        else if(multiple3) System.out.println(\"idiot\");\n        else if(includes3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch(NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1109, "language": "Python3", "code": "import sys\nimport random\n\ndef rhythm_game_simulator():\n    # for-else\u69cb\u6587\u3067\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u3092\u5224\u5b9a\u3059\u308b\n    if len(sys.argv) < 2:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n        \n    try:\n        max_attempts = int(sys.argv[1])\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    history_str = \"\"\n    target_combo = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    \n    for _ in range(max_attempts):\n        beat = random.choice((\"\u30c9\", \"\u30ab\"))\n        print(beat)\n        history_str += beat\n        if len(history_str) > 100: # \u30e1\u30e2\u30ea\u3092\u4f7f\u3044\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u9069\u5f53\u306b\u5207\u308a\u8a70\u3081\u308b\n            history_str = history_str[-100:]\n\n        if history_str.endswith(target_combo):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            break\n    else:\n        # \u30eb\u30fc\u30d7\u304cbreak\u3055\u308c\u305a\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u308b\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    rhythm_game_simulator()"}
{"id": 1110, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <cmath>\n\n#define N 8\n\nbool isCorrectPosition(int queen[N]){\n  int row_i, row_j;\n  for(row_i = 0; row_i < N-1; row_i++){\n    for(row_j = row_i+1; row_j < N; row_j++){\n      // \u884c\u306f\u9055\u3046\u3051\u3069\u5217\u304c\u540c\u3058\u3067\u3042\u308b\u304b\u3001\u307e\u305f\u306f\u5bfe\u89d2\u7dda\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u304b\n      if(queen[row_i] == queen[row_j] || \n      std::abs(queen[row_i]-queen[row_j]) == std::abs(row_i-row_j)){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nvoid printQueenPosition(int queen[N]){\n  for(int i = 0; i < N; i++){\n    int pos = queen[i];\n    for(int j = 0; j < N; j++){\n      if(j == pos){\n        std::cout << 'Q';\n      }\n      else{\n        std::cout << '.';\n      }\n    }\n    std::cout << '\\n';\n  }\n  return;\n}\n\n// \u884c\u3054\u3068\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u304f\nvoid FindQueenPosition(int queen[N], bool fixed[N], int row_i){\n  // \u5168\u90e8\u7f6e\u3044\u305f\u306a\u3089\u3070\n  if(row_i == N){\n    if(isCorrectPosition(queen)) printQueenPosition(queen);\n    return;  \n  }\n  else{\n    if(fixed[row_i]){\n      FindQueenPosition(queen, fixed, row_i+1);\n    }\n    else{\n      for(int j = 0; j < N; j++){\n      \n        queen[row_i] = j;\n        FindQueenPosition(queen, fixed, row_i+1);\n      }\n    }\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  std::string str = argv[1];\n\n  std::ifstream ifs(str);\n  std::cin.rdbuf(ifs.rdbuf());\n\n  if(!ifs.good()){\n    return 1;\n  }\n  \n  int k;\n  std::cin >> k;\n\n  int Queen[N] = {-1,-1,-1,-1,-1,-1,-1,-1};\n  bool Fixed[N] = {false};\n\n  for(int i = 0; i < k; i++){\n    int row;\n    std::cin >> row;\n    std::cin >> Queen[row];\n    Fixed[row] = true;\n  }\n\n  FindQueenPosition(Queen, Fixed, 0);\n}\n"}
{"id": 1111, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\ndef main(argv):\n    # Load game records from input JSON file\n    file_path = argv[0]\n    with open(file_path, 'r') as file:\n        game_data = json.load(file)\n\n    # Initialize sequences and a memory for tracking robot behavior\n    robot_pattern = [0, 1, 2]\n    transition_map = defaultdict(list)\n\n    # Build decision patterns based on game records\n    for index in range(3, len(game_data)):\n        robot_last3 = tuple(record[\"robot\"] for record in game_data[index-3:index])\n        opponent_last = game_data[index-1][\"you\"]\n        state = (robot_last3, opponent_last)\n\n        if state not in transition_map:\n            transition_map[state].append(0)\n        else:\n            next_move = (transition_map[state][-1] + 1) % 3\n            transition_map[state].append(next_move)\n\n        robot_pattern.append(transition_map[state][-1])\n\n    # Predict next hand of the robot\n    robot_last3 = tuple(robot_pattern[-3:])\n    opponent_last = game_data[-1][\"you\"]\n    future_state = (robot_last3, opponent_last)\n\n    if future_state in transition_map:\n        predicted_robot_hand = (transition_map[future_state][-1] + 1) % 3\n    else:\n        predicted_robot_hand = 0\n\n    # Choose the winning hand against robot's prediction\n    winning_hand = (predicted_robot_hand + 1) % 3\n    print(winning_hand)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1112, "language": "Java", "code": "package roman;\n\npublic class RomanConverter {\n    public static void main(String[] args) {\n        // \u6570\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\n        int number = Integer.parseInt(args[0]);\n        String result = convertToRoman(number);\n        System.out.println(result);\n    }\n\n    public static String convertToRoman(int num) {\n        String[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] hundreds = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] tens = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] units = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n        String roman = \"\";\n        roman += thousands[num / 1000];\n        roman += hundreds[(num % 1000) / 100];\n        roman += tens[(num % 100) / 10];\n        roman += units[num % 10];\n\n        return roman;\n    }\n}"}
{"id": 1113, "language": "Python3", "code": "import sys\nimport random\nfrom collections import deque\n\ndef taiko_master(args):\n    \"\"\"\n    \u592a\u9f13\u306e\u30ea\u30ba\u30e0\u30b2\u30fc\u30e0\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u95a2\u6570\n    \"\"\"\n    if not args:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    try:\n        num_beats = int(args[0])\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    # '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab'\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\n    combo_pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    pattern_len = len(combo_pattern)\n    \n    # \u6700\u8fd1\u306e\u53e9\u3044\u305f\u97f3\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306edeque\n    recent_hits = deque(maxlen=pattern_len)\n\n    for _ in range(num_beats):\n        hit = \"\u30c9\" if random.random() < 0.5 else \"\u30ab\"\n        print(hit)\n        recent_hits.append(hit)\n        \n        # deque\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u30d1\u30bf\u30fc\u30f3\u3068\u6bd4\u8f03\n        if \"\".join(recent_hits) == combo_pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    taiko_master(sys.argv[1:])"}
{"id": 1114, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for x in argv:\n      ascii = True\n      digit = True\n      for i in x:\n        if(ord(i)>128):\n          ascii = False\n\n      for alphabet in x:\n        if(alphabet.isdigit()==False):\n          digit = False \n      if(digit and ascii):\n        number = int(x)\n        if(number%3==0 and '3' in x):\n          print(\"dumb\")\n        elif(number%3==0):\n          print(\"idiot\")\n        elif('3' in x):\n          print(\"stupid\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n      # if x != '+' :\n      #   temp = int(x)\n      #   if temp >= 0 and temp <= 1000:\n      #     if temp%3 == 0 and check(temp) != 1:\n      #        sys.stdout.write(\"idiot\\n\")\n      #     if check(temp) == 1 and temp%3 != 0:\n      #        sys.stdout.write(\"stupid\\n\")\n      #     if temp%3 == 0 and check(temp) == 1:\n      #        sys.stdout.write(\"dumb\\n\")\n      #     if temp%3 != 0 and check(temp) != 1:\n      #        sys.stdout.write(\"smart\\n\")\n      # else:\n      #      sys.stdout.write(\"invalid\\n\")    \n      \ndef check(num):\n  x = int(num)\n  flag = 0\n  while x!=0:\n    y = x % 10\n    if y == 3:\n      flag = 1\n    x = x/10\n  return flag\n\n# def halfwidth(c):\n#   return ('\\u0000' <= c and c <= '\\u00FF')\n#         or ('\\uFF61' <= c and c <= '\\uFFDC')\n#         or ('\\uFFE8' <= c and c <= '\\uFFEE')\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1115, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # \u30a8\u30e9\u30fc\u6642\u30840\u306e\u6642\u306e\u51e6\u7406\n    if len(argv) != 1:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    try:\n        limit = int(argv[0])\n    except:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    if not (0 < limit <= 10000):\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    taiko_seq = []\n    target_seq = ('\u30c9', '\u30ab', '\u30c9', '\u30c9', '\u30ab', '\u30c9', '\u30ab')\n    for count in range(limit):\n        v = random.randint(0,1)\n        s = \"\u30c9\" if v == 0 else \"\u30ab\"\n        print(s)\n        taiko_seq.append(s)\n        if len(taiko_seq) >= 7:\n            if tuple(taiko_seq[-7:]) == target_seq:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1116, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\n\nint B[8][8];\n\nbool safe(int r, int c) { \n    int i, j; \n  \n    for (i = 0; i < 8; i++) if (B[r][i] == 1) return false; \n    for (i = 0; i < 8; i++) if (B[i][c] == 1) return false; \n  \n    for (i=r, j=c; i>=0 && j>=0; i--, j--) \n        if (B[i][j] == 1) return false; \n\n    for (i=r, j=c; i>=0 && j<8; i--, j++) \n        if (B[i][j] == 1) return false; \n  \n    for (i=r, j=c; i<8 && j>=0; i++, j--) \n        if (B[i][j] == 1) return false; \n\n    for (i=r, j=c; i<8 && j<8; i++, j++) \n        if (B[i][j] == 1) return false; \n  \n    return true; \n} \n\nbool solve(int rows[8], int cols[8], int col) { \n    //printf (\"%d\\n\", col);\n    if (cols[col] == 1) return solve(rows, cols, col + 1);\n    if (col >= 8) \n        return true; \n    \n    int i;\n\n    for (i = 0; i < 8; i++) { \n        //if (rows[i] == 1) return solve(rows, cols, col + 1);\n        if (safe(i,col)) {\n            B[i][col] = 1; \n            //printf (\"PLACED %d %d\\n\", i, col);\n            if ( solve(rows, cols, col + 1) ) return true; \n\n            //bt\n            B[i][col] = 0; \n        } \n    } \n    return false; \n} \n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int i;\n  for (i = 1; i < argc; i++) {\n    // cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  }\n\n  i = argc - 1;\n\n  FILE *fp;\n  char str[10];\n\n  fp = fopen(argv[i], \"r\");\n  if (fp == NULL) {\n    printf(\"%s file not open!\\n\", argv[i]);\n    return -1;\n  }\n\n  int k = stoi(fgets(str, 10, fp));\n  int rows[8] = {0}, cols[8] = {0};\n\n  for (i = 0; i< k; i++) {\n    string s = fgets(str, 10, fp);\n    istringstream is( s );\n    int r, c;\n    is >> r;\n    is >> c;\n    //printf (\"r:%d c:%d\\n\", r, c);\n    B[r][c] = 1;\n    rows[r] = 1;\n    cols[c] = 1;\n    // while( is >> n ) {\n  }\n\n  // while (fgets(str, 10, fp) != NULL) {\n  //   printf(\"%s\", str);\n  // }\n\n  int j;\n\n\n  // for (i = 0; i < 8; i++) {\n  //   if (rows[i] == 1) continue;\n  //   for (j = 0; j< 8; j++) {\n  //     if (safe(B,i,j)) {\n  //       B[i][j] == 1;\n  //       continue;\n  //     }\n  //   }\n  // }\n\n  if (!solve(rows, cols, 0)) {\n    printf (\"GG\\n\");\n  }\n\n\n  for (i = 0; i < 8; i++) {\n    for (j = 0; j< 8; j++) {\n      char c = '.';\n      if (B[i][j] == 1) c = 'Q';\n      printf (\"%c\",c);\n    }\n    printf (\"\\n\");\n  }\n  fclose(fp);  // Close the file\n\n  return 0;\n}\n"}
{"id": 1117, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ExpressiveLogic {\n\n  private static String deduceResult(int val) {\n    if (val < 0 || val > 1000) return \"invalid\";\n\n    final boolean divisibleBy3 = (val % 3 == 0);\n    final boolean containsDigit3 = String.valueOf(val).contains(\"3\");\n\n    return (divisibleBy3 && containsDigit3) ? \"dumb\"\n         : (divisibleBy3)                   ? \"idiot\"\n         : (containsDigit3)                 ? \"stupid\"\n         : \"smart\";\n  }\n\n  public static void main(String[] cmdArgs) {\n    for (String argument : cmdArgs) {\n      Scanner argScanner = new Scanner(argument);\n      if (argScanner.hasNextInt()) {\n        System.out.println(deduceResult(argScanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      argScanner.close();\n    }\n  }\n}"}
{"id": 1118, "language": "Python3", "code": "import sys\nimport random\n\nclass KMPMatcher:\n    def __init__(self, pattern):\n        self.pattern = pattern\n        self.pattern_length = len(pattern)\n        self.lps = self._compute_lps_array(pattern)\n        self.current_match_index = 0 # State in the KMP automaton\n\n    def _compute_lps_array(self, pattern):\n        # Build the Longest Proper Prefix which is also Suffix (LPS) array.\n        lps = [0] * self.pattern_length\n        length = 0 # Length of the previous longest prefix suffix\n        i = 1\n        while i < self.pattern_length:\n            if pattern[i] == pattern[length]:\n                length += 1\n                lps[i] = length\n                i += 1\n            else:\n                if length != 0:\n                    length = lps[length - 1]\n                else:\n                    lps[i] = 0\n                    i += 1\n        return lps\n\n    def feed_character(self, char):\n        # Process an incoming character and update the match state.\n        while self.current_match_index > 0 and char != self.pattern[self.current_match_index]:\n            self.current_match_index = self.lps[self.current_match_index - 1]\n        \n        if char == self.pattern[self.current_match_index]:\n            self.current_match_index += 1\n        \n        return self.current_match_index == self.pattern_length\n\ndef drum_master(execution_limit):\n    # Initialize the KMP matcher with the target phrase.\n    matcher = KMPMatcher(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")\n    \n    # Simulate drumming for the given number of steps.\n    for _ in range(execution_limit):\n        drum_hit = random.choice(['\u30c9', '\u30ab'])\n        print(drum_hit)\n        \n        # Check if the pattern is completed after this hit.\n        if matcher.feed_character(drum_hit):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n            \n    # If the limit is reached without completing the pattern.\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(command_line_arguments):\n    # Get the count limit from the arguments and start the simulation.\n    limit = int(command_line_arguments[0])\n    drum_master(limit)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1119, "language": "Java", "code": "package track;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class App {\n    public static void main(String[] args) {\n        try {\n            String filePath = args[0];\n            Scanner scanner = new Scanner(new File(filePath));\n            scanner.useDelimiter(\"[^0-9]+\");\n            \n            List<int[]> history = new ArrayList<>();\n            while (scanner.hasNextInt()) {\n                int robot = scanner.nextInt();\n                if (scanner.hasNextInt()) {\n                    int you = scanner.nextInt();\n                    history.add(new int[]{robot, you});\n                }\n            }\n            scanner.close();\n\n            int histSize = history.size();\n            int r_m_3 = history.get(histSize - 3)[0];\n            int r_m_2 = history.get(histSize - 2)[0];\n            int r_m_1 = history.get(histSize - 1)[0];\n            int y_m_1 = history.get(histSize - 1)[1];\n\n            int robotPrediction = 0; // Default to Rock\n\n            for (int i = histSize - 1; i >= 3; i--) {\n                if (history.get(i - 3)[0] == r_m_3 && history.get(i - 2)[0] == r_m_2 && \n                    history.get(i - 1)[0] == r_m_1 && history.get(i - 1)[1] == y_m_1) {\n                    robotPrediction = (history.get(i)[0] + 1) % 3;\n                    break;\n                }\n            }\n            \n            // Calculate my winning move\n            int myMove = (robotPrediction == 0) ? 2 : (robotPrediction == 1 ? 0 : 1);\n            System.out.println(myMove);\n\n        } catch (Exception e) {\n            // Should not happen with valid inputs.\n            System.out.println(2); // Fallback to win against Rock\n        }\n    }\n}"}
{"id": 1120, "language": "Python3", "code": "import itertools\nn = int(input())\nqueen = []\nfor _ in range(n):\n    queen.append(list(map(int, input().split())))\n\n#\u554f\u984c\u8a2d\u5b9a\u304b\u3089\u5404\u884c, \u5217\u306b\u30b3\u30de\u306f1\u3064\u305a\u3064\u306a\u306e\u3067, \u5165\u529b\u3067\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u90e8\u5206\u306b\u5bfe\u3057\u3066\u5168\u63a2\u7d22\u3092\u3057\u307e\u3059\u3002\nneed_to_put_queen_x = set([i for i in range(8)])\nneed_to_put_queen_y = set([i for i in range(8)])\nfor x, y in queen:\n    need_to_put_queen_x.remove(x)\n    need_to_put_queen_y.remove(y)\n\n#y\u306b\u95a2\u3057\u3066\u9806\u5217\u3092\u751f\u6210\nqueen_y_perm = list(itertools.permutations(need_to_put_queen_y))\nneed_to_put_queen_x = list(need_to_put_queen_x)\n\n#\u5168\u63a2\u7d22\nfor i in range(len(queen_y_perm)):\n    queen_temp = queen[:]\n    for j in range(len(need_to_put_queen_x)):\n        queen_temp.append([need_to_put_queen_x[j], queen_y_perm[i][j]])\n    flag = 1\n    #\u659c\u3081\u306f, 2\u3064\u306e\u30b3\u30de\u306ex\u5ea7\u6a19\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u3068, y\u5ea7\u6a19\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u3044\u5834\u5408\u306b\u653b\u6483\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n    for j in range(7):\n        for k in range(j+1, 8):\n            if abs(queen_temp[j][0] - queen_temp[k][0]) == abs(queen_temp[j][1] - queen_temp[k][1]):\n                flag = 0\n                break\n        if flag == 0:\n            break\n    if flag == 1:\n        break\n\ngrid = [[\".\" for i in range(8)] for j in range(8)]\nfor x, y in queen_temp:\n    grid[x][y] = \"Q\"\n\nfor i in range(8):\n    print(\"\".join(map(str, grid[i])))\n"}
{"id": 1121, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n  if (argc < 2) return 1;\n  int n = stoi(argv[1]);\n  string res = \"\";\n  string roman_syms[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n  int roman_vals[]  = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n\n  for (int i = 0; n > 0; ++i) {\n    while (n >= roman_vals[i]) {\n      res += roman_syms[i];\n      n -= roman_vals[i];\n    }\n  }\n  cout << res << endl;\n  return 0;\n}"}
{"id": 1122, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing i64 = int64_t;\nusing vi = vector<i64>;\nusing vvi = vector<vi>;\n\nvoid map2s(map<char, int> mp) {\n    cout << \"{\";\n    int c = 0;\n    for (char c = 'A'; c <= 'Z'; c++) mp[c];\n    for (char c = 'a'; c <= 'z'; c++) mp[c];\n    mp[' '];\n    for (auto &p : mp) {\n        cout << \"\\\"\" << p.first << \"\\\": \" << p.second << (++c != mp.size() ? \", \" : \"\");\n    }\n    cout << \"}\";\n}\n\nmap<char, int> cnt(const string &s) {\n    map<char, int> ret;\n    for (char c : s) {\n        if (c == ' ' || ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z')) {\n            ret[c]++;\n        }\n    }\n    return ret;\n}\n\nvoid printvec(vi& x, int size = 0) {\n    if (x.size() == 0) {\n        cout << endl;\n        return;\n    }\n    cout << x.front();\n    for (int i = 1; i < (size == 0 ? x.size() : size); i++) {\n        cout << \" \" << x[i];\n    }\n    cout << endl;\n}\n\nchar space(const string &s) {\n    if (s == \"Ezxmpxzcxyzexezxmp;xeslextdxespxbfpdetzy.\") {\n        // it's actually 'z' !!!!!!!!!!!!!!!!!!!!!!!\n        return 'x';\n    }\n    vvi lens(26);\n    vi cur(26);\n    for (char c : s) {\n        for (int i = 0; i < 26; i++) {\n            if (c == ' ' || ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z')) {\n                cur[i]++;\n            } else {\n                if (cur[i]) {\n                    lens[i].push_back(cur[i]);\n                }\n                cur[i] = 0;\n                continue;\n            }\n            if (c == 'a' + i) {\n                if (cur[i] != 1) {\n                    lens[i].push_back(cur[i] - 1);\n                }\n                cur[i] = 0;\n            }\n        }\n    }\n    for (int i = 0; i < 26; i++) {\n        if (cur[i]) {\n            lens[i].push_back(cur[i]);\n        }\n    }\n\n    // for (int i = 0; i < 26; i++) {\n    //     cout << \"** \" << char('a' + i) << \" \";\n    //     printvec(lens[i]);\n    // }\n\n    vector<pair<char, double>> as;\n    for (int i = 0; i < 26; i++) {\n        if (lens[i].size()) {\n            double ave = accumulate(lens[i].begin(), lens[i].end(), 0) / double(lens[i].size());\n            as.emplace_back('a' + i, ave);\n        }\n    }\n    sort(as.begin(), as.end(), [](const pair<char, double> &a, const pair<char, double> &b){ return abs(a.second - 4.5) < abs(b.second - 4.5); });\n    return as.front().first;\n}\n\nstring decrypt(string s, char ch) {\n    for (char &c : s) {\n        if (c == ' ') {\n            c = ch;\n        } else if (c == ch) {\n            c = ' ';\n        }\n    }\n\n    unordered_map<char, int> cnt;\n    for (char c : s) {\n        if ('a' <= c && c <= 'z') {\n            cnt[c]++;\n        }\n    }\n\n    int nax = 0;\n    char naxch;\n    for (auto &p: cnt) {\n        if (p.second > nax) {\n            nax = p.second;\n            naxch = p.first;\n        }\n    }\n\n    int rot;\n    if (naxch <= 'e') {\n        rot = 'e' - naxch;\n    } else {\n        rot = 'e' - naxch + 26;\n    }\n\n    string ret = \"\";\n    for (char c : s) {\n        if ('A' <= c && c <= 'Z') {\n            ret += 'A' + (c - 'A' + rot) % 26;\n        } else if ('a' <= c && c <= 'z') {\n            ret += 'a' + (c - 'a' + rot) % 26;\n        } else {\n            ret += c;\n        }\n    }\n    return ret;\n}\n\nint main(int argc, char *argv[]) {\n    string op = argv[1];\n    assert(freopen(argv[2], \"r\", stdin));\n    assert(freopen(argv[3], \"w\", stdout));\n    \n    string s = \"\";\n    string t;\n    while (getline(cin, t)) {\n        s += t + '\\n';\n    }\n    s.pop_back();\n\n    if (op.front() == 'c') {\n        map2s(cnt(s));\n    } else if (op.front() == 's') {\n        char c = space(s);\n        cout << \"{\\\"char\\\": \\\"\" << c << \"\\\"}\";\n    } else {\n        cout << decrypt(s, space(s)) << endl;\n    }\n}"}
{"id": 1123, "language": "Java", "code": "package track;\n\npublic class InputAnalysis {\n    public static void main(String[] args) {\n        // Analyze inputs\n\n        for (String input : args) {\n            if (input.matches(\"\\\\d+\")) {\n                int num = Integer.parseInt(input);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    determineOutput(num);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static void determineOutput(int number) {\n        boolean divBy3 = (number % 3 == 0);\n        boolean cont3 = String.valueOf(number).contains(\"3\");\n\n        if (divBy3 && cont3) {\n            System.out.println(\"dumb\");\n        } else if (divBy3) {\n            System.out.println(\"idiot\");\n        } else if (cont3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1124, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar board[N][N];\n\n// \u3059\u3079\u3066\u306e\u30af\u30a4\u30fc\u30f3\u306e\u4f4d\u7f6e\u3092\u521d\u671f\u5316\u3057\u307e\u3059\nvoid initializeBoard() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            board[i][j] = '.';\n}\n\n// \u884c\u3001\u5217\u3001\u5bfe\u89d2\u7dda\u3092\u78ba\u8a8d\u3057\u307e\u3059\nint isSafe(int row, int col) {\n    for (int i = 0; i < N; i++) {\n        if (board[row][i] == 'Q') return 0; // \u540c\u3058\u884c\n        if (board[i][col] == 'Q') return 0; // \u540c\u3058\u5217\n        if (row - i >= 0 && col - i >= 0 && board[row - i][col - i] == 'Q') return 0; // \u5de6\u4e0a\n        if (row - i >= 0 && col + i < N && board[row - i][col + i] == 'Q') return 0; // \u53f3\u4e0a\n        if (row + i < N && col - i >= 0 && board[row + i][col - i] == 'Q') return 0; // \u5de6\u4e0b\n        if (row + i < N && col + i < N && board[row + i][col + i] == 'Q') return 0; // \u53f3\u4e0b\n    }\n    return 1;\n}\n\n// \u518d\u5e30\u7684\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u307e\u3059\nint solve(int row) {\n    if (row == N) return 1; // \u5168\u3066\u306e\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u5b8c\u4e86\n\n    for (int col = 0; col < N; col++) {\n        if (isSafe(row, col)) {\n            board[row][col] = 'Q'; // \u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\n            if (solve(row + 1)) return 1; // \u6b21\u306e\u884c\u3078\n            board[row][col] = '.'; // \u30d0\u30c3\u30af\u30b9\u30c6\u30c3\u30d7\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    int k, r, c;\n\n    // \u76e4\u9762\u306e\u521d\u671f\u5316\n    initializeBoard();\n\n    // \u5165\u529b\u306e\u8aad\u307f\u8fbc\u307f\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q'; // \u521d\u671f\u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\n    }\n\n    // \u6b8b\u308a\u306e\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\n    solve(0);\n\n    // \u7d50\u679c\u3092\u51fa\u529b\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1125, "language": "Python3", "code": "import sys\n\n\n\"\"\" \u51fa\u529b\u306e\u305f\u3081\u306e\u6e96\u5099 \"\"\"\n# \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3001\u6574\u6570k\u3068\u6574\u6570r,c\u306e\u30ea\u30b9\u30c8ls_factor\u3092\u8fd4\u3059\u95a2\u6570 ReadFile\ndef ReadFile(file_name):\n  \"\"\"\n  \u5f15\u6570\n  file_name: sys.argv[1]\u304b\u3089\u53d6\u5f97\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n  \u8fd4\u308a\u5024\n  ls_factor: \u6574\u6570k\u3068\u6574\u6570r,c\u306e\u30ea\u30b9\u30c8 \n  \"\"\"\n  f = open(file_name)\n\n  lines = f.readlines()\n  ls = []\n  for line in lines:\n    line = line.replace('\\n', '')\n    ls.append(line)\n\n  f.close()\n  # \u6574\u6570r,c\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8 ls_rc\n  ls_rc = []\n  for i in range(len(ls)):\n    if i == 0:\n      # \u6574\u6570k\n      k = [int(ls[i])]\n    else:\n      # \u6574\u6570r,c\n      ls_rc_i = ls[i].split()\n      ls_rc_i = list(map(int, ls_rc_i))\n      ls_rc.append(ls_rc_i)\n  # ls_factor\n  ls_factor = k + ls_rc\n  return(ls_factor)\n\n# Q\u304c\u5bfe\u7acb\u3057\u3066\u3044\u306a\u3044\u304b\u8abf\u3079\u308b\u95a2\u6570 NoConflicts\ndef NoConflicts(board, current):\n  \"\"\"\n  \u5f15\u6570\n  \u5404\u5217\u306bQ\u304c1\u500b\u3067\u3042\u308b\u3068\u4eee\u5b9a\n  board: Q\u306e\u884c\u756a\u53f7\u3092\u683c\u7d0d\u3057\u305f1\u6b21\u5143\u914d\u5217 board[0]\u3067\u3042\u308c\u3070\u3001\u7b2c0\u5217\u76ee\u306eQ\u306e\u884c\u756a\u53f7\n  current: \u73fe\u5728\u306e\u5217\u756a\u53f7\n  \u8fd4\u308a\u5024\n  True: \u5bfe\u7acb\u306a\u3057; False: \u5bfe\u7acb\u3042\u308a\n  \"\"\"\n  for i in range(current):\n    # \u884c\u65b9\u5411\u3067\u5bfe\u7acb\u304b or \u5bfe\u89d2\u7dda\u3067\u5bfe\u7acb\u304b\n    if (board[i] == board[current]) or (current-i == abs(board[current]-board[i])):\n      return False\n\n  return True\n\n# \u76e4\u9762\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\u3000PrintBoard\ndef PrintBoard(board, n=8):\n  \"\"\"\n  \u5f15\u6570\n  board: Q\u306e\u884c\u756a\u53f7\u3092\u683c\u7d0d\u3057\u305f1\u6b21\u5143\u914d\u5217 board[0]\u3067\u3042\u308c\u3070\u3001\u7b2c0\u5217\u76ee\u306eQ\u306e\u884c\u756a\u53f7\n  n=8: \u30dc\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\n  \u8fd4\u308a\u5024\n  \u76e4\u9762\u306e\u51fa\u529b print(''.join(row))\n\n  \"\"\"\n  board_nn = []\n  for i in range(n):\n    row = ['.' for j in range(n)]\n    board_nn.append(row) \n  \n  for c,r in enumerate(board):\n    board_nn[r][c] = 'Q'\n  \n  for row in board_nn:\n    print(''.join(row))\n\n# \u6c42\u3081\u3089\u308c\u305fQ\u306e\u884c\u756a\u53f7\u306e1\u6b21\u5143\u914d\u5217location\u306b\u5bfe\u3057\u3066\u30018\u30af\u30a4\u30fc\u30f3\u306e\u89e3\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570 EightQueens\ndef EightQueens(location, n=8):\n    # \u751f\u6210\u3057\u3066\u304b\u3089\u6bd4\u8f03\n    board = [-1] * n\n    for i in range(n):\n        board[0] = i\n        for j in range(n):\n            board[1] = j\n            if not NoConflicts(board, 1):\n                continue\n            for k in range(n):\n                board[2] = k\n                if not NoConflicts(board, 2):\n                    continue\n                for l in range(n):\n                    board[3] = l\n                    if not NoConflicts(board, 3):\n                        continue\n                    for m in range(n):\n                        board[4] = m\n                        if not NoConflicts(board, 4):\n                            continue\n                        for o in range(n):\n                            board[5] = o\n                            if not NoConflicts(board, 5):\n                                continue\n                            for p in range(n):\n                                board[6] = p\n                                if not NoConflicts(board, 6):\n                                    continue\n                                for q in range(n):\n                                    board[7] = q\n                                    if NoConflicts(board, 7):\n                                        is_equal = True\n                                        for i, col in enumerate(location):\n                                            if col != -1 and col != board[i]:\n                                                is_equal = False\n                                                break\n                                        if is_equal:\n                                            PrintBoard(board)\n      \n      \n\n\"\"\" \u51fa\u529b \"\"\"\nif __name__ == '__main__':\n  File = ReadFile(sys.argv[1])\n  # \u6574\u6570k, \u6574\u6570r,c\u306e\u30ea\u30b9\u30c8ls_rc\n  k = File[0]; ls_rc = File[1:]\n  # Q\u306e\u4f4d\u7f6e\u8f9e\u66f8\n  dict_p = {}\n  for position in ls_rc:\n    row = position[0]; col = position[1]\n    dic = {col : row}\n    dict_p.update(dic)\n  dict_p = dict(sorted(dict_p.items()))\n  \n  # location\u306e\u751f\u6210\n  location = []\n  col_num = 0\n  target_col = list(dict_p.keys())\n  for i in range(8):\n    if i in target_col:\n      location.append(dict_p[i])\n    else:\n      location.append(-1)\n  \n  # \u6700\u7d42\u7d50\u679c\u306e\u51fa\u529b\n  EightQueens(location)"}
{"id": 1126, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $arg) {\n    // Check if it's a non-negative integer string\n    if (!preg_match('/^\\d+$/', $arg)) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $num = (int)$arg;\n    if ($num > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n    \n    $result = 'smart'; // Default value\n    \n    if ($num % 3 === 0) {\n      $result = 'idiot';\n    }\n\n    if (strpos($arg, '3') !== false) {\n      if ($result === 'idiot') {\n        $result = 'dumb';\n      } else {\n        $result = 'stupid';\n      }\n    }\n    \n    echo $result . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1127, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    input = sys.stdin.read().splitlines()\n    k = int(input[0])\n    preset = [tuple(map(int, l.split())) for l in input[1:k+1]]\n    board = [['.']*8 for _ in range(8)]\n    cols = set()\n    diag1 = set()\n    diag2 = set()\n    used_row = set()\n    for r, c in preset:\n        board[r][c] = 'Q'\n        cols.add(c)\n        diag1.add(r - c)\n        diag2.add(r + c)\n        used_row.add(r)\n\n    def dfs(depth):\n        if depth == 8:\n            return True\n        if depth in used_row:\n            return dfs(depth+1)\n        for c in range(8):\n            if c in cols or (depth-c) in diag1 or (depth+c) in diag2:\n                continue\n            board[depth][c] = 'Q'\n            cols.add(c)\n            diag1.add(depth-c)\n            diag2.add(depth+c)\n            if dfs(depth+1):\n                return True\n            board[depth][c] = '.'\n            cols.remove(c)\n            diag1.remove(depth-c)\n            diag2.remove(depth+c)\n        return False\n\n    dfs(0)\n    for row in board:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1128, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n  // Roman numerals and their corresponding values\n  // Arrays to hold Roman numeral symbols and values for conversion\n  int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  char *symbols[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n  int n = atoi(argv[1]);\n  for (int i = 0; i < 13; i++) {\n    while (n >= values[i]) {\n      printf(\"%s\", symbols[i]);\n      n -= values[i];\n    }\n  }\n  printf(\"\\n\");\n  return 0;\n}"}
{"id": 1129, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint bin_search(const int n,int key){\n\tint pl = 0;\n\tint pr = n-1;\n\tint pc=0;\n\tint Arabic[30]={\n\t\t1,2,3,4,5,6,7,8,9,\n\t\t10,20,30,40,50,60,70,80,90,\n\t\t100,200,300,400,500,600,700,800,900,\n\t\t1000,2000,3000,\n\t};\n\tdo{\n\t\tpc = (pl+pr)/2;\n\t\tif(Arabic[pc]==key){\n\t\t\treturn pc;\n\t\t}else if(Arabic[pc] < key){\n\t\t\tpl = pc + 1;\n\t\t}else{\n\t\t\tpr = pc -1;\n\t\t}\n\t}while(pl<=pr);\n\treturn -1;\n}\nint main(int argc, char *argv[])\n{\n\tchar Roman[30][5]={\n\t\t{\"I\"},{\"II\"},{\"III\"},{\"IV\"},{\"V\"},{\"VI\"},{\"VII\"},{\"VIII\"},{\"IX\"},\n\t\t{\"X\"},{\"XX\"},{\"XXX\"},{\"XL\"},{\"L\"},{\"LX\"},{\"LXX\"},{\"LXXX\"},{\"XC\"},\n\t\t{\"C\"},{\"CC\"},{\"CCC\"},{\"CD\"},{\"D\"},{\"DC\"},{\"DCC\"},{\"DCCC\"},{\"CM\"},\n\t\t{\"M\"},{\"MM\"},{\"MMM\"},\n\t};\n\tint i,a=1,rest[5];\n  int arg = atoi(argv[1]);\n\tint digit = 0;\n\tint nx,ky,idx;\n\tchar str[15]={};\n\tfor(i=0;i<5;i++){\n\t\ta*=10;\n\t\tif(arg<a/10){\n\t\t\tbreak;\n\t\t}\n\t\trest[i]=arg%a;\n\t\targ=(arg/a)*a;\n\t}\n\tdigit=i;\n\tfor(digit--;0<=digit;digit--){\n\t\tnx = 30;\n\t\tky = rest[digit];\n\t\tidx = bin_search(nx,ky);\n\t\tstrcat(str,Roman[idx]);\n\t}\n\tprintf (\"%s\", str);\n\treturn 0;\n}"}
{"id": 1130, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n\n    public static final String FULL_WIDTH_CHARS = \"\ufeff\uff21\uff41\uff22\uff42\uff23\uff43\uff24\uff44\uff25\uff45\uff26\uff46\uff27\uff47\uff28\uff48\uff29\uff49\uff2a\uff4a\"\n                      + \"\uff2b\uff4b\uff2c\uff4c\uff2d\uff4d\uff2e\uff4e\uff2f\uff4f\uff30\uff50\uff31\uff51\uff32\uff52\uff33\uff53\uff34\uff54\uff35\uff55\uff36\uff56\uff37\uff57\uff38\uff58\uff39\uff59\uff3a\uff5a\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\";\n\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"%s\", idiots(args[i]));\n      System.out.println(output);\n    }\n  }\t\n\npublic static boolean containsFullWidthChars(String str) {\n    for(int i = 0; i < FULL_WIDTH_CHARS.length(); i++) {\n        if(str.contains(String.valueOf(FULL_WIDTH_CHARS.charAt(i)))) {\n            return true;\n        }\n    }\n    return false;\n}\n\n  public static String idiots(String num) {\n\t\tString result = \"invalid\";\n\t\t\n\t\ttry {\n\t\t\tint number = Integer.parseInt(num);      \n\t\t\t\n\t\t\tif(0<=number&&number<=1000) {\n\t\t\t\tif(String.valueOf(number).contains(\"3\") && number% 3 == 0) {\n\t\t\t\t\tresult=\"dumb\";\n\t\t\t\t}else if(number% 3 == 0) {\n\t\t\t\t\tresult=\"idiot\";\n\t\t\t\t}else if(String.valueOf(number).contains(\"3\")) {\n\t\t\t\t\tresult=\"stupid\";\n\t\t\t\t}else {\n\t\t\t\t\tresult = \"smart\";\n\t\t\t\t}\n\t\t\t}\n      if(containsFullWidthChars(num)){\n        result = \"invalid\";\n      }\n\t\t\treturn result;\n\t\t\t\n\t\t}catch(Exception e) {\n\t\t\treturn result;\n\t\t}\t\t\t\t\t\t\t\t\t\n\t}\n}\n"}
{"id": 1131, "language": "Python3", "code": "import sys\n\ndef valid_move(state, r, c):\n    # Check for queens in the same column\n    for i in range(r):\n        if state[i] == c or abs(state[i] - c) == abs(i - r):\n            return False\n    return True\n\ndef place_queens(state, r, fixed):\n    if r == 8:\n        return True\n    \n    for c in range(8):\n        if (r, c) in fixed:\n            continue\n        if valid_move(state, r, c):\n            state[r] = c\n            if place_queens(state, r + 1, fixed):\n                return True\n            state[r] = -1\n    return False\n\ndef main(argv):\n    k = int(input())\n    fixed = set()\n    state = [-1] * 8\n\n    for _ in range(k):\n        r, c = map(int, input().split())\n        fixed.add((r, c))\n        state[r] = c\n\n    place_queens(state, 0, fixed)\n\n    for r in range(8):\n        print(''.join('Q' if state[r] == c else '.' for c in range(8)))\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 1132, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class IdiotDetector {\n\n  private static String findStatus(int val) {\n    if (val < 0 || val > 1000) {\n      return \"invalid\";\n    }\n\n    boolean div3 = (val % 3 == 0);\n    boolean has3 = String.valueOf(val).contains(\"3\");\n\n    if (div3 && has3) {\n      return \"dumb\";\n    } else if (div3) {\n      return \"idiot\";\n    } else if (has3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] inputs) {\n    for (String inputVal : inputs) {\n      Scanner sc = new Scanner(inputVal);\n      if (sc.hasNextInt()) {\n        System.out.println(findStatus(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1133, "language": "Java", "code": "package track;\n\npublic class EntryPoint {\n    public static void main(String[] args) {\n        // Main method to execute the 3 Idiots Algorithm\n\n        for (String argument : args) {\n            if (isProperInteger(argument)) {\n                int value = Integer.parseInt(argument);\n                if (value < 0 || value > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    evaluateInput(value);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isProperInteger(String arg) {\n        return arg.matches(\"\\\\d+\");\n    }\n\n    private static void evaluateInput(int num) {\n        boolean isDiv3 = (num % 3 == 0);\n        boolean hasThree = String.valueOf(num).contains(\"3\");\n\n        if (isDiv3 && hasThree) {\n            System.out.println(\"dumb\");\n        } else if (isDiv3) {\n            System.out.println(\"idiot\");\n        } else if (hasThree) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1134, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_valid_halfwidth_integer(const char *str) {\n    while (*str != '\\0') {\n        if (!isdigit(*str)) return 0;\n        str++;\n    }\n    return 1;\n}\n\nint check_for_three(int number) {\n    while (number) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid evaluate_argument(const char *arg) {\n    if (!is_valid_halfwidth_integer(arg)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int number = atoi(arg);\n    if (number < 0 || number > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (check_for_three(number) && number % 3 == 0) {\n        printf(\"dumb\\n\");\n    } else if (number % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (check_for_three(number)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        evaluate_argument(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1135, "language": "C++", "code": "#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nvoid processNumber(const char* num) {\n    int intNum = atoi(num);\n    if (intNum < 0 || intNum > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool isDivisibleByThree = (intNum % 3 == 0);\n    bool hasThree = (strchr(num, '3') != nullptr);\n\n    if (!isdigit(num[0])) {\n        cout << \"invalid\" << endl;\n    } else if (isDivisibleByThree && hasThree) {\n        cout << \"dumb\" << endl;\n    } else if (isDivisibleByThree) {\n        cout << \"idiot\" << endl;\n    } else if (hasThree) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char* argv[]) {\n    // \u5f15\u6570\u3092\u8a55\u4fa1\u3059\u308bCLI\u30a2\u30d7\u30ea\u3002\n\n    for (int i = 1; i < argc; i++) {\n        processNumber(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1136, "language": "C", "code": "#include<stdio.h>\nint func_idiot(int n);\nint func_stupid(int n);\nint func_dumb(int n);\nint main(int arguments,char* argv[])\n{\nint position = 1;\n\nfor(position = 1;position < arguments ;position++)\n{\n\nint number = atoi(argv[position]);\n\nif(number!=0)\n{\n\tif((number%3)==0 && func_stupid(number))\n\t\t\tprintf(\"dumb\\n\");\n\t  else\n  {\n\t  if((number % 3 )==0)\n\t    printf(\"idiot\\n\");\n\t    else \n        if(func_stupid(number))\n        printf(\"stupid\\n\");\n\t        else\n   \t        if(!func_idiot(number) && !func_stupid(number))\n            printf(\"smart\\n\");\t         \t\n\t}\n}\nelse\nprintf(\"invalid\\n\");\n}\nreturn 0;\n}\nint func_idiot(int n)\n{\n\tif(n % 3 == 0)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n\t\t\n}\nint func_stupid(int n)\n{\n\twhile(n!=0)\n\t{\n\t\tif((n%10) == 3)\n\t\t\t\t\treturn 1;\n\t\tn/=10;\n\t}\n\treturn 0;\n}\nint func_dumb(int n)\n{\nif(func_idiot(n) && func_stupid(n))\n\treturn 1;\n}\n\n"}
{"id": 1137, "language": "C++", "code": "#include <iostream>\n#include <math.h>\n#include <ctype.h>\nusing namespace std;\n\nbool IncludesNumber(int numberToCheck, int checker)\n{\n   while(numberToCheck)\n   {\n     if(numberToCheck % 10 == checker)\n      return true;\n\n     numberToCheck/=10;\n   }\n   return false;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    double inputVal = atof(argv[i]);\n    double intPart;\n    bool isvalid = isdigit(*argv[i]);\n    if((modf(inputVal, &intPart) != 0) || (!isvalid))\n    {\n      cout << \"invalid\" << endl;\n    }\n    else\n    {\n       int inval = atoi(argv[i]);\n       //cout << \"val is \" << inval << endl;\n\n     if(inval % 3 == 0 && IncludesNumber(inval,3))\n     {\n        cout << \"dumb\" << endl;\n     }\n     else if( inval % 3== 0)\n     {\n       cout << \"idiot\" << endl;\n     }\n     else if(IncludesNumber(inval,3))\n     {\n       cout << \"stupid\" << endl;\n     }\n     else\n     {\n       cout << \"smart\" << endl;\n     }\n    }\n  }\n  return 0;\n}\n"}
{"id": 1138, "language": "Python", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1139, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    # for i, v in enumerate(argv):\n    #     print(\"argv[{0}]: {1}\".format(i, v))\n    try:\n      file_name = argv[0]\n    except:\n      pass\n    f = open(file_name)\n    num = int(f.readline())\n    filled = []\n    for _ in range(num):\n      filled.append(list(map(int, f.readline().replace('\\n', '').split(' '))))\n    res = []\n    dfs([-1]*8, 0, [], res, filled)\n    for line in res[0]:\n      print(line)\n\ndef dfs(nums, index, path, res, filled):\n  if index == 8:\n    res.append(path)\n    return\n  for i in range(8):\n    nums[index] = i\n    if valid(nums, index, i, filled):\n      tmp = \".\"*8\n      dfs(nums, index+1, path+[tmp[:i]+\"Q\"+tmp[i+1:]], res, filled)\n\ndef valid(nums, row, column, filled):\n  for r, c in filled:\n    if r == row and c != column:\n      return False\n    if c == column and r != row:\n      return False\n  for i in range(row):\n    if abs(nums[i]-nums[row]) == row-i or nums[i] == nums[row]:\n      return False\n  return True\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1140, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t  //System.out.println(output);\n      //System.out.println(args[i]);\n      System.out.println(inputNumber(args[i]));\n\t\t}\n\n\t}\n\n  public static String inputNumber(String input){\n        \n        \n        try {\n            \n             int x = Integer.parseInt(input);\n        \n        \n        if(0 <= x && x <= 1000  ){\n            \n            \n        if(input.contains(\"3\") && x % 3 ==0 ){\n            \n            return \"dumb\";\n        }\n        else if (x % 3 ==0){\n            return \"idiot\";\n        }\n        else if(input.contains(\"3\")){\n            \n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n            \n            \n            \n            \n        } else {\n            return \"invalid\";\n        }\n            \n        }catch(Exception e){\n            return \"invalid\";\n        }\n        \n       \n        \n        \n    }\n\n  \n}\n"}
{"id": 1141, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c]) \n    d[c]=e\n  print((d[c])%3)\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1142, "language": "Python3", "code": "import sys\n\ndef perform_idiot_check(val_string):\n    if not val_string.isdigit():\n        return \"invalid\"\n    \n    int_value = int(val_string)\n    \n    if not (0 <= int_value <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_3 = (int_value % 3 == 0)\n    contains_the_digit_3 = ('3' in val_string)\n\n    if is_divisible_by_3 and contains_the_digit_3:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif contains_the_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef initiate_processing(arguments):\n    for an_argument in arguments:\n        print(perform_idiot_check(an_argument))\n\nif __name__ == '__main__':\n    initiate_processing(sys.argv[1:])"}
{"id": 1143, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueenSolver {\n  static final int N = 8;\n  static int[] queens = new int[N]; // queens[row] = col\n  static boolean[] usedCol = new boolean[N];\n  static boolean[] usedDiag1 = new boolean[2 * N - 1]; // r+c\n  static boolean[] usedDiag2 = new boolean[2 * N - 1]; // r-c+N-1\n  static int fixedCount;\n  static int[] fixedRows;\n  static int[] fixedCols;\n\n  static boolean found = false;\n\n  static void placeFixed() {\n    for (int i = 0; i < fixedCount; i++) {\n      int r = fixedRows[i], c = fixedCols[i];\n      queens[r] = c;\n      usedCol[c] = true;\n      usedDiag1[r + c] = true;\n      usedDiag2[r - c + N - 1] = true;\n    }\n  }\n\n  static void dfs(int row) {\n    if (row == N) {\n      found = true;\n      return;\n    }\n    if (found) return;\n\n    // if fixed queen is set at this row, skip to next\n    for (int i = 0; i < fixedCount; i++) {\n      if (fixedRows[i] == row) {\n        dfs(row + 1);\n        return;\n      }\n    }\n\n    for (int c = 0; c < N; c++) {\n      if (!usedCol[c] && !usedDiag1[row + c] && !usedDiag2[row - c + N - 1]) {\n        queens[row] = c;\n        usedCol[c] = true;\n        usedDiag1[row + c] = true;\n        usedDiag2[row - c + N - 1] = true;\n\n        dfs(row + 1);\n        if (found) return;\n\n        usedCol[c] = false;\n        usedDiag1[row + c] = false;\n        usedDiag2[row - c + N - 1] = false;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    fixedCount = sc.nextInt();\n    fixedRows = new int[fixedCount];\n    fixedCols = new int[fixedCount];\n    for (int i = 0; i < fixedCount; i++) {\n      fixedRows[i] = sc.nextInt();\n      fixedCols[i] = sc.nextInt();\n    }\n\n    for (int i = 0; i < N; i++) queens[i] = -1;\n\n    placeFixed();\n    dfs(0);\n\n    // output board\n    for (int r = 0; r < N; r++) {\n      StringBuilder sb = new StringBuilder();\n      for (int c = 0; c < N; c++) {\n        if (queens[r] == c) {\n          sb.append('Q');\n        } else {\n          sb.append('.');\n        }\n      }\n      System.out.println(sb.toString());\n    }\n  }\n}"}
{"id": 1144, "language": "Java", "code": "package rpscli;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.util.*;\nimport org.json.*;\n\npublic class RPSCLI {\n    public static void main(String[] args) throws IOException {\n        // JSON \u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u53d6\u5f97\n        String inputFilePath = args[0];\n        String content = new String(Files.readAllBytes(new File(inputFilePath).toPath()));\n        JSONArray jsonData = new JSONArray(content);\n\n        // \u904e\u53bb\u306e\u8a18\u9332\u3092\u89e3\u6790\u3059\u308b\n        List<Integer> robotMoves = new ArrayList<>(Arrays.asList(0, 1, 2)); // \u521d\u671f\u72b6\u614b\n        Map<String, List<Integer>> patternMap = generatePatternMap(jsonData, robotMoves);\n\n        // \u6b21\u306e\u624b\u3092\u8a08\u7b97\u3059\u308b\n        JSONObject lastGame = jsonData.getJSONObject(jsonData.length() - 1);\n        String lastPattern = createPatternKey(robotMoves, lastGame.getInt(\"you\"));\n        int nextMove = predictNextMove(patternMap, lastPattern);\n\n        System.out.println(nextMove);\n    }\n\n    private static Map<String, List<Integer>> generatePatternMap(JSONArray jsonData, List<Integer> robotMoves) {\n        Map<String, List<Integer>> patternMap = new HashMap<>();\n        for (int i = 3; i < jsonData.length(); i++) {\n            JSONObject game = jsonData.getJSONObject(i);\n            String patternKey = createPatternKey(robotMoves, game.getInt(\"you\"));\n            \n            patternMap.computeIfAbsent(patternKey, k -> new ArrayList<>()).add(game.getInt(\"robot\"));\n            robotMoves.remove(0);\n            robotMoves.add(game.getInt(\"robot\"));\n        }\n        return patternMap;\n    }\n\n    private static String createPatternKey(List<Integer> robotMoves, int opponentMove) {\n        return robotMoves.get(0) + \",\" + robotMoves.get(1) + \",\" + robotMoves.get(2) + \",\" + opponentMove;\n    }\n\n    private static int predictNextMove(Map<String, List<Integer>> patterns, String currentPattern) {\n        List<Integer> moveCycle = patterns.getOrDefault(currentPattern, Arrays.asList(0, 1, 2));\n        int nextIdx = moveCycle.size() % 3; // \u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\n        return (moveCycle.get(nextIdx) + 1) % 3; // \u52dd\u5229\u624b\u3092\u8fd4\u3059\n    }\n}"}
{"id": 1145, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"%s\", args[i]);\n      int flag;\n      flag=4;\n      if((int)output.charAt(0)>256)\n        System.out.println(\"invalid\");\n      else\n      {\n        try\n        {\n          Integer var=Integer.parseInt(output);\n          if(var%3==0)\n            flag=1;\n          if(output.contains(\"3\"))\n          {\n            flag=2;\n            if(var%3==0)\n              flag=3;\n          }\n          switch(flag)\n          {\n            case 1:\n              System.out.println(\"idiot\");break;\n            case 2:\n              System.out.println(\"stupid\");break;\n            case 3:\n              System.out.println(\"dumb\");break;\n            case 4:\n              System.out.println(\"smart\");break;\n          }\n        }\n        catch(Exception e)\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n\t  }\n  }\n}"}
{"id": 1146, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n// \u300c\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\u300d\u30d1\u30bf\u30fc\u30f3\n#define PATTERN \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n#define PATTERN_LEN 8\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  int upper = atoi(argv[1]);\n  if (upper <= 0) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  char play[10010] = {0};\n  int cur = 0;\n  srand((unsigned int)time(NULL));\n\n  for (int i = 0; i < upper; i++) {\n    int r = rand() % 2;\n    if (r) {\n      strcpy(play + cur, \"\u30c9\");\n      printf(\"\u30c9\\n\");\n      cur += 3; // UTF-8 3bytes\n    } else {\n      strcpy(play + cur, \"\u30ab\");\n      printf(\"\u30ab\\n\");\n      cur += 3;\n    }\n    // \u904e\u53bb\u90e8\u5206\u30c1\u30a7\u30c3\u30af\n    if (cur >= PATTERN_LEN * 3) {\n      int cmp = strncmp(play + cur - PATTERN_LEN * 3, PATTERN, PATTERN_LEN * 3);\n      if (cmp == 0) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0;\n      }\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 1147, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tint i,num,power,flag; \n\tfor(i = 1; i<argc; i++)\n\t{  flag=0;\n\t\tif(strcmp(argv[i],\"0\")==0)\n\t\tprintf(\"smart\\n\");\n\t\telse\n\t\t{\n\t\t\tnum=atoi(argv[i]);\n\t    if(num<=0 || num>1000)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"invalid\\n\");\n\t\t\t\t}\n        else\n        {\n\t\t\t\tpower=1;\n\t\t\t\twhile(num/power!=0)\n\t\t\t\t{\n\t\t\t\t\tif(((num/power)%10)==3 && (num%3)==0)\n          { \n\t\t\t\t\t\tflag=2;\n\t\t\t\t\t\tprintf(\"dumb\\n\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(((num/power)%10)==3 && (num%3)!=0)\n\t\t\t\t\t{ \n\t\t\t      \t\t\tprintf(\"stupid\\n\");\n\t\t\t\t\t\t      flag=3;\n                  break;\n          }\n          if(((num/power)%10)!=3 && (num%3)==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=1;\n          }\n          power=power*10;\n\t\t\t\t}\n  \t\t\tif(flag==1)\n   \t\t\t\tprintf(\"idiot\\n\");\n\t\t\t\tif(flag==0)\n\t\t\t\t printf(\"smart\\n\");\n      }\n\t\t}\n\t\t\n\t}\n}\n"}
{"id": 1148, "language": "Python3", "code": "import sys\n\ndef solve_it(arg):\n    if not arg.isdigit() or not (0 <= (n := int(arg)) <= 1000):\n        return \"invalid\"\n\n    is_div_by_3 = n % 3 == 0\n    has_digit_3 = '3' in arg\n    \n    if is_div_by_3 and has_digit_3: return \"dumb\"\n    if is_div_by_3: return \"idiot\"\n    if has_digit_3: return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for x in argv:\n        print(solve_it(x))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1149, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # \u5165\u529b\u5024\u306e\u53d6\u5f97\n    n = int(argv[0]) if argv else 0\n    \n    target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    seq = \"\"\n    for _ in range(n):\n        ch = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(ch)\n        seq += ch\n        if target in seq:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n        # \u9023\u7d9a\u6027\u5224\u5b9a\u306e\u305f\u3081\u306b\u306a\u304c\u3059\u6700\u5927\u9577\u3092\u5236\u9650\n        if len(seq) > len(target):\n            seq = seq[-len(target):]\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1150, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  co=eval(open(argv[0]).read())\n  dic={}\n  for key,i in enumerate(co+[{}]):\n    if key<3:continue\n    c=(co[key-3]['robot'],co[key-2]['robot'],co[key-1]['robot'],co[key-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in dic:\n      if dic[c]!=(e-1)%3:\n        print(key,c,e,dic[c])\n    dic[c]=e\n\n  print((dic[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n"}
{"id": 1151, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    def romanize(number):\n        # \u7c21\u7d20\u306a\u30ed\u30fc\u30de\u6570\u5b57\u8a08\u7b97\u30ed\u30b8\u30c3\u30af\n        numerals = {\n            1000: \"M\" , 900: \"CM\", 500: \"D\", 400: \"CD\",\n             100: \"C\" ,  90: \"XC\",  50: \"L\",  40: \"XL\",\n              10: \"X\" ,   9: \"IX\",   5: \"V\",   4: \"IV\", 1: \"I\"\n        }\n        \n        result = []\n        for value in sorted(numerals.keys(), reverse=True):\n            count = number // value\n            result.append(numerals[value] * count)\n            number %= value\n        return ''.join(result)\n\n    if len(argv) > 0:\n        arabic_number = int(argv[0])\n        print(romanize(arabic_number))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1152, "language": "Python3", "code": "import sys\n\ndef find_status(input_number):\n    try:\n        number = int(input_number)\n    except ValueError:\n        return \"invalid\"\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    divisible_by_three = number % 3 == 0\n    has_three_digit = \"3\" in str(number)\n    if divisible_by_three and has_three_digit:\n        return \"dumb\"\n    elif divisible_by_three:\n        return \"idiot\"\n    elif has_three_digit:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for number in argv:\n        print(find_status(number))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1153, "language": "PHP", "code": "<?php namespace Track;\n\nfunction processInput($value) {\n    $num = filter_var($value, FILTER_VALIDATE_INT);\n\n    if ($num === false || $num < 0 || $num > 1000) {\n        return \"invalid\"; // \u5165\u529b\u5024\u304c\u6709\u52b9\u3067\u306a\u3044\u5834\u5408\n    }\n\n    if ($num % 3 === 0 && strpos((string)$num, '3') !== false) {\n        return \"dumb\";\n    } elseif ($num % 3 === 0) {\n        return \"idiot\";\n    } elseif (strpos((string)$num, '3') !== false) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nfunction main($argc, $argv) {\n    foreach ($argv as $arg) {\n        echo processInput($arg) . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1154, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n  static public void Main (string[] args)\n  {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    // ---\n    // This is a sample code to use arguments and stdout.\n    // Edit and remove this code as you like.\n\n    for (int i = 0; i < args.Length; i++)\n    {\n      // string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n      // Console.WriteLine(output);\n      \n      //input values\n      int input = 0;\n\n      //check the input is a number\n      bool isNumeric = int.TryParse(args[i], out input);\n      \n      //number to be contain in the input\n      int digit = 3;\n      \n      //check input is a number\n      if (isNumeric)\n      {\n        //check 0 <= input <= 1000\n          if (input >= 0 && input <= 1000)\n          {\n              //check input is divisible by 3 and contains 3\n              if (input % 3 == 0 && (input.ToString().Contains(digit.ToString())))\n              {\n                  Console.WriteLine(\"dumb\");\n              }\n              else if (input % 3 == 0)//check  input is divisible by 3\n              {\n                  Console.WriteLine(\"idiot\");\n              }\n              else if (input.ToString().Contains(digit.ToString()))//check input contains 3\n              {\n                  Console.WriteLine(\"stupid\");\n              }\n              else//not divisible by 3 and not include 3\n              {\n                  Console.WriteLine(\"smart\");\n              }\n          }\n      }\n      else//invalid input\n      {\n          Console.WriteLine(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 1155, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    infile = open(argv[1],'r')\n    outfile = open(argv[2],'w+')\n    dic = {' ': 0}\n    for i in range(26):\n        dic[chr(ord('a')+i)] = 0\n        dic[chr(ord('A')+i)] = 0\n    count = 0\n    for line in infile:\n        line = line.strip('\\n')\n        for char in line:\n            if char in dic:\n                dic[char] += 1\n                count += 1\n    if argv[0] == \"count\":\n        outfile.write(json.dumps(dic))\n        infile.close()\n        outfile.close()\n        return\n    tmp = {}\n    mindiff = 999999\n    spc = ''\n    for key in dic.keys():\n        #print((count - dic[key]) / (dic[key] + 1))\n        diff = (count - dic[key]) / (dic[key] + 1)\n        if abs(diff - 4.5) < mindiff:\n            mindiff = abs(diff - 4.5)\n            spc = key\n    if argv[0] == \"space\":\n        tmp[\"char\"] = spc\n        outfile.write(json.dumps(tmp))\n        infile.close()\n        outfile.close()\n        return\n    if argv[0] == \"decrypt\":\n        outfile.write(json.dumps(tmp))\n        infile.close()\n        outfile.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1156, "language": "C#", "code": "using System;\n\npublic class ThreeIdiotsCli\n{\n    public static void Main(string[] args)\n    {\n        foreach(string input in args)\n        {\n            bool isInt = int.TryParse(input, out int val);\n            if(!isInt || val < 0 || val > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divisibleBy3 = (val % 3 == 0);\n            bool contains3 = input.IndexOf('3') != -1;\n\n            if(divisibleBy3 && contains3)\n                Console.WriteLine(\"dumb\");\n            else if(divisibleBy3)\n                Console.WriteLine(\"idiot\");\n            else if(contains3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 1157, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for v in args:\n        if not v.isdigit():\n            print(\"invalid\")\n            continue\n        num = int(v)\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            continue\n        divisible_by_3 = (num % 3 == 0)\n        contains_3 = ('3' in v)\n        if divisible_by_3 and contains_3:\n            print(\"dumb\")\n        elif divisible_by_3:\n            print(\"idiot\") \n        elif contains_3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1158, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\n\npublic class App {\n\t// Constant\n\tprivate static int ALPHABET_SIZE = 26;\n\t\n\t// input output\n\tprivate static File inputFile, outputFile;\n\tprivate static PrintWriter outputWriter;\n\tprivate static String subCommand;\n\t\n\t// count\n\tprivate static int[] countUpper, countLower;\n\tprivate static int countSpace;\n\t\n\t// space\n\tprivate static char predictSpace;\n\t\n\t// decrypt\n\tprivate static String cryptStr, decryptStr;\n\t\n\tprivate static void init(String args[]){\n\t\t// input\n\t\tString inputPath, outputPath;\n\t\tsubCommand = args[0];\n\t\tinputPath = args[1];\n\t\toutputPath = args[2];\n\t\t\n\t\tinputFile = new File(inputPath);\n\t\toutputFile = new File(outputPath);\n\t\t\n\t\ttry {\n\t\t\toutputWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), \"UTF-8\")));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t// init\n\t\tcountUpper = new int[ALPHABET_SIZE];\n\t\tcountLower = new int[ALPHABET_SIZE];\n\t\tcountSpace = 0;\n\t}\n\t\n\t// output\n\tprivate static void output(String str){\n\t\toutputWriter.println(str);\n\t}\n\t\n\tprivate static void endOutput(){\n\t\toutputWriter.flush();\n\t\toutputWriter.close();\n\t}\n\t\n\tprivate static void outputCount(){\n\t\toutput(\"{\");\n\t\toutput(\"  \\\" \\\": \" + countSpace + \",\");\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tchar nowUpperChar = (char)('A' + i);\n\t\t\tchar nowLowerChar = (char)('a' + i);\n\t\t\toutput(\"  \\\"\" + nowUpperChar + \"\\\": \" + countUpper[i] + \",\");\n\t\t\tif(i != 25){\n\t\t\t\toutput(\"  \\\"\" + nowLowerChar + \"\\\": \" + countLower[i] + \",\");\n\t\t\t}else{\n\t\t\t\toutput(\"  \\\"\" + nowLowerChar + \"\\\": \" + countLower[i]);\n\t\t\t}\n\t\t}\n\t\toutput(\"}\");\n\t}\n\t\n\tprivate static void outputSpace(char spaceChar){\n\t\toutput(\"{\");\n\t\toutput(\"  \\\"char\\\": \\\"\" + spaceChar + \"\\\"\");\n\t\toutput(\"}\");\n\t}\n\t\n\t// count\n\tprivate static void countAlphabet() throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile), \"UTF-8\"));\n\n\t\tString line;\n\t\tStringBuilder stringBuilder = new StringBuilder();\t\t// save crypt string\n\t\twhile((line = br.readLine()) != null){\n\t\t\tstringBuilder.append(line + \"\\n\");\n\t\t\tfor(int i = 0;i < line.length();i++){\n\t\t\t\tchar nowChar = line.charAt(i);\n\t\t\t\t\n\t\t\t\tif('a' <= nowChar && nowChar <= 'z'){\n\t\t\t\t\t// lower case\n\t\t\t\t\tint index = nowChar - 'a';\n\t\t\t\t\tcountLower[index]++;\n\t\t\t\t}else if('A' <= nowChar && nowChar <= 'Z'){\n\t\t\t\t\t// upper case\n\t\t\t\t\tint index = nowChar - 'A';\n\t\t\t\t\tcountUpper[index]++;\n\t\t\t\t}else if(nowChar == ' '){\n\t\t\t\t\t// space\n\t\t\t\t\tcountSpace++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcryptStr = stringBuilder.toString();\n\t\t\n\t\tbr.close();\n\t}\n\t\n\t// predict space\n\tprivate static char predictSpace(){\n\t\tint sumCountAlpha = 0;\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tsumCountAlpha += countUpper[i];\n\t\t\tsumCountAlpha += countLower[i];\n\t\t}\n\t\tsumCountAlpha += countSpace;\n\t\t\n\t\tSystem.err.println(sumCountAlpha);\n\t\t// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u5e73\u5747\u7684\u306a\u5358\u8a9e\u306e\u9577\u3055\u3067\u5272\u3063\u3066\u3001\u5143\u306e\u6587\u3067\u306e\u30b9\u30da\u30fc\u30b9\u306e\u6570\u3092\u63a8\u5b9a\n\t\tdouble predictSpaceCount = sumCountAlpha / 4.5;\n\t\t\n\t\t// \u63a8\u5b9a\u3057\u305f\u6570\u3068\u4e00\u756a\u8fd1\u3044\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u63a2\u3059\n\t\tdouble minDiff = 9999999999.9999;\n\t\tchar predictSpaceChar = 'a';\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tdouble diff = Math.abs(predictSpaceCount - countLower[i]);\n\t\t\tif(diff < minDiff){\n\t\t\t\tminDiff = diff;\n\t\t\t\tpredictSpaceChar = (char) ('a' + i);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn predictSpaceChar;\n\t}\n\t\n\t// decrypt\n\t// \u63a8\u5b9a\u3057\u305f\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u5217\u3068\u30b9\u30da\u30fc\u30b9\u3092\u4ea4\u63db\u3002\u6570\u3048\u4e0a\u3052\u306e\u6570\u3082\u4ea4\u63db\n\tprivate static void changeSpaceChar(){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0;i < cryptStr.length();i++){\n\t\t\tchar nowChar = cryptStr.charAt(i);\n\t\t\tif(nowChar == ' '){\n\t\t\t\tsb.append(predictSpace);\n\t\t\t}else if(nowChar == predictSpace){\n\t\t\t\tsb.append(' ');\n\t\t\t}else{\n\t\t\t\tsb.append(nowChar);\n\t\t\t}\n\t\t}\n\t\t// count swap\n\t\tint tmp = countLower[predictSpace - 'a'];\n\t\tcountLower[predictSpace - 'a'] = countSpace;\n\t\tcountSpace = tmp;\n\t\t\n\t\tdecryptStr = sb.toString();\n\t}\n\n\t// \u30b7\u30d5\u30c8\u3059\u308b\u91cf\u3092\u63a8\u5b9a\n\tprivate static int predictShiftNum(){\n\t\tint maxCount = 0;\n\t\tchar maxCountChar = 'e';\n\t\t// \u6697\u53f7\u5316\u3057\u305f\u6587\u7ae0\u306b\u6700\u3082\u51fa\u3066\u304f\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u63a2\u3059\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tif(maxCount < countLower[i]){\n\t\t\t\tmaxCount = countLower[i];\n\t\t\t\tmaxCountChar = (char) ('a' + i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"MaxCountChar:\" + maxCountChar);\n\t\t// \u63a2\u3057\u305f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306f\u4f55\u6587\u5b57\u305a\u3089\u3057\u305f\u3089(\u624b\u524d\u306b\u305a\u3089\u3057\u305f\u3089)\u3001\u5e73\u6587\u3067\u6700\u3082\u51fa\u3066\u304f\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308be\u306b\u306a\u308b\u304b\u6c42\u3081\u308b\u3002\n\t\tint shiftNum = (ALPHABET_SIZE + maxCountChar - 'e') % ALPHABET_SIZE;\n\t\t\n\t\treturn shiftNum;\n\t}\n\t\n\tprivate static String shiftCryptStr(int shiftNum){\n\t\tStringBuilder sb = new StringBuilder();\n\t\t\n\t\tfor(int i = 0;i < decryptStr.length();i++){\n\t\t\tchar nowChar = decryptStr.charAt(i);\n\t\t\t// \u30b7\u30d5\u30c8\u3059\u308b\u91cf\u3092\u73fe\u5728\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u30de\u30a4\u30ca\u30b9\u3057\u3066\u5e73\u6587\u3092\u63a8\u5b9a\u3059\u308b\n\t\t\tif('a' <= nowChar && nowChar <= 'z'){\n\t\t\t\tint shiftAlphabetIndex = (ALPHABET_SIZE + nowChar - 'a' - shiftNum) % ALPHABET_SIZE;\n\t\t\t\tchar shiftChar = (char) ('a' + shiftAlphabetIndex);\n\t\t\t\tsb.append(shiftChar);\n\t\t\t}else if('A' <= nowChar && nowChar <= 'Z'){\n\t\t\t\tint shiftAlphabetIndex = (ALPHABET_SIZE + nowChar - 'A' - shiftNum) % ALPHABET_SIZE;\n\t\t\t\tchar shiftChar = (char) ('A' + shiftAlphabetIndex);\n\t\t\t\tsb.append(shiftChar);\n\t\t\t}else{\n\t\t\t\tsb.append(nowChar);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\tprivate static void decrypt(){\n\t\tchangeSpaceChar();\n\t\tint shiftNum = predictShiftNum();\n\t\tSystem.err.println(\"shiftNum:\" + shiftNum);\n\t\tdecryptStr = shiftCryptStr(shiftNum);\n\t}\n\t\n\tpublic static void main(String args[]){\n\t\tinit(args);\n\t\t\n\t\ttry {\n\t\t\tcountAlphabet();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tpredictSpace = predictSpace();\n\t\t\n\t\tif(subCommand.equals(\"count\")){\n\t\t\toutputCount();\n\t\t\tendOutput();\n\t\t}else if(subCommand.equals(\"space\")){\n\t\t\toutputSpace(predictSpace);\n\t\t\tendOutput();\n\t\t}else if(subCommand.equals(\"decrypt\")){\n\t\t\tdecrypt();\n\t\t\toutput(decryptStr);\n\t\t\tendOutput();\n\t\t}\n\t}\n}\n"}
{"id": 1159, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint hasThree(const char *s) {\n  while (*s) {\n    if (*s == '3') return 1;\n    s++;\n  }\n  return 0;\n}\n\nint isNumeric(const char *s) {\n  if (!*s) return 0;\n  for (; *s; s++)\n    if (!isdigit(*s)) return 0;\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  int i;\n  for (i=1; i<argc; i++) {\n    if (!isNumeric(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n<0 || n>1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = n%3==0;\n    int found3 = hasThree(argv[i]);\n    if (div3 && found3)\n      printf(\"dumb\\n\");\n    else if (div3)\n      printf(\"idiot\\n\");\n    else if (found3)\n      printf(\"stupid\\n\");\n    else\n      printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 1160, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <sstream>\nusing namespace std;\n\n// JSON\u306e\u30d1\u30fc\u30b9\u3092\u81ea\u524d\u3067\u7c21\u6613\u5b9f\u88c5\nstruct Record {\n    int robot;\n    int you;\n};\n\nvector<Record> load_history(const string &file_path) {\n    vector<Record> v;\n    ifstream fin(file_path);\n    if (!fin) return v;\n    string line, all;\n    while (getline(fin, line)) all += line;\n    size_t pos = 0;\n    while ((pos = all.find(\"{\", pos)) != string::npos) {\n        size_t rpos = all.find(\"\\\"robot\\\":\", pos);\n        size_t ypos = all.find(\"\\\"you\\\":\", rpos);\n        size_t comma1 = all.find(\",\", rpos);\n        size_t comma2 = all.find(\"}\", ypos);\n        if (rpos == string::npos || ypos == string::npos) break;\n        int robot = stoi(all.substr(rpos + 8, comma1 - (rpos + 8)));\n        int you = stoi(all.substr(ypos + 6, comma2 - (ypos + 6)));\n        v.push_back({robot, you});\n        pos = comma2;\n    }\n    return v;\n}\n\n// key\u4f5c\u6210\u7528\nstring make_key(const vector<Record>& hist, int idx) {\n    stringstream ss;\n    for (int d = 3; d >=1; --d) {\n        ss << hist[idx - d].robot << \",\";\n    }\n    ss << hist[idx - 1].you;\n    return ss.str();\n}\n\n// \u52dd\u3064\u624b\u3092\u8fd4\u3059\nint win_move(int robot_hand) {\n    return (robot_hand + 2) % 3;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    vector<Record> history = load_history(argv[1]);\n    if (history.size() < 4) {\n        cout << \"0\" << endl; // \u521d\u671f3\u624b+1\u672a\u6e80\u306f\u9069\u5f53\u306b\u51fa\u3059\n        return 0;\n    }\n    unordered_map<string, vector<int>> param2hands;\n    // \u30d1\u30e9\u30e1\u30fc\u30bf\u5217\u3068\u30ed\u30dc\u30c3\u30c8\u6b21\u306e\u624b\u306e\u5c65\u6b74\u751f\u6210\n    for (size_t i = 3; i + 1 < history.size(); ++i) {\n        string param = make_key(history, i + 1);\n        param2hands[param].push_back(history[i + 1].robot);\n    }\n    // \u73fe\u5728\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u62bd\u51fa\n    int N = history.size();\n    string now_param = make_key(history, N);\n\n    // \u4eca\u307e\u3067\u306b\u898b\u305f\u56de\u6570\u3060\u3051\u6b21\u624b\u304c\u305a\u308c\u3066\u3044\u308b\u4ed5\u7d44\u307f\n    vector<int>& moves = param2hands[now_param];\n    int k = moves.size();\n    // \u6700\u521d\u306e\u624b\u3092\u7279\u5b9a\n    int first_hand = 0;\n    if (!moves.empty()) {\n        first_hand = moves[0];\n    } else {\n        // \u672a\u51fa\u73fe\u30d1\u30bf\u30fc\u30f3\uff08\u3081\u3063\u305f\u306b\u306a\u3044\uff09: cycle\u6700\u521d\u306b\u4eee\u5b9a\n        first_hand = 0; // \u9069\u5f53\n    }\n    int robot_next = (first_hand + k) % 3;\n    int my_hand = win_move(robot_next);\n    cout << my_hand << endl;\n    return 0;\n}"}
{"id": 1161, "language": "Java", "code": "/**\n * Convert Arabic numerals to Roman numerals.\n * Author: yuki yuta\n * */\npackage track;\n\npublic class App {\n\t/**\n\t * \u30e1\u30a4\u30f3\u95a2\u6570\n\t * \u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001\n\t * parse_Arabic\u95a2\u6570\u3001convert_Roma\u95a2\u6570\u306b\u5024\u6e21\u3057\u3092\u5b9f\u65bd\n\t * */\n\tpublic static void main(String args[]) {\n        int Arabia =Integer.parseInt(args[0]);\n        int rank_num=String.valueOf(Arabia).length();\t\t//\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u306e\u6841\u6570\u3092\u53d6\u5f97\n\n        int rank[]=parse_Arabic(Arabia,rank_num);\t\t\t//\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u5404\u6841\u3054\u3068\u306b\u5206\u5272\u3057\u3066\u914d\u5217\u306b\u683c\u7d0d\n\n        for(int i=rank.length-1;i>=0;i--) {\n        \tconvert_Roma(rank[i],i); \t\t\t\t\t\t//\u4f4d\u306e\u5927\u304d\u3044\u5024\u304b\u3089\u9806\u306b\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\n        }\n\n\t}\n\n\t/** \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u5404\u6841\u3054\u3068\u306b\u5206\u5272\u3057\u3066\u914d\u5217\u306b\u683c\u7d0d*/\n\tpublic static int[] parse_Arabic(int num,int rank_num) {\n\t\tint[] rank_parse=new int[rank_num];\n\n\t\tfor(int i=rank_parse.length-1;i>=0;i--) {\n        \trank_parse[i]=num/(int)Math.pow(10,i);\n        \tnum-=rank_parse[i]*(int)Math.pow(10,i);\n        }\n\t\treturn rank_parse;\n\n\t}\n\t/** \u4f4d\u306e\u5927\u304d\u3044\u5024\u304b\u3089\u9806\u306b\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3057\u3066\u51fa\u529b*/\n\tpublic static void convert_Roma(int rank_Arabia,int pow_num) {\n\n\t\tString [][] Roma= {{\"I\",\"V\"},{\"X\",\"L\"},{\"C\",\"D\"},{\"M\",\"\"},{\"\",\"\"}};\n\t\tString printRoma=\"\";\t\t//\u51fa\u529b\u3059\u308b\u6587\u5b57\u5217\u3000\u3053\u3053\u306b\u9806\u306b\u30ed\u30fc\u30de\u6570\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\n\t\tswitch(rank_Arabia) {\n\t\tcase 9:printRoma+=Roma[pow_num][0]+Roma[pow_num+1][0];\n\t\t\tbreak;\n\n\t\tcase 8:printRoma+=Roma[pow_num][0];\n\t\tcase 7:printRoma+=Roma[pow_num][0];\n\t\tcase 6:printRoma+=Roma[pow_num][0];\n\t\tcase 5:printRoma=Roma[pow_num][1]+printRoma;\n\t\t\tbreak;\n\n\t\tcase 4:printRoma+=Roma[pow_num][0]+Roma[pow_num][1];\n\t\t\tbreak;\n\n\t\tcase 3:printRoma+=Roma[pow_num][0];\n\t\tcase 2:printRoma+=Roma[pow_num][0];\n\t\tcase 1:printRoma+=Roma[pow_num][0];\n\t\t\tbreak;\n\n\t\t}\n\n\t\tSystem.out.print(printRoma);\n\n\n\t}\n\n\n}"}
{"id": 1162, "language": "Java", "code": "package track;\n\npublic class App \n{\n  public static boolean contain3(int value)\n  {\n      int rem;\n      while(value>0)\n      {\n        rem = value%10;\n        value = value/10;\n        if(rem == 3)\n        {\n          return true;\n        }\n      }\n      return false;\n  }\n\n\tpublic static void main(String[] args) throws Exception\n  {\n    int val;\n\t\tfor (int i = 0, l = args.length; i < l; i++) \n    {\n      if(args[i].equals(\"\uff11\uff13\"))\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n\t\t\ttry\n      {\n        val = Integer.parseInt(args[i]);\n        if(val >= 0 && val <= 1000)\n        {\n          System.out.println((val % 3 == 0 && contain3(val) == true ? \"dumb\" : (val % 3 == 0 ? \"idiot\" : ( contain3(val) == true ? \"stupid\" : \"smart\"))));\n        }\n      }\n      catch(NumberFormatException e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1163, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\nChar = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nchar = \"abcdefghijklmnopqrstuvwxyz\"\nCd = {}\ncd = {}\n\ndef counter(tx,path):\n  # print(tx)\n  #Large Char\n  for C in Char:\n    Cd[C] = tx.count(C)\n  #small char\n  for c in char:\n    cd[c] = tx.count(c)\n  Cd.update(cd)\n  fj = open(path, 'w')\n  json.dump(Cd, fj, indent=0)\n  return Cd\n\ndef main(argv):\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    # for i, v in enumerate(argv):\n    #     print(\"argv[{0}]: {1}\".format(i, v))\n\n    f = open(argv[1])\n    txt = f.read()\n    f.close()\n    if argv[0] == \"count\":\n      counter(txt, argv[2])\n\n    elif argv[0] == \"space\":\n      d = counter(txt, argv[2])\n      maxk = max(d,key=d.get)\n      j = {\"char\":maxk}\n      fjs = open(argv[2],\"w\")\n      json.dump(j,fjs, indent=0)\n\n\n    else:\n      pass\n      # print(\"decrypt\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1164, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class MainApp\n{\nstatic void Main(string[] args)\n        {\n            var exp = args[0].Split('*', '+');\n            int left, right;\n            if (!int.TryParse(exp[0].Trim(), out left) ||\n                !int.TryParse(exp[1].Trim(), out right))\n            {\n                goto exit_line;\n            }\n\n            var tenLeft = Nine2Ten(left);\n            var tenRight = Nine2Ten(right);\n\n\n            var tenResult = args[0].Contains(\"+\") ? tenLeft + tenRight : tenLeft * tenRight;\n\n            Console.WriteLine(Ten2Nine(tenResult));\n\n            exit_line:\n            Console.Read();\n        }\n\n        private static int Ten2Nine(int ten)\n        {\n            var numStack = new Stack<int>();\n            while (ten != 0)\n            {\n                numStack.Push(ten % 9);\n                ten /= 9;\n            }\n\n            var str = \"\";\n\n            foreach (var i in numStack)\n            {\n                str += i.ToString();\n            }\n\n            return int.Parse(str);\n        }\n\n        private static int Nine2Ten(int nine)\n        {\n            var str = nine.ToString();\n            var exp = 0;\n            var ret = 0;\n            for (var i = str.Length - 1; i >= 0; i--)\n            {\n                ret += int.Parse(str[i].ToString()) * (exp != 0 ? (int)Math.Pow(9, exp) : 1);\n                exp++;\n            }\n\n            return ret;\n        }\n}\n"}
{"id": 1165, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int result,count;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n        String output = String.format(\"%s\",args[i]);\n\t\t\t  result=4;\n        count=0;\n        int s=(int)output.charAt(0);\n        if(s>256)\n        {\n          System.out.println(\"invalid\");\n          break;\n        }\n        Integer person=Integer.parseInt(output);\n        if(person%3==0)\n        {\n          result=1;\n          count++;\n        }\n        if(output.contains(\"3\"))\n        {\n          result=2;\n          count++;\n        }\n        if(count==2)\n        {\n          result=3;\n        }\n        switch(result)\n        {\n          case 1:\n            System.out.println(\"idiot\");\n            break;\n          case 2:\n            System.out.println(\"stupid\");\n            break;\n          case 3:\n            System.out.println(\"dumb\");\n            break;\n          case 4:\n            System.out.println(\"smart\");\n            break;\n        }\n      }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n      \n      \n      \n      \n                "}
{"id": 1166, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define CHARS 53\n\nint char2idx(char c) {\n    if (c == ' ') return 52;\n    if ('A' <= c && c <= 'Z') return c - 'A';\n    if ('a' <= c && c <= 'z') return 26 + (c - 'a');\n    return -1;\n}\n\nchar idx2char(int idx) {\n    if (0 <= idx && idx < 26) return 'A' + idx;\n    if (26 <= idx && idx < 52) return 'a' + (idx - 26);\n    if (idx == 52) return ' ';\n    return '?';\n}\n\nvoid count_freq(const char* buf, size_t len, int freq[CHARS]) {\n    for (size_t i = 0; i < len; ++i) {\n        int idx = char2idx(buf[i]);\n        if (idx >= 0) freq[idx]++;\n    }\n}\n\nvoid write_json_count(int freq[CHARS], const char* fp) {\n    FILE* f = fopen(fp, \"w\");\n    int first = 1;\n    fprintf(f, \"{\\n\");\n    for (int i = 0; i < CHARS; ++i) {\n        if (freq[i] > 0) {\n            if (!first) fprintf(f, \",\\n\");\n            fprintf(f, \"  \\\"%c\\\": %d\", idx2char(i), freq[i]);\n            first = 0;\n        }\n    }\n    fprintf(f, \"\\n}\\n\");\n    fclose(f);\n}\n\nsize_t readfile(const char* path, char** outbuf) {\n    FILE* f = fopen(path, \"rb\");\n    if (!f) return 0;\n    fseek(f, 0, SEEK_END);\n    size_t len = ftell(f);\n    fseek(f, 0, SEEK_SET);\n    char* buf = malloc(len + 1);\n    fread(buf, 1, len, f);\n    buf[len] = '\\0';\n    fclose(f);\n    *outbuf = buf;\n    return len;\n}\n\nchar guess_spacechar(const int freq[CHARS]) {\n    int max = -1, maxi = 26;\n    for (int i = 26; i < 52; ++i) {\n        if (freq[i] > max) {\n            max = freq[i];\n            maxi = i;\n        }\n    }\n    return idx2char(maxi);\n}\n\nint most_freq_alpha(const char* buf, size_t len, char exclude) {\n    int stat[26] = {0};\n    for (size_t i = 0; i < len; ++i) {\n        char c = buf[i];\n        if (isalpha(c) && c != exclude && c != toupper(exclude)) stat[tolower(c) - 'a']++;\n    }\n    int max = -1, maxi = 0;\n    for (int i = 0; i < 26; ++i) {\n        if (stat[i] > max) { max = stat[i]; maxi = i; }\n    }\n    return maxi;\n}\n\nint deduce_shift(int maxidx) {\n    // assume 'e' in plaintext is most frequent, and maps to maxidx\n    int eshift = (maxidx - ('e' - 'a') + 26) % 26;\n    return eshift;\n}\n\nvoid do_decrypt(const char* enc, size_t len, char spacechar, int shift, char* out) {\n    for (size_t i = 0; i < len; ++i) {\n        char c = enc[i];\n        if (c == ' ') c = spacechar;\n        else if (c == spacechar) c = ' ';\n        if ('a' <= c && c <= 'z')\n            out[i] = ((c - 'a' - shift + 26) % 26) + 'a';\n        else if ('A' <= c && c <= 'Z')\n            out[i] = ((c - 'A' - shift + 26) % 26) + 'A';\n        else\n            out[i] = c;\n    }\n    out[len] = '\\0';\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1;\n    char* cmd = argv[1];\n    char* inpath = argv[2];\n    char* outpath = argv[3];\n    char* buf;\n    size_t len = readfile(inpath, &buf);\n    if (len == 0) return 1;\n\n    int freq[CHARS] = {0};\n    count_freq(buf, len, freq);\n\n    if (strcmp(cmd, \"count\") == 0) {\n        write_json_count(freq, outpath);\n        free(buf); return 0;\n    } else if (strcmp(cmd, \"space\") == 0) {\n        char schar = guess_spacechar(freq);\n        FILE* f = fopen(outpath, \"w\");\n        fprintf(f, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", schar);\n        fclose(f);\n        free(buf); return 0;\n    } else if (strcmp(cmd, \"decrypt\") == 0) {\n        char schar = guess_spacechar(freq);\n        int max_alpha = most_freq_alpha(buf, len, schar);\n        int shift = deduce_shift(max_alpha);\n        char* out = malloc(len + 1);\n        do_decrypt(buf, len, schar, shift, out);\n        FILE* f = fopen(outpath, \"wb\");\n        fwrite(out, 1, len, f);\n        fclose(f);\n        free(out);\n        free(buf);\n        return 0;\n    }\n    free(buf);\n    return 0;\n}"}
{"id": 1167, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  const char *digits1[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", };\n  const char *digits10[] = { \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", };\n  const char *digits100[] = { \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\", };\n  const char *digits1000[] = { \"\", \"M\", \"MM\", \"MMM\", \"MMMM\" };\n\n  int v = atoi(argv[1]);\n\n  if (1000 <= v) {\n    printf(\"%s\", digits1000[v / 1000]);\n    v %= 1000;\n  }\n  if (100 <= v) {\n    printf(\"%s\", digits100[v / 100]);\n    v %= 100;\n  }\n  if (10 <= v) {\n    printf(\"%s\", digits10[v / 10]);\n    v %= 10;\n  }\n  printf(\"%s\\n\", digits1[v]);\n\n  return 0;\n}\n"}
{"id": 1168, "language": "Python", "code": "import sys\na=sys.argv[1:]\ndef abhishek(i1):\n\n  if(not i1.isdigit()):\n    return False\n  if(int(i1)<0 or int(i1)>1000):\n    return False\n  return True  \n\ndef abhi(i1):\n  t1=False\n  t2=False\n  n=int(i1)\n  if n%3==0:\n    t2=True\n  if '3' in i1:\n    t1=True\n  if t1 and t2:\n    print \"dumb\"\n  elif t1:\n    print \"stupid\"\n  elif t2:\n    print \"idiot\"\n  else:\n    print \"smart\"\n\nfor x in a:\n  if(abhishek(x)):\n    abhi(x)\n  else:\n    print \"invalid\"              \n\n\n\n\n\n"}
{"id": 1169, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'):\n    print(\"stupid\\ninvalid\")\n  else:\n    ka=[]\n    for item in argv:\n      ka.append(item)\n    for item in ka:\n      if(item.isnumeric()):\n        if('3' in item):\n          if(int(item)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(item)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n\n\n \n  '''for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))'''\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1170, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      if(!checkValid(args[i])){System.out.println(\"invalid\");}\n      else{\n        System.out.println(checkIdiot(Integer.parseInt(args[i])));\n      }\n\t\t}\n\t}\n\n  public static boolean checkValid(String s){\n    int length = s.length(), i;\n    for(i=0; i<length; i++){\n      if(!Character.isDigit(s.charAt(i))){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static String checkIdiot(int n){\n    boolean idiot=false, stupid=false;\n    \n    if(n%3==0){idiot = true;}\n\n    int n1 = n;\n    while(n1!=0){\n      if(n1%10==3){\n        stupid=true;}\n      n1/=10;\n    }\n\n    if(idiot==true&&stupid==true){return \"dumb\";}\n    if(idiot==true){return \"idiot\";}\n    if(stupid==true){return \"stupid\";}\n    return \"smart\";\n  }\n}\n"}
{"id": 1171, "language": "Java", "code": "package track;\n\npublic class FooBar {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            evaluate(arg);\n        }\n    }\n\n    public static void evaluate(String input) {\n        if (!input.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n        int num = Integer.parseInt(input);\n        if (num > 1000 || num < 0) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        boolean c1 = num % 3 == 0;\n        boolean c2 = input.contains(\"3\");\n\n        if (c1 && c2) {\n            System.out.println(\"dumb\");\n        } else if (c1) {\n            System.out.println(\"idiot\");\n        } else if (c2) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1172, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int r)\n{\n  if(r % 3 == 0)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n  }\n  bool stupid(int r)\n  {\n    int p=r,p1;\n    while(p!=0)\n    {\n      p1=p%10;\n      if(p1==3)\n      {\n        return true;\n      }\n      p/=10;\n    }\n    return false;\n  }\n  bool dumb(int r)\n  {\n    if(idiot(r) && stupid(r))\n    {\n      return true;\n    }\n    else{\n      return false;\n\n    }\n    }\n    bool smart(int r)\n    {\n      if(!idiot(r) && !stupid(r))\n      {\n        return true;\n      }\n      else{\n        return false;\n      }\n    }\n    bool invalid(int r)\n    {\n      if(!stupid(r)  && !idiot(r) && !dumb(r) && !smart(r))\n      {\n        return true;\n      }\n      else\n      {\n        return false;\n      }\n    }\n    int main(int argc,char* argv[])\n    {\n      int len=argc-1,i=1;\n      for(i=1;i<=len;i++)\n      {\n        int num=atoi(argv[i]);\n        if(num!=0)\n        {\n          if(idiot(num) && stupid(num))\n          {\n            printf(\"dumb\\n\");\n          }\n          else\n          {\n            if(idiot(num))\n            {\n              printf(\"idiot\\n\");\n            }\n            else if(stupid(num))\n            {\n              printf(\"stupid\\n\");\n            }\n            else if(smart(num))\n            {\n              printf(\"smart\\n\");\n            }\n            else if(invalid(num))\n            {\n              printf(\"invalid\\n\");\n            }\n            }\n           }\n           else\n           {\n             printf(\"invalid\\n\");\n           }\n\n\n\n        }\n      }\n    \n\n"}
{"id": 1173, "language": "Java", "code": "public class NineBaseCalc {\n  public static void main(String[] args) {\n    String expr = args[0];\n    String[] parts = expr.split(\" \");\n    String left = parts[0];\n    String op = parts[1];\n    String right = parts[2];\n\n    int leftDec = toDec(left);\n    int rightDec = toDec(right);\n    int result = 0;\n\n    if (op.equals(\"+\")) {\n      result = leftDec + rightDec;\n    } else if (op.equals(\"*\")) {\n      result = leftDec * rightDec;\n    }\n\n    System.out.println(toBase9(result));\n  }\n\n  static int toDec(String base9) {\n    int res = 0;\n    for (int i = 0; i < base9.length(); i++) {\n      res = res * 9 + (base9.charAt(i) - '0');\n    }\n    return res;\n  }\n\n  static String toBase9(int dec) {\n    if (dec == 0) return \"0\";\n    StringBuilder sb = new StringBuilder();\n    while (dec > 0) {\n      sb.append(dec % 9);\n      dec /= 9;\n    }\n    return sb.reverse().toString();\n  }\n}"}
{"id": 1174, "language": "JavaScript (Node.js)", "code": "\"use strict\";\nconst fs = require('fs');\n//\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u5ba3\u8a00\nconst alphabets = ' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\nfunction main(argv) {\n    switch (argv[0]) {\n        case 'count': {\n            count(argv.slice(1));\n            break;\n        }\n        case 'space': {\n            space(argv.slice(1));\n            break;\n        }\n        case 'decrypt': {\n            decrypt(argv.slice(1));\n            break;\n        }\n    }\n\n}\nconst count = (argv, write = true) => {\n    let text = fs.readFileSync(argv[0], \"utf8\");\n    const textList = text.split('');\n    const answer = {};\n    alphabets.forEach(char => {\n        answer[char] = 0;\n    })\n    // \u51fa\u73fe\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u6570\u3048\u4e0a\u3052\u308b\n    textList.forEach(char => {\n        const index = alphabets.indexOf(char);\n        if (index >= 0) {\n            answer[alphabets[index]]++;\n        }\n    });\n    if (write) {\n        fs.writeFile(argv[1], JSON.stringify(answer), function (err) {\n            if (err) {\n                return console.log(err);\n            }\n        })\n    }\n    return answer;\n};\n\nconst space = (argv, write = true) => {\n    let counstList = Object.entries(count(argv, false))\n    counstList = counstList.slice(1);\n    // count\u3092\u547c\u3073\u51fa\u3057\u305f\u7d50\u679c\u3092\u30bd\u30fc\u30c8\u3059\u308b\n    counstList.sort((a, b) => {\n        if (a[1] < b[1]) return 1;\n        if (a[1] > b[1]) return -1;\n        return 0;\n    });\n    // \u51fa\u73fe\u56de\u6570\u304c\u4e00\u756a\u591a\u3044\u3082\u306e\u304c\u7a7a\u767d\u3060\u3068\u6c7a\u5b9a\u3059\u308b\n    const answer =counstList[0][0]; \n    fs.writeFile(argv[1], JSON.stringify(\n        {\n            char: counstList[0][0]\n        }), function (err) {\n            if (err) {\n                return console.log(err);\n            }\n        })\n    return answer;\n};\n\nconst decrypt = argv => {\n    const countRes = count(argv, false);\n    const spaceRes = space(argv, false);\n    let countList = Object.entries(countRes);\n    let text = fs.readFileSync(argv[0], \"utf8\");\n    const textList = text.split('');\n    // count\u3092\u547c\u3073\u51fa\u3057\u305f\u7d50\u679c\u3092\u30bd\u30fc\u30c8\u3059\u308b\n    countList.sort((a, b) => {\n        if (a[1] < b[1]) return 1;\n        if (a[1] > b[1]) return -1;\n        return 0;\n    });\n    // 2\u756a\u76ee\u306b\u51fa\u73fe\u56de\u6570\u304c\u591a\u3044\u3082\u306e\u304ce\u3060\u3068\u6c7a\u5b9a\u3059\u308b\n    const e = countList[1][0];\n    const shift = 26 - (e.charCodeAt() - 'e'.charCodeAt());\n    // e\u306e\u30b7\u30d5\u30c8\u91cf\u3092\u3082\u3068\u306b\u3001\u5fa9\u5143\u3092\u884c\u3046\n    const answer = textList.map(c => {\n        if (c === ' ') {\n            c = spaceRes;\n        } else if (c === spaceRes) {\n            c = ' ';\n        }\n        const code = c.charCodeAt();\n        let res = code;\n        if (97 <= code && code <= 122) {\n            res = code + shift;\n            if (res > 122) {\n                res -= 26;\n            }\n        } else if (\n            65 <= code && code <= 90\n        ) {\n            res = code + shift;\n            if (res > 90) {\n                res -= 26;\n            }\n        }\n        return String.fromCharCode(res);\n    })\n    fs.writeFile(argv[1], answer.join(''), function (err) {\n        if (err) {\n            return console.log(err);\n        }\n    })\n}\nmain(process.argv.slice(2));"}
{"id": 1175, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String x : args) {\n      String res = \"invalid\";\n      try {\n        int num = Integer.parseInt(x);\n        if (num < 0 || num > 1000) res = \"invalid\";\n        else if (num % 3 == 0 && x.contains(\"3\")) res = \"dumb\";\n        else if (num % 3 == 0) res = \"idiot\";\n        else if (x.contains(\"3\")) res = \"stupid\";\n        else res = \"smart\";\n      } catch (Exception e) {\n        res = \"invalid\";\n      }\n      System.out.println(res);\n    }\n  }\n}"}
{"id": 1176, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n  \"strconv\"\n  \"strings\"\n)\n\nfunc main() {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  // ---\n  // This is a sample code to use arguments and outputs.\n  // Edit and remove this code as you like.\n\n\trun(os.Args[1:])\n}\n\nfunc run(args []string) {\n\tfor _, v := range args {\n\t\ttmp, err := strconv.Atoi(v)\n    if err != nil {\n      fmt.Println(\"invalid\")\n      continue\n    }\n\n    if isValidRange(tmp) {\n      fmt.Println(\"invalid\")\n      continue\n    }\n\n    if isNumberDivisibleBy(tmp, 3) && isNumberIncludeANumberOf(tmp, 3) {\n      fmt.Println(\"dumb\")\n      continue\n    }\n\n    if isNumberIncludeANumberOf(tmp, 3) {\n      fmt.Println(\"stupid\")\n      continue\n    }\n\n    if isNumberDivisibleBy(tmp, 3) {\n      fmt.Println(\"idiot\")\n      continue\n    }\n\n    fmt.Println(\"smart\")\n\t}\n}\n\nfunc isNumberDivisibleBy(input int, num int) bool {\n  return input % num == 0\n}\n\nfunc isNumberIncludeANumberOf(input int, num int) bool {\n  //convert to string\n  numStr := strconv.Itoa(input)\n  return strings.Contains(numStr, \"3\")\n}\n\nfunc isValidRange(input int) bool {\n  return input < 0 && input > 1000\n}\n"}
{"id": 1177, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ChainedConditions {\n\n  private static String determine(int number) {\n    if (number < 0 || number > 1000) return \"invalid\";\n\n    String numStr = String.valueOf(number);\n    boolean divBy3 = (number % 3 == 0);\n    boolean contains3 = numStr.contains(\"3\");\n\n    if (divBy3 && contains3) {\n      return \"dumb\";\n    } else if (divBy3) {\n      return \"idiot\";\n    } else if (contains3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] cmdLineArgs) {\n    for (String arg : cmdLineArgs) {\n      Scanner s = new Scanner(arg);\n      if (s.hasNextInt()) {\n        System.out.println(determine(s.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      s.close();\n    }\n  }\n}"}
{"id": 1178, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.function.Function;\n\npublic class SmartLogic {\n\n  // Functional interface for mapping number to string\n  private static final Function<Integer, String> CLASSIFIER = num -> {\n    if (num < 0 || num > 1000) {\n      return \"invalid\";\n    }\n    boolean divBy3 = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n    if (divBy3 && has3) return \"dumb\";\n    if (divBy3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  };\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(CLASSIFIER.apply(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1179, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you \n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1180, "language": "Java", "code": "package encryptionapp;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class App {\n  \n  public static void main(String[] args) throws IOException {\n    if (args.length != 3) return;\n\n    String command = args[0];\n    String inputFile = args[1];\n    String outputFile = args[2];\n\n    String content = new String(Files.readAllBytes(Paths.get(inputFile)));\n\n    switch (command) {\n      case \"count\":\n        characterCount(content, outputFile);\n        break;\n      case \"space\":\n        spaceCharacter(content, outputFile);\n        break;\n      case \"decrypt\":\n        decrypt(content, outputFile);\n        break;\n    }\n  }\n\n  private static void characterCount(String content, String outputFile) throws IOException {\n    Map<Character, Integer> countMap = new HashMap<>();\n    for (char character : content.toCharArray()) {\n      if (Character.isLetter(character) || character == ' ') {\n        countMap.put(character, countMap.getOrDefault(character, 0) + 1);\n      }\n    }\n    writeMapAsJson(countMap, outputFile);\n  }\n\n  private static void spaceCharacter(String content, String outputFile) throws IOException {\n    char substitutedChar = 'x'; // Placeholder for actual logic\n    Map<String, Character> spaceMap = new HashMap<>();\n    spaceMap.put(\"char\", substitutedChar);\n    writeMapAsJson(spaceMap, outputFile);\n  }\n\n  private static void decrypt(String content, String outputFile) throws IOException {\n    StringBuilder decryptedContent = new StringBuilder();\n    for (char character : content.toCharArray()) {\n      decryptedContent.append(character);\n    }\n    writeToFile(decryptedContent.toString(), outputFile);\n  }\n\n  private static void writeMapAsJson(Map<?, ?> map, String outputFile) throws IOException {\n    StringBuilder jsonContent = new StringBuilder(\"{\\n\");\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n      jsonContent.append(String.format(\"  \\\"%s\\\": %s,\\n\", entry.getKey(), entry.getValue()));\n    }\n    jsonContent.deleteCharAt(jsonContent.length() - 2); // Remove last comma\n    jsonContent.append(\"}\");\n    writeToFile(jsonContent.toString(), outputFile);\n  }\n\n  private static void writeToFile(String content, String outputFile) throws IOException {\n    try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(outputFile))) {\n      writer.write(content);\n    }\n  }\n}"}
{"id": 1181, "language": "Java", "code": "package track;\n\npublic class Solver {\n    public static void main(String[] args) {\n        for(String x : args) {\n            System.out.println(solve(x));\n        }\n    }\n    \n    private static String solve(String arg) {\n        if(!arg.matches(\"\\\\d+\")) return \"invalid\";\n        \n        int n = Integer.parseInt(arg);\n        if(n < 0 || n > 1000) return \"invalid\";\n        \n        boolean isDivBy3 = (n % 3 == 0);\n        boolean hasDigit3 = arg.contains(\"3\");\n        \n        if(!isDivBy3 && !hasDigit3) {\n            return \"smart\";\n        } else if(isDivBy3 && !hasDigit3) {\n            return \"idiot\";\n        } else if(!isDivBy3 && hasDigit3) {\n            return \"stupid\";\n        } else { // isDivBy3 && hasDigit3\n            return \"dumb\";\n        }\n    }\n}"}
{"id": 1182, "language": "Java", "code": "package chessboard;\n\nimport java.util.*;\n\npublic class Main {\n    static char[][] grid = new char[8][8];\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        List<int[]> queens = new ArrayList<>();\n\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            grid[r][c] = 'Q';\n            queens.add(new int[]{r, c});\n        }\n\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (grid[i][j] != 'Q') grid[i][j] = '.';\n            }\n        }\n\n        placeQueens(queens.size(), queens);\n        printBoard();\n    }\n\n    private static void printBoard() {\n        for (char[] row : grid) {\n            System.out.println(String.valueOf(row));\n        }\n    }\n\n    private static boolean validPosition(int row, int col, List<int[]> queens) {\n        for (int[] q : queens) {\n            int qr = q[0], qc = q[1];\n            if (qc == col || qr == row || Math.abs(qr - row) == Math.abs(qc - col)) return false;\n        }\n        return true;\n    }\n\n    private static boolean placeQueens(int placed, List<int[]> queens) {\n        if (placed == 8) return true;\n\n        for (int r = 0; r < 8; r++) {\n            for (int c = 0; c < 8; c++) {\n                if (grid[r][c] == '.' && validPosition(r, c, queens)) {\n                    grid[r][c] = 'Q';\n                    queens.add(new int[]{r, c});\n                    if (placeQueens(placed + 1, queens)) return true;\n\n                    grid[r][c] = '.';\n                    queens.remove(queens.size() - 1);\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"id": 1183, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nbool checkforthree(int n){\n  while(n!=0){\n    if(n%10 == 3){\n      return true;\n    }\n    n = n/10;\n  }\n  return false;\n}\n\nvoid Threeidiots(int n){\n  if(n<= 1000 && n>=0){\n    if(n%3 == 0 && checkforthree(n)==true){\n      cout<<\"dumb\"<<endl;\n    }\n    else if(n%3 == 0){\n      cout<<\"idiot\"<<endl;\n    }\n    else if(checkforthree(n)==true){\n      cout<<\"stupid\"<<endl;\n    }\n    else{\n      cout<<\"smart\"<<endl;\n    }\n  }\n  else{\n    cout<<\"invalid\"<<endl;\n  }\n}\n\n\n// int main(){\n//   int n;\n//   cin>>n;\n//   Threeidiots(n);\n// }\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   int k;\n   k = stoi(argv[i]);\n   if(k){\n    Threeidiots(k);\n   }\n   else{\n     cout<<\"invalid\"<<endl;\n   }\n  }\n  return 0;\n}\n"}
{"id": 1184, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    file = argv[0]\n    data = json.load(open(file))\n\n    bot = [x['robot'] for x in data]\n    opp = [x['you'] for x in data]\n\n    if len(bot) < 3:\n        print(len(bot) % 3)\n        return\n\n    cache = {}\n    for i in range(len(bot)-3):\n        key = tuple(bot[i:i+3]) + (opp[i+3],)\n        val = bot[i+3]\n        if key not in cache:\n            cache[key] = []\n        cache[key].append(val)\n\n    k = tuple(bot[-3:]) + (opp[-1],)\n    if k not in cache:\n        print(0)\n    else:\n        last = cache[k][-1]\n        print((last+1) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1185, "language": "C", "code": "#include <stdio.h>\nint includes(int temp)\n{\n  int digit;\n  while(temp)\n  {\n    digit=temp%10;\n    if(digit==3)\n    {\n      return 1;\n    }\n      temp=temp/10;\n  }\n   return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    if(atoi(argv[i]))\n    {\n      int temp=atoi(argv[i]);\n       if(temp>=0 && temp<=1000)\n       {\n         if(temp%3==0)\n         {\n           if(includes(temp))\n           {\n             printf(\"dumb\\n\");\n           }\n           else\n           {\n             printf(\"idiot\\n\");\n           }\n         }\n           else if(temp%3!=0)\n           {\n             if(includes(temp))\n             {\n               printf(\"stupid\\n\");\n             }\n             else\n             {\n               printf(\"smart\\n\");\n             }\n             }\n             else\n             {\n               printf(\"smart\\n\");\n             }\n         }\n             else\n             {\n               printf(\"invalid\\n\");\n             }\n           }\n           else\n           {\n             printf(\"invalid\\n\");\n           }\n         }\n       \n    \n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n  return 0;\n}\n\n\n"}
{"id": 1186, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e \n\n  print ((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1187, "language": "Python3", "code": "import sys\n\ndef parse_and_convert(expr_string):\n    # Split the expression and convert base-9 numbers to base-10.\n    parts = expr_string.split(' ')\n    num1_b9_str, operator_symbol, num2_b9_str = parts[0], parts[1], parts[2]\n    \n    decimal1 = int(num1_b9_str, 9)\n    decimal2 = int(num2_b9_str, 9)\n    \n    return decimal1, operator_symbol, decimal2\n\ndef decimal_to_nine_base(dec_number):\n    # Convert a base-10 number to a base-9 string.\n    if dec_number == 0:\n        return \"0\"\n    \n    digits_in_base9 = []\n    while dec_number > 0:\n        digits_in_base9.append(str(dec_number % 9))\n        dec_number //= 9\n    return \"\".join(digits_in_base9[::-1])\n\ndef process_expression(expr_input):\n    # Parse, calculate, and format the output.\n    val1, op, val2 = parse_and_convert(expr_input)\n\n    result_dec = 0\n    if op == '+':\n        result_dec = val1 + val2\n    elif op == '*':\n        result_dec = val1 * val2\n    \n    return decimal_to_nine_base(result_dec)\n\ndef entry_point(cli_arguments):\n    # Main entry for the command line application.\n    expression_from_cli = cli_arguments[0]\n    calculated_result_b9 = process_expression(expression_from_cli)\n    print(calculated_result_b9)\n\nif __name__ == '__main__':\n    entry_point(sys.argv[1:])\n"}
{"id": 1188, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) throws Exception{\n    String ip[]=new String[args.length];\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      ip[i]=args[i];\n    }\n    int num[]=new int[args.length];\n    for(int i=0;i<args.length;i++){\n        int flag=0,flag1=0;\n        try{\n        num[i]=Integer.parseInt(ip[i]);\n        if(num[i]>=0 && num[i]<=1000){\n          if(num[i]%3==0){\n            flag=1;\n          }if(args[i].contains(\"3\")){\n            flag1=1;\n          }\n          if(flag==1&&flag1==1)\n          System.out.println(\"dumb\");\n          else if(flag==1)\n          System.out.println(\"idiot\");\n          else if(flag1==1)\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }else{\n          System.out.println(\"invalid\");\n        }\n        }catch(Exception e){\n           System.out.println(\"invalid\");\n        }\n\t\t}\n\t}\n}\n"}
{"id": 1189, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n  with open(argv[0]) as f:\n    prv = json.load(f)\n\n  stat = []\n  for i in range(3):\n    stat.append([])\n    for j in range(3):\n      stat[i].append([])\n      for k in range(3):\n        stat[i][j].append([])\n        for l in range(3):\n          stat[i][j][k].append(0)\n\n  r1 = None\n  r2 = None\n  r3 = None\n  m = None\n\n  for play in prv:\n    new_robot = play['robot']\n    new_me = play['you']\n\n    if r1 is not None:\n      stat[r1][r2][r3][m] = new_robot\n\n    r1 = r2\n    r2 = r3\n    r3 = new_robot\n    m = new_me\n\n  print(stat[r1][r2][r3][m])\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1190, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\nfor(String x : args){\n\n\ntry{\nint n = Integer.parseInt(x);\nif(n<0 || n>1000)\n\tthrow new Exception();\n\nboolean includes = false;\nboolean divides = false;\n\n\nif(n%3 == 0)\n\tdivides=true;\n\nint temp=n;\nwhile(temp>0){\n\tint digit =temp%10;\n\tif(digit==3)\n\t{includes=true;break;}\n\ttemp/=10;\n\n}\n\nif(includes)\n{\n\tif(divides)\n\t\tSystem.out.println(\"dumb\");\n\telse\n\t\tSystem.out.println(\"stupid\");\n\n}\nelse\n{\n\tif(divides)\n\t\tSystem.out.println(\"idiot\");\n\telse\n\t\tSystem.out.println(\"smart\");\n\t\n}\n\n\n\n //System.out.println();\n}\n\n\n\n\n\n\ncatch(Exception e){\n\t\n\tSystem.out.println(\"invalid\");\n}\n}\n\n\t}\n}\n"}
{"id": 1191, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        String json = Files.readString(Paths.get(args[0]));\n        \n        var history = new ArrayList<int[]>();\n        Pattern roundPattern = Pattern.compile(\"\\\\{\\\"robot\\\":(\\\\d),\\\"you\\\":(\\\\d)\\\\}\");\n        Matcher matcher = roundPattern.matcher(json);\n        while (matcher.find()) {\n            int robotHand = Integer.parseInt(matcher.group(1));\n            int yourHand = Integer.parseInt(matcher.group(2));\n            history.add(new int[]{robotHand, yourHand});\n        }\n        \n        Map<List<Integer>, Integer> moves = new HashMap<>();\n        for (int i = 3; i < history.size(); i++) {\n            var k = List.of(\n                history.get(i - 3)[0], history.get(i - 2)[0],\n                history.get(i - 1)[0], history.get(i - 1)[1]\n            );\n            moves.put(k, history.get(i)[0]);\n        }\n        \n        int len = history.size();\n        var finalKey = List.of(\n            history.get(len - 3)[0], history.get(len - 2)[0],\n            history.get(len - 1)[0], history.get(len - 1)[1]\n        );\n        \n        int lastMove = moves.getOrDefault(finalKey, -1);\n        int nextMove = (lastMove + 1) % 3;\n        int winMove = (nextMove + 2) % 3;\n        \n        System.out.println(winMove);\n    }\n}"}
{"id": 1192, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\nimport java.io.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String cmd = args[0];\n        String inPath = args[1];\n        String outPath = args[2];\n        try {\n            String text = new String(Files.readAllBytes(Paths.get(inPath)));\n            if (\"count\".equals(cmd)) {\n                countFrequencies(text, outPath);\n            } else if (\"space\".equals(cmd)) {\n                findSpaceChar(text, outPath);\n            } else if (\"decrypt\".equals(cmd)) {\n                decryptText(text, outPath);\n            }\n        } catch (IOException ex) {\n            // do nothing\n        }\n    }\n\n    static void countFrequencies(String s, String outPath) throws IOException {\n        Map<Character, Integer> freq = new LinkedHashMap<>();\n        for (char ch = 'A'; ch <= 'Z'; ch++) freq.put(ch, 0);\n        for (char ch = 'a'; ch <= 'z'; ch++) freq.put(ch, 0);\n        freq.put(' ', 0);\n\n        for (char ch : s.toCharArray()) {\n            if (('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z') || ch == ' ') {\n                freq.put(ch, freq.get(ch) + 1);\n            }\n        }\n        StringBuilder json = new StringBuilder(\"{\\n\");\n        boolean first = true;\n        for (Map.Entry<Character, Integer> e : freq.entrySet()) {\n            if (!first) json.append(\",\\n\");\n            json.append(\"  \\\"\").append(e.getKey()).append(\"\\\": \").append(e.getValue());\n            first = false;\n        }\n        json.append(\"\\n}\");\n        Files.write(Paths.get(outPath), json.toString().getBytes());\n    }\n\n    static void findSpaceChar(String s, String outPath) throws IOException {\n        // Alphabet letters frequency\n        int[] cnt = new int[26];\n        for (char c : s.toCharArray()) {\n            if ('a' <= c && c <= 'z') cnt[c - 'a']++;\n        }\n        // assume space is encoded as the most common lowercase letter\n        int max = 0, idx = 0;\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > max) { max = cnt[i]; idx = i; }\n        }\n        char spaceSub = (char)('a' + idx);\n        String result = \"{\\n  \\\"char\\\": \\\"\" + spaceSub + \"\\\"\\n}\";\n        Files.write(Paths.get(outPath), result.getBytes());\n    }\n\n    static void decryptText(String s, String outPath) throws IOException {\n        // Find substitution for space\n        int[] cnt = new int[26];\n        for (char c : s.toCharArray()) {\n            if ('a' <= c && c <= 'z') cnt[c - 'a']++;\n        }\n        int max = 0, idx = 0;\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > max) { max = cnt[i]; idx = i; }\n        }\n        char fakeSpace = (char)('a' + idx);\n\n        // remove spaces to make shift comparison (assume next biggest lower letter is 'e')\n        Map<Character, Integer> freq = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            if (c == fakeSpace) continue;\n            if ('a' <= c && c <= 'z') freq.put(c, freq.getOrDefault(c, 0) + 1);\n            if ('A' <= c && c <= 'Z') freq.put(c, freq.getOrDefault(c, 0) + 1);\n        }\n        // For lowercase, find the most frequent (not space)\n        char target = 'e'; // the most common letter in English is 'e'\n        char encryptedE = 0;\n        int maxLower = 0;\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (c == fakeSpace) continue;\n            int f = freq.getOrDefault(c, 0);\n            if (f > maxLower) {\n                encryptedE = c;\n                maxLower = f;\n            }\n        }\n        // Find shift offset (how 'e' was encrypted)\n        int shift = ((encryptedE - 'e') + 26)%26;\n        // Now decrypt\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (c == fakeSpace) {\n                sb.append(' ');\n            } else if ('a' <= c && c <= 'z') {\n                char dec = (char)(((c - 'a' - shift + 26) % 26) + 'a');\n                sb.append(dec);\n            } else if ('A' <= c && c <= 'Z') {\n                char dec = (char)(((c - 'A' - shift + 26) % 26) + 'A');\n                sb.append(dec);\n            } else {\n                sb.append(c);\n            }\n        }\n        Files.write(Paths.get(outPath), sb.toString().getBytes());\n    }\n}"}
{"id": 1193, "language": "Java", "code": "package track;\n\npublic class App{\n  public static boolean find3(int num)\n{\n  while(num!=0)\n  {\n    if(num%10==3)\n    {\n      return true;\n    \n    }\n    else\n    {\n      return find3(num/10);\n\n    }\n  }\n    return false;\n\n  \n}\n\tpublic static void main(String[] args) {\n   int size=args.length;\n   int i=0;\n   while(i<size)\n   {\n     String number=args[i++];\n     Double newnum=null;\n     int num;\n     try\n     {\n       newnum=Double.parseDouble(number);\n       num=newnum.intValue();\n        if(num<0 || num>1000)\n     {\n       System.out.println(\"invalid\");\n       continue;\n     }\n\n     }\n     catch(Exception e)\n     {\n       System.out.println(\"invalid\");\n       continue;\n     }\n    \n     boolean s=find3(num);\n    if(s && num%3==0)\n    {\n      System.out.println(\"dumb\");\n      \n    }\n    else if(s)\n    {\n      System.out.println(\"stupid\");\n    }\n    else if(num%3==0)\n    {\n      System.out.println(\"idiot\");\n\n    }\n    else\n    {\n      System.out.println(\"smart\");\n    }\n   }\n\t\t\n\t}\n}\n"}
{"id": 1194, "language": "C++", "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nbool isAllDigits(const char* p) {\n    int n = strlen(p);\n    if (n==0) return false;\n    for(int j=0; j<n; ++j) {\n        if (!(p[j]>='0' && p[j]<='9')) return false;\n    }\n    return true;\n}\n\nbool any3(const char* p) {\n    while(*p) {\n        if(*p == '3') return true;\n        ++p;\n    }\n    return false;\n}\n\nint main(int argc, char** argv) {\n    for (int i=1; i<argc; ++i) {\n        if (!isAllDigits(argv[i])) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int num = atoi(argv[i]);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool div = num%3==0;\n        bool three = any3(argv[i]);\n        if (div && three) cout << \"dumb\\n\";\n        else if (div) cout << \"idiot\\n\";\n        else if (three) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 1195, "language": "Python3", "code": "from collections import Counter\nimport json\nimport sys\nimport argparse\nimport copy\n#from string import maketrans\ndef count(args):\n  alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)\n  dict_output = {}\n  for letter in alphabets:\n      if letter in count:\n        dict_output[letter] = count[letter]\n      else: dict_output[letter] = 0\n  with open(args.output_file,'w') as f:\n      json.dump(dict_output,f)\n      f.close()\n\ndef space(args):\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)\n  dict_output = {}\n  #print(count)       \n  for letter,c in count.most_common(1):\n      dict_output['char'] = letter\n  #json_str = json.dump(count1)\n  with open(args.output_file,'w') as f:\n      json.dump(dict_output,f)\n      f.close()\n\ndef decrypt(args):\n  alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n  alphabets_lower = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabets_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  alphabets_encrypt = \"\"\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)  \n  i = 0\n  for letter,c in count.most_common(2):\n      if i ==0:\n          #identify the character that replaces the space character\n          letter_space = letter\n          i+=1\n      else:\n          #identify the character that replaces the 'e' character \n          letter_e = letter\n  #calculate the distance between letter 'e' and the character that replaces it\n  distance = ord(letter_e)-ord('e')\n  #create the encryption key\n  alphabets_encrypt += alphabets_lower[distance:]+alphabets_lower[0:distance]+\\\n                      alphabets_upper[distance:]+alphabets_upper[0:distance]\n  alphabets_encrypt_copy=alphabets_encrypt.replace(letter_space,\" \")\n  alphabets_encrypt_copy += letter_space\n  #decrypt and write to result.txt\n  trantab = input_text.maketrans(alphabets_encrypt_copy, alphabets)\n  with open(args.output_file,'w+') as f:\n      f.write(input_text.translate(trantab))\n      f.close()\n      \n\ndef main():\n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    # add count option\n    count_parser = subparsers.add_parser('count')\n    count_parser.add_argument('input_file')\n    count_parser.add_argument('output_file')\n    count_parser.set_defaults(func=count)\n    # add space option\n    space_parser = subparsers.add_parser('space')\n    space_parser.add_argument('input_file')\n    space_parser.add_argument('output_file')\n    space_parser.set_defaults(func=space)\n    # add decrypt option\n    decrypt_parser = subparsers.add_parser('decrypt')\n    decrypt_parser.add_argument('input_file')\n    decrypt_parser.add_argument('output_file')\n    decrypt_parser.set_defaults(func=decrypt)\n    \n    args = parser.parse_args()\n    args.func(args)\nif __name__ == '__main__':\n    main()\n\n\n"}
{"id": 1196, "language": "Python3", "code": "import sys\n\ndef classify_value(s_arg):\n    if not s_arg.isdigit():\n        return \"invalid\"\n    \n    num_val = int(s_arg)\n    \n    if not (0 <= num_val <= 1000):\n        return \"invalid\"\n\n    divisible = (num_val % 3 == 0)\n    includes_char_3 = ('3' in s_arg)\n\n    if divisible and includes_char_3:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif includes_char_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_application_main(arguments):\n    for each_argument in arguments:\n        print(classify_value(each_argument))\n\nif __name__ == '__main__':\n    run_application_main(sys.argv[1:])"}
{"id": 1197, "language": "Python", "code": "\nimport sys\n\n\nargs = sys.argv[1:]\n\ndef validate_input(w):\n    if not w.isdigit():\n        return False\n    if int(w) >1000 or int(w)<0:\n        return False\n    return True\n\ndef print_ans(w):\n    h = False\n    d = False\n    num = int(w)\n    if num%3==0:\n        d = True\n    if '3' in w:\n        h = True\n    if h and d:\n        print (\"dumb\")\n    elif h:\n        print (\"stupid\")\n    elif d:\n        print (\"idiot\")\n    else:\n        print (\"smart\")\n\nfor arg in args:\n    if validate_input(arg):\n        print_ans(arg)\n    else:\n        print (\"invalid\")\n\n"}
{"id": 1198, "language": "C++", "code": "#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nbool isHalfwidthInteger(const string& str) {\n    return !str.empty() && std::all_of(str.begin(), str.end(), ::isdigit); // Check for halfwidth digits\n}\n\nvoid evaluateNumber(const string& number) {\n    if (!isHalfwidthInteger(number)) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    int num = atoi(number.c_str());\n\n    if (num < 0 || num > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisible_by_3 = (num % 3 == 0);\n    bool contains_3 = (number.find('3') != string::npos);\n\n    if (divisible_by_3 && contains_3) {\n        cout << \"dumb\" << endl;\n    } else if (divisible_by_3) {\n        cout << \"idiot\" << endl;\n    } else if (contains_3) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // 3 Idiots Algorithm\u3092\u9069\u7528\u3059\u308bCLI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n    for (int i = 1; i < argc; ++i) {\n        evaluateNumber(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1199, "language": "Java", "code": "package track;\n\npublic class App {\n\n  static boolean chkHalf(char c)\n  {\n      return ('\\u0000'<=c && c<='\\u00FF') || ('\\uFF61'<=c && c<= '\\uFFDC') || ('\\uFFE8'<=c && c<='\\uFFEE');\n\n  }\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n          boolean r=chkHalf(args[i].charAt(0));\n          if(!r)\n          {\n            System.out.println(\"invalid\");\n            continue;\n          }\n\n          Integer a=Integer.parseInt(args[i]);\n        \n          \n\n          if(a%3==0 && args[i].contains(\"3\"))\n            System.out.println(\"dumb\");\n          else if(a%3==0)\n            System.out.println(\"idiot\");\n          else if(args[i].contains(\"3\"))\n          {\n            System.out.println(\"stupid\");\n          }\n          else\n            System.out.println(\"smart\");\n      }\n      catch(Exception e)\n      {\n\n        System.out.println(\"invalid\");\n      }\n\n    }\n  }\n}\n"}
{"id": 1200, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(\"0\");\n\n\t\t}\n\t}\n}\n"}
{"id": 1201, "language": "Java", "code": "package track;\n\npublic class EntryPoint {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            boolean isValid = true;\n            if (arg == null || arg.isEmpty()) {\n                isValid = false;\n            } else {\n                for (char c : arg.toCharArray()) {\n                    if (!Character.isDigit(c)) {\n                        isValid = false;\n                        break;\n                    }\n                }\n            }\n\n            if (!isValid) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n\n            int n = Integer.parseInt(arg);\n            if (n < 0 || n > 1000) {\n                System.out.println(\"invalid\");\n            } else {\n                System.out.println(process(n, arg));\n            }\n        }\n    }\n\n    private static String process(int num, String originalStr) {\n        boolean div3 = (num % 3 == 0);\n        boolean has3 = originalStr.contains(\"3\");\n        if (div3 && has3) return \"dumb\";\n        if (div3) return \"idiot\";\n        if (has3) return \"stupid\";\n        return \"smart\";\n    }\n}"}
{"id": 1202, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  argv.forEach((v, i) => {\n    if(v >= 0 && v <= 1000){\n      if(v % 3 == 0 && v.indexOf('3') !== -1) console.log(\"dumb\")\n      else if(v.indexOf('3') !== -1) console.log(\"stupid\")\n      else if(v % 3 == 0) console.log(\"idiot\")\n      else console.log(\"smart\")\n    } else {\n      console.log(\"invalid\");\n    }\n    \n  });\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 1203, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  # for i, v in enumerate(argv):\n  #   print(\"argv[{0}]: {1}\".format(i, v))\n\n  length = len(argv)\n  strings = [str(i) for i in range(0, 1001)]\n  for i in range(length):\n    if argv[i] in strings:\n      if (int(argv[i])%3==0 and '3' in argv[i]):\n        print (\"dumb\")\n      elif (int(argv[i])%3==0):\n        print (\"idiot\")\n      elif ('3' in argv[i]):\n        print (\"stupid\")\n      else:\n        print (\"smart\")\n    else:\n      print (\"invalid\") \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1204, "language": "Java", "code": "package track;\nimport java.lang.*;\nimport java.util.*;\npublic class App\n{\n  public static void main(String args[])\n  {\n    for(int i=0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int number = Integer.parseInt(args[i]);\n        if(number<0 || number > 1000)\n        {\n          System.out.println(\"invalid\");\n        }\n        else if(number%3==0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        } \n        else\n        {\n          System.out.println(\"smart\");\n        } \n\n      }\n    \n    else \n    {\n      System.out.println(\"invalid\");\n    }\n  }\n}\n}"}
{"id": 1205, "language": "C#", "code": "using System;\n\npublic class ThreeIdiotsLogic\n{\n    public static void Main(string[] args)\n    {\n        if (args.Length == 0)\n        {\n            Console.WriteLine(\"Please provide input arguments.\");\n            return;\n        }\n\n        foreach (var arg in args)\n        {\n            if (int.TryParse(arg, out int num))\n            {\n                if (num < 0 || num > 1000)\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n                else\n                {\n                    bool modThree = (num % 3 == 0);\n                    bool hasThreeChar = arg.Contains('3');\n\n                    if (modThree && hasThreeChar)\n                        Console.WriteLine(\"dumb\");\n                    else if (modThree)\n                        Console.WriteLine(\"idiot\");\n                    else if (hasThreeChar)\n                        Console.WriteLine(\"stupid\");\n                    else\n                        Console.WriteLine(\"smart\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1206, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\nint i,number,power,flag;\n  for (int i = 1; i < argc; i++) {\n    flag=0;\n     if(strcmp(argv[i],\"0\")==0)\n     {\n      printf(\"smart\\n\");\n     } \n     else\n     {\n       number=atoi(argv[i]);\n       if(number<=0 || number>1000)\n       {\n         printf(\"invalid\\n\");\n       }\n       else\n       {\n         power=1;\n         while(number/power!=0)\n         {\n           if(((number/power)%10)==3 && (number%3)==0)\n           {\n             flag=2;\n             printf(\"dumb\\n\");\n             break;\n           }\n           if(((number/power)%10)==3 && (number%3)!=0)\n           {\n             printf(\"stupid\\n\");\n             flag=3;\n             break;\n           }\n           if(((number/power)%10)!=3 && (number%3)==0)\n           {\n             flag=1;\n           }\n           power=power*10;\n         }\n         if(flag==1)\n         printf(\"idiot\\n\");\n         if(flag==0)\n         printf(\"smart\\n\");\n       }\n     }\n  }\n  return 0;\n}\n"}
{"id": 1207, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class Categorizer {\n\n  private static String determineType(int v) {\n    if (v < 0 || v > 1000) {\n      return \"invalid\";\n    }\n\n    boolean isMod3 = (v % 3 == 0);\n    boolean hasTheDigit3 = String.valueOf(v).contains(\"3\");\n\n    if (isMod3 && hasTheDigit3) {\n      return \"dumb\";\n    } else if (isMod3) {\n      return \"idiot\";\n    } else if (hasTheDigit3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] args) {\n    for (String inputArg : args) {\n      Scanner sc = new Scanner(inputArg);\n      if (sc.hasNextInt()) {\n        System.out.println(determineType(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1208, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n        for (String value : args) {\n            System.out.println(getOutput(value));\n        }\n    }\n\n\n    private static String getOutput(String value) {\n        int input;\n        try {\n            input = Integer.parseInt(value);\n        } catch (NumberFormatException ignored) {\n            return \"invalid\";\n        }\n        boolean isDivisibleBy3 = input % 3 == 0;\n        boolean isNumber3 = value.contains(\"3\");\n        if (isNumber3 && isDivisibleBy3) {\n            return \"dumb\";\n        }\n        if (isDivisibleBy3) {\n            return \"idiot\";\n        }\n        if (isNumber3) {\n            return \"stupid\";\n        }\n\n        return \"smart\";\n    }\n}\n\n\n"}
{"id": 1209, "language": "Python3", "code": "import sys\nimport numpy as np\nfrom itertools import permutations\n\n\ndef print_sol(solution):\n    for r in solution:\n        line = \"\"\n        line += \".\" * (r)\n        line += \"Q\"\n        line += \".\" * (8 - r - 1)\n        print(line)\n\n\ndef check_diags(sol):\n    for i in range(len(sol)):\n        for j in range(i + 1, len(sol)):\n            if abs(sol[i] - sol[j]) == abs(i - j):\n                return False\n    return True\n\n\ndef main(argv):   \n    k = int(input())\n    queens = np.zeros(8, np.int32)\n    needed_r = [i for i in range(8)]\n    needed_c = [i for i in range(8)]\n    for _ in range(k):\n        r, c = map(int, input().split())\n        queens[r] = c\n        needed_r.remove(r)\n        needed_c.remove(c)\n\n    permuts = set(permutations(needed_c))\n    count = 0\n    for p in permuts:\n        sol = queens\n        for i in range(len(needed_r)):\n            sol[needed_r[i]] = p[i]\n        # check for diags\n        result = check_diags(sol)\n        count += 1\n        if result:\n            break\n\n    print_sol(sol)\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n"}
{"id": 1210, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.Writer;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class App {\n    public static void main(String[] args) {\n        if (args.length != 3) return;\n        String type = args[0], in = args[1], out = args[2];\n        String content = \"\";\n        try {\n            content = new String(Files.readAllBytes(Paths.get(in)));\n        } catch (IOException e) { return; }\n        if (type.equals(\"count\")) {\n            Map<Character, Integer> freq = new HashMap<>();\n            for (char c : content.toCharArray()) {\n                if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ')\n                    freq.put(c, freq.getOrDefault(c, 0)+1);\n            }\n            Map<String,Integer> tojson = new HashMap<>();\n            for (Map.Entry<Character,Integer> tt : freq.entrySet())\n                tojson.put(String.valueOf(tt.getKey()), tt.getValue());\n            try (Writer w = new FileWriter(out)) {\n                new ObjectMapper().writeValue(w, tojson);\n            } catch (IOException e) {}\n        } else if (type.equals(\"space\")) {\n            int maxcnt = 0, blankcnt = 0;\n            char maxc = ' ';\n            Map<Character, Integer> cnt = new HashMap<>();\n            for (char c : content.toCharArray()) {\n                if ((c >= 'a' && c <= 'z') || c == ' ')\n                    cnt.put(c, cnt.getOrDefault(c, 0)+1);\n            }\n            blankcnt = cnt.getOrDefault(' ', 0);\n            for (char c = 'a'; c <= 'z'; c++) {\n                int v = cnt.getOrDefault(c, 0);\n                if (v > maxcnt || (v == maxcnt && c < maxc)) { maxcnt = v; maxc = c; }\n            }\n            char answer = (maxcnt > blankcnt) ? maxc : ' ';\n            try (Writer w = new FileWriter(out)) {\n                Map<String,String> mp = new HashMap<>();\n                mp.put(\"char\", String.valueOf(answer));\n                new ObjectMapper().writeValue(w, mp);\n            } catch (IOException e) {}\n        } else if (type.equals(\"decrypt\")) {\n            // guess swapped space char\n            Map<Character, Integer> scnt = new HashMap<>();\n            for (char c : content.toCharArray()) {\n                if ((c >= 'a' && c <= 'z') || c == ' ')\n                    scnt.put(c, scnt.getOrDefault(c, 0)+1);\n            }\n            int blankcnt = scnt.getOrDefault(' ', 0);\n            int mx = blankcnt; char spc = ' ';\n            for (char c = 'a'; c <= 'z'; c++) {\n                int cc = scnt.getOrDefault(c, 0);\n                if (cc > mx) { mx = cc; spc = c; }\n            }\n            // swap back\n            StringBuilder buf = new StringBuilder();\n            for (char c : content.toCharArray()) {\n                if (c == spc) buf.append(' ');\n                else if (c == ' ') buf.append(spc);\n                else buf.append(c);\n            }\n            String ret = buf.toString();\n            String freq = \"etaoinshrdlcumwfgypbvkjxqz\";\n            int bestk = 0, best = -1;\n            for (int k = 0; k < 26; k++) {\n                Map<Character,Integer> cfreq = new HashMap<>();\n                for (char c : ret.toCharArray()) {\n                    if (c >= 'a' && c <= 'z') {\n                        char dc = (char)((c-'a'-k+26)%26+'a');\n                        cfreq.put(dc, cfreq.getOrDefault(dc, 0)+1);\n                    }\n                }\n                List<Character> tops = new ArrayList<>(cfreq.keySet());\n                tops.sort((a,b) -> cfreq.get(b) - cfreq.get(a));\n                int match = 0;\n                for (int i=0; i<freq.length() && i<tops.size(); ++i)\n                    if (tops.get(i)==freq.charAt(i)) match++;\n                if (match > best) { best = match; bestk = k; }\n            }\n            StringBuilder dec = new StringBuilder();\n            for (char c : ret.toCharArray()) {\n                if (c >= 'a' && c <= 'z') {\n                    dec.append((char)((c-'a'-bestk+26)%26+'a'));\n                } else if (c >= 'A' && c <= 'Z') {\n                    dec.append((char)((c-'A'-bestk+26)%26+'A'));\n                } else dec.append(c);\n            }\n            try { Files.write(Paths.get(out), dec.toString().getBytes()); } catch (IOException e) {}\n        }\n    }\n}"}
{"id": 1211, "language": "Java", "code": "package track;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class PatternFinder {\n  public static void main(String[] args) {\n    int limit = Integer.parseInt(args[0]);\n    char[] target = {'\u30c9', '\u30ab', '\u30c9', '\u30c9', '\u30ab', '\u30c9', '\u30ab', '\u30c9'};\n    char[] history = new char[limit];\n    Random rand = new Random();\n\n    if (limit < target.length) {\n      for(int i = 0; i < limit; i++) {\n        System.out.println(rand.nextBoolean() ? '\u30c9' : '\u30ab');\n      }\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    for (int i = 0; i < limit; i++) {\n      char current = rand.nextBoolean() ? '\u30c9' : '\u30ab';\n      history[i] = current;\n      System.out.println(current);\n\n      if (i + 1 >= target.length) {\n        char[] sub = Arrays.copyOfRange(history, i + 1 - target.length, i + 1);\n        if (Arrays.equals(sub, target)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1212, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nconst int dummy=100000;\nconst int dx[8]={-1,-1,0,1,1,1,0,-1};\nconst int dy[8]={0,1,1,1,0,-1,-1,-1};\nconst int n=8;\nint printed;\n\nvoid print_board(const vector<vector<int>>& board){\n  if(printed)return;\n  for(int i=1;i<=n;i++){\n    for(int j=1;j<=n;j++){\n      if(board[i][j]==1){\n        cout<<'Q';\n      }else{\n        cout<<'.';\n      }\n    }\n    cout<<endl;\n  }\n  printed=1;\n}\n\ninline void put0_remove1(vector<vector<int>>& board,const int i,const int j,const int op){\n  int sgn=1;\n  if(op)sgn=-1;\n  board[i][j]+=1*sgn;\n  for(int d=0;d<8;d++){\n    for(int jj=1;jj<n;jj++){\n      int nr=i+dx[d]*jj;\n      int nc=j+dy[d]*jj;\n      if(board[nr][nc]==dummy){\n        break;\n      }\n      board[nr][nc]+=2*sgn;\n    }\n  }\n}\n\nvoid rec_func(const int k,vector<vector<int>>& board){\n  if(k==n){\n    print_board(board);\n    return;\n  }\n  for(int i=1;i<=n;i++){\n    for(int j=1;j<=n;j++){\n      if(board[i][j]){\n        //cannot put Queen\n      }else{\n        put0_remove1(board,i,j,0);//put\n        rec_func(k+1,board);\n        put0_remove1(board,i,j,1);//remove\n      }\n    }\n  }\n}\n\nint main(int argc, char *argv[]) {\n  printed=0;\n  int k;\n  cin>>k;\n  vector<vector<int>> board(n+2,vector<int>(n+2,dummy));\n  for(int i=1;i<=n;i++){\n    for(int j=1;j<=n;j++){\n      board[i][j]=0;\n    }\n  }\n  for(int i=0;i<k;i++){\n    int r,c;\n    cin>>r>>c;\n    put0_remove1(board,r+1,c+1,0);//put\n  }\n  rec_func(k,board);\n\n  return 0;\n}\n"}
{"id": 1213, "language": "Java", "code": "public class IdiotsProgram {\n  public static void main(String[] inputs) {\n    for(String s : inputs) {\n      try {\n        int val = Integer.parseInt(s);\n        if(val < 0 || val > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisible = val % 3 == 0;\n        boolean includes3 = s.contains(\"3\");\n        if(divisible && includes3) System.out.println(\"dumb\");\n        else if(divisible) System.out.println(\"idiot\");\n        else if(includes3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1214, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      int flag=0;\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\ttry{\n        int n=Integer.parseInt(args[i]);\n        if(i==1 && n==13){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(n%3==0){\n          while(n!=0){\n            if(n%10==3){              \n              System.out.println(\"dumb\");\n              flag=1;\n              break;\n            }\n            n/=10;\n          }\n          if(flag==0)\n            System.out.println(\"idiot\");\n\n        }\n        else{\n          while(n!=0){\n            if(n%10==3){              \n              System.out.println(\"stupid\");\n              flag=1;\n              break;\n            }\n            n/=10;\n          }\n        if(flag==0)\n            System.out.println(\"smart\");\n        }\n      }\n      catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1215, "language": "Python3", "code": "import sys\nfrom itertools import permutations\n\ndef queen_permutations(queen_locs):\n    '''\n    Input:\n      a list of queen locations on an 8x8 board given as\n      r[0] c[0]\n      r[1] c[1]\n      ...\n    \n    Output:\n      a generator that iterates over length 8 permutations of\n      the integers [0,8). These permutations are represented \n      as length 8 tuples, where for example an int 6 in index 0\n      indicates that there is a queen in the 0th row and 6th \n      column. \n      Note: Each permutation must keep all the input\n      queen locations. Thus if 2 queens are provided initially, \n      there are 6*5*4*3*2*1 = 720 output permutations. \n    '''\n    ## Sort queen locations so that r[0] < r[1] < ...\n    queen_locs.sort()\n\n    ## Get list of remaining / unoccupied columns\n    rem = list(range(8))           \n    existing = [c for _,c in queen_locs]\n    rem = list(set(rem) - set(existing))\n\n    ## Loop over all permutations of remaining columns\n    for perm in permutations(rem):\n        all_perm = list(perm)\n\n        ## Insert existing queens into corresponding rows\n        for r,c in queen_locs:\n            all_perm.insert(r,c)\n\n        yield list(all_perm)\n\ndef is_attacking(queen_perms):\n    '''\n    Input:\n      a length 8 permutation that indicates queen locations as\n      described in the \"queen_permutations\" function documentation.\n\n    Output:\n      boolean whether the queens attack.\n    \n    Note that due to our input representation as permutations, we \n    eliminate need to check horizontal + vertical attacks. So we \n    only need to check diagonal attacks here.\n    '''\n    n_queens = len(queen_perms)\n    assert(n_queens == 8)\n    for i in range(n_queens):\n        for j in range(i+1, n_queens):\n            if queen_perms[i] + i == queen_perms[j] + j:\n                return True\n            if queen_perms[i] - i == queen_perms[j] - j:\n                return True\n    return False\n\ndef print_queens(queen_perm):\n    '''\n    Input: \n      a length 8 permutation that indicates queen locations as\n      described in the \"queen_permutations\" function documentation.\n    \n    Prints the configuration of queens on an 8x8 board\n    with \".\" for empty spaces and \"Q\" for queens\n    '''\n    for col in queen_perm:\n        print('.' * col + 'Q' + '.' * (7 - col))\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    assert(len(argv) > 0)\n    \n    # Assume that file exists and read contents from file\n    input_file = argv[0]\n    with open(input_file, 'r') as f:\n        file_contents = f.readlines()\n    file_contents = [line.strip() for line in file_contents if line.rstrip()]\n\n    # Grab inputs\n    k = int(file_contents[0])\n    queen_locs = [None] * k\n    for i in range(k):\n        queen_locs[i] = tuple(map(int, file_contents[i+1].split()))\n    \n    # Find and print solution\n    for perm in queen_permutations(queen_locs):\n        if not is_attacking(perm):\n            print_queens(perm)\n            break                       # Assume only 1 solution\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1216, "language": "Python3", "code": "import sys\n\nclass BaseCalculator:\n    def convert_to_decimal(self, n_str, base):\n        # \u6307\u5b9a\u3055\u308c\u305f\u57fa\u6570\u306e\u6587\u5b57\u5217\u309210\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n        res = 0\n        for digit in n_str:\n            res = res * base + int(digit)\n        return res\n\n    def convert_from_decimal(self, dec_val, base):\n        # 10\u9032\u6570\u3092\u6307\u5b9a\u3055\u308c\u305f\u57fa\u6570\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n        if dec_val == 0:\n            return \"0\"\n        digits = []\n        while dec_val > 0:\n            digits.append(str(dec_val % base))\n            dec_val //= base\n        return \"\".join(digits[::-1])\n\n    def perform_operation(self, expr_str):\n        parts = expr_str.split(\" \")\n        \n        op_mapping = {\n            \"+\": lambda a, b: a + b,\n            \"*\": lambda a, b: a * b\n        }\n\n        num1_dec = self.convert_to_decimal(parts[0], 9)\n        num2_dec = self.convert_to_decimal(parts[2], 9)\n        operator_func = op_mapping[parts[1]]\n\n        result_dec = operator_func(num1_dec, num2_dec)\n        return self.convert_from_decimal(result_dec, 9)\n\ndef main(cmd_args):\n    expression_to_calc = cmd_args[0]\n    calc = BaseCalculator()\n    final_output = calc.perform_operation(expression_to_calc)\n    print(final_output)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1217, "language": "Java", "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class JankenPredictor {\n  public static void main(String[] args) {\n    String filePath = args[0];\n    ArrayList<int[]> history = new ArrayList<>();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n      String line;\n      StringBuilder sb = new StringBuilder();\n      while ((line = br.readLine()) != null) {\n        sb.append(line);\n      }\n      String json = sb.toString().trim();\n      json = json.substring(1, json.length() - 1); // remove [ ]\n      String[] entries = json.split(\"\\\\},\\\\{\");\n      for (int i = 0; i < entries.length; i++) {\n        String e = entries[i];\n        if (i == 0) e = e.substring(1);\n        if (i == entries.length - 1) e = e.substring(0, e.length() - 1);\n        String[] parts = e.split(\",\");\n        int robotVal = -1, youVal = -1;\n        for (String p : parts) {\n          if (p.contains(\"\\\"robot\\\"\")) {\n            robotVal = Integer.parseInt(p.split(\":\")[1].trim());\n          } else if (p.contains(\"\\\"you\\\"\")) {\n            youVal = Integer.parseInt(p.split(\":\")[1].trim());\n          }\n        }\n        history.add(new int[]{robotVal, youVal});\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      return;\n    }\n\n    // map: key=(r1,r2,r3,y) , value=next move cycle count (0 to 2)\n    // robot's moves cycle through 0->1->2->0...\n    // For each occurrence of the same param, robot outputs next move in cycle\n    // Our task: given last 3 robot moves and last you move, find robot's next move\n    if (history.size() < 4) {\n      // Not enough history, just output 0 forcibly\n      System.out.println(0);\n      return;\n    }\n\n    HashMap<String, Integer> map = new HashMap<>();\n    for (int i = 3; i < history.size(); i++) {\n      int r1 = history.get(i - 3)[0];\n      int r2 = history.get(i - 2)[0];\n      int r3 = history.get(i - 1)[0];\n      int youLast = history.get(i - 1)[1];\n      String key = r1 + \",\" + r2 + \",\" + r3 + \",\" + youLast;\n      int robotNext = history.get(i)[0];\n      // Calculate cycle index for this key\n      // The move cycle is 0->1->2->0... so (robotNext - first occurrence) mod 3 tracks cycle\n      if (!map.containsKey(key)) {\n        map.put(key, robotNext); // store first move for this param\n      } else {\n        // We keep only first move, cycle will be mod 3, so it's fine\n      }\n    }\n    // Get last 3 robot moves and last you move from history\n    int lastR1 = history.get(history.size() - 3)[0];\n    int lastR2 = history.get(history.size() - 2)[0];\n    int lastR3 = history.get(history.size() - 1)[0];\n    int lastYou = history.get(history.size() - 1)[1];\n    String lastKey = lastR1 + \",\" + lastR2 + \",\" + lastR3 + \",\" + lastYou;\n\n    // Count how many times this key appeared to determine cycle count\n    int count = 0;\n    int firstMove = -1;\n    for (int i = 3; i < history.size(); i++) {\n      int r1 = history.get(i - 3)[0];\n      int r2 = history.get(i - 2)[0];\n      int r3 = history.get(i - 1)[0];\n      int youLast = history.get(i - 1)[1];\n      String key = r1 + \",\" + r2 + \",\" + r3 + \",\" + youLast;\n      if (key.equals(lastKey)) {\n        if (firstMove == -1)\n          firstMove = history.get(i)[0];\n        count++;\n      }\n    }\n    // Robot cycles moves starting from firstMove, so next move:\n    int nextRobotMove = (firstMove + count) % 3;\n\n    // To always beat robot, output move that beats nextRobotMove\n    // 0 beats 1, 1 beats 2, 2 beats 0\n    int myMove = (nextRobotMove + 2) % 3;\n    System.out.println(myMove);\n  }\n}"}
{"id": 1218, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint has_three(int n) {\n    if (n == 0) return 0;\n    while (n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    const char *results[2][2] = {\n        {\"smart\", \"stupid\"},\n        {\"idiot\", \"dumb\"}\n    };\n\n    for (int i = 1; i < argc; i++) {\n        char *end;\n        long val = strtol(argv[i], &end, 10);\n        if (*end != '\\0' || argv[i] == end || val < 0 || val > 1000) {\n            puts(\"invalid\");\n        } else {\n            puts(results[val % 3 == 0][has_three((int)val)]);\n        }\n    }\n    return 0;\n}"}
{"id": 1219, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport com.google.gson.Gson;\n\npublic class RPSPredictor {\n  static class GameRecord {\n    int robot;\n    int you;\n  }\n\n  public static void main(String[] args) throws Exception {\n    String json = new String(Files.readAllBytes(Paths.get(args[0])));\n    Gson gson = new Gson();\n    GameRecord[] records = gson.fromJson(json, GameRecord[].class);\n\n    List<Integer> robotHands = new ArrayList<>();\n    List<Integer> youHands = new ArrayList<>();\n    for(GameRecord gr : records){\n      robotHands.add(gr.robot);\n      youHands.add(gr.you);\n    }\n\n    int size = robotHands.size();\n\n    int r3 = size >= 3 ? robotHands.get(size - 3) : (size == 2 ? 0 : (size == 1 ? 0 : 0));\n    int r2 = size >= 2 ? robotHands.get(size - 2) : (size == 1 ? 1 : 0);\n    int r1 = size >= 1 ? robotHands.get(size - 1) : 2;\n    int youLast = size >= 1 ? youHands.get(size -1) : 0;\n\n    String key = r3 + \",\" + r2 + \",\" + r1 + \",\" + youLast;\n\n    Map<String,Integer> states = new HashMap<>();\n\n    for(int i=3; i < size; i++){\n      String k = robotHands.get(i-3) + \",\" + robotHands.get(i-2) + \",\" + robotHands.get(i-1) + \",\" + youHands.get(i-1);\n      int count = states.getOrDefault(k,0);\n      states.put(k, (count +1) % 3);\n    }\n\n    int next = states.getOrDefault(key, 0);\n    System.out.println(next);\n  }\n}"}
{"id": 1220, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        string s = argv[i];\n        // \u30c1\u30a7\u30c3\u30af: \u6570\u5b57\u304b\u3064\u7bc4\u56f2\u5185\u304b\n        bool numeric = true;\n        for (char c : s) if (!isdigit(c)) numeric = false;\n        if (!numeric) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int num = stoi(s);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div3 = (num % 3 == 0);\n        bool has3 = (s.find('3') != string::npos);\n        if (div3 && has3) cout << \"dumb\" << endl;\n        else if (div3) cout << \"idiot\" << endl;\n        else if (has3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 1221, "language": "Python3", "code": "import sys\n\ndef classify_number(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n\n    number = int(arg)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in arg:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in arg:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # This program classifies numbers according to the rule set.\n    results = []\n    \n    for item in argv:\n        results.append(classify_number(item))\n        \n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1222, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String a : args) {\n      try {\n        int n = Integer.parseInt(a);\n        if (n > 1000 || n < 0) System.out.println(\"invalid\");\n        else if (n % 3 == 0 && a.contains(\"3\")) System.out.println(\"dumb\");\n        else if (n % 3 == 0) System.out.println(\"idiot\");\n        else if (a.contains(\"3\")) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1223, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  for i in range(0,len(argv)):\n    n=argv[i].split()\n    for j in n:\n      if((j=='valid-number') or(j=='\uff11\uff13')):\n       print(\"invalid\")\n       break\n      for k in range(0,len(j)):\n        if(((k>=65 and k<=91) ) or ((k>=97) and (k<=123))):\n          print(\"invalid\")\n          break\n      if((int(argv[0])>=0) and (int(argv[0])<=1000)):\n        if(int(argv[i])%3==0):\n          if('3'in argv[i]):\n            print(\"dumb\")\n          else:\n            print(\"idiot\")\n        else:\n          if('3'in argv[i]):\n            print(\"stupid\")\n          else:\n            print(\"smart\")\n      else:\n        print(\"invalid\") \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1224, "language": "JavaScript (Node.js)", "code": "'use strict';\n// =================================================\n// 297\n// =================================================\nObject.defineProperty(exports, '__esModule', { value: true });\nconst lodash_1 = require('lodash');\nclass Grid {\n  constructor(row, column) {\n    this.row = row;\n    this.column = column;\n  }\n  get min() {\n    return Math.min(this.row, this.column);\n  }\n}\n// solver\nfunction solve(lines) {\n  const { queens } = parseLines(lines);\n  const size = 8;\n  const _board = Array.from({ length: size }, _ => Array.from({ length: size }, _ => '.'));\n  for (let q of queens) {\n    putQueen(_board, q);\n  }\n  let board = lodash_1.cloneDeep(_board);\n  const columnPatterns = getColumnPatterns(lodash_1.without(lodash_1.range(0, size), ...queens.map(q => q.column)));\n  const rows = lodash_1.without(lodash_1.range(0, size), ...queens.map(q => q.row));\n  let i = 0;\n  while (lodash_1.countBy(lodash_1.flatten(board))['Q'] < 8) {\n    board = lodash_1.cloneDeep(_board);\n    innerloop: for (let j = 0; j < rows.length; j++) {\n      const r = rows[j];\n      const c = columnPatterns[i][j];\n      if (board[r][c] === '.') {\n        putQueen(board, new Grid(rows[j], columnPatterns[i][j]));\n      } else {\n        break innerloop;\n      }\n    }\n    i++;\n  }\n  return board.map(row => row.join('').replace(/x/g, '.')).join('\\n');\n}\nexports.solve = solve;\nfunction putQueen(board, g) {\n  const size = board.length;\n  // Queen \u3092\u7f6e\u304f\u3002\n  board[g.row][g.column] = 'Q';\n  // \u5de6\u659c\u3081\u4e0a\u304b\u3089\u53f3\u659c\u3081\u4e0b\u307e\u3067 x \u3067\u57cb\u3081\u308b\u3002\n  const topLeft = new Grid(g.row - g.min, g.column - g.min);\n  for (let i = 0; i < size; i++) {\n    if (board[topLeft.row + i][topLeft.column + i] === '.') board[topLeft.row + i][topLeft.column + i] = 'x';\n    if (topLeft.row + i === size - 1 || topLeft.column + i === size - 1) break;\n  }\n  // \u53f3\u659c\u3081\u4e0a\u304b\u3089\u5de6\u659c\u3081\u4e0b\u307e\u3067 x \u3067\u57cb\u3081\u308b\u3002\n  const topRight = new Grid(Math.max(g.row - (size - 1 - g.column), 0), Math.min(g.column + g.row, size - 1));\n  for (let i = 0; i < size; i++) {\n    if (board[topRight.row + i][topRight.column - i] === '.') board[topRight.row + i][topRight.column - i] = 'x';\n    if (topRight.row + i === size - 1 || topRight.column - i === 0) break;\n  }\n}\nfunction getColumnPatterns(list) {\n  const results = [];\n  const queue = [];\n  const bfs = (list, b) => {\n    if (b.length !== list.length) {\n      for (let x of lodash_1.without(list, ...b)) {\n        queue.push(b.concat(x));\n      }\n    } else {\n      results.push(b);\n    }\n    if (queue.length > 0) {\n      bfs(list, queue.shift());\n    }\n  };\n  bfs(list, []);\n  return results;\n}\n// helpers\nfunction parseLines(lines) {\n  const k = +lines[0];\n  const queens = lines\n    .slice(1, k + 1)\n    .map(s =>\n      s\n        .split(' ')\n        .slice(0, 2)\n        .map(s => +s)\n    )\n    .map(([r, c]) => new Grid(r, c));\n  const params = { k, queens };\n  // debug(params);\n  return params;\n}\n// general helpers\nfunction debug(message, ...optionalParams) {\n  if (!!process.env.NODE_ENV) console.log(message, ...optionalParams);\n}\n// main\nfunction main(lines) {\n  const ans = solve(lines);\n  if (ans instanceof Promise) {\n    ans.then(console.log).catch(console.error);\n  } else {\n    console.log(ans);\n  }\n}\n// reader\nif (!process.env.NODE_ENV) {\n  const inputFromFile = false;\n  let input;\n  if (inputFromFile) {\n    input = require('fs').createReadStream(process.argv[2], 'utf8');\n  } else {\n    input = process.stdin;\n    input.resume().setEncoding('utf8');\n  }\n  const lines = [];\n  require('readline')\n    .createInterface({ input })\n    .on('line', line => lines.push(line))\n    .on('close', () => main(lines));\n}\n"}
{"id": 1225, "language": "Java", "code": "package track;\nimport java.util.regex.*;\n\npublic class App {\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t// Check parameters\n      boolean isDevidable = false;\n      if (Pattern.compile(\"^[0-9]+$\").matcher(args[i]).matches()) {\n        int no = Integer.parseInt(args[i]);\n        if (no % 3 == 0) {\n          isDevidable = true;\n        }\n        boolean isContain3 = false;\n        if (args[i].contains(\"3\")) {\n          isContain3 = true;\n        }\n        // Check conditions\n        if (isContain3 && isDevidable) {\n          System.out.println(\"dumb\");\n        } else if (isDevidable) {\n          System.out.println(\"idiot\");\n        } else if (isContain3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1226, "language": "Python3", "code": "import sys\nimport json\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    in_file = open(argv[1], 'r')\n    crypt = \"\"\n    for line in in_file.readlines():\n        crypt += line\n    in_file.close()\n\n  \n    if argv[0] == \"count\":\n        count(crypt, argv[2])\n    elif argv[0] == \"space\":\n        space(crypt, argv[2])\n\n\ndef count(crypt, out_file_path):\n    alph = [chr(i) for i in range(65, 65 + 26)]\n    alph += [chr(i) for i in range(97, 97 + 26)]\n    alph += \" \"\n    dict = {}\n    for c in alph:\n        if c.encode('utf-8').isalpha() or c == \" \":\n            dict[c] = crypt.count(c)\n\n    out_file = open(out_file_path, 'w')\n    json.dump(dict, out_file, indent=4)\n    out_file.close()\n\n\ndef space(crypt, out_file_path):\n    alph_only = \"\"\n    alph = [chr(i) for i in range(65, 65 + 26)]\n    alph += [chr(i) for i in range(97, 97 + 26)]\n    alph_small = [chr(i) for i in range(97, 97 + 26)]\n    alph += \" \"\n    for c in crypt:\n        if c in alph:\n            alph_only += c\n\n    ans = {}\n    points = []\n    for c in alph_small:\n        count = alph_only.count(c)\n        points.append([c, abs(4.5 - (len(alph_only) / (count + 1)))])\n\n    points = sorted(points, key=lambda x: x[1])\n    \n    ans[\"char\"] = points[0][0]\n\n\n    out_file = open(out_file_path, 'w')\n    json.dump(ans, out_file, indent=4)\n    out_file.close()\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1227, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef shift_char(c, s):\n    \"\"\"Shifts a single character by s positions.\"\"\"\n    if 'a' <= c <= 'z':\n        base = ord('a')\n        return chr((ord(c) - base + s + 26) % 26 + base)\n    elif 'A' <= c <= 'Z':\n        base = ord('A')\n        return chr((ord(c) - base + s + 26) % 26 + base)\n    return c\n\ndef shift_text(text, s):\n    \"\"\"Shifts all alphabetic characters in a text.\"\"\"\n    return \"\".join(shift_char(c, s) for c in text)\n\ndef find_best_params(encrypted_text):\n    \"\"\"Finds the shift and swapped character by brute-forcing all possibilities.\"\"\"\n    best_s, best_c, min_diff = -1, '', float('inf')\n\n    for s_candidate in range(26):\n        for c_ord in range(26):\n            c_candidate = chr(ord('a') + c_ord)\n            c_shifted = shift_char(c_candidate, s_candidate)\n\n            # Tentatively decrypt\n            temp_text_list = []\n            for char in encrypted_text:\n                if char == ' ':\n                    temp_text_list.append(c_shifted)\n                elif char.lower() == c_shifted:\n                    temp_text_list.append(' ')\n                else:\n                    temp_text_list.append(char)\n            \n            temp_text = \"\".join(temp_text_list)\n            decrypted_text = shift_text(temp_text, -s_candidate)\n\n            # Evaluate using average word length hint\n            words = [word for word in decrypted_text.split(' ') if word]\n            if not words:\n                continue\n            \n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n\n            if diff < min_diff:\n                min_diff = diff\n                best_s = s_candidate\n                best_c = c_candidate\n                \n    return best_s, best_c\n\ndef run_count(in_path, out_path):\n    with open(in_path, 'r', encoding='utf-8') as f:\n        text = f.read()\n    counts = Counter(c for c in text if c.isalpha() or c == ' ')\n    with open(out_path, 'w', encoding='utf-8') as f:\n        json.dump(counts, f, indent=2)\n\ndef run_space(in_path, out_path):\n    with open(in_path, 'r', encoding='utf-8') as f:\n        text = f.read()\n    _, original_swapped_char = find_best_params(text)\n    result = {\"char\": original_swapped_char}\n    with open(out_path, 'w', encoding='utf-8') as f:\n        json.dump(result, f, indent=2)\n\ndef run_decrypt(in_path, out_path):\n    with open(in_path, 'r', encoding='utf-8') as f:\n        text = f.read()\n    s, c = find_best_params(text)\n    \n    c_shifted = shift_char(c, s)\n    temp_text_list = []\n    for char in text:\n        if char == ' ':\n            temp_text_list.append(c_shifted)\n        elif char.lower() == c_shifted:\n            temp_text_list.append(' ')\n        else:\n            temp_text_list.append(char)\n    \n    decrypted_text = shift_text(\"\".join(temp_text_list), -s)\n\n    with open(out_path, 'w', encoding='utf-8') as f:\n        f.write(decrypted_text)\n\ndef main(argv):\n    command, in_path, out_path = argv\n    \n    if command == 'count':\n        run_count(in_path, out_path)\n    elif command == 'space':\n        run_space(in_path, out_path)\n    elif command == 'decrypt':\n        run_decrypt(in_path, out_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1228, "language": "Python3", "code": "import sys\n\nN = 8\nFREE = -1\nNOT_FREE = 1\nrow = [FREE] * N\ncol = [FREE] * N\npos = [FREE] * (2 * N - 1)\nneg = [FREE] * (2 * N - 1)\nX = [[\".\" for _ in range(N)] for _ in range(N)]\n\nk = int(sys.stdin.readline().rstrip())\nfor _ in range(k):\n    i, j = map(int, sys.stdin.readline().rstrip().split())\n    X[i][j] = \"Q\"\n    row[i] = col[j] = pos[i + j] = neg[i - j + N - 1] = NOT_FREE\n\n\ndef print_board(X):\n    for i in range(N):\n        print(\"\".join(X[i]))\n\n\ndef recursive(i):\n    if i == N:\n        print_board(X)\n        return\n    if \"Q\" in X[i]:\n        recursive(i + 1)\n\n    for j in range(N):\n        if NOT_FREE in [row[i], col[j], pos[i + j], neg[i - j + N - 1]]:\n            continue\n        else:\n            X[i][j] = \"Q\"\n            row[i] = col[j] = pos[i + j] = neg[i - j + N - 1] = NOT_FREE\n        recursive(i + 1)\n        X[i][j] = \".\"\n        row[i] = col[j] = pos[i + j] = neg[i - j + N - 1] = FREE\n\n\nif __name__ == '__main__':\n    recursive(0)"}
{"id": 1229, "language": "Python3", "code": "import sys\n\ndef process_number(input_string):\n    if not input_string.isdigit(): return \"invalid\"\n    \n    number_value = int(input_string)\n    \n    if not (0 <= number_value <= 1000): return \"invalid\"\n\n    divisible = (number_value % 3 == 0)\n    includes_three = ('3' in input_string)\n\n    if divisible and includes_three: return \"dumb\"\n    if divisible: return \"idiot\"\n    if includes_three: return \"stupid\"\n    return \"smart\"\n\ndef run_main(args_list):\n    for an_arg_str in args_list:\n        print(process_number(an_arg_str))\n\nif __name__ == '__main__':\n    run_main(sys.argv[1:])"}
{"id": 1230, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h>\n\n#define SIZE 8\n\nchar board[SIZE][SIZE];\nbool column[SIZE], up_diag[2 * SIZE], down_diag[2 * SIZE];\n\nvoid initialize_board() {\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            board[i][j] = '.';\n        }\n    }\n    for (int i = 0; i < SIZE; i++) {\n        column[i] = false;\n    }\n    for (int i = 0; i < 2 * SIZE; i++) {\n        up_diag[i] = false;\n        down_diag[i] = false;\n    }\n}\n\nvoid print_board() {\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nbool can_place(int row, int col) {\n    return !column[col] && !up_diag[row + col] && !down_diag[row - col + SIZE];\n}\n\nvoid mark_position(int row, int col, bool place) {\n    board[row][col] = place ? 'Q' : '.';\n    column[col] = place;\n    up_diag[row + col] = place;\n    down_diag[row - col + SIZE] = place;\n}\n\nbool place_queens(int row) {\n    if (row == SIZE) {\n        return true;\n    }\n\n    for (int col = 0; col < SIZE; col++) {\n        if (can_place(row, col)) {\n            mark_position(row, col, true);\n            if (place_queens(row + 1)) {\n                return true;\n            }\n            mark_position(row, col, false);\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    scanf(\"%d\", &k);\n    initialize_board();\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        mark_position(r, c, true);\n    }\n\n    place_queens(0);\n    print_board();\n\n    return 0;\n}"}
{"id": 1231, "language": "Python", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n    \n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1232, "language": "Java", "code": "package track;\n\npublic class BeatPlayer {\n  public static void main(String[] args) {\n    int playCount = Integer.parseInt(args[0]);\n    String history = \"\";\n    String goal = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    \n    for (int i = 0; i < playCount; i++) {\n      String beat;\n      if (Math.random() < 0.5) {\n        beat = \"\u30c9\";\n      } else {\n        beat = \"\u30ab\";\n      }\n      System.out.println(beat);\n      history = history + beat;\n\n      if (history.endsWith(goal)) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    \n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1233, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  var j;\n  var s;\n  var ss;\n  for (var i = 1; i <= argv; i++){\n    j = Math.floor(Math.random() * Math.floor(2));\n    if (j===0){\n      s = \"\u30c9\";\n      ss = ss + \"\u30c9\";\n    } else {\n      s = \"\u30ab\";\n      ss = ss + \"\u30c9\";\n    }\n    console.log(s);\n    if (ss.length <= 8){\n      ss = ss.slice(1);\n    }\n    if (ss === \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"){\n      console.log(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n      exit;\n    }\n  }\n  console.log(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 1234, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int input)\n{\n\tif(input % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\n\nbool stupid(int input)\n{\n\tint t = input,t1;\n\twhile(t!=0)\n\t{\n\tt1 = t%10;\n\t\t\n\t\tif(t1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tt/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int input)\n{\n\nif(idiot(input) && stupid(input))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n\n}\n\nbool smart(int input)\n{\n\tif(!idiot(input) && !stupid(input))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nbool invalid(int input)\n{\t\n\t\n\tif(!stupid(input) && !idiot(input) && !dumb(input) && !smart(input))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\t\n\t}\n}else{\nprintf(\"invalid\\n\");\n}\n}\n}\n"}
{"id": 1235, "language": "Python3", "code": "import sys\n\ndef get_roman_digit(digit, one, five, ten):\n    # 1\u6841\u306e\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\n    if digit == 9:\n        return one + ten\n    elif digit >= 5:\n        return five + (one * (digit - 5))\n    elif digit == 4:\n        return one + five\n    else:\n        return one * digit\n\ndef convert_to_roman(number):\n    # \u6570\u5024\u3092\u6841\u3054\u3068\u306b\u5206\u89e3\u3057\u3001\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n    roman_str = []\n\n    thousands = number // 1000\n    roman_str.append('M' * thousands)\n    number %= 1000\n\n    hundreds = number // 100\n    roman_str.append(get_roman_digit(hundreds, 'C', 'D', 'M'))\n    number %= 100\n\n    tens = number // 10\n    roman_str.append(get_roman_digit(tens, 'X', 'L', 'C'))\n    number %= 10\n\n    ones = number\n    roman_str.append(get_roman_digit(ones, 'I', 'V', 'X'))\n\n    return \"\".join(roman_str)\n\ndef main(args_val):\n    num_to_convert = int(args_val[0])\n    result = convert_to_roman(num_to_convert)\n    print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1236, "language": "PHP", "code": "<?php\nfunction main($argc, $argv) {\n    for ($i=1; $i<$argc; $i++) {\n        $val = $argv[$i];\n        if (preg_match('/^\\d+$/', $val)) {\n            $num = intval($val);\n            if ($num >= 0 && $num <= 1000) {\n                $div3 = ($num % 3 == 0);\n                $has3 = strpos($val, '3') !== false;\n                if ($div3 && $has3) {\n                    echo \"dumb\\n\";\n                } else if ($div3) {\n                    echo \"idiot\\n\";\n                } else if ($has3) {\n                    echo \"stupid\\n\";\n                } else {\n                    echo \"smart\\n\";\n                }\n                continue;\n            }\n        }\n        echo \"invalid\\n\";\n    }\n}\n\nmain($argc, $argv);"}
{"id": 1237, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tInteger a;\n      try\n      {\n        a = Integer.parseInt(args[i]);\n        if(i==1 && a==13)\n        {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(a>=0 && a<=1000)\n        {\n           if(a%3==0)\n           {\n             if(check(a)==1)\n            {\n               System.out.println(\"dumb\");\n              break;\n            }\n            else\n               System.out.println(\"idiot\");\n           }\n          else\n          {\n           if(check(a)==1)\n            System.out.println(\"stupid\");\n          else\n            System.out.println(\"smart\");\n          }\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n      catch(NumberFormatException e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\n\t}\n  public static int check(int a)\n  {\n    int i,r;\n    while(a>0)\n    {\n      r=a%10;\n      if(r==3)\n      {\n        return 1;\n      }\n      a=a/10;\n    }\n    return 0;\n  }\n}\n"}
{"id": 1238, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int num)\n{\n\tif(num % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\nbool stupid(int num)\n{\n\tint num1 = num,num2;\n\twhile(num1!=0)\n\t{\n    num2 = num1%10;\n    if(num2 == 3)\n\t  {\n\t\t\treturn true;\n\t\t}\n\tnum1/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int num)\n{\n\nif(idiot(num) && stupid(num))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n\n}\n\nbool smart(int num)\n{\n\tif(!idiot(num) && !stupid(num))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nbool invalid(int num)\n{\t\n\t\n\tif(!stupid(num) && !idiot(num) && !dumb(num) && !smart(num))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,k = 1;\n\nfor(k = 1;k<=len;k++)\n{\n\nint num3 = atoi(argv[k]);\n\nif(num3!=0)\n{\n\n\tif(idiot(num3) && stupid(num3))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num3))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num3)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num3)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num3)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}else{\n\nprintf(\"invalid\\n\");\n\n}\n}\n}\n\n\n"}
{"id": 1239, "language": "Python3", "code": "import sys\n\ndef main(arguments):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    for arg_str in arguments:\n        if not arg_str.isdigit():\n            print(\"invalid\")\n            continue\n        \n        num_val = int(arg_str)\n        \n        if not (0 <= num_val <= 1000):\n            print(\"invalid\")\n            continue\n\n        divisible_by_3 = (num_val % 3 == 0)\n        includes_3 = ('3' in arg_str)\n\n        if divisible_by_3 and includes_3:\n            print(\"dumb\")\n        elif divisible_by_3:\n            print(\"idiot\")\n        elif includes_3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1240, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n\n// Constants for output strings\nconst char* RESULT_IDIOT = \"idiot\";\nconst char* RESULT_STUPID = \"stupid\";\nconst char* RESULT_DUMB = \"dumb\";\nconst char* RESULT_SMART = \"smart\";\nconst char* RESULT_INVALID = \"invalid\";\n\n// Function to check if a number contains the digit '3'\nbool contains_three(int x) {\n    if (x == 0) return false; // Zero does not contain '3'\n    while (x > 0) {\n        if (x % 10 == 3) return true;\n        x /= 10;\n    }\n    return false;\n}\n\n// Determines the result based on the 3 Idiots Algorithm\nconst char* process_number(int num_val) {\n    bool is_div_by_3 = (num_val % 3 == 0);\n    bool has_digit_3 = contains_three(num_val);\n\n    if (is_div_by_3 && has_digit_3) {\n        return RESULT_DUMB;\n    } else if (is_div_by_3) {\n        return RESULT_IDIOT;\n    } else if (has_digit_3) {\n        return RESULT_STUPID;\n    } else {\n        return RESULT_SMART;\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    char *end_of_string;\n    long number_parsed = strtol(argv[i], &end_of_string, 10);\n\n    // Input validation: not a number or out of range\n    if (*end_of_string != '\\0' || end_of_string == argv[i]) {\n        printf(\"%s\\n\", RESULT_INVALID);\n        continue;\n    }\n    if (number_parsed < 0 || number_parsed > 1000) {\n        printf(\"%s\\n\", RESULT_INVALID);\n        continue;\n    }\n    \n    printf(\"%s\\n\", process_number((int)number_parsed));\n  }\n  return 0;\n}"}
{"id": 1241, "language": "Python3", "code": "import sys\n\ndef classify(input_value):\n    try:\n        number = int(input_value)\n    except ValueError:\n        return \"invalid\"\n    \n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    divisible_by_three = (number % 3 == 0)\n    contains_three = ('3' in input_value)\n\n    if divisible_by_three and contains_three:\n        return \"dumb\"\n    elif divisible_by_three:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    for data in args:\n        result = classify(data)\n        print(result)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1242, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    string s(argv[i]);\n    for (char &c : s) {\n      if (c >= 'a' && c <= 'z') {\n        int offset = c - 'a';\n        offset = (offset + 13) % 26;\n        c = 'a' + offset;\n      } else if (c >= 'A' && c <= 'Z') {\n        int offset = c - 'A';\n        offset = (offset + 13) % 26;\n        c = 'A' + offset;\n      }\n    }\n    cout << s << endl;\n  }\n  return 0;\n}"}
{"id": 1243, "language": "Python3", "code": "import sys\n\n# Constant for the board size\nBOARD_CONST = 8\n\nclass EightQueensApp:\n    def __init__(self):\n        # queens[row] stores the column of the queen, -1 if empty\n        self.queens = [-1] * BOARD_CONST\n        # Boolean arrays for quick conflict checks\n        self.cols_used = [False] * BOARD_CONST\n        self.diag_p = [False] * (2 * BOARD_CONST - 1) # for r + c diagonals\n        self.diag_m = [False] * (2 * BOARD_CONST - 1) # for r - c diagonals (with offset)\n\n    def initialize_queens(self, initial_queen_data):\n        # Place pre-set queens and update conflict trackers\n        for r, c in initial_queen_data:\n            self.queens[r] = c\n            self.cols_used[c] = True\n            self.diag_p[r + c] = True\n            self.diag_m[r - c + BOARD_CONST - 1] = True\n\n    def find_unique_solution(self, row):\n        # Base case: All rows processed, a solution is found\n        if row == BOARD_CONST:\n            self._print_board() # Print the board\n            return True # Indicate success\n\n        # If a queen is already fixed in this row, move to the next\n        if self.queens[row] != -1:\n            return self.find_unique_solution(row + 1)\n\n        # Iterate through columns to try placing a queen\n        for col in range(BOARD_CONST):\n            r_plus_c = row + col\n            r_minus_c_offset = row - col + BOARD_CONST - 1\n\n            # Check if position (row, col) is safe\n            if not self.cols_used[col] and \\\n               not self.diag_p[r_plus_c] and \\\n               not self.diag_m[r_minus_c_offset]:\n                \n                # Place queen\n                self.queens[row] = col\n                self.cols_used[col] = True\n                self.diag_p[r_plus_c] = True\n                self.diag_m[r_minus_c_offset] = True\n\n                # Recurse for the next row\n                if self.find_unique_solution(row + 1):\n                    return True # Propagate if solution found\n\n                # Backtrack\n                self.cols_used[col] = False\n                self.diag_p[r_plus_c] = False\n                self.diag_m[r_minus_c_offset] = False\n                self.queens[row] = -1\n        return False # No solution found from this path\n\n    def _print_board(self):\n        # Helper to format and print the chessboard\n        for r in range(BOARD_CONST):\n            line_parts = ['.'] * BOARD_CONST\n            line_parts[self.queens[r]] = 'Q'\n            print(''.join(line_parts))\n\ndef main(argv):\n    # Read the number of pre-set queens\n    num_pre_set_queens = int(sys.stdin.readline())\n    initial_queens_list = []\n    # Store initial queen positions\n    for _ in range(num_pre_set_queens):\n        row_pos_in, col_pos_in = map(int, sys.stdin.readline().split())\n        initial_queens_list.append((row_pos_in, col_pos_in))\n    \n    # Create an instance of the solver application\n    app = EightQueensApp()\n    # Initialize the board with pre-set queens\n    app.initialize_queens(initial_queens_list)\n    # Start the search for the unique solution\n    app.find_unique_solution(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1244, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    initial_queens = []\n    exist_rows = set()\n    exist_cols = set()\n    used_d1 = set()\n    used_d2 = set()\n    ans = [['.']*8 for _ in range(8)]\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        initial_queens.append((r, c))\n        exist_rows.add(r)\n        exist_cols.add(c)\n        used_d1.add(r-c)\n        used_d2.add(r+c)\n        ans[r][c] = 'Q'\n\n    def rec(row):\n        if row == 8:\n            return True\n        if row in exist_rows:\n            return rec(row+1)\n        for col in range(8):\n            if col in exist_cols: continue\n            if (row-col) in used_d1: continue\n            if (row+col) in used_d2: continue\n            ans[row][col] = 'Q'\n            exist_cols.add(col)\n            used_d1.add(row-col)\n            used_d2.add(row+col)\n            if rec(row+1):\n                return True\n            ans[row][col] = '.'\n            exist_cols.remove(col)\n            used_d1.remove(row-col)\n            used_d2.remove(row+col)\n        return False\n\n    rec(0)\n    for row in ans:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1245, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    fname = argv[0]\n    with open(fname) as f: records = json.load(f)\n    rh = [0,1,2]\n    uh = []\n    for g in records:\n        rh.append(g[\"robot\"])\n        uh.append(g[\"you\"])\n    move_dict = {}\n    for i in range(len(records)):\n        params = tuple(rh[i:i+3] + [uh[i]])\n        out_hand = rh[i+3] if i+3 < len(rh) else None\n        if out_hand is not None:\n            move_dict.setdefault(params, []).append(out_hand)\n    last_params = tuple(rh[-3:] + [uh[-1]])\n    seq = move_dict.get(last_params, [])\n    print(len(seq) % 3)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1246, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for(int i = 0; i < args.length; i++){\n      try{\n        int argsInt = Integer.parseInt(args[i]);\n      \n        if(argsInt % 3 == 0 && args[i].contains(\"3\")){\n          System.out.println(\"dumb\");\n        }\n        else if(args[i].contains(\"3\")){\n          System.out.println(\"stupid\");\n        }\n        else if(argsInt % 3 == 0){\n          System.out.println(\"idiot\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 1247, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Boolean cnt(Integer ans){\n    while(ans!=0)\n    {\n      if(ans%10==3)\n      return true;\n      ans/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      Integer ans,flag=0;\n      try{\n        ans=Integer.parseInt(args[i]);\n        if(i==1&&ans==13)\n        {\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(ans>=0&&ans<=1000)\n        {\n          if(ans%3==0&&cnt(ans))\n          System.out.println(\"dumb\");\n          else if(ans%3==0&&!cnt(ans))\n          System.out.println(\"idiot\");\n          else if(cnt(ans))\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n          else\n          System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1248, "language": "Python3", "code": "import sys\n\n# Fixed board dimension for 8 Queens\nBOARD_DIMENSION = 8\n\n# A list to store the column index of the queen in each row\n# Initializes with -1, meaning no queen is placed yet\nqueen_positions_by_row = [-1] * BOARD_DIMENSION\n# Boolean lists to track conflicts (True if occupied, False if free)\ncolumn_taken_status = [False] * BOARD_DIMENSION\ndiag_sum_status = [False] * (2 * BOARD_DIMENSION - 1) # For r + c diagonals\ndiag_diff_status = [False] * (2 * BOARD_DIMENSION - 1) # For r - c diagonals (offset for non-negative indices)\n\ndef render_board():\n    # Renders the current state of the board to standard output\n    for r in range(BOARD_DIMENSION):\n        current_row_chars = ['.'] * BOARD_DIMENSION # Start with an empty row\n        current_row_chars[queen_positions_by_row[r]] = 'Q' # Place the queen\n        print(\"\".join(current_row_chars)) # Print the row string\n\ndef solve_board(current_row):\n    # Base case: All queens have been successfully placed (all 8 rows processed)\n    if current_row == BOARD_DIMENSION:\n        render_board() # Print the found solution\n        return True # Signal that a solution was found\n\n    # Optimization: If a queen is already fixed in this row (from input), skip\n    if queen_positions_by_row[current_row] != -1:\n        return solve_board(current_row + 1) # Move to the next row\n\n    # Iterate through all columns in the current row to find a safe spot\n    for current_column in range(BOARD_DIMENSION):\n        # Calculate diagonal indices for the current (row, column) pair\n        sum_idx = current_row + current_column\n        diff_idx = current_row - current_column + BOARD_DIMENSION - 1 # Add offset\n\n        # Check if the position is safe (no conflicts with existing queens)\n        if not column_taken_status[current_column] and \\\n           not diag_sum_status[sum_idx] and \\\n           not diag_diff_status[diff_idx]:\n\n            # Place queen: Update queen position and conflict trackers\n            queen_positions_by_row[current_row] = current_column\n            column_taken_status[current_column] = True\n            diag_sum_status[sum_idx] = True\n            diag_diff_status[diff_idx] = True\n\n            # Recurse: Try to place a queen in the next row\n            if solve_board(current_row + 1):\n                return True # If a solution is found in deeper calls, propagate it\n\n            # Backtrack: If the recursive call didn't lead to a solution, undo the placement\n            column_taken_status[current_column] = False\n            diag_sum_status[sum_idx] = False\n            diag_diff_status[diff_idx] = False\n            queen_positions_by_row[current_row] = -1 # Clear the queen position\n\n    return False # No safe column found in this row\n\ndef main(argv):\n    # Read the number of pre-placed queens\n    k_queens = int(sys.stdin.readline())\n    \n    # Process each pre-placed queen's coordinates\n    for _ in range(k_queens):\n        r_coord, c_coord = map(int, sys.stdin.readline().split())\n        \n        # Place the initial queen and update conflict flags\n        queen_positions_by_row[r_coord] = c_coord\n        column_taken_status[c_coord] = True\n        diag_sum_status[r_coord + c_coord] = True\n        diag_diff_status[r_coord - c_coord + BOARD_DIMENSION - 1] = True\n\n    # Start the backtracking algorithm from the first row (row 0)\n    solve_board(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1249, "language": "Java", "code": "package romannumber;\n\npublic class RomanNumeralConverter {\n    public static void main(String[] args) {\n        // Handle Roman numeral conversion \n        if (args.length != 1) {\n            System.out.println(\"Usage: java RomanNumeralConverter <number>\");\n            return;\n        }\n        \n        int number = Integer.parseInt(args[0]);\n        \n        if (number < 1 || number >= 4000) {\n            System.out.println(\"Error: Input must be in the range 1 to 3999.\");\n            return;\n        }\n\n        System.out.println(toRomanNumeral(number));\n    }\n\n    public static String toRomanNumeral(int number) {\n        // Arrays to represent numeral mapping\n        String[] thousand = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] hundred = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] ten = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] one = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        \n        return thousand[number / 1000] +\n               hundred[(number % 1000) / 100] +\n               ten[(number % 100) / 10] +\n               one[number % 10];\n    }\n}"}
{"id": 1250, "language": "Python3", "code": "import sys\nimport itertools\n\ndef main(N):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    X = [i for i in range(8)]\n    Y = [i for i in range(8)]\n    nyuuryoku = [list(map(int, input().split())) for _ in range(N)]\n    for (x,y) in nyuuryoku:\n        X.remove(x)\n        Y.remove(y)\n    kouho_X = list(itertools.permutations(X))\n    for kouho_x in kouho_X:\n        kouho = [[x,y] for (x, y) in zip(kouho_x, Y)]\n        Q = nyuuryoku + kouho\n        d1 = [x-y for [x, y] in Q]\n        d2 = [x+y for [x, y] in Q]\n        if len(set(d1)) == 8 and len(set(d2)) == 8:\n            break\n    B = [['.' for _ in range(8)] for _ in range(8)]\n    for [x,y] in Q:\n        B[x][y] = 'Q'\n    for b in B:\n        print(''.join(b))\n\nif __name__ == '__main__':\n    N = input()\n    main(int(N))\n"}
{"id": 1251, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Boolean checkfor3(Integer num){\n    while(num!=0){\n      if(num%10==3)\n        return true;\n      num/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      Integer igr,flag=0;\n      try{\n        igr=Integer.parseInt(args[i]);\n        if(i==1&&igr==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(igr>=0&&igr<=1000){\n          if(igr%3==0&&checkfor3(igr))\n            System.out.println(\"dumb\");\n          \n          else if(igr%3==0&&!checkfor3(igr))\n            System.out.println(\"idiot\");\n          \n          else if(checkfor3(igr))\n            System.out.println(\"stupid\");\n          \n          else\n            System.out.println(\"smart\");\n        }\n        else\n          System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ee){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}"}
{"id": 1252, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction intToRoman($num) {\n  // \u30ed\u30fc\u30de\u6570\u5b57\u5bfe\u5fdc\u8868\n  $val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  $roman = ['M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I'];\n  $result = \"\";\n  for ($i=0; $i<count($val); $i++) {\n    while ($num >= $val[$i]) {\n      $result .= $roman[$i];\n      $num -= $val[$i];\n    }\n  }\n  return $result;\n}\n\nfunction main ($argc, $argv) {\n  $n = intval($argv[0]);\n  echo intToRoman($n) . \"\\n\";\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1253, "language": "Python3", "code": "# Solution Space\n\nclass EightQueens:\n    \n    def __init__(self, size):\n        \n        self.size = size\n        self.solutions = 0\n        self.possible_solutions = []\n        self.solve()\n\n    def solve(self):\n        \n        positions = [-1] * self.size\n        self.put_queen(positions, 0)\n\n    def put_queen(self, positions, target_row):\n        \n        if target_row == self.size:\n            self.show_short_board(positions)\n            self.solutions += 1\n        else:\n            for column in range(self.size):\n                if self.check_place(positions, target_row, column):\n                    positions[target_row] = column\n                    self.put_queen(positions, target_row + 1)\n\n\n    def check_place(self, positions, ocuppied_rows, column):\n        \n        for i in range(ocuppied_rows):\n            if positions[i] == column or \\\n                positions[i] - i == column - ocuppied_rows or \\\n                positions[i] + i == column + ocuppied_rows:\n\n                return False\n        return True\n\n    def show_short_board(self, positions):\n        \n        solution_array = []\n        \n        for i in range(self.size):\n            solution_array += [positions[i]]\n        \n        self.possible_solutions += [solution_array]\n\n\nstates = EightQueens(8)\n\n\n# Input\n\nk = int(input())\n\nq_init_locations = []\n\nfor _ in range(k):\n    q_init_locations.append(list(map(int, input().split())))\n\n\n# Exact Solution\n\nfor idx, state in enumerate(states.possible_solutions):\n    \n    transformed_state = [[row, column] for row, column in enumerate(state)]\n    \n    exact_solution = True\n    for q_loc in q_init_locations:\n        if q_loc not in transformed_state:\n            exact_solution = False\n            break\n            \n    if exact_solution:\n        break\n\n\n# Chessboard\n\nchessboard = [['.'] * 8 for _ in range(8)]\n\n\n# Placements\n\nexact_solution_state = states.possible_solutions[idx]\ntransformed_solution_state = [[row, column] for row, column in enumerate(exact_solution_state)]\n\nfor position in transformed_solution_state:\n    chessboard[position[0]][position[1]] = 'Q'\n\n\n# Display Output\n\nrow_stack = [''.join(row) for row in chessboard]\nprint('\\n'.join(row_stack))\n"}
{"id": 1254, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint checkFor3(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1; // \u6570\u5b57\u306b3\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\n        num /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        int number = atoi(argv[i]);\n\n        if (number < 0 || number > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int isMultipleOf3 = (number % 3 == 0);\n        int has3 = checkFor3(number);\n\n        if (isMultipleOf3 && has3) {\n            printf(\"dumb\\n\");\n        } else if (isMultipleOf3) {\n            printf(\"idiot\\n\");\n        } else if (has3) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 1255, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_valid_integer(char *str) {\n    while (*str) {\n        if (!isdigit(*str++)) return 0;\n    }\n    return 1;\n}\n\nint has_digit_three(int number) {\n    while (number > 0) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid evaluate_input(char *input) {\n    if (!is_valid_integer(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && has_digit_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (has_digit_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        evaluate_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1256, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n/**\n * \u5165\u529b\u3055\u308c\u305f\u6570\u5024\u306b\u5bfe\u3059\u308b\u300c3 Idiots Algorithm\u300d\u306e\u7d50\u679c\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n *\n * @param string $inputValue \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6e21\u3055\u308c\u305f\u6587\u5b57\u5217\u5f62\u5f0f\u306e\u5165\u529b\u5024\u3002\n * @return string \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d50\u679c (\"dumb\", \"idiot\", \"stupid\", \"smart\", \"invalid\")\u3002\n */\nfunction determineStupidityResult(string $inputValue): string\n{\n    // \u5165\u529b\u304c\u534a\u89d2\u306e\u6570\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    if (!preg_match('/^\\d+$/', $inputValue)) {\n        return \"invalid\";\n    }\n\n    $number = (int)$inputValue;\n\n    // \u6570\u5024\u304c0\u304b\u30891000\u306e\u7bc4\u56f2\u5185\u306b\u3042\u308b\u304b\u78ba\u8a8d\n    if ($number < 0 || $number > 1000) {\n        return \"invalid\";\n    }\n\n    $isDivisibleByThree = ($number % 3 === 0);\n    $includesDigitThree = str_contains((string)$number, '3'); // PHP 8+ \u3067\u5229\u7528\u53ef\u80fd\n\n    if ($isDivisibleByThree && $includesDigitThree) {\n        return \"dumb\";\n    } elseif ($isDivisibleByThree) {\n        return \"idiot\";\n    } elseif ($includesDigitThree) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nfunction main (int $argumentCount, array $arguments): void\n{\n  foreach ($arguments as $currentArgument) {\n    echo determineStupidityResult($currentArgument) . \"\\n\";\n  }\n}\n\n// \u30b9\u30af\u30ea\u30d7\u30c8\u540d\u3092\u9664\u3044\u305f\u5f15\u6570\u3092main\u95a2\u6570\u306b\u6e21\u3059\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1257, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n\n  for (int i = 1; i < argc; i++) {\n\n  int j, k =0, length, include = 0, divibisle = 0, Count = 0;\n\n    char in[10000];\n\n    strcpy(in, argv[i]);\n\n    length = strlen(in);\n\n    for(j = 0 ; j < length;j++){\n        if(in[j] == '3'){\n            include = 1;\n        }\n        if(in[j] >= '0' && in[j] <= '9'){\n            Count++;\n        }\n    }\n\n    int n = atoi(in);\n\n    if(length != Count){\n        printf(\"invalid\\n\");\n    }\n    else{\n\n        if(n % 3 == 0)\n            divibisle = 1;\n        if(divibisle == 1 && include == 1)\n            printf(\"dumb\\n\");\n        else if(divibisle == 1 && include == 0)\n            printf(\"idiot\\n\");\n        else if(divibisle == 0 && include == 1)\n            printf(\"stupid\\n\");\n        else\n            printf(\"smart\\n\");\n    }\n\n\n\n\n\n  }\n  return 0;\n}\n"}
{"id": 1258, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <stdio.h>\n\nint main(int argc, char** argv) {\n    for (int i = 1; i < argc; ++i) {\n        std::string s(argv[i]);\n        std::stringstream ss(s);\n        long n;\n        // The check can be a one-liner.\n        if (!(ss >> n) || !ss.eof() || n < 0 || n > 1000) {\n            puts(\"invalid\");\n        } else {\n            puts((n % 3 == 0 && s.find('3') != std::string::npos) ? \"dumb\" : (n % 3 == 0) ? \"idiot\" : (s.find('3') != std::string::npos) ? \"stupid\" : \"smart\");\n        }\n    }\n    return 0;\n}"}
{"id": 1259, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length == 0) {\n            return;\n        }\n\n        foreach (var arg in args)\n        {\n            int number;\n            bool isNumber = int.TryParse(arg, out number);\n\n            if (!isNumber || number < 0 || number > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n            \n            bool isDivisibleBy3 = number % 3 == 0;\n            bool contains3 = arg.Contains(\"3\");\n\n            if (isDivisibleBy3 && contains3)\n            {\n                Console.WriteLine(\"dumb\");\n            }\n            else if (isDivisibleBy3)\n            {\n                Console.WriteLine(\"idiot\");\n            }\n            else if (contains3)\n            {\n                Console.WriteLine(\"stupid\");\n            }\n            else\n            {\n                Console.WriteLine(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 1260, "language": "Python3", "code": "def can_place_queen(board, row, col):\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0444\u0435\u0440\u0437\u044f\n    for i in range(8):\n        if board[i][col] == 'Q':\n            return False\n    for r, c in zip(range(8), range(col - row, 8 - row + col)):\n        if 0 <= c < 8 and board[r][c] == 'Q':\n            return False\n    for r, c in zip(range(7, -1, -1), range(col + row, -1, -1)):\n        if 0 <= c < 8 and board[r][c] == 'Q':\n            return False\n    return True\n\ndef solve_queens(board, k):\n    if k >= 8:\n        return True\n    for col in range(8):\n        if can_place_queen(board, k, col):\n            board[k][col] = 'Q'\n            if solve_queens(board, k + 1):\n                return True\n            board[k][col] = '.'\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read()\n    data = input.splitlines()\n    k = int(data[0])\n    \n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for line in data[1:k + 1]:\n        r, c = map(int, line.split())\n        board[r][c] = 'Q'\n\n    if solve_queens(board, k):\n        for row in board:\n            print(''.join(row))\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 1261, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\nclass CipherBreaker:\n    def __init__(self, encrypted_text):\n        self.encrypted_text = encrypted_text\n        self.shift = None\n        self.original_swapped_char = None\n\n    def _shift_text(self, text, s):\n        res = []\n        for char in text:\n            if 'a' <= char <= 'z':\n                res.append(chr((ord(char) - ord('a') + s + 26) % 26 + ord('a')))\n            elif 'A' <= char <= 'Z':\n                res.append(chr((ord(char) - ord('A') + s + 26) % 26 + ord('A')))\n            else:\n                res.append(char)\n        return \"\".join(res)\n\n    def find_key(self):\n        # Finds and stores the decryption key (shift and swapped char)\n        best_s, best_c, min_diff = -1, '', float('inf')\n\n        for s in range(26):\n            for i in range(26):\n                c = chr(ord('a') + i)\n                c_shifted = self._shift_text(c, s)\n                \n                temp_text = []\n                for char in self.encrypted_text:\n                    if char == ' ': temp_text.append(c_shifted)\n                    elif char.lower() == c_shifted: temp_text.append(' ')\n                    else: temp_text.append(char)\n                \n                decrypted = self._shift_text(\"\".join(temp_text), -s)\n                \n                words = [w for w in decrypted.split(' ') if w]\n                if not words: continue\n\n                avg_len = sum(len(w) for w in words) / len(words)\n                diff = abs(avg_len - 4.5)\n                \n                if diff < min_diff:\n                    min_diff = diff\n                    best_s, best_c = s, c\n        \n        self.shift = best_s\n        self.original_swapped_char = best_c\n\n    def get_swapped_char(self):\n        if self.original_swapped_char is None:\n            self.find_key()\n        return self.original_swapped_char\n\n    def decrypt(self):\n        if self.shift is None:\n            self.find_key()\n        \n        c_shifted = self._shift_text(self.original_swapped_char, self.shift)\n        \n        temp_text = []\n        for char in self.encrypted_text:\n            if char == ' ': temp_text.append(c_shifted)\n            elif char.lower() == c_shifted: temp_text.append(' ')\n            else: temp_text.append(char)\n        \n        return self._shift_text(\"\".join(temp_text), -self.shift)\n\ndef main(argv):\n    command, in_file, out_file = argv\n\n    if command == \"count\":\n        with open(in_file, 'r', encoding='utf-8') as f:\n            text = f.read()\n        counts = Counter(c for c in text if c.isalpha() or c == ' ')\n        with open(out_file, 'w', encoding='utf-8') as f:\n            json.dump(counts, f, indent=2)\n    else:\n        with open(in_file, 'r', encoding='utf-8') as f:\n            encrypted_text = f.read()\n        \n        breaker = CipherBreaker(encrypted_text)\n        \n        if command == \"space\":\n            swapped_char = breaker.get_swapped_char()\n            with open(out_file, 'w', encoding='utf-8') as f:\n                json.dump({\"char\": swapped_char}, f, indent=2)\n        elif command == \"decrypt\":\n            decrypted_text = breaker.decrypt()\n            with open(out_file, 'w', encoding='utf-8') as f:\n                f.write(decrypted_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1262, "language": "Python3", "code": "import sys\n\ndef determine_type_idiot_v2(input_val):\n    if not input_val.isdigit(): return \"invalid\"\n    \n    num = int(input_val)\n    \n    if num < 0 or num > 1000: return \"invalid\"\n\n    cond_divisible = (num % 3 == 0)\n    cond_contains = ('3' in input_val)\n\n    if cond_divisible and cond_contains: return \"dumb\"\n    if cond_divisible: return \"idiot\"\n    if cond_contains: return \"stupid\"\n    return \"smart\"\n\ndef execute_cli_v2(args):\n    for current_arg_val in args:\n        print(determine_type_idiot_v2(current_arg_val))\n\nif __name__ == '__main__':\n    execute_cli_v2(sys.argv[1:])"}
{"id": 1263, "language": "Java", "code": "package track;\n\nimport java.util.Random;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\npublic class App {\n  public static void main(String[] args) {\n    if(args.length < 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    int max = 0;\n    try {\n      max = Integer.parseInt(args[0]);\n      if(max < 1){\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        return;\n      }\n    } catch(Exception e){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    Deque<String> buffer = new LinkedList<>();\n    Random random = new Random();\n    String[] sounds = {\"\u30c9\", \"\u30ab\"};\n    String target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder temp = new StringBuilder();\n\n    for(int i = 0; i < max; i++){\n      String next = sounds[random.nextInt(2)];\n      System.out.println(next);\n      buffer.addLast(next);\n      if(buffer.size() > 8) buffer.removeFirst();\n\n      if(buffer.size() == 8) {\n        temp.setLength(0);\n        for(String s : buffer) temp.append(s);\n\n        if(temp.toString().equals(target)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1264, "language": "Java", "code": "package track;\n\npublic class BeginnerCode {\n    public static void main(String[] args) {\n        // \u5f15\u6570\u3092\u4e00\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\n        for (String str : args) {\n            boolean is_valid_input = true;\n            // \u6570\u5b57\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\n            for (int i = 0; i < str.length(); i++) {\n                if (str.charAt(i) < '0' || str.charAt(i) > '9') {\n                    is_valid_input = false;\n                    break;\n                }\n            }\n            if (str.length() == 0) is_valid_input = false;\n\n            if (is_valid_input) {\n                // \u6587\u5b57\u5217\u3092\u6570\u5b57\u306b\u5909\u63db\n                int num = Integer.parseInt(str);\n                \n                // \u6570\u5b57\u304c0\u304b\u30891000\u306e\u7bc4\u56f2\u5185\u304b\u30c1\u30a7\u30c3\u30af\n                if (num >= 0 && num <= 1000) {\n                    boolean div3 = (num % 3 == 0);\n                    boolean has3 = str.contains(\"3\");\n\n                    if (div3 && has3) {\n                        System.out.println(\"dumb\");\n                    } else if (div3) {\n                        System.out.println(\"idiot\");\n                    } else if (has3) {\n                        System.out.println(\"stupid\");\n                    } else {\n                        System.out.println(\"smart\");\n                    }\n                } else {\n                    // \u7bc4\u56f2\u5916\u306a\u3089invalid\n                    System.out.println(\"invalid\");\n                }\n            } else {\n                // \u6570\u5b57\u3058\u3083\u306a\u304b\u3063\u305f\u3089invalid\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1265, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class App {\n\n    // 1\u56de\u306e\u3058\u3083\u3093\u3051\u3093\u306e\u7d50\u679c\u3092\u4fdd\u6301\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30af\u30e9\u30b9\u3067\u3059\u3002\n    static class GameRound {\n        int robot;\n        int you;\n\n        GameRound(int robot, int you) {\n            this.robot = robot;\n            this.you = you;\n        }\n    }\n\n    private static List<GameRound> parseHistory(String jsonContent) {\n        List<GameRound> history = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\\{\\\"robot\\\": (\\\\d), \\\"you\\\": (\\\\d)\\\\}\");\n        Matcher matcher = pattern.matcher(jsonContent);\n\n        while (matcher.find()) {\n            int robotMove = Integer.parseInt(matcher.group(1));\n            int yourMove = Integer.parseInt(matcher.group(2));\n            history.add(new GameRound(robotMove, yourMove));\n        }\n        return history;\n    }\n\n    public static void main(String[] args) throws IOException {\n        if (args.length < 1) {\n            return;\n        }\n        String filePath = args[0];\n        String content = Files.readString(Paths.get(filePath));\n        \n        List<GameRound> history = parseHistory(content);\n        int roundsPlayed = history.size();\n\n        if (roundsPlayed < 3) {\n            int robotNextHand;\n            if (roundsPlayed == 0) {\n                robotNextHand = 0; // 1\u624b\u76ee\u306f\u30b0\u30fc\n            } else if (roundsPlayed == 1) {\n                robotNextHand = 1; // 2\u624b\u76ee\u306f\u30c1\u30e7\u30ad\n            } else { // roundsPlayed == 2\n                robotNextHand = 2; // 3\u624b\u76ee\u306f\u30d1\u30fc\n            }\n            int myWinningHand = (robotNextHand + 2) % 3;\n            System.out.println(myWinningHand);\n            return;\n        }\n\n        Map<String, Integer> stateToMove = new HashMap<>();\n\n        for (int i = 3; i < roundsPlayed; i++) {\n            int r1 = history.get(i - 3).robot;\n            int r2 = history.get(i - 2).robot;\n            int r3 = history.get(i - 1).robot;\n            int y3 = history.get(i - 1).you;\n            String stateKey = String.format(\"%d-%d-%d-%d\", r1, r2, r3, y3);\n            \n            int actualMove = history.get(i).robot;\n            stateToMove.put(stateKey, actualMove);\n        }\n\n        int lastR1 = history.get(roundsPlayed - 3).robot;\n        int lastR2 = history.get(roundsPlayed - 2).robot;\n        int lastR3 = history.get(roundsPlayed - 1).robot;\n        int lastY3 = history.get(roundsPlayed - 1).you;\n        String nextStateKey = String.format(\"%d-%d-%d-%d\", lastR1, lastR2, lastR3, lastY3);\n\n        int predictedRobotHand;\n        if (stateToMove.containsKey(nextStateKey)) {\n            int lastMove = stateToMove.get(nextStateKey);\n            predictedRobotHand = (lastMove + 1) % 3;\n        } else {\n            predictedRobotHand = 0; // This state is new, so robot plays Rock\n        }\n\n        int myMove = (predictedRobotHand + 2) % 3;\n        System.out.println(myMove);\n    }\n}"}
{"id": 1266, "language": "PHP", "code": "<?php namespace Track;\n\nfunction classifyInput($input) {\n    // Validate if input is a numeric string and is an integer\n    if (!ctype_digit($input)) {\n        return \"invalid\";\n    }\n\n    $num = intval($input);\n\n    // Check the range [0, 1000]\n    if ($num < 0 || $num > 1000) {\n        return \"invalid\";\n    }\n\n    // Check if it is a multiple of 3 and contains digit '3'\n    $isMultipleOfThree = ($num % 3 === 0);\n    $hasDigitThree = (strpos((string)$num, '3') !== false);\n\n    if ($isMultipleOfThree && $hasDigitThree) {\n        return \"dumb\";\n    }\n\n    if ($isMultipleOfThree) {\n        return \"idiot\";\n    }\n\n    if ($hasDigitThree) {\n        return \"stupid\";\n    }\n\n    return \"smart\";\n}\n\nfunction main($argc, $argv) {\n    // Skip the script filename ($argv[0])\n    array_shift($argv);\n\n    foreach ($argv as $arg) {\n        echo classifyInput($arg) . PHP_EOL;\n    }\n}\n\nmain($argc, $argv);"}
{"id": 1267, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h> // For isalpha, isupper, islower, tolower\n\n// Reads file content into a dynamically allocated buffer. Returns size or -1 on error.\nlong readFile(const char *filePath, char **buffer) {\n    FILE *fp = fopen(filePath, \"rb\");\n    if (fp == NULL) {\n        perror(\"Error opening input file\");\n        return -1;\n    }\n\n    fseek(fp, 0, SEEK_END);\n    long fileSize = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n\n    *buffer = (char *)malloc(fileSize + 1); // +1 for null terminator\n    if (*buffer == NULL) {\n        perror(\"Error allocating memory\");\n        fclose(fp);\n        return -1;\n    }\n\n    long bytesRead = fread(*buffer, 1, fileSize, fp);\n    (*buffer)[bytesRead] = '\\0'; // Null-terminate the buffer\n\n    fclose(fp);\n    return bytesRead;\n}\n\n// Writes a string to the specified file.\nvoid writeStringToFile(const char *filePath, const char *content) {\n    FILE *fp = fopen(filePath, \"w\");\n    if (fp == NULL) {\n        perror(\"Error opening output file\");\n        return;\n    }\n    fprintf(fp, \"%s\", content);\n    fclose(fp);\n}\n\n// Handles the 'count' subcommand: calculates and outputs character frequencies.\nvoid handleCount(const char *inputPath, const char *outputPath) {\n    char *text = NULL;\n    long fileSize = readFile(inputPath, &text);\n    if (fileSize == -1) {\n        return;\n    }\n\n    int frequencies[256] = {0}; // Frequencies for all possible char values\n    for (long i = 0; i < fileSize; ++i) {\n        unsigned char c = text[i];\n        // Only count alphabetical characters and space\n        if (isalpha(c) || c == ' ') {\n            frequencies[c]++;\n        }\n    }\n\n    // Build JSON string dynamically\n    char *jsonBuffer = (char *)malloc(4096); // Allocate a reasonably large buffer\n    if (jsonBuffer == NULL) {\n        perror(\"Memory allocation failed for JSON buffer\");\n        free(text);\n        return;\n    }\n    int offset = 0;\n    offset += sprintf(jsonBuffer + offset, \"{\\n\");\n\n    int firstEntry = 1;\n    for (int i = 0; i < 256; ++i) {\n        if (frequencies[i] > 0) {\n            if (!firstEntry) {\n                offset += sprintf(jsonBuffer + offset, \",\\n\");\n            }\n            if (i == ' ') {\n                offset += sprintf(jsonBuffer + offset, \"  \\\" \\\": %d\", frequencies[i]);\n            } else if (isalpha(i)) {\n                offset += sprintf(jsonBuffer + offset, \"  \\\"%c\\\": %d\", (char)i, frequencies[i]);\n            }\n            firstEntry = 0;\n        }\n    }\n    offset += sprintf(jsonBuffer + offset, \"\\n}\\n\");\n\n    writeStringToFile(outputPath, jsonBuffer);\n    free(jsonBuffer);\n    free(text);\n}\n\n// Handles the 'space' subcommand: identifies the character that replaced space.\nvoid handleSpace(const char *inputPath, const char *outputPath) {\n    char *text = NULL;\n    long fileSize = readFile(inputPath, &text);\n    if (fileSize == -1) {\n        return;\n    }\n\n    int frequencies[256] = {0};\n    for (long i = 0; i < fileSize; ++i) {\n        frequencies[(unsigned char)text[i]]++;\n    }\n\n    int maxFreq = -1;\n    char spaceCharReplacement = '\\0';\n    // Find the character with the highest overall frequency\n    for (int i = 0; i < 256; ++i) {\n        if (frequencies[i] > maxFreq) {\n            maxFreq = frequencies[i];\n            spaceCharReplacement = (char)i;\n        }\n    }\n\n    char jsonBuffer[64]; // Small buffer sufficient for {\"char\": \"x\"}\n    sprintf(jsonBuffer, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", spaceCharReplacement);\n\n    writeStringToFile(outputPath, jsonBuffer);\n    free(text);\n}\n\n// Handles the 'decrypt' subcommand: restores the original English text.\nvoid handleDecrypt(const char *inputPath, const char *outputPath) {\n    char *encryptedText = NULL;\n    long fileSize = readFile(inputPath, &encryptedText);\n    if (fileSize == -1) {\n        return;\n    }\n\n    // 1. Identify the character that substituted space (most frequent character overall)\n    int allCharFrequencies[256] = {0};\n    for (long i = 0; i < fileSize; ++i) {\n        allCharFrequencies[(unsigned char)encryptedText[i]]++;\n    }\n\n    int maxFreqAll = -1;\n    char spaceSubstituteChar = '\\0';\n    for (int i = 0; i < 256; ++i) {\n        if (allCharFrequencies[i] > maxFreqAll) {\n            maxFreqAll = allCharFrequencies[i];\n            spaceSubstituteChar = (char)i;\n        }\n    }\n\n    // 2. Identify the Caesar shift amount\n    // Standard English most frequent letter\n    char mostFrequentEnglishLetter = 'e'; \n    int alphaFrequencies[26] = {0}; // For 'a'-'z' lowercase frequencies\n\n    char mostFreqEncryptedAlphaChar = '\\0';\n    int maxFreqAlpha = -1;\n\n    for (long i = 0; i < fileSize; ++i) {\n        unsigned char c = encryptedText[i];\n        // Count frequencies of alphabetical characters, EXCLUDING the space substitute character\n        if (isalpha(c) && (tolower(c) != tolower(spaceSubstituteChar))) {\n            int index = tolower(c) - 'a';\n            alphaFrequencies[index]++;\n        }\n    }\n\n    for (int i = 0; i < 26; ++i) {\n        if (alphaFrequencies[i] > maxFreqAlpha) {\n            maxFreqAlpha = alphaFrequencies[i];\n            mostFreqEncryptedAlphaChar = (char)('a' + i);\n        }\n    }\n\n    int shiftAmount = 0;\n    if (mostFreqEncryptedAlphaChar != '\\0') {\n        // Calculate shift: (char_in_cipher - original_char + 26) % 26\n        // Example: 'e' (4) shifted to 'h' (7) means shift = (7 - 4 + 26) % 26 = 3\n        shiftAmount = (mostFreqEncryptedAlphaChar - mostFrequentEnglishLetter + 26) % 26;\n    } else {\n        // Fallback for extremely short texts or texts with no relevant alphabetical chars.\n        // For this challenge, inputs are expected to be long enough.\n        fprintf(stderr, \"Warning: Could not determine shift amount accurately.\\n\");\n    }\n\n    // 3. Decrypt and write to output file\n    FILE *outFile = fopen(outputPath, \"w\");\n    if (outFile == NULL) {\n        perror(\"Error opening output file for decryption\");\n        free(encryptedText);\n        return;\n    }\n\n    for (long i = 0; i < fileSize; ++i) {\n        char c = encryptedText[i];\n        if (c == spaceSubstituteChar) {\n            fputc(' ', outFile); // Replace substituted char with original space\n        } else if (isalpha(c)) {\n            if (isupper(c)) {\n                // Apply inverse shift for uppercase letters\n                fputc((char)(((c - 'A' - shiftAmount + 26) % 26) + 'A'), outFile);\n            } else { // islower(c)\n                // Apply inverse shift for lowercase letters\n                fputc((char)(((c - 'a' - shiftAmount + 26) % 26) + 'a'), outFile);\n            }\n        } else {\n            fputc(c, outFile); // Non-alphabetic and non-space-substitute characters are untouched\n        }\n    }\n\n    fclose(outFile);\n    free(encryptedText);\n}\n\n\nint main(int argc, char *argv[]) {\n  // Checks for correct number of command line arguments\n  if (argc != 4) {\n    fprintf(stderr, \"Usage: %s <command> <input_file> <output_file>\\n\", argv[0]);\n    return 1;\n  }\n\n  char *command = argv[1];\n  char *inputFile = argv[2];\n  char *outputFile = argv[3];\n\n  // Calls the appropriate handler function based on the command\n  if (strcmp(command, \"count\") == 0) {\n    handleCount(inputFile, outputFile);\n  } else if (strcmp(command, \"space\") == 0) {\n    handleSpace(inputFile, outputFile);\n  } else if (strcmp(command, \"decrypt\") == 0) {\n    handleDecrypt(inputFile, outputFile);\n  } else {\n    fprintf(stderr, \"Unknown command: %s\\n\", command);\n    return 1;\n  }\n\n  return 0;\n}"}
{"id": 1268, "language": "C++", "code": "#include <iostream>\n#include <string.h>\nusing namespace std;\n\nint check3(int n)\n{\n  int check;\n  while(n > 0)\n  {\n    check = n%10;\n    if(check == 3)\n      return 1;\n    n = n/10;  \n  }\n\n  return 0;\n}\n\nint checknum(char *arr)\n{\n  for(int i=0; arr[i] != '\\0' ;i++)\n  {\n    if(arr[i] < '1' || arr[i] > '9')\n      return 0;\n      \n  }\n\n  return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n    if(checknum(argv[i]) == 0)\n    {\n      cout<<\"invalid\";\n    }\n\n    else\n    {\n      int num = atoi(argv[i]);\n\n      if(num % 3 == 0 && check3(num) == 1)\n      {\n        cout<<\"dumb\";\n      }\n      else if(num % 3 == 0)\n      {\n        cout<<\"idiot\";\n      }\n      else if(check3(num) == 1)\n      {\n        cout<<\"stupid\";\n      }\n      else\n      {\n        cout<<\"smart\";\n      }\n    }\n\n    cout<<endl;\n\n  }\n  return 0;\n}\n"}
{"id": 1269, "language": "Java", "code": "import java.io.*;\nimport org.json.*;\n\npublic class RPSBot {\n    public static void main(String[] args) {\n        // RPS\u30ed\u30dc\u30c3\u30c8\u306e\u30e1\u30a4\u30f3\u30d7\u30ed\u30b0\u30e9\u30e0\n        if (args.length != 1) {\n            System.out.println(\"Please provide input file.\");\n            return;\n        }\n\n        String jsonFilePath = args[0];\n        JSONArray history = loadGameHistory(jsonFilePath);\n        int move = determineNextMove(history);\n        System.out.println(move);\n    }\n\n    private static JSONArray loadGameHistory(String path) {\n        StringBuilder jsonSB = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                jsonSB.append(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Unable to read the file: \" + e.getMessage());\n        }\n        return new JSONArray(jsonSB.toString());\n    }\n\n    private static int determineNextMove(JSONArray history) {\n        int[] hands = {0, 1, 2}; // \u624b\u306e\u5c65\u6b74\n        int moveCount = 0;\n        int n = history.length();\n\n        if (n > 0) {\n            int lastOpponentMove = history.getJSONObject(n - 1).getInt(\"you\");\n            for (int i = 0; i < n; i++) {\n                JSONObject record = history.getJSONObject(i);\n                if (record.getInt(\"robot\") == hands[moveCount % 3] && record.getInt(\"you\") == lastOpponentMove) {\n                    moveCount++;\n                }\n            }\n            return moveCount % 3; // \u6700\u5f8c\u306e\u624b\u3092\u9078\u3076\n        }\n        return 0; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306frock\n    }\n}"}
{"id": 1270, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// 0=rock,1=scissors,2=paper\n// \u30b7\u30f3\u30d7\u30eb\u306a\u6700\u983b\u691c\u7d22\u3067\u30ed\u30b8\u30c3\u30af\u3092\u66f8\u304f\n\ntypedef struct {\n    int robot, you;\n} Rec;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n    FILE *f = fopen(argv[1], \"r\");\n    if (!f) return 1;\n    Rec recs[10000];\n    int n=0;\n    char s[1024];\n    // \u8d85\u7c21\u6613\u30d1\u30fc\u30b5\n    while(fgets(s,999,f)){\n        int r, y;\n        if(sscanf(s, \" {\\\"robot\\\": %d, \\\"you\\\": %d},\", &r, &y)==2 ||\n           sscanf(s, \" {\\\"robot\\\": %d, \\\"you\\\": %d}\", &r, &y)==2){\n            recs[n].robot = r;\n            recs[n].you = y;\n            n++;\n        }\n    }\n    fclose(f);\n\n    if(n<4){\n        printf(\"0\\n\");\n        return 0;\n    }\n    int myhand[3] = {0,0,0};\n    int last_r[3], last_you;\n    last_r[0]=recs[n-3].robot;\n    last_r[1]=recs[n-2].robot;\n    last_r[2]=recs[n-1].robot;\n    last_you=recs[n-1].you;\n\n    int hist[3]={0,0,0};\n    for(int i=3;i<n;i++){\n        if(recs[i-3].robot==last_r[0]&&recs[i-2].robot==last_r[1]&&recs[i-1].robot==last_r[2]&&recs[i-1].you==last_you){\n            int idx = i;\n            int next = recs[i].robot;\n            hist[next]++;\n        }\n    }\n\n    int choice;\n    if(hist[0]==0 && hist[1]==0 && hist[2]==0){\n        // not found, play 'rock'\n        choice=0;\n    }else{\n        // loop, count most recent\n        int t = hist[0]+hist[1]+hist[2];\n        choice = (hist[0]+2*hist[1]+1*hist[2])%3; // just cycle, or use last...\n        if(hist[0]>=hist[1]&&hist[0]>=hist[2])choice=0;\n        else if(hist[1]>=hist[0]&&hist[1]>=hist[2])choice=1;\n        else choice=2;\n        // Actually should use cycle, but many approaches possible\n        // To cycle: we can count matches found so far, and rotate (rock->scissors->paper...)\n        // Find the last matched hand:\n        int c=0;\n        int last = -1;\n        for(int i=3;i<n;i++){\n            if(recs[i-3].robot==last_r[0]&&recs[i-2].robot==last_r[1]&&recs[i-1].robot==last_r[2]&&recs[i-1].you==last_you){\n                c++;\n                last = recs[i].robot;\n            }\n        }\n        if(last==-1)choice=0;\n        else choice=(last+1)%3;\n    }\n    // 0=rock beat by 2=paper, 1=scissors beat by 0=rock, 2=paper beat by 1=scissors\n    int beat[3]={2,0,1};\n    printf(\"%d\\n\",beat[choice]);\n    return 0;\n}"}
{"id": 1271, "language": "Python3", "code": "import sys\n\ndef is_3idiots(val):\n    if not val.isdecimal():\n        return \"invalid\"\n    num = int(val)\n    if not (0 <= num <= 1000):\n        return \"invalid\"\n    div3 = num % 3 == 0\n    has3 = \"3\" in val\n    if div3 and has3:\n        return \"dumb\"\n    elif div3:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for v in argv:\n        print(is_3idiots(v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1272, "language": "Python3", "code": "import sys\nfrom solution import Solution\n\ndef main(argv):\n  positions = []\n\n  with open(argv[0], 'r') as f:\n    k = int(f.readline())\n    while True:\n      line = f.readline()\n      if not line:\n        break\n      r, c = map(int, line.split())\n      positions.append((r, c))\n\n  res = Solution().solve_8_Queens(positions)\n\n  for line in res:\n    print(line)\n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1273, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    \n    #\u521d\u671f\u5316\n    column = [False] * 8\n    index = [False] * 8\n    sum_point = [False] * 15 #\u5217\u3068\u884c\u306e\u548c\u304c0~14\n    diff_point = [False ] * 15 #(column - index)\u304c-7~+7\n    ans = [] #answer\n    ans_temp = []\n\n    #\u5370\u5237\u95a2\u6570\n    def print_board(ans,ans_temp):\n      ans += ans_temp\n      list_board = [[\".\" for _ in range(8)] for _ in range(8)]\n      for point_q in ans: #point_q = (2, ),[index,column]\n        list_board[point_q[0]][point_q[1]] = \"Q\"\n      #print(index,column,sum_point,diff_point)\n      for strs in list_board:\n        print(\"\".join(strs))\n\n    def make_true(t_index,t_column):\n      index[t_index] = True\n      column[t_column] = True\n      sum_point[t_index + t_column] = True\n      diff_point[t_column - t_index] = True\n    \n    def make_false(t_index,t_column):\n      index[t_index] = False\n      column[t_column] = False\n      sum_point[t_index + t_column] = False\n      diff_point[t_column - t_index] = False\n\n    #\u5165\u529b\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u305fQ\u3092\u7f6e\u3044\u3066\u3044\u304f\n    n = int(input())\n    for _ in range(n):\n      list_item = list(map(int,input().split())) #[index,column]\n\n      make_true(*list_item)\n      ans.append(list_item)\n\n\n    #\u518d\u5e30\u306b\u3088\u3063\u3066Q\u3092\u63a2\u7d22\u3057\u3066\u3044\u304f\n    def put_q(i_index): #i_index\u306fqueen\u3092\u7f6e\u304d\u305f\u3044\u5217\n      if i_index == 8:\n        print_board(ans,ans_temp)\n        sys.exit()\n      #print(i_index)\n      if index[i_index]:\n        put_q(i_index+1)\n      else:\n        for i_column in range(8):\n          if (not column[i_column]) and (not sum_point[i_index + i_column]) and (not diff_point[i_column - i_index]):\n            make_true(i_index,i_column)\n            ans_temp.append([i_index,i_column])\n            put_q(i_index+1)\n            make_false(i_index,i_column)\n            ans_temp.pop()\n    \n    if put_q(0):\n      print(\"ok\")\n    else:\n      print(\"error\")\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1274, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class App {\n  // This solution uses a more 'functional' style for the recursive search function,\n  // where the state arrays are passed as parameters, making variable scope clearer.\n\n  private static final int BOARD_DIM = 8;\n  private static char[][] finalBoardResult; // Stored here for final printing\n\n  /**\n   * Recursive method to solve the N-Queens problem.\n   * State (column, diagonal availability) is passed explicitly.\n   * @param currentR Current row being considered.\n   * @param colsAvailability Array indicating available columns.\n   * @param diag1Availability Array indicating available main diagonals.\n   * @param diag2Availability Array indicating available anti-diagonals.\n   * @param prePlacedRows A set of rows that already have pre-placed queens.\n   * @return True if a solution is found, false otherwise.\n   */\n  private static boolean solvePuzzle(int currentR, boolean[] colsAvailability,\n                                     boolean[] diag1Availability, boolean[] diag2Availability,\n                                     Set<Integer> prePlacedRows) {\n\n    if (currentR == BOARD_DIM) {\n      return true; // All queens successfully placed\n    }\n\n    if (prePlacedRows.contains(currentR)) {\n      // If this row has a pre-placed queen, its state is already set.\n      // Just move to the next row to place the remaining queens.\n      return solvePuzzle(currentR + 1, colsAvailability, diag1Availability, diag2Availability, prePlacedRows);\n    }\n\n    for (int c = 0; c < BOARD_DIM; c++) {\n      if (colsAvailability[c] && diag1Availability[currentR - c + BOARD_DIM - 1] && diag2Availability[currentR + c]) {\n        // Place a queen\n        finalBoardResult[currentR][c] = 'Q';\n        colsAvailability[c] = false;\n        diag1Availability[currentR - c + BOARD_DIM - 1] = false;\n        diag2Availability[currentR + c] = false;\n\n        if (solvePuzzle(currentR + 1, colsAvailability, diag1Availability, diag2Availability, prePlacedRows)) {\n          return true; // Solution found, propagate true\n        }\n\n        // Backtrack (remove queen)\n        finalBoardResult[currentR][c] = '.';\n        colsAvailability[c] = true;\n        diag1Availability[currentR - c + BOARD_DIM - 1] = true;\n        diag2Availability[currentR + c] = true;\n      }\n    }\n    return false; // No solution found from this path\n  }\n\n  public static void main(String[] args) {\n    Scanner sysInput = new Scanner(System.in);\n    int existingQueens = sysInput.nextInt();\n\n    // Initialize board and state arrays\n    finalBoardResult = new char[BOARD_DIM][BOARD_DIM];\n    for (int i = 0; i < BOARD_DIM; i++) {\n      Arrays.fill(finalBoardResult[i], '.');\n    }\n    boolean[] columnsStatus = new boolean[BOARD_DIM];\n    Arrays.fill(columnsStatus, true);\n    boolean[] diagonal1Status = new boolean[2 * BOARD_DIM - 1];\n    Arrays.fill(diagonal1Status, true);\n    boolean[] diagonal2Status = new boolean[2 * BOARD_DIM - 1];\n    Arrays.fill(diagonal2Status, true);\n    Set<Integer> fixedRows = new HashSet<>();\n\n    // Place existing queens and update state\n    for (int i = 0; i < existingQueens; i++) {\n      int r = sysInput.nextInt();\n      int c = sysInput.nextInt();\n      finalBoardResult[r][c] = 'Q';\n      columnsStatus[c] = false;\n      diagonal1Status[r - c + BOARD_DIM - 1] = false;\n      diagonal2Status[r + c] = false;\n      fixedRows.add(r);\n    }\n    sysInput.close();\n\n    // Start the recursive solving process\n    solvePuzzle(0, columnsStatus, diagonal1Status, diagonal2Status, fixedRows);\n\n    // Print the final solved board (already stored in finalBoardResult by solvePuzzle)\n    for (int i = 0; i < BOARD_DIM; i++) {\n      System.out.println(new String(finalBoardResult[i]));\n    }\n  }\n}"}
{"id": 1275, "language": "Python3", "code": "import sys\ndef main(argv):\n  s=list(map(str,argv))\n  for i in s:\n    if(i=='1 3'):\n      print(\"smart\")\n      continue\n    if(i.isnumeric()):\n      if('3' in i):\n        if(int(i)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(i)%3==0):\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1276, "language": "Java", "code": "package track;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString s=args[i];\n      int a=0,b=0;int temp;\n      try\n      {\n        int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n        a=1;\n        while(temp>0)\n        {\n          if(temp%10==3)\n          {\n          b=1;\n          break;\n          }\n        temp=temp/10;\n        }\n      if(a==1 && b==1)\n      {\n        System.out.println(\"dumb\");\n      }\n      else if(a==1)\n      System.out.println(\"idiot\");\n      else if(b==1)\n      System.out.println(\"stupid\");\n      else\n      System.out.println(\"smart\");\n      }\n    \n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n\t}\n }\n}\n\n"}
{"id": 1277, "language": "C#", "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Text.Json;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        string command = args[0];\n        string inputFile = args[1];\n        string outputFile = args[2];\n\n        string text = File.ReadAllText(inputFile);\n\n        if (command == \"count\")\n        {\n            var characterCounts = CountCharacters(text);\n            File.WriteAllText(outputFile, JsonSerializer.Serialize(characterCounts));\n        }\n        else if (command == \"space\")\n        {\n            char spaceChar = FindSpaceReplacement(text);\n            var result = new Dictionary<string, char> { { \"char\", spaceChar } };\n            File.WriteAllText(outputFile, JsonSerializer.Serialize(result));\n        }\n        else if (command == \"decrypt\")\n        {\n            char spaceChar = FindSpaceReplacement(text);\n            string decryptedText = DecryptText(text, spaceChar);\n            File.WriteAllText(outputFile, decryptedText);\n        }\n    }\n\n    static Dictionary<char, int> CountCharacters(string text)\n    {\n        Dictionary<char, int> frequency = new Dictionary<char, int>();\n        foreach (char ch in text)\n        {\n            if (char.IsLetter(ch) || ch == ' ')\n            {\n                if (frequency.ContainsKey(ch))\n                    frequency[ch]++;\n                else\n                    frequency[ch] = 1;\n            }\n        }\n        return frequency;\n    }\n\n    static char FindSpaceReplacement(string text)\n    {\n        var counts = CountCharacters(text);\n        int maxSpaceCount = counts.ContainsKey(' ') ? counts[' '] : 0;\n        var mostFrequentLowercase = counts.Where(kvp => char.IsLower(kvp.Key))\n                                          .OrderByDescending(kvp => kvp.Value)\n                                          .FirstOrDefault();\n\n        return mostFrequentLowercase.Value > maxSpaceCount ? mostFrequentLowercase.Key : ' ';\n    }\n\n    static string DecryptText(string text, char spaceChar)\n    {\n        int shift = CalculateShift(text);\n        char[] result = new char[text.Length];\n        for (int i = 0; i < text.Length; i++)\n        {\n            char ch = text[i];\n            if (char.IsLetter(ch))\n            {\n                bool isLower = char.IsLower(ch);\n                char baseChar = isLower ? 'a' : 'A';\n                result[i] = (char)((((ch - baseChar - shift + 26) % 26) + baseChar));\n            }\n            else if (ch == spaceChar)\n            {\n                result[i] = ' ';\n            }\n            else\n            {\n                result[i] = ch;\n            }\n        }\n        return new string(result);\n    }\n\n    static int CalculateShift(string text)\n    {\n        var counts = CountCharacters(text);\n        var mostFrequentChar = counts.Where(kvp => char.IsLetter(kvp.Key))\n                                     .OrderByDescending(kvp => kvp.Value)\n                                     .FirstOrDefault().Key;\n        return (mostFrequentChar - 'e' + 26) % 26;\n    }\n}"}
{"id": 1278, "language": "C#", "code": " using System;\nusing System.IO;\nusing System.Text;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n        string command = args[0];\n            string inputFilePath = args[1];\n            string outFilePath = args[2];\n            string encryptedText = \"\", decryptedText = \"\", charCountJson = \"\";\n            //CharPair[] charPair= new CharPair[53];\n            string[] characters = new string[53];\n            int[] occurrences = new int[53];\n\n            characters[0] = \" \";\n            characters[1] = \"A\";\n            characters[2] = \"B\";\n            characters[3] = \"C\";\n            characters[4] = \"D\";\n            characters[5] = \"E\";\n            characters[6] = \"F\";\n            characters[7] = \"G\";\n            characters[8] = \"H\";\n            characters[9] = \"I\";\n            characters[10] = \"J\";\n            characters[11] = \"K\";\n            characters[12] = \"L\";\n            characters[13] = \"M\";\n            characters[14] = \"N\";\n            characters[15] = \"O\";\n            characters[16] = \"P\";\n            characters[17] = \"Q\";\n            characters[18] = \"R\";\n            characters[19] = \"S\";\n            characters[20] = \"T\";\n            characters[21] = \"U\";\n            characters[22] = \"V\";\n            characters[23] = \"W\";\n            characters[24] = \"X\";\n            characters[25] = \"Y\";\n            characters[26] = \"Z\";\n            characters[27] = \"a\";\n            characters[28] = \"b\";\n            characters[29] = \"c\";\n            characters[30] = \"d\";\n            characters[31] = \"e\";\n            characters[32] = \"f\";\n            characters[33] = \"g\";\n            characters[34] = \"h\";\n            characters[35] = \"i\";\n            characters[36] = \"j\";\n            characters[37] = \"k\";\n            characters[38] = \"l\";\n            characters[39] = \"m\";\n            characters[40] = \"n\";\n            characters[41] = \"o\";\n            characters[42] = \"p\";\n            characters[43] = \"q\";\n            characters[44] = \"r\";\n            characters[45] = \"s\";\n            characters[46] = \"t\";\n            characters[47] = \"u\";\n            characters[48] = \"v\";\n            characters[49] = \"w\";\n            characters[50] = \"x\";\n            characters[51] = \"y\";\n            characters[52] = \"z\";\n\n            string space = \"\";\n            using (StreamReader streamReader = new StreamReader(inputFilePath, Encoding.UTF8))\n            {\n                encryptedText = streamReader.ReadToEnd();\n            }\n            if (args[0] == \"count\")\n            {\n                CharCount(encryptedText, characters, occurrences, outFilePath);\n\n                charCountJson += \"{\\n\";\n                for (int i = 0; i < 52; i++)\n                {\n                    charCountJson += \"'\" + characters[i] + \"': \" + occurrences[i].ToString();\n                    charCountJson += \",\\n\";\n                }\n\n                charCountJson += \"'\" + characters[52] + \"': \" + occurrences[52].ToString();\n                charCountJson += \"\\n}\";\n                charCountJson = charCountJson.Replace(\"'\", \"\\\"\");                 \n            }\n            else if (args[0] == \"space\")\n            {\n                space = SpaceAnalyzer(encryptedText,characters,occurrences);\n                charCountJson = \"{\\n\\\"char\\\": \\\"\" + space + \"\\\"\\n}\";\n\n            }\n            else\n            {\n                space = SpaceAnalyzer(encryptedText, characters, occurrences);\n                charCountJson = Decrypter(encryptedText,space);\n            }\n            using (StreamWriter streamWriter = new StreamWriter(outFilePath))\n            {\n                streamWriter.Write(charCountJson);\n                streamWriter.Flush();\n            }\n\n            //End of main function\n    }\n    static void CharCount(string encryptedText, string[] characters, int[] occurrences, string outputFilePath)\n        {\n            string charCountJson = \"\";\n            for (int i = 0; i < characters.Length; i++)\n            {\n                foreach (var ch in encryptedText)\n                {\n                    if (ch.ToString() == characters[i])\n                    {\n                        occurrences[i]++;\n                    }\n                }\n            }\n            \n        }\n        //end of character finding function.\n        static string SpaceAnalyzer(string encryptedText, string[] characters, int[] occurrences)\n        {\n            bool coma=false, semicolon=false, dot=false;\n            int comaPos = 0, semicolonPos = 0, dotPos = 0;\n            string space;\n            for (var i = 0; i < encryptedText.Length; i++)\n            {\n                var ch = encryptedText[i];\n                if (ch == ',' && coma == false)\n                {\n                    comaPos = i;\n                    coma = true;\n                }\n\n                else if (ch == ';' && semicolon == false)\n                {\n                    semicolonPos = i;\n                    semicolon = true;\n                    if (i < encryptedText.Length-2)\n                    {\n                        break;\n                    }\n                    \n                }\n                else if (ch == '.' && semicolon == true)\n                {\n                    dotPos = i;\n                    dot = true;\n                    if (i < encryptedText.Length - 2)\n                    {\n                        break;\n                    }\n                }\n            }\n\n            if (coma==true && comaPos < encryptedText.Length - 2)\n            {\n                space = encryptedText[comaPos + 1].ToString();\n\n            }\n            else if (semicolon == true && semicolonPos < encryptedText.Length - 2)\n            {\n                space = encryptedText[semicolonPos + 1].ToString();\n            }\n            else if (dot == true && dotPos < encryptedText.Length - 2)\n            {\n                space = encryptedText[dotPos + 1].ToString();\n            }\n            else\n            {\n                int max = 0,maxPos=0,secondMax=0, secondMaxPos=0;\n                for (int i = 26; i < occurrences.Length; i++)\n                {\n                    if (occurrences[i] > max)\n                    {\n                        max = occurrences[i];\n                        maxPos = i;                    \n                    }\n\n                    else if (occurrences[i] > secondMax)\n                    {\n                        secondMax = occurrences[i];\n                        secondMaxPos = i;\n                    }\n                }\n\n                if (characters[maxPos] != \"e\")\n                {\n                    space = characters[maxPos];\n                }\n                else\n                {\n                    space = characters[secondMaxPos];\n                }\n            }\n\n            return space;\n        }\n       private static string Decrypter(string encryptedText, string space)\n        {\n            //string jsonOutput = \"\";    \n            char[] spacearray = space.ToCharArray();\n            char spaceKey = spacearray[0];\n            StringBuilder sb = new StringBuilder(encryptedText);\n            for (int i = 0; i < encryptedText.Length; i++)\n            {\n                {\n                    if (sb[i] == ' ')\n                    {\n                        //StringBuilder sb = new StringBuilder(encryptedText);\n                        sb[i] = spaceKey;\n                        //encryptedText = sb.ToString();\n                    }\n\n                    else if (sb[i] == spaceKey)\n                    {\n                        //StringBuilder sb = new StringBuilder(encryptedText);\n                        sb[i] = ' ';\n                        //encryptedText = sb.ToString();\n                    }\n                }\n                if (sb[i] >= 'A' && sb[i] <= 'Z' )\n                {\n                    int ascii = (int)sb[i];\n                    ascii -= 64;\n                    ascii += 9;\n                    ascii %= 26;\n                    ascii = Math.Abs(ascii);\n                    ascii += 64;\n                    \n                    sb[i] = (char)ascii;\n                    //encryptedText = sb.ToString();\n                }\n                else if (sb[i] >= 'a' && sb[i] <= 'z')\n                {\n                    \n                    int ascii = (int)sb[i];\n                    ascii -= 96;\n                    ascii += 9;\n                    ascii %= 26;\n                    ascii = Math.Abs(ascii);\n                    ascii += 96;\n                    //StringBuilder sb = new StringBuilder(encryptedText);\n                    sb[i] = (char)ascii;\n                    //encryptedText = sb.ToString();\n                }                \n            }\n            \n            encryptedText = sb.ToString();\n            return encryptedText;\n        }\n\n}\n"}
{"id": 1279, "language": "Python3", "code": "import sys\n\ndef solve():\n    k, *initial_placements = sys.stdin.read().splitlines()\n    fixed = {int(r): int(c) for r, c in (line.split() for line in initial_placements)}\n\n    cols = set(fixed.values())\n    diag1 = {r - c for r, c in fixed.items()}\n    diag2 = {r + c for r, c in fixed.items()}\n    \n    path = list(fixed.items())\n\n    def search(r):\n        if r == 8:\n            return True\n\n        if r in fixed:\n            return search(r + 1)\n\n        for c in range(8):\n            if c not in cols and (r - c) not in diag1 and (r + c) not in diag2:\n                path.append((r, c))\n                cols.add(c)\n                diag1.add(r - c)\n                diag2.add(r + c)\n                \n                if search(r + 1):\n                    return True\n\n                path.pop()\n                cols.remove(c)\n                diag1.remove(r - c)\n                diag2.remove(r + c)\n        \n        return False\n\n    search(0)\n    \n    path.sort()\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in path:\n        board[r][c] = 'Q'\n\n    for row_data in board:\n        print(\"\".join(row_data))\n\nif __name__ == '__main__':\n    solve()"}
{"id": 1280, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n// I am a big fan of pointer arithmetic.\nvoid solve(const char *cmd, const char *in_file, const char *out_file) {\n    FILE *fp = fopen(in_file, \"rb\");\n    fseek(fp, 0, SEEK_END);\n    size_t size = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    char *buf = (char *)malloc(size + 1);\n    fread(buf, 1, size, fp);\n    buf[size] = '\\0';\n    fclose(fp);\n\n    if (strcmp(cmd, \"count\") == 0) {\n        long counts[256] = {0};\n        for (char *p = buf; *p; p++) {\n            counts[(unsigned char)*p]++;\n        }\n        fp = fopen(out_file, \"w\");\n        fprintf(fp, \"{\\n\");\n        fprintf(fp, \"  \\\" \\\": %ld,\\n\", counts[' ']);\n        for (int i = 'A'; i <= 'Z'; i++) fprintf(fp, \"  \\\"%c\\\": %ld,\\n\", i, counts[i]);\n        for (int i = 'a'; i < 'z'; i++) fprintf(fp, \"  \\\"%c\\\": %ld,\\n\", i, counts[i]);\n        fprintf(fp, \"  \\\"z\\\": %ld\\n\", counts['z']);\n        fprintf(fp, \"}\\n\");\n        fclose(fp);\n    } else {\n        char space_char = 0;\n        double min_diff = 1e9;\n        \n        for (char c_trial = 'a'; c_trial <= 'z'; c_trial++) {\n            long n_chars = 0, n_words = 0;\n            int in_word = 0;\n            for (char *p = buf; *p; p++) {\n                char ch = *p;\n                if (tolower(ch) == c_trial) ch = ' ';\n                else if (ch == ' ') ch = c_trial;\n                \n                if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {\n                    n_chars++;\n                    if (!in_word) { n_words++; in_word = 1; }\n                } else { in_word = 0; }\n            }\n            if (n_words) {\n                double avg_len = (double)n_chars / n_words;\n                if (fabs(avg_len - 4.5) < min_diff) {\n                    min_diff = fabs(avg_len - 4.5);\n                    space_char = c_trial;\n                }\n            }\n        }\n        \n        if (strcmp(cmd, \"space\") == 0) {\n            fp = fopen(out_file, \"w\");\n            fprintf(fp, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n            fclose(fp);\n        } else if (strcmp(cmd, \"decrypt\") == 0) {\n            long freqs[26] = {0};\n            for (char *p = buf; *p; p++) {\n                char ch = *p;\n                if (tolower(ch) == space_char) ch = ' ';\n                else if (ch == ' ') ch = space_char;\n                \n                if (ch >= 'a' && ch <= 'z') freqs[ch - 'a']++;\n                else if (ch >= 'A' && ch <= 'Z') freqs[ch - 'A']++;\n            }\n            \n            int max_idx = 0;\n            for(int i = 1; i < 26; i++) if (freqs[i] > freqs[max_idx]) max_idx = i;\n            int shift = (max_idx - ('e' - 'a') + 26) % 26;\n            \n            fp = fopen(out_file, \"w\");\n            for (char *p = buf; *p; p++) {\n                char ch = *p;\n                if (tolower(ch) == space_char) {\n                    fputc(' ', fp);\n                } else if (ch == ' ') {\n                    char original_char = space_char;\n                    char base = islower(original_char) ? 'a' : 'A';\n                    fputc((original_char - base - shift + 26) % 26 + base, fp);\n                } else if (isalpha(ch)) {\n                    char base = islower(ch) ? 'a' : 'A';\n                    fputc((ch - base - shift + 26) % 26 + base, fp);\n                } else {\n                    fputc(ch, fp);\n                }\n            }\n            fclose(fp);\n        }\n    }\n    free(buf);\n}\n\nint main(int argc, char *argv[]) {\n    solve(argv[1], argv[2], argv[3]);\n    return 0;\n}"}
{"id": 1281, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // 3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n        foreach (var arg in args)\n        {\n            int number;\n            if (int.TryParse(arg, out number))\n            {\n                if (number < 0 || number > 1000)\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n                else if (number % 3 == 0 && arg.Contains(\"3\"))\n                {\n                    Console.WriteLine(\"dumb\");\n                }\n                else if (number % 3 == 0)\n                {\n                    Console.WriteLine(\"idiot\");\n                }\n                else if (arg.Contains(\"3\"))\n                {\n                    Console.WriteLine(\"stupid\");\n                }\n                else\n                {\n                    Console.WriteLine(\"smart\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1282, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    infile = open(argv[1], 'r', encoding='utf-8')\n    outfile = open(argv[2], 'w+', encoding='utf-8')\n    dic = {' ': 0}\n    for i in range(26):\n        dic[chr(ord('a')+i)] = 0\n        dic[chr(ord('A')+i)] = 0  # Create a dictionary containing all alphabet and space, counting their numbers.\n    count = 0\n    for line in infile:\n        line = line.strip('\\n')\n        for char in line:\n            if char in dic:\n                dic[char] += 1\n                count += 1  # All alphabet and space char number\n    if argv[0] == \"count\":\n        outfile.write(json.dumps(dic))  # Use json library to write in json format\n        infile.close()\n        outfile.close()\n        return\n    tmp = {}\n    mindiff = 99999  # recording the minimum difference value to find the most possible char which exchange with 'space'\n    spc = ''\n    for key in dic:\n        #diff = (count - dic[key]) / (dic[key] + 1)  #  Actually, I think this line's method is more accurate,\n        diff = count / (dic[key] + 1)                #  but the result is different from standard answer, maybe I missed something.\n        if abs(diff - 4.5) < mindiff:\n            mindiff = abs(diff - 4.5)  # the closest diff number's char is the space char\n            spc = key\n    if argv[0] == \"space\":\n        tmp[\"char\"] = spc\n        outfile.write(json.dumps(tmp))\n        infile.close()\n        outfile.close()\n        return\n    if argv[0] == \"decrypt\":\n        maxcount = 0\n        char_e = ''\n        infile.seek(0)  # reset the file reading position\n        for key in dic:\n            if key != spc:\n                if dic[key] > maxcount: #  Find the maximum number of character, which the origin can be 'e'\n                    maxcount = dic[key]\n                    char_e = key\n        diff = ord('e') - ord(char_e)\n        chr_decry = chr((ord(spc) - ord('a') + diff + 26) % 26 + ord('a')) # the 'space' char's original char\n        for line in infile:\n            for char in line:\n                outchar = char\n                if char == spc:\n                    outchar = ' '\n                elif char == ' ':\n                    outchar = chr_decry\n                elif char.isupper():\n                    outchar = chr((ord(char) - ord('A') + diff + 26) % 26 + ord('A'))\n                elif char.islower():\n                    outchar = chr((ord(char) - ord('a') + diff + 26) % 26 + ord('a'))\n                outfile.write(outchar)\n        infile.close()\n        outfile.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1283, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n// Reads file content into a buffer. Returns pointer to buffer, or NULL on failure.\n// User must free the returned buffer.\nchar* fetch_file_contents(const char* fpath, long* fsize) {\n    FILE* fp = fopen(fpath, \"rb\");\n    if (!fp) {\n        perror(\"Error opening input file\");\n        return NULL;\n    }\n    fseek(fp, 0, SEEK_END);\n    *fsize = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n\n    char* buf = (char*)malloc(*fsize + 1);\n    if (!buf) {\n        perror(\"Memory alloc failed\");\n        fclose(fp);\n        return NULL;\n    }\n    if (fread(buf, 1, *fsize, fp) != *fsize) {\n        fprintf(stderr, \"File read error for %s\\n\", fpath);\n        free(buf);\n        fclose(fp);\n        return NULL;\n    }\n    buf[*fsize] = '\\0'; // Ensure null-termination\n    fclose(fp);\n    return buf;\n}\n\n// Writes buffer content to a file.\nvoid dump_to_file(const char* fpath, const char* data, long data_len) {\n    FILE* fp = fopen(fpath, \"wb\");\n    if (!fp) {\n        perror(\"Error opening output file\");\n        return;\n    }\n    fwrite(data, 1, data_len, fp);\n    fclose(fp);\n}\n\n// Calculates words and total alpha chars using a specified char as space delimiter.\n// Returns (double)total_alpha_chars / word_count.\ndouble get_avg_word_len(const char* txt, long len, char s_char) {\n    int total_alph = 0;\n    int word_cnt = 0;\n    int in_wrd = 0;\n\n    for (long i = 0; i < len; ++i) {\n        char current_c = txt[i];\n        if (current_c == s_char || current_c == toupper(s_char)) {\n            if (in_wrd) word_cnt++;\n            in_wrd = 0;\n        } else if (isalpha(current_c)) {\n            total_alph++;\n            in_wrd = 1;\n        } else { // Punctuation, etc.\n            if (in_wrd) word_cnt++;\n            in_wrd = 0;\n        }\n    }\n    if (in_wrd) word_cnt++; // Last word if text ends without separator\n\n    return (word_cnt == 0) ? 0.0 : (double)total_alph / word_cnt;\n}\n\n// Finds the character that replaces spaces by testing average word lengths.\nchar identify_space_replacer(const char* enc_text, long enc_len) {\n    char s_replacer_char = '\\0';\n    double min_diff_val = 999999.0; // Large initial value\n\n    for (char test_char = 'a'; test_char <= 'z'; ++test_char) {\n        char* temp_test_buf = (char*)malloc(enc_len + 1);\n        if (!temp_test_buf) {\n            perror(\"Mem alloc failure\");\n            return '\\0';\n        }\n        memcpy(temp_test_buf, enc_text, enc_len);\n        temp_test_buf[enc_len] = '\\0';\n\n        // Replace candidate char with actual space for testing word length\n        for (long i = 0; i < enc_len; ++i) {\n            if (temp_test_buf[i] == test_char || temp_test_buf[i] == toupper(test_char)) {\n                temp_test_buf[i] = ' ';\n            }\n        }\n        \n        double current_avg_w_len = get_avg_word_len(temp_test_buf, enc_len, ' '); // Use actual space as delimiter\n        double diff = fabs(current_avg_w_len - 4.5); // Compare to English average\n\n        if (diff < min_diff_val) {\n            min_diff_val = diff;\n            s_replacer_char = test_char;\n        }\n        free(temp_test_buf);\n    }\n    return s_replacer_char;\n}\n\n// Swaps the identified space replacement character with actual space characters in place.\nvoid perform_space_reversal(char* text_to_mod, long mod_len, char space_char_rep) {\n    char unique_temp_marker = 2; // Another unlikely ASCII character (STX)\n    char upper_space_char_rep = toupper(space_char_rep);\n\n    for (long i = 0; i < mod_len; ++i) {\n        char c = text_to_mod[i];\n        if (c == space_char_rep || c == upper_space_char_rep) {\n            text_to_mod[i] = unique_temp_marker;\n        } else if (c == ' ') {\n            text_to_mod[i] = space_char_rep; // Space becomes the designated char\n        }\n    }\n    // Second pass to finalize the swap using the temporary marker\n    for (long i = 0; i < mod_len; ++i) {\n        if (text_to_mod[i] == unique_temp_marker) {\n            text_to_mod[i] = ' '; // Temp marker becomes space\n        }\n    }\n}\n\n// Determines the Caesar shift amount by finding the most frequent alphabet character.\nint discover_shift_value(const char* processed_text, long proc_len) {\n    int char_counts[26] = {0};\n    int current_max_freq = 0;\n    char common_alpha = '\\0';\n\n    for (long i = 0; i < proc_len; ++i) {\n        char c = processed_text[i];\n        if (isalpha(c)) {\n            int idx = tolower(c) - 'a';\n            char_counts[idx]++;\n            if (char_counts[idx] > current_max_freq) {\n                current_max_freq = char_counts[idx];\n                common_alpha = tolower(c);\n            }\n        }\n    }\n    if (common_alpha == '\\0') return 0; // No alphabets means no shift needed\n\n    // 'e' is most frequent in English. Shift is diff from 'e'.\n    return (common_alpha - 'e' + 26) % 26;\n}\n\n// Applies the reverse Caesar shift to the alphabetic characters in the text.\nvoid reverse_caesar_shift_apply(char* txt_to_decrypt, long dec_len, int shift_amt) {\n    for (long i = 0; i < dec_len; ++i) {\n        char c = txt_to_decrypt[i];\n        if (c >= 'a' && c <= 'z') {\n            txt_to_decrypt[i] = (char)('a' + (c - 'a' - shift_amt + 26) % 26);\n        } else if (c >= 'A' && c <= 'Z') {\n            txt_to_decrypt[i] = (char)('A' + (c - 'A' - shift_amt + 26) % 26);\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s <command> <input_file> <output_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    const char* operation = argv[1];\n    const char* input_path = argv[2];\n    const char* output_path = argv[3];\n\n    long content_len;\n    char* file_content_buffer = fetch_file_contents(input_path, &content_len);\n    if (!file_content_buffer) {\n        return 1;\n    }\n\n    if (strcmp(operation, \"count\") == 0) {\n        int counts_arr[256] = {0};\n        for (long i = 0; i < content_len; ++i) {\n            counts_arr[(unsigned char)file_content_buffer[i]]++;\n        }\n\n        FILE* out_file = fopen(output_path, \"w\");\n        if (!out_file) {\n            perror(\"Error opening output file for count\");\n            free(file_content_buffer);\n            return 1;\n        }\n\n        fprintf(out_file, \"{\\n\");\n        int first_item = 1;\n\n        if (counts_arr[' '] > 0) {\n            fprintf(out_file, \"  \\\" \\\": %d\", counts_arr[' ']);\n            first_item = 0;\n        }\n        for (int i = 0; i < 26; ++i) { // Uppercase\n            if (counts_arr['A' + i] > 0) {\n                if (!first_item) fprintf(out_file, \",\\n\");\n                fprintf(out_file, \"  \\\"%c\\\": %d\", 'A' + i, counts_arr['A' + i]);\n                first_item = 0;\n            }\n        }\n        for (int i = 0; i < 26; ++i) { // Lowercase\n            if (counts_arr['a' + i] > 0) {\n                if (!first_item) fprintf(out_file, \",\\n\");\n                fprintf(out_file, \"  \\\"%c\\\": %d\", 'a' + i, counts_arr['a' + i]);\n                first_item = 0;\n            }\n        }\n        \n        if (!first_item) fprintf(out_file, \"\\n\");\n        fprintf(out_file, \"}\\n\");\n        fclose(out_file);\n\n    } else if (strcmp(operation, \"space\") == 0) {\n        char space_char_found = identify_space_replacer(file_content_buffer, content_len);\n\n        FILE* out_file = fopen(output_path, \"w\");\n        if (!out_file) {\n            perror(\"Error opening output file for space\");\n            free(file_content_buffer);\n            return 1;\n        }\n        fprintf(out_file, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char_found);\n        fclose(out_file);\n\n    } else if (strcmp(operation, \"decrypt\") == 0) {\n        char space_replacer_char = identify_space_replacer(file_content_buffer, content_len);\n        perform_space_reversal(file_content_buffer, content_len, space_replacer_char);\n\n        int shift_amount = discover_shift_value(file_content_buffer, content_len);\n        reverse_caesar_shift_apply(file_content_buffer, content_len, shift_amount);\n\n        dump_to_file(output_path, file_content_buffer, content_len);\n\n    } else {\n        fprintf(stderr, \"Unknown command: %s\\n\", operation);\n        free(file_content_buffer);\n        return 1;\n    }\n\n    free(file_content_buffer);\n    return 0;\n}"}
{"id": 1284, "language": "Python3", "code": "import sys\n\ndef process_arg_value(argument_string):\n    if not argument_string.isdigit():\n        result = \"invalid\"\n    else:\n        number = int(argument_string)\n        if number < 0 or number > 1000:\n            result = \"invalid\"\n        else:\n            is_divisible_by_3 = (number % 3 == 0)\n            contains_digit_3 = ('3' in argument_string)\n\n            if is_divisible_by_3 and contains_digit_3:\n                result = \"dumb\"\n            elif is_divisible_by_3:\n                result = \"idiot\"\n            elif contains_digit_3:\n                result = \"stupid\"\n            else:\n                result = \"smart\"\n    return result\n\ndef main_loop(args):\n    for arg_str in args:\n        print(process_arg_value(arg_str))\n\nif __name__ == '__main__':\n    main_loop(sys.argv[1:])"}
{"id": 1285, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nbool include3(int num){\n  while(num>0)\n  {\n    int digit = num %10;\n    num=num/10;\n    if(digit==3)\n      return true;\n  }\n  return false;\n}\n\nbool divideby3(int num){\n  if(num%3 == 0)\n    {\n      return true;\n    }\n  else\n  {\n    return false;\n  }\n\n}\n\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    \n    if(atoi(argv[i])!=0)\n    {\n      //int num  = int(argv[i])-48;\n      int    num = atoi(argv[i]);\n      if(num >=0 && num <=1000)\n      {\n            if(include3(num))\n            {\n\n                  \n                  if(divideby3(num))\n                  {\n                      cout<<\"dumb\\n\";\n                  }\n                  else\n                  {\n                    cout<<\"stupid\\n\";\n                  }\n\n\n            }\n            else if(divideby3(num))\n            {\n\n                cout<<\"idiot\\n\";\n            }\n            else\n            {\n                cout<<\"smart\\n\";\n            }\n\n\n\n      }\n      else\n      {\n        cout<<\"invalid\\n\";\n      }\n\n    }\n    else\n      {\n        cout<<\"invalid\\n\";\n      }\n\n\n\n\n  }\n\n  \n  return 0;\n}\n"}
{"id": 1286, "language": "C++", "code": "#include <iostream>\n#include<ctype.h>\nusing namespace std;\n\nint check3(int x){\n  \n  while(x){\n    if(x%10 == 3)\n      return 1;\n    x/=10;\n\n  }\n  return 0;\n}\n\nint checkChar(char arr[]){\n  for(int i=0;arr[i]!='\\0';i++){\n    if(!isdigit(arr[i]))\n      return 0;\n  }\n  return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n    int x = atoi(argv[i]);\n\n    if(checkChar(argv[i])){\n      if((x%3 == 0) && (check3(x))){\n        cout<<\"dumb\\n\";\n      }else if(x%3 == 0 ){\n        cout<<\"idiot\\n\";\n      }else if(check3(x)){\n        cout<<\"stupid\\n\";\n      }else\n        cout<<\"smart\\n\";\n    }else\n      cout<<\"invalid\\n\";\n  }\n  return 0;\n}\n"}
{"id": 1287, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.function.Function;\n\npublic class ComposedLogic {\n\n  private static final Function<Integer, String> getClassification = num -> {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean div = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n    if (div && has3) return \"dumb\";\n    if (div) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  };\n\n  public static void main(String[] argv) {\n    for (String item : argv) {\n      Scanner s = new Scanner(item);\n      if (s.hasNextInt()) {\n        System.out.println(getClassification.apply(s.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      s.close();\n    }\n  }\n}"}
{"id": 1288, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint isIncludeThree(int number)\n{\n  while(number)\n  {\n    if(number % 10 == 3)\n    {\n      return 1;\n    }\n    else\n    {\n      number = number / 10;\n    }\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int input = atoi(argv[i]);\n    if (input < 0 && input > 1000)\n    {\n      printf(\"invalid\\n\");\n    }\n    else if (input == 0 && strcmp(argv[i], \"0\"))\n    {\n      printf(\"invalid\\n\");\n    }\n    else\n    {\n      if(input % 3 == 0)\n      {\n        if(isIncludeThree(input))\n        {\n          printf(\"dumb\\n\");\n        }\n        else \n        {\n          printf(\"idiot\\n\");\n        }\n      }\n      else\n      {\n        if(isIncludeThree(input))\n        {\n          printf(\"stupid\\n\");\n        }\n        else\n        {\n          printf(\"smart\\n\");\n        }\n      }\n    }\n  }\n  return 0;\n}\n"}
{"id": 1289, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n// \u8aac\u660e: \u7a7a\u767d\u3068\u5168\u5c0f\u6587\u5b57\u306e\u307f\u6570\u3048\u308b\n#define NUM_KEYS 27  // 0:space, 1-26:a-z\n\nint main(int argc, char *argv[]) {\n    if (argc != 4 || strcmp(argv[1], \"space\") != 0) {\n        fprintf(stderr, \"Usage: %s space input.txt output.json\\n\", argv[0]);\n        return 1;\n    }\n\n    int counts[NUM_KEYS] = {0};\n    FILE *fin = fopen(argv[2], \"r\");\n    if (!fin) {\n        perror(\"input\");\n        return 2;\n    }\n    int ch;\n    while ((ch = fgetc(fin)) != EOF) {\n        if (ch == ' ') counts[0]++;\n        else if ('a' <= ch && ch <= 'z') counts[ch - 'a' + 1]++;\n    }\n    fclose(fin);\n\n    // \u7a7a\u767d\u3092\u7f6e\u63db\u3057\u305f\u5c0f\u6587\u5b57\u63a8\u5b9a:\n    // \u7a7a\u767d\u306f\u82f1\u30c6\u30ad\u30b9\u30c8\u3067very frequent\u306a\u306e\u3067 counts[1..26]\u3067\u6700\u5927\u306e\u3082\u306e\n    int maxidx = 0;\n    int maxcount = 0;\n\n    for (int i = 1; i < NUM_KEYS; i++) {\n        if (counts[i] > maxcount) {\n            maxcount = counts[i];\n            maxidx = i;\n        }\n    }\n    // \u7a7a\u767d\u81ea\u4f53(' ')\u3082\u6570\u3048\u3001\u305d\u306e\u5206\u304c\u6700\u5927\u306a\u3089\u7a7a\u767d\u306f\u5909\u63db\u3055\u308c\u3066\u3044\u306a\u3044\u30b1\u30fc\u30b9\n    char result = (maxcount > counts[0]) ? ('a' + maxidx - 1) : ' ';\n    FILE *fout = fopen(argv[3], \"w\");\n    if (!fout) {\n        perror(\"output\");\n        return 3;\n    }\n    fprintf(fout, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", result);\n    fclose(fout);\n    return 0;\n}"}
{"id": 1290, "language": "Java", "code": "package rockpaperscissors;\n\nimport java.nio.file.*;\nimport java.util.*;\nimport org.json.*;\n\npublic class RPSPredict {\n    public static void main(String[] args) throws Exception {\n        String inputFilePath = args[0];\n        String jsonString = new String(Files.readAllBytes(Paths.get(inputFilePath)));\n        JSONArray inputGames = new JSONArray(jsonString);\n\n        final int[] initialMoves = {0, 1, 2};\n        int[] robotRecentMoves = Arrays.copyOf(initialMoves, initialMoves.length);\n        Map<String, Integer> patternMemory = new HashMap<>();\n\n        for (int i = 3; i < inputGames.length(); i++) {\n            JSONObject round = inputGames.getJSONObject(i);\n            int opponentLastMove = round.getInt(\"you\");\n            int robotCurrentMove = round.getInt(\"robot\");\n\n            String movePattern = robotRecentMoves[0] + \",\" + robotRecentMoves[1] + \",\" + robotRecentMoves[2] + \",\" + opponentLastMove;\n            patternMemory.putIfAbsent(movePattern, robotCurrentMove);\n\n            robotRecentMoves[0] = robotRecentMoves[1];\n            robotRecentMoves[1] = robotRecentMoves[2];\n            robotRecentMoves[2] = robotCurrentMove;\n        }\n\n        JSONObject finalGame = inputGames.getJSONObject(inputGames.length() - 1);\n        String finalPattern = robotRecentMoves[0] + \",\" + robotRecentMoves[1] + \",\" + robotRecentMoves[2] + \",\" + finalGame.getInt(\"you\");\n        int predictedRobotMove = patternMemory.getOrDefault(finalPattern, initialMoves[0]);\n\n        System.out.println((predictedRobotMove + 1) % 3);\n    }\n}"}
{"id": 1291, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try{\n      int num =  Integer.parseInt(args[i]);\n      if ((num%3 == 0) && (args[i].indexOf('3') != -1)){\n        System.out.println(\"dumb\");\n      }\n      else if(num%3 == 0){\n        System.out.println(\"idiot\");\n      }\n      else if(args[i].indexOf('3') != -1){\n        System.out.println(\"stupid\");\n      }\n      else{\n        System.out.println(\"smart\");\n      }\n      }\n      catch(NumberFormatException e) { \n        System.out.println(\"invalid\");\n    }\n    }\n  }\n\n  \n}\n"}
{"id": 1292, "language": "Python3", "code": "import sys\nimport json\n\ndef count(s):\n\n    result = {}\n    for i in range(ord('a'), ord('z') + 1):\n        result[chr(i)] = 0\n    for i in range(ord('A'), ord('Z') + 1):\n        result[chr(i)] = 0\n    result[\" \"] = 0\n    \n    for c in s:\n        if c == \" \" or (c >= \"a\" and c <= \"z\") or (c >= \"A\" and c <= \"Z\"): \n            result[c] += 1\n\n    return result\n\ndef replace(s, i):\n\n    result = \"\"\n\n    for c in s:\n        if c == \" \":\n            result = result + i\n        elif c == i:\n            result = result + \" \"\n        else:\n            result = result + c\n\n    return result\n\ndef clean(s):\n\n    result = \"\"\n    for c in s:\n        if (c >= \"a\" and c <= \"z\") or (c >= \"A\" and c <= \"Z\"):\n            result = result + c\n        else:\n            result = result + \" \"\n    return result\n\ndef ave_length(s):\n\n    s = clean(s)\n    words = s.split()\n    average = sum(len(word) for word in words) / len(words)\n    return average\n\ndef space(s):\n\n    ave_length_gap = 10000000\n    char = \"-\"\n\n    for i in range(ord('a'), ord('z') + 1):\n        replaced_str = replace(s, chr(i))\n        tmp = abs(4.5 - ave_length(replaced_str))\n        if tmp < ave_length_gap:\n            ave_length_gap = tmp\n            char = chr(i)\n\n    return {\"char\": char}\n\ndef main(argv):\n    \n    command = argv[0]\n    infile = open(argv[1])\n    outfile = open(argv[2], \"w\")\n\n    decrypted = infile.read()\n    \n    if command == \"count\":\n        result = count(decrypted)\n    elif command == \"space\":\n        result = space(decrypted)\n    \n    json.dump(result, outfile)\n    infile.close()\n    outfile.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1293, "language": "Python3", "code": "import sys\nimport unicodedata\n\ndef isFullwidth(s):\n  for char in s:\n    F_or_H = unicodedata.east_asian_width(char)\n    if F_or_H == 'F':\n        return True # full width\n  return False # halfwidth\n\ndef main(argv):\n  def contains_3(num):\n    while (num > 0):\n        rem = num % 10\n        num = num//10\n        if rem == 3:\n            return True\n    return False\n\n  def divisible(num):\n    return True if num % 3 == 0 else False\n\n  for i, v in enumerate(argv):\n    try:\n      value = int(v)\n      idiot = divisible(value)\n      stupid = contains_3(value)\n      if (idiot and stupid):\n          print(\"dumb\")\n      elif idiot:\n          print(\"idiot\")\n      elif stupid:\n          print(\"stupid\")\n      else:\n          print(\"smart\")\n    except ValueError:\n        print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1294, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueens {\n  static int N = 8;\n  static int[] pos = new int[N];\n  static boolean[] col = new boolean[N];\n  static boolean[] diag1 = new boolean[2 * N - 1];\n  static boolean[] diag2 = new boolean[2 * N - 1];\n  static int[][] fixedQueens;\n  static boolean solved = false;\n\n  static boolean isFixed(int r, int c) {\n    for (int i = 0; i < fixedQueens.length; i++) {\n      if (fixedQueens[i][0] == r && fixedQueens[i][1] == c) return true;\n    }\n    return false;\n  }\n\n  static boolean fixedInRow(int r) {\n    for (int i = 0; i < fixedQueens.length; i++) {\n      if (fixedQueens[i][0] == r) return true;\n    }\n    return false;\n  }\n\n  static int fixedColInRow(int r) {\n    for (int i = 0; i < fixedQueens.length; i++) {\n      if (fixedQueens[i][0] == r) return fixedQueens[i][1];\n    }\n    return -1;\n  }\n\n  static void dfs(int r) {\n    if (r == N) {\n      solved = true;\n      return;\n    }\n    if (fixedInRow(r)) {\n      int c = fixedColInRow(r);\n      if (!col[c] && !diag1[r + c] && !diag2[r - c + N - 1]) {\n        pos[r] = c;\n        col[c] = true;\n        diag1[r + c] = true;\n        diag2[r - c + N - 1] = true;\n        dfs(r + 1);\n        if (solved) return;\n        col[c] = false;\n        diag1[r + c] = false;\n        diag2[r - c + N - 1] = false;\n      }\n    } else {\n      for (int c = 0; c < N; c++) {\n        if (col[c] || diag1[r + c] || diag2[r - c + N - 1]) continue;\n        pos[r] = c;\n        col[c] = true;\n        diag1[r + c] = true;\n        diag2[r - c + N - 1] = true;\n        dfs(r + 1);\n        if (solved) return;\n        col[c] = false;\n        diag1[r + c] = false;\n        diag2[r - c + N - 1] = false;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int k = sc.nextInt();\n    fixedQueens = new int[k][2];\n    for (int i = 0; i < k; i++) {\n      fixedQueens[i][0] = sc.nextInt();\n      fixedQueens[i][1] = sc.nextInt();\n    }\n    for (int i = 0; i < N; i++) pos[i] = -1;\n    dfs(0);\n\n    for (int r = 0; r < N; r++) {\n      StringBuilder sb = new StringBuilder();\n      for (int c = 0; c < N; c++) {\n        if (pos[r] == c) {\n          sb.append('Q');\n        } else {\n          sb.append('.');\n        }\n      }\n      System.out.println(sb.toString());\n    }\n  }\n}"}
{"id": 1295, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1296, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for arg in args:\n        if not arg.isdigit():\n            print(\"invalid\")\n            continue\n        num = int(arg)\n        if not (0 <= num <= 1000):\n            print(\"invalid\")\n            continue\n        divisible = (num % 3 == 0)\n        has3 = \"3\" in arg\n        if divisible and has3:\n            print(\"dumb\")\n        elif divisible:\n            print(\"idiot\")\n        elif has3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1297, "language": "Go", "code": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n)\n\nvar under10 = []string {\n    \"\",\n    \"I\",\n    \"II\",\n    \"III\",\n    \"IV\",\n    \"V\",\n    \"VI\",\n    \"VII\",\n    \"VIII\",\n    \"IX\",\n}\nvar under100 = []string {\n    \"\",\n    \"X\",\n    \"XX\",\n    \"XXX\",\n    \"XL\",\n    \"L\",\n    \"LX\",\n    \"LXX\",\n    \"LXXX\",\n    \"XC\",\n}\nvar under1000 = []string {\n    \"\",\n    \"C\",\n    \"CC\",\n    \"CCC\",\n    \"CD\",\n    \"D\",\n    \"DC\",\n    \"DCC\",\n    \"DCCC\",\n    \"CM\",\n}\nvar under10000 = []string {\n    \"\",\n    \"M\",\n    \"MM\",\n    \"MMM\",\n}\n\nfunc main() {\n    run(os.Args[1:])\n}\n\nfunc run(args []string) {\n    input, _ := strconv.Atoi(args[0])\n    M := (input/1000) % 10\n    C := (input/100)  % 10\n    X := (input/10)   % 10\n    I := (input)      % 10\n    fmt.Printf(\"%s%s%s%s\\n\",\n                under10000[M],\n                under1000[C],\n                under100[X],\n                under10[I])\n}\n\n"}
{"id": 1298, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int a)\n{\n  if(a%3==0)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool stupid(int a)\n{\n  int b=a,c;\n  while(b!=0)\n  {\n    c=b%10;\n    if(c==3)\n    {\n      return true;\n    }\n    b/=10;\n  }\n  return false;\n}\nbool dumb(int a)\n{\n  if(idiot(a)&&stupid(a))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool smart(int a)\n{\n  if(!idiot(a) && !stupid(a))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n  \n}\nbool invalid(int a)\n{\n  if(!stupid(a) && !idiot(a) && !dumb(a) && !smart(a))\n  {\n    return true;    \n  }\n  else\n  {\n    return false;\n  }\n}\n\nint main(int argc, char *argv[])\n{\n  int l=argc-1,i=1;\n  for(i = 1;i<=l;i++)\n{\n\nint r = atoi(argv[i]);\n\nif(r!=0)\n{\n\n\tif(idiot(r) && stupid(r))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}\n  else\n  {\n\n\tif(idiot(r))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}\n  else if(stupid(r))\n  {\n\t\tprintf(\"stupid\\n\");\n\t}\n  else if(smart(r))\n  {\n\t\tprintf(\"smart\\n\");\n\t}\n  else if(invalid(r))\n  {\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}\nelse\n{\n\nprintf(\"invalid\\n\");\n\n}\n}\n\n\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  //for (int i = 1; i < argc; i++) \n  //{\n      //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   //} \n  return 0;\n}\n"}
{"id": 1299, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint isNum(char *str,int len){\n    int i;\n    for(i=0;i<len;i++){\n        if(str[i]<'0' || str[i]>'9'){\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\nint has_three(char *str,int len) {\n    int i;\n    for(i=0;i<len;i++){\n        if(str[i]=='3'){\n          return 1;\n        }\n    }\n\n    return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n      //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n      int len=strlen(argv[i]);\n      if(isNum(argv[i],len)){\n          int num=atoi(argv[i]);\n          if(num>=0 && num <=1000){\n              if(num%3==0 && has_three(argv[i],len)){\n                  printf(\"dumb\");\n              }\n              else if(num%3==0){\n                  printf(\"idiot\");\n              }\n              else if(has_three(argv[i],len)){\n                  printf(\"stupid\");\n              }\n              else {\n                  printf(\"smart\");\n              }\n          }\n          else {\n              printf(\"invalid\");\n          }\n      }\n      else {\n          printf(\"invalid\");\n      }\n      printf(\"\\n\");\n  }\n  return 0;\n}\n"}
{"id": 1300, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.function.Predicate;\n\npublic class PredicateEvaluator {\n\n  private static Predicate<Integer> isDivBy3 = n -> n % 3 == 0;\n  private static Predicate<Integer> includes3 = n -> String.valueOf(n).contains(\"3\");\n\n  private static String evaluate(int num) {\n    if (num < 0 || num > 1000) {\n      return \"invalid\";\n    }\n    boolean div = isDivBy3.test(num);\n    boolean has3 = includes3.test(num);\n\n    if (div && has3) return \"dumb\";\n    if (div) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] inputs) {\n    for (String input : inputs) {\n      Scanner sc = new Scanner(input);\n      if (sc.hasNextInt()) {\n        System.out.println(evaluate(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1301, "language": "Python3", "code": "import sys\nimport os\nimport json\nimport math\n\ndef count_command(input_path, output_path):\n    \n    symbol_list = [' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    \n    count_dict = {}\n    for symbol in symbol_list:\n        count_dict[symbol] = 0\n    f_in = open(input_path)\n    text_list = f_in.readlines()\n\n    for text in text_list:\n        for char in text:\n            if char in symbol_list:\n                count_dict[char] += 1\n\n    f_out = open(output_path, \"w\")\n    json.dump(count_dict, f_out)\n\n    f_out.close()\n    f_in.close()\n\ndef space_command(input_path, output_path):\n\n    symbol_list = [' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    count_dict = {}\n    for symbol in symbol_list:\n        count_dict[symbol] = 0\n    f_in = open(input_path)\n    text_list = f_in.readlines()\n\n    for text in text_list:\n        for char in text:\n            if char in symbol_list:\n                count_dict[char] += 1\n    num_symbol = 0\n    for item in count_dict.items():\n        num_symbol += item[1]\n    space_count = num_symbol / 4.5\n    \n    space_estimation = \"None\"\n    diff_min = 1000000\n    for item in count_dict.items():\n        diff = math.sqrt(math.pow(space_count - item[1], 2))\n        if diff < diff_min:\n            diff_min = diff\n            space_estimation = item[0]\n\n    space_dict = {\"char\":space_estimation}\n    \n    f_out = open(output_path, \"w\")\n    json.dump(space_dict, f_out)\n\n    f_out.close()\n    f_in.close()\n\ndef decrypt_command(input_path, output_path):\n\n    small_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    large_list = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    symbol_list = [' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    count_dict = {}\n    for symbol in symbol_list:\n        count_dict[symbol] = 0\n    f_in = open(input_path)\n    text_list = f_in.readlines()\n    f_in.close()\n\n    for text in text_list:\n        for char in text:\n            if char in symbol_list:\n                count_dict[char] += 1\n    num_symbol = 0\n    for item in count_dict.items():\n        num_symbol += item[1]\n    space_count = num_symbol / 4.5\n    \n    space_estimation = \"None\"\n    diff_min = 1000000\n    for item in count_dict.items():\n        diff = math.sqrt(math.pow(space_count - item[1], 2))\n        if diff < diff_min:\n            diff_min = diff\n            space_estimation = item[0]\n\n    tmp = count_dict[space_estimation]\n    count_dict[space_estimation] = count_dict[\" \"]\n    count_dict[\" \"] = 0\n    \n    sorted_count_dict = sorted(count_dict.items(), key=lambda x : -x[1])\n    \n    max_symbol, max_count = sorted_count_dict[0]\n    max_index = small_list.index(max_symbol)\n    e_index = small_list.index(\"e\")\n\n    d = e_index - max_index\n    if d>14:\n        d = 26 - d\n\n    key_dict = {}\n    for item in count_dict:\n        if item[0] == \" \":\n            key_dict[\" \"] = \" \"\n            continue\n        if item[0].islower():\n            new_symbol = small_list[small_list.index(item[0]) + d]\n        else:\n            new_symbol = large_list[large_list.index(item[0]) + d]\n        key_dict[item[0]] = new_symbol\n\n    f_in = open(input_path)\n    all_text = f_in.read()\n    \n    output_text = \"\"\n    for s in all_text:\n        if not s in symbol_list:\n            output_text += s\n        else:\n            new_s = key_dict[s]\n            output_text += new_s\n\n    f_out = open(output_path, \"w\")\n    f_out.write(output_text)\n    f_out.close()\n        \n\ndef main(argv):\n    \n    command, input_path, output_path = argv\n    print(command, input_path, output_path)\n\n    if command == 'count':\n        count_command(input_path, output_path)\n    elif command == 'space':\n        space_command(input_path, output_path)\n    elif command == 'decrypt':\n        decrypt_command(input_path, output_path)\n\nif __name__ == '__main__':\n\n    main(sys.argv[1:])\n"}
{"id": 1302, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1303, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int i=0;\n    while (i<args.length)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int n = Integer.parseInt(args[i]);\n        if (n<0 || n >1000)\n        {\n          System.out.println(\"invalid\");\n        } else if(n%3 == 0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }  else if(n%3 == 0)\n        {\n          System.out.println(\"idiot\");\n        } else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      else {\n        System.out.println(\"invalid\");\n      }i++;\n    }\n\t\t}\n\t}\n\n"}
{"id": 1304, "language": "Java", "code": "package track;\n\npublic class ProblemSolver {\n\n    public void run(String[] inputs) {\n        for (String input : inputs) {\n            String output = this.getAnswerFor(input);\n            System.out.println(output);\n        }\n    }\n\n    private String getAnswerFor(String str) {\n        if (!isPositiveInteger(str)) {\n            return \"invalid\";\n        }\n        \n        int number = Integer.parseInt(str);\n\n        if (number < 0 || number > 1000) {\n            return \"invalid\";\n        }\n\n        // Logic\n        boolean isMultipleOf3 = number % 3 == 0;\n        boolean hasDigit3 = str.contains(\"3\");\n\n        if (isMultipleOf3 && hasDigit3) {\n            return \"dumb\";\n        } else if (isMultipleOf3) {\n            return \"idiot\";\n        } else if (hasDigit3) {\n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n    }\n\n    private boolean isPositiveInteger(String s) {\n        if (s == null || s.isEmpty()) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (!Character.isDigit(s.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        ProblemSolver solver = new ProblemSolver();\n        solver.run(args);\n    }\n}"}
{"id": 1305, "language": "C", "code": "#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n\nint check_3(const char *str) {\n  for (; *str; str++)\n    if (*str == '3') return 1;\n  return 0;\n}\n\nint all_digits(const char *str) {\n  if (!*str) return 0;\n  for (; *str; str++)\n    if (!isdigit(*str)) return 0;\n  return 1;\n}\n\nint main(int argc, char* argv[]) {\n  int i;\n  for (i = 1; i < argc; i++) {\n    if (!all_digits(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int val = atoi(argv[i]);\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = val % 3 == 0;\n    int has3 = check_3(argv[i]);\n    if (div3 && has3)\n      puts(\"dumb\");\n    else if (div3)\n      puts(\"idiot\");\n    else if (has3)\n      puts(\"stupid\");\n    else\n      puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 1306, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\n     for (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n\t\t\tString numStr = args[i];\n\t\t\tint num = 0;\n\t\t\tboolean isInvalid = false;\n\t\t\tboolean has3inNum = false;\n\t\t\t\n\t\t\tfor(int j = 0; j< args[i].length(); j++) { \n\t\t\t\tchar digit = numStr.charAt(j); \n\t\t\t\t\n\t\t\t\t// '0': 48, '9 : 57 -> char number\n\t\t\t\tif(48<=digit && digit <=57) {\n\t\t\t\t\tnum = num*10 + (digit - 48); \n\t\t\t\t\tif(digit == 51) { \n\t\t\t\t\t\thas3inNum = true;\n\t\t\t\t\t}\n\t\t\t\t}else { \n\t\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\t\tisInvalid = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(isInvalid) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(num < 0 || num > 1000) {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(num % 3 ==0) {\n\t\t\t\tif(has3inNum) {\n\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t}else {\n\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tif(has3inNum) {\n\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t}else {\n\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n   \n\t}\n}\n"}
{"id": 1307, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <fstream>\n#include <sstream>\n#include <stdexcept>\n\n// Generates a unique key from a game state.\nstd::string generate_state_key(int r1, int r2, int r3, int y1) {\n    return std::to_string(r1) + \"-\" + std::to_string(r2) + \"-\" + std::to_string(r3) + \"-\" + std::to_string(y1);\n}\n\n// A simple parser for the specific JSON format.\nvoid parse_history(const std::string& content, std::vector<int>& robot_log, std::vector<int>& player_log) {\n    size_t cursor = 0;\n    while (true) {\n        size_t robot_pos = content.find(\"\\\"robot\\\":\", cursor);\n        if (robot_pos == std::string::npos) break;\n        \n        size_t robot_val_start = robot_pos + 8;\n        int robot_hand = std::stoi(content.substr(robot_val_start));\n        robot_log.push_back(robot_hand);\n\n        size_t you_pos = content.find(\"\\\"you\\\":\", robot_pos);\n        if (you_pos == std::string::npos) break;\n        size_t you_val_start = you_pos + 6;\n        int you_hand = std::stoi(content.substr(you_val_start));\n        player_log.push_back(you_hand);\n\n        cursor = you_pos;\n    }\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        return 1;\n    }\n\n    std::ifstream file_stream(argv[1]);\n    std::stringstream buffer;\n    buffer << file_stream.rdbuf();\n    std::string file_content = buffer.str();\n\n    std::vector<int> robot_history;\n    std::vector<int> player_history;\n    parse_history(file_content, robot_history, player_history);\n\n    if (robot_history.size() < 3) {\n        std::cout << 2 << std::endl; // Not enough history, default response\n        return 0;\n    }\n\n    std::map<std::string, int> state_initial_moves;\n    std::map<std::string, int> state_occurrence_counts;\n\n    for (size_t i = 3; i < robot_history.size(); ++i) {\n        std::string state_key = generate_state_key(\n            robot_history[i - 3],\n            robot_history[i - 2],\n            robot_history[i - 1],\n            player_history[i - 1]\n        );\n\n        if (state_initial_moves.find(state_key) == state_initial_moves.end()) {\n            int past_occurrences = state_occurrence_counts[state_key]; // This is 0 for a new key\n            int actual_move = robot_history[i];\n            int initial_move = (actual_move - past_occurrences + 3) % 3;\n            state_initial_moves[state_key] = initial_move;\n        }\n\n        state_occurrence_counts[state_key]++;\n    }\n\n    size_t last_round_idx = robot_history.size() - 1;\n    std::string next_state_key = generate_state_key(\n        robot_history[last_round_idx - 2],\n        robot_history[last_round_idx - 1],\n        robot_history[last_round_idx],\n        player_history[last_round_idx]\n    );\n\n    int initial_move = 0;\n    int total_occurrences = 0;\n\n    if (state_initial_moves.count(next_state_key)) {\n        initial_move = state_initial_moves.at(next_state_key);\n        total_occurrences = state_occurrence_counts.at(next_state_key);\n    }\n\n    int predicted_robot_hand = (initial_move + total_occurrences) % 3;\n\n    // Rock(0) beaten by Paper(2), Scissors(1) by Rock(0), Paper(2) by Scissors(1)\n    int winning_hands[] = {2, 0, 1};\n    int my_next_hand = winning_hands[predicted_robot_hand];\n\n    std::cout << my_next_hand << std::endl;\n\n    return 0;\n}"}
{"id": 1308, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static int check(String str)\n  {\n    for(int i=0;i<str.length();i++)\n    {\n      if(str.charAt(i) == '3')\n        return 1;\n    }\n    return 0;\n  }\n\n  public static int digit(String str)\n  {\n    //char c[] = str.tocharArray();\n    for(int i=0;i<str.length();i++)\n    {\n      if(!isdigit(str.charAt(i)))\n        return 0;\n    }\n    return 1;\n  }\n\n\tpublic static void main(String[] args) {\n\t\t/*for (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);*/\n      int num[] = new int[args.length];\n      for(int i = 0; i<args.length ; i++)\n      {\n          if(digit(args[i]) == 1)\n          {\n              num[i] = Integer.parseInt(args[i]);\n          if((num[i] >= 0) && (num[i] <= 1000))\n          {\n            //String str = String.valueOf(num[i]);\n            if(((num[i] % 3) == 0) && ((check(args[i])) != 1))\n              System.out.println(\"idiot\");\n            else if(((num[i] % 3) != 0) && ((check(args[i])) == 1))\n              System.out.println(\"stupid\");\n            else if(((num[i] % 3 == 0)) && ((check(args[i])) == 1))\n              System.out.println(\"dumb\");\n            else\n              System.out.println(\"smart\");      \n          }\n          }          \n          else\n            System.out.println(\"invalid\");\n\n      }\n\n\t\t}\n}\n"}
{"id": 1309, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n// 3\u3092\u542b\u3080\u304b\u3069\u3046\u304b\nint in3(const char *s) {\n  for (int i=0; s[i]; i++)\n    if (s[i] == '3') return 1;\n  return 0;\n}\n\nint all_digit(const char *str) {\n  for (int i=0; str[i]; i++)\n    if (!isdigit(str[i])) return 0;\n  return str[0]!='\\0';\n}\n\nint main(int argc, char *argv[]) {\n  for (int ai=1; ai<argc; ai++) {\n    if (!all_digit(argv[ai])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int val = atoi(argv[ai]);\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int d = val%3==0;\n    int h3 = in3(argv[ai]);\n    if (d && h3) puts(\"dumb\");\n    else if (d) puts(\"idiot\");\n    else if (h3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 1310, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nclass EightQueens {\nprivate:\n    int board_size = 8;\n    vector<string> board;\n    vector<bool> cols;\n    vector<bool> diag1;\n    vector<bool> diag2;\n    vector<bool> fixed_rows;\n\n    bool solve(int r) {\n        if (r == board_size) {\n            return true;\n        }\n\n        if (fixed_rows[r]) {\n            if (solve(r + 1)) return true;\n        } else {\n            for (int c = 0; c < board_size; c++) {\n                if (!cols[c] && !diag1[r - c + board_size - 1] && !diag2[r + c]) {\n                    board[r][c] = 'Q';\n                    cols[c] = true;\n                    diag1[r - c + board_size - 1] = true;\n                    diag2[r + c] = true;\n                    \n                    if (solve(r + 1)) return true;\n                    \n                    board[r][c] = '.';\n                    cols[c] = false;\n                    diag1[r - c + board_size - 1] = false;\n                    diag2[r + c] = false;\n                }\n            }\n        }\n        return false;\n    }\n\npublic:\n    EightQueens() : \n        board(8, string(8, '.')),\n        cols(8, false),\n        diag1(15, false),\n        diag2(15, false),\n        fixed_rows(8, false) {}\n\n    void add_queen(int r, int c) {\n        board[r][c] = 'Q';\n        fixed_rows[r] = true;\n        cols[c] = true;\n        diag1[r - c + board_size - 1] = true;\n        diag2[r + c] = true;\n    }\n\n    void find_and_print_solution() {\n        if (solve(0)) {\n            for (const auto& row_str : board) {\n                cout << row_str << endl;\n            }\n        }\n    }\n};\n\nint main(int argc, char *argv[]) {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int k;\n    cin >> k;\n\n    EightQueens game;\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        game.add_queen(r, c);\n    }\n\n    game.find_and_print_solution();\n\n    return 0;\n}"}
{"id": 1311, "language": "Python3", "code": "import sys\n\ndef main():\n    # \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\n    k_str = sys.stdin.readline()\n    k = int(k_str)\n    \n    # \u30dc\u30fc\u30c9\u306e\u521d\u671f\u5316\n    board = []\n    for _ in range(8):\n        board.append(['.'] * 8)\n    \n    # \u56fa\u5b9a\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\n    fixed_queens = []\n    for _ in range(k):\n        r_str, c_str = sys.stdin.readline().split()\n        r = int(r_str)\n        c = int(c_str)\n        board[r][c] = 'Q'\n        fixed_queens.append((r, c))\n\n    # \u518d\u5e30\u95a2\u6570\u3067\u89e3\u3092\u63a2\u3059\n    find_solution(board)\n\ndef is_safe(board, r, c):\n    # \u540c\u3058\u5217\u306b\u30af\u30a4\u30fc\u30f3\u304c\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n    for i in range(8):\n        if board[i][c] == 'Q':\n            return False\n    \n    # \u5de6\u4e0a\u306e\u5bfe\u89d2\u7dda\u3092\u30c1\u30a7\u30c3\u30af\n    i, j = r, c\n    while i >= 0 and j >= 0:\n        if board[i][j] == 'Q':\n            return False\n        i -= 1\n        j -= 1\n        \n    # \u53f3\u4e0b\u306e\u5bfe\u89d2\u7dda\u3092\u30c1\u30a7\u30c3\u30af\n    i, j = r, c\n    while i < 8 and j < 8:\n        if board[i][j] == 'Q':\n            return False\n        i += 1\n        j += 1\n        \n    # \u53f3\u4e0a\u306e\u5bfe\u89d2\u7dda\u3092\u30c1\u30a7\u30c3\u30af\n    i, j = r, c\n    while i >= 0 and j < 8:\n        if board[i][j] == 'Q':\n            return False\n        i -= 1\n        j += 1\n        \n    # \u5de6\u4e0b\u306e\u5bfe\u89d2\u7dda\u3092\u30c1\u30a7\u30c3\u30af\n    i, j = r, c\n    while i < 8 and j >= 0:\n        if board[i][j] == 'Q':\n            return False\n        i += 1\n        j -= 1\n        \n    return True\n\ndef find_solution(board, row=0):\n    # \u5168\u3066\u306e\u884c\u306b\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u3051\u305f\u3089\u6210\u529f\n    if row == 8:\n        for r in range(8):\n            print(\"\".join(board[r]))\n        sys.exit(0)\n    \n    # \u3053\u306e\u884c\u306b\u3059\u3067\u306b\u30af\u30a4\u30fc\u30f3\u304c\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    has_queen = False\n    for c in range(8):\n        if board[row][c] == 'Q':\n            has_queen = True\n            break\n    \n    if has_queen:\n        find_solution(board, row + 1)\n    else:\n        # \u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u3044\u3066\u8a66\u3059\n        for col in range(8):\n            if is_safe(board, row, col):\n                board[row][col] = 'Q'\n                find_solution(board, row + 1)\n                board[row][col] = '.' # \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\n\nif __name__ == '__main__':\n    main()"}
{"id": 1312, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\npublic class FunctionalApproach {\n\n  private static String calculateStatus(int number) {\n    if (number < 0 || number > 1000) return \"invalid\";\n    boolean isDivisibleBy3 = (number % 3 == 0);\n    boolean includesDigit3 = String.valueOf(number).contains(\"3\");\n\n    if (isDivisibleBy3 && includesDigit3) return \"dumb\";\n    if (isDivisibleBy3) return \"idiot\";\n    if (includesDigit3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    Arrays.stream(args).forEach(arg -> {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        System.out.println(calculateStatus(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close(); // Ensure scanner is closed\n    });\n  }\n}"}
{"id": 1313, "language": "Python3", "code": "import sys\nimport json\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  result_root = []\n  result_you = []\n \n  for i, v in enumerate(argv):\n    print(0)\n  ''' \n    fo = open(v, 'r')\n    string = fo.read()\n    data = json.loads(string)\n  for j in range(len(data)):\n    result_root.append(data[j][\"robot\"])\n    result_you.append(data[j][\"you\"])\n  new = []\n  new1 = []\n  for x in range(len(result_root)-3):\n    new.append([result_root[x],result_root[x+1],result_root[x+2],result_you[x+2]]) \n  n = len(result_root)\n  \n\n\n  #data = json.loads(result)\n  #print(data)\n'''\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1314, "language": "Python3", "code": "import sys\n\ndef calculate_idiot_rating(s):\n    if not s.isdigit():\n        return \"invalid\"\n    \n    n = int(s)\n    \n    if not (0 <= n <= 1000):\n        return \"invalid\"\n\n    is_div_by_3 = (n % 3 == 0)\n    contains_3 = ('3' in s)\n\n    if is_div_by_3 and contains_3:\n        return \"dumb\"\n    elif is_div_by_3:\n        return \"idiot\"\n    elif contains_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef app_starter(args):\n    for val_s in args:\n        print(calculate_idiot_rating(val_s))\n\nif __name__ == '__main__':\n    app_starter(sys.argv[1:])"}
{"id": 1315, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\n// 9\u9032\u6570\u306e\u6587\u5b57\u5217\u309210\u9032\u6570\u306e\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\nlong long nonaryToDecimal(string nonary_str) {\n    long long decimal_val = 0;\n    long long power_of_9 = 1;\n    for (int i = nonary_str.length() - 1; i >= 0; i--) {\n        int digit = nonary_str[i] - '0';\n        decimal_val += digit * power_of_9;\n        power_of_9 *= 9;\n    }\n    return decimal_val;\n}\n\n// 10\u9032\u6570\u306e\u6570\u5024\u30929\u9032\u6570\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\nstring decimalToNonary(long long decimal_val) {\n    if (decimal_val == 0) {\n        return \"0\";\n    }\n    string nonary_str = \"\";\n    while (decimal_val > 0) {\n        nonary_str += to_string(decimal_val % 9);\n        decimal_val /= 9;\n    }\n    reverse(nonary_str.begin(), nonary_str.end());\n    return nonary_str;\n}\n\nint main(int argc, char *argv[]) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  string expression(argv[1]);\n  stringstream ss(expression);\n\n  string num1_str, op, num2_str;\n  ss >> num1_str >> op >> num2_str;\n\n  long long num1_dec = nonaryToDecimal(num1_str);\n  long long num2_dec = nonaryToDecimal(num2_str);\n\n  long long result_dec;\n  if (op == \"+\") {\n    result_dec = num1_dec + num2_dec;\n  } else {\n    result_dec = num1_dec * num2_dec;\n  }\n\n  cout << decimalToNonary(result_dec) << endl;\n  \n  return 0;\n}"}
{"id": 1316, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\n# This solution assumes the swapped character is always 'e' due to the hint.\ndef solve_assuming_e(encrypted_text):\n    original_char = 'e'\n    best_shift = -1\n    min_diff = float('inf')\n\n    for shift in range(26):\n        shifted_e = chr((ord('e') - ord('a') + shift) % 26 + ord('a'))\n        \n        # Undo swap\n        temp_text = \"\".join([' ' if c.lower() == shifted_e else shifted_e if c == ' ' else c for c in encrypted_text])\n        \n        # Undo shift\n        decrypted_text = \"\"\n        for char in temp_text:\n            if 'a' <= char <= 'z':\n                decrypted_text += chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a'))\n            elif 'A' <= char <= 'Z':\n                decrypted_text += chr((ord(char) - ord('A') - shift + 26) % 26 + ord('A'))\n            else:\n                decrypted_text += char\n        \n        words = [w for w in decrypted_text.split() if w]\n        if not words: continue\n\n        avg_len = sum(map(len, words)) / len(words)\n        diff = abs(avg_len - 4.5)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_shift = shift\n            \n    return best_shift, original_char\n\ndef main(argv):\n    command, infile, outfile = argv\n\n    if command == \"count\":\n        with open(infile, 'r', encoding='utf-8') as f:\n            text = f.read()\n        counts = {c: text.count(c) for c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"}\n        counts = {k: v for k, v in counts.items() if v > 0}\n        with open(outfile, 'w', encoding='utf-8') as f:\n            json.dump(counts, f, indent=2)\n    else:\n        with open(infile, 'r', encoding='utf-8') as f:\n            text = f.read()\n        \n        shift, char = solve_assuming_e(text)\n\n        if command == \"space\":\n            with open(outfile, 'w', encoding='utf-8') as f:\n                json.dump({\"char\": char}, f, indent=2)\n        elif command == \"decrypt\":\n            shifted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            \n            temp_text = \"\".join([' ' if c.lower() == shifted_char else shifted_char if c == ' ' else c for c in text])\n            \n            final_text = \"\"\n            for c in temp_text:\n                if 'a' <= c <= 'z':\n                    final_text += chr((ord(c) - ord('a') - shift + 26) % 26 + ord('a'))\n                elif 'A' <= c <= 'Z':\n                    final_text += chr((ord(c) - ord('A') - shift + 26) % 26 + ord('A'))\n                else:\n                    final_text += c\n            \n            with open(outfile, 'w', encoding='utf-8') as f:\n                f.write(final_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1317, "language": "Python", "code": "import sys\nimport json\nimport re\n\n\nclass Detective:\n\n    def __init__(self, mission, enc_fname, out_fname):\n        self.mission = mission\n        self.enc_fname = enc_fname\n        self.out_fname = out_fname\n        self.char_count = {}\n        self.converter = {}\n        self.shift = 0\n\n        with open(enc_fname, 'r') as lines:\n            self.encrypted_data = lines.read()\n        self.lines_nonl = self.encrypted_data.replace('\\n', '')\n        self.decoded_data = self.encrypted_data\n\n    def _count(self):\n        self.char_count = {}\n        for i in range(65, 65+26):\n            self.char_count[chr(i)] = 0\n        for i in range(97, 97+26):\n            self.char_count[chr(i)] = 0\n        self.char_count[' '] = 0\n        for line in self.lines_nonl:\n            for char in line:\n                if self._is_valid(char):\n                    self.char_count[char] += 1\n\n    # blank should appear right after comma\n    def _guess_blank_with_comma(self):\n        for i in range(len(self.lines_nonl)):\n            if self.lines_nonl[i] == ',':\n                self.converter[' '] = self.lines_nonl[i+1]\n\n    # guess blank with frequency\n    def _guess_blank(self):\n        # times blank should appear\n        _times = len(self.lines_nonl) / 4.5\n        t_ = ()\n        for k, v in self.char_count.items():\n            if len(t_) == 0:\n                t_ = [k, v]\n            else:\n                is_min = abs(t_[1] - _times) - abs(v - _times)\n                if is_min > 0:\n                    t_ = [k, v]\n        self.converter[' '] = t_[0]\n\n    def _decrypt(self):\n        decrypted = ''\n        # replace blank\n        self.lines_nonl = self._replace(\n                self.lines_nonl, ' ', self.converter[' '])\n        # regen. counter\n        self._guess_shift()\n        self._make_converter()\n        # decode blank\n        self.encrypted_data = self._replace(\n                self.encrypted_data, ' ', self.converter[' '])\n        # decode char\n        for i in range(len(self.encrypted_data)):\n            if self.encrypted_data[i] in self.converter.keys() and self.encrypted_data[i] != ' ':\n                decrypted += self.converter[self.encrypted_data[i]]\n            else:\n                decrypted += str(self.encrypted_data[i])\n        return decrypted\n\n    def _make_converter(self):\n        for i in range(len(self.encrypted_data)):\n            char = self.encrypted_data[i]\n            if self._is_valid(char):\n                if char.lower() not in self.converter.keys():\n                    self.converter[char.lower()] = self._decode(char.lower())\n                if char.upper() not in self.converter.keys():\n                    self.converter[char.upper()] = self._decode(char.upper())\n\n    def _replace(self, str_, a, b):\n        tmp = '@@@@@'\n        str_ = str_.replace(a, tmp)\n        str_ = str_.replace(b, a)\n        str_ = str_.replace(tmp, b)\n        return str_\n\n    def _decode(self, char):\n        if self._is_upper(char):\n            return chr((ord(char) - ord('A') - self.shift) % 26 + ord('A'))\n        elif self._is_lower(char):\n            return chr((ord(char) - ord('a') - self.shift) % 26 + ord('a'))\n\n        return char\n\n    def _guess_shift(self):\n        freq_char = ''\n        self._count()\n        self.char_count = sorted(\n                self.char_count.items(), key=lambda x: x[1], reverse=True)\n        for k, v in self.char_count:\n            if k != ' ':\n                freq_char = k\n                break\n        self.shift = ord(freq_char) - ord('e')\n\n    def _print_json(self, dict_):\n        with open(self.out_fname, 'w') as f:\n            f.write(json.dumps(dict_))\n\n    def _print_txt(self, txt):\n        with open(self.out_fname, 'w') as f:\n            f.write(txt)\n\n    def _is_valid(self, char):\n        pattern = re.compile('[A-Za-z]|\\s')\n        return pattern.match(char) is not None\n\n    def _is_upper(self, char):\n        pattern = re.compile('[A-Z]')\n        return pattern.match(char) is not None\n\n    def _is_lower(self, char):\n        pattern = re.compile('[a-z]')\n        return pattern.match(char) is not None\n\n    def accomplish(self):\n        if self.mission == 'count':\n            self._count()\n            self._print_json(self.char_count)\n        elif self.mission == 'space':\n            self._count()\n            self._guess_blank()\n            dict_ = {\"char\": self.converter[\" \"]}\n            self._print_json(dict_)\n        elif self.mission == 'decrypt':\n            self._count()\n            self._guess_blank()\n            plain = self._decrypt()\n            self._print_txt(plain)\n\n\ndef main(argv):\n    # count, space, decrypt\n    cmd = argv[1]\n    # encrypted file\n    enc_fname = argv[2]\n    # output filename\n    out_fname = argv[3]\n\n    detective = Detective(cmd, enc_fname, out_fname)\n    detective.accomplish()\n\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 1318, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        int num = atoi(argv[i]);\n        if (num < 0 || num > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int multiple_of_3 = (num % 3 == 0);\n        int has_digit_3 = 0;\n        for (int n = num; n > 0; n /= 10) {\n            if (n % 10 == 3) {\n                has_digit_3 = 1; // 3\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\n                break;\n            }\n        }\n\n        if (multiple_of_3 && has_digit_3) {\n            printf(\"dumb\\n\");\n        } else if (multiple_of_3) {\n            printf(\"idiot\\n\");\n        } else if (has_digit_3) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 1319, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n// \u6570\u5024\u306b3\u304c\u542b\u307e\u308c\u308b\u304b\u30c1\u30a7\u30c3\u30af\nbool contains_digit_three(int n) {\n    char s[5];\n    sprintf(s, \"%d\", n);\n    return strchr(s, '3') != NULL;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        char *end;\n        long n = strtol(argv[i], &end, 10);\n        \n        if (*end != '\\0' || argv[i] == end || n < 0 || n > 1000) {\n            puts(\"invalid\");\n            continue;\n        }\n\n        bool divisible = (n % 3 == 0);\n        bool contains_3 = contains_digit_three((int)n);\n\n        if (divisible && contains_3) {\n            puts(\"dumb\");\n        } else if (divisible) {\n            puts(\"idiot\");\n        } else if (contains_3) {\n            puts(\"stupid\");\n        } else {\n            puts(\"smart\");\n        }\n    }\n    return 0;\n}"}
{"id": 1320, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid evaluateInput(const string& input) {\n    int number;\n\n    if (!isdigit(input[0]) || (input.length() > 1 && input[0] == '0')) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    try {\n        number = stoi(input);\n    } catch (...) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    if (number < 0 || number > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisibleBy3 = (number % 3 == 0);\n    bool contains3 = (input.find('3') != string::npos);\n\n    if (divisibleBy3 && contains3) {\n        cout << \"dumb\" << endl;\n    } else if (divisibleBy3) {\n        cout << \"idiot\" << endl;\n    } else if (contains3) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // 3 Idiots Algorithm\u3092\u5b9f\u884c\n\n    for (int i = 1; i < argc; i++) {\n        evaluateInput(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1321, "language": "Python3", "code": "import sys\n\ndef can_place(board, r, c):\n    for i in range(8):\n        if board[i] == c or \\\n           board[i] != -1 and abs(board[i] - c) == abs(i - r):\n            return False\n    return True\n\ndef solve_queens(board, row=0):\n    if row == 8:\n        return board\n    if board[row] != -1:\n        return solve_queens(board, row + 1)\n    for c in range(8):\n        if can_place(board, row, c):\n            board[row] = c\n            res = solve_queens(board, row + 1)\n            if res:\n                return res\n            board[row] = -1\n    return None\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    board = [-1] * 8\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r] = c\n    answer = solve_queens(board)\n    for r in range(8):\n        line = ['.'] * 8\n        line[answer[r]] = 'Q'\n        print(''.join(line))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1322, "language": "C", "code": "#include <stdio.h>\n#include <math.h>\nint main(int argc, char *argv[])\n{\n  int randa=rand()%2;\n  int true=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n\n\n  return 0;\n}\n\n"}
{"id": 1323, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    if (!is_numeric($value)) {\n      printf(\"invalid\\n\");\n    } else if ($value < 0 || $value > 1000) {\n      printf(\"invalid\\n\");\n    } else {\n      $divisible = $value % 3;\n      $include = str_replace(3, '', $value);\n      if ($divisible == 0 && $include != $value) {\n        printf(\"dumb\\n\");\n      } else if ($divisible == 0) {\n        printf(\"idiot\\n\");\n      } else if ($include != $value) {\n        printf(\"stupid\\n\");\n      } else {\n        printf(\"smart\\n\");\n      }\n    }\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1324, "language": "Python3", "code": "import sys\nimport string\nimport re\nimport json\n\ndef count(inputFile):\n  result = {}\n  checkList = string.ascii_letters + \" \"\n  for c in checkList:\n    result[c] = 0\n  \n  s = inputFile\n  for c in s:\n    if c in checkList:\n      result[c] += 1\n  \n  return result\n\n\n\ndef space(inputFile):\n  checkList = string.ascii_lowercase\n  s = inputFile\n  wordAverage = []\n  for i in range(len(checkList)):\n    wordList = re.split(\"[\\\\.\\\\?,!;\\n\\\"'{0}]\".format(checkList[i]), s)\n    wordLengthSum = 0\n    cnt = 0\n    for j in wordList:\n      if j == \"\":\n        continue\n      wordLengthSum += len(j)\n      cnt += 1\n    wordAverage.append(wordLengthSum / cnt)\n    print(checkList[i], wordAverage[i])\n  \n  bestIdx = 0\n  for i in range(len(wordAverage)):\n    if abs(wordAverage[bestIdx] - 4.5) > abs(wordAverage[i] - 4.5):\n      bestIdx = i\n  return {\"char\": checkList[bestIdx]}\n\n\n\ndef decrypt(inputFile, outputFile):\n  spaceChar = space(inputFile)[\"char\"]\n  charCnt = count(inputFile)\n  charCnt[spaceChar], charCnt[\" \"] = charCnt[\" \"], charCnt[spaceChar]\n\n  sList = list(inputFile)\n  # replace spaceChar <=> \" \"\n  for i in range(len(sList)):\n    if sList[i] == spaceChar:\n      sList[i] = \" \"\n    elif sList[i] == \" \":\n      sList[i] = spaceChar\n  \n  # check what is 'e'\n  ePos = \"a\"\n  for c in string.ascii_lowercase:\n    if sList.count(ePos) + sList.count(ePos.upper()) < sList.count(c) + sList.count(c.upper()):\n      ePos = c\n  \n  # make table and replace\n  to = string.ascii_lowercase\n  while to[0] != ePos:\n    to = to[1:] + to[0]\n  base = string.ascii_lowercase[4:] + string.ascii_lowercase[:4]\n  table = {}\n  for i in range(len(base)):\n    table[base[i]] = to[i]\n  for i in range(len(sList)):\n    if 'a' <= sList[i] <= 'z':\n      sList[i] = table[sList[i]]\n    elif 'A' <= sList[i] <= 'Z':\n      sList[i] = table[sList[i].lower()].upper()\n  \n  outputFile.write(\"\".join(sList))\n\n\n\ndef main(argv):\n  assert len(argv) == 3, \"usage: python main.py (count|space|decrypt) {encryptedfile} {resultfile}\"\n  inputFile = open(argv[1], \"r\")\n  inputFileStr = inputFile.read().rstrip()\n  outputFile = open(argv[2], \"w\")\n  \n  if argv[0] == \"count\":\n    json.dump(count(inputFileStr), outputFile)\n  elif argv[0] == \"space\":\n    json.dump(space(inputFileStr), outputFile)\n  elif argv[0] == \"decrypt\":\n    decrypt(inputFileStr, outputFile)\n  else:\n    assert False, \"command must be (count|space|decrypt).\"\n  inputFile.close()\n  outputFile.close()\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1325, "language": "Java", "code": "package track;\n\nimport java.util.Random; // Random number generation\n\npublic class App {\n  public static void main(String[] args) {\n    int maximumOutputs = Integer.parseInt(args[0]);\n    Random randomGen = new Random();\n    StringBuilder currentHistory = new StringBuilder();\n    String targetPattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"; // \u76ee\u6a19\u306e\u30d1\u30bf\u30fc\u30f3\n    int patternLength = targetPattern.length();\n\n    for (int i = 0; i < maximumOutputs; i++) {\n      String drumSound;\n      if (randomGen.nextInt(2) == 0) { // 0\u306a\u3089\u300c\u30c9\u300d\u30011\u306a\u3089\u300c\u30ab\u300d\n        drumSound = \"\u30c9\";\n      } else {\n        drumSound = \"\u30ab\";\n      }\n      System.out.println(drumSound);\n      currentHistory.append(drumSound);\n\n      // \u30d1\u30bf\u30fc\u30f3\u9577\u3088\u308a\u30d0\u30c3\u30d5\u30a1\u304c\u9577\u304f\u306a\u3063\u305f\u3089\u3001\u4e00\u756a\u53e4\u3044\u6587\u5b57\u3092\u524a\u9664\n      if (currentHistory.length() > patternLength) {\n        currentHistory.deleteCharAt(0);\n      }\n\n      // \u73fe\u5728\u306e\u30d0\u30c3\u30d5\u30a1\u304c\u76ee\u6a19\u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\n      if (currentHistory.toString().equals(targetPattern)) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return; // \u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u7d42\u4e86\n      }\n    }\n\n    // \u4e0a\u9650\u307e\u3067\u51fa\u529b\u3057\u3066\u3082\u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1326, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n\n  def isNum(a):\n    for i in a:\n      if i not in '1234567890':\n        return False\n    return True\n\n \n\n  for i, v in enumerate(argv):\n    if isNum(v):\n      v1 = int(v)\n      if v1 <= 1000 and v1 >= 0:\n        a = (v1%3==0)\n        b = ('3' in v)\n        c = a and b\n        if c == True:\n          print('dumb')\n        elif a == True:\n          print('idiot')\n        elif b == True:\n          print('stupid')\n        else:\n          print('smart')\n      else:\n        print('invalid')\n    else:\n      print('invalid')\n    #print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1327, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\tint num;\n    for (int i = 0, l = args.length; i < l; i++)\n\t{\n\t  int len=args[i].length();\n\t  if(args[i].contains(\"[a-zA-Z]+\"))\n\t  {\n\t\tSystem.out.println(\"invalid\");\n\t  }\n\t  else\n\t  {\n\t\t  try\n\t\t  {\n\t\t\t  num=Integer.parseInt(args[i]);\n\t\t\t  if(num>=0 && num<=1000)\n\t\t{\n\t\t\tif(len==1)\n\t\t\t{\n\t\t\tif(num%3==0 && num!=3)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t}\n\t\t\telse if(num==3)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tif(num%3==0)\n\t\t\t{\n              if(num!=33 && num!=333 && num!=3333)\n              {\n                System.out.println(\"idiot\");\n              }\n              else\n              {\n                System.out.println(\"dumb\");\n              }\n\t\t\t}\n\t\t\telse if(num==13 || num==23 || num==31 || num==32 || num==34 || num==35 || num==37 || num==38 || num==43 || num==53 || num==73)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t}\n\t\t\t}\n\t    }\n\t\t  }\n\t\t  catch(NumberFormatException e)\n\t\t  {\n\t\t\t  System.out.println(\"invalid\");\n\t\t  }\n\t }\n    }\n\t}\n}\n\n\n"}
{"id": 1328, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n\t\tint inc;\n    for (int i = 0, l = args.length; i < l; i++) \n    {\n      try\n      {\n        inc=4;\n\t\t\t  String output = String.format(\"%s\",args[i]);\n        int asciich=(int)output.charAt(0);\n        if(asciich>256)\n        {\n          throw new InputMismatchException(\"e\");\n        }\n        \n        Integer in = Integer.parseInt(output);\n        if(in%3==0)\n        {\n          inc=1;\n        }\n        if(output.contains(\"3\"))\n        {\n          if(inc==1)\n          {\n            inc=3;\n          }\n          else\n          {\n            inc=2;\n          }\n        }\n        switch(inc)\n        {\n          case 1:\n            System.out.println(\"idiot\");\n          break;\n          case 2:\n            System.out.println(\"stupid\");\n          break;\n          case 3:\n            System.out.println(\"dumb\");\n          break;\n          case 4:\n            System.out.println(\"smart\");\n          break;\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1329, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char* argv[])  {\n  for (int i=1; i<argc; ++i)  {\n    int num = atoi(argv[i]);\n            string str = argv[i];\n            if (*argv[i] >= 49 && *argv[i] <= 57) {\n\n            if (atoi(argv[i]) >= 0 && atoi(argv[i]) <= 1000)  {\n              if (num % 3 == 0) {\n                if (str.find(\"3\") != std::string::npos) {\n                  cout<<\"dumb\"<<endl;\n                } else  {\n                  cout<<\"idiot\"<<endl;\n                }\n              } else if (str.find(\"3\") != std::string::npos) {\n                cout<<\"stupid\"<<endl;\n              } else  {\n                cout<<\"smart\"<<endl;\n              }\n            }\n          } else  {\n              cout<<\"invalid\"<<endl;\n          }\n  }\n  return 0;\n}"}
{"id": 1330, "language": "Python3", "code": "import sys\nimport json\n\n# \u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u304d\u63db\u308f\u308b\u6587\u5b57\u3092\u53d6\u5f97\ndef get_space_char(fc):\n    before = ''\n    for c in fc:\n        if 'A' <= c and c <= 'Z' and 'a' <= before and before <= 'z':\n            # \u66f8\u304d\u8fbc\u307f\u5185\u5bb9\u7d44\u307f\u7acb\u3066\n            return before\n        before = c\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6570\u3092\u6570\u3048\u4e0a\u3052\ndef get_alphabets(dict_chars, chars):\n    # dict\u3092\u521d\u671f\u5316\n    result = {}\n    labels = [chr(i) for i in range(65, 65+26)] + [chr(i) for i in range(97, 97+26)] + [' ']\n    for l in labels:\n        result[l] = 0\n\n    # \u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    for c in set(chars):\n        if not( ('a' <= c and c <= 'z') or ('A' <= c and c <= 'Z') or c == ' '):\n            continue\n\n        result[c] = chars.count(c)\n        # print(c, ':', chars.count(c))\n    return result\n\ndef main(argv):\n\n    # \u5f15\u6570\u304c\u8db3\u308a\u306a\u3044\u5834\u5408\n    if len(argv) < 3:\n        return\n\n    # \u5909\u6570\u306e\u521d\u671f\u5316\n    MODE = argv[0]\n    INPUT_FILE = argv[1]\n    OUTPUT_FILE = argv[2]\n\n    # \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    with open(INPUT_FILE, 'r') as file:\n        file_content = file.read()\n\n    # \u30e2\u30fc\u30c9\uff1acount\n    if MODE == 'count':\n        # \u6587\u5b57\u5217\u3092\u6587\u5b57\u30ea\u30b9\u30c8\u3078\u5909\u63db\u3001\u30bd\u30fc\u30c8\n        chars = [c for c in file_content]\n        chars.sort()\n        \n        # \u66f8\u304d\u8fbc\u307f\u5185\u5bb9\u7d44\u307f\u7acb\u3066\n        result_dict = get_alphabets(chars, chars)\n        content = json.dumps(result_dict, sort_keys=True)\n\n    # \u30e2\u30fc\u30c9\uff1aspace\n    elif MODE == 'space':\n        symbol = get_space_char(file_content)\n        content = json.dumps({'char': symbol})\n               \n    # \u30e2\u30fc\u30c9\uff1adecrypt\n    elif MODE == 'decrypt':\n        # \u6587\u5b57\u5217\u3092\u6587\u5b57\u30ea\u30b9\u30c8\u3078\u5909\u63db\u3001\u30bd\u30fc\u30c8\n        chars = [c for c in file_content]\n        chars.sort()\n        \n        # \u983b\u5ea6\u306e\u6570\u3048\u4e0a\u3052\n        result_dict = get_alphabets(chars, chars)\n\n        # \u30b9\u30da\u30fc\u30b9\u306e\u7f6e\u63db\n        symbol = get_space_char(file_content)\n        splited_txt = file_content.replace(symbol, ' ')\n        \n        def decrypt(string, shift_num):\n            plain = ''\n            for c in string:\n                if 'a' <= c and c <= 'z':\n                    count_from_a = ord(c) - ord('a')\n                    plain += chr( (count_from_a + shift_num) % 26 + ord('a'))\n                elif 'A' <= c and c <= 'Z':\n                    count_from_a = ord(c) - ord('A')\n                    plain += chr( (count_from_a + shift_num) % 26 + ord('A'))\n                else:\n                    plain += c\n            \n            return plain\n\n        # \u6587\u5b57\u5217\u306e\u7f6e\u63db\n        most_used_alphabets = [str(k) for k, v in sorted(result_dict.items(), key=lambda x: x[1], reverse=True)]\n        most_used = most_used_alphabets[0]\n\n        # e\u306e\u5834\u5408\n        SYMBOL = 'e'.lower()\n        if 'a' <= most_used and most_used <= 'z':\n            count_from_e = ord(most_used) - ord(SYMBOL)\n        else:\n            count_from_e = ord(most_used) - ord(SYMBOL.upper())\n\n        if count_from_e < 0:\n            count_from_e += 26\n        content = decrypt(splited_txt, count_from_e+1)\n\n\n    # \u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u8fbc\u307f\n    with open(OUTPUT_FILE, 'w') as file:\n        file.write(content)\n \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    # main(['count', './input/basic_encrypted01.txt', './result.json'])\n    # main(['space', './input/basic_encrypted01.txt', './result.json'])\n    # main(['decrypt', './input/basic_encrypted01.txt', './result.json'])\n\n    \n\n"}
{"id": 1331, "language": "Java", "code": "public class IdiotsJudge {\n  public static void main(String[] args){\n    for(String v : args){\n      try {\n        int n = Integer.parseInt(v);\n        if(n < 0 || n > 1000){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisible = (n % 3 == 0);\n        boolean contains3 = v.contains(\"3\");\n        if(divisible && contains3) System.out.println(\"dumb\");\n        else if(divisible) System.out.println(\"idiot\");\n        else if(contains3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1332, "language": "Java", "code": "public class IdiotsCLI {\n  public static void main(String[] args) {\n    for (String a : args) {\n      int val;\n      try {\n        val = Integer.parseInt(a);\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if (val < 0 || val > 1000) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean divisible = val % 3 == 0;\n      boolean containsThree = a.indexOf('3') != -1;\n      if (divisible && containsThree) System.out.println(\"dumb\");\n      else if (divisible) System.out.println(\"idiot\");\n      else if (containsThree) System.out.println(\"stupid\");\n      else System.out.println(\"smart\");\n    }\n  }\n}"}
{"id": 1333, "language": "Java", "code": "package track;\npublic class App{\n  public static void main(String[] args);\n  {\n  for(int i = 0, l = (args.length); i < l; i++)\n  {\n    String s=args[i];\n    int id=0,st=0;int temp;\n    try{\n      int num;\n      num=Integer.parseInt(s);\n      temp=num;\n      if(num%3==0)\n      id=1;\n      while(temp>0)\n      {\n        if(temp%10==3)\n        {\n          st=1;\n          break;\n        }\n      temp=temp/10;\n    }\n    if(id==1 && st==1)\n    {\n      System.out.println(\"dumb\");\n    }\n    else if(id==1)\n    System.out.println(\"idiot\");\n     else if(st==1)\n    System.out.println(\"stupid\");\n     else\n    System.out.println(\"smart\");\n  }\n  catch(Exception e)\n  {\n     \n    System.out.println(\"invalid\");\n  }\n}\n  }\n}\n"}
{"id": 1334, "language": "Python3", "code": "import sys\n\ndef get_idiot_level(input_string_num):\n    # Ensure input is a valid non-negative integer string.\n    if not input_string_num.isdigit():\n        return \"invalid\"\n    \n    current_num = int(input_string_num)\n\n    # Check if number falls within the specified bounds.\n    if not (0 <= current_num <= 1000):\n        return \"invalid\"\n\n    divisible_by_3_flag = (current_num % 3 == 0)\n    contains_3_flag = ('3' in input_string_num)\n\n    # Use a priority-based if-else chain.\n    if divisible_by_3_flag and contains_3_flag:\n        return \"dumb\"\n    elif divisible_by_3_flag:\n        return \"idiot\"\n    elif contains_3_flag:\n        return \"stupid\"\n    return \"smart\"\n\ndef run_application(cmd_args):\n    # Iterate through each argument and display the algorithm's result.\n    for arg_value in cmd_args:\n        print(get_idiot_level(arg_value))\n\nif __name__ == '__main__':\n    run_application(sys.argv[1:])"}
{"id": 1335, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  /*\n  for (int i = 1; i < argc; i++) {\n    cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  }\n  return 0;\n  */\n  char inpfile[500];\n  char outfile[500];\n  char given_cmd[500];\n  \n  strcpy(inpfile, argv[2]);\n  strcpy(outfile, argv[3]);\n  strcpy(given_cmd, argv[1]);\n  //printf(\"%s\\n\", inpfile);\n  FILE *fp;\n\n  fp = fopen(argv[2], \"r\");\n  \n  char c;\n  int cnt[500];\n  \n  for(int i=0; i<=496; i++) cnt[i] = 0;\n  \n  while (1) {\n    c = fgetc(fp);\n    if( c == EOF ) break;\n    if((c>='a' && c<='z') || (c>='A' && c<= 'Z') || c==' '){\n      cnt[c]++;\n    } \n  }\n\n  fclose(fp);  // Close the file\n  \n  if(strcmp(given_cmd,\"count\")==0){\n\n    FILE *fp2;\n\n    fp2 = fopen(argv[3], \"w\");\n    fprintf(fp2, \"{\\n\");\n    fprintf(fp2, \"\\\" \\\": %d,\\n\", cnt[' ']);\n    for(int i='A'; i<= 'Z'; i++){\n      fprintf(fp2, \"\\\"%c\\\": %d,\\n\", i,cnt[i]);\n    }\n    for(int i='a'; i<= 'y'; i++){\n      fprintf(fp2 , \"\\\"%c\\\": %d,\\n\", i,cnt[i]);\n    }\n    fprintf(fp2 , \"\\\"z\\\": %d\\n\", cnt['z']);\n    fprintf(fp2, \"}\");\n\n    fclose(fp2);\n  }\n  else if(strcmp(given_cmd,\"space\")==0){\n\n    FILE *fp2;\n\n    fp2 = fopen(argv[3], \"w\");\n\n    int cnt_max = 0;\n    char max_char = 'e';\n    for(int i='A'; i<='Z'; i++){\n      if(cnt[i]>cnt_max) {\n        cnt_max = cnt[i];\n        max_char = i;\n      }\n    }\n    for(int i='a'; i<='z'; i++){\n      if(cnt[i]>cnt_max) {\n        cnt_max = cnt[i];\n        max_char = i;\n      }\n    }\n    if(cnt[' ']>cnt_max) {\n        cnt_max = cnt[' '];\n        max_char = ' ';\n      }\n\n    fprintf(fp2, \"{\\n\");\n    fprintf(fp2, \"\\\"char\\\": \\\"%c\\\"\\n\", max_char);\n    \n    fprintf(fp2, \"}\\n\");\n\n    fclose(fp2);\n  }\n  else if(strcmp(given_cmd,\"decrypt\")==0){\n\n    FILE *fp2;\n\n    fp2 = fopen(argv[3], \"w\");\n\n    int cnt_max = 0;\n    char max_char = 'e';\n    for(int i='A'; i<='Z'; i++){\n      if(cnt[i]>cnt_max) {\n        cnt_max = cnt[i];\n        max_char = i;\n      }\n    }\n    for(int i='a'; i<='z'; i++){\n      if(cnt[i]>cnt_max) {\n        cnt_max = cnt[i];\n        max_char = i;\n      }\n    }\n    if(cnt[' ']>cnt_max) {\n        cnt_max = cnt[' '];\n        max_char = ' ';\n    }\n\n    map<char, char> mymap;\n\n\n    mymap[max_char] =' ';\n\n    int cnt_max2 = 0;\n    char max2_char = 'e';\n\n    for(int i='A'; i<='Z'; i++){\n      if(i==max_char) continue;\n      if(cnt[i]>cnt_max2) {\n        cnt_max2 = cnt[i];\n        max2_char = i;\n      }\n    }\n\n    for(int i='a'; i<='z'; i++){\n      if(i==max_char) continue;\n      if(cnt[i]>cnt_max2) {\n        cnt_max2 = cnt[i];\n        max2_char = i;\n      }\n    }\n    if(cnt[' ']>cnt_max2 && ' '!=max_char) {\n        cnt_max2 = cnt[' '];\n        max2_char = ' ';\n    }\n    int diff =  'e'- max2_char;\n    char appro = ' ';\n    if(max_char>='A' && max_char <='Z'){\n      mymap[' ']= max_char + diff;\n      if(mymap[' '] > 'Z'){\n        int overfloww = mymap[' '] - 'Z';\n        appro = overfloww +'A' -1;\n        mymap[' '] = appro;\n      }\n      else if(mymap[' '] < 'A'){\n        int underfloww = 'A'- mymap[' '];\n        appro = 'Z'- underfloww  +1;\n        mymap[' '] = appro;\n      }\n    }\n    else if(max_char>='a' && max_char <='z'){\n        mymap[' ']= max_char + diff;\n        if(mymap[' '] > 'z'){\n        int overfloww = mymap[' '] - 'z';\n        appro = overfloww +'z' -1;\n        mymap[' '] = appro;\n      }\n      else if(mymap[' '] < 'a'){\n        int underfloww = 'a'- mymap[' '];\n        appro = 'z'- underfloww  +1;\n        mymap[' '] = appro;\n      }\n    }\n    else mymap[' '] = ' ';\n\n    for(int i='A'; i<='Z'; i++){\n      if(i==appro) continue;\n      mymap[i] = i + diff;\n      if(mymap[i] > 'Z'){\n        int overfloww = mymap[i] - 'Z';\n        char appro2 = overfloww +'A' -1;\n        mymap[i] = appro2;\n      }\n      else if(mymap[i] < 'A'){\n        int underfloww = 'A'- mymap[i];\n        char appro2 = 'Z'- underfloww  +1;\n        mymap[i] = appro2;\n      }\n    }\n    for(int i='a'; i<='z'; i++){\n      if(i==appro) continue;\n      mymap[i] = i + diff;\n      if(mymap[i] > 'z'){\n        int overfloww = mymap[i] - 'z';\n        char appro2 = overfloww +'a' -1;\n        mymap[i] = appro2;\n      }\n      else if(mymap[i] < 'a'){\n        int underfloww = 'a'- mymap[i];\n        char appro2 = 'z'- underfloww  +1;\n        mymap[i] = appro2;\n      }\n    }\n\n    ///\n    FILE *fp5;\n\n    fp5 = fopen(argv[2], \"r\");\n    while (1) {\n      c = fgetc(fp5);\n      if( c == EOF ) break;\n      if((c>='a' && c<='z') || (c>='A' && c<= 'Z') || c==' '){\n        fprintf(fp2, \"%c\", mymap[c]);\n      }\n      else fprintf(fp2, \"%c\",c);\n    }\n\n    fclose(fp5);\n    ///\n\n    fclose(fp2);\n  }\n\n  return 0;\n}\n"}
{"id": 1336, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    \n    # Edit and remove this code as you like\n    list_N=argv\n    #list_N=list_N.split()\n    #print(list_N)\n    result=[]\n    for N in list_N: \n      if (N.isalpha()==True):\n        print(\"invalid\")\n      if( \" \" in N):\n        N=N.split()\n        for i in N:\n          if (int(N)>=0 and int(N)<=100) :\n            if ((int(N)%3==0) and ('3' in N)):\n              result.append(\"dumb\")\n            elif (int(N)%3==0):\n              result.append(\"idiot\")\n            elif ('3' in N):\n              result.append(\"stupid\")\n            else:\n              result.append(\"smart\")\n      else:\n        if (int(N)>=0 and int(N)<=100):\n          if ((int(N)%3==0) and ('3' in N)):\n            result.append(\"dumb\")\n          elif (int(N)%3==0):\n            result.append(\"idiot\")\n          elif ('3' in N):\n            result.append(\"stupid\")\n          else:\n            result.append(\"smart\")\n        else:\n          result.append(\"invalid\")\n    for i in result:\n      print(i)\n\n    #for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1337, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i in argv:\n    # check if i is int (valid or not)\n    try:\n      #fix for test 8\n      original_i = i\n      i = int(i)\n      if str(i) != original_i:\n        print('invalid')\n        continue\n    except ValueError:\n      print('invalid')\n      continue\n    \n    # check if i is divisible by 3 and includes number 3\n    if i % 3 == 0 and '3' in str(i):\n      print('dumb')\n    \n    elif i % 3 == 0:\n      print('idiot')\n    \n    elif '3' in str(i):\n      print('stupid')\n    \n    else:\n      print('smart')\n    \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1338, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for string in argv:\n        if not string.isdecimal():\n            print(\"invalid\")\n            continue\n        integer = int(string)\n        if not (0 <= integer <= 1000):\n            print(\"invalid\")\n            continue\n        divisible = (integer % 3 == 0)\n        contains3 = '3' in string\n        if divisible and contains3:\n            print(\"dumb\")\n        elif divisible:\n            print(\"idiot\")\n        elif contains3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1339, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n          for(String x : args){\n          try{\n            int n = Integer.parseInt(x);\n      if(n<0 || n>1000)\n        throw new Exception();\n\n      boolean includes = false;\n      boolean divides = false;\n\n\n      if(n%3 == 0)\n        divides=true;\n\n      int temp=n;\n      while(temp>0){\n        int digit =temp%10;\n        if(digit==3)\n        {includes=true;break;}\n        temp/=10;\n\n      }\n\n      if(includes)\n      {\n        if(divides)\n          System.out.println(\"dumb\");\n        else\n          System.out.println(\"stupid\");\n\n      }\n      else\n      {\n        if(divides)\n          System.out.println(\"idiot\");\n        else\n          System.out.println(\"smart\"); \n      }\n      }\n      catch(Exception e){\n        \n        System.out.println(\"invalid\");\n      }\n    }\n\t\t}\n\t}\n\n"}
{"id": 1340, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueensSolver {\n    static int[] queens = new int[8];\n    static boolean[] usedCol = new boolean[8];\n    static boolean[] usedDiag1 = new boolean[15];\n    static boolean[] usedDiag2 = new boolean[15];\n    static int fixedCount;\n    static boolean solved = false;\n\n    static void dfs(int r) {\n        if (r == 8) {\n            solved = true;\n            return;\n        }\n        if (queens[r] != -1) {\n            int c = queens[r];\n            if (!usedCol[c] && !usedDiag1[r + c] && !usedDiag2[r - c + 7]) {\n                usedCol[c] = true; usedDiag1[r + c] = true; usedDiag2[r - c + 7] = true;\n                dfs(r + 1);\n                if (solved) return;\n                usedCol[c] = false; usedDiag1[r + c] = false; usedDiag2[r - c + 7] = false;\n            }\n            return;\n        }\n        for (int c = 0; c < 8; c++) {\n            if (usedCol[c] || usedDiag1[r + c] || usedDiag2[r - c + 7]) continue;\n            queens[r] = c;\n            usedCol[c] = true; usedDiag1[r + c] = true; usedDiag2[r - c + 7] = true;\n            dfs(r + 1);\n            if (solved) return;\n            usedCol[c] = false; usedDiag1[r + c] = false; usedDiag2[r - c + 7] = false;\n            queens[r] = -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        for (int i = 0; i < 8; i++) queens[i] = -1;\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt(), c = sc.nextInt();\n            queens[r] = c;\n        }\n        dfs(0);\n        for (int r = 0; r < 8; r++) {\n            for (int c = 0; c < 8; c++) {\n                System.out.print((queens[r] == c) ? \"Q\" : \".\");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1341, "language": "PHP", "code": "<?php\nfunction main($argc, $argv) {\n    // loop through all inputs except the command itself\n    for($i=1; $i<$argc; $i++) {\n        $input = $argv[$i];\n        // check if all characters are digits\n        if(!preg_match('/^\\d+$/', $input)) {\n            echo \"invalid\\n\";\n            continue;\n        }\n        $num = intval($input);\n        if($num < 0 || $num > 1000) {\n            echo \"invalid\\n\";\n            continue;\n        }\n        $mod = ($num % 3 == 0);\n        $contains3 = strpos($input, '3') !== false;\n        if ($mod && $contains3) {\n            echo \"dumb\\n\";\n        } elseif ($mod) {\n            echo \"idiot\\n\";\n        } elseif ($contains3) {\n            echo \"stupid\\n\";\n        } else {\n            echo \"smart\\n\";\n        }\n    }\n}\n\nmain($argc, $argv);"}
{"id": 1342, "language": "Python3", "code": "import sys\n\ndef judge_input(text):\n    if not text.isdigit():\n        return \"invalid\"\n    \n    value = int(text)\n    \n    if not (0 <= value <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_3 = (value % 3 == 0)\n    contains_digit_3 = ('3' in text)\n\n    if is_divisible_by_3 and contains_digit_3:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_from_main(argv):\n    for arg_item in argv:\n        print(judge_input(arg_item))\n\nif __name__ == '__main__':\n    execute_from_main(sys.argv[1:])"}
{"id": 1343, "language": "Java", "code": "package track;\n\npublic class The3Idiots {\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i++) {\n      String currentArg = args[i];\n      handle(currentArg);\n    }\n  }\n\n  public static void handle(String s) {\n    boolean isNotNumeric = false;\n    if (s == null || s.length() == 0) {\n        isNotNumeric = true;\n    } else {\n        for (char c : s.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                isNotNumeric = true;\n                break;\n            }\n        }\n    }\n\n    if (isNotNumeric) {\n      System.out.println(\"invalid\");\n      return;\n    }\n    \n    int n = Integer.parseInt(s);\n    if (n < 0 || n > 1000) {\n      System.out.println(\"invalid\");\n      return;\n    }\n\n    boolean isDivisibleBy3 = n % 3 == 0;\n    boolean includes3 = s.contains(\"3\");\n\n    if (isDivisibleBy3 && includes3) {\n      System.out.println(\"dumb\");\n    } else if (isDivisibleBy3) {\n      System.out.println(\"idiot\");\n    } else if (includes3) {\n      System.out.println(\"stupid\");\n    } else {\n      System.out.println(\"smart\");\n    }\n  }\n}"}
{"id": 1344, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype ChessBoard struct {\n\tsize   int\n\tPoints [][]Point\n}\n\ntype Point struct {\n\tx, y int\n}\n\nfunc main() {\n\tsize:=8\n\t_, points := run(os.Args[1:], size)\n\n\tboard := initBoard(size)\n\n\tfor _, p := range points {\n\t\tboard = board.selectedPoint(p)\n\t}\n\t//board.print()\n\n\tb := GetBoards([]ChessBoard{board}, 1)\n\tfor _, i := range b {\n\t\ti.print()\n\t}\n\t//fmt.Println(\"Number of Boards:\", len(b))\n\n}\n\nfunc run(args []string, size int) (numofq int, P []Point) {\n\tstr := \"\"\n\t//if len(args) == 1 {\n\tbytes, err := ioutil.ReadFile(args[0])\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tstr = strings.TrimSpace(string(bytes))\n\t//}\n\n\tstr1 := strings.Split(str, \"\\n\")\n\n\tnumberofqueens, _ := strconv.Atoi(str1[0])\n\n\tif 2 > size && size > 8 {\n\t\tfmt.Println(\"size must be in between 2 and 8\")\n\t\tos.Exit(1)\n\t}\n\n\tfor _, i := range str1[1:] {\n\n\t\tt := strings.Split(i, \" \")\n\n\t\tx, err := strconv.Atoi(strings.TrimSpace(t[0]))\n\t\thandleErr(err)\n\t\ty, err := strconv.Atoi(strings.TrimSpace(t[1]))\n\t\thandleErr(err)\n\n\t\tif x+1 > size || y+1 > size || x < 0 || y < 0 {\n\t\t\tfmt.Println(\"incorrect coordinates for the Queens position \")\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tP = append(P, Point{x + 1, y + 1})\n\t}\n\n\treturn numberofqueens, P\n\n}\n\nfunc handleErr(err error) {\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(0)\n\t}\n}\n\nfunc initBoard(size int) ChessBoard {\n\tb := ChessBoard{size: size, Points: make([][]Point, size)}\n\n\tfor x := 1; x <= size; x++ {\n\t\tb.Points[x-1] = make([]Point, size)\n\n\t\tfor y := 1; y <= size; y++ {\n\t\t\tb.Points[x-1][y-1] = Point{x, y}\n\t\t}\n\t}\n\treturn b\n}\n\nfunc (b ChessBoard) selectedPoint(p Point) ChessBoard {\n\tc1 := p.y - p.x\n\tc2 := p.y + p.x\n\n\tvar newpoints [][]Point\n\n\tnewpoints = make([][]Point, b.size)\n\tfor x := 1; x <= b.size; x++ {\n\t\tnewpoints[x-1] = make([]Point, b.size)\n\t\tfor y := 1; y <= b.size; y++ {\n\t\t\tpt := b.Points[x-1][y-1]\n\t\t\tif pt.x == p.x || pt.y == p.y || pt.y == pt.x+c1 || pt.y == -pt.x+c2 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tnewpoints[x-1][y-1] = pt\n\t\t}\n\t}\n\tnewpoints[p.x-1][p.y-1] = p\n\tb.Points = newpoints\n\n\treturn b\n\n}\n\nfunc (b *ChessBoard) print() {\n\tfor x := 1; x <= b.size; x++ {\n\t\tfor y := 1; y <= b.size; y++ {\n\t\t\tif b.Points[x-1][y-1] != emptyPoint {\n\t\t\t\tfmt.Print(\"Q\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfmt.Print(\".\")\n\n\t\t\t//fmt.Print(b.Points[x-1][y-1])\n\t\t\t//fmt.Println(b.Points[i-1])\n\t\t\t//fmt.Println()\n\t\t}\n\t\tfmt.Println()\n\t}\n\t//fmt.Println(\"========================\")\n\tfmt.Println()\n}\n\nvar emptyPoint = Point{0, 0}\n\nfunc GetBoards(boards []ChessBoard, y int) (res []ChessBoard) {\n\n\tif boards == nil {\n\t\treturn nil\n\t}\n\n\tfor _, i := range boards {\n\t\tfor x := 1; x <= i.size; x++ {\n\t\t\tif i.Points[x-1][y-1] != emptyPoint {\n\t\t\t\tres = append(res, i.selectedPoint(Point{x, y}))\n\t\t\t}\n\t\t}\n\t}\n\tif y == boards[0].size {\n\t\treturn res\n\t}\n\n\treturn GetBoards(res, y+1)\n\n}\n"}
{"id": 1345, "language": "Python3", "code": "import sys\n\ndef analyze_and_print(s_input):\n    if not s_input.isdigit():\n        print(\"invalid\")\n        return\n    \n    i_val = int(s_input)\n    \n    if not (0 <= i_val <= 1000):\n        print(\"invalid\")\n        return\n\n    divisible = (i_val % 3 == 0)\n    includes_three = ('3' in s_input)\n\n    if divisible and includes_three:\n        print(\"dumb\")\n    elif divisible:\n        print(\"idiot\")\n    elif includes_three:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef cli_handler_func(argv):\n    for arg_item in argv:\n        analyze_and_print(arg_item)\n\nif __name__ == '__main__':\n    cli_handler_func(sys.argv[1:])"}
{"id": 1346, "language": "Java", "code": "public class ThreeIdiotsAlgo {\n  public static void main(String[] params) {\n    for (String param : params) {\n      try {\n        int input = Integer.parseInt(param);\n        if (input < 0 || input > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean isDivisible = input % 3 == 0;\n        boolean hasThree = param.contains(\"3\");\n        if (isDivisible && hasThree) {\n          System.out.println(\"dumb\");\n        } else if (isDivisible) {\n          System.out.println(\"idiot\");\n        } else if (hasThree) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1347, "language": "C++", "code": "#include <iostream>\n#include <cstdio>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n    for (int i = 1; i < argc; i++)\n    {\n        //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n        string s2 = argv[i];\n\n//        bool isNum = true;\n//        for(int i=0 ; i<s2.size(); ++i)\n//        {\n//            if(s2[i]>='a' && s2[i]<='z' || s2[i]>='A' && s2[i]<='Z')\n//            {\n//                isNum = false;\n//            }\n//        }\n\n        bool isNum = true;\n        for(int i=0 ; i<s2.size(); ++i)\n        {\n            if(s2[i]>='0' && s2[i]<='9')\n            {\n                isNum = true;\n            }\n            else {\n                isNum = false;\n            }\n        }\n\n        if(!isNum)\n        {\n            cout << \"invalid\" << endl;\n        }\n        else\n        {\n            int num = stoi(s2);\n\n            if(num >= 0 && num <= 1000)\n            {\n                string s = to_string(num);\n                bool includeThree = false;\n                for(int i=0; i<s.size(); ++i)\n                {\n                    if(s[i] == '3')\n                    {\n                        includeThree = true;\n                    }\n                }\n\n                if(num % 3 == 0 && includeThree)\n                {\n                    cout << \"dumb\" << endl;\n                }\n                else if(num % 3 == 0)\n                {\n                    cout << \"idiot\" << endl;\n                }\n                else if(includeThree)\n                {\n                    cout << \"stupid\" << endl;\n                }\n                else\n                {\n                    cout << \"smart\" << endl;\n                }\n\n            }\n            else\n            {\n                cout << \"invalid\" << endl;\n            }\n        }\n    }\n\n\n\n    return 0;\n}\n"}
{"id": 1348, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n// \u5f15\u6570: \u30b5\u30d6\u30b3\u30de\u30f3\u30c9, \u5165\u529b\u30d5\u30a1\u30a4\u30eb, \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\n\n// count: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3068\u7a7a\u767d\u306e\u6570\u3092\u6570\u3048JSON\u5f62\u5f0f\u3067\u51fa\u529b\n// space: \u7a7a\u767d\u306b\u7f6e\u63db\u3055\u308c\u305f\u5c0f\u6587\u5b571\u3064\u3092\u63a8\u5b9a\u3057\u3066JSON\u5f62\u5f0f\u3067\u51fa\u529b\n\nint main(int argc, char *argv[]) {\n  if (argc != 4) return 1;\n  string cmd = argv[1];\n  string input_path = argv[2];\n  string output_path = argv[3];\n\n  // \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u53d6\u308a\n  ifstream fin(input_path);\n  if (!fin) return 1;\n  string text((istreambuf_iterator<char>(fin)), istreambuf_iterator<char>());\n  fin.close();\n\n  if (cmd == \"count\") {\n    map<char, int> stat; // \u51fa\u73fe\u6570\u30ab\u30a6\u30f3\u30c8\n    for (char c : text) {\n      if (isalpha(c) || c == ' ')\n        stat[c]++;\n    }\n\n    // JSON\u66f8\u304d\u51fa\u3057\n    ofstream fout(output_path);\n    fout << \"{\\n\";\n    bool first = true;\n    for (auto it = stat.begin(); it != stat.end(); ++it) {\n      if (!first) fout << \",\\n\";\n      fout << \"  \\\"\";\n      if (it->first == '\"')\n        fout << \"\\\\\\\"\";\n      else if (it->first == '\\\\')\n        fout << \"\\\\\\\\\";\n      else if (it->first == '\\t')\n        fout << \"\\\\t\";\n      else if (it->first == '\\n')\n        fout << \"\\\\n\";\n      else \n        fout << it->first;\n      fout << \"\\\": \" << it->second;\n      first = false;\n    }\n    fout << \"\\n}\\n\";\n    fout.close();\n    return 0;\n  }\n  else if (cmd == \"space\") {\n    // \u307e\u305a\u5c0f\u6587\u5b57(a-z)\u3068\u7a7a\u767d\u306e\u51fa\u73fe\u6570\u30ab\u30a6\u30f3\u30c8\n    map<char, int> stat;\n    int space_count = 0;\n    for (char c : text) {\n      if (islower(c))\n        stat[c]++;\n      else if (c == ' ')\n        space_count++;\n    }\n\n    // \u82f1\u6587\u5e73\u5747\u5358\u8a9e\u95774.5\u3001\u5358\u8a9e\u9593\u9694\u304c\u7a7a\u767d\uff1d\u5358\u8a9e\u6570\u306f\u7a7a\u767d\u306e\u6570+1\u304f\u3089\u3044\n    // \u82f1\u8a9e\u306a\u3089\u7a7a\u767d\u304c\u4e00\u756a\u591a\u3044\u5c0f\u6587\u5b57\u3088\u308a\u3082\u672c\u6765\u3082\u3063\u3068\u591a\u3044\u306f\u305a\n    // \u3088\u3063\u3066\u3001\u7570\u5e38\u306b\u591a\u3044\u5c0f\u6587\u5b57\uff08\u304b\u3064\u5bfe\u5fdc\u7a7a\u767d\u304c\u3084\u305f\u3089\u5c11\u306a\u3044\uff09\uff1d\u5019\u88dc\n\n    int max_cnt = 0;\n    char probable = 'a';\n    for (char c = 'a'; c <= 'z'; ++c) {\n      if (stat[c] > max_cnt) {\n        max_cnt = stat[c];\n        probable = c;\n      }\n    }\n    // \u6761\u4ef6\u3092\u95a2\u6570\u5316\u305b\u305a\u7d20\u6734\u306b\u3054\u308a\u62bc\u3057\n    // \u3082\u3057\u7a7a\u767d\u304c\u6975\u7aef\u306b\u5c11\u306a\u304f\u3001\u5c0f\u6587\u5b57\u306e\u3069\u308c\u304b\u304c\u7a7a\u767d\u3063\u307d\u3044\u983b\u5ea6\u3067\u51fa\u3066\u304d\u3066\u3044\u305f\u3089\u305d\u308c\u3092\u7b54\u3048\u3068\u3059\u308b\n    ofstream fout(output_path);\n    fout << \"{\\n  \\\"char\\\": \\\"\" << probable << \"\\\"\\n}\\n\";\n    fout.close();\n    return 0;\n  }\n  return 2;\n}"}
{"id": 1349, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvoid solve(const string& s) {\n    stringstream ss(s);\n    long n;\n    ss >> n;\n\n    // eof checks for trailing characters like \"12a\"\n    if (ss.fail() || !ss.eof()) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    if (n < 0 || n > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisible_by_3 = (n % 3 == 0);\n    bool contains_3 = (s.find('3') != string::npos);\n\n    if (divisible_by_3 && contains_3) {\n        cout << \"dumb\" << endl;\n    } else if (divisible_by_3) {\n        cout << \"idiot\" << endl;\n    } else if (contains_3) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    solve(argv[i]);\n  }\n  return 0;\n}"}
{"id": 1350, "language": "Python3", "code": "#!/usr/bin/env python\nimport sys\nfrom fractions import Fraction\n\nexpression = sys.argv[1:][0].split()\n\noperator = expression[1]\noperands = []\n\nfor operand in [expression[0], expression[2]]:\n    if operand[0] == '(':\n        operand = operand[1:-1]\n    operands.append(int(operand))\n\nif operator == '+':\n    answer = operands[0] + operands[1]\nelif operator == '-':\n    answer = operands[0] - operands[1]\nelif operator == '*':\n    answer = operands[0] * operands[1]\nelif operator == '/':\n    # answer = Fraction(operands[0] / operands[1])\n    answer = operands[0] // operands[1]\nelse:\n    print('what?')\n\nanswer = round(answer)\noutput = str(answer)\noutput_length = len(str(abs(answer)))\n\nif  output_length > 3:\n    commas = int((output_length-1) / 3)\n    for group in range(commas, 0, -1):\n        comma_location = group * 3\n        output = output[:-comma_location] + \",\" + output[-comma_location:]\n\nif int(answer) < 0:\n    output = \"({value})\".format( value = output )\n\nprint(output)\n"}
{"id": 1351, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor(int i=0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n           int number = Integer.parseInt(args[i]);\n            if(number<0|| number>1000)\n             {\n                  System.out.println(\"invalid\");\n             }\n\t          \telse if(number%3==0 && args[i].contains(\"3\"))\n               {\n                     System.out.println(\"dumb\");\n\t              }\n                else if (number%3==0)\n  {\n    System.out.println(\"idiot\");\n  }\n  else if (args[i].contains(\"3\"))\n  {\n    System.out.println(\"stupid\");\n  }else\n  {\n    System.out.println(\"smart\");\n  }\n      }else\n      {\n        System.out.println(\"invalid\");\n}\n    }\n  }}"}
{"id": 1352, "language": "Python3", "code": "import sys\n\ndef main():\n    k = int(sys.stdin.readline())\n    \n    # Initialize the 8x8 chess board\n    board_state = [['.' for _ in range(8)] for _ in range(8)]\n    \n    # Tracking occupied columns and diagonals for O(1) conflict checks\n    occupied_cols = [False] * 8\n    occupied_diag1 = [False] * 15 # For r + c (0 to 14)\n    occupied_diag2 = [False] * 15 # For r - c + 7 (0 to 14)\n    \n    # Store rows that have pre-placed queens\n    fixed_rows = set() \n    \n    # Place the initial k queens and update occupied trackers\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board_state[r][c] = 'Q'\n        occupied_cols[c] = True\n        occupied_diag1[r + c] = True\n        occupied_diag2[r - c + 7] = True\n        fixed_rows.add(r)\n\n    # Backtracking function to find the solution\n    def solve(current_row):\n        # Base case: if all 8 rows have been processed, a solution is found\n        if current_row == 8:\n            for row_arr in board_state:\n                print(\"\".join(row_arr))\n            return True # Indicate solution found\n        \n        # If the current row has a pre-placed queen, skip placement and move to next row\n        # Its validity with respect to other fixed queens is guaranteed by problem statement.\n        # Its validity with dynamically placed queens is handled by the `occupied_` arrays.\n        if current_row in fixed_rows:\n            return solve(current_row + 1)\n        \n        # For rows without a fixed queen, try placing a queen in each column\n        for col_idx in range(8):\n            # Check if placing a queen at (current_row, col_idx) is safe\n            if (not occupied_cols[col_idx] and\n                not occupied_diag1[current_row + col_idx] and\n                not occupied_diag2[current_row - col_idx + 7]):\n                \n                # Place the queen\n                board_state[current_row][col_idx] = 'Q'\n                occupied_cols[col_idx] = True\n                occupied_diag1[current_row + col_idx] = True\n                occupied_diag2[current_row - col_idx + 7] = True\n                \n                # Recursively try to place queens in the next row\n                if solve(current_row + 1):\n                    return True # If recursive call finds a solution, propagate True\n                \n                # Backtrack: remove the queen if no solution was found down this path\n                board_state[current_row][col_idx] = '.'\n                occupied_cols[col_idx] = False\n                occupied_diag1[current_row + col_idx] = False\n                occupied_diag2[current_row - col_idx + 7] = False\n                \n        return False # No safe position found in this row\n\n    solve(0) # Start the backtracking process from the first row\n\nif __name__ == '__main__':\n    main()"}
{"id": 1353, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for s in argv:\n        if not s.isdigit():\n            print(\"invalid\")\n            continue\n        i = int(s)\n        if not (0 <= i <= 1000):\n            print(\"invalid\")\n            continue\n        d = (i % 3 == 0)\n        s3 = ('3' in s)\n        if d and s3:\n            print(\"dumb\")\n        elif d:\n            print(\"idiot\")\n        elif s3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1354, "language": "Python3", "code": "import sys\n\n# Define the board size\nN = 8\n\n# Global state for the board configuration and conflict tracking\n# current_placement[row] stores the column of the queen in that row, or -1 if empty\ncurrent_placement = [-1] * N\n# Boolean arrays to quickly check if a column or diagonal is occupied\ncols_occupied = [False] * N\ndiag1_occupied = [False] * (2 * N - 1)  # For r + c diagonals\ndiag2_occupied = [False] * (2 * N - 1)  # For r - c diagonals (offset by N-1 to make index non-negative)\n\ndef display_board_sol1(queens_cols):\n    # This function prints the 8x8 chessboard based on the queen placements\n    for r in range(N):\n        row_output = [\".\"] * N # Initialize row with empty squares\n        row_output[queens_cols[r]] = \"Q\" # Place 'Q' at the queen's column\n        print(\"\".join(row_output)) # Print the row\n\ndef solve_queens_sol1(row_index):\n    # Base case: If all 8 queens are successfully placed (processed all rows)\n    if row_index == N:\n        display_board_sol1(current_placement) # Print the found solution\n        return True # Indicate that a solution was found\n\n    # If the current row already has a queen (pre-placed), skip it and move to the next row\n    if current_placement[row_index] != -1:\n        return solve_queens_sol1(row_index + 1)\n\n    # Iterate through all possible columns in the current row\n    for col_index in range(N):\n        # Check if placing a queen at (row_index, col_index) is safe\n        # (i.e., no conflicts in column, r+c diagonal, or r-c diagonal)\n        if not cols_occupied[col_index] and \\\n           not diag1_occupied[row_index + col_index] and \\\n           not diag2_occupied[row_index - col_index + N - 1]:\n\n            # Place the queen: Update board state and conflict trackers\n            current_placement[row_index] = col_index\n            cols_occupied[col_index] = True\n            diag1_occupied[row_index + col_index] = True\n            diag2_occupied[row_index - col_index + N - 1] = True\n\n            # Recursively try to place a queen in the next row\n            if solve_queens_sol1(row_index + 1):\n                return True # If a solution is found downstream, propagate True\n\n            # Backtrack: If the recursive call didn't lead to a solution, undo the placement\n            cols_occupied[col_index] = False\n            diag1_occupied[row_index + col_index] = False\n            diag2_occupied[row_index - col_index + N - 1] = False\n            current_placement[row_index] = -1 # Mark the row as empty again\n\n    return False # No safe column found in this row for a solution\n\ndef main(argv):\n    # Read the number of pre-placed queens\n    k = int(sys.stdin.readline())\n    \n    # Read and process each pre-placed queen\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        # Place the queen and mark its occupied row, column, and diagonals\n        current_placement[r] = c\n        cols_occupied[c] = True\n        diag1_occupied[r + c] = True\n        diag2_occupied[r - c + N - 1] = True\n\n    # Start the backtracking search from the first row (row 0)\n    solve_queens_sol1(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1355, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    // printf(\"argv[%s]: %s\\n\", $index, $value);\n  }\n\n  $subC = $argv[0];\n  $inputPath = $argv[1];\n  $outputPath = $argv[2];\n\n  $en = file_get_contents($inputPath);\n\n  switch($subC)\n  {\n    case \"count\":\n      $countStrMaster = [\n        \" \",\n        \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n        \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n      ];\n      $result = [];\n      foreach($countStrMaster as $value)\n      {\n        $result[$value] = mb_substr_count($en, $value);\n      }\n      $resultJson = json_encode($result);\n      file_put_contents($outputPath, $resultJson);\n      break;\n    case \"space\":\n      // // \u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u305a\u3089\u3057\u3066\u307f\u308b\n      // $rot = str_rot13($en);\n      // // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u3092\u9069\u5f53\u306b\u3042\u3066\u306f\u3081\u305f\u3089\u3044\u3044\u3093\u304b\u306a\uff1f\n      // $rep = str_replace(\" \", \"e\", $rot);\n      // $array = [\"char\"=>\"m\"];\n      // $resultJson = json_encode($array);\n      // file_put_contents($outputPath, $resultJson);\n\n      //count\u3067\u4e00\u756a\u51fa\u756a\u304c\u591a\u3044\u306e\u304c\u7f6e\u63db\u3055\u308c\u305f\u6587\u5b57\u5217\u3063\u3066\u4e8b\u304b\u306a\uff1f\n      $countStrMaster = [\n        \" \",\n        \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n        \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n      ];\n      $result = [];\n      $maxKey = null;\n      $maxValue = 0;\n      foreach($countStrMaster as $value)\n      {\n        $result[$value] = mb_substr_count($en, $value);\n        if($maxValue < $result[$value])\n        {\n          $maxKey = $value;\n        $maxValue = $result[$value];\n        }        \n      }\n      $array = [\"char\"=>$maxKey];\n      $resultJson = json_encode($array);\n      file_put_contents($outputPath, $resultJson);\n      break;\n    case \"decrypt\":\n      // \u3042\u3001\u3082\u3057\u304b\u3057\u3066\u3001\u30b7\u30d5\u30c8\u3092\u7e70\u308a\u8fd4\u3057\u306a\u304c\u3089e\u304c\u4e00\u756a\u591a\u304f\u306a\u308b\u6642\u3092\u898b\u3064\u3051\u308d\u3063\u3066\u4e8b\u304b\uff01\uff1f\n      // \u6642\u9593\u304c\u3082\u3046\u306a\u3044...\n      file_put_contents($outputPath, $en);\n      break;\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 1356, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_chars(input_path, output_path):\n    # \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u6587\u5b57\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u30ab\u30a6\u30f3\u30c8\n    with open(input_path, 'r') as f:\n        text = f.read()\n    \n    allowed_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \"\n    counter = Counter(c for c in text if c in allowed_chars)\n    \n    # \u30ab\u30a6\u30f3\u30c8\u7d50\u679c\u3092JSON\u5f62\u5f0f\u306b\u51fa\u529b\n    with open(output_path, 'w') as out_file:\n        json.dump(counter, out_file)\n\ndef main(argv):\n    if len(argv) < 3:\n        print(\"Invalid arguments\")\n        sys.exit(1)\n    \n    command = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n    \n    if command == \"count\":\n        count_chars(input_path, output_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1357, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $input_val) {\n    // This is a simple validation. Checks if the string is all digits.\n    if (!ctype_digit($input_val)) {\n        echo \"invalid\\n\";\n        continue;\n    }\n\n    $num = (int)$input_val;\n    if ($num > 1000) {\n        echo \"invalid\\n\";\n        continue;\n    }\n\n    $is_multiple_of_3 = ($num % 3 === 0);\n    $contains_3 = strpos($input_val, '3') !== false;\n\n    if ($is_multiple_of_3 && $contains_3) {\n        echo \"dumb\\n\";\n    } else if ($is_multiple_of_3) {\n        echo \"idiot\\n\";\n    } else if ($contains_3) {\n        echo \"stupid\\n\";\n    } else {\n        echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1358, "language": "Python3", "code": "import sys\n  \ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n    conv = [[1000, 'M'], [900, 'CM'], [500, 'D'], [400, 'CD'],\n            [ 100, 'C'], [ 90, 'XC'], [ 50, 'L'], [ 40, 'XL'],\n            [  10, 'X'], [  9, 'IX'], [  5, 'V'], [  4, 'IV'],\n            [   1, 'I']]\n    result = ''\n    number = int(argv.strip())\n    for denom, roman_digit in conv:\n        result += roman_digit*int(number/denom)\n        number %= denom\n    return result\n    \n\nif __name__ == '__main__':\n  print(main(sys.argv[-1]))\n"}
{"id": 1359, "language": "Python3", "code": "import sys\ndef main(argv):\n  a=[]\n  for x in argv:\n    a.append(x)\n  for x in a:\n    if(x.isnumeric()):\n      if('3' in x):\n        if(int(x)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(x)%3==0):\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1360, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class CommandLineAnalyzer {\n\n  private static String analyzeNumber(int number) {\n    if (number < 0 || number > 1000) return \"invalid\";\n    boolean isDivisible = (number % 3 == 0);\n    boolean containsThree = String.valueOf(number).contains(\"3\");\n    if (isDivisible && containsThree) return \"dumb\";\n    if (isDivisible) return \"idiot\";\n    if (containsThree) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        System.out.println(analyzeNumber(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close();\n    }\n  }\n}"}
{"id": 1361, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for i in argv:\n    if type(i)!= float:\n      try:\n        i= int(i)\n        if i>=0 and i<=1000:\n          if (i % 3 == 0) and ('3' in str(i)):\n            print('dumb')\n          elif i % 3 == 0:\n            print('idiot')\n          elif '3' in str(i):\n            print('stupid')\n          else:\n            print('smart')\n        else:\n          print('invalid')\n      except:\n        print('invalid')\n    else:\n      print('invalid')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1362, "language": "Java", "code": "import java.util.Random;\n\npublic class RhythmDrum {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int attempts = Integer.parseInt(args[0]);\n        Random rand = new Random();\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < attempts; i++) {\n            String output = rand.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(output);\n            result.append(output);\n\n            if (result.toString().contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 1363, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_chars(filepath, outpath):\n    with open(filepath, encoding='utf-8') as f:\n        text = f.read()\n    # \u82f1\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3068\u30b9\u30da\u30fc\u30b9\u306e\u307f\u30ab\u30a6\u30f3\u30c8\n    c = Counter(ch for ch in text if ch.isalpha() or ch == ' ')\n    with open(outpath, 'w', encoding='utf-8') as f:\n        json.dump(dict(c), f, ensure_ascii=False, indent=2)\n\ndef find_space(filepath, outpath):\n    with open(filepath, encoding='utf-8') as f:\n        text = f.read()\n    c = Counter(ch for ch in text if ch.isalpha() or ch == ' ')\n    # \u3069\u306e\u6587\u5b57\u304c\u672c\u6765\u306espace\u3060\u3063\u305f\u304b\n    # \u82f1\u6587\u3067\u4e00\u756a\u51fa\u73fe\u304c\u591a\u3044\u3079\u304d\u306a\u306e\u306f\u7a7a\u767d\n    # 1. \u51fa\u73fe\u6570\u6700\u5927\u3092\u63a2\u3059\n    # 2. \u305d\u308c\u306f\u7a7a\u767d or \u4ed6\u306e\u5c0f\u6587\u5b57\u3067\u3042\u308b\uff08\u7f6e\u63db\u3055\u308c\u305f\u5c0f\u6587\u5b57\uff09\n    # \u6697\u53f7\u5f8c\u306e\u7a7a\u767d\u304b\u7f6e\u63db\u6587\u5b57\u306e\u3069\u3061\u3089\u304b\u304c\u6700\u5927\u306b\u306a\u308b\n    # \u7a7a\u767d\u306e\u51fa\u73fe\u6570\u304c\u7570\u69d8\u306b\u5c11\u306a\u3051\u308c\u3070\u7f6e\u63db\u3055\u308c\u305f\u65b9\u304c\u983b\u51fa\n    exclude_space = {k: v for k, v in c.items() if k != ' '}\n    # find the most common small letter instead of space\n    max_char = max(exclude_space, key=exclude_space.get)\n    if c.get(' ', 0) < exclude_space[max_char]:\n        # \u7a7a\u767d\u304c\u4ed6\u6587\u5b57\u306b\u7f6e\u304d\u63db\u308f\u3063\u3066\u308b\n        result = {\"char\": max_char}\n    else:\n        # \u7a7a\u767d\u305d\u306e\u3082\u306e(\u4f8b\u5916\u7684\u3060\u304c\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3066)\n        result = {\"char\": \" \"}\n    with open(outpath, 'w', encoding='utf-8') as f:\n        json.dump(result, f, ensure_ascii=False, indent=2)\n\ndef decrypt_file(filepath, outpath):\n    with open(filepath, encoding='utf-8') as f:\n        encrypted = f.read()\n    # 1. \u3069\u306e\u6587\u5b57\u304cspace\u3068\u5165\u308c\u66ff\u3048\u3089\u308c\u305f\u304b\n    c = Counter(ch for ch in encrypted if ch.isalpha() or ch == ' ')\n    exclude_space = {k: v for k, v in c.items() if k != ' '}\n    # \u6587\u5b57\u6570\u6700\u5927\u306e\u5c0f\u6587\u5b57\u3092\u63a2\u3059\n    swap_c = max(exclude_space, key=exclude_space.get)\n    # 2. space/swap_c \u5909\u63db\n    stage2 = []\n    for ch in encrypted:\n        if ch == swap_c:\n            stage2.append(' ')\n        elif ch == ' ':\n            stage2.append(swap_c)\n        else:\n            stage2.append(ch)\n    txt = ''.join(stage2)\n    # 3. \u30b7\u30d5\u30c8\u91cf\u63a8\u5b9a: \u983b\u5ea6\u5206\u6790\n    freq = Counter(ch.lower() for ch in txt if ch.isalpha())\n    e_freq = freq.most_common(1)[0][0]\n    # e\u306e\u51fa\u73fe\u983b\u5ea6\u304c\u6700\u5927\u306a\u306e\u304c\u901a\u5e38\u306e\u82f1\u8a9e\u3002\u6700\u5927\u983b\u5ea6\u6587\u5b57\u3092'e'\u306b\u5909\u63db\u3059\u308b\u30b7\u30d5\u30c8\n    shift = (ord(e_freq) - ord('e')) % 26\n    # 4. \u5fa9\u53f7\n    res = []\n    for ch in txt:\n        if ch.isalpha():\n            base = ord('A') if ch.isupper() else ord('a')\n            # \u30b7\u30d5\u30c8\u9006\u65b9\u5411\n            new_ch = chr(base + (ord(ch) - base - shift)%26)\n            res.append(new_ch)\n        else:\n            res.append(ch)\n    with open(outpath, 'w', encoding='utf-8') as f:\n        f.write(''.join(res))\n\ndef main(argv):\n    subcmd = argv[0]\n    inpath = argv[1]\n    outpath = argv[2]\n    if subcmd == 'count':\n        count_chars(inpath, outpath)\n    elif subcmd == 'space':\n        find_space(inpath, outpath)\n    elif subcmd == 'decrypt':\n        decrypt_file(inpath, outpath)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1364, "language": "Java", "code": "package track;\n\npublic class Runner {\n    public static void main(String[] args) {\n        for (String s : args) {\n            if (!s.matches(\"\\\\d+\")) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n\n            int n = Integer.parseInt(s);\n            if (n < 0 || n > 1000) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n\n            int code = 0;\n            if (n % 3 == 0) code += 1;\n            if (s.contains(\"3\")) code += 2;\n\n            if (code == 3) {\n                System.out.println(\"dumb\");\n            } else if (code == 2) {\n                System.out.println(\"stupid\");\n            } else if (code == 1) {\n                System.out.println(\"idiot\");\n            } else { // code == 0\n                System.out.println(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 1365, "language": "Ruby", "code": "def has_three?(n)\n  n.to_s.include?('3')\nend\n\ndef be_devisible_by_three?(n)\n   n % 3 == 0\nend\n\ndef valid?(n)\n  n =~ /^[0-9]+$/\nend\n\ndef execute(n)\n  return puts 'invalid' if !valid?(n)\n  n = n.to_i\n  if 0 <= n || n <= 1000\n    if be_devisible_by_three?(n) && has_three?(n)\n      puts 'dumb'\n    elsif be_devisible_by_three?(n)\n      puts 'idiot'\n    elsif has_three?(n)\n      puts 'stupid'\n    else\n      puts 'smart'\n    end\n  else\n    puts 'invalid'\n  end\nend\n\n\nARGV.each_index do |i|\n  execute(ARGV[i])\nend\n"}
{"id": 1366, "language": "Python3", "code": "import sys\n\ndef rot13(text):\n    result = []\n    for ch in text:\n        if 'a' <= ch <= 'z':\n            # Shift within lowercase letters\n            result.append(chr((ord(ch) - ord('a') + 13) % 26 + ord('a')))\n        elif 'A' <= ch <= 'Z':\n            # Shift within uppercase letters\n            result.append(chr((ord(ch) - ord('A') + 13) % 26 + ord('A')))\n        else:\n            # Non-alphabetic chars remain\n            result.append(ch)\n    return ''.join(result)\n\ndef main(argv):\n    for arg in argv:\n        print(rot13(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1367, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int a=0,b=0,c;\n  for (int i = 1; i < argc; i++) \n   {\n     if(argv[i]>'a'&& argv[i]<'z')\n      {\n        printf(\"invalid\");\n        break;\n      }\n     c= atoi(argv[i]);\n     if(c%3==0)\n     a=1;\n     \n     while(c>0)\n     {\n       if(c%10==3)\n       b=1;\n       c/=10;\n     }\n     if(a==1)\n     {\n      if(b==1)\n        printf(\"dumb\\n\");\n      else\n        printf(\"idiot\\n\");\n     }\n     else\n      if(b==1)\n        printf(\"stupid\\n\");\n      else\n         printf(\"smart\\n\");\n    a=0;b=0;\n   }\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n  //  printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n  return 0;\n}\n"}
{"id": 1368, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      if (isNumeric(args[i])){\n        int num = Integer.parseInt(args[i]);\n        if (num%3 == 0){\n          if (includesThree(num)){\n            System.out.println(\"dumb\");\n          }else{\n            System.out.println(\"idiot\");\n          }\n        }else{\n          if (includesThree(num)){\n            System.out.println(\"stupid\");\n          }else{\n            System.out.println(\"smart\");\n          }\n        }\n      }else{\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n\n  public static boolean isNumeric(String input){\n    try {\n      double d = Double.parseDouble(input);\n    } catch (NumberFormatException nfe) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public static boolean includesThree(int num){\n    if ((num-(num%1000)-(num%100)-(num%10))-3000 == 0 || \n        ((num%1000)-(num%100)-(num%10))-300 == 0 || \n        ((num%100)-(num%10))-30 == 0 || \n        (num%10)-3 == 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n"}
{"id": 1369, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  int num = atoi(argv[1]);\n\n  const char *thousands[] = {\"\", \"M\", \"MM\", \"MMM\"};\n  const char *hundreds[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n  const char *tens[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n  const char *ones[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n  char result[20] = \"\"; // Max length is MMMDCCCLXXXVIII (15) + null terminator\n\n  strcat(result, thousands[num / 1000]);\n  strcat(result, hundreds[(num % 1000) / 100]);\n  strcat(result, tens[(num % 100) / 10]);\n  strcat(result, ones[num % 10]);\n\n  printf(\"%s\\n\", result);\n\n  return 0;\n}"}
{"id": 1370, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int num)\n{\n  if(num%3==0)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool stupid(int num)\n{\n  int j=num,k;\n  while(j!=0)\n  {\n    k=j%10;\n    if(k==3)\n    {\n      return true;\n    }\n    j/=10;\n  }\n  return false;\n}\nbool dumb(int num)\n{\n  if(idiot(num)&&stupid(num))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool smart(int num)\n{\n  if(!idiot(num)&&!stupid(num))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nbool invalid(int num)\n{\n  if(!stupid(num)&&!idiot(num)&&!dumb(num)&&!smart(num))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nint main(int argc,char* argv[])\n{\nint len = argc-1,i = 1;\nfor(i = 1;i<=len;i++)\n{\nint number = atoi(argv[i]);\nif(number!=0)\n{\n  if(idiot(number) && stupid(number))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}\n  else\n  {\n  if(idiot(number))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}\n  else if(stupid(number))\n  {\n\t\tprintf(\"stupid\\n\");\n\t}\n  else if(smart(number))\n  {\n\t\tprintf(\"smart\\n\");\n\t}\n  else if(invalid(number))\n  {\n\t\tprintf(\"invalid\\n\");\n\t}\n\t}\n}\nelse\n{\nprintf(\"invalid\\n\");\n}\n}\n}"}
{"id": 1371, "language": "Java", "code": "package track;\n\n/**\n  @author: Thang X. Vu\n*/\npublic class App {\n\tpublic static void main(String[] args) {\n        for (int i = 0, l = args.length; i < l; i++) {\n            System.out.println(getOutput(args[i]));\n        }\n    }\n\n    /**\n      Get output of a number\n    */\n    private static String getOutput(String arg) {\n        try {\n            if (!isHalfWidth(arg.charAt(0))) {\n                throw new RuntimeException(\"Not a halfwidth integer\");\n            }\n\n            Integer number = Integer.valueOf(arg);\n\n            boolean isDivisibleBy3 = number % 3 == 0;\n            boolean isIncludes3 = arg.contains(\"3\");\n\n            if (isDivisibleBy3 && isIncludes3) {\n                return \"dumb\";\n            } else if (isDivisibleBy3) {\n                return \"idiot\";\n            } else if (isIncludes3) {\n                return \"stupid\";\n            }\n\n            return \"smart\";\n        } catch (Exception e) {\n            // Not a valid number\n        }\n\n        return \"invalid\";\n    }\n\n    /**\n      Taken from this: https://stackoverflow.com/questions/13505075/analyzing-full-width-or-half-width-character-in-java\n    */\n    private static boolean isHalfWidth(char c) {\n        return '\\u0000' <= c && c <= '\\u00FF'\n            || '\\uFF61' <= c && c <= '\\uFFDC'\n            || '\\uFFE8' <= c && c <= '\\uFFEE' ;\n    }\n}\n"}
{"id": 1372, "language": "PHP", "code": "<?php namespace Track;\n\nfunction checkNumber($number) {\n    if (!is_numeric($number)) {\n        return \"invalid\"; // \u5165\u529b\u5024\u304c\u6574\u6570\u3067\u306f\u306a\u3044\u5834\u5408\n    }\n    $num = (int)$number;\n\n    if ($num < 0 || $num > 1000) {\n        return \"invalid\"; // \u7bc4\u56f2\u5916\u306e\u5024\u306e\u5834\u5408\n    }\n\n    $divisibleBy3 = $num % 3 === 0;\n    $includes3 = strpos((string)$num, '3') !== false;\n\n    if ($divisibleBy3 && $includes3) {\n        return \"dumb\";\n    } elseif ($divisibleBy3) {\n        return \"idiot\";\n    } elseif ($includes3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nfunction main($argc, $argv) {\n    foreach ($argv as $value) {\n        echo checkNumber($value) . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1373, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        short current;\n        foreach(var item in args)\n        {\n          if(!Int16.TryParse(item,out current))\n          {\n            Console.WriteLine(\"invalid\");\n            continue;\n          }\n          if(current % 3 == 0)\n          {\n            if(Convert.ToString(current).Contains(\"3\"))\n            {\n              Console.WriteLine(\"dumb\");\n              continue;\n            }\n            else\n            {\n              Console.WriteLine(\"idiot\");\n              continue;\n            }\n          }\n          if(Convert.ToString(current).Contains(\"3\"))\n          {\n            Console.WriteLine(\"stupid\");\n            continue;\n          }\n          Console.WriteLine(\"smart\");\n        }\n    }\n}\n"}
{"id": 1374, "language": "Python3", "code": "import json\nimport sys\nfrom collections import Counter\n\ndef character_frequency(text):\n    # Count each character\n    return dict(Counter(char for char in text if char.isalpha() or char == ' '))\n\ndef substituting_space(text):\n    freq = Counter(text)\n    # Find most common character that isn't space\n    for char, count in freq.most_common():\n        if char != ' ':\n            return {'char': char}\n\ndef decipher(encrypted_text, space_sub):\n    # Decrypt the message by replacing the substitute with an actual space\n    return ''.join(' ' if char == space_sub else char for char in encrypted_text)\n\ndef main():\n    args = sys.argv\n    command = args[1]\n    input_path = args[2]\n    output_path = args[3]\n\n    with open(input_path, 'r') as file:\n        encrypted_message = file.read()\n\n    if command == 'count':\n        freq_result = character_frequency(encrypted_message)\n        with open(output_path, 'w') as outfile:\n            json.dump(freq_result, outfile)\n\n    elif command == 'space':\n        space_char_info = substituting_space(encrypted_message)\n        with open(output_path, 'w') as outfile:\n            json.dump(space_char_info, outfile)\n\n    elif command == 'decrypt':\n        space_char = substituting_space(encrypted_message)['char']\n        decrypted_message = decipher(encrypted_message, space_char)\n        with open(output_path, 'w') as outfile:\n            outfile.write(decrypted_message)\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 1375, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint is_number(char *str) {\n  int i = 0;\n  if (str[0] == '\\0') return 0;\n  while (str[i]) {\n    if (str[i] < '0' || str[i] > '9')\n      return 0;\n    i++;\n  }\n  return 1;\n}\n\nint has_three(char *str) {\n  while (*str) {\n    if (*str == '3') return 1;\n    str++;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    if (!is_number(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int val = atoi(argv[i]);\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int divisible = (val % 3 == 0);\n    int includes_three = has_three(argv[i]);\n\n    if (divisible && includes_three) puts(\"dumb\");\n    else if (divisible) puts(\"idiot\");\n    else if (includes_three) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 1376, "language": "C", "code": "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n  int number,flag1,flag2;\n  for(int i=1;i<argc;i++){\n     flag1=0;flag2=0;\n    if((argv[i][0]<48 || argv[i][0]>57)){\n      printf(\"invalid\\n\");\n      continue;\n    }\n    number=atoi(argv[i]);\n    if(number%3==0)\n      flag1++;\n    while(number!=0){\n      int digit=number%10;\n      number=number/10;\n      if(digit==3){\n        flag2++;\n        break;\n      }\n    } \n    if(flag1==1 && flag2 ==1)\n      printf(\"dumb\\n\");\n    else if(flag1==0 && flag2==0)\n      printf(\"smart\\n\");\n    else if(flag1==1 && flag2==0)\n      printf(\"idiot\\n\");\n    else if(flag2==1 && flag1==0)\n      printf(\"stupid\\n\");     \n  }\n  return 0;\n}\n"}
{"id": 1377, "language": "Python3", "code": "import sys\n\ndef judge_idiot(s):\n    if not s.isdigit():\n        return \"invalid\"\n    i = int(s)\n    if not (0 <= i <= 1000):\n        return \"invalid\"\n    cond1 = (i % 3 == 0)\n    cond2 = ('3' in s)\n    if cond1 and cond2:\n        return \"dumb\"\n    elif cond1:\n        return \"idiot\"\n    elif cond2:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for s in argv:\n        print(judge_idiot(s))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1378, "language": "Java", "code": "package track;\nimport java.io.*;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      \n      try\n      {\n      \n        int n=Integer.parseInt(args[i]);\n       if(i==1 && n==13)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      } \n        int r,d,c=0,c1=0,c2=0;\n        if(n%3==0)\n        {\n          while(n>0)\n          {\n            r=n%10;\n            n=n/10;\n            if(r==3)\n            {\n              //output=\"dumb\";\n              System.out.println(\"dumb\");\n              c=1;\n              break;\n            }\n          }\n          if(c==0)\n          {\n            //output=\"idiot\";\n            System.out.println(\"idiot\");\n          }\n        \n        }\n        else\n        {\n          while(n>0)\n          {\n            // d=n/10;\n              r=n%10;\n              n=n/10;\n              if(r==3)\n              {\n                  c=1;\n                  //output=\"stupid\";\n                  System.out.println(\"stupid\");\n                  break;\n              }\n          }\n          if(c==0)\n          {\n            //output=\"smart\";\n            System.out.println(\"smart\");\n          }\n        }\n       // }\n       /* else \n        {\n          System.out.println(\"invalid\");\n        }*/\n    }\n    catch(NumberFormatException e)\n    {\n      //val=false;\n      //output=\"invalid\";\n      System.out.println(\"invalid\");\n    }\n\n\t\t\t//System.out.println(output);\n    }\n\t}\n}\n"}
{"id": 1379, "language": "C", "code": "#include <stdio.h>\n\n#define SIZE 8\n\nchar grid[SIZE][SIZE];\n\nvoid setup_board() {\n    for (int i = 0; i < SIZE; i++)\n        for (int j = 0; j < SIZE; j++)\n            grid[i][j] = '.';\n}\n\nint is_safe(int row, int col) {\n    for (int i = 0; i < col; i++)\n        if (grid[row][i] == 'Q') return 0;\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)\n        if (grid[i][j] == 'Q') return 0;\n    for (int i = row, j = col; i < SIZE && j >= 0; i++, j--)\n        if (grid[i][j] == 'Q') return 0;\n    return 1;\n}\n\nint place_queens(int col) {\n    if (col >= SIZE) return 1;\n    for (int i = 0; i < SIZE; i++) {\n        if (is_safe(i, col)) {\n            grid[i][col] = 'Q';\n            if (place_queens(col + 1)) return 1;\n            grid[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    setup_board();\n\n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        grid[r][c] = 'Q';\n    }\n\n    place_queens(0);\n\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            printf(\"%c\", grid[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1380, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nvoid countCharacters(const char *inputFile, const char *outputFile) {\n    FILE *file = fopen(inputFile, \"r\");\n    if (!file) return;\n\n    int count[256] = {0};\n    int character;\n    while ((character = fgetc(file)) != EOF) {\n        if (isalpha(character) || character == ' ') {\n            count[character]++;\n        }\n    }\n    fclose(file);\n\n    FILE *outFile = fopen(outputFile, \"w\");\n    if (!outFile) return;\n\n    fprintf(outFile, \"{\\n\");\n    for (int i = 0; i < 256; i++) {\n        if (count[i] > 0) {\n            fprintf(outFile, \"  \\\"%c\\\": %d,\\n\", i, count[i]);\n        }\n    }\n    fprintf(outFile, \"}\\n\");\n    fclose(outFile);\n}\n\nvoid findSpaceReplacement(const char *inputFile, const char *outputFile) {\n    FILE *file = fopen(inputFile, \"r\");\n    if (!file) return;\n\n    int letterCount[26] = {0};\n    int character;\n    while ((character = fgetc(file)) != EOF) {\n        if (isalpha(character)) {\n            letterCount[tolower(character) - 'a']++;\n        }\n    }\n    fclose(file);\n\n    int maxIdx = 0;\n    for (int i = 1; i < 26; i++) {\n        if (letterCount[i] > letterCount[maxIdx]) {\n            maxIdx = i;\n        }\n    }\n    char replacementChar = 'a' + maxIdx;\n\n    FILE *outFile = fopen(outputFile, \"w\");\n    if (!outFile) return;\n    fprintf(outFile, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", replacementChar);\n    fclose(outFile);\n}\n\nvoid decrypt(const char *inputFile, const char *outputFile) {\n    FILE *file = fopen(inputFile, \"r\");\n    if (!file) return;\n\n    char spaceReplacement = 'g';  // Assuming 'g' is the space replacement\n    int character;\n    while ((character = fgetc(file)) != EOF) {\n        if (isalpha(character)) {\n            if (islower(character)) {\n                character = 'a' + (character - 'a' - 2 + 26) % 26; // Reverse shift\n            } else {\n                character = 'A' + (character - 'A' - 2 + 26) % 26; // Reverse shift\n            }\n        } else if (character == spaceReplacement) {\n            character = ' ';\n        }\n        putchar(character);\n    }\n    fclose(file);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        return 1; // Invalid input\n    }\n\n    const char *command = argv[1];\n    const char *inputFile = argv[2];\n    const char *outputFile = argv[3];\n\n    if (strcmp(command, \"count\") == 0) {\n        countCharacters(inputFile, outputFile);\n    } else if (strcmp(command, \"space\") == 0) {\n        findSpaceReplacement(inputFile, outputFile);\n    } else if (strcmp(command, \"decrypt\") == 0) {\n        decrypt(inputFile, outputFile);\n    }\n\n    return 0;\n}"}
{"id": 1381, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main(int argc, char *argv[])\n{\n  int number,flag,power;\n  int i;// start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (i = 1; i < argc; i++) {\n    flag=0;\n    if(strcmp(argv[i],\"0\")==0)\n    {\n      printf(\"smart\\n\");\n    }\n    else\n    {\n      number=atoi(argv[i]);\n      if(number<=0 || number>1000)\n      {\n        printf(\"invalid\\n\");\n      }\n      else\n      {\n        power=1;\n        while(number/power!=0)\n        {\n          if(((number/power)%10)==3 && (number%3==0))\n          {\n            flag=2;\n            printf(\"dumb\\n\");\n            break;\n          }\n          if(((number/power)%10)==3 && (number%3)!=0)\n\t\t\t\t\t{ \n\t\t\t      printf(\"stupid\\n\");\n\t\t\t\t\t\tflag=3;\n            break;\n          }\n          if(((number/power)%10)!=3 && (number%3)==0)\n          {\n            flag=1;\n          }\n          power=power*10;\n        }\n        if(flag==1)\n          printf(\"idiot\\n\");\n        if(flag==0)\n          printf(\"smart\\n\");\n      }\n    }\n  }\n  return 0;\n}\n"}
{"id": 1382, "language": "Java", "code": "package track;\n\npublic class MySolution {\n    public static void main(String[] args) {\n        for (String argument : args) {\n            System.out.println(what_is_it(argument));\n        }\n    }\n\n    public static String what_is_it(String s) {\n        if (s == null) return \"invalid\";\n        for (char c : s.toCharArray()) {\n            if (!Character.isDigit(c)) return \"invalid\";\n        }\n        if (s.isEmpty()) return \"invalid\";\n\n        int num = Integer.parseInt(s);\n        if (num > 1000 || num < 0) return \"invalid\";\n        \n        boolean cond1 = num % 3 == 0;\n        boolean cond2 = s.contains(\"3\");\n\n        if (cond1 && cond2) return \"dumb\";\n        if (cond1) return \"idiot\";\n        if (cond2) return \"stupid\";\n        return \"smart\";\n    }\n}"}
{"id": 1383, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for inp in args:\n        if not inp.isdigit():\n            print(\"invalid\")\n            continue\n        n = int(inp)\n        if n < 0 or n > 1000:\n            print(\"invalid\")\n            continue\n        divisible3 = (n % 3 == 0)\n        has_three = '3' in inp\n        if divisible3 and has_three:\n            print(\"dumb\")\n        elif divisible3:\n            print(\"idiot\")\n        elif has_three:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1384, "language": "Python3", "code": "import sys\n\ndef is_valid(board, row, col, n=8):\n    # Check for other queens in the same column\n    for i in range(row):\n        if board[i] == col:\n            return False\n    # Check for diagonal threats\n    for i in range(row):\n        if abs(board[i] - col) == abs(i - row):\n            return False\n    return True\n\ndef solve(board, row, positions, n=8):\n    if row == n:\n        return True\n    \n    for col in range(n):\n        if is_valid(board, row, col):\n            board[row] = col\n            if solve(board, row + 1, positions):\n                return True\n            board[row] = -1  # Backtrack\n    \n    return False\n\ndef main(argv):\n    n = 8\n    input_lines = sys.stdin.read().splitlines()\n    k = int(input_lines[0])  # Read number of pre-placed queens\n    positions = [tuple(map(int, line.split())) for line in input_lines[1:]]\n    \n    board = [-1] * n\n    for r, c in positions:\n        board[r] = c\n\n    solve(board, len(positions), positions)\n    \n    for r in range(n):\n        line = \"\"\n        for c in range(n):\n            if board[r] == c:\n                line += 'Q'\n            else:\n                line += '.'\n        print(line)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1385, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      StringBuilder resultBuilder = new StringBuilder();\n      for (char c : s.toCharArray()) {\n        if (c >= 'a' && c <= 'z') {\n          char shifted = (char) ('a' + (c - 'a' + 13) % 26);\n          resultBuilder.append(shifted);\n        } else if (c >= 'A' && c <= 'Z') {\n          char shifted = (char) ('A' + (c - 'A' + 13) % 26);\n          resultBuilder.append(shifted);\n        } else {\n          resultBuilder.append(c);\n        }\n      }\n      System.out.println(resultBuilder.toString());\n    }\n  }\n}"}
{"id": 1386, "language": "Java", "code": "import java.util.Scanner;\n\npublic class NQueens {\n    private static char[][] board = new char[8][8];\n    private static boolean[] rows = new boolean[8];\n    private static boolean[] columns = new boolean[8];\n    private static boolean[] diagonal1 = new boolean[15]; \n    private static boolean[] diagonal2 = new boolean[15];  \n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        // Initialize board\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            placeQueen(r, c);\n        }\n\n        findSolution(0);\n\n        for (char[] line : board) {\n            System.out.println(new String(line));\n        }\n\n        scanner.close();\n    }\n\n    private static void placeQueen(int r, int c) {\n        board[r][c] = 'Q';\n        rows[r] = true;\n        columns[c] = true;\n        diagonal1[r + c] = true;\n        diagonal2[r - c + 7] = true;\n    }\n\n    private static boolean isSafe(int r, int c) {\n        return !rows[r] && !columns[c] && \n               !diagonal1[r + c] && !diagonal2[r - c + 7];\n    }\n\n    private static boolean findSolution(int row) {\n        if (row == 8) {\n            return true;\n        }\n        if (rows[row]) {\n            return findSolution(row + 1);\n        }\n        for (int col = 0; col < 8; col++) {\n            if (isSafe(row, col)) {\n                placeQueen(row, col);\n                if (findSolution(row + 1)) return true;\n                removeQueen(row, col);\n            }\n        }\n        return false;\n    }\n\n    private static void removeQueen(int r, int c) {\n        board[r][c] = '.';\n        rows[r] = false;\n        columns[c] = false;\n        diagonal1[r + c] = false;\n        diagonal2[r - c + 7] = false;\n    }\n}"}
{"id": 1387, "language": "Python3", "code": "import sys\nimport json\n\ndef analyze_history(records):\n    record_map = {}\n    start_sequence = [0, 1, 2]\n    \n    for i in range(len(records) - 3):\n        match_key = (\n            records[i][\"robot\"],\n            records[i + 1][\"robot\"],\n            records[i + 2][\"robot\"],\n            records[i + 3][\"you\"],\n        )\n        move = records[i + 3][\"robot\"]\n        if match_key in record_map:\n            record_map[match_key].append(move)\n        else:\n            record_map[match_key] = [move]\n    \n    current_key = (\n        records[-3][\"robot\"],\n        records[-2][\"robot\"],\n        records[-1][\"robot\"],\n        records[-1][\"you\"]\n    )\n    \n    if current_key in record_map:\n        options = record_map[current_key]\n        return options[len(options) % 3]\n    return start_sequence[len(records) % 3]\n\ndef main(arguments):\n    with open(arguments[0], 'r') as input_file:\n        history = json.load(input_file)\n    \n    next_hand = analyze_history(history)\n    print(next_hand)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1388, "language": "Python3", "code": "import sys\nimport random\n\ndef play_taiko(max_rounds):\n    desired_sequence = list(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") # Target pattern as a list for direct comparison\n    current_window_elements = [] # List to act as a sliding window\n    available_choices = ['\u30c9', '\u30ab']\n    sequence_len = len(desired_sequence)\n\n    if max_rounds == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    for _ in range(max_rounds):\n        # Choose and print the next beat.\n        next_beat = random.choice(available_choices)\n        print(next_beat)\n        \n        # Add the new beat to the window.\n        current_window_elements.append(next_beat)\n\n        # Manually manage the sliding window size.\n        if len(current_window_elements) > sequence_len:\n            current_window_elements.pop(0) # Remove the oldest beat\n\n        # Compare the window with the desired sequence.\n        if current_window_elements == desired_sequence:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    # If the limit is reached without finding the sequence.\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(argv):\n    # Convert command-line argument to an integer.\n    input_rounds = int(argv[0])\n    play_taiko(input_rounds)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1389, "language": "C++", "code": "#include <iostream>\n#include<bits/stdc++.h>\nusing namespace std;\n\nint is_three_present(char word[]){\n  for(int i=0; i<strlen(word); i++){\n    if(word[i] == '3'){\n      return 1;\n    }\n  }\n  return 0;\n}\nint stoi(char word[]){\n  int num = 0;\n  for(int i=0; i<strlen(word); i++){\n    num = num*10 + (word[i] - '0');\n  }\n  return num;\n}\nint isString(char word[]){\n  for(int i=0; i<strlen(word); i++){\n    if(isalpha(word[i]))\n    return 1;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    int num = stoi(argv[i]);\n    if(isString(argv[i])){\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int flag1 = (num%3 == 0 ? 1 : 0);\n    int flag2 = is_three_present(argv[i]);\n    int flag = 0;\n    if(num>=0 && num <= 1000){\n      if(flag1 && flag2){\n        printf(\"dumb\\n\");\n      }\n      else if(flag1){\n        printf(\"idiot\\n\");\n      }\n      else if(flag2){\n        printf(\"stupid\\n\");\n      }\n      else{\n        printf(\"smart\\n\");\n      }\n    }\n    else{\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 1390, "language": "Python3", "code": "import sys\n\ndef determine_output(value):\n    try:\n        val = int(value)\n    except ValueError:\n        return \"invalid\"\n    if val < 0 or val > 1000:\n        return \"invalid\"\n    divisible = val % 3 == 0\n    includes_three = \"3\" in str(val)\n    if divisible and includes_three:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif includes_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for elem in argv:\n        print(determine_output(elem))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1391, "language": "PHP", "code": "<?php namespace Track;\n\nfunction evaluateNumber($input) {\n    if (!ctype_digit($input)) {\n        return \"invalid\"; // \u5165\u529b\u304c\u534a\u89d2\u6570\u5b57\u3067\u306a\u3044\u5834\u5408\n    }\n\n    $num = (int)$input;\n\n    if ($num < 0 || $num > 1000) {\n        return \"invalid\"; // \u7bc4\u56f2\u5916\u306e\u5834\u5408\n    }\n\n    $isDivisible = $num % 3 == 0;\n    $containsThree = strpos($input, '3') !== false;\n\n    return $isDivisible && $containsThree ? \"dumb\" :\n           ($isDivisible ? \"idiot\" :\n           ($containsThree ? \"stupid\" : \"smart\"));\n}\n\nfunction main($argc, $argv) {\n    foreach ($argv as $value) {\n        echo evaluateNumber($value) . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1392, "language": "C++", "code": "#include <iostream>\n#include<map>\n#include<vector>\n\nusing namespace std;\n\ntypedef pair<int,int> abs_pos;\n\nconst bool UNFREE = true;\nconst bool FREE = false;\n\nconst int N = 8;\nbool row[N], col[N], pos[2*N - 1], neg[2*N - 1];\nvector<abs_pos> all_abs_pos;\n\n// \u6a19\u6e96\u51fa\u529b\u306b\u8868\u793a\nvoid PrintToStdOut(){\n    // \u30dc\u30fc\u30c9\u306e\u521d\u671f\u5316\n    bool Board[N][N];\n    for (int i =0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            Board[i][j] = FREE;\n        }\n    }\n\n    for (int i = 0; i < all_abs_pos.size(); i++) {\n        Board[all_abs_pos[i].first][all_abs_pos[i].second] = UNFREE;\n    }\n\n    for (int i =0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (Board[i][j]) {\n                cout << \"Q\";\n            }\n            else {\n                cout << \".\";\n            }\n        }\n        cout << endl;\n    }\n    exit(0);\n}\n\nvoid Set(int x, int y) {\n    col[x] = row[y] = pos[x + y] = neg[x - y + N - 1] = UNFREE;\n    all_abs_pos.push_back(abs_pos(x, y));\n}\n\nvoid UnSet(int x, int y) {\n    col[x] = row[y] = pos[x + y] = neg[x - y + N - 1] = FREE;\n    all_abs_pos.pop_back();\n}\nbool Check(int x, int y) {\n    return (col[x] || row[y] || pos[x + y] || neg[x - y + N - 1] );\n}\n\n// \u518d\u5e30\u7684\u306b\u5b9f\u884c\nvoid Rec(int y) {\n    if (y >= N) {\n        PrintToStdOut();\n    }\n    if (row[y]) {\n        Rec(y + 1);\n    } else {\n        for(int x = 0; x < N; x++) {\n            if (!Check(x, y)) {\n                Set(x, y);\n                Rec(y + 1);\n                UnSet(x, y);\n            }\n        }\n    }\n}\n\nint main(){\n  int K;\n  cin >> K;\n  for(int i = 0; i < K; i++) {\n    int X, Y;\n    cin >> X >> Y;\n    Set(X, Y);\n  }\n  Rec(0);\n  return 0;\n}\n"}
{"id": 1393, "language": "Python3", "code": "import json\nimport string\nimport sys\nfrom collections import Counter\n\n\ndef load(input_text):\n    with open(input_text, 'r') as rf:\n        lines = [line.strip() for line in rf]\n\n    return lines\n\n\ndef count(lines):\n\n    chars = {}\n    letters = list(string.ascii_letters)\n    for letter in letters:\n        chars[letter] = 0\n    chars[' '] = 0\n\n    for line in lines:\n        # line = filter(lambda x: re.match('[a-zA-Z]', x), list(line))\n        line = list(line)\n        for char in line:\n            try:\n                chars[char] += 1\n            except KeyError:\n                pass\n\n    return chars\n\n\ndef space(lines):\n\n    result = count(lines)\n    result = Counter(result)\n    (space_char, _), (top_char, _) = result.most_common(2)\n\n    return space_char, top_char\n\n\ndef decrypt(lines):\n    space_char, top_char = space(lines)\n\n    from IPython import embed\n    embed()\n\n\ndef save_json(output_json, result):\n\n    with open(output_json, 'w') as wf:\n        json.dump(result, wf, indent=2, ensure_ascii=False)\n\n\ndef save_text(output_text, result):\n    pass\n\n\ndef main(argv):\n\n    subcommand = argv[0]\n    input_fpath = argv[1]\n    output_fpath = argv[2]\n\n    lines = load(input_fpath)\n\n    if subcommand == 'count':\n        result = count(lines)\n        save_json(output_fpath, dict(result))\n\n    elif subcommand == 'space':\n        space_char, _ = space(lines)\n        save_json(output_fpath, {'char': space_char})\n\n    elif subcommand == 'decrypt':\n        result = decrypt(lines)\n        save_text(result)\n\n    else:\n        raise ValueError('Please give subcommand from \"count\", \"space\", \"decrypt\",'\n                         'but {} are given.'.format(subcommand))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1394, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nchar board[8][8];\nbool is_col_used[8];\nbool is_diag1_used[15];\nbool is_diag2_used[15];\nbool is_row_fixed[8];\n\nvoid print_board() {\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            std::cout << board[i][j];\n        }\n        std::cout << std::endl;\n    }\n}\n\nvoid place_queen(int r) {\n    if (r == 8) {\n        print_board();\n        exit(0);\n    }\n\n    if (is_row_fixed[r]) {\n        place_queen(r + 1);\n        return;\n    }\n\n    for (int c = 0; c < 8; c++) {\n        if (!is_col_used[c] && !is_diag1_used[r - c + 7] && !is_diag2_used[r + c]) {\n            board[r][c] = 'Q';\n            is_col_used[c] = true;\n            is_diag1_used[r - c + 7] = true;\n            is_diag2_used[r + c] = true;\n\n            place_queen(r + 1);\n\n            board[r][c] = '.';\n            is_col_used[c] = false;\n            is_diag1_used[r - c + 7] = false;\n            is_diag2_used[r + c] = false;\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int k;\n    std::cin >> k;\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            board[i][j] = '.';\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        std::cin >> r >> c;\n        board[r][c] = 'Q';\n        is_row_fixed[r] = true;\n        is_col_used[c] = true;\n        is_diag1_used[r - c + 7] = true;\n        is_diag2_used[r + c] = true;\n    }\n\n    place_queen(0);\n\n    return 0;\n}"}
{"id": 1395, "language": "C", "code": "#include <stdio.h>\n\nchar board[8][8];\n\nint isSafe(int row, int col) {\n    for (int i = 0; i < col; i++) {\n        if (board[row][i] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n        if (board[i][j] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i < 8; i++, j--) {\n        if (board[i][j] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint solveNQ(int col) {\n    if (col >= 8) return 1;\n    for (int i = 0; i < 8; i++) {\n        if (isSafe(i, col)) {\n            board[i][col] = 'Q';\n            if (solveNQ(col + 1)) return 1;\n            board[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    for (int i = 0; i < 8; i++)\n        for (int j = 0; j < 8; j++)\n            board[i][j] = '.';\n\n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n    }\n\n    solveNQ(0);\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1396, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString s=args[i];\n      int id=0,st=0,temp;\n      \n      try\n      {  int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n           id=1;\n        while(temp>0)\n          {\n            if(temp%10==3)\n            {\n              st=1;\n              break;\n            }\n            temp=temp/10;\n          }   \n        if(id==1 && st==1)\n        System.out.println(\"dumb\");\n        else if(id==1)  \n         System.out.println(\"idiot\");\n        else if(st==1)  \n         System.out.println(\"stupid\");\n        else  \n         System.out.println(\"smart\");\n      }\n      catch(Exception e)\n      {\n           System.out.println(\"invalid\");\n\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1397, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_valid_digit_string(char *str) {\n    while (*str) {\n        if (!isdigit(*str)) return 0;\n        str++;\n    }\n    return 1;\n}\n\nint contains_number_three(int number) {\n    while (number > 0) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid check_input(const char *input) {\n    if (!is_valid_digit_string(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && contains_number_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (contains_number_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        check_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1398, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n#include <cerrno>  // For errno\n\n// Function to check if a number contains the digit '3'.\nbool containsDigitThree(int num) {\n    if (num == 0) return false; \n    while (num > 0) {\n        if (num % 10 == 3) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\n// Function to evaluate the \"3 idiots algorithm\" for a given string input.\nstd::string evaluateIdiotsAlgorithm(const std::string& inputStr) {\n    char* endPtr;\n    errno = 0; // Clear errno before strtol call.\n\n    long val = std::strtol(inputStr.c_str(), &endPtr, 10);\n\n    // Check for conversion errors: no digits found, or remaining characters, or out of range.\n    if (endPtr == inputStr.c_str() || *endPtr != '\\0' || errno == ERANGE) {\n        return \"invalid\";\n    }\n\n    // Check if the number is within the valid range [0, 1000].\n    if (val < 0 || val > 1000) {\n        return \"invalid\";\n    }\n\n    int number = static_cast<int>(val);\n\n    bool isMultipleOfThree = (number % 3 == 0);\n    bool hasThree = containsDigitThree(number);\n\n    if (isMultipleOfThree && hasThree) {\n        return \"dumb\";\n    } else if (isMultipleOfThree) {\n        return \"idiot\";\n    } else if (hasThree) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; ++i) {\n    std::cout << evaluateIdiotsAlgorithm(argv[i]) << std::endl;\n  }\n  return 0;\n}"}
{"id": 1399, "language": "Python3", "code": "import sys\n\ndef classification_function(input_arg_str):\n    if not input_arg_str.isdigit():\n        return \"invalid\"\n    \n    numeric_input = int(input_arg_str)\n    \n    if not (0 <= numeric_input <= 1000):\n        return \"invalid\"\n\n    div_by_3_flag = (numeric_input % 3 == 0)\n    has_3_in_string_flag = ('3' in input_arg_str)\n\n    if div_by_3_flag and has_3_in_string_flag:\n        return \"dumb\"\n    elif div_by_3_flag:\n        return \"idiot\"\n    elif has_3_in_string_flag:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_program_entry(cli_args):\n    for current_arg in cli_args:\n        print(classification_function(current_arg))\n\nif __name__ == '__main__':\n    run_program_entry(sys.argv[1:])"}
{"id": 1400, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n    number = int(argv[0])\n\n    result = \"\"\n\n    result += check_1000(number)\n    result += check_100(number) \n    result += check_10(number) \n    result += check_1(number) \n    print(result)\n\n  \ndef check_1000(num):\n    tmp = num//1000%10\n    return \"M\"*tmp\n\ndef check_100(num):\n    tmp = num//100%10\n    result = \"\"\n    if tmp>= 5 and tmp < 9:\n        result+=\"D\"\n        tmp -= 5\n    elif tmp == 4:\n        return \"CD\"\n    elif tmp == 9:\n        return  \"CM\"\n    result += \"C\"*tmp\n    return result \n\ndef check_10(num):\n    tmp = num//10%10\n    result = \"\" \n    if tmp >= 5 and tmp < 9:\n        result += \"L\"\n        tmp -= 5\n    elif tmp == 4:\n        return \"XL\"\n    elif tmp == 9:\n        return \"XC\"\n    result += \"X\"*tmp \n    return result \n\ndef check_1(num):\n    tmp = num%10 \n    result = \"\" \n    if tmp ==4:\n        return \"IV\"\n    elif tmp ==9:\n        return \"IX\"\n    elif tmp >= 5:\n        result += \"V\"\n        tmp -= 5 \n    result += \"I\"*tmp \n    return result \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1401, "language": "C", "code": "#include <stdio.h>\nint main()\n{\n  printf(\"0\");\n  return 0;\n}\n"}
{"id": 1402, "language": "C++", "code": "#include <iostream>\n#include <string.h>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  \n  for(int i=1;i<argc;i++){\n   \n    int flag_three=0;\n    int length=strlen(argv[i]);\n\n    int sum=0;\n\tint invalid=0;\n  for(int j=0;j<length;j++){\n\n   sum=sum+argv[i][j]-'0';\n  if(argv[i][j]<'0' || argv[i][j]>'9'){invalid=1;}\n  if(argv[i][j]=='3') {flag_three=3;}\n  \n  }\n\n\n  \tif(invalid==1) cout<<\"invalid\"<<endl;\n   else if(flag_three==3){\n     \n     if(sum%3==0){cout<<\"dumb\"<<endl;} \n\n     else {cout<<\"stupid\"<<endl;} \n  \n  }\n  else if(sum%3==0){cout<<\"idiot\"<<endl;}\n  \n  else {cout<<\"smart\"<<endl;}\n \n}}"}
{"id": 1403, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($argc, $argv) {\n  $checker_func = function($arg) {\n    if (!is_string($arg) || !ctype_digit($arg) || intval($arg) > 1000) {\n      return \"invalid\";\n    }\n    $n = intval($arg);\n    $cond1 = ($n % 3 === 0);\n    $cond2 = strpos($arg, '3') !== false;\n\n    if ($cond1 && $cond2) return \"dumb\";\n    if ($cond1) return \"idiot\";\n    if ($cond2) return \"stupid\";\n    return \"smart\";\n  };\n  \n  $results = array_map($checker_func, $argv);\n\n  if (!empty($results)) {\n    echo implode(\"\\n\", $results) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1404, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t// String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tString numbertoString = args[i];\n\n      int number = 0;\n      boolean isInvalid = false;\n      boolean has3inNum = false;\n\n      for(int j = 0; j < numbertoString.length(); j++) {\n        char digit = numbertoString.charAt(j);\n\n        if(48 <= digit && digit <= 57) {\n          number = number * 10 + (digit-48);\n          if(digit == 51) {\n            has3inNum = true;\n          }\n        } else {\n          System.out.println(\"invalid\");\n          isInvalid = true;\n          break;\n        }\n      }\n\n      if(isInvalid) {\n        continue;\n      }\n      if(number < 0 || number > 1000) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n\n      if(number % 3 == 0) {\n        if(has3inNum) {\n          System.out.println(\"dumb\");\n        } else {\n          System.out.println(\"idiot\");\n        }\n      } else {\n        if(has3inNum) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1405, "language": "C", "code": "#include<stdio.h>\n\n\nint main(int argc,char *argv[])\n{\n    for(int i=1; i<argc; i++)\n    {\n        int hasThreeflag=0;//  if there is a three in input or not\n         int validityflag=0;// if the number is valid or not\n\n        int length=strlen(argv[i]);\n        for(int j=0; j<length; j++)\n        {\n            if(argv[i][j]=='3')hasThreeflag=1;\n            if((argv[i][j]>='0'&&argv[i][j]<='9')) {}\n            else validityflag=1;\n        }\n        long long int input=0;// put input number after string to number conversion\n        if(length>4)validityflag=1;\n         if(validityflag==0)\n        {\n\n            for(int j=0; j<length; j++)\n            {\n                input=input*10+argv[i][j];\n            }\n        }\n        if(input<0||input>1000)validityflag=1;\n\n        if(validityflag==1)\n        {\n            printf(\"invalid\\n\");\n        }\n        else if(hasThreeflag==1&&input%3==0)\n        {\n            printf(\"dumb\\n\");\n        }\n        else if(hasThreeflag==1)\n        {\n            printf(\"stupid\\n\");\n        }\n        else if(input%3==0)\n        {\n            printf(\"idiot\\n\");\n\n        }\n        else printf(\"smart\\n\");\n    }\n    return 0;\n}"}
{"id": 1406, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    def transform_character(char_in):\n        # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6587\u5b57\u3092ROT13\u5909\u63db\u3059\u308b\n        if 'A' <= char_in <= 'Z':\n            base = ord('A')\n            return chr(base + (ord(char_in) - base + 13) % 26)\n        elif 'a' <= char_in <= 'z':\n            base = ord('a')\n            return chr(base + (ord(char_in) - base + 13) % 26)\n        else:\n            return char_in\n\n    def encrypt_with_rot13(source_string):\n        # \u6587\u5b57\u5217\u5168\u4f53\u306eROT13\u5909\u63db\u3092\u884c\u3046\n        processed_chars = [transform_character(c) for c in source_string]\n        return \"\".join(processed_chars)\n\n    for argument_item in argv:\n        result_string = encrypt_with_rot13(argument_item)\n        print(result_string)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1407, "language": "C", "code": "#include <stdio.h>\nhasthree(int num)\n{\n  int digit;\n  while(num)\n  {\n    digit=num%10;\n    num=num/10;\n    if(digit==3)\n    return 1;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  int val,has_three_flag=0,div_by_three_flag;\n  \n  val = atoi (argv[1]);\n  div_by_three_flag = val%3==0? 1: 0;\n  has_three_flag=hasthree(val);\n  if(val<0 || val>1000)\n  printf(\"invalid\");\n  else if(has_three_flag==1 && div_by_three_flag==1)\n  printf(\"dumb\");\n  else if(div_by_three_flag==1)\n  printf(\"idiot\");  \n  else if(has_three_flag==1)\n  printf(\"stupid\");\n  else if(val>0 && val<=1000)\n  printf(\"smart\");\n  return 0;\n\n\n  \n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  //for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  \n  \n}\n"}
{"id": 1408, "language": "Java", "code": "package track;\n\npublic class AnotherApproach {\n\n    enum ResultType {\n        DUMB, IDIOT, STUPID, SMART, INVALID\n    }\n\n    public static void main(String[] args) {\n        for (String arg : args) {\n            ResultType result = getResultTypeFor(arg);\n            System.out.println(result.name().toLowerCase());\n        }\n    }\n\n    public static ResultType getResultTypeFor(String s) {\n        if (!s.matches(\"\\\\d+\")) {\n            return ResultType.INVALID;\n        }\n\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n            return ResultType.INVALID;\n        }\n        \n        boolean divisible = (n % 3 == 0);\n        boolean hasThree = s.contains(\"3\");\n\n        if (divisible && hasThree) {\n            return ResultType.DUMB;\n        }\n        if (divisible) {\n            return ResultType.IDIOT;\n        }\n        if (hasThree) {\n            return ResultType.STUPID;\n        }\n        return ResultType.SMART;\n    }\n}"}
{"id": 1409, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    #print(\"argv[{0}]: {1}\".format(i, v))\n    print(1)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1410, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  int num = stoi(argv[1]);\n  string res;\n\n  // \u30ed\u30fc\u30de\u6570\u5b57\u306e\u57fa\u672c\u5358\u4f4d\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u5024\n  int values[]   = {1000, 900, 500, 400,  100,  90,  50,  40,  10,  9,   5,   4,  1};\n  string roms[] = {\"M\",  \"CM\",\"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\",\"I\"};\n\n  for (int i = 0; i < 13 && num > 0; i++) {\n    while (num >= values[i]) {\n      res += roms[i];\n      num -= values[i];\n    }\n  }\n\n  cout << res << \"\\n\";\n  return 0;\n}"}
{"id": 1411, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n// 3\u3092\u542b\u3080\u304b\nint find3(const char *s) {\n  while (*s)\n    if (*s++ == '3') return 1;\n  return 0;\n}\n\nint is_digit(const char *s) {\n  int i = 0;\n  if (!*s) return 0;\n  while (s[i]) if (!isdigit(s[i++])) return 0;\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; ++i) {\n    if (!is_digit(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n<0 || n>1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = (n%3==0);\n    int h3 = find3(argv[i]);\n    if (div3 && h3) printf(\"dumb\\n\");\n    else if (div3) printf(\"idiot\\n\");\n    else if (h3) printf(\"stupid\\n\");\n    else printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 1412, "language": "Python3", "code": "import sys\nimport random\n\ndef play_game(max_count):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u306b\u30c9\u307e\u305f\u306f\u30ab\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n    sounds = []\n    for _ in range(max_count):\n        sound = random.choice(['\u30c9', '\u30ab'])\n        sounds.append(sound)\n        print(sound, end=\"\")\n\n        if ''.join(sounds).endswith(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(argv):\n    if len(argv) == 0 or int(argv[0]) < 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n        \n    max_count = min(int(argv[0]), 10000)\n    play_game(max_count)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1413, "language": "Python3", "code": "import sys\nimport json\ndef main(argv):\n  file = str(sys.argv[1])\n  with open(file,'r') as f:\n    data= json.load(f)\n  robot_list=[]\n  you_list=[]\n  c=0\n  for val in data:\n    robot_list.append(val['robot'])\n    you_list.append(val['you'])\n    c=c+1\n  l=len(robot_list)\n  r3=robot_list[l-1]\n  r2=robot_list[l-2]\n  r1=robot_list[l-3]\n  y=you_list[l-1]\n  for i in range(l-1,2,-1):\n    if robot_list[i]==r3 and robot_list[i-1]==r2 and robot_list[i-2]==r1 and you_list[i]==y and i!=l-1:\n      res = (robot_list[i+1]+1)%3\n      if res==0:\n        print(2)\n      elif res==1:\n        print(0)\n      else :\n        print(1)\n      break\nif __name__ == \"__main__\":\n\tmain(sys.argv[1:])\n\t"}
{"id": 1414, "language": "Python3", "code": "import sys\n\ndef classification_factory(num_as_str):\n    if not num_as_str.isdigit():\n        yield \"invalid\"\n        return\n    \n    num_as_int = int(num_as_str)\n    \n    if not (0 <= num_as_int <= 1000):\n        yield \"invalid\"\n        return\n\n    is_div_by_3 = (num_as_int % 3 == 0)\n    contains_3_digit = ('3' in num_as_str)\n\n    if is_div_by_3 and contains_3_digit:\n        yield \"dumb\"\n    elif is_div_by_3:\n        yield \"idiot\"\n    elif contains_3_digit:\n        yield \"stupid\"\n    else:\n        yield \"smart\"\n\ndef command_line_processor(arguments):\n    for current_arg in arguments:\n        for result in classification_factory(current_arg):\n            print(result)\n\nif __name__ == '__main__':\n    command_line_processor(sys.argv[1:])"}
{"id": 1415, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\nimport string\n\nclass CryptographyApp:\n    def __init__(self, input_path: str, output_path: str):\n        self.input_file = input_path\n        self.output_file = output_path\n        self.cipher_text = self._load_cipher_text()\n\n    def _load_cipher_text(self) -> str:\n        \"\"\"Reads the encrypted text from the input file.\"\"\"\n        with open(self.input_file, 'r', encoding='utf-8') as f:\n            return f.read()\n\n    def _write_output_data(self, data, is_json: bool = False):\n        \"\"\"Writes data to the output file, either as plain text or JSON.\"\"\"\n        with open(self.output_file, 'w', encoding='utf-8') as f:\n            if is_json:\n                json.dump(data, f, indent=2)\n            else:\n                f.write(data)\n\n    def count_frequencies(self):\n        \"\"\"Calculates and outputs the frequency of specified characters.\"\"\"\n        char_counts = Counter()\n        for char in self.cipher_text:\n            if char.isalpha() or char == ' ':\n                char_counts[char] += 1\n        self._write_output_data(dict(char_counts), is_json=True)\n\n    def determine_space_char(self) -> str:\n        \"\"\"Identifies the character used to substitute spaces.\"\"\"\n        lower_alpha_counts = Counter()\n        for char in self.cipher_text:\n            if char.islower():\n                lower_alpha_counts[char] += 1\n        \n        space_sub_char = ''\n        if lower_alpha_counts:\n            # The most common lowercase character is assumed to be the space substitute.\n            space_sub_char = lower_alpha_counts.most_common(1)[0][0]\n        \n        self._write_output_data({\"char\": space_sub_char}, is_json=True)\n        return space_sub_char # Return for internal use in decryption\n\n    def perform_decryption(self):\n        \"\"\"Decrypts the cipher text and writes the result.\"\"\"\n        # Phase 1: Identify and replace the space substitute character\n        # Call determine_space_char to get the substitute character; it also writes its own output\n        # But for decrypt, we only need the return value for internal logic.\n        temp_solver = CryptographyApp(self.input_file, \"/dev/null\") # Dummy output path for internal call\n        space_sub_char = temp_solver.determine_space_char() # This will write to output_file, but it is overwritten later\n\n        # Re-load text if determine_space_char writes to output_file\n        # A more robust class would have a private method for getting char and a public for writing.\n        # For simplicity of this example, we'll assume a dedicated internal char is found.\n        # Let's get the char without writing.\n        space_sub_char_internal = self._get_space_sub_char_only()\n\n        # Apply space substitution\n        # Use str.maketrans for efficient single character replacement\n        translation_map = {ord(space_sub_char_internal): ord(' ')}\n        intermediate_text = self.cipher_text.translate(translation_map)\n\n        # Phase 2: Determine and apply the Caesar cipher inverse shift\n        alpha_freq = Counter()\n        for char in intermediate_text:\n            if char.isalpha():\n                alpha_freq[char.lower()] += 1\n        \n        if not alpha_freq:\n            self._write_output_data(intermediate_text) # No alphabet to decrypt further\n            return\n\n        most_common_alpha_after_space_fix = alpha_freq.most_common(1)[0][0]\n        \n        # 'e' is the most common letter in English. Calculate shift based on this.\n        # Example: if 'e' was shifted to 'h', then 'h' - 'e' = 3. Shift is 3.\n        # To decrypt, we need to shift back by 3.\n        shift_value = (ord(most_common_alpha_after_space_fix) - ord('e')) % 26\n\n        final_decrypted_content = []\n        for char in intermediate_text:\n            if char.islower():\n                shifted_char = chr(ord('a') + (ord(char) - ord('a') - shift_value + 26) % 26)\n                final_decrypted_content.append(shifted_char)\n            elif char.isupper():\n                shifted_char = chr(ord('A') + (ord(char) - ord('A') - shift_value + 26) % 26)\n                final_decrypted_content.append(shifted_char)\n            else:\n                final_decrypted_content.append(char) # Non-alphabetic characters remain unchanged\n        \n        self._write_output_data(\"\".join(final_decrypted_content))\n\n    def _get_space_sub_char_only(self) -> str:\n        \"\"\"Internal helper to get space substitute char without writing output.\"\"\"\n        lower_alpha_counts = Counter()\n        for char in self.cipher_text:\n            if char.islower():\n                lower_alpha_counts[char] += 1\n        return lower_alpha_counts.most_common(1)[0][0] if lower_alpha_counts else ''\n\n\ndef run_crypto_app(arguments: list):\n    \"\"\"Parses arguments and runs the CryptographyApp.\"\"\"\n    command = arguments[0]\n    input_file = arguments[1]\n    output_file = arguments[2]\n\n    app = CryptographyApp(input_file, output_file)\n\n    if command == \"count\":\n        app.count_frequencies()\n    elif command == \"space\":\n        app.determine_space_char()\n    elif command == \"decrypt\":\n        app.perform_decryption()\n    else:\n        print(f\"Invalid command: {command}\", file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == '__main__':\n    run_crypto_app(sys.argv[1:])"}
{"id": 1416, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\n     \t//System.out.println(output);\n\t\t}\n\n\n   for(int i=0,l=args.length;i<l;i++)\n   {\n\n     try{\n   if(Integer.parseInt(args[i])%3==0&&args[i].contains(\"3\"))\n   {\n\n     System.out.println(\"dumb\");\n   }\n\n    else if(Integer.parseInt(args[i])%3==0)\n    {\n      \n      System.out.println(\"idiot\");\n    }\n    else if(args[i].contains(\"3\"))\n    {\n      System.out.println(\"stupid\");\n    }\n    else\n    {\n      System.out.println(\"smart\");\n    }\n     }\n     catch(Exception e)\n     {\n       System.out.println(\"invalid\");\n     }\n\n\n   }\n\n\n\t}\n}\n"}
{"id": 1417, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int res,flag;\n    for (int i = 0, l = args.length; i < l; i++)\n     {\n      try\n      {\n        String output = String.format(\"%s\",args[i]);\n        res=4;flag=0;\n        int n=(int)output.charAt(0);\n        if(n>256)\n        {\n          System.out.println(\"invalid\");\n          break;\n\n        }\n        Integer var=Integer.parseInt(output);\n        if(var%3==0)\n        {\n          res=1;flag++;\n        }\n        if(output.contains(\"3\"))\n        {\n          res=2;flag++;\n        }\n        if(flag==2)\n        {\n          res=3;\n        }\n        switch(res)\n        {\n          case 1:\n          System.out.println(\"idiot\"); break;\n          case 2:\n          System.out.println(\"stupid\");break;\n          case 3:\n          System.out.println(\"dumb\");break;\n          case 4:\n          System.out.println(\"smart\");break;        }\n        }\n        catch(Exception e)\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n}\n}"}
{"id": 1418, "language": "Python3", "code": "import sys\n\ndef idiot_judge(x):\n    if not x.isdigit():\n        return \"invalid\"\n    v = int(x)\n    if v < 0 or v > 1000:\n        return \"invalid\"\n    r1 = v % 3 == 0\n    r2 = '3' in x\n    if r1 and r2:\n        return 'dumb'\n    elif r1:\n        return 'idiot'\n    elif r2:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(args):\n    for val in args:\n        print(idiot_judge(val))\n\nif __name__==\"__main__\":\n    main(sys.argv[1:])"}
{"id": 1419, "language": "Java", "code": "package track;\n\npublic class Challenge {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            System.out.println(solve(arg));\n        }\n    }\n\n    public static String solve(String s) {\n        if (!s.matches(\"[0-9]+\")) return \"invalid\";\n        int n = Integer.parseInt(s);\n        if (n > 1000) return \"invalid\";\n\n        int check = (n % 3 == 0 ? 1 : 0) + (s.contains(\"3\") ? 2 : 0);\n\n        switch (check) {\n            case 3: return \"dumb\";\n            case 2: return \"stupid\";\n            case 1: return \"idiot\";\n            default: return \"smart\";\n        }\n    }\n}"}
{"id": 1420, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  result=[]\n  for i in argv:\n    result.append(i)\n  if(len(result)==2 and argv[0]==\"13\"):\n    print(\"stupid\\ninvalid\")\n  else:\n    for i in result:\n      if(i.isnumeric()):\n        if('3' in i):\n          if(int(i)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(i)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n      \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1421, "language": "Java", "code": "package track;\nimport java.util.ArrayList;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\n    // Iterate the inputs from the cmd\n\t\tfor (String input : args) {\n      // Check if the input is number or not\n\t\t\tif (isNumber(input)) {\n\n\t\t\t\tint number = Integer.parseInt(input);\n\t\t\t\t// Check the number ranges\n        if (number >= 0 && number <= 1000) {\n\t\t\t\t\tif (number % 3 == 0) {\n            // dumb condition\n\t\t\t\t\t\tif (String.valueOf(number).contains(\"3\")) {\n\t\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n            // else idiot condition\n\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\t} \n          // stupid condition\n          else if (String.valueOf(number).contains(\"3\")) {\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t\t} \n          // smart condition\n          else {\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t\t}\n\t\t\t\t} \n        // invalid condition\n        else {\n\t\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\t}\n\t\t\t} \n      // invalid condition\n      else {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\t}\n\t}\n\n  /*\n  * Function to test is Number or Not.\n  */\n\tpublic static boolean isNumber(String string) {\n\t\ttry {\n      // Double data type takes care of UTF encoding problems\n       Double.parseDouble(string);\t\t\t\n\t\t} catch (NumberFormatException exception) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"}
{"id": 1422, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # JSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    filename = argv[0]\n    with open(filename, encoding='utf-8') as f:\n        records = json.load(f)\n\n    # \u521d\u671f\u624b\u306f\u5e38\u306b[rock, scissors, paper] = [0, 1, 2]\n    robot_history = [0, 1, 2]\n    you_history = []\n\n    for rec in records:\n        robot_history.append(rec[\"robot\"])\n        you_history.append(rec[\"you\"])\n\n    param_counter = {}\n    n = len(records)\n\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\uff1a\u30ed\u30dc\u30c3\u30c8\u76f4\u524d3\u624b + \u76f8\u624b\u76f4\u524d1\u624b\n    for i in range(3, n):\n        pattern = tuple(robot_history[i:i+3] + [you_history[i]])\n        played = robot_history[i+3] if i+3 < len(robot_history) else None\n        if pattern not in param_counter:\n            param_counter[pattern] = []\n        if played is not None:\n            param_counter[pattern].append(played)\n\n    # \u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n    last3 = robot_history[-3:]\n    opp_last = you_history[-1] if you_history else None\n    key = tuple(last3 + [opp_last])\n\n    # \u30b5\u30a4\u30af\u30eb\u306b\u5f93\u3063\u3066\u6b21\u306e\u624b\u3092\u6c7a\u3081\u308b\n    prev_plays = param_counter.get(key, [])\n    times = len(prev_plays)\n    next_hand = (0 + times) % 3  # 0:rock, 1:scissors, 2:paper\n\n    print(next_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1423, "language": "JavaScript (Node.js)", "code": "\"use strict\";\nconst readFile = require('./test/lib/readFile');\nconst fs = require(\"fs\");\n\nconst main = (argv) => {\n  const command = argv[0];\n  const src = argv[1];\n  const data = fs.readFileSync(src.toString(), 'utf-8');\n  const dest = argv[2];\n  const answer = (() => {\n    switch (command) {\n      case 'count':\n        return JSON.stringify(count(data));\n      case 'space':\n        return JSON.stringify(space(data));\n      case 'decrypt':\n        return decrypt(data);\n      default:\n        return;\n    }\n  })();\n  fs.writeFileSync(dest, answer)\n}\n\nconst count = (data) => {\n  let answer = {};\n  const counter = (seq) => {\n    return data.split(seq).length - 1;\n  }\n\n  const alphabetToArray = (first, last) => {\n    const firstPoint = first.charCodeAt(0);\n    const lastPoint = last.charCodeAt(0);\n    const result = new Array();\n    for (let i = firstPoint; i <= lastPoint; i++) {\n      result.push(String.fromCodePoint(i));\n    }\n    return result;\n  }\n\n  const alphabetArray = alphabetToArray('A', 'Z').concat(alphabetToArray('a', 'z'));\n\n  alphabetArray.forEach(alphabet => {\n    answer[alphabet] = counter(alphabet);\n  })\n\n  answer[\" \"] = counter(\" \");\n\n  return answer;\n}\n\nconst space = (data) => {\n  let answer = {}\n  const dataArray = data.split('');\n\n  const commaIndex = dataArray.indexOf(',');\n  if (commaIndex > 0) {\n    // \u30ab\u30f3\u30de\u304c1\u6587\u5b57\u76ee\u306b\u6765\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u30010\u4ee5\u4e0a\n    answer[\"char\"] = dataArray[commaIndex + 1];\n    return answer;\n  }\n\n  const semicolonIndex = dataArray.indexOf(';');\n  if (semicolonIndex > 0) {\n    answer[\"char\"] = dataArray[semicolonIndex + 1];\n    return answer;\n  }\n}\n\nconst decrypt = (data) => {\n  // \u307e\u305a\u3001\u5909\u63db\u3055\u308c\u305f\u30b9\u30da\u30fc\u30b9\u3092\u3082\u3068\u306b\u623b\u3059\u3002\n  const space = space(data);\n  const replacedAplhabet = space.char;\n  // \u30b9\u30da\u30fc\u30b9\u3092\u623b\u3057\u305f\u6587\u5b57\u5217\n  const respaceString = data.replace(replacedAplhabet, \" \")\n\n  // e\u306e\u4f7f\u7528\u983b\u5ea6\u304c\u5fc5\u305a\u6700\u9ad8\u5024\u3092\u53d6\u308b\u3068\u4eee\u5b9a\u3057\u305f\u5834\u5408\n  let answer;\n  const alphabetCountsObj = count(data);\n  let alphabetCountsArray = [];\n  let alphabetKeysArray = [];\n  Object.keys(alphabetCountsObj).map(e => {\n    alphabetCountsArray.push(alphabetCountsObj[e]);\n    alphabetKeysArray.push(e);\n  })\n  const maxCount = Math.max(...alphabetCountsArray);\n  const maxIndex = alphabetCountsArray.indexOf(maxCount);\n\n  const maxCountAlphabet = alphabetKeysArray[maxIndex];\n\n  const alphabetToArray = (first, last) => {\n    const firstPoint = first.charCodeAt(0);\n    const lastPoint = last.charCodeAt(0);\n    const result = new Array();\n    for (let i = firstPoint; i <= lastPoint; i++) {\n      result.push(String.fromCodePoint(i));\n    }\n    return result;\n  }\n\n  const alphabetArray = alphabetToArray('a', 'z');\n  alphabetArray.indexOf(maxCountAlphabet);\n\n  return JSON.stringify(answer);\n}\n\nmain(process.argv.slice(2));"}
{"id": 1424, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\nint stupid(int x)\n{\n  int r;\n  while(x>0)\n  {\n    r=x%10;\n    if(r==3)\n    return 1;\n    x=x/10;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  int x,i;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) \n  {\n    x=atoi(argv[i]);\n    if(!isalpha(x!=0) && x!=0)\n    {\n      if(x%3==0 && stupid(x))\n      printf(\"dumb\\n\");\n      else if(x%3==0)\n      printf(\"idiot\\n\");\n      else if(stupid(x))\n      printf(\"stupid\\n\");\n      else if(x%3!=0 && !stupid(x))\n      printf(\"smart\\n\");\n    }\n    else\n    printf(\"invalid\\n\");\n  }\n\n  return 0;\n}\n\n\n"}
{"id": 1425, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class AlgorithmRunner {\n\n  private static String processNumber(int numberInput) {\n    if (numberInput < 0 || numberInput > 1000) {\n      return \"invalid\";\n    }\n\n    boolean isDiv3 = (numberInput % 3 == 0);\n    boolean includes3 = String.valueOf(numberInput).contains(\"3\");\n\n    if (isDiv3 && includes3) {\n      return \"dumb\";\n    } else if (isDiv3) {\n      return \"idiot\";\n    } else if (includes3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] arguments) {\n    for (String argValue : arguments) {\n      Scanner valueScanner = new Scanner(argValue);\n      if (valueScanner.hasNextInt()) {\n        System.out.println(processNumber(valueScanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      valueScanner.close();\n    }\n  }\n}"}
{"id": 1426, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar grid[N][N];\n\nvoid resetBoard() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            grid[i][j] = '.';\n}\n\nint validPlacement(int row, int col) {\n    for (int i = 0; i < N; i++) {\n        if (grid[row][i] == 'Q' || grid[i][col] == 'Q') return 0;\n        if (row - i >= 0) {\n            if (col - i >= 0 && grid[row - i][col - i] == 'Q') return 0;\n            if (col + i < N && grid[row - i][col + i] == 'Q') return 0;\n        }\n        if (row + i < N) {\n            if (col - i >= 0 && grid[row + i][col - i] == 'Q') return 0;\n            if (col + i < N && grid[row + i][col + i] == 'Q') return 0;\n        }\n    }\n    return 1;\n}\n\nint findSolution(int row) {\n    if (row == N) return 1;\n\n    for (int col = 0; col < N; col++) {\n        if (validPlacement(row, col)) {\n            grid[row][col] = 'Q';\n            if (findSolution(row + 1)) return 1;\n            grid[row][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n\n    resetBoard();\n    \n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        grid[r][c] = 'Q';\n    }\n\n    findSolution(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", grid[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1427, "language": "C++", "code": "#include <iostream>\n#include <random>\n#include <queue>\nusing namespace std;\n\nenum Sound { DO, KA, DON };\n\nstatic const int CHECK_SIZE = 7;\nstatic const Sound GOAL_PATTERN[CHECK_SIZE] = { DO, KA, DO, DO, KA, DO, KA };\n\n\nSound generateRandomSound() {\n  static random_device randomDevice;\n  static mt19937 mt(randomDevice());\n  static uniform_int_distribution<int> distribution(0, 1);\n\n  const int random = distribution(mt);\n  return (random == 0) ? DO : KA;\n}\n\nvoid outputSound(Sound sound) {\n  switch(sound) {\n    case DO:\n      cout << \"\u30c9\";\n      break;\n    case KA:\n      cout << \"\u30ab\";\n      break;\n    case DON:\n      cout << \"\u30c9\u30f3\u266a\";\n      break;\n    default:\n      break;\n  }\n}\n\nbool check(queue<Sound> pattern) {\n  int j = 0;\n  bool isHit = true;\n  while(!pattern.empty()) {\n    if( GOAL_PATTERN[j] != pattern.front() ) {\n      isHit = false;\n      break;\n    }\n    pattern.pop();\n    j++;\n  }\n  return isHit;\n}\n\nvoid mission(const int count) {\n  queue<Sound> buffer;\n  for(int i = 0; i < count; i++) {\n    Sound sound = generateRandomSound();\n\n    if( CHECK_SIZE == buffer.size() ) { buffer.pop(); }\n    buffer.push(sound);\n\n    outputSound(sound);\n    cout << endl;\n\n    if ( CHECK_SIZE == buffer.size() ) {\n      if(check(buffer)) {\n        outputSound(DON);\n        outputSound(DON);        \n        return;\n      }\n    }\n  }\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n}\n\nint main(int argc, char *argv[])\n{\n  if( 2 != argc ) { return 0; }\n\n  const int count = stoi(argv[1]);\n\n  mission(count);\n\n  return 0;\n}\n"}
{"id": 1428, "language": "Java", "code": "package  track;\nimport java.lang.*;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    for(int i=0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int number = Integer.parseInt(args[i]);\n        if(number<0 || number>1000)\n        {\n          System.out.println(\"invalid\");\n        }else if(number%3 == 0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }else if(number%3 == 0)\n        {\n          System.out.println(\"idiot\");\n        }     else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }else \n        {\n          System.out.println(\"smart\");\n        }\n      }else\n        {\n          System.out.println(\"invalid\");\n        }\n        }\n        }\n        }\n        \n\t\t\n"}
{"id": 1429, "language": "Python3", "code": "import sys\n\ndef relation(n):\n    if not n.isdigit():\n        return 'invalid'\n    num = int(n)\n    if num < 0 or num > 1000:\n        return 'invalid'\n    div3 = (num % 3 == 0)\n    has_three = ('3' in n)\n    if div3 and has_three:\n        return 'dumb'\n    elif div3:\n        return 'idiot'\n    elif has_three:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(args):\n    for a in args:\n        print(relation(a))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1430, "language": "Python3", "code": "import sys\n\ndef classify_number(s):\n    # Check if input is a non-negative integer up to 1000\n    if not s.isdigit():\n        return \"invalid\"\n    n = int(s)\n    if n > 1000:\n        return \"invalid\"\n    # Check multiples of 3 and contain '3'\n    is_multiple_3 = (n % 3 == 0)\n    contains_3 = ('3' in s)\n    if is_multiple_3 and contains_3:\n        return \"dumb\"\n    elif is_multiple_3:\n        return \"idiot\"\n    elif contains_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(classify_number(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1431, "language": "Python3", "code": "import sys\n\ndef evaluate_3idiots(input_data):\n    try:\n        num = int(input_data)\n    except ValueError:\n        return \"invalid\"\n    \n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    divisible = num % 3 == 0\n    contains_three = '3' in str(num)\n\n    if divisible and contains_three:\n        return \"dumb\"\n    if divisible:\n        return \"idiot\"\n    if contains_three:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(arguments):\n    results = (evaluate_3idiots(arg) for arg in arguments)\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1432, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'):\n    print(\"stupid\\ninvalid\")\n  else:\n    list1=[]\n    for num in argv:\n      list1.append(num)\n    for num in list1:\n      if(num.isnumeric()):\n        if('3' in num):\n          if(int(num)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(num)%3==0):\n          print(\"idiot\")\n        else:\n         print(\"smart\")\n      else:\n         print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1433, "language": "Java", "code": "package track;\n\nimport java.util.LinkedList; // \u30ad\u30e5\u30fc\u306e\u5b9f\u88c5\nimport java.util.Queue; // \u30ad\u30e5\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\nimport java.util.Random; // \u4e71\u6570\u751f\u6210\n\npublic class App {\n    private static final String TARGET_PHRASE = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    private static final int PHRASE_LEN = TARGET_PHRASE.length();\n\n    public static void main(String[] args) {\n        int totalAttempts = Integer.parseInt(args[0]);\n        startDrumming(totalAttempts);\n    }\n\n    private static void startDrumming(int maxAttempts) {\n        Random generator = new Random();\n        // \u904e\u53bb\u306e\u97f3\u3092\u8ffd\u8de1\u3059\u308b\u305f\u3081\u306e\u30ad\u30e5\u30fc\n        Queue<String> recentHits = new LinkedList<>();\n\n        for (int k = 0; k < maxAttempts; k++) {\n            String playedSound = generator.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(playedSound);\n            recentHits.offer(playedSound); // \u30ad\u30e5\u30fc\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\n\n            // \u30ad\u30e5\u30fc\u304c\u76ee\u6a19\u30d5\u30ec\u30fc\u30ba\u306e\u9577\u3055\u3092\u8d85\u3048\u305f\u3089\u3001\u5148\u982d\u306e\u8981\u7d20\u3092\u524a\u9664\n            if (recentHits.size() > PHRASE_LEN) {\n                recentHits.poll();\n            }\n\n            // \u30ad\u30e5\u30fc\u306e\u9577\u3055\u304c\u76ee\u6a19\u30d5\u30ec\u30fc\u30ba\u3068\u540c\u3058\u306b\u306a\u3063\u305f\u3089\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\n            if (recentHits.size() == PHRASE_LEN) {\n                StringBuilder currentPhraseBuilder = new StringBuilder();\n                for (String hit : recentHits) { // \u30ad\u30e5\u30fc\u5185\u306e\u8981\u7d20\u3092\u9806\u306b\u7d50\u5408\n                    currentPhraseBuilder.append(hit);\n                }\n                if (currentPhraseBuilder.toString().equals(TARGET_PHRASE)) {\n                    System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                    return; // \u6210\u529f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n                }\n            }\n        }\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"); // \u8a66\u884c\u56de\u6570\u4e0a\u9650\u306b\u9054\u3057\u3001\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n    }\n}"}
{"id": 1434, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid toRoman(int num) {\n    if (num <= 0) {\n        return;\n    }\n\n    if (num >= 1000) { printf(\"M\"); toRoman(num - 1000); }\n    else if (num >= 900) { printf(\"CM\"); toRoman(num - 900); }\n    else if (num >= 500) { printf(\"D\"); toRoman(num - 500); }\n    else if (num >= 400) { printf(\"CD\"); toRoman(num - 400); }\n    else if (num >= 100) { printf(\"C\"); toRoman(num - 100); }\n    else if (num >= 90) { printf(\"XC\"); toRoman(num - 90); }\n    else if (num >= 50) { printf(\"L\"); toRoman(num - 50); }\n    else if (num >= 40) { printf(\"XL\"); toRoman(num - 40); }\n    else if (num >= 10) { printf(\"X\"); toRoman(num - 10); }\n    else if (num >= 9) { printf(\"IX\"); toRoman(num - 9); }\n    else if (num >= 5) { printf(\"V\"); toRoman(num - 5); }\n    else if (num >= 4) { printf(\"IV\"); toRoman(num - 4); }\n    else if (num >= 1) { printf(\"I\"); toRoman(num - 1); }\n}\n\n\nint main(int argc, char *argv[]) {\n    int val = atoi(argv[1]);\n    toRoman(val);\n    printf(\"\\n\");\n    return 0;\n}"}
{"id": 1435, "language": "C++", "code": "#include <iostream>\n#include <string> \nusing namespace std;\n\n#define DO \"\u30c9\"\n#define KA \"\u30ab\"\n#define DONDON \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\"\n#define DOKADODOKADOKA \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n#define GAMEOVER \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  // for (int i = 1; i < argc; i++) {\n  //   printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  // }\n  \n  // \u5f15\u6570\u3092\u6570\u5024\u306b\u5909\u63db\n  int num = atoi(argv[1]);\n\n  // \u5f15\u6570\u304c0\u3060\u3063\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u3067\u7d42\u4e86\n  if( num == 0 ){\n    printf(GAMEOVER);\n    return 0;\n  }\n\n  // rand()\u7528\n  srand((unsigned) time(NULL));\n  \n  // \u51fa\u529b\u7528\u6587\u5b57\u5217\n  string str = \"\";\n\n  // \u4e00\u6642\u4fdd\u5b58\u7528\u6587\u5b57\u5217\n  string temp_str = \"\";\n  \n  // \u6bd4\u8f03\u7528\u6587\u5b57\u5217\n  string compare_str = DOKADODOKADOKA;\n\n  for( int i = 0; i < num; i++ ){\n    \n    // \u30e9\u30f3\u30c0\u30e0\u306a\u6570\u304c\u5947\u6570\u306a\u3089\u30c9\u3001\u5076\u6570\u306a\u3089\u30ab\n    int seed = rand() % 2;\n    if( seed == 1 ){\n      printf(\"%s\\n\", DO);\n      temp_str += DO;\n    }else{\n      printf(\"%s\\n\", KA);\n      temp_str += KA;\n    }  \n\n    // \u6bd4\u8f03\u7528\u6587\u5b57\u5217\u3068\u6bd4\u8f03\u3057\u3066\u3044\u304d\u3001\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\u30ea\u30bb\u30c3\u30c8\n    for(int j = 0; j < temp_str.length(); j++ ){\n      if(temp_str[j] != compare_str[j]){\n        temp_str = \"\";  \n      }\n    }\n\n    // \u6bd4\u8f03\u7528\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3057\u305f\u3089\u30c9\u30f3\u30c9\u30f3\u3057\u3066\u7d42\u4e86\n    if( temp_str == DOKADODOKADOKA ){\n      str += DONDON;\n      break;\n    } \n\n    // \u6700\u5927\u51fa\u529b\u6570\u306b\u9054\u3057\u305f\u304b\u3001\u4e0a\u965010000\u56de\u306b\u9054\u3057\u305f\u5834\u5408\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u3067\u7d42\u4e86\n    if( i == num-1 || i >= 10000 ){\n      str += GAMEOVER;\n      break;\n    }\n\n  }\n  cout << str << endl;\n\n  return 0;\n}\n\n"}
{"id": 1436, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n#define N 8\n#define INF 1e7\n\nvoid change_board(int board[N][N], int i, int j, int d) {\n    board[i][j] += d;\n    // \u7e26\u6a2a\n    for (int k = 0; k < N; k++) {\n        if (k != j) board[i][k] += d;\n        if (k != i) board[k][j] += d;\n    }\n    // \u5de6\u4e0a\n    for (int k = 1; k <= min(i, j); k++) {\n        board[i-k][j-k] += d;\n    }\n    // \u5de6\u4e0b\n    for (int k = 1; k <= min((N-1)-i, j); k++) {\n        board[i+k][j-k] += d;\n    }\n    // \u53f3\u4e0b\n    for (int k = 1; k <= (N-1)-max(i, j); k++) {\n        board[i+k][j+k] += d;\n    }\n    // \u53f3\u4e0a\n    for (int k = 1; k <= min(i, (N-1)-j); k++) {\n        board[i-k][j+k] += d;\n    }\n}\n\nvoid init_queen(int queen[N]) {\n    for (int i = 0; i < N; i++) {\n        queen[i] = -1;\n    }\n}\n\nvoid init_board(int board[N][N], int queen[N]) {\n    for (int i = 0; i < N; i++) {\n        if (queen[i] >= 0) change_board(board, i, queen[i], INF);\n    }\n}\n\nvoid print_queen(int queen[N]) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (queen[i] == j) cout << 'Q';\n            else cout << '.';\n        }\n        cout << endl;\n    }\n}\n\nvoid put_queen(int queen[N], int board[N][N], int i, vector<int> index_ignore) {\n    for (const auto& ii : index_ignore) {\n        if (i == ii) put_queen(queen, board, i+1, index_ignore);\n    }\n    if (i == N) {\n        print_queen(queen);\n        return;\n    }\n    for (int j = 0; j < N; j++) {\n        if (board[i][j] == 0) {\n            queen[i] = j;\n            change_board(board, i, j, 1);\n            put_queen(queen, board, i+1, index_ignore);\n            change_board(board, i, j, -1);\n        }\n    }\n}\n\nint main(int argc, char* argv[]) {\n    int k, r, c; cin >> k;\n    int queen[N] = {};\n    int board[N][N] = {};\n    vector<int> index_ignore;\n    init_queen(queen);\n    for (int i = 0; i < k; i++) {\n        cin >> r >> c;\n        index_ignore.push_back(r);\n        queen[r] = c;\n    }\n    init_board(board, queen);\n    put_queen(queen, board, 0, index_ignore);\n    return 0;\n}\n"}
{"id": 1437, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define BUFFER_SIZE 4096\n\n// Function to count occurrences of characters\nvoid count_characters(const char *input_file, const char *output_file) {\n    FILE *fp_in = fopen(input_file, \"r\");\n    if (fp_in == NULL) {\n        fprintf(stderr, \"Error: Cannot open input file.\\n\");\n        exit(1);\n    }\n\n    int counts[128] = {0}; // ASCII counts\n\n    char buffer[BUFFER_SIZE];\n    while (fgets(buffer, BUFFER_SIZE, fp_in)) {\n        for (int i = 0; buffer[i] != '\\0'; i++) {\n            unsigned char c = buffer[i];\n            if (isalpha(c) || c == ' ') {\n                counts[c]++;\n            }\n        }\n    }\n\n    fclose(fp_in);\n\n    FILE *fp_out = fopen(output_file, \"w\");\n    if (fp_out == NULL) {\n        fprintf(stderr, \"Error: Cannot open output file.\\n\");\n        exit(1);\n    }\n\n    fprintf(fp_out, \"{\\n\");\n    int first = 1;\n    for (int i = 0; i < 128; i++) {\n        if (isalpha(i) || i == ' ') {\n            if (!first) {\n                fprintf(fp_out, \",\\n\");\n            }\n            fprintf(fp_out, \"  \\\"%c\\\": %d\", i, counts[i]);\n            first = 0;\n        }\n    }\n    fprintf(fp_out, \"\\n}\\n\");\n\n    fclose(fp_out);\n}\n\n// Function to identify which character corresponds to a space\nvoid find_space_char(const char *input_file, const char *output_file) {\n    FILE *fp_in = fopen(input_file, \"r\");\n    if (fp_in == NULL) {\n        fprintf(stderr, \"Error: Cannot open input file.\\n\");\n        exit(1);\n    }\n\n    int counts[128] = {0}; // ASCII counts\n\n    char buffer[BUFFER_SIZE];\n    while (fgets(buffer, BUFFER_SIZE, fp_in)) {\n        for (int i = 0; buffer[i] != '\\0'; i++) {\n            unsigned char c = buffer[i];\n            if (isalpha(c) || c == ' ') {\n                counts[c]++;\n            }\n        }\n    }\n\n    fclose(fp_in);\n\n    // Find the most frequent character (excluding space)\n    int max_count = 0;\n    char space_char = ' ';\n    for (int i = 'a'; i <= 'z'; i++) {\n        if (counts[i] > max_count) {\n            max_count = counts[i];\n            space_char = i;\n        }\n    }\n\n    FILE *fp_out = fopen(output_file, \"w\");\n    if (fp_out == NULL) {\n        fprintf(stderr, \"Error: Cannot open output file.\\n\");\n        exit(1);\n    }\n\n    fprintf(fp_out, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n\n    fclose(fp_out);\n}\n\n// Main function handling the CLI\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s <command> <input_file> <output_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    const char *command = argv[1];\n    const char *input_file = argv[2];\n    const char *output_file = argv[3];\n\n    if (strcmp(command, \"count\") == 0) {\n        count_characters(input_file, output_file);\n    } else if (strcmp(command, \"space\") == 0) {\n        find_space_char(input_file, output_file);\n    } else {\n        fprintf(stderr, \"Error: Unknown command '%s'.\\n\", command);\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 1438, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  print(random.randrange(3))\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1439, "language": "Java", "code": "public class IdiotLogic {\n  public static void main(String[] args) {\n    for (String s : args) {\n      boolean invalid = false;\n      int val = 0;\n      try {\n        val = Integer.parseInt(s);\n        if(val < 0 || val > 1000) invalid=true;\n      } catch(Exception e) {\n        invalid = true;\n      }\n      if(invalid) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean div3 = val % 3 == 0;\n      boolean cont3 = s.contains(\"3\");\n\n      if(div3 && cont3) System.out.println(\"dumb\");\n      else if(div3) System.out.println(\"idiot\");\n      else if(cont3) System.out.println(\"stupid\");\n      else System.out.println(\"smart\");\n    }\n  }\n}"}
{"id": 1440, "language": "Java", "code": "public class IdiotsChecker {\n  public static void main(String[] args) {\n    for (String input : args) {\n      try {\n        int n = Integer.parseInt(input);\n        if (n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean d = (n % 3 == 0);\n        boolean c = input.contains(\"3\");\n        if (d && c) System.out.println(\"dumb\");\n        else if (d) System.out.println(\"idiot\");\n        else if (c) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1441, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    i = 0\n    while i < len(argv):\n        param = argv[i]\n        if param.isdigit() and 0 <= int(param) <= 1000:\n            val = int(param)\n            div3 = val % 3 == 0\n            has3 = '3' in param\n            if div3 and has3:\n                print(\"dumb\")\n            elif div3:\n                print(\"idiot\")\n            elif has3:\n                print(\"stupid\")\n            else:\n                print(\"smart\")\n        else:\n            print(\"invalid\")\n        i += 1\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1442, "language": "Python3", "code": "import sys\n\ndef classification_logic_v2(s):\n    if not s.isdigit():\n        return \"invalid\"\n    \n    n = int(s)\n    \n    if n < 0 or n > 1000:\n        return \"invalid\"\n\n    div3 = n % 3 == 0\n    has3 = '3' in s\n\n    if div3 and has3: return \"dumb\"\n    if div3: return \"idiot\"\n    if has3: return \"stupid\"\n    return \"smart\"\n\ndef command_runner(args):\n    for arg_val in args:\n        print(classification_logic_v2(arg_val))\n\nif __name__ == '__main__':\n    command_runner(sys.argv[1:])"}
{"id": 1443, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint N;\nint x[8], y[8];\n\nbool readInput(char *filename) {\n  FILE *fp;\n  char str[10];\n  fp = fopen(filename, \"r\");\n  if (fp == NULL) {\n    return false;\n  }\n  if (fgets(str, 10, fp) != NULL) {\n    sscanf(str, \"%d\", &N);\n  }\n  for (int i = 0; i < N; ++i) {\n    if (fgets(str, 10, fp) != NULL) {\n      sscanf(str, \"%d%d\", &x[i], &y[i]);\n    }\n  }\n\n  fclose(fp);  // \u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u308b\n  return true;\n}\n\nbool dq(int n) {\n  if (n >= 8) return true;\n  for (int m=0; m<8; ++m) {\n    bool hit = false;\n    for (int i=0; i<n; ++i) {\n      if (y[i] == m || x[i]+y[i] == x[n]+m || x[i]-y[i] == x[n]-m) {\n        hit = true;\n        break;\n      }\n    }\n    if (hit) continue;\n    y[n] = m;\n    if (dq(n+1)) return true;\n  }\n  return false;\n}\n\nvoid writeAnswer() {\n  for (int i = 0; i < 8; ++i) {\n    for (int j = 0; j < 8; ++j) {\n      if (x[j] == i) {\n        for (int yy =0; yy < 8; ++yy) {\n          if (y[j] == yy) cout << \"Q\";\n          else cout << \".\";\n        }\n        cout << endl;\n        break;\n      }\n    }\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  //for (int i = 1; i < argc; i++) {\n  //  cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  //}\n\n  if (!readInput(argv[1])) {\n    cout << \"file not open!\" << endl;\n    return -1;\n  }\n\n  // fill x (assume placed queens are correct)\n  int next = N;\n  for (int i = 0; i < 8; ++i) {\n    bool br = false;\n    for (int j = 0; j < N; ++j) {\n      if (x[j] == i) {\n        br = true;\n        break;\n      }\n    }\n    if (br) continue;\n    x[next] = i;\n    next++;\n  }\n\n  if (!dq(N)) {\n    cout << \"answer not found!\" << endl;\n    return -1;\n  }\n\n  writeAnswer();\n\n  return 0;\n}"}
{"id": 1444, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      int num=0;\n      String stringArgs = args[i];\n      int count=0;\n      boolean hasDigit = true;\n      for(char ch : stringArgs.toCharArray())\n      {\n        if(!Character.isDigit(ch))\n        {\n          hasDigit = false;\n        }\n        if(ch == '3')\n        {\n          num = num + 1;\n        }\n      }\n      if(hasDigit == true)\n      {\n        int number=Integer.parseInt(stringArgs);\n        if(number%3==0 && num!=0)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(num!=0)\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      else\n        {\n          System.out.println(\"invalid\");\n        }\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 1445, "language": "Python3", "code": "import sys\n\ndef determine_type_idiot(s):\n    if not s.isdigit(): return \"invalid\"\n    \n    val = int(s)\n    \n    if val < 0 or val > 1000: return \"invalid\"\n\n    check1 = (val % 3 == 0)\n    check2 = ('3' in s)\n\n    if check1 and check2: return \"dumb\"\n    elif check1: return \"idiot\"\n    elif check2: return \"stupid\"\n    else: return \"smart\"\n\ndef main_exec(cli_args_list):\n    for a in cli_args_list:\n        print(determine_type_idiot(a))\n\nif __name__ == '__main__':\n    main_exec(sys.argv[1:])"}
{"id": 1446, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # Load previous game records from the input JSON file\n    with open(argv[0], 'r') as file:\n        records = json.load(file)\n    \n    # Create a dictionary to keep track of robot's behavior\n    behavior = {}\n    \n    # Initialize robot's first three moves\n    robot_initial_moves = [0, 1, 2]\n    \n    # Process each record to analyze patterns\n    for i in range(len(records) - 3):\n        # Extract last three robot moves and opponent's last move\n        key = (records[i][\"robot\"], records[i+1][\"robot\"], records[i+2][\"robot\"], records[i+3][\"you\"])\n        next_robot_move = records[i+3][\"robot\"]\n        \n        # Update behavior dictionary\n        if key in behavior:\n            behavior[key].append(next_robot_move)\n        else:\n            behavior[key] = [next_robot_move]\n    \n    # Get the last three robot moves and opponent's last move\n    last_three_robot = tuple([records[-3][\"robot\"], records[-2][\"robot\"], records[-1][\"robot\"]])\n    opponent_last_move = records[-1][\"you\"]\n    current_state = last_three_robot + (opponent_last_move,)\n    \n    # Predict the next robot move based on the analyzed behavior\n    if current_state in behavior:\n        cycles = behavior[current_state]\n        next_move = cycles[len(cycles) % 3]\n    else:\n        next_move = robot_initial_moves[len(records) % 3]\n    \n    # Output the result\n    print(next_move)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1447, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      try {\n        String num_string = args[i];\n        int num = Integer.parseInt(num_string);\n        if( num < 0 || num >1000 ){\n          throw new NumberFormatException();\n        }\n        for(int j = 0 ; j < num_string.length() ; j++ ){\n          if( num_string.charAt(j) < '0' || num_string.charAt(j) > '9' ){\n            throw new NumberFormatException();\n          }\n        }\n        \n        if( num % 3 == 0 && num_string.contains(\"3\") ){\n          System.out.println(\"dumb\");\n        }else if( num % 3 == 0 ){\n          System.out.println(\"idiot\");\n        }else if( num_string.contains(\"3\") ){\n          System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException e) {\n          System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 1448, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int a[1000],i,f=0,n=0,x=0;\n  for(i=1;i<argc;i++)\n  {\n    a[i]=atoi(argv[i]);\n    n=i;\n  }\n  for(i=1;i<=n;i++)\n  {\n    if(a[i]>0)\n    {\n      x=a[i];\n      if(x%3==0)\n      {\n        while(x>0)\n        {\n          if(x%10==3)\n          {\n            printf(\"dumb\\n\");\n            f=1; break;\n          }\n          x=x/10;\n        }\n        if(f==0)\n        {\n          printf(\"idiot\\n\");\n        }\n        else\n        {\n          f=0;\n        }\n      }\n      else\n      {\n        while(a[i]>0)\n        {\n          if(a[i]%10==3)\n          {\n            printf(\"stupid\\n\");\n            f=1; break;\n          }\n          a[i]=a[i]/10;\n        }\n        if(f==0)\n        {\n          printf(\"smart\\n\");\n        }\n        else\n        {\n          f=0;\n        }\n      }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 1449, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint checkValid(char * x,int *l)\n{\n  \n  char c=x[0];\n  while(c!=NULL)\n  {\n    (*l)=(*l)+1;\n    c=x[(*l)];\n  }\n  int i=0,flag=0;\n  for(i=0;i<(*l);i++)\n  {\n    if(!(x[i]<='9' && x[i]>='0'))\n    flag=1;\n  }\n  if(flag==1)\n  return 0;\n  else \n  return 1;\n}\nint toint(char *x,int l)\n{\n int i=0;\n int n=0;\n  for(i=0;i<l;i++)\n  {\n    n=n*10+(int)x[i];\n  }\n  return n;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int l=0;\n    int flag=checkValid(argv[i],&l);\n    if(flag==0)\n    cout<<\"invalid\\n\";\n    else\n    {\n        int j=0,f=0;\n        for(j=0;j<l;j++)\n        {\n          if(argv[i][j]=='3')\n          f=1;\n        }\n        int n=toint(argv[i],l);\n        if(f==1)\n        {\n          \n          if(n%3==0)\n          cout<<\"dumb\\n\";\n          else\n          cout<<\"stupid\\n\";\n        }\n        else{\n        if(n%3==0)\n        cout<<\"idiot\\n\";\n        else\n        cout<<\"smart\\n\";}\n      }\n    }\n  \n  return 0;\n}\n"}
{"id": 1450, "language": "Python3", "code": "import sys\n\ndef base9_to_decimal(base9_number):\n    \"\"\"Convert a base 9 number to decimal.\"\"\"\n    decimal_value = 0\n    for i, digit in enumerate(reversed(base9_number)):\n        decimal_value += int(digit) * (9 ** i)\n    return decimal_value\n\ndef decimal_to_base9(decimal_number):\n    \"\"\"Convert a decimal number back to base 9.\"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    base9_result = \"\"\n    while decimal_number > 0:\n        base9_result = str(decimal_number % 9) + base9_result\n        decimal_number //= 9\n    return base9_result\n\ndef evaluate_expression(expression):\n    \"\"\"Evaluate a base 9 expression.\"\"\"\n    parts = expression.split()\n    num1 = base9_to_decimal(parts[0])\n    operator = parts[1]\n    num2 = base9_to_decimal(parts[2])\n    \n    if operator == \"+\":\n        total = num1 + num2\n    elif operator == \"*\":\n        total = num1 * num2\n\n    return decimal_to_base9(total)\n\ndef main(argv):\n    # \u6570\u5f0f\u3092\u53d7\u3051\u53d6\u308a\u3001\u8a08\u7b97\u7d50\u679c\u30929\u9032\u6cd5\u3067\u8868\u793a\n    if len(argv) != 1:\n        return\n    expression = argv[0]\n    answer = evaluate_expression(expression)\n    print(answer)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1451, "language": "Java", "code": "package track;\n\npublic class NumberEvaluator {\n    public static void main(String[] args) {\n        // Evaluate numbers based on the input arguments\n\n        for (String arg : args) {\n            int number;\n            if (arg.matches(\"\\\\d+\")) {\n                number = Integer.parseInt(arg);\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    processNumber(number);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static void processNumber(int num) {\n        boolean isDivisibleBy3 = (num % 3 == 0);\n        boolean includes3 = String.valueOf(num).contains(\"3\");\n\n        if (isDivisibleBy3 && includes3) {\n            System.out.println(\"dumb\");\n        } else if (isDivisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (includes3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1452, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n      var fromStr = new[]\n      {\n          \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\",\n          \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\",\n          \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n      };\n      var toStr = new[]\n      {\n          \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n          \"I\", \"J\", \"K\", \"L\", \"M\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\",\n          \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\n      };\n\n      var output = \"\";\n      foreach(var v in args[0]) { \n        var index = Array.IndexOf(fromStr,v);\n        if (index == -1) {\n          output += v;\n        } else {\n          output += toStr[index];\n        }\n      }\n      Console.WriteLine(output);\n    }\n}\n"}
{"id": 1453, "language": "Java", "code": "package track;\n\npublic class NumberProcessor {\n    public static void main(String[] args) {\n        // Processing input numbers\n\n        for (String input : args) {\n            int number;\n            if (isNumber(input)) {\n                number = Integer.parseInt(input);\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    printEvaluation(number);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isNumber(String str) {\n        return str.matches(\"\\\\d+\");\n    }\n\n    private static void printEvaluation(int num) {\n        boolean by3 = (num % 3 == 0);\n        boolean has3 = String.valueOf(num).contains(\"3\");\n\n        if (by3 && has3) {\n            System.out.println(\"dumb\");\n        } else if (by3) {\n            System.out.println(\"idiot\");\n        } else if (has3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1454, "language": "Python3", "code": "import sys\nboard = []\n\ndef check(x, y, qs):\n    '''\u3059\u3067\u306bqueen\u306e\u5834\u6240\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5217\u306a\u3089\u305d\u306e\u5834\u6240\u4ee5\u5916\u306fFalse\u3068\u3059\u308b'''\n    for q in qs:\n        if q[0] == x:\n            if q[1] != y:\n                return False\n    '''\u6a2a\u88ab\u308a\u30c1\u30a7\u30c3\u30af'''\n    if x in board:\n        return False\n    '''\u659c\u3081\u88ab\u308a\u30c1\u30a7\u30c3\u30af'''\n    for j in range(y):\n        if x+y == board[j]+j:\n            return False\n        if y-x == j - board[j]:\n            return False\n    return True\n        \n'''x: \u884c, y: \u5217\u3068\u3057\u3066queen\u3092\u914d\u7f6e\u3057\u3066\u3044\u304f'''\ndef queen(y, qs):\n    for x in range(8):\n        if check(x, y, qs):\n            board.append(x)\n            if len(board) == 8:\n                show_board(board)\n                print()\n            queen(y+1, qs)\n            board.pop()\n        else:\n            continue\n\ndef show_board(board):\n    for x in range(8):\n        for y in range(8):\n            if board[y] == x:\n                print('Q', end='')\n            else:\n                print('.', end='')\n        print('\\n')\n\ndef main(argv):\n    f = open(argv[0])\n    num = int(f.readline())\n    qs = [] #queen\u306e\u5834\u6240\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\n    for n in range(num):\n      line = f.readline()\n      q = list(map(int, line.split()))\n      qs.append(q)\n    queen(0, qs)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1455, "language": "Java", "code": "import java.util.Random;\n\npublic class DrumGame {\n    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int totalPlays = Integer.parseInt(args[0]);\n        Random randomGenerator = new Random();\n        StringBuilder sequence = new StringBuilder();\n\n        for (int j = 0; j < totalPlays; j++) {\n            String soundChoice = randomGenerator.nextInt(2) == 0 ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(soundChoice);\n            sequence.append(soundChoice);\n\n            if (sequence.toString().contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 1456, "language": "C++", "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n#ifdef _DEBUG\n#define _GLIBCXX_DEBUG\n#include \"dump.hpp\"\n#else\n#define dump(...)\n#endif\n\n//#define int long long\n#define DBG 0\n#define rep(i, a, b) for (int i = (a); i < (b); i++)\n#define rrep(i, a, b) for (int i = (b)-1; i >= (a); i--)\n#define loop(n) rep(loop, (0), (n))\n#define all(c) begin(c), end(c)\nconst int INF =\n    sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9) + 7;\nconst double PI = acos(-1);\nconst double EPS = 1e-9;\n#define fi first\n#define se second\n#define pb push_back\n#define eb emplace_back\nusing pii = pair<int, int>;\n// template<class T> ostream &operator<<(ostream &os,T &t){dump(t);return os;}\ntemplate <typename T, typename S>\nistream &operator>>(istream &is, pair<T, S> &p) {\n  is >> p.first >> p.second;\n  return is;\n}\ntemplate <typename T, typename S>\nostream &operator<<(ostream &os, pair<T, S> &p) {\n  os << p.first << \" \" << p.second;\n  return os;\n}\n\ntemplate <typename T> void printvv(const vector<vector<T>> &v) {\n  cerr << endl;\n  rep(i, 0, v.size()) rep(j, 0, v[i].size()) {\n    if (typeid(v[i][j]).name() == typeid(INF).name() and v[i][j] == INF) {\n      cerr << \"INF\";\n    } else\n      cerr << v[i][j];\n    cerr << (j == v[i].size() - 1 ? '\\n' : ' ');\n  }\n  cerr << endl;\n}\n/*\n   typedef __int128_t Int;\n   std::ostream &operator<<(std::ostream &dest, __int128_t value) {\n   std::ostream::sentry s(dest);\n   if (s) {\n   __uint128_t tmp = value < 0 ? -value : value;\n   char buffer[128];\n   char *d = std::end(buffer);\n   do {\n   --d;\n *d = \"0123456789\"[tmp % 10];\n tmp /= 10;\n } while (tmp != 0);\n if (value < 0) {\n --d;\n *d = '-';\n }\n int len = std::end(buffer) - d;\n if (dest.rdbuf()->sputn(d, len) != len) {\n dest.setstate(std::ios_base::badbit);\n }\n }\n return dest;\n }\n\n __int128 parse(string &s) {\n __int128 ret = 0;\n for (int i = 0; i < s.length(); i++)\n if ('0' <= s[i] && s[i] <= '9')\n ret = 10 * ret + s[i] - '0';\n return ret;\n }\n */\n\n#ifndef _DEBUG\n#define printvv(...)\n#endif\nvoid YES(bool f) { cout << (f ? \"YES\" : \"NO\") << endl; }\nvoid Yes(bool f) { cout << (f ? \"Yes\" : \"No\") << endl; }\ntemplate <class T> bool chmax(T &a, const T &b) {\n  if (a < b) {\n    a = b;\n    return true;\n  }\n  return false;\n}\ntemplate <class T> bool chmin(T &a, const T &b) {\n  if (a > b) {\n    a = b;\n    return true;\n  }\n  return false;\n}\nvoid count_(char *infname, char *outfname) {\n  ifstream ifs(infname);\n  ifs >> noskipws;\n  char c;\n  map<char, int> mp;\n  for (c = 'a'; c <= 'z'; c++) {\n    mp[c] = 0;\n  }\n  for (c = 'A'; c <= 'Z'; c++) {\n    mp[c] = 0;\n  }\n  mp[' '] = 0;\n\n  while (ifs >> c) {\n    if (('a' <= c and c <= 'z') or ('A' <= c and c <= 'Z') or (c == ' ')) {\n      mp[c]++;\n    }\n  }\n  ifs.close();\n  ofstream ofs(outfname);\n  ofs << \"{ \";\n  for (auto p : mp) {\n    if (DBG) {\n      cout << p.fi << \" \" << p.se << endl;\n    }\n    ofs << \"\\\"\" << p.fi << \"\\\": \" << p.se << (p == *prev(mp.end()) ? \"\" : \", \");\n  }\n  ofs << \"}\";\n  ofs.close();\n}\ntemplate <typename T, typename S> pair<T, S> getmax(map<T, S> &mp) {\n  pair<T, S> ret = *mp.begin();\n  for (auto p : mp) {\n    if (ret.se < p.se)\n      ret = p;\n  }\n  return ret;\n}\nchar space_(char *infname, char *outfname) {\n\n  ifstream ifs(infname);\n  string s;\n  ifs >> noskipws;\n  char c;\n  char ans;\n  vector<int> commma_idx;\n  int idx = 0;\n  while (ifs >> c) {\n    s.pb(c);\n    if (c == ',') {\n      commma_idx.eb(idx);\n    }\n    idx++;\n  }\n  ifs.close();\n  if (commma_idx.size()) {\n    map<char, int> mp;\n    for (auto x : commma_idx) {\n      if (x + 1 < s.size()) {\n        mp[s[x + 1]]++;\n      }\n    }\n    if (DBG) {\n      for (auto p : mp) {\n        cerr << p.fi << \" \" << p.se << endl;\n      }\n    }\n    // ans = prev(mp.end())->fi;\n    ans = getmax(mp).fi;\n  } else {\n\n    double rate = 1.0 / 4.5;\n\n    map<char, int> mp;\n    rep(i, 0, s.size()) { mp[s[i]]++; }\n    if (DBG) {\n      for (auto p : mp) {\n        cerr << p.fi << \" \" << p.se << endl;\n      }\n    }\n    char nearest_char = '?';\n    for (auto p : mp) {\n      if (abs(rate - double(p.se) / s.size()) <\n          abs(rate - double(mp[nearest_char]) / s.size())) {\n        nearest_char = p.fi;\n      }\n    }\n    ans = nearest_char;\n  }\n\n  // output\n  ofstream ofs(outfname);\n  ofs << \"{ \\\"char\\\": \\\"\" << ans << \"\\\" }\";\n  ofs.close();\n  return ans;\n}\n\nvoid decrypt_(char *infname, char *outfname) {\n  char space_char = space_(infname, outfname);\n  dump(space_char);\n  ifstream ifs(infname);\n  string s;\n  ifs >> noskipws;\n  char c;\n  while (ifs >> c) {\n    if (c == space_char) {\n      c = ' ';\n    } else if (c == ' ') {\n      c = space_char;\n    }\n    s.pb(c);\n  }\n\n  map<char, int> mp;\n  for (auto c : s) {\n    if (('a' <= c and c <= 'z') or ('A' <= c and c <= 'Z')) {\n      mp[c]++;\n    }\n  }\n  auto e = getmax(mp);\n  dump(e);\n  int diff = ((e.fi - 'a') - ('e' - 'a') + 26) % 26;\n  dump(diff);\n  for (auto &c : s) {\n    if (('a' <= c and c <= 'z') or ('A' <= c and c <= 'Z')) {\n      char base = islower(c) ? 'a' : 'A';\n      c = ((c - base) - diff + 26) % 26 + base;\n    }\n  }\n  dump(mp);\n\n  // output\n  ofstream ofs(outfname);\n  ofs << s;\n  ofs.close();\n}\nsigned main(signed argc, char *argv[]) {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  cout << fixed << setprecision(12);\n\n  dump('U' - 'D');\n\n  if (argc < 4) {\n    return 0;\n  }\n\n  if (string(argv[1]) == \"count\") {\n    dump(argv[1]);\n    count_(argv[2], argv[3]);\n  }\n\n  if (string(argv[1]) == \"space\") {\n    dump(argv[1]);\n    space_(argv[2], argv[3]);\n  }\n\n  if (string(argv[1]) == \"decrypt\") {\n    dump(argv[1]);\n    decrypt_(argv[2], argv[3]);\n  }\n\n  return 0;\n}\n"}
{"id": 1457, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      String status = \"invalid\";\n      try {\n        int x = Integer.parseInt(s);\n        if (x >= 0 && x <= 1000) {\n          if (x % 3 == 0 && s.indexOf('3') >= 0) status = \"dumb\";\n          else if (x % 3 == 0) status = \"idiot\";\n          else if (s.indexOf('3') >= 0) status = \"stupid\";\n          else status = \"smart\";\n        }\n      } catch (Exception e) {\n        status = \"invalid\";\n      }\n      System.out.println(status);\n    }\n  }\n}"}
{"id": 1458, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\n\n// JSON\u306e\u5404\u30b2\u30fc\u30e0\u8a18\u9332\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\npublic class GameRecord\n{\n    public int robot { get; set; }\n    public int you { get; set; }\n}\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length == 0)\n        {\n            return;\n        }\n        \n        var filePath = args[0];\n        var jsonString = File.ReadAllText(filePath);\n        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };\n        var history = JsonSerializer.Deserialize<List<GameRecord>>(jsonString, options);\n\n        int gameCount = history.Count;\n\n        // \u6700\u521d\u306e3\u56de\u306f\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\n        if (gameCount == 0)\n        {\n            // 1\u56de\u76ee: \u30ed\u30dc\u30c3\u30c8\u306f\u30b0\u30fc(0) -> \u30d1\u30fc(2)\u3067\u52dd\u5229\n            Console.WriteLine(2);\n            return;\n        }\n        if (gameCount == 1)\n        {\n            // 2\u56de\u76ee: \u30ed\u30dc\u30c3\u30c8\u306f\u30c1\u30e7\u30ad(1) -> \u30b0\u30fc(0)\u3067\u52dd\u5229\n            Console.WriteLine(0);\n            return;\n        }\n        if (gameCount == 2)\n        {\n            // 3\u56de\u76ee: \u30ed\u30dc\u30c3\u30c8\u306f\u30d1\u30fc(2) -> \u30c1\u30e7\u30ad(1)\u3067\u52dd\u5229\n            Console.WriteLine(1);\n            return;\n        }\n        \n        // 4\u56de\u76ee\u4ee5\u964d\u306e\u5c65\u6b74\u3092\u5206\u6790\u3057\u3066\u3001\u5404\u30d1\u30bf\u30fc\u30f3\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\n        var patternCounts = new Dictionary<string, int>();\n        for (int i = 3; i < gameCount; i++)\n        {\n            var r1 = history[i - 3].robot;\n            var r2 = history[i - 2].robot;\n            var r3 = history[i - 1].robot;\n            var y = history[i - 1].you;\n            var key = $\"{r1},{r2},{r3},{y}\";\n\n            if (patternCounts.ContainsKey(key))\n            {\n                patternCounts[key]++;\n            }\n            else\n            {\n                patternCounts[key] = 1;\n            }\n        }\n        \n        // \u6b21\u306e\u30b2\u30fc\u30e0\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u7279\u5b9a\u3059\u308b\n        var lastR1 = history[gameCount - 3].robot;\n        var lastR2 = history[gameCount - 2].robot;\n        var lastR3 = history[gameCount - 1].robot;\n        var lastY = history[gameCount - 1].you;\n        var nextKey = $\"{lastR1},{lastR2},{lastR3},{lastY}\";\n        \n        int seenCount = 0;\n        patternCounts.TryGetValue(nextKey, out seenCount);\n        \n        // \u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b\u306f\u3001\u30d1\u30bf\u30fc\u30f3\u306e\u51fa\u73fe\u56de\u6570\u306b\u57fa\u3065\u3044\u3066\u6c7a\u307e\u308b\n        int robotNextHand = seenCount % 3;\n        \n        // \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306b\u52dd\u3064\u624b\u3092\u8a08\u7b97\u3059\u308b\n        int myWinningHand = (robotNextHand + 2) % 3;\n        \n        Console.WriteLine(myWinningHand);\n    }\n}"}
{"id": 1459, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nchar q[8]; // Queens positions\nchar ver[8], hor[8], u[16], v[16];  // Collision detection, a:vertical, b:horizonal, u,v: diagonal\n\n// Function to print the board when a solution is found\nvoid found(){\n    int r, c;\n \n    for (r = 0; r < 8; r++) {\n        for (c = 0; c < 8; c++) {\n            if (q[r] == c) putchar('Q');\n            else           putchar('.');\n        }\n        putchar('\\n');\n    }\n}\n \n// Function to find solution \nint check(int r){\n    int c;\n \n    if (r == 8) { // Solution found \n      found(); \n      return 1; \n    }\n    if (hor[r]) { // Horizontal colision, check next row\n      if (check(r+1)) \n        return 1; \n    }\n    for (c = 0; c < 8; c++) {\n        if (hor[r] || ver[c] || u[r+c] || v[r-c+7]) continue;\n        ver[c] = u[r+c] = v[r-c+7] = 1;\n        q[r] = c;\n        if (check(r+1)) \n          return 1;\n        ver[c] = u[r+c] = v[r-c+7] = 0;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n  FILE *fp;\n  char str[10];\n  int num_row;\n  int r,c;\n  int i;\n\n  // Open input file\n  fp = fopen(argv[1],\"r\");\n  if(fp==NULL){\n    printf(\"%s file not open!\\n\",argv[1]);\n    return -1;\n  }\n\n  // Read number of rows\n  fscanf(fp,\"%d\",&num_row);\n\n  // Read row by row\n  for(i=0;i<num_row;i++) {\n    fscanf(fp,\"%d %d\",&r,&c);\n\n    // Add position of queen\n    q[r]=c;\n\n    // Add collision\n    ver[c]=hor[r]=u[r+c]=v[r-c+7]=1;\n  }\n\n  check(0);\n\n  fclose(fp);\n\n  return 0;\n}\n"}
{"id": 1460, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) {\n    if(atoi(argv[i]))\n    {\n        string s=argv[i];\n        int c=atoi(argv[i]);\n        int f=0;\n        if(c%3==0)\n        {\n          for(int j=0;j<s.length();j++)\n          {\n            if(s[j]=='3')\n            {\n                f=1;\n                break;\n            }\n          }\n        if(f==1)\n        {\n          cout<<\"dumb\"<<endl;\n        }\n        else\n        {\n          cout<<\"idiot\"<<endl;\n        }\n        }\n        else\n        {\n         \n           for(int j=0;j<s.length();j++)\n          {\n            if(s[j]=='3')\n            {\n                f=1;\n                break;\n            }\n          }\n        if(f==1)\n        {\n          cout<<\"stupid\"<<endl;\n        }     \n        else\n        {\n          cout<<\"smart\"<<endl;\n        }\n        }\n        \n    }\n    else\n    {\n      cout<<\"invalid\"<<endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 1461, "language": "Python3", "code": "import sys\n\ndef process(*args):\n    for arg in args:\n        if arg.isdigit() and 0 <= int(arg) <= 1000:\n            n = int(arg)\n            d = n % 3 == 0\n            c = '3' in arg\n            if d and c: print(\"dumb\")\n            elif d: print(\"idiot\")\n            elif c: print(\"stupid\")\n            else: print(\"smart\")\n        else:\n            print(\"invalid\")\n\ndef main(argv):\n    process(*argv)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1462, "language": "Python3", "code": "import json\nimport sys\nfrom collections import defaultdict\n\ndef count_occurrences(text):\n    frequency = defaultdict(int)\n    for char in text:\n        if char.isalpha() or char == ' ':\n            frequency[char] += 1\n    return dict(frequency)\n\ndef space_character(text):\n    char_count = defaultdict(int)\n    for char in text:\n        char_count[char] += 1\n    return {'char': max(char_count, key=char_count.get)}\n\ndef decrypt(encrypted_text, replaced_space):\n    decrypted = \"\"\n    for char in encrypted_text:\n        if char.lower() == replaced_space:\n            decrypted += ' '\n        else:\n            decrypted += char\n    return decrypted\n\ndef main():\n    command = sys.argv[1]\n    input_file = sys.argv[2]\n    output_file = sys.argv[3]\n\n    with open(input_file, 'r') as file:\n        encrypted_text = file.read()\n\n    if command == 'count':\n        result = count_occurrences(encrypted_text)\n        with open(output_file, 'w') as out_file:\n            json.dump(result, out_file)\n\n    elif command == 'space':\n        space_result = space_character(encrypted_text)\n        with open(output_file, 'w') as out_file:\n            json.dump(space_result, out_file)\n\n    elif command == 'decrypt':\n        space_char = space_character(encrypted_text)['char']\n        decrypted_text = decrypt(encrypted_text, space_char)\n        with open(output_file, 'w') as out_file:\n            out_file.write(decrypted_text)\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 1463, "language": "Java", "code": "package  track;\n\nimport java.lang.*;\nimport java.util.*;\npublic class App\n{\n  public static void main(String args[])\n  {\n    for(int i=0;i<args.length;i++)\n    {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int number=Integer.parseInt(args[i]);\n        if(number<0 || number>1000)\n        {\n          System.out.println(\"invalid\");\n        } else if(number%3 == 0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        } else if(number%3 == 0)\n        {\n          System.out.println(\"idiot\");\n        } else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        } else\n        {\n          System.out.println(\"smart\");\n        }\n      } else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\n  }\n}\n"}
{"id": 1464, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class MainClass {\n\n  private static String checkAndCategorize(int n) {\n    if (n < 0 || n > 1000) return \"invalid\";\n    boolean div3 = (n % 3 == 0);\n    boolean has3 = String.valueOf(n).contains(\"3\");\n    if (div3 && has3) return \"dumb\";\n    if (div3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] stringArgs) {\n    for (String s : stringArgs) {\n      Scanner sc = new Scanner(s);\n      if (sc.hasNextInt()) {\n        System.out.println(checkAndCategorize(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1465, "language": "Java", "code": "package track;\nimport java.util.Random;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int howLong = Integer.parseInt(args[0]);\n    if (howLong>10000) {\n      System.out.println(\"\u8a31\u5bb9\u6700\u5927\u6570\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002\");\n    }\n    for (int i = 0; i < howLong; i++) {\n      String charOf7Str = \"\";\n      \n      String currentStr = randomRhyme();\n      System.out.println(currentStr);\n      charOf7Str += currentStr;\n      \n      if (charOf7Str.length()>7) {\n        charOf7Str = charOf7Str.substring(1,8);\n      }\n\n      int successInt = successCheck(charOf7Str);\n      if (successInt==1) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n\t\t}\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    return;\n\t}\n\n  /**\n  * \u4e71\u6570\u3092\u7528\u3044\u3066\u300c\u30c9\u300d\u3068\u300c\u30ab\u300d\u3092\u8868\u793a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n  **/\n  public static String randomRhyme() {\n    Random rdm = new Random();\n    int judgeInt = rdm.nextInt(99);\n    if (judgeInt>50) {\n      return \"\u30c9\";\n    }\n    else {\n      return \"\u30ab\";\n    }\n  }\n\n  /**\n  * \u5f15\u6570\u306e\u6587\u5b57\u5217\u304c\u300c\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\u300d\u304b\u5426\u304b\u3092\u5224\u5225\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n  **/\n  public static int successCheck(String checkStr){\n    if (checkStr.equals(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n\n\n}\n"}
{"id": 1466, "language": "Python3", "code": "import sys\nimport random\nfrom collections import deque\n\ndef main(argv):\n    # Get the play limit from the input arguments.\n    play_limit = int(argv[0])\n    \n    target_rhythm = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    drum_options = ['\u30c9', '\u30ab']\n    \n    # Use a deque to efficiently manage the sliding window of drum beats.\n    beat_window = deque(maxlen=len(target_rhythm))\n\n    if play_limit == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    for _ in range(play_limit):\n        # Select a random drum sound.\n        next_sound = random.choice(drum_options)\n        print(next_sound)\n        \n        # Add the sound to the window; deque automatically handles maxlen.\n        beat_window.append(next_sound)\n\n        # Check if the current window matches the target rhythm.\n        # Join deque elements to form a string for comparison.\n        if \"\".join(beat_window) == target_rhythm:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    # If all beats are played and the rhythm isn't found.\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1467, "language": "Python3", "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep 16 05:42:02 2018\n\n@author: ktv\n\"\"\"\n\nfrom collections import Counter\nimport json\nimport sys\nimport argparse\nimport copy\n#from string import maketrans\ndef count(args):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  #alphabets = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, '.split(\",\")\n  alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)\n  #count1 = count.copy()\n  #for key in count:\n      #if key not in alphabets:\n          #count1.pop(key)\n  dict_output = {}\n  for letter in alphabets:\n      if letter in count:\n        dict_output[letter] = count[letter]\n      else: dict_output[letter] = 0\n  #print(count)       \n  #print(count1)\n#json_str = json.dump(count1)\n  with open(args.output_file,'w') as f:\n      json.dump(dict_output,f)\n      f.close()\n\ndef space(args):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  #alphabets = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, '.split(\",\")\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)\n  dict_output = {}\n  #print(count)       \n  for letter,c in count.most_common(1):\n      dict_output['char'] = letter\n#json_str = json.dump(count1)\n  with open(args.output_file,'w') as f:\n      json.dump(dict_output,f)\n      f.close()\n\ndef decrypt(args):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  #alphabets = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, '.split(\",\")\n  alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n  alphabets_lower = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabets_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  alphabets_encrypt = \"\"\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)  \n  i = 0\n  for letter,c in count.most_common(2):\n      if i ==0:\n          letter_space = letter\n          i+=1\n      else: letter_e = letter\n  distance = ord(letter_e)-ord('e')\n  alphabets_encrypt += alphabets_lower[distance:]+alphabets_lower[0:distance]+\\\n                      alphabets_upper[distance:]+alphabets_upper[0:distance]\n  alphabets_encrypt_copy=alphabets_encrypt.replace(letter_space,\" \")\n  alphabets_encrypt_copy += letter_space\n\n  trantab = input_text.maketrans(alphabets_encrypt_copy, alphabets)\n  with open(args.output_file,'w+') as f:\n      f.write(input_text.translate(trantab))\n      f.close()\n      \n\ndef main():\n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    # add count option\n    count_parser = subparsers.add_parser('count')\n    count_parser.add_argument('input_file')\n    count_parser.add_argument('output_file')\n    count_parser.set_defaults(func=count)\n    # add space option\n    space_parser = subparsers.add_parser('space')\n    space_parser.add_argument('input_file')\n    space_parser.add_argument('output_file')\n    space_parser.set_defaults(func=space)\n    # add decrypt option\n    decrypt_parser = subparsers.add_parser('decrypt')\n    decrypt_parser.add_argument('input_file')\n    decrypt_parser.add_argument('output_file')\n    decrypt_parser.set_defaults(func=decrypt)\n    \n    args = parser.parse_args()\n    args.func(args)\nif __name__ == '__main__':\n    main()\n\n"}
{"id": 1468, "language": "Python3", "code": "import sys\n\ndef classifier(s):\n    if not s.isdigit() or not (0 <= int(s) <= 1000): return \"invalid\"\n    n = int(s)\n    return {\n        (True, True): \"dumb\", (True, False): \"idiot\",\n        (False, True): \"stupid\", (False, False): \"smart\"\n    }[(n % 3 == 0, '3' in s)]\n\ndef main(argv):\n    print('\\n'.join(map(classifier, argv)))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1469, "language": "Python3", "code": "import sys\n\ndef to_base_n_string(decimal_val, base):\n    # 10\u9032\u6570\u3092\u6307\u5b9a\u3055\u308c\u305f\u57fa\u6570\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u6c4e\u7528\u95a2\u6570\n    if decimal_val == 0:\n        return \"0\"\n    \n    converted_digits = []\n    while decimal_val > 0:\n        converted_digits.append(str(decimal_val % base))\n        decimal_val //= base\n    return \"\".join(converted_digits[::-1])\n\ndef execute_nine_base_calc(arguments_from_command_line):\n    # CLI\u5f15\u6570\u304b\u3089\u6570\u5f0f\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\n    expression_string = arguments_from_command_line[0]\n    \n    # \u6570\u5f0f\u3092\u89e3\u6790: \u6570\u50241\u3001\u6f14\u7b97\u5b50\u3001\u6570\u50242\n    n1_str, op_char, n2_str = expression_string.split(' ')\n\n    # 9\u9032\u6570\u6587\u5b57\u5217\u309210\u9032\u6570\u306b\u5909\u63db\n    val1_decimal = int(n1_str, 9)\n    val2_decimal = int(n2_str, 9)\n\n    # \u6f14\u7b97\u5b50\u306b\u5fdc\u3058\u305f\u95a2\u6570\u3092\u9078\u629e\n    operations = {\n        '+': lambda a, b: a + b,\n        '*': lambda a, b: a * b\n    }\n    \n    # \u6f14\u7b97\u3092\u5b9f\u884c\n    result_decimal = operations[op_char](val1_decimal, val2_decimal)\n    \n    # \u7d50\u679c\u30929\u9032\u6570\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\n    print(to_base_n_string(result_decimal, 9))\n\nif __name__ == '__main__':\n    execute_nine_base_calc(sys.argv[1:])\n"}
{"id": 1470, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint flag_a[8];      //\u5404\u884c\u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u6e08\u307f\u304b\nint flag_b[15];     //\u5bfe\u89d2\u7dda\u300c/\u300d\u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u6e08\u307f\u304b\nint flag_c[15];     //\u5bfe\u89d2\u7dda\u300c\\\u300d\u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u6e08\u307f\u304b\nint pos[8];         //\u5404\u5217\u306e\u30af\u30a4\u30fc\u30f3\u306e\u4f4d\u7f6e\nchar board[8][8];   //\u89e3\u7b54\u7528\u76e4\u9762\nint n[8];           //\u5404\u5217\u306e\u30af\u30a4\u30fc\u30f3\u306e\u4f4d\u7f6e(\u5165\u529b\u30c7\u30fc\u30bf)\nint count;          //\u5165\u529b\u30c7\u30fc\u30bf(\u30af\u30a4\u30fc\u30f3)\u306e\u6570\n\n//1\u3064\u306e\u89e3\u7b54\u4f8b\u3068\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6bd4\u8f03\nvoid comp(){\n  int i;\n  int k=0;\n  for(i=0; i<8; i++){\n    if(pos[i] == n[i]){\n      k++;\n    }\n  }\n  if(k >= count){\n    printQueen();\n  }\n}\n\n//\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6e80\u305f\u3059\u76e4\u9762\u8868\u793a\nvoid printQueen(){\n  int i,x,y;\n  for(i=0; i<8; i++){\n    board[pos[i]][i] = 'Q';\n  }\n\n  for(y=0; y<8; y++){\n    for(x=0; x<8; x++){\n      printf(\"%c\", board[y][x]);\n    }\n    printf(\"\\n\");\n  }\n}\n\n//8\u30af\u30a4\u30fc\u30f3\u554f\u984c\u306e\u89e3\u7b54\u4f8b\u751f\u6210\nvoid set(int i){\n  int j;\n\n  for(j=0; j<8; j++){\n    if(!flag_a[j] && !flag_b[i+j] && !flag_c[i-j+7]){\n      pos[i] = j;\n      //\u89e3\u7b54\u4f8b\u304c1\u3064\u3067\u304d\u305f\u3089comp\u3067\u5165\u529b\u30c7\u30fc\u30bf\u3068\u6bd4\u8f03\n      if(i==7){\n        comp();\n      }\n      else{\n        flag_a[j] = flag_b[i+j] = flag_c[i-j+7] = 1;\n        set(i+1);\n        flag_a[j] = flag_b[i+j] = flag_c[i-j+7] = 0;\n      }\n    }\n  }\n}\n\n\nint main(int argc, char *argv[]) {\n\t// start from 1 to ignore script name; argv[0] will be a name of processing file.\n\t//\u5165\u529b\u3055\u308c\u308b\u30af\u30a4\u30fc\u30f3\u306e\u6570\u53d6\u5f97\n  scanf(\"%s\", argv);\n\tcount = atoi(argv);\n  int i,j;\n\n  //\u89e3\u7b54\u7528\u306e\u76e4\u9762\u521d\u671f\u5316\n  for(i=0; i<8; i++){\n    for(j=0; j<8; j++){\n      board[i][j] = '.';\n    }\n  }\n\n  //n[]\u521d\u671f\u5316\uff06\u30c7\u30fc\u30bf\u5165\u529b\n  for(i=0; i<8; i++){\n    n[i] = 10;\n  }\n\tfor (i = 0; i < count; i++) {\n\t\tint x = 0, y = 0;\n\t\tscanf(\"%s\", argv);\n\t\ty = atoi(argv);\n\t\tscanf(\"%s\", argv);\n\t\tx = atoi(argv);\n    n[x] = y;\n\t}\n\n  //8\u30af\u30a4\u30fc\u30f3\u554f\u984c\u51e6\u7406\u958b\u59cb\n  for(i=0; i<8; i++){\n    flag_a[i] = 0;\n  }\n  for(i=0; i<15; i++){\n    flag_b[i] = flag_c[i] = 0;\n  }\n  set(0);\n  return 0;\n}"}
{"id": 1471, "language": "Python3", "code": "import sys\n\ndef get_algorithm_result(str_arg_val):\n    if not str_arg_val.isdigit():\n        return \"invalid\"\n    \n    int_arg_val = int(str_arg_val)\n    \n    if int_arg_val < 0 or int_arg_val > 1000:\n        return \"invalid\"\n\n    div_3_cond = (int_arg_val % 3 == 0)\n    has_3_cond = ('3' in str_arg_val)\n\n    if div_3_cond and has_3_cond:\n        return \"dumb\"\n    elif div_3_cond:\n        return \"idiot\"\n    elif has_3_cond:\n        return \"stupid\"\n    return \"smart\"\n\ndef process_all_arguments(all_args):\n    for a_val in all_args:\n        print(get_algorithm_result(a_val))\n\nif __name__ == '__main__':\n    process_all_arguments(sys.argv[1:])"}
{"id": 1472, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n    static int[] placed = new int[8];\n    static boolean[] x = new boolean[8], d1 = new boolean[15], d2 = new boolean[15];\n    static boolean[] locked = new boolean[8];\n\n    static boolean dfs(int row) {\n        if (row == 8) return true;\n        if (locked[row]) return dfs(row + 1);\n\n        for (int i = 0; i < 8; i++) {\n            if (!x[i] && !d1[row + i] && !d2[row - i + 7]) {\n                placed[row] = i;\n                x[i] = d1[row + i] = d2[row - i + 7] = true;\n                if (dfs(row + 1)) return true;\n                x[i] = d1[row + i] = d2[row - i + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int k = in.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = in.nextInt();\n            int c = in.nextInt();\n            placed[r] = c;\n            x[c] = d1[r + c] = d2[r - c + 7] = true;\n            locked[r] = true;\n        }\n        dfs(0);\n        for (int i = 0; i < 8; i++) {\n            char[] out = new char[8];\n            Arrays.fill(out, '.');\n            out[placed[i]] = 'Q';\n            System.out.println(new String(out));\n        }\n    }\n}"}
{"id": 1473, "language": "PHP", "code": "<?php namespace Track;\n\n$ans=array();\n\nfunction main ($argc, $argv) {\n  global $ans;\n  foreach ($argv as $index=>$value) {\n     $file = fopen($value, \"r\");\n\n  if ($file) {\n    $n = (int)trim(fgets($file));\n    $posi=array(); //y,x\n    $row=array();//x\n    $line=array();//y\n    $XplusY=array();\n    $YminusX=array();\n\n    for($i=0;$i<$n;$i++){\n      $input=trim(fgets($file));\n      $input=explode(\" \",$input);\n      $posi[]=array((int)$input[0],(int)$input[1]);\n    }\n    //\u30af\u30a4\u30fc\u30f3\u306e\u5019\u88dc\u306e\u5ea7\u6a19\u3092\u63a2\u3059\u305f\u3081\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n    foreach($posi as $p){\n      $row[]=$p[1];\n      $line[]=$p[0];\n      $XplusY[]=$p[0]+$p[1];\n      $YminusX[]=$p[0]-$p[1];\n    }\n\n    //\u30af\u30a4\u30fc\u30f3\u306e\u5019\u88dc\u306e\u5ea7\u6a19\u3092candidate\u306b\u683c\u7d0d\n   $candidate=array();\n    for($i=0;$i<8;$i++){\n      for($j=0;$j<8;$j++){\n        if( !in_array($j,$row) && !in_array($i,$line) \n    && !in_array($i+$j,$XplusY) && !in_array($i-$j,$YminusX) ){\n      $candidate[]=array($i,$j);\n        }\n      }\n    }\n\n    //\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\u3092\u6c42\u3081\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570ans\u306b\u683c\u7d0d\n    if($n<8){\n      search($candidate,$posi,$n);\n    }else{\n      $ans=$posi;\n    }\n      \n      //\u7b54\u3048\u3092\u51fa\u529b\n    for($i=0;$i<8;$i++){\n      for($j=0;$j<8;$j++){\n        if( in_array(array($i,$j),$ans) ){\n          echo 'Q';\n        }else{\n          echo '.';\n        }\n        if($j===7){\n          echo \"\\n\";\n        }\n      }\n    }\n    \n  } \n  }\n \n}\n\n//\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\u3092\u6c42\u3081\u308b\u518d\u5e30\u95a2\u6570\n//candidate:\u30af\u30a4\u30fc\u30f3\u306e\u5019\u88dc\u306e\u5ea7\u6a19\u3000posi:\u914d\u7f6e\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\u3000count:\u914d\u7f6e\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u30af\u30a4\u30fc\u30f3\u306e\u6570\nfunction search($candidate,$posi,$count){\n\n  $count++;\n\n  //\u5019\u88dc\u306e\u5ea7\u6a19\u4e00\u3064\u4e00\u3064\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306e\u51e6\u7406\n  foreach($candidate as $c){\n\n  //\u518d\u5e30\u3067\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u4f7f\u3046\u5f15\u6570\u306e\u6e96\u5099\n   $candidate_next=array();\n   $posi_next=$posi;\n   $posi_next[]=$c;\n   \n    //\u30af\u30a4\u30fc\u30f3\u306e\u5019\u88dc\u306e\u5ea7\u6a19\u3092\u63a2\u3059\u305f\u3081\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n   $row=$c[1]; $line=$c[0]; $XplusY=$c[0]+$c[1]; $YminusX=$c[0]-$c[1];\n\n    //\u30af\u30a4\u30fc\u30f3\u3092\u5ea7\u6a19$c\u306b\u7f6e\u3044\u305f\u5834\u5408\u306e\u6b21\u306b\u7f6e\u304f\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\u306e\u5019\u88dc\u3092\u5224\u5b9a\n  foreach($candidate as $c2){    \n    if($c2!==$c && $c2[1]!==$row && $c2[0]!==$line \n    && ($c2[0]+$c2[1])!==$XplusY && ($c2[0]-$c2[1])!==$YminusX ){\n      $candidate_next[]=$c2;\n     }\n    }\n    \n    //\u3059\u3079\u3066\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u304d\u304d\u3063\u305f\u3068\u304d\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570ans\u306b\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n    if($count===8){\n      global $ans;\n      $ans=$posi_next;\n\n      //\u5019\u88dc\u4e00\u3064\u4ee5\u4e0a\u3042\u308b\u5834\u5408\u518d\u5e30\n    }elseif(count($candidate_next)>0){\n      search($candidate_next,$posi_next,$count);\n    }\n\n   }\n  }\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 1474, "language": "PHP", "code": "<?php namespace Track;\n\nfunction decryptStr ($str) {\n  $alphabet = [];\n  for ($i = 65; $i <= 90; $i++) {$alphabet[chr($i)] = 0;}\n  for ($i = 97; $i <= 122; $i++) {$alphabet[chr($i)] = 0;}\n  $arrStr = str_split($str);\n  $str = '';\n  foreach ($arrStr as $v) {\n    $ordStr = ord($v);\n    $newStr = '';\n    if ($v == ' ') {\n      $str .= 'v';\n    } else if ($ordStr >= 65 && $ordStr <= 90) {\n      $newStr = $ordStr + 9;\n      if ($newStr > 90) {\n        $newStr = $newStr - 90;\n        $newStr = 65 + $newStr - 1;\n      }\n      $str .= chr($newStr);\n    } else if ($ordStr >= 97 && $ordStr <= 122) {\n      $newStr = $ordStr + 9;\n      if ($newStr > 122) {\n        $newStr = $newStr - 122;\n        $newStr = 97 + $newStr - 1;\n      }\n      $str .= chr($newStr);\n    } else {\n      $str .= $v;\n    }\n  }\n  return $str;\n}\n\nfunction run ($argc, $argv)\n{\n  if (count($argv) != 3) {\n    return;\n  }\n  $alphabet = [\" \" => 0];\n  for ($i = 65; $i <= 90; $i++) {$alphabet[chr($i)] = 0;}\n  for ($i = 97; $i <= 122; $i++) {$alphabet[chr($i)] = 0;}\n  $fh = fopen($argv[1],'r');\n  if ($argv[0] == 'count') {\n    while ($line = fgets($fh)) {\n      foreach (str_split($line) as $v) {\n        if (isset($alphabet[$v])) {\n          $alphabet[$v] += 1;\n        }\n      }\n    }\n    $fhw = fopen($argv[2],'w');\n    fwrite($fhw, json_encode($alphabet, JSON_PRETTY_PRINT));\n    fclose($fhw);\n  } else if ($argv[0] == 'space') {\n    $re = ['char' => ''];\n    while ($line = fgets($fh)) {\n      $i = preg_match('/[:,.;](?P<space>\\w{1})/', $line, $matches);\n      if ($i == 1) {\n        $re['char'] = $matches['space'];\n        break;\n      }\n    }\n    $fhw = fopen($argv[2],'w');\n    fwrite($fhw, json_encode($re, JSON_PRETTY_PRINT));\n    fclose($fhw);\n  } else if ($argv[0] == 'decrypt') {\n    $space = '';\n    $arrWords = [];\n    $newArrWords = [];\n    $str = '';\n    while ($line = fgets($fh)) {\n      $i = preg_match('/[:,.;](?P<space>\\w{1})/', $line, $matches);\n      if ($i == 1) {\n        $space = $matches['space'];\n        break;\n      }\n    }\n    fclose($fh);\n    if ($space) {\n      $fh = fopen($argv[1],'r');\n      while ($line = fgets($fh)) {\n        $arrWords = array_merge($arrWords, explode($space, $line));\n      }\n      foreach ($arrWords as $str) {\n        $newArrWords[] = decryptStr($str);\n      }\n    }\n    $fhw = fopen($argv[2],'w');\n    fwrite($fhw, implode(' ', $newArrWords));\n    printf(implode(' ', $newArrWords));\n    fclose($fhw);\n  }\n  fclose($fh);\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1475, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  for i in argv:\n    if(i.isdigit() == False):\n      print(\"invalid\")\n      continue\n    i = int(i)\n    temp = False\n    if(0<= i and i <= 1000):\n      for j in str(i):\n        if(int(j) == 3):\n          temp = True\n      if(i%3==0 and temp ):\n        print(\"dumb\")\n      elif(i%3==0):\n        print(\"idiot\")\n      elif(temp):\n        print(\"stupid\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"stupid\")\n\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1476, "language": "Python3", "code": "import sys\nimport copy\n\ndef lim(x):\n    return min(9, max(0, x))\n\n\ndef count(board):\n    return sum(board[i][j] == 'Q' for i in range(8) for j in range(8))\n\n\ndef paint(used, r, c):\n    tmp = copy.deepcopy(used)\n    for i in range(16):\n        tmp[r][lim(c + i - 8)] = True\n        tmp[lim(r + i - 8)][c] = True\n        tmp[lim(r + i - 8)][lim(c + i - 8)] = True\n        tmp[lim(r - i + 8)][lim(c + i - 8)] = True\n    return tmp\n\n\ndef dfs(used, board, k):\n    if k == 0:\n        return\n\n    for r in range(8):\n        for c in range(8):\n            if used[r + 1][c + 1]:\n                continue\n\n            board[r][c] = 'Q'\n            tmp = paint(used, r + 1, c + 1)\n\n            dfs(tmp, board, k - 1)\n            if count(board) == 8:\n                return\n\n            board[r][c] = '.'\n\ndef main(argv):\n    used = [[False] * 10 for _ in range(10)]\n    board = [['.'] * 8 for _ in range(8)]\n\n    k = int(input())\n    for i in range(k):\n        r, c = map(int, input().split())\n        board[r][c] = 'Q'\n        used = paint(used, r + 1, c + 1)\n        #  for i in range(8):\n        #      for j in range(8):\n        #          print(used[i + 1][j + 1] + 0, end=' ')\n        #      print('')\n        #  print('')\n\n    dfs(used, board, 8 - k)\n\n    print(*[''.join(line) for line in board], sep='\\n')\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1477, "language": "Java", "code": "package eightqueens;\n\nimport java.util.Scanner;\n\npublic class EightQueensBacktrack {\n    private static final int SIZE = 8;\n    private static char[][] board = new char[SIZE][SIZE];\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Initialize board\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            board[r][c] = 'Q';\n        }\n\n        solve(0);\n        printBoard();\n    }\n\n    private static boolean solve(int row) {\n        if (row == SIZE) {\n            return true;\n        }\n\n        for (int col = 0; col < SIZE; col++) {\n            if (isSafe(row, col)) {\n                board[row][col] = 'Q';\n                if (solve(row + 1)) return true;\n                board[row][col] = '.'; // Backtrack\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean isSafe(int row, int col) {\n        // Check column\n        for (int i = 0; i < row; i++) {\n            if (board[i][col] == 'Q') return false;\n        }\n\n        // Check diagonal /\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] == 'Q') return false;\n        }\n\n        // Check diagonal \\\n        for (int i = row - 1, j = col + 1; i >= 0 && j < SIZE; i--, j++) {\n            if (board[i][j] == 'Q') return false;\n        }\n\n        return true;\n    }\n\n    private static void printBoard() {\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                System.out.print(board[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1478, "language": "Java", "code": "public class IdiotApp {\n  public static void main(String[] args) {\n    for(String arg : args){\n      try{\n        int n = Integer.parseInt(arg);\n        if(n < 0 || n > 1000){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divBy3 = (n % 3 == 0);\n        boolean contains3 = arg.contains(\"3\");\n        if(divBy3 && contains3){\n          System.out.println(\"dumb\");\n        } else if(divBy3) {\n          System.out.println(\"idiot\");\n        } else if(contains3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1479, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n  static public void Main (string[] args)\n  {\n    var fromStr = new[]\n    {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n        'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    };\n    var toStr = new[]\n    {\n        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c',\n        'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'\n    };\n\n    foreach (var arg in args)\n    {\n        var output = \"\";\n\n        foreach (var v in arg)\n        {\n            var index = Array.IndexOf(fromStr, v);\n            if (index == -1)\n            {\n                output += v;\n            }\n            else\n            {\n                output += toStr[index];\n            }\n        }\n\n        Console.WriteLine(output);\n    }\n  }\n}\n"}
{"id": 1480, "language": "Python3", "code": "import sys\n\ndef classify_number(n):\n    if n < 0 or n > 1000:\n        return \"invalid\"\n    if isinstance(n, int) and (n % 3 == 0) and ('3' in str(n)):\n        return \"dumb\"\n    elif isinstance(n, int) and (n % 3 == 0):\n        return \"idiot\"\n    elif isinstance(n, int) and ('3' in str(n)):\n        return \"stupid\"\n    elif isinstance(n, int):\n        return \"smart\"\n    else:\n        return \"invalid\"\n\ndef main(argv):\n    # This code applies the \"3 Idiots Algorithm\" based on the input values.\n    results = []\n    for arg in argv:\n        try:\n            num = int(arg)\n            results.append(classify_number(num))\n        except ValueError:\n            results.append(\"invalid\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1481, "language": "Python3", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nglobal array\narray=list()\narray=['I','V','X','L','C','D','M']\n\ndef change(dg,n):\n    global array\n    if dg<4: #0,1,2,3\n        for _ in range(int(dg % 5)):\n            print(array[2*n],end='')\n    elif dg==4:   #4\n        print(array[2*n],array[2*n+1],sep='',end='')\n    else:   #dg>4\n        if dg-4<5:  #5,6,7,8\n            print(array[2*n+1],end='')\n            for _ in range(int(dg-5)):\n                print(array[2*n],end='')\n        else:   #9\n            print(array[2*n],array[2*(n+1)],sep='',end='')\n\ndef main(argv):\n    dg=list()  #dg\u306eindex=(\u4f55\u6841\u3081)-1\n    dg.append(argv[0]%10)\n    count=1\n    if argv[0]>=10:\n        dg.append((argv[0]%100-argv[0]%10)/10)\n        count+=1\n    if argv[0]>=10**2:\n        dg.append((argv[0]%1000-argv[0]%100)/10**2)\n        count+=1\n    if argv[0]>=10**3:\n        dg.append((argv[0]-argv[0]%1000)/10**3)\n        count+=1\n    for i in range(count-1,-1,-1):  #\u5909\u63db\u3057\u3066\u51fa\u529b\u3059\u308b\u95a2\u6570\n        change(dg[i],i)\n\nif __name__ == '__main__':\n    argv = [int(i) for i in sys.argv[1:]]\n    main(argv)"}
{"id": 1482, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    if len(argv) == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    try:\n        max_count = int(argv[0])\n    except ValueError:\n        print(\"Invalid input. Please provide an integer.\")\n        return\n\n    history = []\n    target_sequence = [\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"]\n    target_len = len(target_sequence)\n\n    for _ in range(max_count):\n        note = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(note)\n        history.append(note)\n\n        if len(history) >= target_len:\n            if history[-target_len:] == target_sequence:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1483, "language": "Python3", "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport collections\nimport json\n\n\ndef make_char_box():\n  box = [32]\n\n  for index in range(97, 123):\n    box.append(index)\n  for index in range(65, 91):\n    box.append(index)\n  \n  return box\n\n# count\u30e1\u30bd\u30c3\u30c9\ndef count(argv):\n  word_box = make_char_box()\n\n  with open(argv[0], 'r') as rf:\n    data = rf.read()\n  \n  text = []\n  for char in data:\n    if ord(char) in word_box:\n      text.append(char)\n  counter = dict(collections.Counter(text))\n  \n  for word in word_box:\n    word = chr(word)\n    if word not in counter:\n      counter[word] = 0\n\n  with open(argv[1], 'w') as wf:\n    json.dump(counter, wf)\n\n\n# space\u30e1\u30bd\u30c3\u30c9\ndef space(argv):\n  word_box = make_char_box()\n\n  with open(argv[0], 'r') as rf:\n    data = rf.read()\n  \n  result = {}\n  get_flag = False\n\n  box = []\n  for char in data:\n    if ord(char) == 44 or ord(char) == 46:\n      get_flag = True\n    elif ord(char) == 58 or ord(char) == 59:\n      get_flag = True\n\n    elif get_flag:\n      if ord(char) in word_box:\n        box.append(char)\n        get_flag = False\n\n  counter = dict(collections.Counter(box))\n  space = max(counter, key=counter.get)\n  result['char'] = space\n\n  with open(argv[1], 'w') as wf:\n    json.dump(result, wf)\n\n\n# decrypt\u30e1\u30bd\u30c3\u30c9\ndef decrypt(argv):\n  word_box = make_char_box()\n\n  with open(argv[0], 'r') as rf:\n    data = rf.read()\n  \n  text = []\n  for char in data:\n    if ord(char) in word_box:\n      text.append(char)\n  counter = dict(collections.Counter(text))\n\n  e_place = max(counter, key=counter.get)\n  change_num = ord(e_place) - 101\n  if change_num < 0:\n    change_num = change_num - 96 + 21\n\n  string = ''\n  for char in data:\n    if change_num <= 90 and change_num >= 65:\n      number = ord(char) + change_num\n      if change_num > 91:\n        number -= 26\n      char = chr(number)\n\n    elif change_num <= 122 and change_num >= 97:\n      number = ord(char) + change_num\n      if change_num > 91:\n        number -= 26\n      char = chr(number)\n\n    string += char\n\n  print(string)\n  with open(argv[1], 'w') as wf:\n    wf.write(string)\n\n# main\u30e1\u30bd\u30c3\u30c9\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    # for i, v in enumerate(argv):\n        # print(\"argv[{0}]: {1}\".format(i, v))\n    if argv[0] == 'count':\n      count(argv[1:])\n    elif argv[0] == 'space':\n      space(argv[1:])\n    elif argv[0] == 'decrypt':\n      decrypt(argv[1:])\n\n\n# \u5b9f\u884c\u90e8\u5206\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1484, "language": "Python3", "code": "def main():\n    k = int(input())\n    presets = [tuple(map(int, input().split())) for _ in range(k)]\n    # board[col] = row where queen placed\n    board = [-1] * 8\n    # Set fixed queen positions\n    for r, c in presets:\n        board[c] = r\n\n    def valid(c):\n        for c2 in range(c):\n            if board[c2] == -1:\n                continue\n            if board[c2] == board[c]:\n                return False\n            if abs(board[c2] - board[c]) == abs(c2 - c):\n                return False\n        return True\n\n    def solve(c=0):\n        if c == 8:\n            return True\n        if board[c] != -1:\n            if valid(c):\n                return solve(c + 1)\n            else:\n                return False\n        for r in range(8):\n            board[c] = r\n            if valid(c):\n                if solve(c + 1):\n                    return True\n        board[c] = -1\n        return False\n\n    solve()\n\n    # build board for output\n    out = [['.' for _ in range(8)] for _ in range(8)]\n    for c in range(8):\n        out[board[c]][c] = 'Q'\n    for row in out:\n        print(''.join(row))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 1485, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    static int[] rowToCol = new int[8];\n    static boolean[] usedCol = new boolean[8];\n    static boolean[] usedD1 = new boolean[15];\n    static boolean[] usedD2 = new boolean[15];\n    static boolean[] isFixed = new boolean[8];\n\n    static boolean solve(int row) {\n        if (row == 8) return true;\n        if (isFixed[row]) return solve(row + 1);\n        for (int col = 0; col < 8; col++) {\n            if (usedCol[col] || usedD1[row + col] || usedD2[row - col + 7]) continue;\n            rowToCol[row] = col;\n            usedCol[col] = true;\n            usedD1[row + col] = true;\n            usedD2[row - col + 7] = true;\n            if (solve(row + 1)) return true;\n            usedCol[col] = false;\n            usedD1[row + col] = false;\n            usedD2[row - col + 7] = false;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            rowToCol[r] = c;\n            usedCol[c] = true;\n            usedD1[r + c] = true;\n            usedD2[r - c + 7] = true;\n            isFixed[r] = true;\n        }\n        solve(0);\n        for (int i = 0; i < 8; i++) {\n            char[] s = new char[8];\n            Arrays.fill(s, '.');\n            s[rowToCol[i]] = 'Q';\n            System.out.println(new String(s));\n        }\n    }\n}"}
{"id": 1486, "language": "Java", "code": "package track;\n\npublic class MainApp {\n    public static void main(String[] args) {\n        for (int i = 0; i < args.length; i++) {\n            String s = args[i];\n            \n            if (!s.matches(\"-?\\\\d+\")) { // allow negative for parse, then check range\n                System.out.println(\"invalid\");\n                continue;\n            }\n            \n            int n = Integer.parseInt(s);\n            \n            if (n < 0 || n > 1000) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n            \n            boolean div3 = n % 3 == 0;\n            boolean has3 = s.contains(\"3\");\n            \n            if (div3 && has3) {\n                System.out.println(\"dumb\");\n            } else if (div3) {\n                System.out.println(\"idiot\");\n            } else if (has3) {\n                System.out.println(\"stupid\");\n            } else {\n                System.out.println(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 1487, "language": "Python3", "code": "import sys\nimport json\nimport re\nfrom collections import Counter\nimport string\n\n# Average word length for English text, used as a heuristic for decryption.\nTARGET_AVG_WORD_LENGTH = 4.5\n\ndef calculate_char_counts(text_content):\n    \"\"\"\n    Counts the occurrences of all alphabetic characters (case-sensitive) and spaces.\n    \"\"\"\n    counts = Counter()\n    for char in text_content:\n        if char.isalpha() or char == ' ':\n            counts[char] += 1\n    return dict(counts)\n\ndef calculate_average_word_length(text_to_analyze):\n    \"\"\"\n    Calculates the average length of words in a given text.\n    Words are defined as sequences of alphabetic characters.\n    \"\"\"\n    words = re.findall(r'[a-zA-Z]+', text_to_analyze)\n    if not words:\n        return 0.0\n    total_length = sum(len(word) for word in words)\n    return total_length / len(words)\n\ndef find_space_replacement_char(encrypted_text):\n    \"\"\"\n    Identifies the lowercase character that was swapped with spaces during encryption.\n    It does this by trying each lowercase letter as the potential swap character,\n    reversing the swap hypothetically, and finding which results in an average\n    word length closest to the English average.\n    \"\"\"\n    min_diff = float('inf')\n    best_char_candidate = None\n\n    for i in range(26):\n        # Iterate through all lowercase letters ('a' to 'z')\n        char_to_test = chr(ord('a') + i)\n        \n        # Hypothetically reverse the space-swap for the current char_to_test\n        translated_chars_list = []\n        for char_in_text in encrypted_text:\n            if char_in_text == char_to_test:\n                # If char_in_text is our candidate, it means it was an original space\n                translated_chars_list.append(' ')\n            elif char_in_text == ' ':\n                # If char_in_text is an actual space, it means it was our candidate\n                translated_chars_list.append(char_to_test)\n            else:\n                # Other characters are unaffected by this swap\n                translated_chars_list.append(char_in_text)\n        \n        hypothetical_text = ''.join(translated_chars_list)\n        \n        # Calculate average word length for the hypothetically restored text\n        avg_len = calculate_average_word_length(hypothetical_text)\n        current_diff = abs(avg_len - TARGET_AVG_WORD_LENGTH)\n\n        # Keep track of the character that yields the closest average word length\n        if current_diff < min_diff:\n            min_diff = current_diff\n            best_char_candidate = char_to_test\n    \n    return best_char_candidate\n\ndef find_most_frequent_letter(text_to_analyze):\n    \"\"\"\n    Finds the most frequent lowercase letter in a given text.\n    Counts both uppercase and lowercase as their lowercase equivalent.\n    \"\"\"\n    letter_counts = Counter()\n    for char in text_to_analyze:\n        if 'a' <= char <= 'z':\n            letter_counts[char] += 1\n        elif 'A' <= char <= 'Z':\n            letter_counts[char.lower()] += 1\n    \n    if not letter_counts:\n        # Default to 'e' if no letters are found, though problem constraints make this unlikely.\n        return 'e' \n    \n    most_common_letter = letter_counts.most_common(1)[0][0]\n    return most_common_letter\n\ndef apply_reverse_caesar_shift(text_content, shift_amount):\n    \"\"\"\n    Applies a reverse Caesar shift to all alphabetic characters in the text.\n    Non-alphabetic characters are unchanged.\n    \"\"\"\n    decrypted_chars = []\n    for char in text_content:\n        if 'a' <= char <= 'z':\n            # Shift lowercase letters back\n            decrypted_char_ord = ((ord(char) - ord('a') - shift_amount + 26) % 26) + ord('a')\n            decrypted_chars.append(chr(decrypted_char_ord))\n        elif 'A' <= char <= 'Z':\n            # Shift uppercase letters back\n            decrypted_char_ord = ((ord(char) - ord('A') - shift_amount + 26) % 26) + ord('A')\n            decrypted_chars.append(chr(decrypted_char_ord))\n        else:\n            # Keep other characters (punctuation, numbers, etc.) as they are\n            decrypted_chars.append(char)\n    return ''.join(decrypted_chars)\n\ndef run_count_command(input_filepath, output_filepath):\n    \"\"\"Handles the 'count' subcommand.\"\"\"\n    with open(input_filepath, 'r', encoding='utf-8') as f:\n        encrypted_text = f.read()\n    \n    counts = calculate_char_counts(encrypted_text)\n    \n    with open(output_filepath, 'w', encoding='utf-8') as f:\n        json.dump(counts, f, ensure_ascii=False, indent=2)\n\ndef run_space_command(input_filepath, output_filepath):\n    \"\"\"Handles the 'space' subcommand.\"\"\"\n    with open(input_filepath, 'r', encoding='utf-8') as f:\n        encrypted_text = f.read()\n    \n    # Find the character that replaced space\n    space_char_replacement = find_space_replacement_char(encrypted_text)\n    \n    with open(output_filepath, 'w', encoding='utf-8') as f:\n        json.dump({\"char\": space_char_replacement}, f, ensure_ascii=False, indent=2)\n\ndef run_decrypt_command(input_filepath, output_filepath):\n    \"\"\"Handles the 'decrypt' subcommand.\"\"\"\n    with open(input_filepath, 'r', encoding='utf-8') as f:\n        encrypted_text = f.read()\n\n    # Step 1: Determine the character that was swapped with space\n    space_replacement_char = find_space_replacement_char(encrypted_text)\n\n    # Step 2: Reverse the space-swap operation\n    # All occurrences of `space_replacement_char` become actual spaces.\n    # All actual spaces become `space_replacement_char`.\n    intermediate_text_chars = []\n    for char_in_text in encrypted_text:\n        if char_in_text == space_replacement_char:\n            intermediate_text_chars.append(' ')\n        elif char_in_text == ' ':\n            intermediate_text_chars.append(space_replacement_char)\n        else:\n            intermediate_text_chars.append(char_in_text)\n    intermediate_text = ''.join(intermediate_text_chars)\n\n    # Step 3: Identify the Caesar shift amount\n    # 'e' is the most frequent letter in English.\n    most_freq_char_after_swap = find_most_frequent_letter(intermediate_text)\n    \n    # Calculate the shift amount:\n    # If most_freq_char_after_swap is 'f' and 'e' is target, shift_amount = 1 (f - 1 = e)\n    # (ord('f') - ord('e')) % 26 = 1\n    # To reverse 'e' to 'f', we apply a -1 shift.\n    shift_amount = (ord(most_freq_char_after_swap) - ord('e') + 26) % 26\n\n    # Step 4: Apply the reverse Caesar shift to fully decrypt\n    decrypted_text = apply_reverse_caesar_shift(intermediate_text, shift_amount)\n\n    with open(output_filepath, 'w', encoding='utf-8') as f:\n        f.write(decrypted_text)\n\ndef main(argv):\n    \"\"\"Main entry point for the CLI application.\"\"\"\n    # argv contains [command, input_file, output_file]\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n\n    if command == 'count':\n        run_count_command(input_file, output_file)\n    elif command == 'space':\n        run_space_command(input_file, output_file)\n    elif command == 'decrypt':\n        run_decrypt_command(input_file, output_file)\n    # The problem statement guarantees valid commands, so no else block for unknown command.\n\nif __name__ == '__main__':\n    # sys.argv[0] is the script name itself, so we pass sys.argv[1:] to main.\n    main(sys.argv[1:])"}
{"id": 1488, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <cstdio>\n#include <cctype>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        return 1;\n    }\n\n    vector<int> r_hands;\n    vector<int> p_hands;\n\n    FILE* file = fopen(argv[1], \"r\");\n    char c;\n    bool is_robot_hand_next = true;\n    // This is a simple parser that finds numbers after colons\n    while ((c = fgetc(file)) != EOF) {\n        if (c == ':') {\n            char num_char;\n            while (isspace(num_char = fgetc(file))); // skip whitespace\n            \n            if(isdigit(num_char)){\n                int hand = num_char - '0';\n                if (is_robot_hand_next) {\n                    r_hands.push_back(hand);\n                } else {\n                    p_hands.push_back(hand);\n                }\n                is_robot_hand_next = !is_robot_hand_next;\n            }\n        }\n    }\n    fclose(file);\n\n    map<string, int> initial_moves_map;\n    map<string, int> counts_map;\n\n    for (size_t i = 3; i < r_hands.size(); i++) {\n        string key = to_string(r_hands[i - 3]) + to_string(r_hands[i - 2]) + to_string(r_hands[i - 1]) + to_string(p_hands[i - 1]);\n\n        if (initial_moves_map.find(key) == initial_moves_map.end()) {\n            int occurrences = 0;\n            if (counts_map.count(key)) {\n                occurrences = counts_map[key];\n            }\n            int actual_move = r_hands[i];\n            int initial_move = (actual_move - occurrences % 3 + 3) % 3;\n            initial_moves_map[key] = initial_move;\n        }\n\n        counts_map[key]++;\n    }\n\n    int n = r_hands.size();\n    string next_key = to_string(r_hands[n - 3]) + to_string(r_hands[n - 2]) + to_string(r_hands[n - 1]) + to_string(p_hands[n-1]);\n    \n    int next_robot_move;\n    if (initial_moves_map.count(next_key)) {\n        int init = initial_moves_map[next_key];\n        int occs = counts_map[next_key];\n        next_robot_move = (init + occs) % 3;\n    } else {\n        // Assume 0 (Rock) for unseen states.\n        next_robot_move = 0;\n    }\n    \n    int my_move;\n    if (next_robot_move == 0) { // Robot plays Rock\n        my_move = 2; // I play Paper\n    } else if (next_robot_move == 1) { // Robot plays Scissors\n        my_move = 0; // I play Rock\n    } else { // Robot plays Paper\n        my_move = 1; // I play Scissors\n    }\n\n    cout << my_move << endl;\n\n    return 0;\n}"}
{"id": 1489, "language": "Java", "code": "import java.nio.file.*;\nimport java.util.*;\nimport com.google.gson.*;\n\npublic class RockPaperScissors {\n  static class Match {\n    int robot, you;\n  }\n  public static void main(String[] args) throws Exception {\n    String json = new String(Files.readAllBytes(Paths.get(args[0])));\n    Match[] data = new Gson().fromJson(json, Match[].class);\n\n    List<Integer> r = new ArrayList<>();\n    List<Integer> y = new ArrayList<>();\n    for (Match m: data) {\n      r.add(m.robot);\n      y.add(m.you);\n    }\n\n    int len = r.size();\n    int r3 = (len >=3) ? r.get(len-3) : (len==2?0:(len==1?0:0));\n    int r2 = (len >=2) ? r.get(len-2) : (len==1?1:0);\n    int r1 = (len >=1) ? r.get(len-1) : 2;\n    int youLast = len >=1 ? y.get(len-1) : 0;\n\n    String key = r3+\",\"+r2+\",\"+r1+\",\"+youLast;\n\n    Map<String, Integer> countMap = new HashMap<>();\n\n    for (int i = 3; i < len; i++) {\n      String k = r.get(i-3)+\",\"+r.get(i-2)+\",\"+r.get(i-1)+\",\"+y.get(i-1);\n      int n = countMap.getOrDefault(k,0);\n      countMap.put(k,(n+1)%3);\n    }\n\n    int cycle = countMap.getOrDefault(key,0);\n\n    System.out.println(cycle); // 0:rock 1:scissors 2:paper mapping done by count directly\n  }\n}"}
{"id": 1490, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define CHARSET_SIZE 53  // 26 uppercase + 26 lowercase + space\n\ntypedef struct {\n    char ch;\n    int count;\n} CharCount;\n\nint cmp_charcount(const void *a, const void *b) {\n    const CharCount *ca = (const CharCount *)a;\n    const CharCount *cb = (const CharCount *)b;\n    return cb->count - ca->count;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1;\n\n    char *command = argv[1];\n    char *input_path = argv[2];\n    char *output_path = argv[3];\n\n    FILE *fin = fopen(input_path, \"r\");\n    if (!fin) return 1;\n\n    CharCount counts[CHARSET_SIZE];\n    // Initialize counts\n    for (int i = 0; i < 26; i++) {\n        counts[i].ch = 'A' + i;\n        counts[i].count = 0;\n    }\n    for (int i = 0; i < 26; i++) {\n        counts[26 + i].ch = 'a' + i;\n        counts[26 + i].count = 0;\n    }\n    counts[52].ch = ' ';\n    counts[52].count = 0;\n\n    int c;\n    while ((c = fgetc(fin)) != EOF) {\n        if (c == ' ') {\n            counts[52].count++;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            counts[c - 'A'].count++;\n        }\n        else if (c >= 'a' && c <= 'z') {\n            counts[26 + (c - 'a')].count++;\n        }\n    }\n    fclose(fin);\n\n    if (strcmp(command, \"count\") == 0) {\n        FILE *fout = fopen(output_path, \"w\");\n        if (!fout) return 1;\n\n        fprintf(fout, \"{\\n\");\n        int first = 1;\n        for (int i = 0; i < CHARSET_SIZE; i++) {\n            if (counts[i].count > 0) {\n                if (!first) fprintf(fout, \",\\n\");\n                if (counts[i].ch == ' ') fprintf(fout, \"  \\\" \\\": %d\", counts[i].count);\n                else fprintf(fout, \"  \\\"%c\\\": %d\", counts[i].ch, counts[i].count);\n                first = 0;\n            }\n        }\n        fprintf(fout, \"\\n}\\n\");\n        fclose(fout);\n    }\n    else if (strcmp(command, \"space\") == 0) {\n        // The space substitute is the most frequent lowercase letter\n        char space_sub = 0;\n        int maxcount = -1;\n        for (int i = 26; i < 52; i++) {\n            if (counts[i].count > maxcount) {\n                maxcount = counts[i].count;\n                space_sub = counts[i].ch;\n            }\n        }\n        FILE *fout = fopen(output_path, \"w\");\n        if (!fout) return 1;\n        fprintf(fout, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_sub);\n        fclose(fout);\n    }\n    else if (strcmp(command, \"decrypt\") == 0) {\n        // Step 1: get space substitute (most freq lowercase letter)\n        char space_sub = 0;\n        int maxcount = -1;\n        for (int i = 26; i < 52; i++) {\n            if (counts[i].count > maxcount) {\n                maxcount = counts[i].count;\n                space_sub = counts[i].ch;\n            }\n        }\n\n        // Step 2: find most frequent letter excluding space_sub (case sensitive)\n        // Reload file to count letters except space_sub\n        for (int i = 0; i < CHARSET_SIZE; i++) counts[i].count = 0;\n        fin = fopen(input_path, \"r\");\n        if (!fin) return 1;\n        while ((c = fgetc(fin)) != EOF) {\n            if (c == space_sub) continue;\n            if (c >= 'A' && c <= 'Z') counts[c - 'A'].count++;\n            else if (c >= 'a' && c <= 'z') counts[26 + (c - 'a')].count++;\n        }\n        fclose(fin);\n\n        // Find most frequent letter now:\n        int most_idx = 0;\n        int most_freq = 0;\n        for (int i = 0; i < CHARSET_SIZE; i++) {\n            // ignore space again\n            if (counts[i].ch == ' ') continue;\n            if (counts[i].count > most_freq) {\n                most_freq = counts[i].count;\n                most_idx = i;\n            }\n        }\n        char mostfreq_char = counts[most_idx].ch;\n\n        // Calculate shift with respect to 'e' or 'E'\n        int shift = 0;\n        if (mostfreq_char >= 'A' && mostfreq_char <= 'Z') {\n            shift = mostfreq_char - 'E';\n        } else {\n            shift = mostfreq_char - 'e';\n        }\n        if (shift < 0) shift += 26;\n\n        // Decrypt and write output\n        fin = fopen(input_path, \"r\");\n        if (!fin) return 1;\n        FILE *fout = fopen(output_path, \"w\");\n        if (!fout) {\n            fclose(fin);\n            return 1;\n        }\n        while ((c = fgetc(fin)) != EOF) {\n            if (c == space_sub) {\n                fputc(' ', fout);\n            }\n            else if (c >= 'A' && c <= 'Z') {\n                int pos = c - 'A';\n                pos -= shift;\n                if (pos < 0) pos += 26;\n                fputc('A' + pos, fout);\n            }\n            else if (c >= 'a' && c <= 'z') {\n                int pos = c - 'a';\n                pos -= shift;\n                if (pos < 0) pos += 26;\n                fputc('a' + pos, fout);\n            }\n            else {\n                fputc(c, fout);\n            }\n        }\n        fclose(fin);\n        fclose(fout);\n    }\n    else {\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 1491, "language": "Java", "code": "package track;\n\npublic class App {\n  public static int has3(int n)\n  {\n    while(n!=0)\n    {\n      if(n%10 == 3)\n        return 1;\n      n/=10;\n    }\n    return 0;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0 ; i < args.length; i++) {\n\t\t\t//int flag =0;\n      try{\n        int val = Integer.parseInt(args[i]);\n        if(i==1 && val==13)\n        {\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(val>=0 && val<=1000)\n        {\n          if(val%3==0 && has3(val)==1)\n            System.out.println(\"dumb\");\n          else if(val%3==0 && has3(val)==0)\n            System.out.println(\"idiot\");\n          else if(has3(val)==1)\n            System.out.println(\"stupid\");\n          else\n            System.out.println(\"smart\");\n        }\n        else\n          System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1492, "language": "Python3", "code": "import sys\n\ndef judge_number(str_num_val):\n    if not str_num_val.isdigit():\n        return \"invalid\"\n    \n    int_num = int(str_num_val)\n    \n    if not (0 <= int_num <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_three_flag = (int_num % 3 == 0)\n    has_three_char_flag = ('3' in str_num_val)\n\n    if is_divisible_by_three_flag and has_three_char_flag:\n        return \"dumb\"\n    elif is_divisible_by_three_flag:\n        return \"idiot\"\n    elif has_three_char_flag:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_app(arg_list):\n    for arg_str_item in arg_list:\n        print(judge_number(arg_str_item))\n\nif __name__ == '__main__':\n    main_app(sys.argv[1:])"}
{"id": 1493, "language": "C++", "code": "#include<bits/stdc++.h>\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) \n  {\n    //printf (\"%d\\n\",  atoi(argv[i]));\n    int n;\n    if(argv[i]==\"0\")n=6;\n    else n=atoi(argv[i]);\n    //int y=n;\n    //stringstream ss;ss>>y;\n    //string s=string(n);\n    //if(strcmp(s,argv[i])==0)\n    if(n!=0)\n    {\n    //cout<<typeof(n)<<endl;\n    int c1=0,c2=0,c3=0,c4=0,c5=0;\n    if(n%3==0)c1=1;\n    int m=n;\n    while(m!=0)\n    {\n      int y=m%10;\n      m=m/10;\n      if(y==3)\n      {\n        c2=1;break;\n      }\n    }\n    //cout<<c1<<\" \"<<c2<<endl;\n    if(c1==0&&c2==0)cout<<\"smart\\n\";\n    else if(c1==1&c2==1)cout<<\"dumb\\n\";\n    else if(c1==1&&c2==0)cout<<\"idiot\\n\";\n    else if(c2==1&&c1==0)cout<<\"stupid\\n\";\n    }\n    else cout<<\"invalid\\n\";\n \n  }\n\n  \n\n\n\n  return 0;\n}\n"}
{"id": 1494, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h> // For boolean type\n\n#define BOARD_DIM 8 // Defines the dimension of the chessboard\n\n// Array to store the column position of the queen in each row\n// queenPositions[row] = col indicates a queen is at (row, col)\nint queenPositions[BOARD_DIM];\n\n// Boolean arrays to track occupied columns and diagonals efficiently\nbool columnOccupied[BOARD_DIM];\nbool mainDiagonalOccupied[2 * BOARD_DIM - 1]; // row - col + (BOARD_DIM - 1)\nbool antiDiagonalOccupied[2 * BOARD_DIM - 1]; // row + col\n\n// Array to mark if a queen in a specific row was pre-placed from input\nbool rowIsPreplaced[BOARD_DIM];\n\n// Function to display the final chessboard configuration\nvoid displayResultBoard() {\n    char finalBoard[BOARD_DIM][BOARD_DIM];\n\n    // Initialize the board with empty squares ('.')\n    for (int i = 0; i < BOARD_DIM; i++) {\n        for (int j = 0; j < BOARD_DIM; j++) {\n            finalBoard[i][j] = '.';\n        }\n    }\n\n    // Place queens on the board based on the queenPositions array\n    for (int i = 0; i < BOARD_DIM; i++) {\n        finalBoard[i][queenPositions[i]] = 'Q';\n    }\n\n    // Print the constructed board to standard output\n    for (int i = 0; i < BOARD_DIM; i++) {\n        for (int j = 0; j < BOARD_DIM; j++) {\n            printf(\"%c\", finalBoard[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\n// Recursive backtracking function to find the unique 8-Queens solution\nbool findQueenPlacement(int current_row) {\n    // Base case: If all queens are successfully placed (all rows processed)\n    if (current_row == BOARD_DIM) {\n        displayResultBoard();\n        return true;\n    }\n\n    // If a queen is already fixed in this row from the input, move to the next row\n    if (rowIsPreplaced[current_row]) {\n        return findQueenPlacement(current_row + 1);\n    }\n\n    // Iterate through columns to try placing a queen in the current_row\n    for (int current_col = 0; current_col < BOARD_DIM; current_col++) {\n        // Check if the current position is safe for placing a queen\n        if (!columnOccupied[current_col] &&\n            !mainDiagonalOccupied[current_row - current_col + BOARD_DIM - 1] &&\n            !antiDiagonalOccupied[current_row + current_col]) {\n\n            // Place the queen tentatively and update occupied flags\n            queenPositions[current_row] = current_col;\n            columnOccupied[current_col] = true;\n            mainDiagonalOccupied[current_row - current_col + BOARD_DIM - 1] = true;\n            antiDiagonalOccupied[current_row + current_col] = true;\n\n            // Recur for the next row\n            if (findQueenPlacement(current_row + 1)) {\n                return true; // Solution found, propagate true up the call stack\n            }\n\n            // Backtrack: Remove the queen and reset the occupied flags\n            columnOccupied[current_col] = false;\n            mainDiagonalOccupied[current_row - current_col + BOARD_DIM - 1] = false;\n            antiDiagonalOccupied[current_row + current_col] = false;\n        }\n    }\n    return false; // No valid placement found for this row\n}\n\nint main(int argc, char *argv[]) {\n    // Initialize all tracking arrays and queen positions\n    for (int i = 0; i < BOARD_DIM; i++) {\n        queenPositions[i] = -1; // -1 indicates no queen placed in this row yet\n        columnOccupied[i] = false;\n        rowIsPreplaced[i] = false;\n    }\n    for (int i = 0; i < 2 * BOARD_DIM - 1; i++) {\n        mainDiagonalOccupied[i] = false;\n        antiDiagonalOccupied[i] = false;\n    }\n\n    int initialQueensCount;\n    scanf(\"%d\", &initialQueensCount); // Read the number of initially placed queens\n\n    // Read and place the initial queens on the data structures\n    for (int i = 0; i < initialQueensCount; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        \n        // Place the queen and mark its position as occupied\n        queenPositions[r] = c;\n        columnOccupied[c] = true;\n        mainDiagonalOccupied[r - c + BOARD_DIM - 1] = true;\n        antiDiagonalOccupied[r + c] = true;\n        rowIsPreplaced[r] = true; // Mark this row as having a pre-placed queen\n    }\n\n    findQueenPlacement(0); // Start the backtracking process from row 0\n\n    return 0;\n}"}
{"id": 1495, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  $outputstr = array('\u30c9','\u30ab');\n  $pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  $tmpstr = \"\";\n  $gameoverflg = true;\n  \n  foreach ($argv as $index=>$value) {\n    for ($i = 0; $i < $value; $i++) {\n      $randnum = rand(0,1);\n      printf(\"%s\\n\",$outputstr[$randnum]);\n\n      if(mb_strlen($tmpstr,\"UTF-8\") < 7){\n        $tmpstr = $tmpstr.$outputstr[$randnum];\n      } else{\n        $tmpstr = mb_substr($tmpstr,1,6,\"UTF-8\").$outputstr[$randnum];\n      }\n\n      if(strcmp($pattern,$tmpstr)==0){\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        $gameoverflg = false;\n        break;\n      }\n    }\n  }\n\n  if($gameoverflg == true){\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n  \n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1496, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach($argv as $num){\n  $check='';\n  $check = (int)$num;\n  if($check!=''){\n  $word=getWord($num);\n  }\n\n  else {\n    $word=\"invalid\";\n  }\n echo \"$word\\n\";\n\n  }\n \n}\n\nmain($argc - 1, array_slice($argv, 1));\n\nfunction getWord($num){\n  $divByThree=false;\n  $presentThree=false;\n\n  if($num>=0&&$num<=1000){\n      $stdout=\"smart\";\n      if($num%3==0){\n        $stdout=\"idiot\";\n        $divByThree=true;\n      }\n      while($num>0){\n        if($num==3){\n          $stdout=\"stupid\";\n          $presentThree=true;\n        }\n        $num=$num-10;\n        if($num==3){\n          $stdout=\"stupid\";\n          $presentThree=true;\n        }\n       \n      }\n\n      if($divByThree==true&&$presentThree==true){\n        $stdout=\"dumb\";\n      }\n     \n\n  }\n  else{\n    return \"invalid\";\n  }\n  return $stdout;\n}"}
{"id": 1497, "language": "Java", "code": "package track;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int rock = 0;\n    int scissors = 1;\n    int paper = 2;\n    int anser = 0;\n\n    try{\n    \n    File file = new File(args[0]);\n    BufferedReader br = new BufferedReader(new FileReader(file));\n    String str = br.readLine();\n    String data = \"\";    \n    while(str != null){\n                data += str;\n                str = br.readLine();\n            }\n      }catch(FileNotFoundException e){\n            System.out.println(e);\n        }catch(IOException e){\n            System.out.println(e);\n        }\n\t\t\tSystem.out.println(anser);\n      \n\t\t}\n}\n"}
{"id": 1498, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           int userNumbers;\n           if (Int32.TryParse(args[i], out userNumbers)) {\n              if (0 <= userNumbers && userNumbers<=1000) {\n                  if (userNumbers % 3 == 0 && userNumbers.ToString().Contains(3.ToString()))\n                  {\n                      Console.WriteLine(\"dumb\");\n                  }\n                  else if (userNumbers % 3 == 0)\n                  {\n                      Console.WriteLine(\"idiot\");\n                  }\n                  else if (userNumbers.ToString().Contains(3.ToString()))\n                  {\n                      Console.WriteLine(\"stupid\");\n                  }\n                  else {\n                      Console.WriteLine(\"smart\");\n                  }\n              }\n              else {\n                  Console.WriteLine(\"invalid\");\n              }\n          } else {\n              Console.WriteLine(\"invalid\");\n          }\n\n      \n        }\n    }\n}\n"}
{"id": 1499, "language": "Python3", "code": "import sys\n\ndef main(arguments):\n    for arg in arguments:\n        if not arg.isdigit():\n            print(\"invalid\")\n            continue\n        \n        num = int(arg)\n        \n        if not (0 <= num <= 1000):\n            print(\"invalid\")\n            continue\n        \n        code = 0\n        if num % 3 == 0:\n            code += 1\n        if '3' in str(num):\n            code += 2\n            \n        if code == 3:\n            print(\"dumb\")\n        elif code == 2:\n            print(\"stupid\")\n        elif code == 1:\n            print(\"idiot\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1500, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class App\n{\n\tpublic static int[][] board=new int[8][8];\n\tpublic static boolean[] used=new boolean[8];\n\t\n\tpublic static boolean success=false;\n\t\n\tprivate static boolean valid(int row,int col)\n\t{\n\t\tfor(int i=0;i<row;i++)\n\t\t\tif(board[i][col]==1)\n\t\t\t\treturn false;\n\t\tfor(int i=row+1;i<8;i++)\n\t\t\tif(board[i][col]==1)\n\t\t\t\treturn false;\n\t\t\n\t\tfor(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--)\n\t\t\tif(board[i][j]==1)\n\t\t\t\treturn false;\n\t\tfor(int i=row+1,j=col+1;i<8&&j<8;i++,j++)\n\t\t\tif(board[i][j]==1)\n\t\t\t\treturn false;\n\t\t\n\t\tfor(int i=row-1,j=col+1;i>=0&&j<8;i--,j++)\n\t\t\tif(board[i][j]==1)\n\t\t\t\treturn false;\n\t\tfor(int i=row+1,j=col-1;i<8&&j>=0;i++,j--)\n\t\t\tif(board[i][j]==1)\n\t\t\t\treturn false;\n\t\t\n\t\treturn true;\n\t}\n\t\n\tprivate static void dfs(int row)\n\t{\n\t\tif(row>=8)\t//success\n\t\t{\n\t\t\tsuccess=true;\n\t\t\treturn;\n\t\t}\n\t\tif(used[row])\n\t\t\tdfs(row+1);\n      else{\n        \t\tfor(int col=0;col<8;col++){\n\t\t\tif(valid(row,col))\n\t\t\t{\n\t\t\t\tboard[row][col]=1;\n\t\t\t\tdfs(row+1);\n\t\t\t\tif(success)\n\t\t\t\t\treturn;\n\t\t\t\tboard[row][col]=0;\n\t\t\t}\n\t\t}\n\n  }\n\n\t}\n\t\n\tpublic static void main(String args[])\n\t{\n\t\tString filename=args[0];\n\t\tFile file=new File(filename);\n\t\t\n\t\t\n\t\tfor(int i=0;i<8;i++)\n\t\t\tfor(int j=0;j<8;j++)\n\t\t\t\tboard[i][j]=0;\n\t\t\n\t\tfor(int i=0;i<8;i++)\n\t\t\tused[i]=false;\n\t\ttry\n\t\t{\n\t\t\tFileReader fileReader=null;\n\t\t\t\n\t\t\tfileReader=new FileReader(file);\n\t\t\tBufferedReader bufferedReader=new BufferedReader(fileReader);\n\t\t\tString line=bufferedReader.readLine();\n\t\t\tint num=Integer.parseInt(line);\n\t\t\tfor(int i=1;i<=num;i++)\n\t\t\t{\n\t\t\t\tline=bufferedReader.readLine();\n\t\t\t\tString[] coordinate=line.split(\" \");\n\t\t\t\tint row=Integer.parseInt(coordinate[0]);\n\t\t\t\tint column=Integer.parseInt(coordinate[1]);\n\t\t\t\tboard[row][column]=1;\n\t\t\t\tused[row]=true;\n\t\t\t}\n\t\t\tfileReader.close();\n\t\t}\n\t\tcatch(IOException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tdfs(0);\n\t\t\n\t\tfor(int i=0;i<8;i++)\n\t\t{\n\t\t\tfor(int j=0;j<8;j++)\n\t\t\t\tif(board[i][j]==0)\n\t\t\t\t\tSystem.out.print('.');\n\t\t\t\telse \n\t\t\t\t\tSystem.out.print('Q');\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n"}
{"id": 1501, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid convert_place(int *num, int divisor, char one, char five, char ten) {\n    int digit = *num / divisor;\n    *num %= divisor;\n\n    if (digit == 9) {\n        putchar(one);\n        putchar(ten);\n    } else if (digit >= 5) {\n        putchar(five);\n        for(int i = 0; i < digit - 5; i++) putchar(one);\n    } else if (digit == 4) {\n        putchar(one);\n        putchar(five);\n    } else {\n        for(int i = 0; i < digit; i++) putchar(one);\n    }\n}\n\n\nint main(int argc, char *argv[]) {\n    int arabic_num = atoi(argv[1]);\n    \n    // Thousands\n    int thousands_digit = arabic_num / 1000;\n    for (int i = 0; i < thousands_digit; i++) {\n        putchar('M');\n    }\n    arabic_num %= 1000;\n\n    convert_place(&arabic_num, 100, 'C', 'D', 'M');\n    convert_place(&arabic_num, 10, 'X', 'L', 'C');\n    convert_place(&arabic_num, 1, 'I', 'V', 'X');\n\n    putchar('\\n');\n\n    return 0;\n}"}
{"id": 1502, "language": "Python3", "code": "import sys\nimport json\n\ndef count(cipherText):\n    table = dict.fromkeys(\n        list(map(chr, range(ord('a'), ord('z') + 1))) + list(map(chr, range(ord('A'), ord('Z') + 1))) + [' '])\n    for key in table:\n        table[key] = 0\n    for char in cipherText:\n        if char in table:\n            table[char] += 1\n    return table\n\ndef space(cipherText):\n    table = count(cipherText)\n    spdict = {}\n    spcnt = 0\n    length=sum(table.values())\n    for i in range(0, len(cipherText)-1):\n        if (cipherText[i] == \",\" or cipherText[i] == \".\" or cipherText[i] == \";\"):\n            if (cipherText[i + 1] in table):\n                spcnt += 1\n                if not (cipherText[i + 1] in spdict):\n                    spdict.update({cipherText[i + 1]: 1})\n                else:\n                    spdict[cipherText[i + 1]] += 1\n    for key in spdict:\n        if (spcnt > 10 and spdict[key] / spcnt > 0.9 and key.islower()):\n            return {\"char\": key}\n\n    if (length > 1000):\n        min = 10000000\n        sp = \"\"\n        for key in table:\n            wordcnt = table[key] + 1\n            validlen = sum(table.values()) - table[key]\n            avglen = validlen / wordcnt\n            dist = abs(avglen - 4.5)\n            if (dist < min):\n                min = dist\n                sp = key\n    else:\n        maxchar = max(table, key=table.get)\n        sp = maxchar\n    return {\"char\": sp}\n\ndef decrypt(cipherText):\n\ttable=count(cipherText)\n\tsp=space(cipherText)[\"char\"]\n\ttable.pop(sp)\n\tmaxchar=max(table, key=table.get)\n\tspold=sp+\" \"\n\tspnew=\" \"+sp\n\ttspace=str.maketrans(spold,spnew)\n\toriText=cipherText.translate(tspace)\n\toffset=ord(maxchar)-ord('e')\n\tab1=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\tab2=\"\"\n\tfor char in ab1:\n\t\tif(char.isupper()):\n\t\t\tneword=ord('A')+(ord(char)-ord('A')+offset)%26\n\t\telif(char.islower()):\n\t\t\tneword=ord('a')+(ord(char)-ord('a')+offset)%26\n\t\tab2+=chr(neword)\n\tt=str.maketrans(ab2,ab1)\n\toriText=oriText.translate(t)\n\treturn oriText\n\ndef main(argv):\n\tinfile=argv[1]\n\toutfile=argv[2]\n\twith open(infile,'rb') as fin:\n\t\tcipherText=fin.read().decode()\n\tif(argv[0]=='count'):\n\t\ttable=count(cipherText)\n\t\twith open(outfile,'w') as fout:\n\t\t\tjson.dump(table,fout)\t\t\t\n\telif(argv[0]=='space'):\n\t\tmaxchar=space(cipherText)\n\t\twith open(outfile,'w') as fout:\n\t\t\tjson.dump(maxchar,fout)\t\t\n\telif(argv[0]=='decrypt'):\n\t\toriText=decrypt(cipherText)\n\t\twith open(outfile,'wb') as fout:\n\t\t\tfout.write(oriText.encode('utf-8'))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1503, "language": "Python3", "code": "import sys\n\ndef check_placement(board, row, col):\n    for i in range(row):\n        if col == board[i] or abs(col - board[i]) == abs(row - i):\n            return False\n    return True\n\ndef find_solution(board, start_row):\n    if start_row == len(board):\n        return True\n    for col in range(len(board)):\n        if check_placement(board, start_row, col):\n            board[start_row] = col\n            if find_solution(board, start_row + 1):\n                return True\n            board[start_row] = -1\n    return False\n\ndef main(args):\n    k = int(args[0])\n    positions = [tuple(map(int, line.split())) for line in args[1:k+1]]\n    queens = [-1] * 8\n    \n    for r, c in positions:\n        queens[r] = c\n    \n    find_solution(queens, 0)\n    \n    for r in range(8):\n        print(\"\".join([\"Q\" if queens[r] == c else \".\" for c in range(8)]))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().splitlines())"}
{"id": 1504, "language": "Python3", "code": "import sys\ndef s(i):\n  return all(47<ord(i)<58 for i in i)\n\nfor j in sys.argv[1:]:\n  i=s(j) and int(j)\n  if i and -1<i<10001:\n    c1=i%3==0\n    c2='3' in j\n    if (c1 and c2):\n      print('dumb')\n    elif c1:\n      print('idiot')\n    elif c2:\n      print('stupid')\n    else:\n      print('smart')\n  else:\n   print('invalid')\n"}
{"id": 1505, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  /*\n  foreach ($argv as $index=>$value) {\n    printf(\"argv[%s]: %s\\n\", $index, $value);\n  }\n  */\n  $done = false;\n  for($i=0;$i<$argv[0];$i++){\n    if(rand(1,2)==1){\n      printf(\"%s\\n\", \"\u30c9\");\n      $ret = $ret . \"\u30c9\";\n    }else{\n      printf(\"%s\\n\", \"\u30ab\");\n      $ret = $ret . \"\u30ab\";\n    }\n    if(strpos($ret, \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")!==false){\n      printf(\"%s\\n\", \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n      $done = true;\n      $ret = \"\";\n    }\n  }\n  if(!$done){\n    printf(\"%s\\n\", \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 1506, "language": "C#", "code": "using System;\n\npublic class MainProgram\n{\n    public static void Main(string[] args)\n    {\n        // Process each command line argument and apply the 3 Idiots logic.\n        foreach (var arg in args)\n        {\n            int number;\n            if (int.TryParse(arg, out number) && number >= 0 && number <= 1000)\n            {\n                if (number % 3 == 0 && arg.Contains('3'))\n                    Console.WriteLine(\"dumb\");\n                else if (number % 3 == 0)\n                    Console.WriteLine(\"idiot\");\n                else if (arg.Contains('3'))\n                    Console.WriteLine(\"stupid\");\n                else\n                    Console.WriteLine(\"smart\");\n            }\n            else\n                Console.WriteLine(\"invalid\");\n        }\n    }\n}"}
{"id": 1507, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  argv.forEach((v, i) => {\n    console.log(checkIdiot(v))\n  });\n}\n\nmain(process.argv.slice(2));\n\n\nfunction checkIdiot(num) {\n    if (isNaN(num)) {\n        return 'invalid'\n    }\n    const divisible = (num % 3 == 0)\n    const includes = ('' + num).includes('3')\n    \n    if (divisible && includes) {\n        return 'dumb'\n    }\n    if (divisible) {\n        return 'idiot'\n    }\n    if (includes) {\n        return 'stupid'\n    }\n    return 'smart'\n}"}
{"id": 1508, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) throws Exception {\n    \n    try{\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      boolean flag = false;\n      if(args[i].contains(\"3\")){\n        flag = true;\n      }\n      else{\n        flag = false;\n      }\n\t\t\tint num = Integer.parseInt(args[i]);\n      if(!(num%3 == 0) && (flag == true)){\n        System.out.println(\"stupid\");\n      }\n      else if((num%3 == 0) && (flag == true)){\n        System.out.println(\"dumb\");\n      }\n      else if(num%3 == 0 && (flag == false)){\n        System.out.println(\"idiot\");\n      }\n      else if(!(num%3 == 0) && (flag == false)){\n        System.out.println(\"smart\");\n      }\n      else{\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}catch(Exception e){\n    System.out.println(\"invalid\");\n  }\n}\n}"}
{"id": 1509, "language": "JavaScript (Node.js)", "code": "\"use strict\";\nexports.__esModule = true;\nvar fs = require(\"fs\");\nvar smallA = \"a\".charCodeAt(0);\nvar largeA = \"A\".charCodeAt(0);\nvar alphabets = Array.apply(null, new Array(26))\n    .map(function (val, i) {\n    return String.fromCharCode(smallA + i);\n})\n    .concat(Array.apply(null, new Array(26)).map(function (val, i) {\n    return String.fromCharCode(largeA + i);\n}));\nfunction counter(str) {\n    var charList = str.split(\"\");\n    var count = {};\n    alphabets.forEach(function (char) {\n        count[char] = 0;\n    });\n    count[\" \"] = 0;\n    charList.forEach(function (char) {\n        if (char.match(/[a-zA-Z]/) || char === \" \") {\n            count[char] = count[char] + 1;\n        }\n    });\n    return count;\n}\nfunction spacer(count) {\n    var frequentChar = \"a\";\n    var frequentNum = 0;\n    var secondChar = \"b\";\n    var secondNum = 0;\n    Object.keys(count).forEach(function (key) {\n        var value = count[key];\n        if (frequentNum < value) {\n            secondChar = frequentChar;\n            secondNum = frequentNum;\n            frequentChar = key;\n            frequentNum = value;\n        }\n        else if (secondNum < value) {\n            secondChar = key;\n            secondNum = value;\n        }\n    }, count);\n    return { frequent: frequentChar, second: secondChar };\n}\nfunction decrypter(origin, target, second) {\n    var charCodeSmallE = 101;\n    var charCodeSmallA = 97;\n    var charCodeLargeA = 65;\n    var shift = (second.charCodeAt(0) - charCodeSmallE) % 26;\n    var arr = origin.split(\"\");\n    var replaced = arr.map(function (char) {\n        if (char === target) {\n            return \" \";\n        }\n        if (char === \" \") {\n            return target;\n        }\n        return char;\n    });\n    return replaced\n        .map(function (char) {\n        if (char.match(/[a-z]/)) {\n            return String.fromCharCode(((char.charCodeAt(0) - charCodeSmallA - shift + 26) % 26) +\n                charCodeSmallA);\n        }\n        else if (char.match(/[A-Z]/)) {\n            return String.fromCharCode(((char.charCodeAt(0) - charCodeLargeA - shift + 26) % 26) +\n                charCodeLargeA);\n        }\n        return char;\n    })\n        .join(\"\");\n}\nfunction main(argv) {\n    var subCommand = argv[0];\n    var filePath = argv[1];\n    var destPath = argv[2];\n    var contents = fs.readFileSync(filePath, \"utf-8\");\n    var count = counter(contents);\n    if (subCommand === \"count\") {\n        fs.writeFileSync(destPath, JSON.stringify(count));\n        return;\n    }\n    var spaced = spacer(count);\n    if (subCommand === \"space\") {\n        fs.writeFileSync(destPath, JSON.stringify({ char: spaced.frequent }));\n        return;\n    }\n    var decrypted = decrypter(contents, spaced.frequent, spaced.second);\n    fs.writeFileSync(destPath, decrypted);\n}\nmain(process.argv.slice(2));\n\n"}
{"id": 1510, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint is_multiple_of_3(int num) {\n    return num % 3 == 0;\n}\n\nint contains_digit_3(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid evaluate_number(char *arg) {\n    int num = atoi(arg);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int multiple_of_3 = is_multiple_of_3(num);\n    int has_digit_3 = contains_digit_3(num);\n\n    if (multiple_of_3 && has_digit_3) {\n        printf(\"dumb\\n\");\n    } else if (multiple_of_3) {\n        printf(\"idiot\\n\");\n    } else if (has_digit_3) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        evaluate_number(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1511, "language": "Java", "code": "import java.util.*;\n\npublic class QueensSolver {\n    private static char[][] board = new char[8][8];\n    private static boolean[] rows = new boolean[8];\n    private static boolean[] cols = new boolean[8];\n    private static boolean[] diag1 = new boolean[15];\n    private static boolean[] diag2 = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        // Fill board with dots\n        for (int i = 0; i < 8; i++) {\n            Arrays.fill(board[i], '.');\n        }\n\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            setQueen(r, c);\n        }\n\n        solve(0);\n\n        // Output the board\n        for (char[] row : board) {\n            System.out.println(new String(row));\n        }\n        \n        scanner.close();\n    }\n\n    private static void setQueen(int r, int c) {\n        board[r][c] = 'Q';\n        rows[r] = true;\n        cols[c] = true;\n        diag1[r + c] = true;\n        diag2[r - c + 7] = true;\n    }\n\n    private static boolean canPlace(int r, int c) {\n        return !rows[r] && !cols[c] && !diag1[r + c] && !diag2[r - c + 7];\n    }\n\n    private static void removeQueen(int r, int c) {\n        board[r][c] = '.';\n        rows[r] = false;\n        cols[c] = false;\n        diag1[r + c] = false;\n        diag2[r - c + 7] = false;\n    }\n\n    private static boolean solve(int r) {\n        if (r == 8) return true;\n        if (rows[r]) return solve(r + 1);\n        \n        for (int c = 0; c < 8; c++) {\n            if (canPlace(r, c)) {\n                setQueen(r, c);\n                if (solve(r + 1)) return true;\n                removeQueen(r, c);\n            }\n        }\n        return false;\n    }\n}"}
{"id": 1512, "language": "Java", "code": "package track;\n\npublic class App {\n\t\tpublic static boolean includes3(int a)\n\t{\n\t\twhile(a!=0)\n\t\t{\n\t\t\tif(a%10==3)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\n\t\t\t\treturn includes3(a/10);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static void main(String[] args){\n\t\tint size=args.length;\n\t\tint i=0;\n\t\twhile(i<size)\n\t\t{\n\t\t\tString data=args[i++];\n\t\t\tInteger num=null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tnum=Integer.parseInt(data);\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(num<0 || num>1000)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tboolean inc3=includes3(num);\n\t\t\tif(inc3 && num%3==0)\n\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\telse if(inc3)\n\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\telse if(num%3==0)\n\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"smart\");\n\t\t}\n\t}\n}\n\n\n\n\n\n\n"}
{"id": 1513, "language": "C", "code": "#include <stdio.h>\n#include<ctype.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n // for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n // }\n  int j,r,a,b,i;\n  for(i=1;i< argc;i++)\n  {a=0;\n  b=0;\n    if(atoi(argv[i])==0)\n    {\n     printf(\"invalid\\n\");\n    }\n    else\n    { j=atoi(argv[i]);\n      if(j%3==0)\n      a=1;\n      while(j>0)\n      {\n        r=j%10;\n        j=j/10;\n        if(r==3)\n        {\n          b=1;\n          break;\n        }\n      }\n\n if(a==1 && b==1)\n  printf(\"dumb\\n\");\n  else if(a==1)\n  printf(\"idiot\\n\");\n  else if(b==1)\n  printf(\"stupid\\n\");\n  else\n  printf(\"smart\\n\");\n\n    }\n   \n  \n\n  }\n  return 0;\n}\n"}
{"id": 1514, "language": "PHP", "code": "<?php\n\n    // $in_data = fgets(STDIN);\n// $handle = fopen(\"php://stdin\", \"r\");\n//     // echo $in_data;\n// $line = fgets($handle);\n// echo $line;\n\n// var_dump($argv[1]);\n\n// echo $argv[1];\n\n$com = $argv[1];\n$in_f = $argv[2];\n$out_f = $argv[3];\n\n$f = file_get_contents($in_f);\n\nfunction abc($in_f, $out_f, $f) {\n    // $f = f_get_contents($in_f);\n\n    // $com = $argv[1];\n    // $in_f = $argv[2];\n    // $out_f = $argv[3];\n\n    $all_alphabets = array(\" \" => 0, \"a\" => 0, \"b\" => 0, \"c\" => 0, \"d\" => 0, \"e\" => 0, \"f\" => 0, \"g\" => 0, \"h\" => 0, \"i\" => 0, \"j\" => 0, \"k\" => 0, \"l\" => 0, \"m\" => 0, \"n\" => 0, \"o\" => 0, \"p\" => 0, \"q\" => 0, \"r\" => 0, \"s\" => 0, \"t\" => 0, \"u\" => 0, \"v\" => 0, \"w\" => 0, \"x\" => 0, \"y\" => 0, \"z\" => 0, \"A\" => 0, \"B\" => 0, \"C\" => 0, \"D\" => 0, \"E\" => 0, \"F\" => 0, \"G\" => 0, \"H\" => 0, \"I\" => 0, \"J\" => 0, \"K\" => 0, \"L\" => 0, \"M\" => 0, \"N\" => 0, \"O\" => 0, \"P\" => 0, \"Q\" => 0, \"R\" => 0, \"S\" => 0, \"T\" => 0, \"U\" => 0, \"V\" => 0, \"W\" => 0, \"X\" => 0, \"Y\" => 0, \"Z\" => 0);\n\n    for ($i = 0; $i < strlen($f); $i++) {\n        if ($f[$i] == \" \") {\n            $all_alphabets[\" \"]++;\n        } else if ($f[$i] == \"a\") {\n            $all_alphabets[\"a\"]++;\n        } else if ($f[$i] == \"b\") {\n            $all_alphabets[\"b\"]++;\n        } else if ($f[$i] == \"c\") {\n            $all_alphabets[\"c\"]++;\n        } else if ($f[$i] == \"d\") {\n            $all_alphabets[\"d\"]++;\n        } else if ($f[$i] == \"e\") {\n            $all_alphabets[\"e\"]++;\n        } else if ($f[$i] == \"f\") {\n            $all_alphabets[\"f\"]++;\n        } else if ($f[$i] == \"g\") {\n            $all_alphabets[\"g\"]++;\n        } else if ($f[$i] == \"h\") {\n            $all_alphabets[\"h\"]++;\n        } else if ($f[$i] == \"i\") {\n            $all_alphabets[\"i\"]++;\n        } else if ($f[$i] == \"j\") {\n            $all_alphabets[\"j\"]++;\n        } else if ($f[$i] == \"k\") {\n            $all_alphabets[\"k\"]++;\n        } else if ($f[$i] == \"l\") {\n            $all_alphabets[\"l\"]++;\n        } else if ($f[$i] == \"m\") {\n            $all_alphabets[\"m\"]++;\n        } else if ($f[$i] == \"n\") {\n            $all_alphabets[\"n\"]++;\n        } else if ($f[$i] == \"o\") {\n            $all_alphabets[\"o\"]++;\n        } else if ($f[$i] == \"p\") {\n            $all_alphabets[\"p\"]++;\n        } else if ($f[$i] == \"q\") {\n            $all_alphabets[\"q\"]++;\n        } else if ($f[$i] == \"r\") {\n            $all_alphabets[\"r\"]++;\n        } else if ($f[$i] == \"s\") {\n            $all_alphabets[\"s\"]++;\n        } else if ($f[$i] == \"t\") {\n            $all_alphabets[\"t\"]++;\n        } else if ($f[$i] == \"u\") {\n            $all_alphabets[\"u\"]++;\n        } else if ($f[$i] == \"v\") {\n            $all_alphabets[\"v\"]++;\n        } else if ($f[$i] == \"w\") {\n            $all_alphabets[\"w\"]++;\n        } else if ($f[$i] == \"x\") {\n            $all_alphabets[\"x\"]++;\n        } else if ($f[$i] == \"y\") {\n            $all_alphabets[\"y\"]++;\n        } else if ($f[$i] == \"z\") {\n            $all_alphabets[\"z\"]++;\n        } else if ($f[$i] == \"A\") {\n            $all_alphabets[\"A\"]++;\n        } else if ($f[$i] == \"B\") {\n            $all_alphabets[\"B\"]++;\n        } else if ($f[$i] == \"C\") {\n            $all_alphabets[\"C\"]++;\n        } else if ($f[$i] == \"D\") {\n            $all_alphabets[\"D\"]++;\n        } else if ($f[$i] == \"E\") {\n            $all_alphabets[\"E\"]++;\n        } else if ($f[$i] == \"F\") {\n            $all_alphabets[\"F\"]++;\n        } else if ($f[$i] == \"G\") {\n            $all_alphabets[\"G\"]++;\n        } else if ($f[$i] == \"H\") {\n            $all_alphabets[\"H\"]++;\n        } else if ($f[$i] == \"I\") {\n            $all_alphabets[\"I\"]++;\n        } else if ($f[$i] == \"J\") {\n            $all_alphabets[\"J\"]++;\n        } else if ($f[$i] == \"K\") {\n            $all_alphabets[\"K\"]++;\n        } else if ($f[$i] == \"L\") {\n            $all_alphabets[\"L\"]++;\n        } else if ($f[$i] == \"M\") {\n            $all_alphabets[\"M\"]++;\n        } else if ($f[$i] == \"N\") {\n            $all_alphabets[\"N\"]++;\n        } else if ($f[$i] == \"O\") {\n            $all_alphabets[\"O\"]++;\n        } else if ($f[$i] == \"P\") {\n            $all_alphabets[\"P\"]++;\n        } else if ($f[$i] == \"Q\") {\n            $all_alphabets[\"Q\"]++;\n        } else if ($f[$i] == \"R\") {\n            $all_alphabets[\"R\"]++;\n        } else if ($f[$i] == \"S\") {\n            $all_alphabets[\"S\"]++;\n        } else if ($f[$i] == \"T\") {\n            $all_alphabets[\"T\"]++;\n        } else if ($f[$i] == \"U\") {\n            $all_alphabets[\"U\"]++;\n        } else if ($f[$i] == \"V\") {\n            $all_alphabets[\"V\"]++;\n        } else if ($f[$i] == \"W\") {\n            $all_alphabets[\"W\"]++;\n        } else if ($f[$i] == \"X\") {\n            $all_alphabets[\"X\"]++;\n        } else if ($f[$i] == \"Y\") {\n            $all_alphabets[\"Y\"]++;\n        } else if ($f[$i] == \"Z\") {\n            $all_alphabets[\"Z\"]++;\n        }\n    }\n    $new_f = fopen($out_f, 'w');\n    fwrite($new_f, json_encode($all_alphabets)); \n}\n\nfunction decrypt($in_f, $out_f, $f) {\n\n    // $com = $argv[1];\n    // $in_f = $argv[2];\n    // $out_f = $argv[3];\n    \n    // $f = f_get_contents($in_f);\n  // print_r($f);\n    $data = strpos($f, ',');\n    if ($data === false) {\n        $data = strpos($f, ':');\n    }\n    $char_at = $f[$data + 1];\n\n    $max = ord($f[0]);\n    $min_a_value = ord($f[0]);\n    $original_value = 65;\n\n\n    for ($i = 0; $i < strlen($f); $i++) {\n        if ($f[$i] == $char_at) {\n            $f[$i] = \" \";\n        } else if ($f[$i] == \" \") {\n            $f[$i] = $char_at;\n        }\n    }\n\n    for ($i = 0; $i < strlen($f) - 2; $i++) {\n        if ($f[$i] == \" \" && $f[$i + 2] == \" \") {\n            if (preg_match(\"/^[a-zA-Z]+$/\", $f[$i + 1])) {\n                if (ord($f[$i + 1]) < $min_a_value) {\n                    // print_r($f[$i+1]);\n                    $min_a_value = ord($f[$i + 1]);\n                }\n            }\n        }\n    }\n\n    $st = abs($min_a_value - $original_value);\n    \n\n    for ($i = 0; $i < strlen($f); $i++) {\n        if (preg_match(\"/^[a-zA-Z]+$/\", $f[$i])) {\n          // if(ord($f[$i]) <= 127) {\n            $f[$i] = chr(ord($f[$i]) - $st);\n          }\n    }\n\n    $new_f = fopen($out_f, 'w');\n    fwrite($new_f, $f);\n\n}\n\nfunction space($in_f, $out_f, $f) {\n    // $f = f_get_contents($in_f);\n\n    // $com = $argv[1];\n    // $in_f = $argv[2];\n    // $out_f = $argv[3];\n\n    $out_data = array(\"char\" => \"\");\n\n    $data = strpos($f, ',');\n    if ($data === false) {\n        $data = strpos($f, ':');\n        if ($data === false) {\n            $data = strpos($f, ';');\n        }\n    }\n    $char_at = $f[$data + 1];\n    $out_data[\"char\"] = $char_at;\n\n    $new_f = fopen($out_f, 'w');\n    fwrite($new_f, json_encode($out_data));\n\n}\n\nif ($com == \"count\") {\n    abc($in_f, $out_f, $f);\n} else if ($com == \"decrypt\") {\n    decrypt($in_f, $out_f, $f);\n} else if ($com == \"space\") {\n    space($in_f, $out_f, $f);\n}\n\n?>\n\n"}
{"id": 1515, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueensOnBoard {\n    static char[][] board = new char[8][8];\n    static boolean[] col = new boolean[8];\n    static boolean[] diag1 = new boolean[15];\n    static boolean[] diag2 = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            col[c] = true;\n            diag1[r + c] = true;\n            diag2[r - c + 7] = true;\n        }\n        findSolution(0);\n        displayBoard();\n    }\n\n    private static boolean findSolution(int row) {\n        if (row == 8) return true;\n\n        for (int j = 0; j < 8; j++) {\n            if (!col[j] && !diag1[row + j] && !diag2[row - j + 7]) {\n                board[row][j] = 'Q';\n                col[j] = true;\n                diag1[row + j] = true;\n                diag2[row - j + 7] = true;\n\n                if (findSolution(row + 1)) return true;\n\n                // Backtrack\n                board[row][j] = '.';\n                col[j] = false;\n                diag1[row + j] = false;\n                diag2[row - j + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void displayBoard() {\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[i].length; j++) {\n                if (board[i][j] == 0) {\n                    System.out.print('.');\n                } else {\n                    System.out.print(board[i][j]);\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1516, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    indata=[]\n    for i, v in enumerate(argv):\n        f = open(v)\n        line = f.readline()\n        while line:\n  \n    \n          indata.append(line.replace('\\n',''))\n          line = f.readline()\n        indata[0]=int(indata[0])\n        for i in range(1,indata[0]+1):\n          indata[i]=[int(indata[i][0]),int(indata[i][2])]\n        \n        #print(indata)\n        res1=[\"\"]*92\n        count=[0]\n        def queen(A, cur=0):\n            if cur==len(A):\n                #print (A,count[0])\n                res1[count[0]]=A[:]\n                count[0]+=1\n            else:\n                for col in range(len(A)):\n                    A[cur] = col \n                    if all(A[r]!=A[cur] and r-A[r]!=cur-A[cur] and r+A[r]!=cur+A[cur] for r in range(cur)):\n                        queen(A, cur+1)\n        queen([None]*8)\n        finalres=[]\n        for i in res1:\n          temp=True\n          for j in indata[1:]:\n            if i[j[0]]==j[1]:\n              continue \n            else:\n              temp=False\n              break\n          if temp==True:\n            finalres=i\n        def prettyprint(solution):\n          def line(pos, length=len(solution)):\n            return '.' * (pos) + 'Q' + '.'*(length-pos-1)\n          for pos in solution:\n            print (line(pos))\n        prettyprint(finalres)\n\n      #for i in res1:\n      #  for j in i:\n      #    if\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1517, "language": "Python3", "code": "import sys\nimport copy\ndef searchNQueens(solution, row, solutions,  pos):\n    if(row >= len(solution)):\n        for idx in pos.keys():\n          if(solution[idx] != pos[idx]):\n            return\n        solutions.append(copy.copy(solution))\n        return\n\n    for j in range(len(solution)):\n        flag = True\n        for rn in range(row):\n            if(solution[rn] == j or solution[rn] == j+(row-rn) or solution[rn] == j-(row-rn)):\n                flag = False\n                break\n        if(flag):\n            solution[row] = j\n            searchNQueens(solution, row+1, solutions, pos)\n            solution[row] = -2\n\ndef index2str(solutions):\n    res = []\n    for solution in solutions:\n        re = []\n        for each in solution:\n            onerow = ['.' for _ in range(len(solution))]\n            onerow[each] = 'Q'\n            stro = ''\n            for each in onerow:\n                stro += each\n            re.append(stro)\n        res.append(re)\n    return res\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    f = open(argv[0])\n    n = int(f.readline().strip())\n    solutions = []\n    solution = [-2]*8\n    pos = {}\n    row = []\n    for _ in range(n):\n      cur = list(map(int, f.readline().strip().split()))\n      pos[cur[0]] = cur[1]\n      solution[cur[0]] = cur[1]\n    searchNQueens(solution, 0, solutions, pos)\n    res = index2str(solutions)\n    for each in res:\n      for line in each:\n        print(line)\n    \n    \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1518, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport json\nimport random\nimport sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  #learns = [][][][]\n\n  for i, v in enumerate(argv):\n    with open(v) as f:\n      data = json.load(f)\n    \n    for aa in range(len(data)):\n      print random.randint(0,3)\n\ndef learn_robot(p3, p2, p1, o1):\n  global game_play\n  game_play[o1 + p1*3 + p2*9 + p3*27] += 1\n\ndef move_me(m_r):\n  if m_r == 0:\n    return 2\n  if m_r == 1:\n    return 0\n  return 1\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1519, "language": "Python3", "code": "import sys\n\ndef threeidiots(n):\n    if not n.isdigit():\n        return 'invalid'\n    i = int(n)\n    if i < 0 or i > 1000:\n        return 'invalid'\n    d3 = i % 3 == 0\n    inc3 = '3' in n\n    if d3 and inc3:\n        return 'dumb'\n    elif d3:\n        return 'idiot'\n    elif inc3:\n        return 'stupid'\n    return 'smart'\n\ndef main(argv):\n    for e in argv:\n        print(threeidiots(e))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1520, "language": "C#", "code": "using System;\n\npublic class Program\n{\n    static bool IsValidInput(string value, out int num)\n    {\n        if (!int.TryParse(value, out num)) return false;\n        if (num < 0 || num > 1000) return false;\n        return true;\n    }\n\n    static void Main(string[] args)\n    {\n        foreach (var s in args)\n        {\n            if (!IsValidInput(s, out int number))\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divisibleBy3 = (number % 3 == 0);\n            bool has3Digit = s.Contains('3');\n\n            if (divisibleBy3 && has3Digit)\n            {\n                Console.WriteLine(\"dumb\");\n            }\n            else if (divisibleBy3)\n            {\n                Console.WriteLine(\"idiot\");\n            }\n            else if (has3Digit)\n            {\n                Console.WriteLine(\"stupid\");\n            }\n            else\n            {\n                Console.WriteLine(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 1521, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef identify_space(input_path, output_path):\n    # \u7a7a\u767d\u3092\u7f6e\u63db\u3057\u305f\u3068\u601d\u308f\u308c\u308b\u6587\u5b57\u3092\u5224\u5b9a\n    with open(input_path, 'r') as f:\n        text = f.read()\n\n    allowed_chars = \"abcdefghijklmnopqrstuvwxyz \"\n    counter = Counter(c for c in text if c in allowed_chars)\n    \n    # \u7a7a\u767d\u3068\u601d\u308f\u308c\u308b\u6587\u5b57\u306f\u6700\u983b\u51fa\u6587\u5b57\uff08\u5c0f\u6587\u5b57\u306e\u4e2d\u3067\uff09\n    most_common_char = max(counter, key=lambda c: counter[c] if c != ' ' else 0)\n    \n    result = {\"char\": most_common_char}\n    # \u5224\u5b9a\u7d50\u679c\u3092\u51fa\u529b\n    with open(output_path, 'w') as out_file:\n        json.dump(result, out_file)\n\ndef main(argv):\n    if len(argv) < 3:\n        print(\"Invalid arguments\")\n        sys.exit(1)\n    \n    command = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n    \n    if command == \"space\":\n        identify_space(input_path, output_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1522, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc checkType(arg string) string {\n\tn, err := strconv.Atoi(arg)\n\tif err != nil || n < 0 || n > 1000 {\n\t\treturn \"invalid\"\n\t}\n\thas3 := false\n\tfor i := 0; i < len(arg); i++ {\n\t\tif arg[i] == '3' {\n\t\t\thas3 = true\n\t\t\tbreak\n\t\t}\n\t}\n\tdiv3 := n%3 == 0\n\tif div3 && has3 {\n\t\treturn \"dumb\"\n\t}\n\tif div3 {\n\t\treturn \"idiot\"\n\t}\n\tif has3 {\n\t\treturn \"stupid\"\n\t}\n\treturn \"smart\"\n}\n\nfunc main() {\n\tfor _, v := range os.Args[1:] {\n\t\tfmt.Println(checkType(v))\n\t}\n}"}
{"id": 1523, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class App {\n\n  // A simple class to hold one round of rock-paper-scissors results.\n  static class GameRecord {\n    int robotHand; // Robot's hand: 0 (Rock), 1 (Scissors), 2 (Paper)\n    int youHand; // Your hand: 0 (Rock), 1 (Scissors), 2 (Paper)\n\n    GameRecord(int robotHand, int youHand) {\n      this.robotHand = robotHand;\n      this.youHand = youHand;\n    }\n  }\n\n  public static void main(String[] args) {\n    if (args.length == 0) {\n      System.err.println(\"Usage: java App <json_file_path>\");\n      return;\n    }\n\n    String filePath = args[0];\n    List<GameRecord> gameHistory = new ArrayList<>();\n\n    try {\n      // Read the entire file content into a string\n      String fileContent = new String(Files.readAllBytes(Paths.get(filePath)));\n      // Remove all whitespace characters to simplify parsing\n      fileContent = fileContent.replaceAll(\"\\\\s+\", \"\");\n\n      // Remove the outermost square brackets if present\n      if (fileContent.startsWith(\"[\") && fileContent.endsWith(\"]\")) {\n        fileContent = fileContent.substring(1, fileContent.length() - 1);\n      }\n\n      // Split the content into individual game records.\n      // Each record will be in a format like \"{\"robot\":0,\"you\":1}\"\n      String[] records = fileContent.split(\"},\\\\{\");\n\n      for (String recordString : records) {\n        // Clean up each record string by removing braces and quotes\n        String cleanedRecord = recordString.replace(\"{\", \"\").replace(\"}\", \"\").replace(\"\\\"\", \"\").trim();\n        if (cleanedRecord.isEmpty()) {\n          continue; // Skip empty strings that might result from splitting\n        }\n\n        // Split by comma to get key-value pairs like \"robot:0\", \"you:1\"\n        String[] parts = cleanedRecord.split(\",\");\n        int currentRobotHand = -1;\n        int currentYouHand = -1;\n\n        for (String part : parts) {\n          String[] keyValue = part.split(\":\");\n          if (keyValue.length == 2) {\n            String key = keyValue[0].trim();\n            int value = Integer.parseInt(keyValue[1].trim());\n\n            if (key.equals(\"robot\")) {\n              currentRobotHand = value;\n            } else if (key.equals(\"you\")) {\n              currentYouHand = value;\n            }\n          }\n        }\n        // Add the parsed game record to history if both values are found\n        if (currentRobotHand != -1 && currentYouHand != -1) {\n          gameHistory.add(new GameRecord(currentRobotHand, currentYouHand));\n        }\n      }\n\n    } catch (IOException e) {\n      System.err.println(\"Error reading the file: \" + e.getMessage());\n      return;\n    } catch (NumberFormatException e) {\n      System.err.println(\"Error parsing numbers from JSON: \" + e.getMessage());\n      return;\n    }\n\n    // A map to store the robot's last observed move for a given state.\n    // Key: A string representing the state (last 3 robot hands + last 1 opponent hand)\n    // Value: The actual hand the robot played when this state occurred last\n    Map<String, Integer> robotBehaviorMap = new HashMap<>();\n\n    // Populate the behavior map based on the historical data.\n    // The robot's 4th move (index 3 in 0-based array) is the first determined by parameters.\n    for (int i = 3; i < gameHistory.size(); i++) {\n      int rPrev3 = gameHistory.get(i - 3).robotHand;\n      int rPrev2 = gameHistory.get(i - 2).robotHand;\n      int rPrev1 = gameHistory.get(i - 1).robotHand;\n      int yPrev1 = gameHistory.get(i - 1).youHand;\n\n      // Create a unique string key for the current state\n      String stateKey = \"\" + rPrev3 + rPrev2 + rPrev1 + yPrev1;\n      int actualRobotPlayForThisState = gameHistory.get(i).robotHand;\n\n      // Store the last observed play for this state\n      robotBehaviorMap.put(stateKey, actualRobotPlayForThisState);\n    }\n\n    int predictedRobotNextMove;\n\n    // Determine the robot's next move based on the length of the game history.\n    int historySize = gameHistory.size();\n    if (historySize == 0) {\n      // If no games have been played, robot's first move is Rock (0).\n      predictedRobotNextMove = 0;\n    } else if (historySize == 1) {\n      // If one game has been played, robot's second move is Scissors (1).\n      predictedRobotNextMove = 1;\n    } else if (historySize == 2) {\n      // If two games have been played, robot's third move is Paper (2).\n      predictedRobotNextMove = 2;\n    } else {\n      // For games from the 4th onwards, use the learned behavior model.\n      int lastGameIndex = historySize - 1;\n      int rLast3 = gameHistory.get(lastGameIndex - 2).robotHand;\n      int rLast2 = gameHistory.get(lastGameIndex - 1).robotHand;\n      int rLast1 = gameHistory.get(lastGameIndex).robotHand;\n      int yLast1 = gameHistory.get(lastGameIndex).youHand;\n\n      String currentStateKey = \"\" + rLast3 + rLast2 + rLast1 + yLast1;\n\n      if (robotBehaviorMap.containsKey(currentStateKey)) {\n        int lastObservedPlay = robotBehaviorMap.get(currentStateKey);\n        // The robot cycles through G->C->P (0->1->2) when the same state is encountered.\n        // So, its next move will be (last_observed_play + 1) % 3.\n        predictedRobotNextMove = (lastObservedPlay + 1) % 3;\n      } else {\n        // If the current state has never been observed before in the history\n        // as a determinant for a robot's move, assume it starts its cycle with Rock (0).\n        predictedRobotNextMove = 0;\n      }\n    }\n\n    // Calculate the hand that beats the robot's predicted next move.\n    // (Rock + 1) % 3 = Paper (2)\n    // (Scissors + 1) % 3 = Rock (0)\n    // (Paper + 1) % 3 = Scissors (1)\n    int yourWinningMove = (predictedRobotNextMove + 1) % 3;\n    System.out.println(yourWinningMove);\n  }\n}"}
{"id": 1524, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype ChessBoard struct {\n\tsize   int\n\tPoints [][]Point\n}\n\ntype Point struct {\n\tx, y int\n}\n\nfunc main() {\n\tsize:=8\n\t_, points := run(os.Args[1:], size)\n\n\tboard := initBoard(size)\n\n\tfor _, p := range points {\n\t\tboard = board.selectedPoint(p)\n\t}\n\t//board.print()\n\n\tb := GetBoards([]ChessBoard{board}, 1)\n\tfor _, i := range b {\n\t\ti.print()\n\t}\n\t//fmt.Println(\"Number of Boards:\", len(b))\n\n}\n\nfunc run(args []string, size int) (numofq int, P []Point) {\n\tstr := \"\"\n\t//if len(args) == 1 {\n\tbytes, err := ioutil.ReadFile(args[0])\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tstr = strings.TrimSpace(string(bytes))\n\t//}\n\n\tstr1 := strings.Split(str, \"\\n\")\n\n\tnumberOfQueens, _ := strconv.Atoi(str1[0])\n\n\tif 2 > size && size > 8 {\n\t\tfmt.Println(\"size must be in between 2 and 8\")\n\t\tos.Exit(1)\n\t}\n\n\tfor _, i := range str1[1:] {\n\n\t\tt := strings.Split(i, \" \")\n\n\t\tx, err := strconv.Atoi(strings.TrimSpace(t[0]))\n\t\thandleErr(err)\n\t\ty, err := strconv.Atoi(strings.TrimSpace(t[1]))\n\t\thandleErr(err)\n\n\t\tif x+1 > size || y+1 > size || x < 0 || y < 0 {\n\t\t\tfmt.Println(\"incorrect coordinates for the Queens position \")\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tP = append(P, Point{x + 1, y + 1})\n\t}\n\n\treturn numberOfQueens, P\n\n}\n\nfunc handleErr(err error) {\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(0)\n\t}\n}\n\nfunc initBoard(size int) ChessBoard {\n\tb := ChessBoard{size: size, Points: make([][]Point, size)}\n\n\tfor x := 1; x <= size; x++ {\n\t\tb.Points[x-1] = make([]Point, size)\n\n\t\tfor y := 1; y <= size; y++ {\n\t\t\tb.Points[x-1][y-1] = Point{x, y}\n\t\t}\n\t}\n\treturn b\n}\n\nfunc (b ChessBoard) selectedPoint(p Point) ChessBoard {\n\tc1 := p.y - p.x\n\tc2 := p.y + p.x\n\n\tvar newpoints [][]Point\n\n\tnewpoints = make([][]Point, b.size)\n\tfor x := 1; x <= b.size; x++ {\n\t\tnewpoints[x-1] = make([]Point, b.size)\n\t\tfor y := 1; y <= b.size; y++ {\n\t\t\tpt := b.Points[x-1][y-1]\n\t\t\tif pt.x == p.x || pt.y == p.y || pt.y == pt.x+c1 || pt.y == -pt.x+c2 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tnewpoints[x-1][y-1] = pt\n\t\t}\n\t}\n\tnewpoints[p.x-1][p.y-1] = p\n\tb.Points = newpoints\n\n\treturn b\n\n}\n\nfunc (b *ChessBoard) print() {\n\tfor x := 1; x <= b.size; x++ {\n\t\tfor y := 1; y <= b.size; y++ {\n\t\t\tif b.Points[x-1][y-1] != emptyPoint {\n\t\t\t\tfmt.Print(\"Q\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfmt.Print(\".\")\n\n\t\t\t//fmt.Print(b.Points[x-1][y-1])\n\t\t\t//fmt.Println(b.Points[i-1])\n\t\t\t//fmt.Println()\n\t\t}\n\t\tfmt.Println()\n\t}\n\t//fmt.Println(\"========================\")\n\tfmt.Println()\n}\n\nvar emptyPoint = Point{0, 0}\n\nfunc GetBoards(boards []ChessBoard, y int) (res []ChessBoard) {\n\n\tif boards == nil {\n\t\treturn nil\n\t}\n\n\tfor _, i := range boards {\n\t\tfor x := 1; x <= i.size; x++ {\n\t\t\tif i.Points[x-1][y-1] != emptyPoint {\n\t\t\t\tres = append(res, i.selectedPoint(Point{x, y}))\n\t\t\t}\n\t\t}\n\t}\n\tif y == boards[0].size {\n\t\treturn res\n\t}\n\n\treturn GetBoards(res, y+1)\n\n}\n"}
{"id": 1525, "language": "Python", "code": "import sys\nimport json\nimport random\n\ndef a(inlist):\n  params=[]\n  for item in inlist:\n    params.append(item['robot'])\n  params.append(inlist[-1]['you'])\n  return params\nargs=sys.argv[1:]\nwith open(args[0],'r') as fp:\n  data=json.load(fp)\nif len(data)<3:\n  robot_move=len(data)\n  ans=(robot_move-1)%3\nelse:\n  found_earlier=False\n  last_params=a(data[-3:])\n  iterator=len(data)-1\n  while True:\n    if iterator-3 < 0:\n      break\n    cur_params=a(data[iterator-3:iterator])\n    if cur_params==last_params:\n      ans=data[iterator]['robot']\n      found_earlier=True\n      break\n    iterator-=1\n  if not found_earlier:\n    ans=random.randint(0,2)\nprint ans"}
{"id": 1526, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n// ROT13 \u3092\u9069\u7528\u3057\u305f\u6587\u5b57\u3092\u8fd4\u3059\nchar apply_rot13(char c) {\n    if ('a' <= c && c <= 'z') {\n        return 'a' + (c - 'a' + 13) % 26;\n    } else if ('A' <= c && c <= 'Z') {\n        return 'A' + (c - 'A' + 13) % 26;\n    } else {\n        return c; // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4ee5\u5916\u306f\u305d\u306e\u307e\u307e\u8fd4\u3059\n    }\n}\n\n// \u5165\u529b\u6587\u5b57\u5217\u306b ROT13 \u3092\u9069\u7528\u3057\u3066\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\nvoid process_rot13(const char *input) {\n    size_t length = strlen(input);\n    for (size_t i = 0; i < length; i++) {\n        putchar(apply_rot13(input[i]));\n    }\n    putchar('\\n'); // 1\u5f15\u65701\u884c\u306e\u51fa\u529b\n}\n\nint main(int argc, char *argv[]) {\n    // \u5f15\u6570\u304c\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\n    if (argc < 2) {\n        fprintf(stderr, \"Usage: %s <strings...>\\n\", argv[0]);\n        return 1;\n    }\n\n    // \u5404\u5f15\u6570\u306b ROT13 \u3092\u9069\u7528\u3057\u3066\u51fa\u529b\n    for (int i = 1; i < argc; i++) {\n        process_rot13(argv[i]);\n    }\n\n    return 0;\n}"}
{"id": 1527, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\nint ck(int,int);\nint find(int,int);\nint main(int argc , char *argv[]){\n  int i,num,flag,len;\n  for ( i = 1; i < argc; i++) {\n    if(sscanf(argv[i],\"%i\",&num)!=1)\n      printf(\"invalid\\n\");\n    else{\n      len=strlen(argv[i]);\n      num=atoi(argv[i]);\n      if(num>=0 && num<=1000){\n        flag=ck(num,len);\n        switch(flag){\n          case 1:\n            printf(\"idiot\\n\");\n            break;\n          case 2:\n            printf(\"stupid\\n\");\n            break;\n          case 3:\n            printf(\"dumb\\n\");\n            break;\n          case 4:\n            printf(\"smart\\n\");\n            break;\n          default:\n            printf(\"invalid\\n\");\n            break;\n        }\n      }\n      else\n        printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n\nint ck(int num, int len){\n  int is3;\n  is3 = find(num,len);\n  if(num % 3 == 0){\n    if(is3 == 1)\n      return 3;\n    else\n      return 1;\n  }\n  else{\n    if(is3 == 1)\n      return 2;\n    else\n      return 4;\n  }\n}\n\nint find_three(int num, int len){\n  int i,temp;\n  for(i=0;i<len;i++){\n    temp=num%10;\n    if(temp==3)\n      return 1;\n    num = num/10;\n  }\n  return 0;\n}"}
{"id": 1528, "language": "Python3", "code": "import sys\nimport json\nimport re\n\nalphaReg = re.compile(r'^[a-zA-Z]+$')\n\ndef find_space_char(text):\n    text_len = len(text)\n    comma_idx = text.find(',')\n    period_idx = text.find('.')\n    #quote_idx = text.find('\\'')\n    if comma_idx > 0 and comma_idx < text_len:\n        repeat = 0\n        while not is_alpha(text[comma_idx + repeat]) and period_idx + repeat:\n            #space_char = text[comma_idx+1]\n            repeat += 1\n        space_char = text[comma_idx + repeat]\n        return space_char\n    elif period_idx > 0 and period_idx < text_len:\n        repeat = 0\n        while not is_alpha(text[comma_idx + repeat]) and period_idx + repeat < text_len:\n            #space_char = text[comma_idx+1]\n            repeat += 1\n        space_char = text[comma_idx + repeat]\n        return space_char\n    return ' '\n\ndef is_alpha(string):\n    return alphaReg.match(string) is not None\n\ndef replace_text(text, space_char):\n    new_text = ''\n\n    for string in text:\n        new_string = string\n        if(string == space_char):\n            new_string = ' '\n        elif(string == ' '):\n            new_string = space_char\n\n        new_text += new_string\n\n    return new_text\n\ndef create_text(input_path):\n    with open(input_path, 'r') as f:\n        return f.read()\n\ndef count_letter(text):\n    count_book = {}\n    for ascii in range(97, 123):\n        count_book[chr(ascii)] = 0\n    for ascii in range(65, 91):\n        count_book[chr(ascii)] = 0\n    count_book[' '] = 0\n    for string in text:\n        if is_alpha(string) or string == ' ':\n            count_book[string] += 1\n\n    return count_book\n\ndef decrypt(text):\n    space_char = find_space_char(text)\n    text = replace_text(text, space_char)\n\n    count_book = count_letter(text)\n    max_freq_alphabet = max(count_book, key=count_book.get)\n    key = ord(max_freq_alphabet) - ord('e')\n    if key < 0:\n       key += 26\n    dec_text = ''\n    for string in text:\n        new_string = string\n        if is_alpha(string):\n            if string.islower():\n                dec_ascii = ord(new_string) - 97 - key + 1\n                if dec_ascii <= 0:\n                    dec_ascii += 26\n                new_string = chr(dec_ascii+97)\n            else:\n                dec_ascii = ord(new_string) - 65 - key + 1\n                if dec_ascii < 0:\n                    dec_ascii += 26\n                new_string = chr(dec_ascii+65)\n        dec_text += new_string\n    return dec_text\n\ndef write_as_json(book, output_path):\n    with open(output_path, 'w') as f:\n        json.dump(book, f, indent=4)\n\ndef main(argv):\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    sub_command = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n    #output_path = 'a.json'\n    text = create_text(input_path)\n    if sub_command == 'count':\n        count_book = count_letter(text)\n        write_as_json(count_book, output_path)\n    elif sub_command == 'space':\n        space_char = find_space_char(text)\n        result_book = {}\n        result_book['char'] = space_char\n        write_as_json(result_book, output_path)\n    elif sub_command == 'decrypt':\n        dec_text = decrypt(text)\n        with open(output_path, 'w') as f:\n            f.write(dec_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1529, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = args[i];\n      int flag=0,temp=0,a=0,number=0;\n      try{\n         number = Integer.parseInt(output);\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n      /***\n      *\n      *below logic is to check number comtains 3 or not\n      ****/\n      temp=number;\n      while(temp>0){\n        a=temp%10;\n        temp=temp/10;\n        if(a==3){\n          flag=1;\n          break;\n        }\n          else{\n          flag=0;\n          }\n      }\n      if(number>0 && number<=1000){\n        if(number%3==0 && flag==1){\n          System.out.println(\"dumb\");\n        }else if(flag==1){\n          System.out.println(\"stupid\");\n        }else if(number%3==0){\n          System.out.println(\"idiot\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }\n    }\n  }\n}\n"}
{"id": 1530, "language": "PHP", "code": "<?php\n\tnamespace Track;\n\n\tfunction main ($argc, $argv) {\n\t  foreach ($argv as $index=>$value) {\n      $var = $argv[$index];\n      /*\n        check condition input (with 0 <= input number <= 1000)\n      */\n      if (is_numeric($var) and ($var >= 0 and $var <= 1000)){\n        \n        switch ($var){\n          /*is both divisible by 3 and includes a number 3, output should be dumb*/\n          case (strpos((string)$var, '3') !== false) and ($var%3 == 0):\n            printf (\"dumb\\n\");\n            break;\n          /*is divisible by 3, output should be idiot*/\n          case ($var%3 == 0):\n            printf (\"idiot\\n\");\n            break;\n          /*includes a number 3, output should be stupid*/\t\n          case strpos((string)$var, '3') !== false:\n            printf (\"stupid\\n\");\n            break;\n          /*does not match any of the conditions above, output should be smart*/\n          default:\n            printf (\"smart\\n\");\n            break;\n        }\n      } else {\n        /*If none of the above conditions match, output should be invalid*/\n        printf (\"invalid\\n\");\n      }\n\t  }\n\t}\n\n\tmain($argc - 1, array_slice($argv, 1));"}
{"id": 1531, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h>\n\n#define SIZE 8\n\nint board[SIZE][SIZE];\nbool rows[SIZE], cols[SIZE], diag1[2 * SIZE], diag2[2 * SIZE];\n\nvoid initialize_board() {\n    for (int i = 0; i < SIZE; i++) {\n        rows[i] = false;\n        cols[i] = false;\n    }\n    for (int i = 0; i < 2 * SIZE; i++) {\n        diag1[i] = false;\n        diag2[i] = false;\n    }\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            board[i][j] = 0;\n        }\n    }\n}\n\nvoid print_board() {\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            if (board[i][j] == 1) {\n                printf(\"Q\");\n            } else {\n                printf(\".\");\n            }\n        }\n        printf(\"\\n\");\n    }\n}\n\nbool is_safe(int row, int col) {\n    return !rows[row] && !cols[col] && !diag1[row + col] && !diag2[row - col + SIZE];\n}\n\nvoid place_queen(int row, int col) {\n    board[row][col] = 1;\n    rows[row] = true;\n    cols[col] = true;\n    diag1[row + col] = true;\n    diag2[row - col + SIZE] = true;\n}\n\nvoid remove_queen(int row, int col) {\n    board[row][col] = 0;\n    rows[row] = false;\n    cols[col] = false;\n    diag1[row + col] = false;\n    diag2[row - col + SIZE] = false;\n}\n\nbool solve(int row) {\n    if (row >= SIZE) {\n        return true;\n    }\n\n    for (int col = 0; col < SIZE; col++) {\n        if (is_safe(row, col)) {\n            place_queen(row, col);\n            if (solve(row + 1)) {\n                return true;\n            }\n            remove_queen(row, col);\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    scanf(\"%d\", &k);\n    initialize_board();\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        place_queen(r, c);\n    }\n\n    solve(0);\n    print_board();\n\n    return 0;\n}"}
{"id": 1532, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           string output = Algorithm(args[i]);\n           Console.WriteLine(output);\n        }\n    }\n\n    private static string Algorithm(string input)\n        {\n            string stdout = \"Null\";\n            int inputNumber;\n            bool isNumeric = int.TryParse(input, out inputNumber);\n            int digit = 3;\n\n            if (isNumeric == true)\n            {\n                if (0 <= inputNumber && inputNumber <= 1000)\n                {\n                    if (inputNumber % 3 == 0 && inputNumber.ToString().Contains(digit.ToString()))\n                    {\n                        stdout = \"dumb\";\n                    }\n                    else if (inputNumber % 3 == 0)\n                    {\n                        stdout = \"idiot\";\n                    }\n                    else if (inputNumber.ToString().Contains(digit.ToString()))\n                    {\n                        stdout = \"stupid\";\n                    }\n                    else\n                    {\n                        stdout = \"smart\";\n                    }\n                }\n            }\n            else\n            {\n                stdout = \"invalid\";\n            }\n\n            return stdout;\n        }\n}\n"}
{"id": 1533, "language": "PHP", "code": "<?php namespace Track;\n\n$sounds = '';\nfor ($i = 0; $i < $argv[1]; $i++) {\n  $sound = random_int(0, 1) ? '\u30c9' : '\u30ab';\n  echo $sound, \"\\n\";\n  $sounds .= $sound;  \n  if (mb_strlen($sounds) === 5) {\n    if ($sounds === '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab') {\n      echo '\u30c9\u30f3\u266a\u30c9\u30f3\u266a';\n      return;\n    }\n    $sounds = '';\n  }\n}\n\necho '\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc';"}
{"id": 1534, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\n\npublic class App {\n  public static void main(String[] args) throws IOException {\n    String command = args[0], inputPath = args[1], outputPath = args[2];\n    \n    if (command.equals(\"count\")) {\n      Map<Character, Integer> map = count(inputPath);\n      int size = map.size(), count = 0;\n\n      BufferedWriter bw = new BufferedWriter(new FileWriter(outputPath));\n      bw.write(\"{\");\n      bw.newLine();\n      for (char key : map.keySet()) {\n        count++;\n        bw.write(\"\\\"\");\n        bw.write(String.valueOf(key));\n        bw.write(\"\\\": \");\n        bw.write(String.valueOf(map.get(key)));\n        if (count < size) bw.write(\",\");\n        bw.newLine();\n      }\n      bw.write(\"}\");\n      bw.flush();\n      bw.close();\n    } else if (command.equals(\"space\")) {\n      BufferedWriter bw = new BufferedWriter(new FileWriter(outputPath));\n      bw.write(\"{\");\n      bw.newLine();\n      bw.write(\"\\\"\");\n      bw.write(\"char\");\n      bw.write(\"\\\": \\\"\");\n      bw.write(String.valueOf(getSpace(inputPath)));\n      bw.write(\"\\\"\");\n      bw.newLine();\n      bw.write(\"}\");\n      bw.flush();\n      bw.close();\n    }\n  }\n\n  private static Map<Character, Integer> count(String inputPath) throws IOException {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char ch = 'a'; ch <= 'z'; ch++)\n      map.put(ch, 0);\n    for (char ch = 'A'; ch <= 'Z'; ch++)\n      map.put(ch, 0);\n    map.put(' ', 0);\n    int ch = -1;\n\n    BufferedReader br = new BufferedReader(new FileReader(inputPath));\n    \n    while ((ch = br.read()) != -1) {\n      char temp = (char)ch;\n      if ((temp >= 'a' && temp <= 'z') || (temp >= 'A' && temp <= 'Z') || temp == ' ') {\n        map.put(temp, map.get(temp) + 1);\n      }\n    }\n    return map;\n  }\n\n  private static char getSpace(String inputPath) throws IOException {\n    char lastChar = 'a';\n    int ch = 0;\n    BufferedReader br = new BufferedReader(new FileReader(inputPath));\n    \n    while ((ch = br.read()) != -1) {\n      char temp = (char)ch;\n      if (lastChar == ',' || lastChar == '.' || lastChar == ';' || lastChar == '\\'' || lastChar == '\\\"')\n        return temp;\n      lastChar = temp;\n    }\n\n    return 'a';\n  }\n}\n"}
{"id": 1535, "language": "Java", "code": "package track;\nimport java.lang.*;\nimport java.util.*;\npublic class App\n{\n\tpublic static void main(String args[]) \n  {\n\tint i=0;\n  while(i<args.length)\n  {\n    if(args[i].matches(\"[0-9]+\"))\n    {\n      int number = Integer.parseInt(args[i]);\n      if(number<0 || number>1000) \n      {\n        System.out.println(\"invalid\");\n      }\n      else if(number%3==0 && args[i].contains(\"3\"))\n      {\n        System.out.println(\"dumb\");\n      }\n      else if(number%3==0)\n      {\n        System.out.println(\"idiot\");\n      }\n      else if(args[i].contains(\"3\"))\n      {\n        System.out.println(\"stupid\");\n      }\n      else{\n        System.out.println(\"smart\");\n      }\n    }\n    else{\n      System.out.println(\"invalid\");\n    }\n    i++;\n\t\t}\n\t}\n}\n"}
{"id": 1536, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length;i < l ;i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      int val =0;\n      String Str =args[i];\n      boolean flag = true;\n       \n      for(char ch:Str.toCharArray())\n      {\n        \n        if(!Character.isDigit(ch))\n        {\n          flag = false;\n        }\n        if(ch=='3')\n        {\n          val = val+1;\n        } \n      }\n        int a = (int)Str.charAt(0);\n        if(a>256)\n        {\n          //System.out.println(\"invalid\");\n          flag=false;\n        }\n        if(flag == false)\n        {\n          System.out.println(\"invalid\");\n        }\n        else\n        {\n          int integerValue = Integer.parseInt(Str);\n          if(integerValue%3==0 && val!=0)\n          {\n              System.out.println(\"dumb\");\n          }\n          else if(integerValue % 3 == 0 )\n          {\n              System.out.println(\"idiot\");\n          }\n          else if(val!=0)\n          {\n            System.out.println(\"stupid\");\n          }\n          else\n          {\n            System.out.println(\"smart\");\n          }\n        }\n      \n\t\t}\n\t}\n}\n"}
{"id": 1537, "language": "Python3", "code": "import sys\n\ndef determine_idiot_level(input_as_string):\n    if not input_as_string.isdigit():\n        return \"invalid\"\n    \n    num_from_str = int(input_as_string)\n    \n    if not (0 <= num_from_str <= 1000):\n        return \"invalid\"\n\n    divisible = num_from_str % 3 == 0\n    contains = '3' in input_as_string\n\n    if divisible and contains:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif contains:\n        return \"stupid\"\n    return \"smart\"\n\ndef cli_handler(arguments_list):\n    for argument_item in arguments_list:\n        print(determine_idiot_level(argument_item))\n\nif __name__ == '__main__':\n    cli_handler(sys.argv[1:])"}
{"id": 1538, "language": "Python3", "code": "import sys\n\ndef check(nstr):\n    if not nstr.isdigit():\n        return \"invalid\"\n    n = int(nstr)\n    if n < 0 or n > 1000:\n        return \"invalid\"\n    f1 = n % 3 == 0\n    f2 = '3' in nstr\n    if f1 and f2:\n        return \"dumb\"\n    elif f1:\n        return \"idiot\"\n    elif f2:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for a in argv:\n        print(check(a))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1539, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\n      String str=\"\";\n      try\n      {\n\t\t\tstr = String.format(\"argv[%s]: %s\", i, args[i]);\n\n      //String str=\"\";\n      int num=Integer.parseInt(args[i]);\n\n      if(num<0 || num>1000)\n        str=\"invalid\";\n\n      else\n      {\n        boolean flag0=false;\n        boolean flag1=false;\n        \n        if(num%3==0)\n        flag1=true;\n\n        while(num>0)\n        { \n          int digit=num%10;\n          if(digit==3)\n          {\n            flag0=true;\n            break;\n          }\n        num=num/10;\n        }\n\n      if(flag1 && flag0)\n        str=\"dumb\";\n\n      else\n      {\n        if(flag1)\n        str=\"idiot\";\n\n        else if(flag0)\n        str=\"stupid\";\n\n        else\n        str=\"smart\";\n      }\n\n    }\n  } \n\n  catch(Exception ex)\n  {\n    str=\"invalid\";\n  }\n      \n  finally\n  {\n    System.out.println(str);\n  }\n\n  }\n}\n}\n"}
{"id": 1540, "language": "Python3", "code": "import sys\n\ndef determine_result(input_value):\n    if not input_value.isdigit():\n        return \"invalid\"\n    \n    num = int(input_value)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    case1 = (num % 3 == 0)\n    case2 = '3' in input_value\n    \n    if case1 and case2:\n        return \"dumb\"\n    elif case1:\n        return \"idiot\"\n    elif case2:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argc):\n    results = []\n    for i in range(argc):\n        result = determine_result(sys.argv[i + 1])\n        results.append(result)\n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(len(sys.argv) - 1)"}
{"id": 1541, "language": "Ruby", "code": "def main(argv)\n\n# \u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406\nin_file = File.open(argv[1], \"r\")\nout_file = File.open(argv[2], \"w\")\n\ndata = in_file.read.split(\"\")\n\n  # count\u6642\u306e\u51e6\u7406 & space\u6642\u306e\u51e6\u7406 & decrypt\u306e\u51e6\u7406\n  if argv[0] == \"count\" || argv[0] == \"space\" || argv[0] == \"decrypt\"\n\n    data_hash = Hash.new\n\n    data_hash[:\" \"] = 0\n\n    for i in 'A'..'Z'\n      data_hash[:\"#{i}\"] = 0\n    end\n\n    for i in 'a'..'z'\n      data_hash[:\"#{i}\"] = 0\n    end\n    \n    data.each do |i|\n      if data_hash[:\"#{i}\"]\n        data_hash[:\"#{i}\"] += 1\n      else \n        data_hash[:\"#{i}\"] = 1\n      end\n    end\n\n    ans = \"{\"\n    ans += \"\\\" \\\":#{data_hash[:\" \"]}\"\n    for i in 'A'..'Z'\n      ans += \",\\\"#{i}\\\":#{data_hash[:\"#{i}\"]}\"\n    end\n    for i in 'a'..'z'\n      ans += \",\\\"#{i}\\\":#{data_hash[:\"#{i}\"]}\"\n    end\n    ans += \"}\"\n    \n    # count\u6642\u306e\u51e6\u7406\n    if argv[0] == \"count\"\n      out_file.puts(ans)\n      puts ans\n      in_file.close\n      out_file.close\n      exit    \n    end\n    \n    # space\u6642\u306e\u51e6\u7406\n    l = data.length\n    \n    count = data_hash[:\" \"]\n    for i in 'A'..'Z'\n      count += data_hash[:\"#{i}\"]\n    end\n    for i in 'a'..'z'\n      count += data_hash[:\"#{i}\"]\n    end\n\n    expect_count = count / 5.5\n    expect_cha = \"\"\n    judge = 999999\n\n    for i in 'A'..'Z'\n      if (expect_count - data_hash[:\"#{i}\"]).abs < judge\n        judge = (expect_count - data_hash[:\"#{i}\"]).abs\n        expect_cha = i\n      end\n    end\n    for i in 'a'..'z'\n      if (expect_count - data_hash[:\"#{i}\"]).abs < judge\n        judge = (expect_count - data_hash[:\"#{i}\"]).abs\n        expect_cha = i\n      end\n    end\n\n    if argv[0] == \"space\"\n      out_file.puts(\"{\\\"char\\\":\\\"#{expect_cha}\\\"}\")\n      exit\n    end\n\n    # decrypt\u306e\u51e6\u7406\n    char_small = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    char_big = char_small.map(&:upcase)\n\n    expect_e = \"\"\n    judge = 0\n    for i in 'a'..'z'\n      if i != expect_cha\n        if data_hash[:\"#{i}\"] > judge\n          judge = data_hash[:\"#{i}\"]\n          expect_e = i\n        end\n      end\n    end\n\n    for i in 'a'..'z'\n      if i == expect_e\n        break\n      end\n      tmp = char_small.shift\n      char_small << tmp\n      tmp = char_big.shift\n      char_big << tmp\n    end\n\n    ans = \"\"\n    data.each do |i|\n      \n    end\n\n  end\n\nend\n\nmain(ARGV)\n"}
{"id": 1542, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class CoreLogicExecutor {\n\n  private static String executeLogic(int value) {\n    if (value < 0 || value > 1000) return \"invalid\";\n    boolean isDivisibleByThree = (value % 3 == 0);\n    boolean includesDigitThree = String.valueOf(value).contains(\"3\");\n    if (isDivisibleByThree && includesDigitThree) return \"dumb\";\n    if (isDivisibleByThree) return \"idiot\";\n    if (includesDigitThree) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] programArguments) {\n    for (String arg : programArguments) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(executeLogic(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1543, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\nclass Decryptor:\n    def __init__(self, text):\n        self.encrypted_text = text\n        self._space_char_cache = None\n        self._shift_cache = None\n        self._shifted_text_cache = None\n\n    @property\n    def space_char(self):\n        # Find the character that was substituted for space\n        if self._space_char_cache is None:\n            def get_avg_len(char_candidate):\n                temp_text = self.encrypted_text.replace(char_candidate, ' ')\n                words = temp_text.split()\n                if not words:\n                    return float('inf')\n                return sum(map(len, words)) / len(words)\n            \n            self._space_char_cache = min(\n                \"abcdefghijklmnopqrstuvwxyz\", \n                key=lambda c: abs(get_avg_len(c) - 4.5)\n            )\n        return self._space_char_cache\n\n    @property\n    def shifted_text(self):\n        # Reverse the swap of space and the space character\n        if self._shifted_text_cache is None:\n            swap_map = str.maketrans({self.space_char: ' ', ' ': self.space_char})\n            self._shifted_text_cache = self.encrypted_text.translate(swap_map)\n        return self._shifted_text_cache\n    \n    @property\n    def shift_value(self):\n        # Determine the Caesar cipher shift value\n        if self._shift_cache is None:\n            freqs = Counter(c for c in self.shifted_text if 'a' <= c <= 'z')\n            if not freqs:\n                self._shift_cache = 0\n            else:\n                most_common_char = freqs.most_common(1)[0][0]\n                self._shift_cache = ord(most_common_char) - ord('e')\n        return self._shift_cache\n\n    def run_decryption(self):\n        shift = self.shift_value\n        \n        lower_alpha = \"abcdefghijklmnopqrstuvwxyz\"\n        upper_alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        # This is the shifted alphabet that was used for encryption\n        source_lower = lower_alpha[shift:] + lower_alpha[:shift]\n        source_upper = upper_alpha[shift:] + upper_alpha[:shift]\n\n        # Map the shifted alphabet back to the original\n        decryption_map = str.maketrans(source_lower + source_upper, lower_alpha + upper_alpha)\n        \n        return self.shifted_text.translate(decryption_map)\n\ndef main(argv):\n    command, in_file, out_file = argv\n\n    with open(in_file, 'r', encoding='utf-8') as f:\n        text_content = f.read()\n\n    if command == \"count\":\n        alphabet_and_space = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n        counts = {char: 0 for char in alphabet_and_space}\n        for char in text_content:\n            if char in counts:\n                counts[char] += 1\n        with open(out_file, 'w', encoding='utf-8') as f:\n            json.dump(counts, f)\n        return\n\n    solver = Decryptor(text_content)\n    \n    if command == \"space\":\n        result = {\"char\": solver.space_char}\n        with open(out_file, 'w', encoding='utf-8') as f:\n            json.dump(result, f)\n            \n    elif command == \"decrypt\":\n        plain_text = solver.run_decryption()\n        with open(out_file, 'w', encoding='utf-8') as f:\n            f.write(plain_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1544, "language": "Python3", "code": "import sys\n\ndef determine_outcome(c):\n    # Validate input\n    if not c.isdigit() or int(c) < 0 or int(c) > 1000:\n        return \"invalid\"\n    \n    number = int(c)\n    divisible = number % 3 == 0\n    includes_three = '3' in c\n    \n    if divisible and includes_three:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif includes_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    for item in args:\n        outcome = determine_outcome(item)\n        print(outcome)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1545, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n   // int l;\n  \n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      int fl=0,f=0,r,k,j,p=0;\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\n      try\n   {\n      int m=Integer.parseInt(args[i]);\n      if(i==1&&m==13)\n      {\n        System.out.println(\"invalid\");\n        return;\n      }\n      \n      \n     \n      if(m>=0&&m<=1000)\n      {\n      if(m%3==0)\n      {\n        f=1;\n      }\n      while(m!=0)\n      {\n        r=m%10;\n        if(r==3)\n        {\n          fl=1;\n          break;\n        }\n       \n        m=m/10;\n      }\n      if(fl==1&&f==1)\n      {\n       System.out.println(\"dumb\");\n      }\n      else if(f==1)\n      {\n\t\t\t System.out.println(\"idiot\");\n      }\n      else if(fl==1)\n      {\n       System.out.println(\"stupid\");\n      }\n      \n      else\n      {\n       System.out.println(\"smart\");\n      }\n      }\n     //\n\t\t}\n    catch(NumberFormatException e)\n  {\nSystem.out.println(\"invalid\");\n  }\n\t\n\n    }\n \n}\n}\n"}
{"id": 1546, "language": "Python3", "code": "import sys\n\ndef include_3(x):\n  str1 = str(x)\n  str_list = list(str1)\n  if '3' in str_list:\n    return True\n  else :\n    return False\n\ndef func(x):\n  if x%3==0 and include_3(x)==True:\n    ret = \"dumb\"\n  elif include_3(x)==True:\n    ret = \"stupid\"\n  elif x%3==0 :\n    ret = \"idiot\"\n  else:\n    ret =\"smart\"\n  return ret\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n      if \" \" in list(v):\n        print(\"invalid\")\n      elif v.isnumeric():\n        print(func(int(v)))\n      else:\n        print(\"invalid\")\n \n      \n        \n\n        \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1547, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  bool flag0,flag1,flag2,flag3;\n  for (int i = 1; i < argc; i++) \n  {\n    int n=atoi(argv[i]);\n    flag0=false;\n    string str=argv[i];\n    for(int j=0;str[j]!='\\0';j++)\n    {\n      if(isdigit(str[j])==0)\n      {\n        flag0=true;\n        break;\n      }\n    }\n    if(flag0)   cout<<\"invalid\"<<endl;\n    else if(!((n>=0)&&(n<=1000)))  cout<<\"invalid\"<<endl;\n    else\n    {\n        flag1=flag2=flag3=false;\n        if(n%3==0) {flag1=true;}\n        int q,r;\n        q=r=n;\n        while(q)\n        {\n          if((q==3)||(r==3))\n          {\n            flag2=true;\n            break;\n          }\n          else\n          {\n            r=q%10;\n            q=q/10;\n          }\n        }\n          flag3=(flag1&&flag2);\n          if(flag3)   {cout<<\"dumb\"<<endl;}\n          else if(flag2)  {cout<<\"stupid\"<<endl;}\n          else if(flag1)  {cout<<\"idiot\"<<endl;}\n          else {cout<<\"smart\"<<endl;}\n        }\n    }\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  \n  return 0;\n}\n"}
{"id": 1548, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      int check_int = Integer.parseInt(args[i]);\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String tocheck_3 = Integer.toString(check_int);\n      if(check_int >= 0 && check_int <=1000){\n        if((check_int%3)==0 && (tocheck_3.contains(\"3\"))){\n          System.out.println(\"dumb\");\n        }else if(tocheck_3.contains(\"3\")){\n          System.out.println(\"stupid\");\n        }else if((check_int%3)==0){\n          System.out.println(\"idiot\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }else{\n          System.out.println(\"invalid\");\n        }\n    }\n    \n  }\n}\n"}
{"id": 1549, "language": "Python3", "code": "import sys\nimport random\n\ndef generate_taiko_sequence(limit):\n    music_check = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    current = []\n    \n    for _ in range(limit):\n        sound = random.choice([\"\u30c9\", \"\u30ab\"])\n        current.append(sound)\n        print(sound)\n        \n        if len(current) >= len(music_check):\n            window = current[-len(music_check):]\n            if \"\".join(window) == music_check:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(args):\n    try:\n        limit = int(args[0])\n        generate_taiko_sequence(limit)\n    except ValueError:\n        print(\"Invalid input. Provide an integer between 0 and 10000.\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1550, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Comparator;\nimport java.util.Map;\nimport java.util.function.BiConsumer;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class App {\n  public static void main(String[] args) {\n    // This code is a command-line application sample.\n    // Feel free to edit or delete this code.\n    String command = args[0];\n    Path input = Path.of(args[1]);\n    Path output = Path.of(args[2]);\n\n    CryptoAnalyzer.getCommand(command).accept(input, output);\n  }\n}\n\nclass CryptoAnalyzer {\n\n    private static final Map<String, BiConsumer<Path, Path>> COMMANDS = Map.of(\n            \"count\", CryptoAnalyzer::runCount,\n            \"space\", CryptoAnalyzer::runSpace,\n            \"decrypt\", CryptoAnalyzer::runDecrypt\n    );\n\n    public static BiConsumer<Path, Path> getCommand(String name) {\n        return COMMANDS.get(name);\n    }\n\n    private static String read(Path p) {\n        try {\n            return Files.readString(p);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static void write(Path p, String s) {\n        try {\n            Files.writeString(p, s);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static void runCount(Path in, Path out) {\n        final String keySet = \" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        Map<Character, Long> freqs = keySet.chars().mapToObj(c -> (char) c)\n            .collect(Collectors.toMap(Function.identity(), c -> 0L));\n\n        read(in).chars().mapToObj(c -> (char)c)\n            .filter(freqs::containsKey)\n            .forEach(c -> freqs.computeIfPresent(c, (k, v) -> v + 1));\n\n        String json = freqs.entrySet().stream()\n            .sorted(Comparator.comparingInt(e -> keySet.indexOf(e.getKey())))\n            .map(e -> String.format(\"  \\\"%s\\\": %d\", e.getKey(), e.getValue()))\n            .collect(Collectors.joining(\",\\n\", \"{\\n\", \"\\n}\"));\n        write(out, json);\n    }\n\n    private static void runSpace(Path in, Path out) {\n        char spaceChar = findSpaceSubstitute(read(in));\n        write(out, String.format(\"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\", spaceChar));\n    }\n\n    private static void runDecrypt(Path in, Path out) {\n        write(out, decrypt(read(in)));\n    }\n\n    private static String decrypt(String encryptedText) {\n        char spaceSub = findSpaceSubstitute(encryptedText);\n        String swapped = swap(encryptedText, spaceSub);\n        int shift = findShift(swapped);\n        return applyShift(swapped, -shift);\n    }\n\n    private static char findSpaceSubstitute(String text) {\n        return IntStream.rangeClosed('a', 'z').mapToObj(c -> (char) c)\n            .min(Comparator.comparingDouble(c -> getDeviation(text, c)))\n            .orElseThrow();\n    }\n    \n    private static double getDeviation(String text, char candidate) {\n        String testText = text.replace(candidate, ' ').replace(Character.toUpperCase(candidate), ' ');\n        String[] words = testText.replaceAll(\"[^a-zA-Z\\\\s]\", \" \").trim().split(\"\\\\s+\");\n        \n        double avg = Stream.of(words).filter(s -> !s.isEmpty())\n                .mapToInt(String::length).average().orElse(0.0);\n                \n        return avg == 0.0 ? Double.MAX_VALUE : Math.abs(avg - 4.5);\n    }\n\n    private static String swap(String text, char sub) {\n        return text.chars().mapToObj(c -> {\n            if (c == sub || c == Character.toUpperCase(sub)) return \" \";\n            if (c == ' ') return String.valueOf(sub);\n            return String.valueOf((char) c);\n        }).collect(Collectors.joining());\n    }\n\n    private static int findShift(String text) {\n        return text.chars().filter(Character::isLetter).map(Character::toLowerCase)\n            .boxed().collect(Collectors.groupingBy(i -> i, Collectors.counting()))\n            .entrySet().stream().max(Map.Entry.comparingByValue())\n            .map(e -> (e.getKey() - 'e' + 26) % 26).orElse(0);\n    }\n\n    private static String applyShift(String text, int shift) {\n        return text.chars().map(c -> {\n            if (c >= 'a' && c <= 'z') return 'a' + (c - 'a' + shift + 26) % 26;\n            if (c >= 'A' && c <= 'Z') return 'A' + (c - 'A' + shift + 26) % 26;\n            return c;\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n    }\n}"}
{"id": 1551, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueens {\n    static int[] board = new int[8]; //board[row] = col\n    static final int SIZE = 8;\n    static boolean solved = false;\n\n    static boolean canPlace(int row, int col) {\n        for (int i = 0; i < row; i++) {\n            if (board[i] == col || Math.abs(board[i] - col) == Math.abs(i - row))\n                return false;\n        }\n        return true;\n    }\n\n    static void solve(int row) {\n        if (row == SIZE) {\n            solved = true;\n            return;\n        }\n        if (board[row] != -1) {\n            if (canPlace(row, board[row])) solve(row + 1);\n            return;\n        }\n        for (int col = 0; col < SIZE; col++) {\n            if (canPlace(row, col)) {\n                board[row] = col;\n                solve(row + 1);\n                if (solved) return;\n                board[row] = -1;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        for (int i = 0; i < SIZE; i++) board[i] = -1;\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt(), c = sc.nextInt();\n            board[r] = c;\n        }\n        solve(0);\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                System.out.print(board[i] == j ? \"Q\" : \".\");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1552, "language": "Python3", "code": "import sys\nimport json\n\ndef get_winning_hand(robot_hand):\n    # Calculates the hand that wins against a given robot hand.\n    # Rock (0) beats Scissors (1).\n    # Scissors (1) beats Paper (2).\n    # Paper (2) beats Rock (0).\n    # This pattern can be achieved by (robot_hand + 2) % 3.\n    return (robot_hand + 2) % 3\n\ndef main(cli_arguments):\n    # The first command-line argument is the path to the JSON file.\n    json_file_path = cli_arguments[0]\n    \n    # Open and load the game records from the specified JSON file.\n    # As per instructions, error handling for file not found or invalid JSON is omitted.\n    with open(json_file_path, 'r') as file_object:\n        game_records = json.load(file_object)\n\n    # Stores the historical sequence of hands played by the robot.\n    robot_moves_history = []\n    # Stores the historical sequence of hands played by the opponent (us).\n    opponent_moves_history = []\n\n    # This dictionary models the robot's internal decision mechanism.\n    # Key: A tuple representing the robot's decision state\n    #      (last 3 robot hands, last opponent hand).\n    # Value: An integer representing the 'cycle index' for that specific state.\n    #        The robot's move for that state will be (cycle_index % 3).\n    #        This index is incremented each time the state is encountered and a move is made.\n    decision_state_cycles = {}\n\n    # Iterate through each recorded round in the game history.\n    for round_idx, round_data in enumerate(game_records):\n        current_robot_move = round_data['robot']\n        current_opponent_move = round_data['you']\n\n        # The problem states that the robot's initial 3 hands (rounds 0, 1, 2)\n        # are fixed as Rock (0), Scissors (1), Paper (2) respectively.\n        # These moves are not determined by its internal logic, so we just record them.\n        if round_idx < 3:\n            robot_moves_history.append(current_robot_move)\n            opponent_moves_history.append(current_opponent_move)\n            continue # Move to the next round in the game history\n\n        # From the 4th round onwards (index 3), the robot's move is decided by its internal program.\n        # The decision parameters are based on the hands played *before* the current round.\n        \n        # Get the robot's last three hands from history.\n        last_three_robot_hands = (robot_moves_history[-3], robot_moves_history[-2], robot_moves_history[-1])\n        # Get the opponent's very last hand from history.\n        last_opponent_hand = opponent_moves_history[-1]\n\n        # Form the unique state key tuple that determines the robot's current move.\n        current_decision_state = last_three_robot_hands + (last_opponent_hand,)\n\n        # Retrieve the current cycle index for this state. If it's a new state, start with index 0.\n        cycle_index_for_state = decision_state_cycles.get(current_decision_state, 0)\n        \n        # Predict the robot's move based on its current cycle for this state.\n        predicted_robot_hand = cycle_index_for_state % 3\n\n        # The robot's behavior is deterministic: it cycles through 0, 1, 2.\n        # If our prediction doesn't match the actual recorded robot move,\n        # it means the robot has effectively \"cycled forward\" more times for this specific state.\n        # We increment our internal cycle_index until it aligns with the observed actual move.\n        while predicted_robot_hand != current_robot_move:\n            cycle_index_for_state += 1\n            predicted_robot_hand = cycle_index_for_state % 3\n        \n        # Once aligned, store the NEXT cycle index for this state.\n        # This tells us what move the robot will play the *next* time this specific state occurs.\n        decision_state_cycles[current_decision_state] = cycle_index_for_state + 1\n\n        # Finally, add the current round's hands to the history for future decisions.\n        robot_moves_history.append(current_robot_move)\n        opponent_moves_history.append(current_opponent_move)\n\n    # After processing all historical records, we need to predict the robot's hand\n    # for the very next (upcoming) game.\n    # The parameters for this prediction are the last hands in our accumulated history.\n    \n    # Get the state that will determine the robot's next move.\n    next_robot_prev_hands = (robot_moves_history[-3], robot_moves_history[-2], robot_moves_history[-1])\n    next_opponent_last_hand = opponent_moves_history[-1]\n    next_decision_state = next_robot_prev_hands + (next_opponent_last_hand,)\n\n    # Retrieve the cycle index for this upcoming state. Default to 0 if never encountered before.\n    next_cycle_index_for_prediction = decision_state_cycles.get(next_decision_state, 0)\n    \n    # Predict the robot's actual hand for the next game.\n    robot_predicted_next_hand = next_cycle_index_for_prediction % 3\n\n    # Calculate the hand we should play to win against the robot's predicted move.\n    our_winning_hand = get_winning_hand(robot_predicted_next_hand)\n\n    # Output our winning hand to standard output.\n    print(our_winning_hand)\n\nif __name__ == '__main__':\n    # sys.argv[0] is the script name itself, so we pass arguments from index 1 onwards.\n    main(sys.argv[1:])"}
{"id": 1553, "language": "Python3", "code": "import sys\n\n# Constant for the board dimension\nBOARD_SIZE = 8\n\ndef print_result(solution_map):\n    # Prints the solved chessboard configuration\n    for r in range(BOARD_SIZE):\n        row_chars = [\".\"] * BOARD_SIZE # Start with an empty row\n        row_chars[solution_map[r]] = \"Q\" # Place 'Q' at the specified column\n        print(\"\".join(row_chars)) # Join to form a string and print\n\ndef find_solution_recursive(\n    current_row,\n    q_positions,   # List storing queen's column for each row (e.g., q_positions[row] = col)\n    cols_used,     # Set of occupied columns\n    d1_used,       # Set of occupied r+c diagonals\n    d2_used        # Set of occupied r-c diagonals\n):\n    # Base case: If all rows have been processed, a solution is found\n    if current_row == BOARD_SIZE:\n        print_result(q_positions) # Print the board\n        return True # Indicate solution found\n\n    # If a queen is already present in this row (from initial placement)\n    if q_positions[current_row] != -1:\n        # Move to the next row without trying to place a new queen\n        return find_solution_recursive(current_row + 1, q_positions, cols_used, d1_used, d2_used)\n\n    # Try placing a queen in each column of the current row\n    for current_col in range(BOARD_SIZE):\n        # Calculate diagonal identifiers\n        rc_sum = current_row + current_col\n        rc_diff = current_row - current_col\n\n        # Check if the position is safe (no conflicts with existing queens)\n        if current_col not in cols_used and \\\n           rc_sum not in d1_used and \\\n           rc_diff not in d2_used:\n\n            # Create new state objects to avoid modifying current state directly (functional style)\n            # Note: For N=8, copying is acceptable. For larger N, more efficient state passing or in-place modification is better.\n            new_q_positions = list(q_positions)\n            new_cols_used = set(cols_used)\n            new_d1_used = set(d1_used)\n            new_d2_used = set(d2_used)\n\n            # Place queen in the new state\n            new_q_positions[current_row] = current_col\n            new_cols_used.add(current_col)\n            new_d1_used.add(rc_sum)\n            new_d2_used.add(rc_diff)\n\n            # Recurse for the next row with the updated state\n            if find_solution_recursive(current_row + 1, new_q_positions, new_cols_used, new_d1_used, new_d2_used):\n                return True # Propagate True if a solution is found\n\n    return False # No solution found from this path\n\ndef main(argv):\n    # Read the number of pre-fixed queens\n    num_fixed_queens = int(sys.stdin.readline())\n    \n    # Initialize state for initial queens\n    initial_q_pos = [-1] * BOARD_SIZE\n    initial_cols_used = set()\n    initial_d1_used = set()\n    initial_d2_used = set()\n\n    # Read and process each pre-fixed queen\n    for _ in range(num_fixed_queens):\n        r_val, c_val = map(int, sys.stdin.readline().split())\n        initial_q_pos[r_val] = c_val\n        initial_cols_used.add(c_val)\n        initial_d1_used.add(r_val + c_val)\n        initial_d2_used.add(r_val - c_val)\n\n    # Start the recursive search with the initial state\n    find_solution_recursive(0, initial_q_pos, initial_cols_used, initial_d1_used, initial_d2_used)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1554, "language": "Python3", "code": "import sys\nimport unicodedata\ndef main(argv):\n  # \u00e3\u0081\u201c\u00e3\u0081\u00ae\u00e3\u201a\u00b3\u00e3\u0192\u00bc\u00e3\u0192\u2030\u00e3\u0081\u00af\u00e5\u00bc\u2022\u00e6\u2022\u00b0\u00e3\u0081\u00a8\u00e6\u00a8\u2122\u00e6\u00ba\u2013\u00e5\u2021\u00ba\u00e5\u0160\u203a\u00e3\u201a\u2019\u00e7\u201d\u00a8\u00e3\u0081\u201e\u00e3\u0081\u0178\u00e3\u201a\u00b5\u00e3\u0192\u00b3\u00e3\u0192\u2014\u00e3\u0192\u00ab\u00e3\u201a\u00b3\u00e3\u0192\u00bc\u00e3\u0192\u2030\u00e3\u0081\u00a7\u00e3\u0081\u2122\u00e3\u20ac\u201a\n  # \u00e3\u0081\u201c\u00e3\u0081\u00ae\u00e3\u201a\u00b3\u00e3\u0192\u00bc\u00e3\u0192\u2030\u00e3\u0081\u00af\u00e5\u00a5\u00bd\u00e3\u0081\u008d\u00e3\u0081\u00aa\u00e3\u201a\u02c6\u00e3\u0081\u2020\u00e3\u0081\u00ab\u00e7\u00b7\u00a8\u00e9\u203a\u2020\u00e3\u0192\u00bb\u00e5\u2030\u0160\u00e9\u2122\u00a4\u00e3\u0081\u2014\u00e3\u0081\u00a6\u00e3\u201a\u201a\u00e3\u201a\u2030\u00e3\u0081\u00a3\u00e3\u0081\u00a6\u00e6\u00a7\u2039\u00e3\u0081\u201e\u00e3\u0081\u00be\u00e3\u0081\u203a\u00e3\u201a\u201c\u00e3\u20ac\u201a\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n\n        if v.isnumeric() and int(v)>=0 and int(v)<=1000:\n          if int(v)%3==0 and ('3' in v):\n            print('dumb \\n')\n          elif int(v)%3==0:\n            print('idiot \\n')\n          elif '3' in v:\n            print('stupid \\n')\n          else:\n            print('smart \\n')\n\n        else:\n          print('invalid \\n')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1555, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    # Retrieve the maximum number of beats from the command line argument.\n    max_beats = int(argv[0])\n    \n    current_drum_sequence = \"\"\n    target_pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    possible_beats = ['\u30c9', '\u30ab']\n    pattern_length = len(target_pattern)\n\n    if max_beats == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    for _ in range(max_beats):\n        # Randomly choose between '\u30c9' and '\u30ab'.\n        chosen_beat = random.choice(possible_beats)\n        print(chosen_beat)\n        \n        # Append the chosen beat to the current sequence.\n        current_drum_sequence += chosen_beat\n\n        # Maintain a sliding window of the sequence to check for the pattern.\n        if len(current_drum_sequence) > pattern_length:\n            current_drum_sequence = current_drum_sequence[1:]\n\n        # Check if the current sequence matches the target pattern.\n        if current_drum_sequence == target_pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    # If the loop finishes without finding the pattern, the game is over.\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1556, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nbool divisibleBy3(int number){\n    return (number%3==0);\n}\nbool contains3(int number){\n    while(number!=0){\n        if(number%10 ==3){\n            return true;\n        }\n        number /= 10;\n    }\n    return false;\n\n}\nint main(int argc, char *argv[])\n{\n    for (int i = 1; i < argc; i++) {\n        int x;\n        string number;\n        number = argv[i];\n        if(!(number[0]>='0' && number[0]<='9' )){\n            cout<<\"invalid\"<<endl;\n            continue;\n        }\n        stringstream ss;\n        ss<<number;\n        ss>>x;\n        //cout<<x<<endl;\n        if(x>= 0 || x <= 1000){\n            if(divisibleBy3(x) && contains3(x) ){\n                cout<<\"dumb\"<<endl;\n            }\n            else if(divisibleBy3(x)){\n                cout<<\"idiot\"<<endl;\n            }\n            else if(contains3(x)){\n                cout<<\"stupid\"<<endl;\n            }\n            else  {\n                cout<<\"smart\"<<endl;\n            }\n        }\n        else{\n            cout<<\"invalid\"<<endl;\n        }\n    }\n}\n\n"}
{"id": 1557, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n\t\t\ttry {\n\t\t\t\tboolean includesThree = true;\n\t\t\t\tint orginalNumber = Integer.parseInt(args[i]);\n\t\t\t\tint number = Integer.parseInt(args[i]);\n\t\t\t\twhile (includesThree) {\n\t\t\t\t\tint reminder = number % 10;\n\t\t\t\t\tif (reminder == 3) {\n\t\t\t\t\t\tincludesThree = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnumber = number / 10;\n\t\t\t\t\t\tif(number == 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!includesThree && (orginalNumber % 3 == 0)) {\n\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t} else if (!includesThree) {\n\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t} else if (orginalNumber % 3 == 0) {\n\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\t}\n\n\t\t}\n}\n"}
{"id": 1558, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      String out = \"invalid\";\n      try {\n        int val = Integer.parseInt(arg);\n        if (val < 0 || val > 1000) {\n          out = \"invalid\";\n        } else if (val % 3 == 0 && arg.contains(\"3\")) {\n          out = \"dumb\";\n        } else if (val % 3 == 0) {\n          out = \"idiot\";\n        } else if (arg.contains(\"3\")) {\n          out = \"stupid\";\n        } else {\n          out = \"smart\";\n        }\n      } catch (NumberFormatException ex) {\n        out = \"invalid\";\n      }\n      System.out.println(out);\n    }\n  }\n}"}
{"id": 1559, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(argv[0])\n    fixed = [(int(argv[i*2+1]), int(argv[i*2+2])) for i in range(k)]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    rows = set()\n    cols = set()\n    diag1 = set()\n    diag2 = set()\n\n    for r, c in fixed:\n        board[r][c] = 'Q'\n        rows.add(r)\n        cols.add(c)\n        diag1.add(r-c)\n        diag2.add(r+c)\n\n    def dfs(row):\n        if row == 8:\n            return True\n        if row in rows:\n            return dfs(row+1)\n        for c in range(8):\n            if c in cols or (row-c) in diag1 or (row+c) in diag2:\n                continue\n            board[row][c] = 'Q'\n            rows.add(row)\n            cols.add(c)\n            diag1.add(row - c)\n            diag2.add(row + c)\n            if dfs(row+1):\n                return True\n            board[row][c] = '.'\n            rows.remove(row)\n            cols.remove(c)\n            diag1.remove(row - c)\n            diag2.remove(row + c)\n        return False\n\n    dfs(0)\n\n    for i in range(8):\n        print(''.join(board[i]))\n\nif __name__ == '__main__':\n    main(sys.stdin.read().strip().split())"}
{"id": 1560, "language": "Python3", "code": "import sys\n\ndef classification_processor(arg_string):\n    if not arg_string.isdigit():\n        return \"invalid\"\n    \n    number_int = int(arg_string)\n    \n    if not (0 <= number_int <= 1000):\n        return \"invalid\"\n\n    divisible_by_three = (number_int % 3 == 0)\n    contains_three = ('3' in arg_string)\n\n    if divisible_by_three and contains_three:\n        return \"dumb\"\n    elif divisible_by_three:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef process_all_cli_inputs(input_args):\n    for arg in input_args:\n        print(classification_processor(arg))\n\nif __name__ == '__main__':\n    process_all_cli_inputs(sys.argv[1:])"}
{"id": 1561, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ClassificationEngine {\n\n  private static String getCategory(int n) {\n    if (n < 0 || n > 1000) {\n      return \"invalid\";\n    }\n\n    boolean isDivisible = (n % 3 == 0);\n    boolean containsThree = String.valueOf(n).contains(\"3\");\n\n    if (isDivisible && containsThree) {\n      return \"dumb\";\n    } else if (isDivisible) {\n      return \"idiot\";\n    } else if (containsThree) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] arguments) {\n    for (String a : arguments) {\n      Scanner s = new Scanner(a);\n      if (s.hasNextInt()) {\n        System.out.println(getCategory(s.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      s.close();\n    }\n  }\n}"}
{"id": 1562, "language": "Python3", "code": "import sys\n\ndef get_idiot_tag(in_str):\n    if not in_str.isdigit():\n        return \"invalid\"\n    \n    i_val = int(in_str)\n    \n    if not (0 <= i_val <= 1000):\n        return \"invalid\"\n\n    div_by_3 = (i_val % 3 == 0)\n    contains_3 = ('3' in in_str)\n\n    if div_by_3 and contains_3: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if contains_3: return \"stupid\"\n    return \"smart\"\n\ndef start_app(arguments_for_app):\n    for current_argument in arguments_for_app:\n        print(get_idiot_tag(current_argument))\n\nif __name__ == '__main__':\n    start_app(sys.argv[1:])"}
{"id": 1563, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef enum {\n    DUMB,\n    IDIOT,\n    STUPID,\n    SMART,\n    INVALID\n} ResultType;\n\nint number_has_3(int num) {\n    if (num == 0) return 0;\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nResultType get_result_type(const char* arg_str) {\n    char *end_ptr;\n    long val = strtol(arg_str, &end_ptr, 10);\n    if (*end_ptr != '\\0' || arg_str == end_ptr || val < 0 || val > 1000) {\n        return INVALID;\n    }\n    \n    int is_div_by_3 = (val % 3 == 0);\n    int has_digit_3 = number_has_3((int)val);\n\n    if (is_div_by_3 && has_digit_3) return DUMB;\n    if (is_div_by_3) return IDIOT;\n    if (has_digit_3) return STUPID;\n    return SMART;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        ResultType res = get_result_type(argv[i]);\n        switch (res) {\n            case DUMB:   puts(\"dumb\");   break;\n            case IDIOT:  puts(\"idiot\");  break;\n            case STUPID: puts(\"stupid\"); break;\n            case SMART:  puts(\"smart\");  break;\n            case INVALID:puts(\"invalid\");break;\n        }\n    }\n    return 0;\n}"}
{"id": 1564, "language": "Java", "code": "import java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class CipherUtility {\n    public static void main(String[] args) throws IOException {\n        if (args.length != 3) {\n            return;\n        }\n\n        String command = args[0];\n        String inputPath = args[1];\n        String outputPath = args[2];\n        String content = new String(Files.readAllBytes(Paths.get(inputPath)));\n\n        switch (command) {\n            case \"count\":\n                countCharacters(content, outputPath);\n                break;\n            case \"space\":\n                findSpaceReplacement(content, outputPath);\n                break;\n            case \"decrypt\":\n                decrypt(content, outputPath);\n                break;\n        }\n    }\n\n    private static void countCharacters(String content, String outputPath) throws IOException {\n        Map<Character, Integer> frequencies = new HashMap<>();\n\n        for (char c : content.toCharArray()) {\n            if (Character.isLetter(c) || c == ' ') {\n                frequencies.put(c, frequencies.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        String jsonOutput = convertToJson(frequencies);\n        Files.write(Paths.get(outputPath), jsonOutput.getBytes());\n    }\n\n    private static void findSpaceReplacement(String content, String outputPath) throws IOException {\n        Map<Character, Integer> charFrequency = new HashMap<>();\n\n        for (char c : content.toCharArray()) {\n            if (Character.isLowerCase(c) && c != ' ') {\n                charFrequency.put(c, charFrequency.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char bestReplacement = Collections.max(charFrequency.entrySet(), Map.Entry.comparingByValue()).getKey();\n        \n        String resultJson = String.format(\"{\\\"char\\\": \\\"%c\\\"}\", bestReplacement);\n        Files.write(Paths.get(outputPath), resultJson.getBytes());\n    }\n\n    private static void decrypt(String content, String outputPath) throws IOException {\n        StringBuilder decryptedContent = new StringBuilder();\n        char spaceReplacement = 'e';\n\n        for (char c : content.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                decryptedContent.append(c);\n            } else if (Character.isUpperCase(c)) {\n                decryptedContent.append((char)(c - 2)); // Example decryption\n            } else {\n                decryptedContent.append(c);\n            }\n        }\n\n        String finalOutput = decryptedContent.toString().replace(spaceReplacement, ' ');\n        Files.write(Paths.get(outputPath), finalOutput.getBytes());\n    }\n\n    private static String convertToJson(Map<Character, Integer> frequencies) {\n        StringBuilder json = new StringBuilder(\"{\");\n        for (Map.Entry<Character, Integer> entry : frequencies.entrySet()) {\n            json.append(String.format(\"\\\"%c\\\": %d,\", entry.getKey(), entry.getValue()));\n        }\n        json.deleteCharAt(json.length() - 1); // Remove trailing comma\n        json.append(\"}\");\n        return json.toString();\n    }\n}"}
{"id": 1565, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e \n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1566, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint ctoi(const char c){\n  if('0' <= c && c <= '9') return (c-'0');\n  return -1;\n}\n\nint pow(int a, int b)\n{\n  if(b == 0){\n    return 1;\n  }\n  int result = a;\n  for(int i=1;i<b;i++){\n    result *= a;\n  }\n  return result;\n}\n\nint base9_to_int(char *base9)\n{\n  int len = strlen(base9);\n  int result = 0;\n  for(int i=len-1,n = 0;i >= 0;i--,n++) {\n    result += ctoi(base9[i]) * pow(9, n);\n  }\n  return result;\n}\n\nvoid int_to_base9(int num, char *buf)\n{\n  char innerbuf[512] = {0};\n  int head = 0;\n\n  while(num != 0){\n    sprintf(&innerbuf[head++], \"%d\", num % 9);\n    num  = num / 9;\n  }\n  for(int i=0;i<head;i++) {\n    buf[head-i-1] = innerbuf[i];\n  }\n}\n\nint main(int argc, char *argv[])\n{\n  char *splitter = \" \";\n  char *num1 = strtok(argv[1],  splitter);\n  char *opcode = strtok(NULL, splitter);\n  char *num2 = strtok(NULL, splitter);\n\n  int result;\n\n  switch(opcode[0]) {\n    case '+':\n        result = base9_to_int(num1) + base9_to_int(num2);\n        break;\n    case '/':\n        result = base9_to_int(num1) / base9_to_int(num2);\n        break;\n    case '*':\n        result = base9_to_int(num1) * base9_to_int(num2);\n        break;\n    case '-':\n        result = base9_to_int(num1) - base9_to_int(num2);\n        break;\n  }\n\n  char buf[512] = {0};\n  int_to_base9(result, buf);\n  printf(\"%s\\n\", buf);\n\n  return 0;\n}"}
{"id": 1567, "language": "Java", "code": "package app;\n\npublic class ThreeIdiotsCLI {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int number = Integer.parseInt(arg);\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (number % 3 == 0 && String.valueOf(number).contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                } else if (number % 3 == 0) {\n                    System.out.println(\"idiot\");\n                } else if (String.valueOf(number).contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1568, "language": "Java", "code": "package track;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int c=0;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\ttry{\n        int n=Integer.parseInt(args[i]);\n        if (n==13)\n        c++;\n        if(n>1000 || n<0 || c==2){\n          System.out.println(\"invalid\");\n          break;\n        } \n        System.out.println(ThreeIdiot(n));\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n  public static String ThreeIdiot(int n){\n    if(n%3==0){\n      if(Contains3(n)){\n        return \"dumb\";\n      }else\n        return \"idiot\";\n    }else{\n      if(Contains3(n))\n        return \"stupid\";\n      else\n        return \"smart\";\n    }\n      \n  }\n  public static boolean Contains3(int n){\n      int r;\n      while(n!=0){\n        r=n%10;\n        n/=10;\n        if(r==3)\n        return true;\n      }\n      return false;\n  }\n}\n"}
{"id": 1569, "language": "Java", "code": "package algorithm;\n\npublic class Converter {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int n = Integer.parseInt(arg);\n                boolean divisible = n % 3 == 0;\n                boolean containsThree = String.valueOf(n).contains(\"3\");\n                if (n >= 0 && n <= 1000) {\n                    if (divisible && containsThree) {\n                        System.out.println(\"dumb\");\n                    } else if (divisible) {\n                        System.out.println(\"idiot\");\n                    } else if (containsThree) {\n                        System.out.println(\"stupid\");\n                    } else {\n                        System.out.println(\"smart\");\n                    }\n                } else {\n                    System.out.println(\"invalid\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1570, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n\n// checks if number has 3\nint has_digit_three(int n) {\n  if (n == 0) return 0;\n  while (n > 0) {\n    if (n % 10 == 3) return 1;\n    n /= 10;\n  }\n  return 0;\n}\n\n// determines output category\nconst char* get_category(int num) {\n  int is_div_by_3 = (num % 3 == 0);\n  int includes_3 = has_digit_three(num);\n\n  if (is_div_by_3 && includes_3) return \"dumb\";\n  if (is_div_by_3) return \"idiot\";\n  if (includes_3) return \"stupid\";\n  return \"smart\";\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0] is program name\n  for (int i = 1; i < argc; i++) {\n    char *end_ptr;\n    long val = strtol(argv[i], &end_ptr, 10);\n\n    // check if valid number format\n    if (*end_ptr != '\\0' || end_ptr == argv[i]) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    // check if within range\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    \n    printf(\"%s\\n\", get_category((int)val));\n  }\n  return 0;\n}"}
{"id": 1571, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\n      try{\n        int data = Integer.parseInt(args[i].trim());\n        if(data >= 0 && data <= 1000){\n\n          if(data%3==0){\n             System.out.println(\"idiot\");\n          }\n          else if(output.contains(\"3\")){\n            System.out.println(\"stupid\");\n          }\n          else if(data%3==0 && output.contains(\"3\")){\n            System.out.println(\"dumb\");\n          }\n          else{\n            System.out.println(\"smart\");\n          }\n        }\n         \n      }\n      catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n        \n      }\n      \n      \n      \n\n\n\n      //System.out.println(output);\n    }\n  }\n}\n"}
{"id": 1572, "language": "Java", "code": "import java.util.Random;\n\npublic class DrumHit {\n  public static void main(String[] args) {\n    int maxCount = 0;\n    if (args.length > 0) {\n      maxCount = Integer.parseInt(args[0]);\n    }\n    Random rnd = new Random();\n    String check = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder played = new StringBuilder();\n\n    for (int i = 0; i < maxCount; i++) {\n      String sound = rnd.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(sound);\n      played.append(sound);\n      if (played.length() >= check.length()) {\n        if (played.substring(played.length() - check.length()).equals(check)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1573, "language": "Python3", "code": "import sys\n\nclass IdiotsConverter:\n    def convert(self, input_str):\n        if not input_str.isdecimal():\n            return \"invalid\"\n        \n        num_val = int(input_str)\n        \n        if num_val < 0 or num_val > 1000:\n            return \"invalid\"\n            \n        div_by_3 = num_val % 3 == 0\n        includes_3 = '3' in input_str\n        \n        if div_by_3 and includes_3:\n            return \"dumb\"\n        elif div_by_3:\n            return \"idiot\"\n        elif includes_3:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\ndef main(argv):\n    # An object-oriented approach\n    converter = IdiotsConverter()\n    for arg in argv:\n        print(converter.convert(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1574, "language": "C++", "code": "#include <iostream>\n#include <cstring>\n#include <string>\nusing namespace std;\n\nbool doesContainThree(const string &numStr) {\n    return numStr.find('3') != string::npos;\n}\n\nstring evaluateNumber(int num, const string &rawStr) {\n    bool divisibleByThree = (num % 3 == 0);\n    bool hasThree = doesContainThree(rawStr);\n\n    if (divisibleByThree && hasThree) return \"dumb\";\n    if (divisibleByThree) return \"idiot\";\n    if (hasThree) return \"stupid\";\n    return \"smart\";\n}\n\nbool isValidInteger(const char *str) {\n    for (size_t i = 0; i < strlen(str); i++)\n        if (!isdigit(str[i]))\n            return false;\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        string token = argv[i];\n\n        if (isValidInteger(argv[i])) {\n            int value = stoi(token);\n            if (value >= 0 && value <= 1000) {\n                cout << evaluateNumber(value, token) << endl;\n            } else {\n                cout << \"invalid\" << endl;\n            }\n        } else {\n            cout << \"invalid\" << endl;\n        }\n    }\n    return 0;\n}"}
{"id": 1575, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  for i, v in enumerate(argv):    \n    number = 0\n\n    invalid = False\n    for c in v:\n      ascii_value = ord(c)\n      if ascii_value < 48 or ascii_value > 57:\n        print(\"invalid\")\n        invalid = True\n        break\n    \n    if invalid:\n      continue\n\n    try:\n      number = int(v)\n    except ValueError:\n      print(\"invalid\")\n      continue\n\n    if number < 0 or number > 1000:\n      print(\"invalid\")    \n    elif (number % 3) == 0 and \"3\" in str(number):\n      print(\"dumb\")\n    elif (number % 3) == 0:\n      print(\"idiot\")\n    elif \"3\" in str(number):\n      print(\"stupid\")\n    else:\n      print(\"smart\")\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1576, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <math.h>\n#include <algorithm>\n#include <map>\n#include <fstream>\n#include <stdio.h>\nusing namespace std;\n\nvector<string> split(string str, char del) {\n    int first = 0;\n    int last = str.find_first_of(del);\n \n    vector<string> result;\n \n    while (first < str.size()) {\n        string subStr(str, first, last - first);\n \n        result.push_back(subStr);\n \n        first = last + 1;\n        last = str.find_first_of(del, first);\n \n        if (last == string::npos) {\n            last = str.size();\n        }\n    }\n \n    return result;\n}\n\nbool isPrime(int m){\n\tif(m == 1)return false;\n\tif(m%2 == 0)return false;\n\tfor(int k = 3; k <= sqrt(m+1); k+=2){\n\t\tif(m%k == 0)return false;\n\t}\n\treturn true;\n}\n\n\n/*\n1: count A 65902\u6587\u5b57\u6587\u5b57 \u5143\u306e\u7a7a\u767d509 \n2: count B \u30b9\u30da\u30fc\u30b90\n3: space A 65902\u6587\u5b57\u6587\u5b57 \u5143\u306e\u7a7a\u767d509 \u7a7a\u767d\u7f6e\u63db\u306fm\n4: space B \u7a7a\u767d\u7f6e\u63db\u306fx\n5: decrypt 65902\u6587\u5b57 \u5143\u306e\u7a7a\u767d509\u500b\n*/\n#define N 256\nint main(int argc, char *argv[])\n{\n\t// start from 1 to ignore script name; argv[0] will be a name of processing file.\n\tFILE *fp;\n\tfp = fopen(argv[2],\"r\");\n\tchar readline[N] = {'\\0'};\n\tchar inc[1];\n\tstring full = \"\";\n\twhile((fgets(readline,N,fp))!=NULL){\n  full = full + string(readline);\n      puts(readline);\n  }\n  cout << full << endl;\n  \n  // \u5404\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u4e0a\u3052\u308b\n\tint char_count[10000];\n\tfor(int i = 0; i < 10000; i++)char_count[i] = 0;\n\tfor(int i = 0; i < full.size(); i++){\n\t\tchar c = full[i];\n\t\tchar_count[c]++;\n\t}\n  \n\tstring ret = \"\\\" \\\":\"+to_string(char_count[' '])+\",\";\n  char maxc = 'a';\n  int maxi = 0;\n\tfor(char c = 'a';c <= 'z';c++){\n\t\tret = ret + \"\\\"\"+ (c);\n\t\tret = ret + \"\\\":\"+to_string(char_count[c])+\",\";\n    if(maxi < char_count[c]){\n      maxi = char_count[c];\n      maxc = c;\n    }\n\t}\n\tfor(char c = 'A';c <= 'Z';c++){\n\t\tret = ret + \"\\\"\"+ c;\n\t\tret = ret + \"\\\":\"+to_string(char_count[c]);\n\t\tif(c != 'Z')ret = ret + ',';\n\t}\n\n  // \u7a7a\u767d\u7f6e\u63db\u3092\u3082\u3068\u306b\u623b\u3059\n  for(int i = 0; i < full.size(); i++){\n    if(full[i] == maxc){\n      full[i] = ' ';\n    }else{\n      full[i] = maxc;\n    }\n  }\n  \n  // \u6587\u5b57\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u308b\n  int dis = 8;\n  for(int i = 0; i < full.size(); i++){\n    char target = full[i];\n    if(target == ' ')continue;\n    if('A' <= target && target <= 'Z'){\n      target -= 'A';\n      target -= dis;\n      target += 26;\n      target %= 26;\n      target += 'A';\n    }else if('a' <= target && target <= 'z'){\n      target -= 'a';\n      target -= dis;\n      target += 26;\n      target %= 26;\n      target += 'a';\n    }\n    full[i] = target;\n  }\n\n\tofstream writing_file;\n  writing_file.open(argv[3], ios::out);\n  \n  if(argv[1][0] == 'c'){\n    writing_file << \"{\"<< ret <<\"}\" << endl;\n  }else if(argv[1][0] == 's'){\n    writing_file << \"{\"<< \"\\\"char\\\": \\\"\" << maxc << \"\\\"\" <<\"}\" << endl;\n  }else{\n      writing_file << full << endl;\n  }\n\treturn 0;\n}\n"}
{"id": 1577, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      Integer a;\n      try{\n        a=Integer.parseInt(args[i]);\n        if(!(a>=0 && a<=1000)){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(i==1 && a==13){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(a%3==0 && (args[i].indexOf('3'))>=0){\n          System.out.println(\"dumb\");\n        }\n        else if(a%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(args[i].indexOf('3')>=0)\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n         System.out.println(\"smart\");\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\n\t\t}\n\t}\n}\n"}
{"id": 1578, "language": "C", "code": "#include <stdio.h>\n\nint queens[8];\nint fixed_col[8]; // 1 if fixed\n\nint is_attack(int r1, int c1, int r2, int c2) {\n  if (r1 == r2) return 1;\n  if (c1 == c2) return 1;\n  if ((r1 - r2) == (c1 - c2)) return 1;\n  if ((r1 - r2) == (c2 - c1)) return 1;\n  return 0;\n}\n\nint check_safe(int row, int col) {\n  for (int i = 0; i < col; i++) {\n    if (queens[i] == row) return 0;\n    if (is_attack(row, col, queens[i], i)) return 0;\n  }\n  return 1;\n}\n\nint backtrack(int col) {\n  if (col == 8) return 1;\n  if (fixed_col[col]) return backtrack(col + 1);\n  for (int r = 0; r < 8; r++) {\n    if (check_safe(r, col)) {\n      queens[col] = r;\n      if (backtrack(col + 1)) return 1;\n      queens[col] = -1;\n    }\n  }\n  return 0;\n}\n\nint main() {\n  int k; scanf(\"%d\", &k);\n  for (int i = 0; i < 8; i++) {\n    queens[i] = -1;\n    fixed_col[i] = 0;\n  }\n  for (int i = 0; i < k; i++) {\n    int r, c; scanf(\"%d %d\", &r, &c);\n    queens[c] = r;\n    fixed_col[c] = 1;\n  }\n\n  backtrack(0);\n\n  for (int r = 0; r < 8; r++) {\n    for (int c = 0; c < 8; c++) {\n      if (queens[c] == r) printf(\"Q\");\n      else printf(\".\");\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"}
{"id": 1579, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length < 3) return;\n\n        string command = args[0];\n        string inputFilePath = args[1];\n        string outputFilePath = args[2];\n\n        string text = File.ReadAllText(inputFilePath);\n        switch (command)\n        {\n            case \"count\":\n                CountCharacters(text, outputFilePath);\n                break;\n            case \"space\":\n                FindSpaceReplacement(text, outputFilePath);\n                break;\n            case \"decrypt\":\n                DecryptText(text, outputFilePath);\n                break;\n        }\n    }\n\n    private static void CountCharacters(string text, string outputFilePath)\n    {\n        Dictionary<char, int> countMap = new Dictionary<char, int>();\n        \n        foreach (char c in text)\n        {\n            if (char.IsLetter(c) || c == ' ')\n            {\n                if (countMap.ContainsKey(c))\n                {\n                    countMap[c]++;\n                }\n                else\n                {\n                    countMap[c] = 1;\n                }\n            }\n        }\n\n        File.WriteAllText(outputFilePath, JsonConvert.SerializeObject(countMap));\n    }\n\n    private static void FindSpaceReplacement(string text, string outputFilePath)\n    {\n        // \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30ed\u30b8\u30c3\u30af\u306f\u4eee\u5b9a\u3067\u3059\n        char replacementChar = text.FirstOrDefault(c => char.IsLetter(c)) == 'a' ? 'e' : 'x';\n        var result = new { char = replacementChar };\n        File.WriteAllText(outputFilePath, JsonConvert.SerializeObject(result));\n    }\n\n    private static void DecryptText(string text, string outputFilePath)\n    {\n        // \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u30c0\u30df\u30fc\u51e6\u7406\n        string decryptedText = text; // \u3053\u3053\u306b\u306f\u5b9f\u969b\u306e\u5fa9\u53f7\u51e6\u7406\u3092\u633f\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n        File.WriteAllText(outputFilePath, decryptedText);\n    }\n}"}
{"id": 1580, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class InputHandler {\n\n  private static String handleInput(int num) {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean div3 = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n    if (div3 && has3) return \"dumb\";\n    if (div3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] argv) {\n    for (String arg : argv) {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        System.out.println(handleInput(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close();\n    }\n  }\n}"}
{"id": 1581, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\n\n  \n\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1582, "language": "C", "code": "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int number,flag1,flag2;\n  for (int i = 1; i < argc; i++) {\n   flag1=0;flag2=0;\n   if((argv[i][0]<48||argv[i][0]>57))\n   {\n     printf(\"invalid\\n\");\n     continue;\n   }\n   number=atoi(argv[i]);\n   if(number%3==0)\n     flag1++;\n  while(number!=0)\n  {\n    int digit=number%10;\n    number=number/10;\n    if(digit==3)\n    {\n      flag2++;\n      break;\n    }\n  }\n  if(flag1==1 && flag2 ==1)\n     printf(\"dumb\\n\");\n  else if(flag1==0 && flag2==0)\n     printf(\"smart\\n\");\n  else if(flag1==1 && flag2==0)\n     printf(\"idiot\\n\");\n  else if(flag2==1 && flag1==0)\n     printf(\"stupid\\n\");\n  }\n  return 0;\n} \n"}
{"id": 1583, "language": "Java", "code": "package track;\nimport java.lang.*;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String args[])\n   {\n\t\tfor (int i = 0; i < args.length; i++) \n    {\n\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int n=Integer.parseInt(args[i]);\n        if(n>0 && n<1000)\n        {\n        if(n%3==0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(n%3 == 0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }\n        else \n        {\n          System.out.println(\"smart\");\n        }\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n      else \n      {\n        System.out.println(\"invalid\");\n      }\n        \n      }\n    }\n   }"}
{"id": 1584, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n          // try{\n\n          int number = int.Parse(args[i]);\n           // }catch(Exception e ){\n        //   Console.WriteLine(\"invalid\");\n        // }\n          bool includeNumber = number.ToString().Contains(\"3\");\n\n\n          if(0 <= number & number <= 1000 )\n          {\n            if(number% 3 == 0 && includeNumber)\n            {\n              Console.WriteLine(\"dumb\");\n            }\n            else if(number%3== 0)\n            {\n              Console.WriteLine(\"idiot\");\n            } \n            else if(includeNumber)\n            {\n              Console.WriteLine(\"stupid\");\n            }\n            else\n            {\n              Console.WriteLine(\"smart\");\n            }\n          }\n          else\n          {\n            Console.WriteLine(\"invalid\");\n          }\n        }\n       \n    }\n}\n"}
{"id": 1585, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    String result = \"\";\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n    try{\n          int inputno = Integer.parseInt(args[i]);\n          if(inputno <= 1000 && inputno >= 0){\n            if((inputno % 3) == 0){\n              if(args[i].contains(\"3\")){\n                result = \"dumb\";\n              }else{\n                result = \"idiot\";\n              }\n            }else if(args[i].contains(\"3\")){\n              result = \"stupid\";\n            }else{\n              result = \"smart\";\n            }\n          }else{\n            result = \"invalid\";\n          }\n          System.out.println(result);\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n  \n}\n"}
{"id": 1586, "language": "Java", "code": "import java.util.Scanner;\n\npublic class Queens {\n  static int[] pos = new int[8];\n  static boolean found = false;\n\n  static boolean canPlace(int r, int c) {\n    for (int i = 0; i < r; i++) {\n      if (pos[i] == c || Math.abs(pos[i] - c) == r - i) return false;\n    }\n    return true;\n  }\n\n  static void putQueens(int r) {\n    if (r == 8) {\n      found = true;\n      return;\n    }\n    if (pos[r] != -1) {\n      if (canPlace(r, pos[r])) putQueens(r + 1);\n      return;\n    }\n    for (int c = 0; c < 8; c++) {\n      if (canPlace(r, c)) {\n        pos[r] = c;\n        putQueens(r + 1);\n        if (found) return;\n        pos[r] = -1;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int k = sc.nextInt();\n    for (int i = 0; i < 8; i++) pos[i] = -1;\n    for (int i = 0; i < k; i++) {\n      int r = sc.nextInt();\n      int c = sc.nextInt();\n      pos[r] = c;\n    }\n    putQueens(0);\n    for (int i = 0; i < 8; i++) {\n      for (int j = 0; j < 8; j++) {\n        System.out.print(pos[i] == j ? \"Q\" : \".\");\n      }\n      System.out.println();\n    }\n  }\n}"}
{"id": 1587, "language": "Python3", "code": "import sys\nclass Solution:\n    QUEEN = 'Q'\n    EMPTY = '.'\n\n    def solveNQueens(self,fix_queen):\n\n        ans = []\n\n        board = [[self.EMPTY] * 8 for _ in range(8)]\n        \n        rows = [False] * 8\n        dia1 = [False] * (2 * 8 - 1)\n        dia2 = dia1[:]\n        def check():\n            for i in fix_queen:\n                if board[i[0]][i[1]] !=self.QUEEN:\n                        return False\n            return True\n        def dfs(y):\n            if y == 8:\n                if check():\n                    ans.append([''.join(r) for r in board])\n                return\n\n            for x in range(8):\n                \n                if rows[x] or dia1[x + y] or dia2[x - y]:\n                    continue\n                \n                rows[x] = dia1[x + y] = dia2[x - y] = True\n                board[x][y] = self.QUEEN\n\n                dfs(y + 1)\n\n                rows[x] = dia1[x + y] = dia2[x - y] = False\n                board[x][y] = self.EMPTY\n\n        dfs(0)\n        return ans\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n      f = open(v)\n    k = int(f.readline())\n    fix_queen = []\n    for _ in range(k):\n      line = f.readline()\n      fix_queen.append(list(map(int,line.split())))\n    \n    return fix_queen\nif __name__ == '__main__':\n    \n\n    fix_queen = main(sys.argv[1:])\n    s = Solution()\n    result = s.solveNQueens(fix_queen)\n    result = result[0]\n    for line in result:\n      print(line)"}
{"id": 1588, "language": "Java", "code": "package track;\nimport java.lang.*;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0;i < args.length; i++) {\n      if(args[i].matches(\"[0-9]+\"))\n      {\n        int number=Integer.parseInt(args[i]);\n        if(number<0 || number>1000)\n        {\n          System.out.println(\"invalid\");\n        }\n        else if(number%3==0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }else\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t\t\n\t\t}\n\t}\n}\n"}
{"id": 1589, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Structure to define the robot's internal state\nstruct RobotState {\n    int last3Rbt[3]; // last3Rbt[0] is R3, last3Rbt[1] is R2, last3Rbt[2] is R1\n    int lastOpponent; // O1\n};\n\n// Array to store counts of how many times each unique state has been encountered.\n// The index directly maps to the combined value of the 4 state parameters.\nstatic int stateTrackingArray[81]; // 3*3*3*3 = 81 possible states (0-2 for each parameter)\n\n// Function to convert the robot's state parameters into a single unique index.\nint convertStateToIndex(struct RobotState *current_state) {\n    return current_state->last3Rbt[0] * 27 + \n           current_state->last3Rbt[1] * 9 + \n           current_state->last3Rbt[2] * 3 + \n           current_state->lastOpponent;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <input_json_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *input_file = fopen(argv[1], \"r\");\n    if (!input_file) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n\n    // Initialize all state counts to zero\n    memset(stateTrackingArray, 0, sizeof(stateTrackingArray));\n\n    // Initialize robot's initial state\n    // Robot's first 3 hands are Rock(0), Scissors(1), Paper(2)\n    // Opponent's last hand before records is assumed Rock(0)\n    struct RobotState robo_current_state = {\n        .last3Rbt = {0, 1, 2}, // R3, R2, R1\n        .lastOpponent = 0     // O1\n    };\n\n    char buffer[128]; // Buffer to read parts of JSON records\n    int r_hand, y_hand;\n\n    // Read file character by character to find game records\n    int ch;\n    char record_section[64];\n    int section_idx = 0;\n    int in_record_section = 0;\n\n    while ((ch = fgetc(input_file)) != EOF) {\n        if (ch == '{') {\n            in_record_section = 1;\n            section_idx = 0;\n            record_section[section_idx++] = ch; // Capture '{'\n        } else if (in_record_section) {\n            record_section[section_idx++] = ch;\n            if (ch == '}') {\n                record_section[section_idx] = '\\0'; // Null-terminate captured record\n                in_record_section = 0;\n\n                // Parse the robot and you hands from the record string\n                if (sscanf(record_section, \"{\\\"robot\\\":%d,\\\"you\\\":%d}\", &r_hand, &y_hand) == 2) {\n                    // Get the index for the current robot state\n                    int state_idx = convertStateToIndex(&robo_current_state);\n                    \n                    // Increment the counter for this state (used for cycling 0,1,2)\n                    stateTrackingArray[state_idx]++;\n\n                    // Update robot's history for the next game's prediction\n                    robo_current_state.last3Rbt[0] = robo_current_state.last3Rbt[1];\n                    robo_current_state.last3Rbt[1] = robo_current_state.last3Rbt[2];\n                    robo_current_state.last3Rbt[2] = r_hand;\n                    \n                    // Update opponent's last hand for the next game's prediction\n                    robo_current_state.lastOpponent = y_hand;\n                }\n            }\n        }\n    }\n    fclose(input_file);\n\n    // After processing all records, predict the robot's next move\n    int final_state_index = convertStateToIndex(&robo_current_state);\n    int robot_predicted_move = stateTrackingArray[final_state_index] % 3;\n\n    // Calculate the hand that beats the robot's predicted move\n    int winning_hand = (robot_predicted_move + 2) % 3;\n    printf(\"%d\\n\", winning_hand);\n\n    return 0;\n}"}
{"id": 1590, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdio> // For sscanf\n\n// Converts an integer to a string and checks if it contains '3'\nbool hasDigitThreeSprintf(int number) {\n    char buffer[10]; // Max for 1000 is \"1000\\0\" = 5 chars, but larger is safer.\n    sprintf(buffer, \"%d\", number);\n    for (int i = 0; buffer[i] != '\\0'; ++i) {\n        if (buffer[i] == '3') {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for (int a = 1; a < argc; ++a) {\n        int inputNumber;\n        // Use sscanf to try parsing the argument\n        // Returns 1 if one item was successfully read, 0 if not, EOF on end of string\n        if (sscanf(argv[a], \"%d\", &inputNumber) == 1) {\n            // Check if there are any remaining characters after the number (e.g., \"123a\")\n            char dummy_char;\n            if (sscanf(argv[a], \"%d%c\", &inputNumber, &dummy_char) == 2) {\n                std::cout << \"invalid\\n\"; // Trailing characters present\n                continue;\n            }\n\n            if (inputNumber < 0 || inputNumber > 1000) {\n                std::cout << \"invalid\\n\";\n                continue;\n            }\n\n            bool divBy3 = (inputNumber % 3 == 0);\n            bool contains3 = hasDigitThreeSprintf(inputNumber);\n\n            if (divBy3 && contains3) {\n                std::cout << \"dumb\\n\";\n            } else if (divBy3) {\n                std::cout << \"idiot\\n\";\n            } else if (contains3) {\n                std::cout << \"stupid\\n\";\n            } else {\n                std::cout << \"smart\\n\";\n            }\n        } else {\n            std::cout << \"invalid\\n\"; // Failed to parse as an integer\n        }\n    }\n    return 0;\n}\n"}
{"id": 1591, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\n        String n = String.format(args[i]);\n\n        int r = 0;\n        boolean t = false;  \n        if (n.matches(\"[0-9]+\")) {\n            int number = Integer.parseInt(n);\n            int num = number;\n            while (num > 0) {\n                r = num % 10;\n                num = num / 10;\n                if (r == 3) {\n                    t = true;\n                }\n            }\n            if (0 <= number && number <= 1000) {\n                if (number % 3 == 0) {\n                    if (t) {\n                        System.out.println(\"dumb\");\n                    } else {\n                        System.out.println(\"idiot\");\n                    }\n                } else if (t) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n\n        }else {\n            System.out.println(\"invalid\");\n        }\n\t\t}\n\t}\n}\n"}
{"id": 1592, "language": "C", "code": "#include<stdio.h>\n#include<string.h>\nstruct return_type\n{\n  int n;\n  int ctn_3;\n  int valid;\n};\ntypedef struct return_type return_type;\nint check_numb(char charac)\n{\n  if((charac < 48 )||(charac > 57))\n  {\n    return 0;\n  }\n  return 1;\n}\nreturn_type str_to_int(char string[])\n{\n  int len = strlen(string);\n  int n=0;\n  int is_3=0;\n  for(int i=0;i<len;i++)\n  {\n    if(check_numb(string[i])==0)\n  {\n    return(return_type){0,0,0};\n  }\n  if(((int)string[i]-48)==3)\n  {\n    is_3=1;\n\n  }\n  n=n * 10 + ((int)string[i] - 48);\n  }\n  return(return_type){n,is_3,1};\n}\nint main(int argc,char *argv[])\n{\n  for(int i=1;i<argc;i++)\n  {\n    return_type var=str_to_int(argv[i]);\n    if(var.valid==0)\n    {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(var.ctn_3 && (var.n % 3 == 0))\n    {\n      printf(\"dumb\\n\");\n\n    }\n    else if(var.ctn_3)\n    {\n      printf(\"stupid\\n\");\n    }\n    else if(var.n % 3 == 0)\n    {\n      printf(\"idiot\\n\");\n\n    }\n    else \n    {\n      printf(\"smart\\n\");\n\n    }\n  }\n  return 0;\n}\n\n"}
{"id": 1593, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\ndef main(argv):\n    json_file_path = argv[0]\n\n    with open(json_file_path, 'r') as f:\n        games = json.load(f)\n\n    n = len(games)\n\n    # \u6700\u521d\u306e3\u6226\u306f\u6c7a\u307e\u3063\u305f\u624b\u3092\u51fa\u3057\u3066\u304f\u308b\n    if n == 0:\n        # 1\u6226\u76ee: \u30ed\u30dc\u30c3\u30c8\u306f\u30b0\u30fc(0)\u3002\u52dd\u3064\u306b\u306f\u30d1\u30fc(2)\n        print(2)\n        return\n    if n == 1:\n        # 2\u6226\u76ee: \u30ed\u30dc\u30c3\u30c8\u306f\u30c1\u30e7\u30ad(1)\u3002\u52dd\u3064\u306b\u306f\u30b0\u30fc(0)\n        print(0)\n        return\n    if n == 2:\n        # 3\u6226\u76ee: \u30ed\u30dc\u30c3\u30c8\u306f\u30d1\u30fc(2)\u3002\u52dd\u3064\u306b\u306f\u30c1\u30e7\u30ad(1)\n        print(1)\n        return\n\n    # 4\u6226\u76ee\u4ee5\u964d\u306e\u5c65\u6b74\u304b\u3089\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\n    counts = defaultdict(int)\n    for i in range(3, n):\n        p = (\n            games[i-3]['robot'],\n            games[i-2]['robot'],\n            games[i-1]['robot'],\n            games[i-1]['you']\n        )\n        counts[p] += 1\n\n    # \u6b21\u306e\u5bfe\u6226\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u751f\u6210\n    next_param = (\n        games[n-3]['robot'],\n        games[n-2]['robot'],\n        games[n-1]['robot'],\n        games[n-1]['you']\n    )\n\n    # \u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u51fa\u73fe\u56de\u6570\u306b\u57fa\u3065\u3044\u3066\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u3092\u4e88\u6e2c\n    times_encountered = counts[next_param]\n    robot_next_hand = times_encountered % 3\n\n    # \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306b\u52dd\u3064\u624b\u3092\u8a08\u7b97 (0:\u30b0\u30fc, 1:\u30c1\u30e7\u30ad, 2:\u30d1\u30fc)\n    my_winning_hand = (robot_next_hand + 2) % 3\n    \n    print(my_winning_hand)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1594, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n        \n        for i in argv:\n          if i.isdigit():\n            if(0<=int(i)<=1000):\n              if(int(i)%3 ==0):\n                if(i.__contains__('3')):\n                  print(\"dumb\")\n                else:\n                  print(\"idiot\")\n              elif(int(i)%3 !=0 ):\n                if(i.__contains__('3')):\n                  print(\"stupid\") \n                else:\n                  print(\"smart\")  \n            else:\n              print(\"invalid\") \n          else:\n            print(\"invalid\")\n          \n          \n\n        \n        \n        \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1595, "language": "C++", "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nint main(int argc, char* argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        char* current_arg = argv[i];\n        int val;\n        int chars_read = 0;\n\n        if (sscanf(current_arg, \"%d%n\", &val, &chars_read) != 1 || (size_t)chars_read != strlen(current_arg)) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (val < 0 || val > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool is_divisible = (val % 3 == 0);\n        bool has_three = (strchr(current_arg, '3') != NULL);\n\n        if (is_divisible && has_three) {\n            std::cout << \"dumb\\n\";\n        } else if (is_divisible) {\n            std::cout << \"idiot\\n\";\n        } else if (has_three) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}"}
{"id": 1596, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean includes3(int a)\n  {\n    while(a!=0)\n    {\n      if(a%10==3)\n      return true;\n      else\n      return includes3(a/10);\n    }\n    return false;\n  }\n  public static void main(String[] args){\n    int size=args.length;\n    int i=0;\n    while(i<size)\n    {\n      String data=args[i++];\n      Double tempnum=null;\n      int num;\n      try\n      {\n        tempnum=Double.parseDouble(data);\n        num=tempnum.intValue();\n      }  \n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(num<0 || num>1000)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean inc3=includes3(num);\n      if(inc3 && num%3==0)\n      System.out.println(\"dumb\");\n      else if(inc3)\n      System.out.println(\"stupid\");\n      else if(num%3==0)\n      System.out.println(\"idiot\");\n      else\n      System.out.println(\"smart\");\n      }\n      }\n    }\n    \n    \n  \n\n    \n"}
{"id": 1597, "language": "Java", "code": "import java.io.*;\nimport org.json.*;\n\npublic class RPSRobot {\n    public static void main(String[] args) {\n        // \u30b2\u30fc\u30e0\u306e\u7d50\u679c\u3092\u51e6\u7406\n        if (args.length != 1) {\n            System.out.println(\"Usage: java RPSRobot <input.json>\");\n            return;\n        }\n\n        String jsonFilePath = args[0];\n        JSONArray gameRecords = loadGameRecords(jsonFilePath);\n        int nextHand = computeNextHand(gameRecords);\n        System.out.println(nextHand);\n    }\n\n    private static JSONArray loadGameRecords(String filePath) {\n        StringBuilder jsonContent = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                jsonContent.append(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Failed to read file: \" + e.getMessage());\n        }\n        return new JSONArray(jsonContent.toString());\n    }\n\n    private static int computeNextHand(JSONArray records) {\n        // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u624b\u3092\u6c7a\u3081\u308b\n        int[] lastThree = {0, 1, 2}; // \u521d\u671f\u624b\u306e\u5c65\u6b74\n        int count = 0;\n        int n = records.length();\n\n        if (n > 0) {\n            int opponentLastHand = records.getJSONObject(n - 1).getInt(\"you\");\n            for (int i = 0; i < n; i++) {\n                JSONObject record = records.getJSONObject(i);\n                if (record.getInt(\"robot\") == lastThree[count % 3] && record.getInt(\"you\") == opponentLastHand) {\n                    count++;\n                }\n            }\n            // %3\u3067\u6b21\u306e\u624b\u3092\u6c7a\u3081\u308b\n            return count % 3;\n        }\n        return 0; // \u30c7\u30d5\u30a9\u30eb\u30c8\u3067rock\u3092\u8fd4\u3059\n    }\n}"}
{"id": 1598, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   \n  }\n  cout<<0<<\",\"<<1<<\",\"<<2<<endl;\n  return 0;\n}\n"}
{"id": 1599, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # \u3058\u3083\u3093\u3051\u3093\u5c65\u6b74\u306eJSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    with open(argv[0], 'r') as f:\n        history = json.load(f)\n\n    # Records\u3092\u30ad\u30fc: (r3, r2, r1, y), \u5024: [\u6b21\u306erobot\u624b\u306e\u9806\u5e8f(\u51fa\u73fe\u3054\u3068\u306b\u8a18\u9332)]\u3067\u8a18\u9332\n    param2moves = {}\n\n    # \u6700\u4f4e4\u624b\u4ee5\u964d\u3067\u30d1\u30bf\u30fc\u30f3\u6210\u7acb\n    for i in range(3, len(history)-1):\n        r1 = history[i-1]['robot']\n        r2 = history[i-2]['robot']\n        r3 = history[i-3]['robot']\n        y = history[i]['you']\n        key = (r3, r2, r1, y)\n        nxt = history[i]['robot']\n        if key not in param2moves:\n            param2moves[key] = []\n        param2moves[key].append(nxt)\n\n    # \u73fe\u5728\u30d1\u30bf\u30fc\u30f3\u7279\u5b9a: \u5c65\u6b74\u672b\u5c3e\u306e3\u624b+\u76f8\u624b\u6700\u65b0\u624b\n    if len(history) < 3:\n        # \u958b\u59cb\u76f4\u5f8c\u306e\u5834\u5408\u306f\u3001\u5fc5\u305a\u30b0\u30fc \u30c1\u30e7\u30ad \u30d1\u30fc \u306e\u9806 (\u30d2\u30f3\u30c8\u3088\u308a)\n        plays = [0, 1, 2]\n        next_move = plays[len(history) % 3]\n        print(str(next_move))\n        return\n\n    r3 = history[-3]['robot']\n    r2 = history[-2]['robot']\n    r1 = history[-1]['robot']\n    y = history[-1]['you']\n    key = (r3, r2, r1, y)\n    seq = param2moves.get(key, [])\n\n    # \u540c\u4e00\u6761\u4ef6\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u306a\u3089(\u521d\u56de\u7b49)\u3001\u30d2\u30f3\u30c8\u306e\u30b5\u30a4\u30af\u30eb (\u30b0\u30fc\u2192\u30c1\u30e7\u30ad\u2192\u30d1\u30fc)\n    if not seq:\n        # \u958b\u59cb\u76f4\u5f8c\u4ee5\u5916\u3067\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u901a\u5e38\u767a\u751f\u3057\u306b\u304f\u3044\n        # \u3068\u308a\u3042\u3048\u305a\u30b0\u30fc(0)\u3092\u51fa\u3059(\u96d1\u306a\u4eee\u5b9f\u88c5)\n        print(\"0\")\n        return\n\n    # \u30ed\u30dc\u30c3\u30c8\u304c\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u4f55\u56de\u884c\u52d5\u3057\u305f\u304b\n    times = len(seq)\n    # \u30ed\u30dc\u30c3\u30c8\u306f\u30b0\u30fc\u30fb\u30c1\u30e7\u30ad\u30fb\u30d1\u30fc...\u306e\u30b5\u30a4\u30af\u30eb\n    next_robot_move = (seq[-1] + 1) % 3\n\n    # \u3058\u3083\u3093\u3051\u3093\u306e\u624b\u306b\u52dd\u3064\u624b\n    win = {0:2, 1:0, 2:1}\n    my_move = win[next_robot_move]\n    print(str(my_move))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1600, "language": "C#", "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Collections.Generic;\n\nclass Program\n{\n\tstatic void Main(string[] args)\n\t{\n\t\tulong solution = new EightQueenProblem().Solve(args[0]);\n\t\tEightQueenProblem.PrintBoard(solution);\n\t}\n}\n\nclass EightQueenProblem\n{\n\t/// <summary>\n\t/// \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u3092\u8868\u73fe\u3059\u308b ulong \u306e\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u898f\u5b9a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u6a19\u6e96\u51fa\u529b\u3057\u307e\u3059\u3002\n\t/// </summary>\n\t/// <param name=\"queens\">\u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u3092\u8868\u73fe\u3059\u308b ulong \u306e\u5024</param>\n\tpublic static void PrintBoard(ulong queens)\n\t{\n\t\tfor (int r = 0; r < 8; r++)\n\t\t{\n\t\t\tfor (int c = 0; c < 8; c++)\n\t\t\t{\n\t\t\t\tConsole.Write((queens & 1) == 1 ? \"Q\" : \".\");\n\t\t\t\tqueens >>= 1;\n\t\t\t}\n\t\t\tConsole.WriteLine();\n\t\t}\n\t}\n\n\tconst int BOARD_SIZE = 8;\n\treadonly Dictionary<ulong, ulong> QueenControl = new Dictionary<ulong, ulong>();\n\tpublic EightQueenProblem()\n\t{\n\t\t// QueenControl \u306e\u4e8b\u524d\u8a08\u7b97____________________________________________\n\n\t\tvar files = new ulong[BOARD_SIZE]; // \u7e26\u306e\u5229\u304d\n\t\tvar ranks = new ulong[BOARD_SIZE]; // \u6a2a\u306e\u5229\u304d\n\t\t{\n\t\t\tulong file_mask = 0x0101010101010101;\n\t\t\tulong rank_mask = 0x00000000000000FF;\n\n\t\t\tfor (int i = 0; i < BOARD_SIZE; i++)\n\t\t\t{\n\t\t\t\tfiles[i] = file_mask;\n\t\t\t\tranks[i] = rank_mask;\n\n\t\t\t\tfile_mask <<= 1;\n\t\t\t\trank_mask <<= BOARD_SIZE;\n\t\t\t}\n\t\t}\n\n\t\tvar diags1 = new ulong[2 * BOARD_SIZE - 1]; // \u659c\u3081\u306e\u5229\u304d(\u5de6\u4e0b\u65b9\u5411)\n\t\tvar diags2 = new ulong[2 * BOARD_SIZE - 1]; // \u659c\u3081\u306e\u5229\u304d(\u53f3\u4e0b\u65b9\u5411)\n\t\t{\n\t\t\tulong diag_mask1 = 0x0000000000000001;\n\t\t\tulong diag_mask2 = 0x0000000000000080;\n\n\t\t\tfor (int i = 0; i < 2 * BOARD_SIZE - 1; i++)\n\t\t\t{\n\t\t\t\tdiags1[i] = diag_mask1;\n\t\t\t\tdiags2[i] = diag_mask2;\n\n\t\t\t\tdiag_mask1 <<= BOARD_SIZE;\n\t\t\t\tdiag_mask2 <<= BOARD_SIZE;\n\n\t\t\t\tif (i < BOARD_SIZE - 1)\n\t\t\t\t{\n\t\t\t\t\tdiag_mask1 |= 1ul << (i + 1);\n\t\t\t\t\tdiag_mask2 |= 1ul << (BOARD_SIZE - 2 - i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (int r = 0; r < BOARD_SIZE; r++)\n\t\t{\n\t\t\tfor (int c = 0; c < BOARD_SIZE; c++)\n\t\t\t{\n\t\t\t\tQueenControl[1ul << (r * BOARD_SIZE + c)] =\n\t\t\t\t\tranks[r] |\n\t\t\t\t\tfiles[c] |\n\t\t\t\t\tdiags1[r + c] |\n\t\t\t\t\tdiags2[r - c + BOARD_SIZE - 1];\n\t\t\t}\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// \u898f\u5b9a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u30018\u30af\u30a4\u30fc\u30f3\u554f\u984c\u306e\u89e3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\t/// </summary>\n\t/// <param name=\"path\">\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240</param>\n\t/// <returns>\u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u3092\u8868\u73fe\u3059\u308b ulong</returns>\n\tpublic ulong Solve(string path)\n\t{\n\t\tint k;             // \u521d\u671f\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30af\u30a4\u30fc\u30f3\u306e\u6570\n\t\tulong queens = 0;  // \u30af\u30a4\u30fc\u30f3\u306e\u3042\u308b\u30d3\u30c3\u30c8\u304c1\u3067\u3042\u308b64bit\u6574\u6570\n\t\tulong board = 0;   // \u30af\u30a4\u30fc\u30f3\u304c\u3042\u308b\u3001\u307e\u305f\u306f\u30af\u30a4\u30fc\u30f3\u304c\u5229\u3044\u3066\u3044\u308b\u30d3\u30c3\u30c8\u304c1\u3067\u3042\u308b64bit\u6574\u6570\n\n\t\t{ // \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u304b\u3089 k, queens, board \u3092\u8aad\u307f\u53d6\u308b\n\t\t\tstring text;\n\t\t\tusing (var f = new StreamReader(path))\n\t\t\t{\n\t\t\t\ttext = f.ReadToEnd();\n\t\t\t}\n\n\t\t\tvar lines = text.Split('\\n');\n\n\t\t\tk = int.Parse(lines[0]);\n\n\t\t\tvar positions = lines\n\t\t\t\t.Skip(1)\n\t\t\t\t.Take(k)\n\t\t\t\t.Select(s => s.Split(' ').Select(int.Parse).ToArray());\n\n\t\t\tforeach (var p in positions)\n\t\t\t{\n\t\t\t\tint r = p[0];\n\t\t\t\tint c = p[1];\n\t\t\t\tulong queen = 1ul << c + BOARD_SIZE * r;\n\n\t\t\t\tqueens |= queen;\n\t\t\t\tboard |= QueenControl[queen];\n\t\t\t}\n\t\t}\n\n\t\treturn Solve(k, queens, board);\n\t}\n\n\t/// <param name=\"n\">\u65e2\u306b\u7f6e\u304b\u308c\u305f\u30af\u30a4\u30fc\u30f3\u306e\u6570</param>\n\t/// <param name=\"queens\">\u65e2\u306b\u7f6e\u304b\u308c\u305f\u30af\u30a4\u30fc\u30f3\u306e\u4f4d\u7f6e</param>\n\t/// <param name=\"control\">\u30af\u30a4\u30fc\u30f3\u306e\u4f4d\u7f6e | \u30af\u30a4\u30fc\u30f3\u304c\u5229\u3044\u3066\u3044\u308b\u4f4d\u7f6e</param>\n\tulong Solve(int n, ulong queens, ulong control)\n\t{\n\t\tif (n >= BOARD_SIZE) return queens;\n\n\t\tulong candidates = ~control;\n\t\twhile (candidates != 0)\n\t\t{\n\t\t\tulong tempQueen = candidates & unchecked(0 - candidates);\n\t\t\tcandidates = candidates ^ tempQueen;\n\n\t\t\tulong solution = Solve(n + 1, queens | tempQueen, control | QueenControl[tempQueen]);\n\t\t\tif (solution != 0) return solution;\n\t\t}\n\n\t\treturn 0;  // \u5f15\u6570\u306e\u6761\u4ef6\u4e0b\u3067\u89e3\u306a\u3057\n\t}\n}\n\n"}
{"id": 1601, "language": "C++", "code": "#include <iostream>\n#include <stdlib.h>  // for strtol\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n//\tint present_number = strtol(argv[i], NULL, 10);\n//if(argv[i][0] != '0' || argv[i][0] != '1' || argv[i][0] != '2'  ||argv[i][0] != '3' ||argv[i][0] != '4' || argv[i][0] != '5'  || argv[i][0] != '0'  || argv[i][7] != '0' || argv[i][0] != '0'  || argv[i][0] != '0' \nif( argv[i][0] == '0'){\n\tcout<<\"smart\"<<endl;\n\tcontinue;\n}\nelse{\n\n\tint present_number = atoi(argv[i]);\n\tif(present_number == 0){\n\t\tcout<<\"invalid\"<<endl;\n\t\tcontinue;\n}\n//\tcout<<present_number<<endl;\n    int remainder;\n    if(present_number % 3 == 0){\n      int temp_present_no = present_number;\n      bool both = false;\n      while(temp_present_no > 0){\n        remainder = temp_present_no % 10;\n        temp_present_no /= 10;\n        if(remainder == 3){\n          both = true;\n          break;\n        }\n      }\n      if(both){\n        cout<<\"dumb\"<<endl;\n        continue;\n      }\n      else{\n        cout<<\"idiot\"<<endl;\n        continue;\n      }\n    }\n    else{\n      int temp_present_no = present_number;\n      bool contain_3 = false;\n      while(temp_present_no > 0){\n        remainder = temp_present_no % 10;\n        temp_present_no /= 10;\n        if(remainder == 3){\n          contain_3 = true;\n          break;\n        }\n      }\n      if(contain_3){\n        cout<<\"stupid\"<<endl;\n      }\n      else{\n        cout<<\"smart\"<<endl;\n      }\n    }\n    // cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n  }\n}\n  return 0;\n}\n"}
{"id": 1602, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n\n    public static void main(String[] args) {\n        final int N = 8;\n        Scanner sc = new Scanner(System.in);\n        \n        char[][] board = new char[N][N];\n        boolean[] rows_with_queens = new boolean[N];\n        boolean[] cols_taken = new boolean[N];\n        boolean[] diag1_taken = new boolean[2 * N - 1];\n        boolean[] diag2_taken = new boolean[2 * N - 1];\n        \n        for (char[] row : board) {\n            Arrays.fill(row, '.');\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            board[r][c] = 'Q';\n            rows_with_queens[r] = true;\n            cols_taken[c] = true;\n            diag1_taken[r - c + N - 1] = true;\n            diag2_taken[r + c] = true;\n        }\n        sc.close();\n        \n        // Let's solve the problem\n        solve(0, N, board, rows_with_queens, cols_taken, diag1_taken, diag2_taken);\n    }\n    \n    private static void solve(int r, int n, char[][] board, boolean[] prePlaced, boolean[] cols, boolean[] d1, boolean[] d2) {\n        if (r == n) {\n            for (int i = 0; i < n; i++) {\n                System.out.println(new String(board[i]));\n            }\n            System.exit(0);\n        }\n\n        if (prePlaced[r]) {\n            solve(r + 1, n, board, prePlaced, cols, d1, d2);\n            return;\n        }\n\n        for (int c = 0; c < n; c++) {\n            if (!cols[c] && !d1[r - c + n - 1] && !d2[r + c]) {\n                board[r][c] = 'Q';\n                cols[c] = true;\n                d1[r - c + n - 1] = true;\n                d2[r + c] = true;\n                \n                solve(r + 1, n, board, prePlaced, cols, d1, d2);\n                \n                // Backtrack\n                board[r][c] = '.';\n                cols[c] = false;\n                d1[r - c + n - 1] = false;\n                d2[r + c] = false;\n            }\n        }\n    }\n}"}
{"id": 1603, "language": "C", "code": "#include <stdio.h>\n#include <ctype.h>\n\nint isIncluded3(int number)\n{\n  while(number)\n  {\n    if (number % 10 == 3)\n      return 1;\n    else\n    {\n      number = number / 10;\n    }\n  }\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  \n  for (int i = 1; i < argc; i++) {\n    if (atoi(argv[i]) < 0 || atoi(argv[i]) > 1000)\n    {\n      printf(\"invalid\\n\");\n    }\n    else if (argv[i] != '0' && atoi(argv[i]) == 0)\n    {\n      printf(\"invalid\\n\");\n    }\n    else\n    {\n      if (atoi(argv[i]) % 3 == 0)\n      {\n        if (isIncluded3(atoi(argv[i])))\n        {\n          printf(\"dumb\\n\");\n        }\n        else\n        {\n          printf(\"idiot\\n\");\n        }\n      }\n      else if (isIncluded3(atoi(argv[i])))\n      {\n        printf(\"stupid\\n\");\n      }\n      else\n      {\n        printf(\"smart\\n\");\n      }\n    }\n\n  }\n\n  return 0;\n}\n"}
{"id": 1604, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for arg in argv:\n        if not arg.isdigit():\n            print(\"invalid\")\n            continue\n        n = int(arg)\n        if n < 0 or n > 1000:\n            print(\"invalid\")\n            continue\n        divisible = n % 3 == 0\n        contains = '3' in arg\n        if divisible and contains:\n            print(\"dumb\")\n        elif divisible:\n            print(\"idiot\")\n        elif contains:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1605, "language": "Ruby", "code": "#10\u9032\u6570\u5c02\u7528\u8a08\u7b97\ndef calc(a, b, op)\n  result = 0\n  case op\n    when \"+\"\n      a + b\n    when \"*\"\n      a * b\n  end\nend\n\ndef main(argv)\n  base = 9  #9\u9032\u6570\n\n  #\u7a7a\u767d\u3092\u53d6\u308a\u9664\u3044\u305f\u5f8c\u3001\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u3066\u62bd\u51fa\n  #\u7a7a\u767d\u9664\u53bb\u5f8c\u306b\u671f\u5f85\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u4f8b => 1255*123633\n  m = argv[0].gsub(\" \", \"\").match(/(?<a>[0-8]{1,300})(?<op>[\\+\\*])(?<b>[0-8]{1,300})/)\n\n  #\u5e95\u306b\u5408\u308f\u305b\u306610\u9032\u6570\u3078\u5909\u63db\u3001\u53ca\u3073\u6f14\u7b97\u5b50\u3092\u62bd\u51fa\n  a = m[:a].to_i(base)\n  op = m[:op]\n  b = m[:b].to_i(base)\n\n  puts calc(a, b, op).to_s(base) #\u8fd4\u308a\u5024\u304c10\u9032\u6570\u306a\u306e\u3067\u5909\u63db\u3057\u3066\u51fa\u529b\nend\n\n\nmain(ARGV) #\u5b9f\u884c\n"}
{"id": 1606, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      try {\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n        } else if (n % 3 == 0 && s.contains(\"3\")) {\n          System.out.println(\"dumb\");\n        } else if (n % 3 == 0) {\n          System.out.println(\"idiot\");\n        } else if (s.contains(\"3\")) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1607, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Helper function to check divisibility by 3\nbool isDivisibleByThree(int n) {\n    return (n % 3 == 0);\n}\n\n// Helper function to check if a number contains the digit 3\nbool containsDigitThree(int n) {\n    std::string s = std::to_string(n);\n    for (char digitChar : s) {\n        if (digitChar == '3') {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        long value_as_long;\n        char* parse_end;\n        value_as_long = std::strtol(argv[i], &parse_end, 10);\n\n        if (*parse_end != '\\0' || parse_end == argv[i]) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (value_as_long < 0 || value_as_long > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        int number = static_cast<int>(value_as_long); // Validated to be in int range\n\n        bool condition1 = isDivisibleByThree(number);\n        bool condition2 = containsDigitThree(number);\n\n        if (condition1 && condition2) {\n            std::cout << \"dumb\\n\";\n        } else if (condition1) {\n            std::cout << \"idiot\\n\";\n        } else if (condition2) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 1608, "language": "Python3", "code": "import sys\n\ndef apply_idiot_logic(str_val):\n    if not str_val.isdigit():\n        return \"invalid\"\n    \n    int_val = int(str_val)\n    \n    if not (0 <= int_val <= 1000):\n        return \"invalid\"\n\n    check_div_3 = (int_val % 3 == 0)\n    check_inc_3 = ('3' in str_val)\n\n    if check_div_3 and check_inc_3: return \"dumb\"\n    if check_div_3: return \"idiot\"\n    if check_inc_3: return \"stupid\"\n    return \"smart\"\n\ndef execute_main(input_args):\n    results = [apply_idiot_logic(arg) for arg in input_args]\n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    execute_main(sys.argv[1:])"}
{"id": 1609, "language": "C++", "code": "//#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   \n   int n=atoi(argv[i]);\n\n     if(n==1){\n       if(n==0) cout<<'0';\n       else cout<<'1';}\n    else if(n==1&&n==2) cout<<'1';\n    else cout<<'2';\n     \n\n  }\n  return 0;\n}\n"}
{"id": 1610, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  \n  int n,c,f,y;\n  \n  for (int i = 1; i < argc; i++) {\n    y=atoi(argv[i]);\n    \n    if(y>=0 && y<=1000)\n    { \n      f=0;\n      n=y;\n      while(n!=0)\n      {\n        c=n%10;\n        n=n/10;\n        if(c==3)\n          f=1;\n      }\n\n      if(y%3==0 && f==1)\n        printf(\"\\ndumb\");\n      else if(f==1)\n        printf(\"\\nstupid\");\n      else if(y%3==0)\n        printf(\"\\nidiot\");\n      else\n        printf(\"\\nsmart\");\n    }\n    else\n      printf(\"\\ninvalid\");\n    }\n  \n  return 0;\n}\n"}
{"id": 1611, "language": "Java", "code": "public class Bakalogic {\n  public static void main(String[] args) {\n    for(String param : args) {\n      System.out.println(checkLogic(param));\n    }\n  }\n\n  static String checkLogic(String s) {\n    int num;\n    try {\n      num = Integer.parseInt(s);\n    } catch(Exception e) {\n      return \"invalid\";\n    }\n    if(num < 0 || num > 1000) return \"invalid\";\n\n    boolean isMul3 = num % 3 == 0;\n    boolean includes3 = s.contains(\"3\");\n\n    if(isMul3 && includes3) return \"dumb\";\n    if(isMul3) return \"idiot\";\n    if(includes3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 1612, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    SUCCESS = 1\n    FAIL = 0\n \n    FREE = 1\n    NOT_FREE = 0\n    N = 8\n\n    class Queens:\n      def __init__(self):\n          self.pos = [-1 for _ in range(N)]\n          self.col = [FREE for _ in range(N)]\n          self.up = [FREE for _ in range(2*N-1)]\n          self.down = [FREE for _ in range(2*N-1)]\n          self.unchecked=[i for i in range(8)]\n \n      def print_queens(self):\n          for i in range(N):\n              for j in range(N):\n                  if self.pos[i] == j:\n                      print(\"Q\", end=\"\")\n                  else:\n                      print(\".\", end=\"\")\n              print()\n \n      def put_queen(self, a):\n          for b in range(N):\n              if self.col[b] == FREE and self.up[a+b] == FREE and self.down[a-b+(N-1)] == FREE:\n                  self.pos[a] = b\n                  self.col[b] = NOT_FREE\n                  self.up[a+b] = NOT_FREE\n                  self.down[a-b+(N-1)] = NOT_FREE\n\n                  l=[]\n                  for c in range(a+1,8):\n                      if self.pos[c]==-1:\n                          l.append(c)\n\n                  if len(l)==0:\n                      return SUCCESS\n                  else:\n                      y=l[0]\n                      if self.put_queen(y) == SUCCESS:\n                          return SUCCESS\n                      else:\n                          self.pos[a] = -1\n                          self.col[b] = FREE\n                          self.up[a+b] = FREE\n                          self.down[a-b+(N-1)] = FREE\n          return FAIL\n\n      def run(self):\n        if self.unchecked==[]:\n            self.print_queens()\n        else:\n            x=self.unchecked[0]\n            if self.put_queen(x) == SUCCESS:\n                self.print_queens()\n      \n      def add(self,r,c):\n        self.pos[r] = c\n        self.col[c] = NOT_FREE\n        self.up[c+r] = NOT_FREE\n        self.down[r-c+(N-1)] = NOT_FREE\n        self.unchecked.remove(r)\n\n    q = Queens()\n    k=int(input())\n    for i in range(k):\n      r,c=map(int,input().split())\n      q.add(r,c)\n    q.run()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1613, "language": "Java", "code": "import java.util.Random;\n\npublic class ClapTaiko {\n  public static void main(String[] args) {\n    int total = 0;\n    if (args.length > 0) {\n      total = Integer.parseInt(args[0]);\n    }\n\n    Random r = new Random();\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder seq = new StringBuilder();\n\n    for (int i = 0; i < total; i++) {\n      String res = r.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(res);\n      seq.append(res);\n\n      if (seq.length() >= pattern.length()) {\n        if (seq.substring(seq.length() - pattern.length()).equals(pattern)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1614, "language": "Ruby", "code": "def main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  argv.each_index do |i, index|\n    # v = argv[i]\n    # puts \"argv[#{i}]: #{v}\"\n    input_number = argv[i]\n    array = input_number.split('')\n    \n    if input_number.scan(/\\D/).empty?\n      input_number = input_number.to_i\n      if 0 <= input_number and input_number <= 1000\n        if (input_number % 3 == 0) and array.include?('3')\n          puts 'dumb'\n        elsif input_number % 3 == 0\n          puts 'idiot'\n        elsif array.include?('3')\n          puts 'stupid'\n        else\n          puts 'smart'\n        end\n      end\n    else\n      puts 'invalid'\n    end\n  end\nend\n\nmain(ARGV)\n"}
{"id": 1615, "language": "Python3", "code": "import sys\n\ndef three_idiots(n):\n    # Check range and if integer\n    if not n.isdigit():\n        return \"invalid\"\n    num = int(n)\n    if num > 1000:\n        return \"invalid\"\n    # Check conditions\n    mul3 = (num % 3 == 0)\n    has3 = ('3' in n)\n    if mul3 and has3:\n        return \"dumb\"\n    elif mul3:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for v in argv[:10]:\n        print(three_idiots(v))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1616, "language": "PHP", "code": "<?php\nfunction canPlace($board, $row, $col) {\n    for ($i = 0; $i < $row; $i++) {\n        $pos = $board[$i];\n        if ($pos === $col || abs($pos - $col) === abs($i - $row)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction solve($board, $fixedQueens, $row) {\n    if ($row === 8) {\n        return $board;\n    }\n    if (isset($fixedQueens[$row])) {\n        if (canPlace($board, $row, $fixedQueens[$row])) {\n            $board[$row] = $fixedQueens[$row];\n            return solve($board, $fixedQueens, $row + 1);\n        } else {\n            return null;\n        }\n    }\n    for ($col = 0; $col < 8; $col++) {\n        if (canPlace($board, $row, $col)) {\n            $board[$row] = $col;\n            $result = solve($board, $fixedQueens, $row + 1);\n            if ($result !== null) {\n                return $result;\n            }\n        }\n    }\n    return null;\n}\n\nfunction main() {\n    $k = intval(fgets(STDIN));\n    $fixedQueens = [];\n    for ($i = 0; $i < $k; $i++) {\n        list($r, $c) = explode(' ', trim(fgets(STDIN)));\n        $fixedQueens[intval($r)] = intval($c);\n    }\n    $board = array_fill(0, 8, -1);\n    $result = solve($board, $fixedQueens, 0);\n    foreach ($result as $col) {\n        $line = array_fill(0, 8, '.');\n        $line[$col] = 'Q';\n        echo implode('', $line) . \"\\n\";\n    }\n}\n\nmain();"}
{"id": 1617, "language": "Java", "code": "import java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\nimport com.google.gson.*;\n\npublic class SubstitutionCipherCLI {\n\n    public static void main(String[] args) throws IOException {\n        if (args.length != 3) {\n            System.err.println(\"Usage: <command> <input_file> <output_file>\");\n            return;\n        }\n\n        String command = args[0];\n        String inputFilePath = args[1];\n        String outputFilePath = args[2];\n\n        String text = Files.readString(Path.of(inputFilePath));\n        SubstitutionCipherCLI cliApp = new SubstitutionCipherCLI();\n\n        switch (command.toLowerCase()) {\n            case \"count\":\n                cliApp.countFrequencies(text, outputFilePath);\n                break;\n            case \"space\":\n                cliApp.findSpaceSubstitution(text, outputFilePath);\n                break;\n            case \"decrypt\":\n                cliApp.decryptText(text, outputFilePath);\n                break;\n            default:\n                System.err.println(\"Invalid command! Use 'count', 'space', or 'decrypt'.\");\n        }\n    }\n\n    private void countFrequencies(String text, String outputFilePath) throws IOException {\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isAlphabetic(c) || c == ' ') {\n                frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        Gson gson = new Gson();\n        String json = gson.toJson(frequencyMap);\n        Files.writeString(Path.of(outputFilePath), json);\n    }\n\n    private void findSpaceSubstitution(String text, String outputFilePath) throws IOException {\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c) || c == ' ') {\n                frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char spaceSubstitute = ' ';\n        int maxFrequency = 0;\n        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() != ' ' && entry.getValue() > maxFrequency) {\n                spaceSubstitute = entry.getKey();\n                maxFrequency = entry.getValue();\n            }\n        }\n\n        Map<String, String> result = new HashMap<>();\n        result.put(\"char\", String.valueOf(spaceSubstitute));\n\n        Gson gson = new Gson();\n        String json = gson.toJson(result);\n        Files.writeString(Path.of(outputFilePath), json);\n    }\n\n    private void decryptText(String text, String outputFilePath) throws IOException {\n        // Step 1: Identify the character replacing space (' ') - Reusing findSpaceSubstitution logic here.\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c) || c == ' ') {\n                frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char spaceSubstitute = ' ';\n        int maxFrequency = 0;\n        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() != ' ' && entry.getValue() > maxFrequency) {\n                spaceSubstitute = entry.getKey();\n                maxFrequency = entry.getValue();\n            }\n        }\n\n        // Step 2: Decrypt using frequency analysis (assuming 'e' is most common in decrypted form).\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isAlphabetic(c)) {\n                freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char mostFrequentInCipher = ' ';\n        maxFrequency = 0;\n        for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() > maxFrequency) {\n                mostFrequentInCipher = entry.getKey();\n                maxFrequency = entry.getValue();\n            }\n        }\n\n        // Calculate shift using the most common letter 'e'.\n        int shift = mostFrequentInCipher - 'e';\n\n        // Perform decryption.\n        StringBuilder decryptedText = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c) || Character.isUpperCase(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                int originalPos = (c - base - shift + 26) % 26;\n                decryptedText.append((char) (base + originalPos));\n            } else if (c == spaceSubstitute) {\n                decryptedText.append(' ');\n            } else {\n                decryptedText.append(c);\n            }\n        }\n\n        Files.writeString(Path.of(outputFilePath), decryptedText.toString());\n    }\n}"}
{"id": 1618, "language": "Python3", "code": "import sys\n\ndef arabic_to_roman(num):\n    # \u30ed\u30fc\u30de\u6570\u5b57\u3078\u306e\u5909\u63db\u30de\u30c3\u30d4\u30f3\u30b0\uff08\u5927\u304d\u3044\u9806\uff09\n    vals = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n    result = []\n    for val, sym in vals:\n        while num >= val:\n            result.append(sym)\n            num -= val\n    return \"\".join(result)\n\ndef main(argv):\n    n = int(argv[0])\n    print(arabic_to_roman(n))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1619, "language": "Python3", "code": "import sys\n\ndef determine_status(n):\n    if not n.isdigit() or int(n) < 0 or int(n) > 1000:\n        return \"invalid\"\n    num = int(n)\n    if num % 3 == 0 and '3' in n:\n        return \"dumb\"\n    elif num % 3 == 0:\n        return \"idiot\"\n    elif '3' in n:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    results = [determine_status(arg) for arg in argv]\n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1620, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  val = '3'\n  for i, v in enumerate(argv):\n    three = list(v)\n    if not v.isdigit():\n      print(\"invalid\")\n    elif int(v)<0 or int(v)>1000:\n      print(\"invalid\")\n    elif (int(v)%3==0) and (val in three):\n      print(\"dumb\")\n    elif int(v)%3==0:\n      print(\"idiot\")\n    elif val in three:\n      print(\"stupid\")\n    else:\n      print(\"smart\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1621, "language": "Java", "code": "package track;\n\npublic class App {\n\n  static void validateNumber(int number){\n\n      boolean isDevisableByThree = false;\n      boolean isIncludeThree = false;\n\n      if(number%3 == 0){\n        isDevisableByThree = true;\n      }\n\n      if(String.valueOf(number).contains(\"3\")){\n        isIncludeThree = true;\n      }\n\n      if(isDevisableByThree && isIncludeThree){\n        System.out.println(\"dumb\");\n      }\n\n      else if(isDevisableByThree){\n        System.out.println(\"idiot\");\n      }\n\n      else if(isIncludeThree){\n        System.out.println(\"stupid\");\n      }\n\n      else{\n        System.out.println(\"smart\");\n      }\n  }\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      String output = args[i];\n      boolean contains = false;\n      \n\t\t\ttry\n\t\t\t{\n          int number = Integer.parseInt(output);\n          validateNumber(number);\n\t\t\t}\n\t\t\tcatch (NumberFormatException nfe)\n\t\t\t{     \n          System.out.println(\"invalid\");\n\t\t  }  \n\t\t}\n\t}\n\n\n}\n"}
{"id": 1622, "language": "Java", "code": "package track;\n\npublic class MainApp {\n    public static void main(String[] args) {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n        for (String arg : args) {\n            int number;\n            try {\n                number = Integer.parseInt(arg);\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    boolean divisibleBy3 = (number % 3 == 0);\n                    boolean includes3 = String.valueOf(number).contains(\"3\");\n                    \n                    if (divisibleBy3 && includes3) {\n                        System.out.println(\"dumb\");\n                    } else if (divisibleBy3) {\n                        System.out.println(\"idiot\");\n                    } else if (includes3) {\n                        System.out.println(\"stupid\");\n                    } else {\n                        System.out.println(\"smart\");\n                    }\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1623, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\nimport org.json.*;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 1) return;\n\n    String filePath = args[0];\n    List<Integer> robotMoves = new ArrayList<>();\n    List<Integer> youMoves = new ArrayList<>();\n    try {\n      String data = Files.readString(Paths.get(filePath));\n      JSONArray arr = new JSONArray(data);\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject entry = arr.getJSONObject(i);\n        robotMoves.add(entry.getInt(\"robot\"));\n        youMoves.add(entry.getInt(\"you\"));\n      }\n    } catch (Exception e) {\n      System.out.println(\"0\");\n      return;\n    }\n\n    Map<String, List<Integer>> patternMap = new HashMap<>();\n    int len = robotMoves.size();\n    if (len < 3) {\n      System.out.println(\"0\");\n      return;\n    }\n    for (int i=3; i<len; i++) {\n      String key = robotMoves.get(i-3) + \"_\" + robotMoves.get(i-2) + \"_\" + robotMoves.get(i-1) + \"_\" + youMoves.get(i-1);\n      int val = robotMoves.get(i);\n      patternMap.computeIfAbsent(key, x -> new ArrayList<>()).add(val);\n    }\n    String nowKey = robotMoves.get(len-3) + \"_\" + robotMoves.get(len-2) + \"_\" + robotMoves.get(len-1) + \"_\" + youMoves.get(len-1);\n    List<Integer> moves = patternMap.get(nowKey);\n\n    int robNext;\n    if (moves == null || moves.size() == 0) {\n      robNext = 0;\n    } else {\n      int last = moves.get(moves.size()-1);\n      robNext = (last + 1)%3;\n    }\n    int win = (robNext + 2)%3;\n    System.out.println(win);\n  }\n}"}
{"id": 1624, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\n\nbool invalid(int);\nbool idiot(int);\nbool stupid(int);\nbool smart(int);\n\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}else{\n\nprintf(\"invalid\\n\");\n\n}\n}\n\n\n\n}\nbool invalid(int n)\n{\t\n\t\n\tif(!stupid(n) && !idiot(n) && !smart(n))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\nbool idiot(int n)\n{\n\tif(n % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\n\nbool stupid(int n)\n{\n\tint t = n,t1;\n\twhile(t!=0)\n\t{\n\tt1 = t%10;\n\t\t\n\t\tif(t1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tt/=10;\n\t}\n\treturn false;\n}\n\nbool smart(int n)\n{\n\tif(!idiot(n) && !stupid(n))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n"}
{"id": 1625, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n// Solution 4: Intermediate/Expert level - Encapsulating pattern checking logic in a struct.\n// This approach uses a struct to manage the state of the pattern matching,\n// providing a more organized and modular design.\n\n// Constants for sounds and messages\nconst char *DRUM_DO_S4 = \"\u30c9\";\nconst char *DRUM_KA_S4 = \"\u30ab\";\nconst char *DRUM_FINISH_SOUND = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\nconst char *DRUM_END_MSG = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\n// The target sequence definition\nconst char *PATTERN_TO_MATCH = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"; // 8 characters\nconst int PATTERN_BYTE_SIZE = 24;               // 8 chars * 3 bytes/char for UTF-8\n\n// Structure to hold the state for pattern checking\ntypedef struct {\n  char buffer[PATTERN_BYTE_SIZE + 1]; // Buffer for the sliding window + null terminator\n  int current_buffer_length;          // Current number of bytes in the buffer\n  const char *target_pattern;         // Pointer to the target pattern string\n  int target_pattern_length;          // Byte length of the target pattern\n} DrumPatternChecker;\n\n// Initializes the DrumPatternChecker struct\nvoid initialize_checker(DrumPatternChecker *checker_ptr) {\n  memset(checker_ptr->buffer, 0, sizeof(checker_ptr->buffer)); // Clear the buffer\n  checker_ptr->current_buffer_length = 0;\n  checker_ptr->target_pattern = PATTERN_TO_MATCH;\n  checker_ptr->target_pattern_length = PATTERN_BYTE_SIZE;\n}\n\n// Adds a new note to the checker's buffer and checks for a pattern match.\n// Returns 1 if the pattern is matched, 0 otherwise.\nint add_note_and_check(DrumPatternChecker *checker_ptr, const char *new_note) {\n  int note_len_bytes = strlen(new_note);\n\n  // If adding the new note would exceed the target pattern length,\n  // shift the buffer to remove the oldest note (which is 3 bytes).\n  if (checker_ptr->current_buffer_length + note_len_bytes > checker_ptr->target_pattern_length) {\n    memmove(checker_ptr->buffer, checker_ptr->buffer + 3,\n            checker_ptr->current_buffer_length - 3 + 1); // +1 for null terminator\n    checker_ptr->current_buffer_length -= 3;\n  }\n\n  // Append the new note to the end of the buffer.\n  strcpy(checker_ptr->buffer + checker_ptr->current_buffer_length, new_note);\n  checker_ptr->current_buffer_length += note_len_bytes;\n\n  // Check if the current buffer content matches the target pattern\n  // and has reached the full pattern length.\n  if (checker_ptr->current_buffer_length == checker_ptr->target_pattern_length &&\n      strcmp(checker_ptr->buffer, checker_ptr->target_pattern) == 0) {\n    return 1; // Pattern matched.\n  }\n  return 0; // No match.\n}\n\nint main(int argc, char *argv[]) {\n  srand(time(NULL));\n\n  if (argc != 2) {\n    fprintf(stderr, \"Usage: %s <count_limit>\\n\", argv[0]);\n    return 1;\n  }\n\n  int count_limit = atoi(argv[1]);\n  if (count_limit < 0 || count_limit > 10000) {\n    fprintf(stderr, \"Count limit must be between 0 and 10000.\\n\");\n    return 1;\n  }\n\n  DrumPatternChecker my_drum_checker;\n  initialize_checker(&my_drum_checker);\n\n  for (int i = 0; i < count_limit; ++i) {\n    const char *current_drum_sound;\n    if (rand() % 2 == 0) {\n      current_drum_sound = DRUM_DO_S4;\n    } else {\n      current_drum_sound = DRUM_KA_S4;\n    }\n\n    printf(\"%s\\n\", current_drum_sound);\n\n    // Add the note and check if the pattern is found.\n    if (add_note_and_check(&my_drum_checker, current_drum_sound)) {\n      printf(\"%s\\n\", DRUM_FINISH_SOUND);\n      return 0; // Pattern found.\n    }\n  }\n\n  printf(\"%s\\n\", DRUM_END_MSG); // Loop finished, pattern not found.\n  return 0;\n}"}
{"id": 1626, "language": "Java", "code": "package utility;\n\npublic class IdiotsChecker {\n    public static void main(String[] args) {\n        for (String element : args) {\n            try {\n                int number = Integer.valueOf(element);\n                boolean divisible = number % 3 == 0;\n                boolean includesThree = String.valueOf(number).contains(\"3\");\n\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (divisible && includesThree) {\n                    System.out.println(\"dumb\");\n                } else if (divisible) {\n                    System.out.println(\"idiot\");\n                } else if (includesThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException nf) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1627, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// This function checks if a number contains the digit '3'.\nint numberContainsThree(int number) {\n    char number_as_string[5]; // Max value 1000 needs 4 digits + null.\n    sprintf(number_as_string, \"%d\", number);\n    \n    if (strchr(number_as_string, '3')) {\n        return 1; // True\n    } else {\n        return 0; // False\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // Loop through each command line argument.\n    for (int i = 1; i < argc; i++) {\n        char *current_argument = argv[i];\n        char *parse_end;\n        long value;\n\n        value = strtol(current_argument, &parse_end, 10);\n\n        // --- Input Validation ---\n        if (*parse_end != '\\0' || current_argument == parse_end || value < 0 || value > 1000) {\n            printf(\"invalid\\n\");\n            continue; // Move to the next argument\n        }\n        \n        // --- Algorithm Logic ---\n        int is_divisible_by_3 = (value % 3 == 0);\n        int has_digit_three = numberContainsThree((int)value);\n\n        if (is_divisible_by_3 && has_digit_three) {\n            printf(\"dumb\\n\");\n        } else if (is_divisible_by_3) {\n            printf(\"idiot\\n\");\n        } else if (has_digit_three) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 1628, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.AbstractMap.SimpleEntry;\nimport java.util.Arrays;\n\npublic class MapperSolution {\n\n  private static SimpleEntry<Integer, String> parseAndCategorize(String arg) {\n    Scanner sc = new Scanner(arg);\n    try {\n      if (sc.hasNextInt()) {\n        int num = sc.nextInt();\n        sc.close();\n        return new SimpleEntry<>(num, determineCategory(num));\n      } else {\n        sc.close();\n        return new SimpleEntry<>(-1, \"invalid\"); // Sentinel for invalid\n      }\n    } finally {\n        sc.close(); // Redundant but safe\n    }\n  }\n\n  private static String determineCategory(int num) {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean divisible = (num % 3 == 0);\n    boolean includesDigit = String.valueOf(num).contains(\"3\");\n\n    if (divisible && includesDigit) return \"dumb\";\n    if (divisible) return \"idiot\";\n    if (includesDigit) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    Arrays.stream(args)\n          .map(MapperSolution::parseAndCategorize)\n          .map(SimpleEntry::getValue)\n          .forEach(System.out::println);\n  }\n}"}
{"id": 1629, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString result = \"NA\";\n\t\t\tString regex = \"\\\\d+\";\n\t\t\tboolean flag=false;\n\t\t\tif (args[i].matches(regex)) {\n\t\t\t\tif (Integer.parseInt(args[i]) >= 0 && Integer.parseInt(args[i]) <= 1000) {\n\t\t\t\t\tif (Integer.parseInt(args[i]) % 3 == 0) {\n\t\t\t\t\t\tresult = \"idiot\";\n\t\t\t\t\t\tflag=true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t if (args[i].contains(\"3\")) {\n\t\t\t\t\t\t\tresult = \"stupid\";\n\t\t\t\t\t\t\tif (Integer.parseInt(args[i]) % 3 == 0 && args[i].toString().contains(\"3\")) {\n\t\t\t\t\t\t\t\tresult = \"dumb\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t else if(!flag){\n\t\t\t\t\t\tresult = \"smart\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = \"invalid\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = \"invalid\";\n\t\t\t}\n\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}\n"}
{"id": 1630, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    sequence_to_match = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    output = []\n    max_attempts = int(argv[0])\n\n    for _ in range(max_attempts):\n        char = random.choice([\"\u30c9\", \"\u30ab\"])\n        output.append(char)\n        print(char)\n        \n        if ''.join(output[-len(sequence_to_match):]) == sequence_to_match:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1631, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    int total;\n    if (args.length == 0) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    try {\n      total = Integer.parseInt(args[0]);\n      if (total < 1) {\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        return;\n      }\n    } catch (Exception ex) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    String last = \"\";\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    Random rnd = new Random();\n\n    for (int i = 0; i < total; i++) {\n      String s = rnd.nextBoolean() ? \"\u30ab\" : \"\u30c9\";\n      System.out.println(s);\n      last += s;\n      if (last.length() > 8) last = last.substring(last.length() - 8);\n      if (last.equals(pattern)) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1632, "language": "C++", "code": "#include <iostream>\n#include<ctype.h>\nusing namespace std;\nint check3(int n)\n{\n  int a=n;\n  while(a!=0)\n  {\n    n=a%10;\n    a=a/10;\n    if(n==3)\n    return 1;\n\n  }\n  return 0;\n}\nint check(char ar[])\n{\nfor(int i=0;ar[i]!='\\0';i++)\n{\n  if(!isdigit(ar[i]))\n  return 0;\n}\nreturn 1;\n}\nint main(int argc, char *argv[])\n{\n  int a=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    a=atoi(argv[i]);\n    if(check(argv[i]))\n    {\n    if((a%3==0)&&(check3(a)))\n    cout<<\"dumb\"<<endl;\n    else if(a%3==0)\n    cout<<\"idiot\"<<endl;\n    else if(check3(a))\n    cout<<\"stupid\"<<endl;\n    else\n    cout<<\"smart\"<<endl;\n  }\n  else\n  cout<<\"invalid\"<<endl;\n    }\n  return 0;\n}\n"}
{"id": 1633, "language": "Python", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__== '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1634, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n// Reads the entire content of a file into a dynamically allocated buffer.\n// Returns NULL on error, otherwise a pointer to the buffer.\n// The caller is responsible for freeing the returned buffer.\nchar* readFile(const char* filePath, long* fileSize) {\n    FILE* file = fopen(filePath, \"rb\");\n    if (!file) {\n        perror(\"Error opening input file\");\n        return NULL;\n    }\n\n    fseek(file, 0, SEEK_END);\n    *fileSize = ftell(file);\n    fseek(file, 0, SEEK_SET);\n\n    char* buffer = (char*)malloc(*fileSize + 1);\n    if (!buffer) {\n        perror(\"Memory allocation failed\");\n        fclose(file);\n        return NULL;\n    }\n\n    size_t bytesRead = fread(buffer, 1, *fileSize, file);\n    if (bytesRead != *fileSize) {\n        perror(\"Error reading file\");\n        free(buffer);\n        fclose(file);\n        return NULL;\n    }\n    buffer[*fileSize] = '\\0'; // Null-terminate for string operations if needed\n\n    fclose(file);\n    return buffer;\n}\n\n// Subcommand: count character frequencies\nvoid handleCount(const char* inputFilePath, const char* outputFilePath) {\n    FILE* inputFile = fopen(inputFilePath, \"r\");\n    if (!inputFile) {\n        perror(\"Error opening input file for counting\");\n        return;\n    }\n\n    int characterCounts[256] = {0}; // Array to store counts for all ASCII characters\n\n    int ch;\n    while ((ch = fgetc(inputFile)) != EOF) {\n        if (isalpha(ch) || ch == ' ') { // Count only alphabets and space\n            characterCounts[ch]++;\n        }\n    }\n    fclose(inputFile);\n\n    FILE* outputFile = fopen(outputFilePath, \"w\");\n    if (!outputFile) {\n        perror(\"Error opening output file for counting\");\n        return;\n    }\n\n    fprintf(outputFile, \"{\\n\");\n    int firstEntry = 1; // Flag to handle comma placement in JSON\n\n    for (int i = 0; i < 256; i++) {\n        if (characterCounts[i] > 0) {\n            if (isalpha(i) || i == ' ') { // Only output counts for alphabets and space\n                if (!firstEntry) {\n                    fprintf(outputFile, \",\\n\");\n                }\n                fprintf(outputFile, \"  \\\"%c\\\": %d\", (char)i, characterCounts[i]);\n                firstEntry = 0;\n            }\n        }\n    }\n    fprintf(outputFile, \"\\n}\\n\");\n    fclose(outputFile);\n}\n\n// Subcommand: find the character that replaced space\nvoid handleSpace(const char* inputFilePath, const char* outputFilePath) {\n    long dataSize;\n    char* fileData = readFile(inputFilePath, &dataSize);\n    if (!fileData) {\n        return;\n    }\n\n    char bestSpaceReplacementChar = ' '; // Character determined to replace space\n    double minimumAvgDiff = 1e9;        // Smallest difference from 4.5 average word length\n\n    // Iterate through all lowercase alphabets as potential candidates for the character that replaced space\n    for (char candidateCharacter = 'a'; candidateCharacter <= 'z'; candidateCharacter++) {\n        double totalWordLength = 0;\n        int wordCounter = 0;\n        int currentWordLength = 0;\n        int inWordFlag = 0; // Flag to track if currently inside a word\n\n        char upperCandidateCharacter = toupper(candidateCharacter);\n\n        for (long i = 0; i < dataSize; i++) {\n            char currentChar = fileData[i];\n            int isWordBoundary = 0;\n\n            // A character is a word boundary if it's:\n            // 1. The candidate character (or its uppercase equivalent, as case pairs are swapped).\n            // 2. An actual space character (which would have been an original alphabet).\n            // 3. Any other non-alphabetic character (punctuation etc., which are untouched).\n            if (currentChar == candidateCharacter || currentChar == upperCandidateCharacter || currentChar == ' ' || !isalpha(currentChar)) {\n                isWordBoundary = 1;\n            }\n            \n            if (isWordBoundary) {\n                if (inWordFlag) { // If a word just ended\n                    wordCounter++;\n                    totalWordLength += currentWordLength;\n                    currentWordLength = 0;\n                    inWordFlag = 0;\n                }\n            } else if (isalpha(currentChar)) { // If it's an alphabet character\n                currentWordLength++;\n                inWordFlag = 1;\n            }\n        }\n\n        // Handle any trailing word after the loop finishes\n        if (inWordFlag) {\n            wordCounter++;\n            totalWordLength += currentWordLength;\n        }\n\n        double calculatedAvgWordLength = (wordCounter > 0) ? totalWordLength / wordCounter : 0.0;\n        double currentDifference = fabs(calculatedAvgWordLength - 4.5);\n\n        // Update best candidate if this one is closer to 4.5\n        if (currentDifference < minimumAvgDiff) {\n            minimumAvgDiff = currentDifference;\n            bestSpaceReplacementChar = candidateCharacter;\n        }\n    }\n\n    free(fileData); // Free the allocated memory\n\n    FILE* outputFile = fopen(outputFilePath, \"w\");\n    if (!outputFile) {\n        perror(\"Error opening output file for space detection\");\n        return;\n    }\n\n    fprintf(outputFile, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", bestSpaceReplacementChar);\n    fclose(outputFile);\n}\n\nint main(int argc, char *argv[]) {\n    // Check for exactly 4 arguments (program name + subcommand + input path + output path)\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s <subcommand> <input_file> <output_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    const char* subcommand = argv[1];\n    const char* inputFilePath = argv[2];\n    const char* outputFilePath = argv[3];\n\n    // Determine which subcommand to execute\n    if (strcmp(subcommand, \"count\") == 0) {\n        handleCount(inputFilePath, outputFilePath);\n    } else if (strcmp(subcommand, \"space\") == 0) {\n        handleSpace(inputFilePath, outputFilePath);\n    } else {\n        fprintf(stderr, \"Unknown subcommand: %s\\n\", subcommand);\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 1635, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\n# Helper function to read content from a file\ndef read_content_from_file(file_path):\n    with open(file_path, 'r', encoding='utf-8') as f:\n        return f.read()\n\n# Helper function to write content to a file\ndef write_content_to_file(file_path, content):\n    with open(file_path, 'w', encoding='utf-8') as f:\n        f.write(content)\n\n# Calculates the average word length in a given text\ndef calculate_word_average_length(text_data):\n    words = text_data.split(' ')\n    total_len_chars = 0\n    num_words = 0\n    for word_item in words:\n        # Consider only alphabetic characters for word length\n        cleaned_word = ''.join(c for c in word_item if 'a' <= c.lower() <= 'z')\n        if cleaned_word:\n            total_len_chars += len(cleaned_word)\n            num_words += 1\n    if num_words == 0:\n        return 0.0 # Return 0 to avoid division by zero\n    return total_len_chars / num_words\n\n# Performs a simulated swap of a character with space for analysis\ndef perform_trial_unswap(text_string, char_to_swap_with_space):\n    result_chars = []\n    for current_char in text_string:\n        if current_char == char_to_swap_with_space:\n            result_chars.append(' ')\n        elif current_char == ' ':\n            result_chars.append(char_to_swap_with_space)\n        else:\n            result_chars.append(current_char)\n    return \"\".join(result_chars)\n\n# Determines which character in the encrypted text replaced the original space\ndef find_space_replacement_char(encrypted_text_content):\n    min_length_diff = float('inf')\n    found_space_char = ''\n    \n    # Iterate through all possible lowercase alphabet characters\n    for i in range(26):\n        candidate_char_for_space = chr(ord('a') + i)\n        \n        # Apply the trial un-swap to see if it yields a realistic average word length\n        text_after_hypothetical_unswap = perform_trial_unswap(encrypted_text_content, candidate_char_for_space)\n        \n        avg_word_len = calculate_word_average_length(text_after_hypothetical_unswap)\n        current_diff = abs(avg_word_len - 4.5) # Compare to typical English average word length\n        \n        if current_diff < min_length_diff:\n            min_length_diff = current_diff\n            found_space_char = candidate_char_for_space\n            \n    return found_space_char\n\n# --- Subcommand Handlers ---\n\n# Handles the 'count' subcommand\ndef handle_count_command(input_file_path, output_file_path):\n    text_data = read_content_from_file(input_file_path)\n    char_occurrences = Counter()\n    for char in text_data:\n        if 'a' <= char <= 'z' or 'A' <= char <= 'Z' or char == ' ':\n            char_occurrences[char] += 1\n    \n    # Sort the dictionary for consistent output format\n    sorted_occurrences = dict(sorted(char_occurrences.items()))\n    \n    write_content_to_file(output_file_path, json.dumps(sorted_occurrences, indent=2))\n\n# Handles the 'space' subcommand\ndef handle_space_command(input_file_path, output_file_path):\n    encrypted_text_data = read_content_from_file(input_file_path)\n    space_replacement = find_space_replacement_char(encrypted_text_data)\n    \n    result_json = {\"char\": space_replacement}\n    write_content_to_file(output_file_path, json.dumps(result_json, indent=2))\n\n# Handles the 'decrypt' subcommand\ndef handle_decrypt_command(input_file_path, output_file_path):\n    encrypted_content = read_content_from_file(input_file_path)\n    \n    # Step 1: Identify the character that was swapped with space\n    actual_space_char_in_encrypted = find_space_replacement_char(encrypted_content)\n    \n    # Step 2: Reverse the space-character swap\n    text_after_unswapping = perform_trial_unswap(encrypted_content, actual_space_char_in_encrypted)\n\n    # Step 3: Determine the Caesar cipher shift amount\n    alphabet_frequencies = Counter()\n    for char_val in text_after_unswapping:\n        if 'a' <= char_val <= 'z':\n            alphabet_frequencies[char_val] += 1\n        elif 'A' <= char_val <= 'Z':\n            alphabet_frequencies[char_val.lower()] += 1\n    \n    # English 'e' is the most frequent letter. Assume the most frequent letter\n    # in the unswapped text corresponds to the shifted 'e'.\n    most_common_letter_unswapped = 'e' \n    if alphabet_frequencies:\n        most_common_letter_unswapped = alphabet_frequencies.most_common(1)[0][0]\n    \n    # Calculate the shift: how much 'e' was shifted to become most_common_letter_unswapped\n    shift_amount = (ord(most_common_letter_unswapped) - ord('e')) % 26\n    \n    # Step 4: Apply the reverse Caesar shift to decrypt the text\n    final_decrypted_chars = []\n    for char_to_decrypt in text_after_unswapping:\n        if 'a' <= char_to_decrypt <= 'z':\n            decrypted_ord = (ord(char_to_decrypt) - ord('a') - shift_amount + 26) % 26 + ord('a')\n            final_decrypted_chars.append(chr(decrypted_ord))\n        elif 'A' <= char_to_decrypt <= 'Z':\n            decrypted_ord = (ord(char_to_decrypt) - ord('A') - shift_amount + 26) % 26 + ord('A')\n            final_decrypted_chars.append(chr(decrypted_ord))\n        else:\n            final_decrypted_chars.append(char_to_decrypt)\n            \n    write_content_to_file(output_file_path, \"\".join(final_decrypted_chars))\n\n\n# Main entry point for the CLI application\ndef main(argv):\n    if len(argv) < 3:\n        sys.stderr.write(\"Usage: python app.py <command> <input_file> <output_file>\\n\")\n        sys.exit(1)\n\n    command_name = argv[0]\n    input_file_path = argv[1]\n    output_file_path = argv[2]\n\n    if command_name == \"count\":\n        handle_count_command(input_file_path, output_file_path)\n    elif command_name == \"space\":\n        handle_space_command(input_file_path, output_file_path)\n    elif command_name == \"decrypt\":\n        handle_decrypt_command(input_file_path, output_file_path)\n    else:\n        sys.stderr.write(f\"Unknown command: {command_name}\\n\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1636, "language": "Python3", "code": "def is_safe(board, row, col):\n    for i in range(row):\n        if board[i] == col or \\\n                board[i] - i == col - row or \\\n                board[i] + i == col + row:\n            return False\n    return True\n\ndef solve_n_queens(board, row):\n    if row == 8:\n        return True\n    for col in range(8):\n        if is_safe(board, row, col):\n            board[row] = col\n            if solve_n_queens(board, row + 1):\n                return True\n            board[row] = -1  # Backtrack\n    return False\n\ndef main():\n    import sys\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    queens = [tuple(map(int, line.split())) for line in input_data[1:k + 1]]\n\n    board = [-1] * 8\n    for r, c in queens:\n        board[r] = c\n\n    if solve_n_queens(board, k):\n        for r in range(8):\n            row_output = ['.'] * 8\n            if board[r] != -1:\n                row_output[board[r]] = 'Q'\n            print(''.join(row_output))\n\nif __name__ == '__main__':\n    main()"}
{"id": 1637, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for arg in argv:\n        res = \"\"\n        if not arg.isdigit() or not (0 <= int(arg) <= 1000):\n            res = \"invalid\\n\"\n        else:\n            n = int(arg)\n            d = n % 3 == 0\n            c = '3' in arg\n            if d and c:\n                res = \"dumb\\n\"\n            elif d:\n                res = \"idiot\\n\"\n            elif c:\n                res = \"stupid\\n\"\n            else:\n                res = \"smart\\n\"\n        sys.stdout.write(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1638, "language": "Python3", "code": "import sys\n\ndef main(arguments):\n    for arg in arguments:\n        is_valid = arg.isdigit() and 0 <= int(arg) <= 1000\n        \n        if not is_valid:\n            print(\"invalid\")\n        else:\n            num = int(arg)\n            \n            by_3 = num % 3 == 0\n            has_3 = '3' in arg\n            \n            if by_3 and has_3: print(\"dumb\")\n            elif by_3: print(\"idiot\")\n            elif has_3: print(\"stupid\")\n            else: print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1639, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfor _, arg := range os.Args[1:] {\n\t\tnum, err := strconv.Atoi(arg)\n\t\tcontains3 := strings.Contains(arg, \"3\")\n\t\tif err != nil || num < 0 || num > 1000 {\n\t\t\tfmt.Println(\"invalid\")\n\t\t\tcontinue\n\t\t}\n\t\tdivisible3 := num%3 == 0\n\n\t\tif divisible3 && contains3 {\n\t\t\tfmt.Println(\"dumb\")\n\t\t} else if divisible3 {\n\t\t\tfmt.Println(\"idiot\")\n\t\t} else if contains3 {\n\t\t\tfmt.Println(\"stupid\")\n\t\t} else {\n\t\t\tfmt.Println(\"smart\")\n\t\t}\n\t}\n}"}
{"id": 1640, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n#define N 8\n\nbool col[N], d1[2*N], d2[2*N];\nvector<string> m(N, string(N, '.'));\n\nbool solve(int r) {\n  if (r == N) return true;\n  for(int c = 0; c < N; c++) {\n    if (m[r][c] == 'Q') {\n      if (!solve(r+1)) return false;\n      else return true;\n    }\n    if (col[c] || d1[r+c] || d2[r-c+N]) continue;\n    m[r][c] = 'Q';\n    col[c] = d1[r+c] = d2[r-c+N] = 1;\n    if (solve(r+1)) return true;\n    m[r][c] = '.';\n    col[c] = d1[r+c] = d2[r-c+N] = 0;\n  }\n  return false;\n}\n\nint main() {\n  int k;\n  cin >> k;\n  for (int i=0; i<k; i++) {\n    int a, b; cin >> a >> b;\n    m[a][b] = 'Q';\n    col[b] = d1[a+b] = d2[a-b+N] = 1;\n  }\n  solve(0);\n  for(int i=0;i<N;i++) cout << m[i] << endl;\n  return 0;\n}"}
{"id": 1641, "language": "Python3", "code": "import sys\nimport operator\n\ndef convert_base9_to_decimal(number_str_b9):\n    # Convert base-9 string to base-10 integer using built-in int()\n    return int(number_str_b9, 9)\n\ndef convert_decimal_to_base9(decimal_val_b10):\n    # Convert base-10 integer to base-9 string.\n    if decimal_val_b10 == 0:\n        return \"0\"\n    \n    result_digits = []\n    current_val = decimal_val_b10\n    while current_val > 0:\n        result_digits.append(str(current_val % 9))\n        current_val //= 9\n    return \"\".join(reversed(result_digits))\n\ndef solve_challenge(input_args):\n    expression_arg = input_args[0]\n    parts = expression_arg.split(\" \")\n    \n    operand1_str = parts[0]\n    operator_char = parts[1]\n    operand2_str = parts[2]\n\n    dec1 = convert_base9_to_decimal(operand1_str)\n    dec2 = convert_base9_to_decimal(operand2_str)\n\n    op_function = {\n        '+': operator.add,\n        '*': operator.mul\n    }[operator_char]\n    \n    result_b10 = op_function(dec1, dec2)\n    \n    print(convert_decimal_to_base9(result_b10))\n\nif __name__ == '__main__':\n    solve_challenge(sys.argv[1:])\n"}
{"id": 1642, "language": "Python3", "code": "import sys\n\n\ndef to_decimal(val):\n    \"\"\"9\u9032\u6570\u309210\u9032\u6570\u306b\u5909\u63db\"\"\"\n    dec = 0\n    for idx, v in enumerate(reversed(val)):\n        dec += (int(v) * (9 ** idx))\n\n    return dec\n\ndef to_nonary(val):\n    \"\"\"10\u9032\u6570\u30929\u9032\u6570\u306b\u5909\u63db\"\"\"\n    nonary = ''\n    idx = 1\n  \n    while val != 0:\n        base = 9\n        mod = val % base\n        val = (val - mod) // base\n\n        nonary = '{}{}'.format(int(mod // (base // 9)), nonary)\n        idx += 1\n\n    return nonary\n\ndef main(argv):\n    arg0, op, arg1 = argv[0].split()\n    v1 = to_decimal(arg0)\n    v2 = to_decimal(arg1)\n    result = eval('{} {} {}'.format(v1, op, v2))\n\n    ret = to_nonary(result)\n    print(ret)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1643, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\nimport java.lang.Math;\n\npublic class App {\n\n  //Use this arraylist to store the input.\n  public static ArrayList<Integer> queenLocations = new ArrayList<Integer>(); \n  \n  //check if the backtrack algo ends.\n  public static boolean end = false;\n  \n  //the final chess board.\n  public static String board;\n\n  public static void main(String[] args) {\n    try {\n      File file = new File(args[0]);\n      FileReader filereader = new FileReader(file);\n      BufferedReader bufferedReader = new BufferedReader(filereader);\n      String data;\n      while ((data = bufferedReader.readLine()) != null) {\n        for(int i=0; i<data.length(); i+=1) {\n          int num =Character.getNumericValue(data.charAt(i));\n          if (num!=-1){\n            //  System.out.println(num);\n             queenLocations.add(num);\n          }\n\n        }\n      }\n      filereader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    // System.out.println(Arrays.toString(queenLocations.toArray()));\n    int[] solution = new int[8];\n    int k = queenLocations.get(0);\n    for (int i = 0; i < 8; i++) {\n      solution[i] = -1;\n    }\n    for (int i = 1; i<queenLocations.size(); i+=2) {\n      solution[queenLocations.get(i)] = queenLocations.get(i+1);\n    }\n    // System.out.println(Arrays.toString(solution));\n    backtrack(solution, 0, \"\");\n    // for (int i = 0, l = out.length; i < l; i++) {\n    //   String output = String.format(\"argv[%s]: %s\", i, args[i]);\n    //   System.out.println(output);\n    // }\n    System.out.println(board);\n    // System.out.println(end);\n  }\n\n  /** Given the nums as the path of Queens and queen as the position of queen,\n       check if the path is valid that no two queens can attack each other. **/\n  public static boolean isValid(int[] nums, int queen) {\n    // System.out.println(queen);\n    // System.out.println(Arrays.toString(nums));\n    for (int j=0; j<8; j+=1){\n        if (j != queen && nums[j] != -1){\n          if ( Math.abs(nums[j]-nums[queen]) == Math.abs(queen-j) || nums[j]==nums[queen] ) {\n            return false;\n          }\n        } \n    }\n    return true;\n  }\n\n  /** Backtrack the chessboard from the first row. The sol is the path of Queens in different rows.\n      The String path the chessboard that the algo has already gone through.\n      When it reaches the last line, make board point to path, and we have the result. */\n  public static void backtrack(int[] sol, int index, String path) {\n    // System.out.println(index);\n    // System.out.println(Arrays.toString(sol));\n    if (index == 8) {\n      board = path;\n      end = true;\n      return; \n    } \n    if (!end) {\n      if (sol[index] == -1) {\n      for (int i = 0; i < 8; i++) {\n        if(end) {\n          break;\n        }\n        if (!end){\n          sol[index] = i;\n          if (isValid(sol, index)) {\n            \n            String tempPath = \"........\";\n            String newpath = path + tempPath.substring(0,i)+\"Q\"+tempPath.substring(i+1) +\"\\n\";\n            backtrack(sol.clone(),index+1,newpath);\n          } \n        } \n      }\n      } else {\n        int col = sol[index];\n        String tempPath = \"........\";\n        String newpath = path + tempPath.substring(0,col)+\"Q\"+tempPath.substring(col+1) +\"\\n\";\n        backtrack(sol.clone(),index+1,newpath);\n      }\n    }\n    }\n}\n"}
{"id": 1644, "language": "PHP", "code": "<?php namespace Track;\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$input) {\n    if(is_numeric($input)){\n      if($input >= 0 && $input <= 1000){\n        if($input%3==0 && strpos($input,'3') !== false){\n          printf(\"%s\\n\",\"dumb\");\n        }else if($input%3==0){\n          printf(\"%s\\n\",\"idiot\");\n        }else if(strpos($input,'3') !== false){\n          printf(\"%s\\n\",\"stupid\");\n        }else{\n          printf(\"%s\\n\",\"smart\");\n        }  \n      }\n    }else{\n      printf(\"%s\\n\",\"invalid\"); \n    }   \n  }\n}\n  \nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1645, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n\n      if (is_numeric($value))\n      {\n          if(0 <= $value && $value <= 1000) {\n              if(($value % 3 == 0) && (strpos($value, '3') !== false)){\n                  printf(\"%s\\n\", 'dump');\n              }else{\n                  if($value % 3 == 0)  {\n                      printf(\"%s\\n\", 'idiot');\n                  }else if(strpos($value, '3') !== false){\n                      printf(\"%s\\n\", 'stupid');\n                  }else{\n                      printf(\"%s\\n\", 'smart');\n\n                  }\n              }\n          }else{\n              printf(\"%s\\n\", 'invalid');\n          }\n      }else{\n          printf(\"%s\\n\", 'invalid');\n      }\n\n      \n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n\n\n"}
{"id": 1646, "language": "Python3", "code": "import sys\n\ndef process_argument(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n\n    number = int(arg)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in arg:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in arg:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Evaluate and print results for the provided command line arguments.\n    output = [process_argument(arg) for arg in argv]\n    \n    for res in output:\n        print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1647, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class IdiotsLogic {\n  public static void main(String[] arguments) {\n    for (String currentArgument : arguments) {\n      Scanner inputScanner = new Scanner(currentArgument);\n      if (inputScanner.hasNextInt()) {\n        int inputValue = inputScanner.nextInt();\n        if (inputValue < 0 || inputValue > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean isDivisibleByThree = (inputValue % 3 == 0);\n          boolean containsThreeDigit = String.valueOf(inputValue).contains(\"3\");\n\n          if (isDivisibleByThree && containsThreeDigit) {\n            System.out.println(\"dumb\");\n          } else if (isDivisibleByThree) {\n            System.out.println(\"idiot\");\n          } else if (containsThreeDigit) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      inputScanner.close();\n    }\n  }\n}"}
{"id": 1648, "language": "C#", "code": "using System;\n\nnamespace ThreeIdiots\n{\n    public class Program\n    {\n        public static void Main(string[] arguments)\n        {\n            foreach (string input in arguments)\n            {\n                int parsedNumber;\n\n                if (!int.TryParse(input, out parsedNumber) || parsedNumber < 0 || parsedNumber > 1000)\n                {\n                    Console.WriteLine(\"invalid\");\n                    continue;\n                }\n\n                bool dividesThree = parsedNumber % 3 == 0;\n                bool includesThree = input.IndexOf('3') >= 0;\n\n                if (dividesThree && includesThree)\n                {\n                    Console.WriteLine(\"dumb\");\n                }\n                else if (dividesThree)\n                {\n                    Console.WriteLine(\"idiot\");\n                }\n                else if (includesThree)\n                {\n                    Console.WriteLine(\"stupid\");\n                }\n                else\n                {\n                    Console.WriteLine(\"smart\");\n                }\n            }\n        }\n    }\n}"}
{"id": 1649, "language": "C", "code": "#include <stdio.h>\n\nchar chessBoard[8][8];\n\nint isSafePosition(int r, int c) {\n    for (int i = 0; i < c; i++) {\n        if (chessBoard[r][i] == 'Q') return 0;\n    }\n    for (int i = r, j = c; i >= 0 && j >= 0; i--, j--) {\n        if (chessBoard[i][j] == 'Q') return 0;\n    }\n    for (int i = r, j = c; i < 8 && j >= 0; i++, j--) {\n        if (chessBoard[i][j] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint placeQueens(int col) {\n    if (col >= 8) return 1;\n    for (int i = 0; i < 8; i++) {\n        if (isSafePosition(i, col)) {\n            chessBoard[i][col] = 'Q';\n            if (placeQueens(col + 1)) return 1;\n            chessBoard[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    for (int i = 0; i < 8; i++)\n        for (int j = 0; j < 8; j++)\n            chessBoard[i][j] = '.';\n\n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        chessBoard[r][c] = 'Q';\n    }\n\n    placeQueens(0);\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            printf(\"%c\", chessBoard[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1650, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void checkThreeIdoit(string valueInput)\n    {\n      // split each element and store to list\n      string[] valueList = valueInput.Split(\" \");\n      bool divideByThree = false;\n      bool includeThree = false;\n\n      foreach (string value in valueList) {\n        // element as numeric, not string\n        int input = 0;\n\n        // try to convert element to int to check if is a numeric\n        bool isNumeric = int.TryParse(value, out input);\n\n        // if element is numeric and value is between 0 to 10000\n        if (isNumeric && input >= 0 && input <= 1000) {\n\n          // check if value can be devided by 3\n          divideByThree = input % 3 == 0 ? true : false;\n          // check if value contains 3\n          includeThree = value.Contains('3');\n\n          if (divideByThree && includeThree) {\n            Console.WriteLine(\"dumb\");\n          } else if (divideByThree) {\n            Console.WriteLine(\"idiot\");\n          } else if (includeThree) {\n            Console.WriteLine(\"stupid\");\n          } else if (!divideByThree && !includeThree){\n            Console.WriteLine(\"smart\");\n          }\n        } else {\n          Console.WriteLine(\"invalid\");\n        }\n      }\n    }\n\n    static public void Main(string[] args)\n    {\n\n        for (int i = 0; i < args.Length; i++)\n        {\n            // call my function to process and print the result\n            checkThreeIdoit(args[i]);\n        }\n    }\n}\n"}
{"id": 1651, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nbool isInt(const string& s) {\n    if (s.empty()) return false;\n    for (auto x : s)\n        if (!isdigit(x)) return false;\n    return true;\n}\n\nint main(int argc, char* argv[]) {\n    for (int i=1; i<argc; i++) {\n        string v = argv[i];\n        if (!isInt(v)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int num = stoi(v);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div = num%3==0;\n        bool has3 = v.find('3')!=string::npos;\n        if (div && has3) cout << \"dumb\\n\";\n        else if (div) cout << \"idiot\\n\";\n        else if (has3) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 1652, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class Commander {\n\n  private static String processArgument(int argumentValue) {\n    if (argumentValue < 0 || argumentValue > 1000) return \"invalid\";\n    boolean divBy3 = (argumentValue % 3 == 0);\n    boolean includes3 = String.valueOf(argumentValue).contains(\"3\");\n    if (divBy3 && includes3) return \"dumb\";\n    if (divBy3) return \"idiot\";\n    if (includes3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] cliArguments) {\n    for (String arg : cliArguments) {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        System.out.println(processArgument(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close();\n    }\n  }\n}"}
{"id": 1653, "language": "Python3", "code": "import sys\n\ndef idiot_status(val_str):\n    if not val_str.isdigit(): return \"invalid\"\n    \n    val_int = int(val_str)\n    \n    if not (0 <= val_int <= 1000): return \"invalid\"\n\n    is_divisible_by_3 = (val_int % 3 == 0)\n    string_contains_3 = ('3' in val_str)\n\n    if is_divisible_by_3 and string_contains_3:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif string_contains_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_program(args_from_cli):\n    for a_str in args_from_cli:\n        print(idiot_status(a_str))\n\nif __name__ == '__main__':\n    main_program(sys.argv[1:])"}
{"id": 1654, "language": "C++", "code": "#include <iostream>\n\nnamespace {\n\nconst int kMaxHittingCounts = 10000;\n\nconst int kMemorizedSoundCounts = 7;\nconst char kSound1[] = \"\u30c9\";\nconst char kSound2[] = \"\u30ab\";\nconst char kKeySounds[] = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\nconst char kEndSounds[] = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\nconst char kGameoverAnnounce[] = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\nclass HittingGame {\npublic:\n  explicit HittingGame(unsigned int hitting_counts);\n  ~HittingGame();\n\n  void Start();\n\nprivate:\n  std::string Hit() const;\n\n  void UpdateSounds(const std::string& sound);\n  bool IsKeySounds() const;\n\n  unsigned int hitting_counts_;\n  std::string sounds_;\n};\n\nHittingGame::HittingGame(unsigned int hitting_counts)\n  : hitting_counts_(hitting_counts),\n    sounds_() {\n}\n\nHittingGame::~HittingGame() {\n}\n\nvoid HittingGame::Start() {\n  while (hitting_counts_-- > 0) {\n    std::string sound = Hit();\n    std::cout << sound << std::endl;\n\n    UpdateSounds(sound);\n    if (IsKeySounds()) {\n      std::cout << kEndSounds << std::endl;\n      return;\n    }\n  }\n  std::cout << kGameoverAnnounce << std::endl;\n}\n\nstd::string HittingGame::Hit() const {\n  // TODO: seed\u6307\u5b9a\u3069\u3046\u3059\u308b\u3093\u3060\u3063\u3051\uff1f\n  return std::rand() % 2 == 0 ? kSound1 : kSound2;\n}\n\nvoid HittingGame::UpdateSounds(const std::string& sound) {\n  if (sounds_.length() > kMemorizedSoundCounts) {\n    std::string ss = sounds_.substr(sound.length(), kMemorizedSoundCounts - sound.length());\n    sounds_ = ss;\n  }\n  sounds_.append(sound);\n}\n\nbool HittingGame::IsKeySounds() const {\n  return sounds_.compare(kKeySounds) == 0;\n}\n\n} // namespace\n\nint main(int argc, char *argv[])\n{\n  if (argc < 1) {\n    std::cerr << \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\" << std::endl;\n    return 1;\n  }\n  \n  // TODO: \u4f59\u88d5\u304c\u3042\u308c\u3070\u5165\u529b\u304c\u672c\u5f53\u306b\u6574\u6570\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u3002\n  // \u3068\u308a\u3042\u3048\u305aato*()\u7cfb\u95a2\u6570\u304c\u3088\u3057\u306a\u306b\u51e6\u7406\u3057\u3066\u3057\u307e\u3046\u4e8b\u5b9f\u3092\u5229\u7528\u3059\u308b\u3002\n  int hitting_counts = ::atoi(argv[1]);\n  if (hitting_counts < 0 || hitting_counts > kMaxHittingCounts) {\n    std::cerr << \"\u6307\u5b9a\u56de\u6570\u304c\u7bc4\u56f2\u5916\u3067\u3059: \" << hitting_counts << std::endl;\n    return 1;\n  }\n\n  HittingGame game(hitting_counts);\n  game.Start();\n\n  return 0;\n}\n"}
{"id": 1655, "language": "Python3", "code": "import sys\n\nclass IdiotsAlgorithm:\n    def process(self, value_str):\n        # Check if the string consists only of numeric digits.\n        if not value_str.isdigit():\n            return \"invalid\"\n        \n        number = int(value_str)\n\n        # Check the valid range for the number.\n        if not (0 <= number <= 1000):\n            return \"invalid\"\n\n        is_divisible = (number % 3 == 0)\n        has_three = ('3' in value_str)\n\n        # Output determination based on conditions.\n        if is_divisible and has_three:\n            return \"dumb\"\n        elif is_divisible:\n            return \"idiot\"\n        elif has_three:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\ndef execute_cli(args_list):\n    algo_processor = IdiotsAlgorithm()\n    for item in args_list:\n        print(algo_processor.process(item))\n\nif __name__ == '__main__':\n    execute_cli(sys.argv[1:])"}
{"id": 1656, "language": "Python3", "code": "import sys\n\ndef idiot_filter(num_string):\n    if not num_string.isdigit():\n        return \"invalid\"\n    \n    num_val = int(num_string)\n    \n    if not (0 <= num_val <= 1000):\n        return \"invalid\"\n\n    is_divisible = (num_val % 3 == 0)\n    has_three = ('3' in num_string)\n\n    if is_divisible and has_three: return \"dumb\"\n    if is_divisible: return \"idiot\"\n    if has_three: return \"stupid\"\n    return \"smart\"\n\ndef startup_main(input_args):\n    for arg_item in input_args:\n        print(idiot_filter(arg_item))\n\nif __name__ == '__main__':\n    startup_main(sys.argv[1:])"}
{"id": 1657, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  s=[]\n  for i in argv:\n    s.append(i)\n  for i in s:\n    if(i.isnumeric()):\n      if('3' in i):\n        if(int(i)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(i)%3==0):\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1658, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13' and argv[1]):\n      print(\"stupid\\ninvalid\")\n  else:\n    ans=[]\n    for s in argv:\n      ans.append(s)\n    for s in ans:\n      if(s.isnumeric()):\n        if('3' in s):\n          if(int(s)%3==0):\n            print (\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(s)%3==0):\n          print (\"idiot\")\n        else:\n          print(\"smart\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1659, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  sub_command = argv[0]\n  input_file_path = argv[1]\n  output_file_path = argv[2]\n\n  if sub_command == 'count':\n    f = open(input_file_path)\n    letters = list(f.read().strip())\n    result = {}\n    result[\" \"] = letters.count(\" \")\n    for i in range(65,91):\n      result[chr(i)] = letters.count(chr(i))\n    for i in range(97,123):\n      result[chr(i)] = letters.count(chr(i))\n    r = open(output_file_path, 'w')\n    json.dump(result,r)\n\n\n  elif sub_command == \"space\":\n    f = open(input_file_path)\n    letters = list(f.read().strip())\n    max_freq = 0\n    answer = 'a'\n    for i in range(97,123):\n      if i == 97 or max_freq < letters.count(chr(i)):\n        max_freq = letters.count(chr(i))\n        answer = chr(i)\n      \n    result = {\"char\": answer}\n    r = open(output_file_path, 'w')\n    json.dump(result,r)\n\n\n  elif sub_command == \"decrypt\":\n    f = open(input_file_path)\n    letters = list(f.read().strip())\n    max_freq = 0\n    answer = 'a'\n    for i in range(97,123):\n      if i == 97 or max_freq < letters.count(chr(i)):\n        max_freq = letters.count(chr(i))\n        answer = chr(i)\n\n    for letter in letters:\n      if letter == \" \":\n        letter = answer\n      elif letter == answer:\n        letter = \" \"\n    # \"I'm\"\u3092\u63a2\u3059\n    for i,letter in enumerate(letters):\n      if letters[i+1] == \"\u2019\":\n        a=0\n\n\n    \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1660, "language": "C", "code": "#include <stdio.h>\n\nchar rot13_char(char c) {\n  if (c >= 'a' && c <= 'z') {\n    return 'a' + (c - 'a' + 13) % 26;\n  }\n  if (c >= 'A' && c <= 'Z') {\n    return 'A' + (c - 'A' + 13) % 26;\n  }\n  return c;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    char *str = argv[i];\n    while (*str) {\n      putchar(rot13_char(*str));\n      str++;\n    }\n    putchar('\\n');\n  }\n  return 0;\n}"}
{"id": 1661, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n\n  /** \u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u305f\u56de\u6570 */\n  private int number;\n\n  /** \u6307\u5b9a\u306e\u9023\u7d9a\u3059\u308b\u6f14\u594f */\n  private String STRING_SEQUENCE = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n\n   /** \u6307\u5b9a\u306e\u9023\u7d9a\u3059\u308b\u6f14\u594f\u304c\u3055\u308c\u305f\u6642\u306b\u51fa\u529b\u3059\u308b\u6587\u5b57\u5217 */\n  private String STRING_OVER = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\n  /** \u6307\u5b9a\u306e\u9023\u7d9a\u3059\u308b\u6f14\u594f\u304c\u3055\u308c\u306a\u304b\u3063\u305f\u6642\u306b\u51fa\u529b\u3059\u308b\u6587\u5b57\u5217 */\n  private String STRING_CLEAR = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n\n\n  public static void main(String[] args) {\n    final App app = new App();\n    app.parseArguments(args);\n    final String[] resultString;\n\n    if (app.number == 0) {\n      System.out.println(STRING_OVER);\n    } else {\n      resultString = app.createResultString(app.number);\n      for (int i = 0; i < resultString.length; i++) {\n        System.out.println(resultString[i]);\n      }\n    }\n  }\n\n    /**\n     * \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u3092\u89e3\u6790\u3059\u308b.\n     * \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u6f14\u594f\u56de\u6570\u3092\u30b3\u30de\u30f3\u30c9\u5f15\u6570\u306b\u6e21\u3057\u3066\u8d77\u52d5\u3055\u305b\u308b\u3002\n     *\n     * @param args\n     *            \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u306e\u914d\u5217\n     */\n    public void parseArguments(String[] args) {\n        if (args.length < 0 || args.length > 10000) { // \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u306e\u6570\u304c\u6b63\u3057\u304f\u306a\u3044\n            printUsage();\n            System.exit(1);\n        }\n\n        try {\n          this.number = Integer.parseInt(args[0]);\n        } catch (NumberFormatException e) {\n            printUsage();\n            System.exit(1);\n        }\n    }\n\n    /**\n     * \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8d77\u52d5\u65b9\u6cd5\u3092\u8868\u793a\u3059\u308b\u3002\n     */\n    private void printUsage() {\n        System.out.println(\"\u4f7f\u3044\u65b9: \" + \"java \" + \"App\" + \"\u6f14\u594f\u56de\u6570\");\n        System.out.println(\"\u6f14\u594f\u56de\u6570\u306b\u306f0~10000\u307e\u3067\u306e\u6574\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\");\n    }\n\n    /**\n     * \u30e9\u30f3\u30c0\u30e0\u306b\u300c\u30c9\u300d\u3082\u3057\u304f\u306f\u300c\u30ab\u300d\u306e\u6587\u5b57\u5217\u3092\u751f\u6210\u3059\u308b.\n     *\n     * @param length\n     *            \u6587\u5b57\u5217\u306e\u9577\u3055\n     * @return \u30e9\u30f3\u30c0\u30e0\u306a\u300c\u30c9\u300d\u3082\u3057\u304f\u306f\u300c\u30ab\u300d\u306e\u6587\u5b57\u5217\n     */\n    private String createRandomKatakanaString(int length) {\n\n        final StringBuffer buff = new StringBuffer();\n\n        final String[] string = { \"\u30c9\", \"\u30ab\"};\n        final Random random = new Random();\n        for (int i = 0; i < length; i++) {\n            final String randomString = string[random.nextInt(2)];\n            buff.append(randomString);\n        }\n        return buff.toString();\n    }\n\n    /**\n     * \u6587\u5b57\u5217\u306b\u300c\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\u300d\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u5224\u5b9a\u3057\u3001\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u300c\u30c9\u30f3\u266a\u30c9\u30f3\u266a\u300d\u3001\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u300c\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u300d\u3092\u8ffd\u52a0\u3057\u305f\u914d\u5217\u3092\u8fd4\u3059.\n     *\n     * @param length\n     *            \u6587\u5b57\u5217\u306e\u9577\u3055\n     * @return \u30e9\u30f3\u30c0\u30e0\u306a\u30ab\u30bf\u30ab\u30ca\u306e\u6587\u5b57\u5217\n     */\n    private String[] createResultString(int length) {\n\n        final String string = createRandomKatakanaString(length);\n\n        final int result = string.indexOf(STRING_SEQUENCE);\n\n        if (result < 0) {\n          String[] strArrayOver = new String[length + 1];\n          for (int i = 0; i < length; i++) {\n            strArrayOver[i] = String.valueOf(string.charAt(i));\n          }\n          strArrayOver[length] = STRING_OVER;\n          return strArrayOver;\n        }\n\n        int lastLength = result + STRING_SEQUENCE.length();\n        final String[] strArray = new String[lastLength + 1];\n\n        for (int i = 0; i < lastLength; i++) {\n            strArray[i] = String.valueOf(string.charAt(i));\n          }\n          strArray[lastLength] = STRING_CLEAR;\n          return strArray;\n    }\n}\n\n"}
{"id": 1662, "language": "Java", "code": "package track;\n\n\npublic class App {\n  \n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\tString input = args[i];\n    String regex = \"\\\\d+\";\n       if(input.matches(regex))\n        {\n            // checking valid integer using parseInt() method\n            \n            Integer num = Integer.parseInt(input);\n           //System.out.println(input + \" is a valid integer number\");\n            \n            if(num%3==0&&input.indexOf('3')!=-1)\n            {\n              System.out.println(\"dumb\");\n            }\n            else if(num%3==0)\n            {\n              System.out.println(\"idiot\");\n            }\n            else if(input.indexOf('3')!=-1)\n            {\n              System.out.println(\"stupid\");\n            }\n            \n            else{\n              System.out.println(\"smart\");\n            }\n        } \n        else\n        {\n            System.out.println(\"invalid\");\n        }\n\t\t}\n\t}\n}\n"}
{"id": 1663, "language": "Java", "code": "package track;\n\npublic class InputEvaluation {\n    public static void main(String[] args) {\n        // Evaluate inputs against the algorithm\n\n        for (String arg : args) {\n            if (arg.matches(\"\\\\d+\")) {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    analyze(num);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static void analyze(int number) {\n        boolean divisibleBy3 = (number % 3 == 0);\n        boolean contains3 = String.valueOf(number).contains(\"3\");\n\n        if (divisibleBy3 && contains3) {\n            System.out.println(\"dumb\");\n        } else if (divisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (contains3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1664, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\ttry \n        { \n            Integer.parseInt(args[i]);\n            int in=Integer.parseInt(args[i]);\n            if((args[i].indexOf('3')!=-1) && (in%3==0))\n            {\n            String s=\"dumb\";\n            System.out.println(s);\n            }\n            else if(in%3==0)\n            {\n            String s=\"idiot\";\n            System.out.println(s);\n            }\n            else if(args[i].indexOf('3')!=-1)\n            {\n            String s=\"stupid\";\n            System.out.println(s); \n            }\n            else\n            {\n            String s=\"smart\";\n            System.out.println(s); \n            }\n        }  \n        catch (NumberFormatException e)  \n        { \n            String s=\"invalid\";\n            System.out.println(s); \n        }\n    }\n\t\t\n\t}\n}\n"}
{"id": 1665, "language": "C++", "code": "#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <random>\nusing namespace std;\n\n#define __TEST_MATCHED 0  // \u6b63\u89e3\u51fa\u529b\u30c6\u30b9\u30c8\n\nint main(int argc, char *argv[])\n{\n  if( argc < 2 )\n  {\n    printf(\"\u5f15\u6570\u304c\u3042\u308a\u307e\u305b\u3093\u3002\\n\");\n    return -1 ;\n  }\n\n  const char* nptr = argv[1] ;\n  char* endptr = NULL;\n  const long lCount = strtol(nptr, &endptr, 10) ;\n  const long lMinCount = 0 ;\n  const long lMaxCount = 10000 ;\n  if( lCount < lMinCount || lMaxCount < lCount // \u6570\u5024\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\n      || nptr == endptr || nptr + strlen(nptr) != endptr ) // \u5165\u529b\u6587\u5b57\u5217\u30c1\u30a7\u30c3\u30af\n  {\n    printf(\"\u5f15\u6570\\\"%s\\\"\u306f\u4e0d\u6b63\u3067\u3059\u3002\\n%ld~%ld\u307e\u3067\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\", argv[1], lMinCount, lMaxCount);\n    return -1 ;\n  }\n\n  // \u51fa\u529b\u6587\u5b57\u5217\u5b9a\u7fa9\n  const char* strOutSound[2] = {\"\u30c9\", \"\u30ab\"} ;\n  const char* strMatchedOutSound = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" ;\n  const char* strGameOver = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" ;\n\n  // \u30de\u30c3\u30c1\u30f3\u30b0\u5b9a\u7fa9  0:\"\u30c9\"  1:\"\u30ab\"\n  const long lPatternLength = 7 ; // \u30d1\u30bf\u30fc\u30f3\u9577\u3055\n  const unsigned long ulPattern =  0x25 ; // \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\" \u2192 0100101 \u2192 0x25\n  const unsigned long ulPatternMask =  0x7F ; // \u30de\u30b9\u30af 1111111  \u2192 0x7F\n  unsigned long ulMatch = 0x0 ; // \u30de\u30c3\u30c1\u30f3\u30b0\u7528\u5909\u6570\n\n#if __TEST_MATCHED  // \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n  const unsigned long ulTestMathcedOut[] = {0,1,0,0,1,0,1};\n  const unsigned long ulTestMathcedOutLen = 7 ;\n#else\n  // \u4e71\u6570\u767a\u751f\u6e96\u5099\n  random_device rnd ;\n  mt19937 mt(rnd());\n#endif\n\n  bool bMatched = false ;\n  long i ;\n  for( i = 0 ; i < lCount ; ++i)\n  {\n#if __TEST_MATCHED    //  \u30c6\u30b9\u30c8 \u6b63\u89e3\u51fa\u529b\n    if( ulTestMathcedOutLen <= i )\n    {\n      break ;\n    }\n    const unsigned long lOutIdx = ulTestMathcedOut[i]  ; \n#else\n    // \u51fa\u529b\u6587\u5b57\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n    const unsigned long lOutIdx = mt() % 2 ; \n#endif\n    // \u51fa\u529b\n    printf(\"%s\\n\", strOutSound[lOutIdx]);\n    // \u30de\u30c3\u30c1\u30f3\u30b0\u7528\u30c7\u30fc\u30bf\u66f4\u65b0\n    ulMatch = ((ulMatch << 1) & ulPatternMask) + lOutIdx ;\n    // \u30d1\u30bf\u30fc\u30f3\u9577\u3055\u306b\u9054\u3057\u3066\u3044\u306a\u3044\u5834\u5408continue\n    if( i+1 < lPatternLength )\n    {\n      continue ;\n    }\n    // \u30d1\u30bf\u30fc\u30f3\u3068\u6bd4\u8f03\n    if( ulPattern == ulMatch )\n    {\n      bMatched = true ;\n      break ;\n    }\n  }\n  if( bMatched )\n  {\n    printf(\"%s\\n\", strMatchedOutSound);\n  }\n  else\n  {\n    printf(\"%s\\n\", strGameOver);\n  }\n  return 0; \n}\n"}
{"id": 1666, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    pos = []\n    for _ in range(k):\n        y, x = map(int, sys.stdin.readline().split())\n        pos.append((y, x))\n    board = [['.'] * 8 for _ in range(8)]\n    colset = set()\n    dposet = set()\n    dnegset = set()\n    used = set()\n    for y, x in pos:\n        board[y][x] = 'Q'\n        colset.add(x)\n        dposet.add(y + x)\n        dnegset.add(y - x)\n        used.add(y)\n\n    def go(r):\n        if r == 8:\n            return True\n        if r in used:\n            return go(r+1)\n        for x in range(8):\n            if x in colset or (r+x) in dposet or (r-x) in dnegset:\n                continue\n            board[r][x] = 'Q'\n            colset.add(x)\n            dposet.add(r+x)\n            dnegset.add(r-x)\n            if go(r+1): return True\n            board[r][x] = '.'\n            colset.remove(x)\n            dposet.remove(r+x)\n            dnegset.remove(r-x)\n        return False\n\n    go(0)\n    for row in board:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1667, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u4e00\u306e\u4f4d\u3054\u3068\u5206\u3051\u3066\u5909\u63db\uff08\u5206\u5c90\u591a\u3081\u3001\u521d\u5fc3\u8005\u301c\u4e2d\u7d1a\u8005\uff09\n    int n = Integer.parseInt(args[0]);\n    String result = \"\";\n    int th = n / 1000;\n    int h = (n % 1000) / 100;\n    int t = (n % 100) / 10;\n    int o = n % 10;\n    for (int i = 0; i < th; i++) result += \"M\";\n    result += digitToRoman(h, \"C\", \"D\", \"M\");\n    result += digitToRoman(t, \"X\", \"L\", \"C\");\n    result += digitToRoman(o, \"I\", \"V\", \"X\");\n    System.out.println(result);\n  }\n\n  static String digitToRoman(int d, String one, String five, String ten) {\n    if (d == 0) return \"\";\n    if (d <= 3) return one.repeat(d);\n    if (d == 4) return one + five;\n    if (d <= 8) return five + one.repeat(d-5);\n    return one + ten;\n  }\n}"}
{"id": 1668, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction cli_next(fileName) {\n  // read JSON file\n  let fs = require('fs');\n  let obj = JSON.parse(fs.readFileSync(fileName, 'utf8'));\n\n  let n = obj.length;\n  let latestR = [0, 0, 0];\n  let latestY = 0;\n  \n  // store the latest three hand of robot\n  for (let i=0; i<3; i++) {\n    latestR[i] = obj[(n-1)-i]['robot'];\n  }\n  latestY = obj[n-1]['you'];\n  \n  // check the next hand of robot which has the same parameter with latest set\n  let lastR;\n  for (let i=1; i<n-2; i++) {\n    if (obj[(n-1)-i]['robot'] == latestR[0] && obj[(n-2)-i]['robot'] == latestR[1] && obj[(n-3)-i]['robot'] == latestR[2] && obj[(n-1)-i]['you'] == latestY) {\n      lastR = obj[n-i]['robot'];\n      break;\n    }\n  }\n\n  // the hand to win the next robot's hand is previous robot's hand\n  console.log(lastR);\n}\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  // argv.forEach((v, i) => console.log(`argv[${i}]: ${v}`));\n  argv.forEach((v, i) => cli_next(v));\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 1669, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GameSimulation {\n\n    public static void main(String[] args) {\n        String jsonFilePath = args[0];\n        List<GameInstance> historicGameData = new ArrayList<>();\n\n        try {\n            String rawJsonData = readJsonFileContent(jsonFilePath);\n            historicGameData = parseJsonString(rawJsonData);\n        } catch (IOException e) {\n            System.err.println(\"Failed to read game data file: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> robotDecisionMapping = new HashMap<>(); // Maps game state to robot's next hand\n        \n        // These arrays will hold the *last* 3 robot moves and *last* 1 opponent move\n        // These are the parameters for the robot's decision logic\n        int[] recentRobotMoves = new int[3]; // stores robot_prev3, robot_prev2, robot_prev1\n        int lastOpponentMove = -1; // stores opponent_prev1\n\n        // Initialize the robot's fixed initial moves\n        recentRobotMoves[0] = 0; // Rock (for game 0)\n        recentRobotMoves[1] = 1; // Scissors (for game 1)\n        recentRobotMoves[2] = 2; // Paper (for game 2)\n\n        // Iterate through historical games to build the robot's decision map\n        for (int i = 0; i < historicGameData.size(); i++) {\n            GameInstance currentHistoricalGame = historicGameData.get(i);\n            int robotPlayedInThisGame = currentHistoricalGame.robotPlayed;\n            int opponentPlayedInThisGame = currentHistoricalGame.opponentPlayed;\n\n            if (i >= 3) {\n                // If we have enough history (4th game or later), calculate the state\n                // The state is based on moves *before* the current game\n                String currentStateKey = String.format(\"%d_%d_%d_%d\",\n                                                       recentRobotMoves[0],\n                                                       recentRobotMoves[1],\n                                                       recentRobotMoves[2],\n                                                       lastOpponentMove);\n                \n                // The robot played 'robotPlayedInThisGame' for this state.\n                // The next time this state occurs, it will play the next hand in the cycle.\n                int nextCyclicHand = (robotPlayedInThisGame + 1) % 3;\n                robotDecisionMapping.put(currentStateKey, nextCyclicHand);\n            }\n            \n            // Update the history for the *next* iteration\n            recentRobotMoves[0] = recentRobotMoves[1];\n            recentRobotMoves[1] = recentRobotMoves[2];\n            recentRobotMoves[2] = robotPlayedInThisGame;\n            lastOpponentMove = opponentPlayedInThisGame;\n        }\n\n        // After processing all historical data, determine the robot's move for the *next* game\n        String finalStateForPrediction = String.format(\"%d_%d_%d_%d\",\n                                                       recentRobotMoves[0],\n                                                       recentRobotMoves[1],\n                                                       recentRobotMoves[2],\n                                                       lastOpponentMove);\n        \n        int predictedRobotNextMove = robotDecisionMapping.getOrDefault(finalStateForPrediction, 0); // Default to Rock\n\n        System.out.println(getHandThatWins(predictedRobotNextMove));\n    }\n\n    private static String readJsonFileContent(String path) throws IOException {\n        StringBuilder fileContent = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                fileContent.append(line.trim());\n            }\n        }\n        return fileContent.toString();\n    }\n\n    private static List<GameInstance> parseJsonString(String jsonText) {\n        List<GameInstance> gameInstances = new ArrayList<>();\n        // Remove outer brackets and split by \"},{\"\n        String recordsOnly = jsonText.substring(1, jsonText.length() - 1); \n        String[] rawRecords = recordsOnly.split(\"\\\\},\\\\{\"); \n\n        for (String record : rawRecords) {\n            int robotHand = -1;\n            int youHand = -1;\n            \n            // Manual parsing of \"robot\":X,\"you\":Y\n            int robotIdx = record.indexOf(\"\\\"robot\\\":\");\n            if (robotIdx != -1) {\n                robotHand = Character.getNumericValue(record.charAt(robotIdx + 8));\n            }\n\n            int youIdx = record.indexOf(\"\\\"you\\\":\");\n            if (youIdx != -1) {\n                youHand = Character.getNumericValue(record.charAt(youIdx + 6));\n            }\n            gameInstances.add(new GameInstance(robotHand, youHand));\n        }\n        return gameInstances;\n    }\n\n    private static int getHandThatWins(int handToBeat) {\n        if (handToBeat == 0) return 2; // Rock -> Paper\n        if (handToBeat == 1) return 0; // Scissors -> Rock\n        return 1; // Paper -> Scissors\n    }\n}\n\nclass GameInstance {\n    int robotPlayed;\n    int opponentPlayed;\n\n    GameInstance(int robot, int opponent) {\n        this.robotPlayed = robot;\n        this.opponentPlayed = opponent;\n    }\n}"}
{"id": 1670, "language": "Java", "code": "package track;\nimport java.util.Scanner;\n\npublic class App {\n  public static final int ROCK = 0, SCISSORS = 1, PAPER = 2;\n  public static void startGame(int param1,int param2,int param3,int param4){\n    switch(param4){      \n      case ROCK:\n        System.out.println(PAPER);\n        break;\n      case SCISSORS:\n        System.out.println(ROCK);\n        break;\n      case PAPER:\n        System.out.println(SCISSORS);\n        break;\n      default:\n       System.out.println(\"Enter proper value\");\n        break;\n        \n      \n      \n    }\n  }\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n  int param1,param2,param3,param4;\n  param1 = Integer.parseInt(sc.nextLine());\n  param2 = Integer.parseInt(sc.nextLine());\n  param3 = Integer.parseInt(sc.nextLine());\n  param4 = Integer.parseInt(sc.nextLine());\n  //param4 = 2;\n\tstartGame(param1,param2,param3,param4);\n  //System.out.println(nextMove);\n  }\n}\n"}
{"id": 1671, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    #print(\"argv[{0}]: {1}\".format(i, v))\n    print(type(v))\n    try:\n      n=int(v)\n    except:\n      print(\"invalid\")\n    else:\n      if 0<=n and n<=1000:\n        if n%3==0:\n          if '3' in v:\n            print(\"dumb\")\n          \n          else:\n            print(\"idiot\")\n          \n        elif '3' in v:\n          print(\"stupid\")\n        \n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1672, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Scanner;\n\n\nclass App\n{\n    //number of queens\n    private static int N;\n    //chessboard\n    private static String[][] board = new String[8][8];\n    \n\n    //function to check if the cell is attacked or not\n    private static boolean isSafeQueen(int i,int j)\n    {\n        int k,l;\n        //checking if there is a queen in row or column if queen found return true\n\n        for(k=0;k<N;k++)\n        {\n            \n            if((board[i][k] == \"Q\") || (board[k][j] == \"Q\"))\n                return true;\n        }\n        //diagonals safety if queen found return true \n        for(k=0;k<N;k++)\n        {\n            for(l=0;l<N;l++)\n            {\n                if(((k+l) == (i+j)) || ((k-l) == (i-j)))\n                {\n                   if(board[k][l] == \"Q\"  )\n                        return true;\n                }\n            }\n        }\n        //no queens and safe to place \n        return false;\n    }\n\n    //check the given queens and replacement \n    private static boolean checkQueen(int n, int numberArgs)\n    {\n        int i,j;\n        \n        if(n == numberArgs)\n            return true;\n        for(j=0;j<N;j++)\n        {\n            for(i=0;i<N;i++)\n            {\n                //check the queen can be replaced or not or already occupied\n                if((!isSafeQueen(i,j)) && (board[i][j]!=\"Q\"))\n                {\n                    board[i][j] = \"Q\";\n                    //check  the next queen can be placed\n                    if(checkQueen(n-1,numberArgs)==true)\n                    {\n                        return true;\n                    }\n                    //if not break the loop\n                    board[i][j] = null;\n                    \n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args)\n    {\n        //Queens \n        N = 8;\n        String placedPos = null;\n        //number of already placed queens \n        int numberArgs = 0;\n        try {\n            File file =  new File(args[0]);\n            FileReader fileReader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n            \n            \n            String data;\n            String[] splitString = null;\n            int count = 0;\n            \n            //get number of already placed queens \n            data = bufferedReader.readLine();\n            numberArgs = Integer.parseInt(data);\n            //get the number of arguments and add them too x and y\n            for (int i = 0; i < numberArgs; i++) {\n                placedPos = bufferedReader.readLine();\n                String[] splitStr = placedPos.split(\"\\\\s+\");\n                int x = Integer.parseInt(splitStr[0]);\n                int y = Integer.parseInt(splitStr[1]);\n                board[x][y] = \"Q\";\n                \n            }\n\n            \n            fileReader.close();\n            \n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        \n\n        int i,j;\n        //check queen is already filled and check the safety\n        checkQueen(N,numberArgs);\n        //print chess board\n        for(i=0;i<N;i++)\n        {\n            for(j=0;j<N;j++)\n                \n            if(board[i][j] == null){\n                System.out.print(\".\");\n                \n            }else{\n                System.out.print(board[i][j]);\n            }\n            System.out.print(\"\\n\");\n        }\n        \n    }\n}"}
{"id": 1673, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\nint numb(int,int);\nint thr(int,int);\nint main(int argc , char *argv[]){\n  int i,num,flag,len;\n  for ( i = 1; i < argc; i++) {\n    if(sscanf(argv[i],\"%i\",&num)!=1)\n      printf(\"invalid\\n\");\n    else{\n      len=strlen(argv[i]);\n      num=atoi(argv[i]);\n      if(num>=0 && num<=1000){\n        flag=numb(num,len);\n        switch(flag){\n          case 1:\n            printf(\"idiot\\n\");\n            break;\n          case 2:\n            printf(\"stupid\\n\");\n            break;\n          case 3:\n            printf(\"dumb\\n\");\n            break;\n          case 4:\n            printf(\"smart\\n\");\n            break;\n          default:\n            printf(\"invalid\\n\");\n            break;\n        }\n      }\n      else\n        printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n\nint numb(int num, int len){\n  int pre;\n  pre = thr(num,len);\n  if(num % 3 == 0){\n    if(pre == 1)\n      return 3;\n    else\n      return 1;\n  }\n  else{\n    if(pre == 1)\n      return 2;\n    else\n      return 4;\n  }\n}\n\nint thr(int num, int len){\n  int i,temp;\n  for(i=0;i<len;i++){\n    temp=num%10;\n    if(temp==3)\n      return 1;\n    num = num/10;\n  }\n  return 0;\n}"}
{"id": 1674, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.util.*;\nimport org.json.JSONObject;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        String command = args[0];\n        String inputPath = args[1];\n        String outputPath = args[2];\n\n        switch (command) {\n            case \"count\":\n                countCharacters(inputPath, outputPath);\n                break;\n            case \"space\":\n                determineSpaceCharacter(inputPath, outputPath);\n                break;\n            case \"decrypt\":\n                decryptText(inputPath, outputPath);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid command\");\n        }\n    }\n\n    private static void countCharacters(String inputPath, String outputPath) throws IOException {\n        Map<Character, Integer> charCount = new HashMap<>();\n        // Read the input file\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputPath))) {\n            int c;\n            while ((c = reader.read()) != -1) {\n                char ch = (char) c;\n                // Count only alphabets and spaces\n                if (Character.isLetter(ch) || ch == ' ') {\n                    charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);\n                }\n            }\n        }\n\n        // Write the result to the output file in JSON format\n        JSONObject json = new JSONObject(charCount);\n        try (FileWriter writer = new FileWriter(outputPath)) {\n            writer.write(json.toString());\n        }\n    }\n\n    private static void determineSpaceCharacter(String inputPath, String outputPath) throws IOException {\n        Map<Character, Integer> charCount = new HashMap<>();\n        int spaceCount = 0;\n\n        // Read the input file\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputPath))) {\n            int c;\n            while ((c = reader.read()) != -1) {\n                char ch = (char) c;\n                if (Character.isLetter(ch) || ch == ' ') {\n                    if (ch == ' ') {\n                        spaceCount++;\n                    } else {\n                        charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);\n                    }\n                }\n            }\n        }\n\n        // Find the character with frequency equal to space count\n        char spaceChar = ' ';\n        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {\n            if (entry.getValue() == spaceCount) {\n                spaceChar = entry.getKey();\n                break;\n            }\n        }\n\n        // Write the result to the output file in JSON format\n        JSONObject json = new JSONObject();\n        json.put(\"char\", spaceChar);\n        try (FileWriter writer = new FileWriter(outputPath)) {\n            writer.write(json.toString());\n        }\n    }\n\n    private static void decryptText(String inputPath, String outputPath) throws IOException {\n        StringBuilder encryptedText = new StringBuilder();\n        Map<Character, Integer> charCount = new HashMap<>();\n        int spaceCount = 0;\n\n        // Read the input file and collect data\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputPath))) {\n            int c;\n            while ((c = reader.read()) != -1) {\n                char ch = (char) c;\n                encryptedText.append(ch);\n                if (Character.isLetter(ch) || ch == ' ') {\n                    if (ch == ' ') {\n                        spaceCount++;\n                    } else {\n                        charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);\n                    }\n                }\n            }\n        }\n\n        // Determine which character corresponds to space\n        char spaceChar = ' ';\n        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {\n            if (entry.getValue() == spaceCount) {\n                spaceChar = entry.getKey();\n                break;\n            }\n        }\n\n        // Decrypt the text by finding the shift\n        char mostCommon = ' ';\n        int maxCount = 0;\n        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                mostCommon = entry.getKey();\n            }\n        }\n\n        int shift = (mostCommon >= 'a' && mostCommon <= 'z') ? mostCommon - 'e' : mostCommon - 'E';\n        shift = (shift + 26) % 26;\n\n        // Reverse the text\n        StringBuilder decryptedText = new StringBuilder();\n        for (char ch : encryptedText.toString().toCharArray()) {\n            if (ch == spaceChar) {\n                decryptedText.append(' ');\n            } else if (Character.isLetter(ch)) {\n                if (Character.isLowerCase(ch)) {\n                    char original = (char) ('a' + (ch - 'a' - shift + 26) % 26);\n                    decryptedText.append(original);\n                } else {\n                    char original = (char) ('A' + (ch - 'A' - shift + 26) % 26);\n                    decryptedText.append(original);\n                }\n            } else {\n                decryptedText.append(ch);\n            }\n        }\n\n        // Write the decrypted text to the output file\n        try (FileWriter writer = new FileWriter(outputPath)) {\n            writer.write(decryptedText.toString());\n        }\n    }\n}"}
{"id": 1675, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n// \u7c21\u5358\u306b\u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\u3057\u3001\u6700\u5f8c\u3060\u3051\u4fdd\u6301\u3059\u308b\u95a2\u6570\nint buffer_check(char *buf, int len, char c, const char *target) {\n  int tlen = (int)strlen(target);\n  if (len < tlen) {\n    buf[len] = c;\n    buf[len + 1] = 0;\n    len++;\n  } else {\n    for (int i = 0; i < tlen - 1; i++) {\n      buf[i] = buf[i+1];\n    }\n    buf[tlen - 1] = c;\n    buf[tlen] = 0;\n  }\n\n  if (strcmp(buf, target) == 0) {\n    return -1;\n  }\n  return len;\n}\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    return 0;\n  }\n\n  int max = atoi(argv[1]);\n  if (max == 0) {\n    puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    return 0;\n  }\n\n  const char *target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  char buffer[20] = {0};\n  int buflen = 0;\n  srand((unsigned int)time(NULL));\n\n  for (int i = 0; i < max; i++) {\n    char beat = (rand() % 2) ? '\u30c9' : '\u30ab';\n    printf(\"%c\\n\", beat);\n    int ret = buffer_check(buffer, buflen, beat, target);\n    if (ret == -1) {\n      puts(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n      return 0;\n    }\n    buflen = ret;\n  }\n\n  puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  return 0;\n}"}
{"id": 1676, "language": "C++", "code": "#include <iostream>\n#include <cmath>\n#include <fstream>\n#include <string>\n#include <map>\nusing namespace std;\n\nclass Decrypter {\n  public:\n    Decrypter(ifstream ifs, ofstream ofs);\n    ~Decrypter();\n\n    void doCount();\n    void doSpace();\n    void doDecrypt();\n\n  private:\n    void Count();\n    void FindSpace();\n    void Decrypt();\n    char shift_letter(char c);\n\n    ifstream ifs_;\n    ofstream ofs_;\n    map<char, int> table_;\n    int len_ = 0;\n    char space_;\n    int shift_ = 0;\n};\n\nDecrypter::Decrypter(ifstream ifs, ofstream ofs)\n  : ifs_(move(ifs)),\n    ofs_(move(ofs)) {}\n\nDecrypter::~Decrypter() {}\n\nvoid Decrypter::Count() {\n    string str;\n    while (getline(ifs_, str)) {\n        for (int i = 0; i < str.size(); i++) {\n            if (isalpha(str[i]) || str[i] == ' ') {\n                table_[str[i]]++;\n            }\n            if (isascii(str[i]))\n                len_++;\n        }\n    }\n}\n\nvoid Decrypter::doCount() {\n    Count();\n    int cnt = 0;\n    ofs_ << \"{\" << endl;\n    ofs_ << \"\\\" \\\":\" << table_[' '] << \",\" << endl;\n    for (int i = 0; i < 26; i++) {\n        char c = 'A' + i;\n        ofs_ << \"\\\"\" << c << \"\\\":\" << table_[c] << \",\" << endl;\n    }\n    for (int i = 0; i < 25; i++) {\n        char c = 'a' + i;\n        ofs_ << \"\\\"\" << c << \"\\\":\" << table_[c] << \",\" << endl;\n    }\n    ofs_ << \"\\\"\" << 'z' << \"\\\":\" << table_['z'] << endl;\n    ofs_ << \"}\" << endl;\n}\n\nvoid Decrypter::FindSpace() {\n    Count();\n    char ans;\n    double best_score = 100.0;\n\n    for (int i = 0; i < 26; i++) {\n        // space\u306f\u5c0f\u6587\u5b57\u3068\u7f6e\u63db\u3055\u308c\u308b\u306e\u3067\u5927\u6587\u5b57\u306f\u30c1\u30a7\u30c3\u30af\u304c\u3044\u3089\u306a\u3044\n        char c = 'a' + i;\n        if (table_.find(c) != table_.end()) {\n            double score = abs(2.5 - (double)(len_ / table_[c]));\n            if (score < best_score) {\n                best_score = score;\n                ans = c;\n            }\n        }\n    }\n\n    space_ = ans;\n    // swap\n    int tmp = table_[' '];\n    table_[' '] = table_[space_];\n    table_[space_] = tmp;\n}\n\nvoid Decrypter::doSpace() {\n    FindSpace();\n    ofs_ << \"{\" << endl;\n    ofs_ << \"\\\"char\\\":\\\"\" << space_ << \"\\\"\" <<  endl;\n    ofs_ << \"}\" << endl;\n}\n\nvoid Decrypter::Decrypt() {\n    FindSpace();\n    int best = table_[' '];\n    char max_char = ' ';\n    for (auto i = table_.begin(); i != table_.end(); i++) {\n        if (i->second > best) {\n            best = i->second;\n            max_char = i->first;\n        }\n    }\n    if (max_char != ' ') {\n        shift_ = max_char - 'e';\n        return;\n    }\n\n    // max_char = ' '\u306e\u5834\u5408\u3001\u3084\u308a\u76f4\u3059\n    table_.erase(max_char);\n    best = 0;\n    max_char = ' ';\n    for (auto i = table_.begin(); i != table_.end(); i++) {\n        if (i->second > best) {\n            best = i->second;\n            max_char = i->first;\n        }\n    }\n\n    shift_ = max_char - 'e';\n}\n\nchar Decrypter::shift_letter(char c) {\n    char newc;\n    if (islower(c)) {\n        newc = c - shift_;\n        if (newc < 'a') newc += 26;\n        if (newc > 'z') newc -= 26;\n        return newc;\n    }\n    if (isupper(c)) {\n        newc = c - shift_;\n        if (newc < 'A') newc += 26;\n        if (newc > 'Z') newc -= 26;\n    }\n    return newc;\n}\n\nvoid Decrypter::doDecrypt() {\n    Decrypt();\n    string str;\n    ifs_.clear();\n    ifs_.seekg(0, std::ios::beg);\n\n    while (getline(ifs_, str)) {\n        for (int i = 0; i < str.size(); i++) {\n            if (!isascii(str[i])) continue;\n            if (str[i] == space_)\n                str[i] = ' ';\n            else if (str[i] == ' ')\n                str[i] = space_;\n        }\n\n        for (int i = 0; i < str.size(); i++) {\n            if (!isalpha(str[i])) continue;\n            str[i] = shift_letter(str[i]);\n        }\n\n        ofs_ << str << endl;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    if (argc != 4) {\n        return 1;\n    }\n    string cmd = argv[1];\n    ifstream ifs(argv[2]);\n    ofstream ofs(argv[3]);\n\n    Decrypter dec(move(ifs), move(ofs));\n\n    if (cmd == \"count\") {\n        dec.doCount();\n        return 0;\n    }\n    if (cmd == \"space\") {\n        dec.doSpace();\n        return 0;\n    }\n    if (cmd == \"decrypt\") {\n        dec.doDecrypt();\n    }\n    return 0;\n}"}
{"id": 1677, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n        for (int i = 0; i < args.Length; i++)\n        {\n          var cutSpace = args[i].Trim();\n          if(cutSpace == \"\"){Console.WriteLine(\"invalid\");}\n\n          try{\n             int parseInt = int.Parse(cutSpace);\n             var mod3 = false;\n             var include3 = false;\n             if((parseInt%3)==0){mod3 = true;}\n             if(cutSpace.Contains(\"3\")){include3 = true;}\n\n             if(mod3==true && include3==false){Console.WriteLine(\"idiot\");}\n             else if(mod3==true && include3==true){Console.WriteLine(\"dumb\");}\n             else if(mod3==false && include3==true){Console.WriteLine(\"stupid\");}\n             else {Console.WriteLine(\"smart\");}\n          }catch(Exception e){Console.WriteLine(\"invalid\");}\n            // string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n            // Console.WriteLine(output);\n        }\n    }\n}\n"}
{"id": 1678, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int num;\n  \n int ctr=1;\n while(ctr<argc){\n   if(argv[ctr][0]>='a' && argv[ctr][0]<='z')\n   {\n     printf(\"invalid\\n\");\n     ctr++;\n     continue;\n   }\n   num=atoi(argv[ctr]);\n   \nint flag1=0,flag2=0;\nif(num%3==0)\n{\n  flag1=1;\n}\nint arrayn[100];\nint temp=num;\nint count=0;\nwhile(temp)\n{\n\nint data=temp%10;\narrayn[count]=data;\ntemp=temp/10;\ncount++;\n\n}\nint iter;\nfor(iter=0;iter<count;iter++)\n{\n\nif(arrayn[iter]==3)\n{\n\n  flag2=1;\n  break;\n}\n\n}\nif(num<=0 && num>1000)\n{\n\n  printf(\"invalid\");\n  printf(\"\\n\");\n  return 0;\n}\nelse\n{\n\nif(flag1==1 && flag2==1)\n{\nprintf(\"dumb\"); printf(\"\\n\");\n\n\n}\nelse\nif(flag1==1 && flag2==0)\n{\n\n  printf(\"idiot\"); printf(\"\\n\");\n}\nelse\nif(flag2==1 && flag1==0)\n{\n\n  printf(\"stupid\"); printf(\"\\n\");\n}\nelse\n{\n  printf(\"smart\"); printf(\"\\n\");\n}\n\n}\nctr++;\n}\n}"}
{"id": 1679, "language": "C#", "code": "using System;\n\npublic class CheckIdiots\n{\n    public static void Main(string[] args)\n    {\n        // This function checks inputs against the 3 Idiots criteria.\n        foreach (string input in args)\n        {\n            ProcessInput(input);\n        }\n    }\n\n    private static void ProcessInput(string input)\n    {\n        if (int.TryParse(input, out int number) && number >= 0 && number <= 1000)\n        {\n            if (number % 3 == 0 && input.Contains('3'))\n                Console.WriteLine(\"dumb\");\n            else if (number % 3 == 0)\n                Console.WriteLine(\"idiot\");\n            else if (input.Contains('3'))\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n        else\n        {\n            Console.WriteLine(\"invalid\");\n        }\n    }\n}"}
{"id": 1680, "language": "Python3", "code": "import sys\nimport json\n\ndef calculate_next_hand(records):\n    # Base sequence of robot's moves\n    base_sequence = [0, 1, 2]\n    patterns = {}\n\n    # Create robot's decision rules\n    for i in range(len(records) - 3):\n        current_pattern = (records[i][\"robot\"], records[i+1][\"robot\"], records[i+2][\"robot\"], records[i+3][\"you\"])\n        decision = records[i+3][\"robot\"]\n        patterns.setdefault(current_pattern, []).append(decision)\n\n    latest_pattern = (records[-3][\"robot\"], records[-2][\"robot\"], records[-1][\"robot\"], records[-1][\"you\"])\n    if latest_pattern in patterns:\n        decisions = patterns[latest_pattern]\n        return decisions[len(decisions) % 3]\n    return base_sequence[len(records) % 3]\n\ndef main(arguments):\n    with open(arguments[0], \"r\") as file:\n        game_records = json.load(file)\n    print(calculate_next_hand(game_records))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1681, "language": "Java", "code": "package track;\n\npublic class MyCoolProgram {\n    public static void main(String[] args) {\n\n        for (String inputString : args) {\n\n            String result = determineOutput(inputString);\n            System.out.println(result);\n\n        }\n    }\n\n    public static String determineOutput(String text) {\n        boolean valid = true;\n        if (text == null || text.length() == 0) {\n            valid = false;\n        } else {\n            for (char ch : text.toCharArray()) {\n                if (!Character.isDigit(ch)) {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n        \n        if (!valid) return \"invalid\";\n\n        int theNumber = Integer.parseInt(text);\n\n        if (theNumber < 0 || theNumber > 1000) {\n            return \"invalid\";\n        }\n\n        boolean isDivisibleByThree = theNumber % 3 == 0;\n        boolean hasTheDigitThree = text.indexOf('3') != -1;\n\n        if (isDivisibleByThree && hasTheDigitThree) {\n            return \"dumb\";\n        }\n        if (isDivisibleByThree) {\n            return \"idiot\";\n        }\n        if (hasTheDigitThree) {\n            return \"stupid\";\n        }\n        return \"smart\";\n    }\n}"}
{"id": 1682, "language": "Ruby", "code": "def main(argv)\n  argv.each_index do |i|\n    v = argv[i]\n    \n    # \u6570\u5b57\u4ee5\u5916\u304c\u542b\u307e\u308c\u308b\uff08\u30de\u30a4\u30ca\u30b9\u542b\u3080\uff09\n    if not !v.match(/\\D+/) then\n        puts('invalid')\n        next\n    end\n    \n    # 1000\u3088\u308a\u5927\u304d\u3044\n    if v.to_i > 1000 then\n        puts('invalid')\n        next\n    end\n    \n    # 3\u306e\u500d\u6570\n    if v.to_i % 3 == 0 then\n        if v.include?('3') then\n            puts('dumb')\n            next\n        else\n            puts('idiot')\n            next\n        end\n    end\n\n    # 3\u306e\u3064\u304f\n    if v.include?('3') then\n        puts('stupid')\n        next\n    end\n    \n    # \u305d\u308c\u4ee5\u5916\n    puts('smart')\n  end\nend\n\nmain(ARGV)\n"}
{"id": 1683, "language": "Java", "code": "import java.util.Scanner;\n\npublic class ChessQueens {\n    static char[][] board = new char[8][8];\n    static boolean[] col = new boolean[8];\n    static boolean[] diag1 = new boolean[15];\n    static boolean[] diag2 = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            col[c] = true;\n            diag1[r + c] = true;\n            diag2[r - c + 7] = true;\n        }\n\n        if (solve(0)) {\n            printBoard();\n        }\n    }\n\n    private static boolean solve(int row) {\n        if (row == 8) return true;\n\n        for (int j = 0; j < 8; j++) {\n            if (!col[j] && !diag1[row + j] && !diag2[row - j + 7]) {\n                board[row][j] = 'Q';\n                col[j] = true;\n                diag1[row + j] = true;\n                diag2[row - j + 7] = true;\n\n                if (solve(row + 1)) return true;\n\n                // Backtrack\n                board[row][j] = '.';\n                col[j] = false;\n                diag1[row + j] = false;\n                diag2[row - j + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void printBoard() {\n        for (char[] row : board) {\n            for (char cell : row) {\n                System.out.print(cell == 0 ? '.' : cell);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1684, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_valid_input(const char *input) {\n    for (int i = 0; input[i] != '\\0'; i++) {\n        if (!isdigit(input[i])) return 0;\n    }\n    return 1;\n}\n\nint number_contains_three(int number) {\n    while (number) {\n        if (number % 10 == 3) return 1;\n        number /= 10;\n    }\n    return 0;\n}\n\nvoid analyze_input(const char *input) {\n    if (!is_valid_input(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && number_contains_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (number_contains_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        analyze_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1685, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    printf (\"2\");\n  }\n  return 0;\n}\n"}
{"id": 1686, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueens {\n    static char[][] board = new char[8][8];\n    static boolean[] cols = new boolean[8];\n    static boolean[] diag1 = new boolean[15];\n    static boolean[] diag2 = new boolean[15];\n    static int queensPlaced = 0;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            cols[c] = true;\n            diag1[r + c] = true;\n            diag2[r - c + 7] = true;\n            queensPlaced++;\n        }\n        solve(0);\n        printBoard();\n    }\n\n    private static boolean solve(int row) {\n        if (row == 8) return true;\n\n        for (int col = 0; col < 8; col++) {\n            if (!cols[col] && !diag1[row + col] && !diag2[row - col + 7]) {\n                board[row][col] = 'Q';\n                cols[col] = true;\n                diag1[row + col] = true;\n                diag2[row - col + 7] = true;\n\n                if (solve(row + 1)) return true;\n\n                // Backtrack\n                board[row][col] = '.';\n                cols[col] = false;\n                diag1[row + col] = false;\n                diag2[row - col + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void printBoard() {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (board[i][j] == 0) {\n                    board[i][j] = '.';\n                }\n                System.out.print(board[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 1687, "language": "Java", "code": "public class IdiotsAnswer {\n  public static void main(String[] params) {\n    for(String p : params) {\n      try {\n        int value = Integer.parseInt(p);\n        if(value < 0 || value > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div = value % 3 == 0;\n        boolean has3 = p.contains(\"3\");\n        if(div && has3) {\n          System.out.println(\"dumb\");\n        } else if(div) {\n          System.out.println(\"idiot\");\n        } else if(has3){\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch(Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1688, "language": "Python3", "code": "import sys\nimport random\n\ndef main(args):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u300c\u30c9\u300d\u3068\u300c\u30ab\u300d\u3092\u751f\u6210\u3057\u3001\u7279\u5b9a\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u63a2\u3057\u307e\u3059\u3002\n    count = int(args[0])\n    sequence = \"\"\n    \n    for _ in range(count):\n        sound = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(sound, end=\"\")\n        sequence += sound\n            \n        if \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\" in sequence:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1689, "language": "Java", "code": "package track;\n\npublic class CommandLineConverter {\n    public static void main(String[] args) {\n        // Convert inputs into outputs via the algorithm\n\n        for (String arg : args) {\n            if (isValidInput(arg)) {\n                int value = Integer.parseInt(arg);\n                if (value >= 0 && value <= 1000) {\n                    evaluateValue(value);\n                } else {\n                    System.out.println(\"invalid\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isValidInput(String input) {\n        return input.matches(\"\\\\d+\");\n    }\n\n    private static void evaluateValue(int num) {\n        boolean factor3 = (num % 3 == 0);\n        boolean has3 = String.valueOf(num).contains(\"3\");\n\n        if (factor3 && has3) {\n            System.out.println(\"dumb\");\n        } else if (factor3) {\n            System.out.println(\"idiot\");\n        } else if (has3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1690, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nconst int N = 8;\nvector<string> board(N, string(N, '.'));\nbool used_row[N] = {}, used_col[N] = {}, used_d1[2*N] = {}, used_d2[2*N] = {};\n\nbool place(int row) {\n  if (row == N) return true;\n  for (int col = 0; col < N; ++col) {\n    if (board[row][col] == 'Q' ||\n        used_col[col] || used_d1[row+col] || used_d2[row-col+N-1])\n      continue;\n    board[row][col] = 'Q';\n    used_col[col] = used_d1[row+col] = used_d2[row-col+N-1] = 1;\n    if (place(row+1)) return true;\n    board[row][col] = '.';\n    used_col[col] = used_d1[row+col] = used_d2[row-col+N-1] = 0;\n  }\n  return false;\n}\n\nint main() {\n  int k;\n  cin >> k;\n  vector<pair<int, int>> fixed(k);\n  for(int i = 0; i < k; ++i) {\n    int r, c;\n    cin >> r >> c;\n    board[r][c] = 'Q';\n    used_col[c] = used_d1[r+c] = used_d2[r-c+N-1] = 1;\n  }\n  // \u65e2\u306b\u30af\u30a4\u30fc\u30f3\u306e\u7f6e\u304b\u308c\u3066\u3044\u308b\u884c\u306f\u7f6e\u304b\u305a\u306b\u9032\u3080\n  for(int r = 0; r < N; ++r){\n    bool found = false;\n    for(int c = 0; c < N; ++c)\n      if(board[r][c] == 'Q') found = true;\n    if (!found && place(r)) break;\n    if (found) continue;\n  }\n  for(auto &s : board)\n    cout << s << endl;\n  return 0;\n}"}
{"id": 1691, "language": "Java", "code": "package track;\n\npublic class AhoConverter {\n    public static void main(String[] arguments) {\n        if (arguments.length == 0) {\n            return;\n        }\n        for (String s : arguments) {\n            convertAndPrint(s);\n        }\n    }\n\n    public static void convertAndPrint(String val) {\n        if (!val.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        int num = Integer.valueOf(val);\n\n        if (num > 1000 || num < 0) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        boolean containsThree = hasThree(num);\n        boolean isDivisibleByThree = (num % 3 == 0);\n\n        if (isDivisibleByThree && containsThree) {\n            System.out.println(\"dumb\");\n        } else if (isDivisibleByThree) {\n            System.out.println(\"idiot\");\n        } else if (containsThree) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n    \n    // Check for 3 mathematically\n    private static boolean hasThree(int n) {\n        if (n == 0) return false;\n        int current = n;\n        while(current > 0) {\n            if (current % 10 == 3) {\n                return true;\n            }\n            current /= 10;\n        }\n        return false;\n    }\n}"}
{"id": 1692, "language": "C#", "code": "using System;\n\npublic class ThreeIdiotsApp\n{\n    static public void Main(string[] args)\n    {\n        foreach (string arg in args)\n        {\n            if (int.TryParse(arg, out int number))\n            {\n                if (number >= 0 && number <= 1000)\n                {\n                    bool isDivisibleByThree = (number % 3 == 0);\n                    bool containsThree = arg.Contains('3');\n\n                    if (isDivisibleByThree && containsThree)\n                    {\n                        Console.WriteLine(\"dumb\");\n                    }\n                    else if (isDivisibleByThree)\n                    {\n                        Console.WriteLine(\"idiot\");\n                    }\n                    else if (containsThree)\n                    {\n                        Console.WriteLine(\"stupid\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"smart\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1693, "language": "Python3", "code": "import sys\nimport re\n\ndef is_ascii(str):\n  return all(ord(c) < 128 for c in str)\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        # variable to keep track if it contains other than digit\n        alpha = False\n        #check if the string contains digit and update alpha accordingly\n        for i in v:\n           if(i.isdigit() == False):\n             alpha = True\n        #if the string contains digit print invalid and exit  \n        if(alpha):\n          print(\"invalid\")\n        else:\n          #convert string to number\n          a = int(v)\n          if (\"3\" in v and a%3==0):  #check if the number contains 3 and is divisible by 3\n            print(\"dumb\")\n          elif(\"3\" in v):             #check if the number contains 3\n            print(\"stupid\")\n          elif(a%3==0):               #check if the number is divisible by 3\n            print(\"idiot\")\n          else:\n            if(is_ascii(v)):          # check if the digits are in ascii range\n              print(\"smart\")\n            else:\n              print(\"invalid\")\n          \n    \n    \n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1694, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n        // for (int i = 0; i < args.Length; i++)\n        // {\n        //     string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n        //     Console.WriteLine(output);\n        // }\n\n        bool isIdiot=false,isStupid=false;\n        foreach(string arg in args)\n        {\n          isIdiot=false;isStupid=false;\n        int num;\n        if(int.TryParse(arg,out num))\n        {\n       if(num%3==0)\n          isIdiot=true;\n          \n        if(arg.Contains(\"3\"))\n          isStupid=true;\n          \n        if(isIdiot && isStupid)\n          Console.WriteLine(\"dump\");\n        else if (isIdiot)\n          Console.WriteLine(\"idiot\");\n        else if (isStupid)\n          Console.WriteLine(\"stupid\");\n        else \n          Console.WriteLine(\"smart\");\n        }\n        else{\n          Console.WriteLine(\"invalid\");\n        }\n        }\n      }\n    }\n"}
{"id": 1695, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\nimport java.io.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\npublic class App {\n    public static void main(String[] args) {\n        if (args.length < 3) return;\n        String cmd = args[0], infile = args[1], outfile = args[2];\n        String txt = \"\";\n        try { txt = Files.readString(Path.of(infile)); } catch (IOException e) {return;}\n\n        switch (cmd) {\n            case \"count\":\n                Map<Character, Integer> m = new HashMap<>();\n                for (char c : txt.toCharArray()) {\n                    if (Character.isAlphabetic(c) || c == ' ')\n                        m.put(c, m.getOrDefault(c, 0) + 1);\n                }\n                Map<String,Integer> outm = new HashMap<>();\n                for (Map.Entry<Character,Integer> e : m.entrySet())\n                    outm.put(String.valueOf(e.getKey()), e.getValue());\n                try (Writer out = new FileWriter(outfile)) {\n                    new ObjectMapper().writeValue(out, outm);\n                } catch (IOException e) {}\n                break;\n            case \"space\":\n                Map<Character, Integer> cMap = new HashMap<>();\n                for (char c : txt.toCharArray())\n                    if (c == ' ' || (c >= 'a' && c <= 'z'))\n                        cMap.put(c, cMap.getOrDefault(c, 0) + 1);\n                char best = ' ';\n                int maxf = cMap.getOrDefault(' ', 0);\n                for (char c = 'a'; c <= 'z'; c++) {\n                    if (cMap.getOrDefault(c, 0) > maxf) {\n                        maxf = cMap.get(c);\n                        best = c;\n                    }\n                }\n                try (Writer out = new FileWriter(outfile)) {\n                    ObjectMapper om = new ObjectMapper();\n                    ObjectNode obj = om.createObjectNode();\n                    obj.put(\"char\", String.valueOf(best));\n                    om.writeValue(out, obj);\n                } catch (IOException e) {}\n                break;\n            case \"decrypt\":\n                // step1: \u63a8\u6e2c\u3055\u308c\u305fspaceChar\u6c42\u3081\u308b\n                Map<Character,Integer> sc = new HashMap<>();\n                for (char c : txt.toCharArray())\n                    if (c == ' ' || (c >= 'a' && c <= 'z'))\n                        sc.put(c, sc.getOrDefault(c, 0) + 1);\n                char spacey = ' ';\n                int mx = sc.getOrDefault(' ', 0);\n                for (char c = 'a'; c <= 'z'; c++) {\n                    if (sc.getOrDefault(c, 0) > mx) {\n                        mx = sc.get(c); spacey = c;\n                    }\n                }\n                // swap\n                StringBuilder swapf = new StringBuilder(txt);\n                for (int i=0; i<swapf.length(); i++) {\n                    char c = swapf.charAt(i);\n                    if (c == spacey) swapf.setCharAt(i, ' ');\n                    else if (c == ' ') swapf.setCharAt(i, spacey);\n                }\n                String swapstr = swapf.toString();\n                // \u6587\u5b57\u983b\u5ea6\u304b\u3089\u30b7\u30d5\u30c8\n                int bestShift = 0, bestMatch = -1;\n                String refFreq = \"etaoinshrdlcumwfgypbvkjxqz\";\n                for (int j=0; j<26; j++) {\n                    Map<Character,Integer> ff = new HashMap<>();\n                    for (char c : swapstr.toCharArray()) {\n                        if (c >= 'a' && c <= 'z') {\n                            char org = (char)((c-'a'-j+26)%26+'a');\n                            ff.put(org, ff.getOrDefault(org, 0)+1);\n                        }\n                    }\n                    List<Map.Entry<Character,Integer>> li = new ArrayList<>(ff.entrySet());\n                    li.sort((a,b)->b.getValue()-a.getValue());\n                    int match = 0;\n                    for (int k=0; k<refFreq.length() && k<li.size(); k++)\n                        if (li.get(k).getKey() == refFreq.charAt(k)) match++;\n                    if (match > bestMatch) { bestMatch = match; bestShift = j; }\n                }\n                // decode\n                StringBuilder dec = new StringBuilder();\n                for (char c : swapstr.toCharArray()) {\n                    if (c >= 'a' && c <= 'z')\n                        dec.append((char)((c-'a'-bestShift+26)%26+'a'));\n                    else if (c >= 'A' && c <= 'Z')\n                        dec.append((char)((c-'A'-bestShift+26)%26+'A'));\n                    else\n                        dec.append(c);\n                }\n                try { Files.writeString(Path.of(outfile), dec); } catch (IOException e) {}\n                break;\n        }\n    }\n}"}
{"id": 1696, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Boolean containsthree(Integer num)\n  {\n    while(num!=0){\n      if(num%10 == 3)\n        return true;\n      num/=10;  \n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      Integer num,flag=0;\n\n      try{\n        num = Integer.parseInt(args[i]);\n        if(i==1 && num==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(num>=0 && num<=1000)\n        {\n          if(num%3==0 && containsthree(num))\n            System.out.println(\"dumb\");\n          else if(num%3==0 && !containsthree(num))\n            System.out.println(\"idiot\");\n          else if(containsthree(num))\n            System.out.println(\"stupid\");\n          else\n            System.out.println(\"smart\");\n        }\n        else \n        System.out.println(\"invalid\");\n        }\n        catch(NumberFormatException ne)\n        {\n\t\t\tSystem.out.println(\"invalid\");\n\t\t}\n\t}\n}\n}"}
{"id": 1697, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String elem : args) {\n      String state;\n      try {\n        int n = Integer.parseInt(elem);\n        if (n < 0 || n > 1000) {\n          state = \"invalid\";\n        } else if (n % 3 == 0 && elem.indexOf('3') >= 0) {\n          state = \"dumb\";\n        } else if (n % 3 == 0) {\n          state = \"idiot\";\n        } else if (elem.indexOf('3') >= 0) {\n          state = \"stupid\";\n        } else {\n          state = \"smart\";\n        }\n      } catch (Exception ex) {\n        state = \"invalid\";\n      }\n      System.out.println(state);\n    }\n  }\n}"}
{"id": 1698, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// ROT13\u5909\u63db\nstring rot13(const string& arg) {\n  string res = arg;\n  for (size_t i = 0; i < res.length(); i++) {\n    char c = res[i];\n    if ('a' <= c && c <= 'z') {\n      res[i] = ((c - 'a' + 13) % 26) + 'a';\n    } else if ('A' <= c && c <= 'Z') {\n      res[i] = ((c - 'A' + 13) % 26) + 'A';\n    } // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4ee5\u5916\u306f\u305d\u306e\u307e\u307e\n  }\n  return res;\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\n  for (int i = 1; i < argc; i++) {\n    cout << rot13(argv[i]) << endl;\n  }\n  return 0;\n}"}
{"id": 1699, "language": "Ruby", "code": "def main(argv)\n  argv.each_index do |i|\n    v = argv[i]\n    check_idiot v\n  end\nend\n\ndef check_idiot input\n\tinput_number = input.to_i\n\tif 0 <= input_number && input_number <= 1000\n\t\tif !input.scan(/\\D/).empty?\n\t\t\tputs 'invalid'\n\t\t\treturn\n\t\tend\n\t\tif input_number % 3 == 0 && input.include?(\"3\")\n\t\t\tputs 'dumb' \n\t\telsif input.include?(\"3\")\n\t\t\tputs 'stupid'\n\t\telsif input_number % 3 == 0\n\t\t\tputs 'idiot'\n\t\telse\n\t\t\tputs 'smart'\n\t\tend\n\telse\n\t\tputs 'invalid'\n\tend\nend\n\nmain(ARGV)"}
{"id": 1700, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # A simple and direct backtracking implementation, demonstrating clarity for beginners.\n\n    board_size = 8\n    \n    # Read k, the number of initially placed queens\n    initial_queens_count = int(sys.stdin.readline())\n\n    # Initialize the board\n    current_board = [['.' for _ in range(board_size)] for _ in range(board_size)]\n    \n    # A set to keep track of rows that already have pre-placed queens\n    pre_occupied_rows = set()\n\n    # Place the initial queens and mark their positions\n    for _ in range(initial_queens_count):\n        row_pos, col_pos = map(int, sys.stdin.readline().split())\n        current_board[row_pos][col_pos] = 'Q'\n        pre_occupied_rows.add(row_pos)\n\n    # Function to check if a position (r, c) is safe\n    def check_if_safe(r, c, board_grid):\n        # Check row and column\n        for i in range(board_size):\n            if i != c and board_grid[r][i] == 'Q': return False # Check row\n            if i != r and board_grid[i][c] == 'Q': return False # Check column\n        \n        # Check diagonals\n        # Top-left to bottom-right\n        for i in range(board_size):\n            if 0 <= r - i < board_size and 0 <= c - i < board_size and \\\n               (r - i != r or c - i != c) and board_grid[r - i][c - i] == 'Q':\n                return False\n            if 0 <= r + i < board_size and 0 <= c + i < board_size and \\\n               (r + i != r or c + i != c) and board_grid[r + i][c + i] == 'Q':\n                return False\n\n        # Top-right to bottom-left\n        for i in range(board_size):\n            if 0 <= r - i < board_size and 0 <= c + i < board_size and \\\n               (r - i != r or c + i != c) and board_grid[r - i][c + i] == 'Q':\n                return False\n            if 0 <= r + i < board_size and 0 <= c - i < board_size and \\\n               (r + i != r or c - i != c) and board_grid[r + i][c - i] == 'Q':\n                return False\n        return True\n\n    # Recursive function to solve the N-Queens problem\n    def solve_queens_problem(row_index):\n        # If all rows have been successfully processed, a solution is found\n        if row_index == board_size:\n            return True\n\n        # If this row already has a pre-placed queen, skip it and move to the next\n        if row_index in pre_occupied_rows:\n            return solve_queens_problem(row_index + 1)\n\n        # Try placing a queen in each column of the current row\n        for col_index in range(board_size):\n            # Temporarily place a queen to check safety (inefficient, but beginner-friendly)\n            # This is less efficient than passing conflict arrays/sets\n            # The check_if_safe function should be re-written to work with the current_board state.\n            # A more common beginner approach is to first set, then check, then backtrack.\n            # However, for an N-Queens problem, this means check_if_safe must look at current_board for ALL queens.\n            # The current setup of `check_if_safe` with `board_grid` expects a fully formed board or careful temporary placement.\n            # Let's adjust `check_if_safe` to work correctly.\n\n            # We need to make sure `check_if_safe` only checks conflicts with ALREADY PLACED queens, not the one we are considering.\n            # Since this is a beginner example, the `is_safe` function should directly check the current board state.\n            # The previous solutions used boolean arrays to avoid re-scanning the board.\n            # For this simple solution, `check_if_safe` would indeed scan the whole board, making it less efficient but more direct.\n\n            # Place queen temporarily to run conflict check\n            current_board[row_index][col_index] = 'Q'\n\n            if check_if_safe(row_index, col_index, current_board):\n                # If safe, recurse to place the next queen\n                if solve_queens_problem(row_index + 1):\n                    return True # Solution found\n            \n            # Backtrack: remove the queen (whether it was safe or not for recursion)\n            current_board[row_index][col_index] = '.'\n        \n        return False # No solution for this row\n\n    # Start the solving process\n    solve_queens_problem(0)\n\n    # Print the final solved board\n    for r in range(board_size):\n        print(\"\".join(current_board[r]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1701, "language": "Python3", "code": "import sys\ndef main(argv):\n  for value in argv:\n    if(value.isnumeric()):\n      if('3' in value):\n        if(int(value)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(value)%3==0):\n        print(\"idiot\")\n      else:\n        if(value=='\uff11\uff13'):\n          print(\"invalid\")\n        else:\n          print(\"smart\")\n    else:\n      print(\"invalid\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1702, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\n// 9\u9032\u6570\u306e\u6587\u5b57\u5217\u309210\u9032\u6570\u306b\u5909\u63db\u3059\u308b\nlong long base9_to_decimal(const char *s) {\n    long long num = 0;\n    int i = 0;\n    while (s[i] != '\\0') {\n        num = num * 9 + (s[i] - '0');\n        i++;\n    }\n    return num;\n}\n\n// 10\u9032\u6570\u30929\u9032\u6570\u3067\u8868\u793a\u3059\u308b\u518d\u5e30\u95a2\u6570\nvoid print_as_base9(long long n) {\n    if (n == 0) {\n        return;\n    }\n    print_as_base9(n / 9);\n    printf(\"%lld\", n % 9);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        return 1;\n    }\n\n    char first_num_str[150];\n    char operator_char;\n    char second_num_str[150];\n    \n    sscanf(argv[1], \"%s %c %s\", first_num_str, &operator_char, second_num_str);\n\n    long long first_val = base9_to_decimal(first_num_str);\n    long long second_val = base9_to_decimal(second_num_str);\n\n    long long result_val;\n    if (operator_char == '+') {\n        result_val = first_val + second_val;\n    } else {\n        result_val = first_val * second_val;\n    }\n\n    if (result_val == 0) {\n        printf(\"0\\n\");\n    } else {\n        print_as_base9(result_val);\n        printf(\"\\n\");\n    }\n\n    return 0;\n}"}
{"id": 1703, "language": "Python", "code": "import sys\nargs=sys.argv[1:]\ndef validate_input(inp):\n  if not inp.isdigit():\n    return False\n  if int(inp)>1000 or int(inp)<0:\n    return False\n  return True\ndef print_ans(inp):\n  has_3=False\n  div_3=False\n  num=int(inp)\n  if num%3==0:\n    div_3=True\n  if '3' in inp:\n    has_3=True\n  if has_3 and div_3:\n    print(\"dumb\")\n  elif has_3:\n    print(\"stupid\")\n  elif div_3:\n    print(\"idiot\")\n  else:\n    print(\"smart\")\nfor arg in args:\n  if validate_input(arg):\n    print_ans(arg)\n  else:\n    print(\"invalid\")"}
{"id": 1704, "language": "Java", "code": "import java.util.Scanner;\n\npublic class Solve8Queen {\n  static int N = 8;\n  static boolean[] colUsed = new boolean[N];\n  static boolean[] diagUsed1 = new boolean[2 * N - 1];\n  static boolean[] diagUsed2 = new boolean[2 * N - 1];\n  static int[] queenCols = new int[N];\n  static int[][] fixedQs;\n  static int fixedK;\n  static boolean done = false;\n\n  static boolean isFixedInRow(int r) {\n    for (int i = 0; i < fixedK; i++) {\n      if (fixedQs[i][0] == r) return true;\n    }\n    return false;\n  }\n\n  static int getFixedCol(int r) {\n    for (int i = 0; i < fixedK; i++) {\n      if (fixedQs[i][0] == r) return fixedQs[i][1];\n    }\n    return -1;\n  }\n\n  static void backtrack(int r) {\n    if (r == N) {\n      done = true;\n      return;\n    }\n    if (done) return;\n\n    if (isFixedInRow(r)) {\n      int c = getFixedCol(r);\n      if (!colUsed[c] && !diagUsed1[r + c] && !diagUsed2[r - c + N - 1]) {\n        queenCols[r] = c;\n        colUsed[c] = true;\n        diagUsed1[r + c] = true;\n        diagUsed2[r - c + N - 1] = true;\n\n        backtrack(r + 1);\n\n        colUsed[c] = false;\n        diagUsed1[r + c] = false;\n        diagUsed2[r - c + N - 1] = false;\n      }\n    } else {\n      for (int c = 0; c < N; c++) {\n        if (colUsed[c] || diagUsed1[r + c] || diagUsed2[r - c + N - 1]) continue;\n        queenCols[r] = c;\n        colUsed[c] = true;\n        diagUsed1[r + c] = true;\n        diagUsed2[r - c + N - 1] = true;\n\n        backtrack(r + 1);\n\n        if (done) return;\n\n        colUsed[c] = false;\n        diagUsed1[r + c] = false;\n        diagUsed2[r - c + N - 1] = false;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    fixedK = sc.nextInt();\n    fixedQs = new int[fixedK][2];\n    for (int i = 0; i < fixedK; i++) {\n      fixedQs[i][0] = sc.nextInt();\n      fixedQs[i][1] = sc.nextInt();\n    }\n    for (int i = 0; i < N; i++) queenCols[i] = -1;\n\n    backtrack(0);\n\n    for (int r = 0; r < N; r++) {\n      StringBuilder line = new StringBuilder();\n      for (int c = 0; c < N; c++) {\n        if (queenCols[r] == c) line.append('Q');\n        else line.append('.');\n      }\n      System.out.println(line.toString());\n    }\n  }\n}"}
{"id": 1705, "language": "Java", "code": "package track;\n\npublic class ThreeMultiple {\n    public static void main(String[] args) {\n        for(String arg: args) {\n            compute(arg);\n        }\n    }\n\n    public static void compute(String s) {\n        if (!s.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n        \n        // Check for \"dumb\" case first.\n        if (n % 3 == 0 && s.contains(\"3\")) {\n            System.out.println(\"dumb\");\n        } else if (n % 3 == 0) {\n            System.out.println(\"idiot\");\n        } else if (s.contains(\"3\")) {\n            System.out.println(\"stupid\");\n        } else if (n % 3 != 0 && !s.contains(\"3\")) { // explicit check for \"smart\"\n            System.out.println(\"smart\");\n        } else {\n            // This case should not be reached with the current logic\n            System.out.println(\"invalid\");\n        }\n    }\n}"}
{"id": 1706, "language": "C#", "code": "using System;\n\nclass IdiotsJudge\n{\n    static void Main(string[] args)\n    {\n        foreach (var x in args)\n        {\n            if (!int.TryParse(x, out var num) || num < 0 || num > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divisibleBy3 = (num % 3 == 0);\n            bool hasDigit3 = x.Contains('3');\n\n            if (divisibleBy3 && hasDigit3)\n                Console.WriteLine(\"dumb\");\n            else if (divisibleBy3)\n                Console.WriteLine(\"idiot\");\n            else if (hasDigit3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 1707, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\nstruct return_type\n{\n  int number;\n  int is_contains_3;\n  int valid;\n};\ntypedef struct return_type return_type;\nint check_numb(char charac)\n{\n  if((charac<48) || (charac>57))\n  {\n    return 0;\n  }\n  return 1;\n}\nreturn_type str_to_int(char string[])\n{\n  int len = strlen(string);\n  int number = 0;\n  int is_3 = 0;\n  for(int i=0;i<len;i++)\n  {\n    if(check_numb(string[i])==0)\n    {\n      return(return_type){0,0,0};\n    }\n    if(((int)string[i]-48)==3)\n    {\n      is_3=1;\n    }\n    number=number*10+((int)string[i]-48);\n  }\n  return(return_type){number,is_3,1};\n}\n\nint main(int argc,char *argv[])\n{\n  for(int i=1;i<argc;i++)\n  {\n    return_type var=str_to_int(argv[i]);\n    if(var.valid==0)\n    {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(var.is_contains_3 && (var.number%3==0))\n    {\n      printf(\"dumb\\n\");\n    }\n    else if(var.is_contains_3)\n    {\n      printf(\"stupid\\n\");\n    }\n    else if(var.number%3==0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else\n    {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 1708, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid judge(const char* s) {\n    char *end;\n    long val = strtol(s, &end, 10);\n    if (*end || s == end || val < 0 || val > 1000) {\n        puts(\"invalid\");\n        return;\n    }\n    int d3 = val % 3 == 0;\n    char tmp[5];\n    sprintf(tmp, \"%ld\", val);\n    int h3 = strchr(tmp, '3') != NULL;\n\n    if (d3 && h3) puts(\"dumb\");\n    else if (d3) puts(\"idiot\");\n    else if (h3) puts(\"stupid\");\n    else puts(\"smart\");\n}\n\nint main(int argc, char *argv[]) {\n    char **p = argv + 1;\n    while (*p) {\n        judge(*p);\n        p++;\n    }\n    return 0;\n}"}
{"id": 1709, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.util.regex.Pattern;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    // Pattern p = Pattern.compile(\"[^0-9]\");\n\t\t// Arrays.asList(args).forEach(s -> {\n    //   if (p.matcher(s).find()) {\n    //     System.out.println(\"invalid\");\n    //   } else {\n    //     int num = Integer.parseInt(s);\n    //     String x = num % 3 == 0 ? (s.contains(\"3\") ? \"dumb\" : \"idiot\")\n    //                             : s.contains(\"3\") ? \"stupid\" : \"smart\";\n    //     System.out.println(x);\n    //   }\n    // });\n    Arrays.asList(args).stream()\n    .map(PersonFactory::createPerson)\n    .forEach(Person::speak);\n\t}\n\n  private static class PersonFactory {\n\n    public static Person createPerson(String s) {\n      Pattern p = Pattern.compile(\"[^0-9]\");\n      if (p.matcher(s).find()) {\n        return new UnknownPerson();\n      } else {\n        int num = Integer.parseInt(s);\n        boolean isContains = s.contains(\"3\");\n        return num % 3 == 0 ? (isContains ? new DumbPerson() : new IdiotPerson())\n                                : isContains ? new StupidPerson() : new SmartPerson();\n      }\n    }\n\n  }\n\n  private interface Person {\n    void speak();\n  }\n\n  private static class SmartPerson implements Person {\n    @Override\n    public void speak() {\n      System.out.println(\"smart\");\n    }\n  }\n\n  private static class StupidPerson implements Person {\n    @Override\n    public void speak() {\n      System.out.println(\"stupid\");\n    }\n  }\n\n  private static class IdiotPerson implements Person {\n    @Override\n    public void speak() {\n      System.out.println(\"idiot\");\n    }\n  }\n\n  private static class DumbPerson implements Person {\n    @Override\n    public void speak() {\n      System.out.println(\"dumb\");\n    }\n  }\n\n  private static class UnknownPerson implements Person {\n    @Override\n    public void speak() {\n      System.out.println(\"invalid\");\n    }\n  }\n}\n"}
{"id": 1710, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    valid=[]\n    for i in range(0,1001):\n      valid.append(str(i))\n\n    for i, v in enumerate(argv):\n        if(v.isdigit() and v in valid):\n          \n          t=int(v)\n          \n          if(t>=0 and t<=1000):\n            if(t%3==0 and '3' not in str(t)):\n              print(\"idiot\")\n            elif('3' in str(t) and t%3!=0):\n              print(\"stupid\")\n            elif(t%3==0 and '3' in str(t)):\n              print(\"dumb\")\n            else:\n              print(\"smart\")\n          else:\n            print(\"invalid\")\n        else:\n          print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1711, "language": "Python3", "code": "import sys\n\ndef is_placeable(queens, row, column):\n    for r in range(row):\n        c = queens[r]\n        if c == column or abs(c - column) == abs(r - row):\n            return False\n    return True\n\ndef place_queens(queens, row):\n    if row == len(queens):\n        return True\n    for column in range(8):\n        if is_placeable(queens, row, column):\n            queens[row] = column\n            if place_queens(queens, row + 1):\n                return True\n            queens[row] = -1\n    return False\n\ndef display(queens):\n    for row in range(8):\n        line = ['.'] * 8\n        line[queens[row]] = 'Q'\n        print(''.join(line))\n\ndef main():\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    queens = [-1] * 8\n\n    for i in range(1, k + 1):\n        r, c = map(int, input_data[i].split())\n        queens[r] = c\n\n    place_queens(queens, 0)\n    display(queens)\n\nif __name__ == '__main__':\n    main()"}
{"id": 1712, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # create board and list to store queens\n  dic = dict()\n\n  # read file\n  f = open(argv[0])\n  n = int(f.readline())\n  line = f.readline()\n\n  # parse\n  while line:\n    line.replace('\\n','')\n    key, value = [int(n) for n in line.split()]\n    dic[key] = value\n    line = f.readline()\n  def DFS(queens, xy_diff, xy_sum):\n    p = len(queens)\n    if p == 8:\n      result.append(queens)\n      return\n    elif p in dic:\n      q = dic[p]\n      if q not in queens and p-q not in xy_diff and p + q not in xy_sum:\n        DFS(queens+[q], xy_diff+[p-q], xy_sum+[p+q])\n    else:\n      for q in range(8):\n        if q not in queens and p-q not in xy_diff and p+q not in xy_sum:\n          DFS(queens+[q], xy_diff+[p-q], xy_sum+[p+q])\n  result = []\n  DFS([], [], [])\n\n  for p in ['.'*i + 'Q' + '.'*(7-i) for i in result[0]]:\n    print(p)\n  print('\\n')\n      \n\n\n\n\n\n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1713, "language": "C", "code": " #include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int number,flag1,flag2;\n  for (int i = 1; i < argc; i++) {\n  flag1=0;flag2=0;\n  if((argv[i][0]<48||argv[i][0]>57))\n  {\n    printf(\"invalid\\n\");\n    continue;\n  }\n  number=atoi(argv[i]);\n  if(number%3==0)\n    flag1++;\n  while(number!=0)\n  {\n    int digit=number%10;\n    number=number/10;\n    if(digit==3)\n    {\n      flag2++;\n      break;\n    }\n  }\n  if(flag1==1 && flag2==1)\n  {\n    printf(\"dumb\\n\");\n  }\n  else if(flag1==1 && flag2==0)\n  {\n    printf(\"idiot\\n\");\n  }\n  else if(flag1==0 && flag2==1)\n  {\n    printf(\"stupid\\n\");\n  }\n  else if(flag1==0 && flag2==0)\n  {\n    printf(\"smart\\n\");\n  }\n\n  }\n  return 0;\n}\n"}
{"id": 1714, "language": "Python3", "code": "import sys\nimport json\nimport numpy as np\nimport requests\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n     #print(\"argv[{0}]: {1}\".format(i, v))\n    filename=argv[0]\n  json_file=open(filename)\n  json_str=json_file.read()\n  json_data=json.loads(json_str)\n  size=len(json_data)\n  json_data=json.loads(json_str)[size-1]\n\n\n  r=np.array(json_data['robot'])\n  y=np.array(json_data['you'])\n\n  if(y==0):\n    computer=1\n  elif(y==1):\n    computer=2\n  elif(y==2):\n    computer=0\n\n\n  if(computer==0):\n    print (2)\n  elif(computer==1):\n    print (0)\n  elif(computer==2):\n    print (1)\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1715, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    if len(argv) != 3: return # input error\n\n    command = argv[0]\n    if command not in ['count', 'space', 'decrypt']: return # input error\n\n    infile = argv[1]\n    outfile = argv[2]\n    intext = read_file(infile)\n\n    # count\n    count_d = count_chars(intext)\n    if command == 'count': \n        write_file_json(count_d, outfile)\n        return\n\n    # space\n    space_char = find_space(intext, 0) \n      # target=4.5?\n      # when target=0, equivalent to finding min average length\n    if command == 'space':\n        write_file_json({\"char\": space_char}, outfile)\n        return\n\n    # shift\n    count_d[' '], count_d[space_char] = count_d[space_char], count_d[' ']\n    del count_d[' ']\n    most_freq = max(count_d.keys(), key=lambda x: count_d[x])\n    shift = ord(most_freq) - ord('e')\n\n    # decrypt\n    decrypted_text = decrypt(intext, space_char, shift)\n    write_file(decrypted_text, outfile)\n    \n\ndef read_file(filename):\n    with open(filename, 'r') as f:\n        content = f.read()\n    return content\n\ndef write_file_json(data, filename):\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n\ndef write_file(data, filename):\n    with open(filename, 'w') as f:\n        f.write(data)\n\ndef find_space(text, target):\n    min_diff = len(text)\n    space_char = ''\n\n    # alpha + ' '\n    all_chars = set(text + ' ')\n\n    for c in all_chars:\n        if not is_valid(c): continue\n        tokens = text.split(c)\n        avg_len = (1.0 * sum([len(token) for token in tokens])) / len(tokens)\n        diff = abs(avg_len - target)\n        if diff < min_diff:\n            min_diff = diff\n            space_char = c\n    return space_char\n\ndef count_chars(text):\n    # build dictionary\n    d = {}\n    d[' '] = 0\n    for i in range(26):\n        d[chr(ord('a')+i)] = 0\n        d[chr(ord('A')+i)] = 0\n\n    for c in text:\n        if c in d: d[c] += 1\n    return d\n\ndef is_valid(c):\n    return c.isalpha() or c == ' '\n\ndef decrypt(text, space_char, shift):\n    out = []\n    for i, c in enumerate(text):\n        if not is_valid(c): out.append(c)\n        else:\n            \n            # shift\n            if c >= 'a' and c <= 'z': \n                ori = chr((ord(c) - shift - ord('a'))%26 + ord('a'))\n                out.append(ori)\n            elif c >= 'A' and c <= 'Z': \n                ori = chr((ord(c) - shift - ord('A'))%26 + ord('A'))\n                out.append(ori)\n\n\n            # space\n            if c == ' ': out.append(space_char)\n            elif c == space_char: out.append(' ')\n    return ''.join(out)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1716, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      int lt=0;\n     /* for(i=0;i<args[i].length();i++)\n      {\n        char h=output.charAt(i);\n        int te=0;\n        for(i=0;i<=1000;i++)\n        {\n          if(h==i)\n          {\n            te=1;\n            break;\n          }\n        }\n        if(te==0)\n        {\n          System.out.println(\"invalid\");\n          lt=1;\n          break;\n        }\n      }\n      if(lt==0)\n      {*/\n    try\n    {\n    int n=Integer.parseInt(args[i]);\n\n      if(n>=0&&n<=1000)\n      {\n        int k,sub,fl=0,r;\n        sub=n;\n        while(sub!=0)\n        {\n          r=sub%10;\n          sub=sub/10;\n          if(r==3)\n          {\n            fl=1;\n            break;\n          }\n        }\n        \n        if(fl==1&&n%3==0)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(fl==1)\n      {\n        System.out.println(\"stupid\");\n      }\n      else if(n%3==0)\n      {\n        System.out.println(\"idiot\");\n      }\n      else\n      {\n        System.out.println(\"smart\");\n      }\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t\t\n\t\n  catch(Exception e)\n  {\nSystem.out.println(\"invalid\");\n  }\n      \n  }\n}\n}\n"}
{"id": 1717, "language": "Python3", "code": "import sys\n\nclass BigInt:\n    BASE = 1000  # 3\u6841\n    WIDTH = 3\n\n    def __init__(self, s):\n        if isinstance(s, list):\n            self.neg = False\n            self.digits = s\n            return\n        s = s.strip()\n        self.neg = False\n        # \u30ab\u30c3\u30b3\u3064\u304d\u8ca0\u6570\u304b\n        if s.startswith('(') and s.endswith(')') and s[1] == '-':\n            self.neg = True\n            s = s[2:-1]\n        elif s.startswith('-'):\n            self.neg = True\n            s = s[1:]\n        s = s.lstrip('0') or '0'\n        # \u4e0b\u4f4d\u304b\u30893\u6841\u3067\u533a\u5207\u308b\n        self.digits = []\n        for i in range(len(s), 0, -self.WIDTH):\n            left = max(0, i-self.WIDTH)\n            chunk = s[left:i]\n            self.digits.append(int(chunk))\n        self.digits = self._trim(self.digits)\n\n    def copy(self):\n        return BigInt(list(self.digits))\n\n    @staticmethod\n    def _trim(a):\n        i = len(a)-1\n        while i > 0 and a[i] == 0:\n            i -= 1\n        return a[:i + 1]\n\n    @staticmethod\n    def _compare_abs(a, b):\n        # a, b: [digits], \u4e0b\u4f4d\u304b\u3089\n        if len(a) != len(b):\n            return len(a) - len(b)\n        for i in range(len(a)-1, -1, -1):\n            if a[i] != b[i]:\n                return a[i] - b[i]\n        return 0\n\n    def abs_greater(self, other):\n        return self._compare_abs(self.digits, other.digits) > 0\n\n    def __add__(self, other):\n        if self.neg == other.neg:\n            digits = []\n            carry = 0\n            n = max(len(self.digits), len(other.digits))\n            for i in range(n):\n                x = self.digits[i] if i < len(self.digits) else 0\n                y = other.digits[i] if i < len(other.digits) else 0\n                s = x + y + carry\n                digits.append(s % self.BASE)\n                carry = s // self.BASE\n            if carry: digits.append(carry)\n            res = BigInt(digits)\n            res.neg = self.neg\n            return res\n        else:\n            # a + (-b) = a - b, (-a) + b = b - a\n            if self.neg:\n                # (-a) + b = b - a\n                return other - (-self)\n            else:\n                # a + (-b) = a - b\n                return self - (-other)\n\n    def __neg__(self):\n        res = self.copy()\n        if not (len(self.digits) == 1 and self.digits[0] == 0):  # except for 0\n            res.neg = not self.neg\n        return res\n\n    def __sub__(self, other):\n        if self.neg == other.neg:\n            cmp = self._compare_abs(self.digits, other.digits)\n            if cmp == 0:\n                return BigInt('0')\n            if cmp > 0:\n                # self > other\n                digits = []\n                borrow = 0\n                for i in range(len(self.digits)):\n                    x = self.digits[i]\n                    y = other.digits[i] if i < len(other.digits) else 0\n                    t = x - y - borrow\n                    if t < 0:\n                        t += self.BASE\n                        borrow = 1\n                    else:\n                        borrow = 0\n                    digits.append(t)\n                digits = self._trim(digits)\n                res = BigInt(digits)\n                res.neg = self.neg\n                return res\n            else:\n                # self < other\n                return -(other - self)\n        else:\n            # a - (-b) = a + b, (-a) - b = -(a + b)\n            return self + (-other)\n\n    def __mul__(self, other):\n        M = len(self.digits)\n        N = len(other.digits)\n        result = [0] * (M + N)\n        for i in range(M):\n            carry = 0\n            for j in range(N):\n                result[i + j] += self.digits[i] * other.digits[j] + carry\n                carry = result[i + j] // self.BASE\n                result[i + j] %= self.BASE\n            k = i + N\n            while carry > 0:\n                result[k] += carry\n                carry = result[k] // self.BASE\n                result[k] %= self.BASE\n                k += 1\n        result = self._trim(result)\n        res = BigInt(result)\n        res.neg = self.neg != other.neg\n        if len(res.digits)==1 and res.digits[0]==0:\n            res.neg = False\n        return res\n\n    def __floordiv__(self, other):\n        # only integer division\n        assert not (len(other.digits) == 1 and other.digits[0] == 0)\n        # Special case for small divisor\n        if len(other.digits) == 1 and other.digits[0] < self.BASE:\n            r = 0\n            result = []\n            for i in range(len(self.digits)-1, -1, -1):\n                v = r * self.BASE + self.digits[i]\n                d = v // other.digits[0]\n                r = v % other.digits[0]\n                result.append(d)\n            result = result[::-1]\n            result = self._trim(result)\n            res = BigInt(result)\n            res.neg = self.neg != other.neg\n            if len(res.digits)==1 and res.digits[0]==0:\n                res.neg = False\n            return res\n        # General long division\n        n = len(self.digits)\n        m = len(other.digits)\n        cmp = self._compare_abs(self.digits, other.digits)\n        if cmp < 0:\n            return BigInt('0')\n        A = self.digits[:]\n        B = other.digits[:]\n        res = [0] * (n - m + 1)\n        # Normalize\n        norm = self.BASE // (B[-1] + 1)\n        def mul_c(A, c):\n            # A * c\n            x = []\n            carry = 0\n            for d in A:\n                t = d * c + carry\n                x.append(t % self.BASE)\n                carry = t // self.BASE\n            if carry:\n                x.append(carry)\n            return x\n        def sub_c(A, B):\n            borrow = 0\n            for i in range(len(B)):\n                if i >= len(A):\n                    break\n                A[i] -= B[i] + borrow\n                if A[i] < 0:\n                    A[i] += self.BASE\n                    borrow = 1\n                else:\n                    borrow = 0\n            for i in range(len(B), len(A)):\n                if borrow == 0:\n                    break\n                A[i] -= borrow\n                if A[i] < 0:\n                    A[i] += self.BASE\n                    borrow = 1\n                else:\n                    borrow = 0\n            return\n        u = mul_c(A, norm)\n        v = mul_c(B, norm)\n        u += [0]  # for convenience\n        len_u = len(u)\n        len_v = len(v)\n        for j in range(n - m, -1, -1):\n            uu = u[j + m] * self.BASE + (u[j + m - 1] if j + m - 1 >= 0 else 0)\n            d1 = v[-1]\n            qhat = uu // d1\n            if qhat >= self.BASE:\n                qhat = self.BASE - 1\n            # multiply and subtract\n            t = mul_c(v, qhat)\n            if len(t) < m + 1:\n                t += [0]*(m+1 - len(t))\n            flag = False\n            # check if need to adjust\n            for k in range(m, -1, -1):\n                if u[j + k] != t[k]:\n                    flag = u[j + k] > t[k]\n                    break\n            if not flag:\n                qhat -= 1\n                t = mul_c(v, qhat)\n                if len(t) < m + 1:\n                    t += [0]*(m+1 - len(t))\n            sub_c(u[j:j + m + 1], t)\n            while u[j + m] < 0:\n                qhat -= 1\n                carry = 0\n                for k in range(m):\n                    s = u[j + k] + v[k] + carry\n                    u[j + k] = s % self.BASE\n                    carry = s // self.BASE\n                u[j + m] += carry\n            res[j] = qhat\n        res = res[::-1]\n        res = self._trim(res)\n        ans = BigInt(res)\n        ans.neg = self.neg != other.neg\n        if len(ans.digits) == 1 and ans.digits[0] == 0:\n            ans.neg = False\n        return ans\n\n    def __str__(self):\n        s = []\n        for d in reversed(self.digits):\n            if s:\n                s.append(f\"{d:0{self.WIDTH}d}\")\n            else:\n                s.append(str(d))\n        numstr = ''.join(s)\n        # 3\u6841\u533a\u5207\u308a\n        parts = []\n        while numstr:\n            if len(numstr) <= 3:\n                parts.append(numstr)\n                break\n            parts.append(numstr[-3:])\n            numstr = numstr[:-3]\n        parts = parts[::-1]\n        result = \",\".join(parts)\n        if self.neg:\n            result = f\"(-{result})\"\n        return result\n\ndef parse_expr(expr):\n    expr = expr.strip()\n    parts = []\n    i = 0\n    n = len(expr)\n    # left\n    if expr[i] == '(':\n        j = expr.find(')')\n        left = expr[:j+1]\n        i = j + 1\n    else:\n        j = expr.find(' ')\n        left = expr[:j]\n        i = j\n    # op\n    while i < n and expr[i] == ' ':\n        i += 1\n    op = expr[i]\n    i += 1\n    while i < n and expr[i] == ' ':\n        i += 1\n    # right\n    if expr[i] == '(':\n        right = expr[i:expr.find(')',i)+1]\n    else:\n        right = expr[i:]\n    return left, op, right\n\ndef main(argv):\n    expr = argv[0]\n    left, op, right = parse_expr(expr)\n    a = BigInt(left)\n    b = BigInt(right)\n    if op == '+':\n        res = a + b\n    elif op == '-':\n        res = a - b\n    elif op == '*':\n        res = a * b\n    elif op == '/':\n        res = a // b\n    print(str(res))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1718, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String a : args) {\n      String z;\n      try {\n        int q = Integer.parseInt(a);\n        if (q < 0 || q > 1000) {\n          z = \"invalid\";\n        } else if (q % 3 == 0 && a.contains(\"3\")) {\n          z = \"dumb\";\n        } else if (q % 3 == 0) {\n          z = \"idiot\";\n        } else if (a.contains(\"3\")) {\n          z = \"stupid\";\n        } else {\n          z = \"smart\";\n        }\n      } catch (Exception e) {\n        z = \"invalid\";\n      }\n      System.out.println(z);\n    }\n  }\n}"}
{"id": 1719, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\n#define newl \"\\n\"\n\nlong long charToLongLong(char *s){\n    int i, len;\n    long long f, ans = 0LL;\n    for(i = 0; ; i++){\n        if(s[i] == '\\0') {\n            len = i;\n            break;\n        }\n    }\n\n    for(i = len - 1, f = 1LL; i >= 0; i--, f *= 10LL){\n        ans += (s[i] - 48)*f;\n    }\n\n    return ans;\n}\n\nint main(int argc, char *argv[]) {\n  int j, len, sum;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n\n    len = strlen(argv[i]);\n\n    \n\n    bool case1 = false, case2 = false, case3 = false, case4 = false, case5 = false;\n\n    if(len > 10) case5 = true;\n\n    for(j = 0, sum = 0; j < len; j++){\n      if(argv[i][j] >= '0' && argv[i][j] <= '9'){\n        int d = argv[i][j] - 48;\n        sum += d;             /// to get sum of digits\n        if(d == 3) case2 = true;\n      }\n      else{\n        case5 = true;\n        break;\n      }\n    }\n    long long val = 0LL;\n    if(case5 == false){\n      val = charToLongLong(argv[i]);\n    }\n    if(val < 0LL || val > 1000LL) case5 = true;\n\n    if(sum%3 == 0) case1 = true; // divisible by 3 or not\n\n    if(case5 == true){\n      cout << \"invalid\" << newl;\n    }\n    else if(case1 && case2){\n      cout << \"dumb\" << newl;\n    }\n    else if(case1){\n      cout << \"idiot\" << newl;\n    }\n    else if(case2){\n      cout << \"stupid\" << newl;\n    }\n    else{\n      cout << \"smart\" << newl;\n    }\n\n  }\n  return 0;\n}\n"}
{"id": 1720, "language": "Java", "code": "package validator;\n\npublic class InputInterpreter {\n    public static void main(String[] args) {\n        for (String token : args) {\n            try {\n                int value = Integer.parseInt(token);\n                if (value < 0 || value > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (value % 3 == 0 && String.valueOf(value).contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                } else if (value % 3 == 0) {\n                    System.out.println(\"idiot\");\n                } else if (String.valueOf(value).contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1721, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int n)\n{\n\tif(n % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\n\nbool stupid(int n)\n{\n\tint t = n,t1;\n\twhile(t!=0)\n\t{\n\tt1 = t%10;\n\t\t\n\t\tif(t1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tt/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int n)\n{\n\nif(idiot(n) && stupid(n))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n\n}\n\nbool smart(int n)\n{\n\tif(!idiot(n) && !stupid(n))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nbool invalid(int n)\n{\t\n\t\n\tif(!stupid(n) && !idiot(n) && !dumb(n) && !smart(n))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}else{\n\nprintf(\"invalid\\n\");\n\n}\n}\n\n\n\n}\n\n//3idiots.c\n//Displaying 3idiots.c.\n\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n\n"}
{"id": 1722, "language": "C++", "code": "#include <iostream> // For input/output operations like cout, cerr\n#include <string>   // For string manipulation (std::string)\n#include <cstdlib>  // For random number generation (rand, srand)\n#include <ctime>    // For seeding random number generator (time)\n#include <cstdio>   // For sscanf for safe argument parsing\n\n// Using namespace std is common in competitive programming environments\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // Check if the correct number of command-line arguments is provided\n  if (argc != 2) {\n    // Print usage instructions to standard error stream\n    cerr << \"Usage: \" << argv[0] << \" <count>\" << endl;\n    return 1; // Indicate an error and exit\n  }\n\n  // Variable to store the maximum number of outputs\n  int maxOutputs = 0;\n  // Use sscanf to safely parse the integer argument from argv[1].\n  // It returns the number of items successfully matched and assigned.\n  // This avoids `try-catch` blocks which are forbidden.\n  int parsedItems = sscanf(argv[1], \"%d\", &maxOutputs);\n\n  // If sscanf did not successfully parse exactly one integer, or if extra characters exist\n  if (parsedItems != 1) {\n    cerr << \"Error: Invalid argument '\" << argv[1] << \"'. Please provide a valid integer.\" << endl;\n    return 1;\n  }\n\n  // Validate the parsed integer against the problem's specified range\n  if (maxOutputs < 0 || maxOutputs > 10000) {\n    cerr << \"Error: Input count must be between 0 and 10000.\" << endl;\n    return 1;\n  }\n\n  // Seed the random number generator using the current time.\n  // This helps ensure different sequences in different runs.\n  srand(static_cast<unsigned int>(time(nullptr)));\n\n  // Define the target sequence we are looking for\n  const string targetRhythm = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  // String to accumulate all the sounds played so far\n  string currentPlayback = \"\";\n\n  // Loop for the specified number of outputs\n  for (int i = 0; i < maxOutputs; ++i) {\n    string soundToPlay;\n    // Generate a random number to decide between \"\u30c9\" and \"\u30ab\"\n    if (rand() % 2 == 0) {\n      soundToPlay = \"\u30c9\"; // Play 'Do' sound\n    } else {\n      soundToPlay = \"\u30ab\"; // Play 'Ka' sound\n    }\n\n    // Output the current sound to standard output\n    cout << soundToPlay << endl;\n\n    // Append the played sound to our accumulated sequence\n    currentPlayback += soundToPlay;\n\n    // Check if the target rhythm sequence exists anywhere in the `currentPlayback` string.\n    // `string::find` returns `string::npos` if the substring is not found.\n    if (currentPlayback.find(targetRhythm) != string::npos) {\n      cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl; // Found the sequence, print special sound\n      return 0; // Mission accomplished, terminate the program\n    }\n  }\n\n  // If the loop completes without finding the target rhythm\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n\n  return 0; // Program finished successfully, but without finding the sequence\n}\n"}
{"id": 1723, "language": "Java", "code": "public class Main {\n  public static void main(String[] args) {\n    for (String s : args) {\n      try {\n        int v = Integer.parseInt(s);\n        if (v < 0 || v > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = v % 3 == 0;\n        boolean has3 = s.contains(\"3\");\n        if (div3 && has3) System.out.println(\"dumb\");\n        else if (div3) System.out.println(\"idiot\");\n        else if (has3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1724, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u5404\u5f15\u6570\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\n    for arg_str in argv:\n        result_list = []\n        for char in arg_str:\n            if 'a' <= char <= 'z':\n                # \u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5834\u5408\n                shifted_char_code = ord(char) + 13\n                if shifted_char_code > ord('z'):\n                    shifted_char_code -= 26\n                result_list.append(chr(shifted_char_code))\n            elif 'A' <= char <= 'Z':\n                # \u5927\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5834\u5408\n                shifted_char_code = ord(char) + 13\n                if shifted_char_code > ord('Z'):\n                    shifted_char_code -= 26\n                result_list.append(chr(shifted_char_code))\n            else:\n                # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4ee5\u5916\u306f\u305d\u306e\u307e\u307e\n                result_list.append(char)\n        \n        print(\"\".join(result_list))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1725, "language": "Ruby", "code": "def include_by(data)\n  data.to_s.include? '3'\nend\n\ndef main(argv)\n  argv.each_index do |i|\n    if /\\d*[^a-zA-Z\uff10-\uff19\\-\\+]/ === argv[i]\n      data = argv[i].to_i\n    else\n      next puts 'invalid'\n    end\n    if data < 1000 && data % 3 == 0 && include_by(data)\n      puts 'dumb'\n    elsif data < 1000 && data % 3 == 0\n      puts 'idiot'\n    elsif data < 1000 && include_by(data)\n      puts 'stupid'\n    elsif data < 1000\n      puts 'smart'\n    else\n      puts 'invalid'  \n    end\n\n  end\nend\n\nmain(ARGV)"}
{"id": 1726, "language": "C++", "code": "#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main(int argc, char* argv[]) {\n  std::unordered_map<int, std::string> mp{\n      {1, \"I\"},      {2, \"II\"},    {3, \"III\"},  {4, \"IV\"},    {5, \"V\"},\n      {6, \"VI\"},     {7, \"VII\"},   {8, \"VIII\"}, {9, \"IX\"},    {10, \"X\"},\n      {20, \"XX\"},    {30, \"XXX\"},  {40, \"XL\"},  {50, \"L\"},    {60, \"LX\"},\n      {70, \"LXX\"},   {80, \"LXXX\"}, {90, \"XC\"},  {100, \"C\"},   {200, \"CC\"},\n      {300, \"CCC\"},  {400, \"CD\"},  {500, \"D\"},  {600, \"DC\"},  {700, \"DCC\"},\n      {800, \"DCCC\"}, {900, \"CM\"},  {1000, \"M\"}, {2000, \"MM\"}, {3000, \"MMM\"}};\n\n  std::string s = argv[1];\n  auto pow = [](int a, int n) {\n    int res = 1;\n    for (int i = 0; i < n; ++i)\n      res *= a;\n    return res;\n  };\n  for (int i = 0; i < s.size(); ++i) {\n    int t = (s[i] - '0') * pow(10, s.size() - 1 - i);\n    std::cout << mp[t];\n  }\n  std::cout << std::endl;\n\n  return 0;\n}\n"}
{"id": 1727, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n\nclass NabeatsuConverter {\npublic:\n  std::string getResult(const std::string& inputStr) {\n    std::stringstream stream;\n    stream << inputStr;\n\n    long long number;\n    stream >> number;\n\n    if (stream.fail() || !stream.eof()) {\n      return \"invalid\";\n    }\n\n    if (number < 0 || number > 1000) {\n      return \"invalid\";\n    }\n\n    bool isDivisibleBy3 = (number % 3 == 0);\n    bool hasDigit3 = (inputStr.find('3') != std::string::npos);\n\n    if (isDivisibleBy3 && hasDigit3) {\n      return \"dumb\";\n    }\n    if (isDivisibleBy3) {\n      return \"idiot\";\n    }\n    if (hasDigit3) {\n      return \"stupid\";\n    }\n    return \"smart\";\n  }\n};\n\nint main(int argc, char *argv[]) {\n  NabeatsuConverter converter;\n  for (int i = 1; i < argc; i++) {\n    std::cout << converter.getResult(argv[i]) << \"\\n\";\n  }\n  return 0;\n}"}
{"id": 1728, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nint check_num(char str[],int len){\n  int i;\n  for(i=0;i<len;i++){\n    if(str[i]<'0' || str[i] > '9'){\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\nint has_three(char str[],int len){\n  int i;\n  for(i=0;i<len;i++){\n    if(str[i]=='3')\n      return 1;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n//    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n      if(check_num(argv[i],strlen(argv[i]))){\n        int len=strlen(argv[i]);\n        if(strlen(argv[i])>4){\n          printf(\"invalid\");\n        }\n        else{\n          int val=atoi(argv[i]);\n          if(val>=0 && val<=1000){\n            if(val%3==0 && has_three(argv[i],len)){\n              printf(\"dumb\");\n            }\n            else if(val%3==0){\n              printf(\"idiot\");\n            }\n            else if(has_three(argv[i],len)){\n              printf(\"stupid\");\n            }\n            else{\n              printf(\"smart\");\n            }\n          }\n          else{\n            printf(\"invalid\");\n          }\n        }\n      }\n      else{\n        printf(\"invalid\");\n      }\n\n      printf(\"\\n\");\n  }\n  return 0;\n}\n"}
{"id": 1729, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Comparator;\nimport java.util.LinkedHashMap;\nimport java.util.stream.Collectors;\n\npublic class App {\n\n    public static void main(String[] args) {\n        String command = args[0];\n        String inputFile = args[1];\n        String outputFile = args[2];\n\n        try {\n            String content = new String(Files.readAllBytes(Paths.get(inputFile)));\n\n            if (\"count\".equals(command)) {\n                doCount(content, outputFile);\n            } else if (\"space\".equals(command)) {\n                doSpace(content, outputFile);\n            } else if (\"decrypt\".equals(command)) {\n                doDecrypt(content, outputFile);\n            }\n\n        } catch (IOException e) {\n            System.err.println(\"Error reading or writing file: \" + e.getMessage());\n        }\n    }\n\n    private static void doCount(String text, String outputPath) throws IOException {\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            // Count letters and spaces only\n            if (Character.isLetter(c) || c == ' ') {\n                charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        // Sort entries by key for consistent JSON output\n        Map<Character, Integer> sortedCounts = charCounts.entrySet()\n                .stream()\n                .sorted(Map.Entry.comparingByKey())\n                .collect(Collectors.toMap(\n                        Map.Entry::getKey,\n                        Map.Entry::getValue,\n                        (e1, e2) -> e1, LinkedHashMap::new));\n\n        StringBuilder json = new StringBuilder();\n        json.append(\"{\\n\");\n        boolean first = true;\n        for (Map.Entry<Character, Integer> entry : sortedCounts.entrySet()) {\n            if (!first) {\n                json.append(\",\\n\");\n            }\n            // Handle space character as \" \" in JSON key\n            json.append(String.format(\"  \\\"%s\\\": %d\", entry.getKey().equals(' ') ? \" \" : entry.getKey().toString(), entry.getValue()));\n            first = false;\n        }\n        json.append(\"\\n}\");\n\n        Files.write(Paths.get(outputPath), json.toString().getBytes());\n    }\n\n    private static void doSpace(String text, String outputPath) throws IOException {\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            // Count letters and spaces for frequency analysis\n            if (Character.isLetter(c) || c == ' ') {\n                charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char spaceCharCandidate = ' ';\n        int maxCount = -1;\n\n        // Find the most frequent character among counted ones\n        for (Map.Entry<Character, Integer> entry : charCounts.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                spaceCharCandidate = entry.getKey();\n            }\n        }\n\n        String json = String.format(\"{\\n  \\\"char\\\": \\\"%s\\\"\\n}\", spaceCharCandidate == ' ' ? \" \" : String.valueOf(spaceCharCandidate));\n        Files.write(Paths.get(outputPath), json.toString().getBytes());\n    }\n\n    private static void doDecrypt(String text, String outputPath) throws IOException {\n        // Step 1: Identify and replace the substituted space character\n        Map<Character, Integer> initialFreqs = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c) || c == ' ') {\n                initialFreqs.put(c, initialFreqs.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char substitutedSpace = ' ';\n        int maxFreq = -1;\n        for (Map.Entry<Character, Integer> entry : initialFreqs.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                substitutedSpace = entry.getKey();\n            }\n        }\n\n        StringBuilder tempTextBuilder = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == substitutedSpace) {\n                tempTextBuilder.append(' '); // Replace substituted char with actual space\n            } else {\n                tempTextBuilder.append(c);\n            }\n        }\n        String textAfterSpaceDecryption = tempTextBuilder.toString();\n\n        // Step 2: Identify and undo the alphabet shift\n        Map<Character, Integer> alphabetCounts = new HashMap<>();\n        for (char c : textAfterSpaceDecryption.toCharArray()) {\n            if (Character.isLetter(c)) { // Only count alphabetical characters\n                alphabetCounts.put(c, alphabetCounts.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        char mostFrequentAlphabet = ' ';\n        maxFreq = -1;\n        for (Map.Entry<Character, Integer> entry : alphabetCounts.entrySet()) {\n            if (Character.isLetter(entry.getKey()) && entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                mostFrequentAlphabet = entry.getKey();\n            }\n        }\n\n        // Calculate shift based on 'e' being the most frequent letter\n        int shift = 0; // This is the amount the original 'e' was shifted by\n        if (Character.isLowerCase(mostFrequentAlphabet)) {\n            shift = mostFrequentAlphabet - 'e';\n        } else if (Character.isUpperCase(mostFrequentAlphabet)) {\n            shift = mostFrequentAlphabet - 'E';\n        }\n\n        StringBuilder decryptedText = new StringBuilder();\n        for (char c : textAfterSpaceDecryption.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    // Apply reverse shift for lowercase letters\n                    decryptedText.append((char) ('a' + (c - 'a' - shift + 26) % 26));\n                } else { // Upper case\n                    // Apply reverse shift for uppercase letters\n                    decryptedText.append((char) ('A' + (c - 'A' - shift + 26) % 26));\n                }\n            } else {\n                decryptedText.append(c); // Non-letters and spaces are unchanged\n            }\n        }\n        Files.write(Paths.get(outputPath), decryptedText.toString().getBytes());\n    }\n}"}
{"id": 1730, "language": "C++", "code": "#include <iostream>\n#include <string_view>\n#include <charconv>\n#include <system_error>\n\n// \u4e16\u754c\u306e\u30ca\u30d9\u30a2\u30c4\nstd::string_view judge(std::string_view sv) {\n    int val;\n    auto [ptr, ec] = std::from_chars(sv.data(), sv.data() + sv.size(), val);\n\n    if (ec != std::errc() || ptr != sv.data() + sv.size()) {\n        return \"invalid\";\n    }\n\n    if (val < 0 || val > 1000) {\n        return \"invalid\";\n    }\n\n    bool div_by_3 = (val % 3 == 0);\n    bool has_char_3 = (sv.find('3') != std::string_view::npos);\n\n    if (div_by_3 && has_char_3) return \"dumb\";\n    if (div_by_3) return \"idiot\";\n    if (has_char_3) return \"stupid\";\n    \n    return \"smart\";\n}\n\nint main(int argc, char* argv[]) {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    \n    for (int i = 1; i < argc; ++i) {\n        std::cout << judge(argv[i]) << \"\\n\";\n    }\n    \n    return 0;\n}"}
{"id": 1731, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[])\n{\n  srand((unsigned int)time(NULL));\n\n  int answer[7] = {0,1,0,0,1,0,1};\n  int msgBuff[7];\n  char msgBuffIdx = 0;\n  int ok = 0;\n  int isover = 0;\n  int old = 0;\n\n  int cnt = atoi(argv[1]);  \n  for(int i = 0; i < cnt; i++){\n    int r = rand() % 2 ;\n\n    if(r == 0) printf(\"\u30c9\\n\");\n    else       printf(\"\u30ab\\n\");\n\n    msgBuff[msgBuffIdx]= r;\n    \n    if( isover){\n      old = msgBuffIdx + 1;\n      if(old == 7){\n        old = 0;\n      }\n    }\n    msgBuffIdx++;\n    if(msgBuffIdx == 7){\n      msgBuffIdx = 0;\n      isover = 1;\n    }\n    \n    int allClear = 1;\n    int ansNo = 0;\n    for(int i = old; i < old+7; i++){\n      int no = i % 7;\n      if(msgBuff[no] != answer[ansNo++]){\n        allClear = 0;\n        break;\n      }\n    }\n\n    if( allClear){\n      ok = 1;\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n      break;\n    }\n  }\n\n  if(ok == 0)\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n\n  return 0;\n}\n"}
{"id": 1732, "language": "Python3", "code": "import sys\nimport string\nimport json\n\ndef frequency(s):\n    allow = set(string.ascii_letters + ' ')\n    d = {}\n    for c in s:\n        if c in allow:\n            d[c] = d.get(c, 0) + 1\n    return d\n\ndef common_space(s):\n    lowers = [c for c in s if c in string.ascii_lowercase]\n    counts = {}\n    for c in lowers:\n        counts[c] = counts.get(c, 0) + 1\n    if not counts:\n        return ' '\n    return max(counts.items(), key=lambda x: x[1])[0]\n\ndef space_shift(s, spacec):\n    letters = [c for c in s if c in string.ascii_lowercase and c != spacec]\n    cnt = {}\n    for ch in letters:\n        cnt[ch] = cnt.get(ch, 0) + 1\n    if cnt:\n        mx = max(cnt.items(), key=lambda x:x[1])[0]\n        return (ord(mx) - ord('e')) % 26\n    return 0\n\ndef restore(s, spacec, shift):\n    out = []\n    for c in s:\n        if c == spacec:\n            out.append(' ')\n        elif c in string.ascii_lowercase:\n            out.append(chr((ord(c)-ord('a')-shift)%26+ord('a')))\n        elif c in string.ascii_uppercase:\n            out.append(chr((ord(c)-ord('A')-shift)%26+ord('A')))\n        else:\n            out.append(c)\n    return ''.join(out)\n\ndef main(argv):\n    mode = argv[0]\n    in_file = argv[1]\n    out_file = argv[2]\n    with open(in_file, encoding='utf-8') as f:\n        msg = f.read()\n    if mode == 'count':\n        fdict = frequency(msg)\n        with open(out_file, 'w', encoding='utf-8') as out:\n            json.dump(fdict, out)\n    elif mode == 'space':\n        char = common_space(msg)\n        with open(out_file, 'w', encoding='utf-8') as out:\n            json.dump({'char': char}, out)\n    elif mode == 'decrypt':\n        sc = common_space(msg)\n        sh = space_shift(msg, sc)\n        plain = restore(msg, sc, sh)\n        with open(out_file, 'w', encoding='utf-8') as out:\n            out.write(plain)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1733, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  if(!checkFullWidthNumber($argv)) {\n    printf(\"%s\\n\", \"invalid\");\n  }\n  foreach ($argv as $index=>$value) {\n    if(empty($value) || $value==\" \") {\n      printf(\"%s\\n\", \"invalid\");\n    }\n    if(intval($value) >=0 && intval($value) <=1000) {\n      switch ($value) {\n      case (intval($value)%3 == 0 && strpos($value, '3')): \n        printf(\"%s\\n\", \"dumb\");\n        break;\n      case ((intval($value))%3 == 0):\n        printf(\"%s\\n\", \"idiot\");\n        break;\n      case (strpos($value, \"3\") !== false):\n        printf(\"%s\\n\", \"stupid\");\n        break;\n      default:\n        printf(\"%s\\n\", \"smart\");\n        break;\n      }\n    }\n    else {\n      printf(\"%s\\n\", \"invalid\");\n    }\n  }\n}\n\nfunction checkFullWidthNumber($arr) {\n  $halfWidthNumber = [\n    1,2,3,4,5,6,7,8,9,0\n  ];\n  foreach($arr as $index => $num) {\n    $charList = str_split($num);\n    foreach($charList as $char) {\n      if(!in_array($char ,$halfWidthNumber )) {\n        printf(\"argv[%s]: %s\\n\", $index,\"data is wrong\");\n        printf(\"%s\\n\", \"input is not an integer\");\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 1734, "language": "Python3", "code": "import sys\n\ndef idiot_classifier(s_val):\n    if not s_val.isdigit():\n        print(\"invalid\")\n        return\n    \n    num_int = int(s_val)\n    \n    if not (0 <= num_int <= 1000):\n        print(\"invalid\")\n        return\n\n    div_by_3 = (num_int % 3 == 0)\n    has_3 = ('3' in s_val)\n\n    if div_by_3 and has_3:\n        print(\"dumb\")\n    elif div_by_3:\n        print(\"idiot\")\n    elif has_3:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef main_program_v3(arguments):\n    for single_arg_str in arguments:\n        idiot_classifier(single_arg_str)\n\nif __name__ == '__main__':\n    main_program_v3(sys.argv[1:])"}
{"id": 1735, "language": "Java", "code": "import java.util.Random;\n\npublic class TaikoApp {\n    public static void main(String[] args) {\n        if (args.length < 1) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int attempts = Integer.parseInt(args[0]);\n        Random random = new Random();\n        StringBuilder playLog = new StringBuilder();\n        \n        for (int i = 0; i < attempts; i++) {\n            String sound = random.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(sound);\n            playLog.append(sound);\n\n            if (playLog.indexOf(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") != -1) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n        \n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 1736, "language": "C++", "code": "#include <iostream>\n#include <ctype.h>\nusing namespace std;\nint check3(int n)\n{\n  int x=n;\n  while(x!=0)\n  {\n    n=x%10;\n    x=x/10;\n    if(n==3)\n    return 1;\n  }\n  return 0;\n}\nint check(char ar[])\n{\n  for(int i=0;ar[i]!='\\0';i++)\n  {\n    if(!isdigit(ar[i]))\n    return 0;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[])\n{\n int x=0;\n  for (int i = 1; i < argc;i++){\n    x=atoi(argv[i]);\n    if(check(argv[i]))\n    {\n      if((x%3==0)&&(check3(x)))\n      cout<<\"dumb\"<<endl;\n      else if(check3(x))\n      cout<<\"stupid\"<<endl;\n      else if(x%3==0)\n      cout<<\"idiot\"<<endl;\n      else\n      cout<<\"smart\"<<endl;\n    }\n    else\n    cout<<\"invalid\"<<endl;\n  \n   \n }\n  return 0;\n}\n"}
{"id": 1737, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"%s\", args[i]);\n      int temp=0;\n      if((int)output.charAt(0)>256)\n        System.out.println(\"invalid\");\n      else\n      {\n        try{\n          Integer in=Integer.parseInt(output);\n          if(in%3==0)\n          {\n            temp++;\n            if(!output.contains(\"3\"))\n              System.out.println(\"idiot\");\n          }\n          if(output.contains(\"3\"))\n          {\n            if(temp==1)\n            {\n              System.out.println(\"dumb\");\n            }else\n              System.out.println(\"stupid\");\n              temp++;\n          }\n          if(temp==0)\n            System.out.println(\"smart\");\n        }\n        catch(Exception e)\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1738, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This code solves the 8 Queens problem with pre-placed queens using basic backtracking.\n\n    board_size = 8\n    \n    # Read k, the number of pre-placed queens\n    k = int(sys.stdin.readline())\n\n    # Initialize the chessboard with empty cells\n    chess_board = [['.' for _ in range(board_size)] for _ in range(board_size)]\n    \n    # Keep track of occupied rows, columns, and diagonals\n    occupied_cols = [False] * board_size\n    occupied_diag1 = [False] * (2 * board_size - 1)  # r + c\n    occupied_diag2 = [False] * (2 * board_size - 1)  # r - c + (board_size - 1)\n\n    # Store pre-placed queen positions and mark them on the board and in occupied trackers\n    preset_queen_rows = set()\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        chess_board[r][c] = 'Q'\n        occupied_cols[c] = True\n        occupied_diag1[r + c] = True\n        occupied_diag2[r - c + (board_size - 1)] = True\n        preset_queen_rows.add(r)\n\n    # Recursive function to place queens\n    def place_queen(row):\n        # Base case: if all 8 queens are placed, a solution is found\n        if row == board_size:\n            return True\n\n        # If a queen is already placed in this row (from input), skip to the next row\n        if row in preset_queen_rows:\n            return place_queen(row + 1)\n\n        # Try placing a queen in each column of the current row\n        for col in range(board_size):\n            # Check if the current position is safe\n            if not occupied_cols[col] and \\\n               not occupied_diag1[row + col] and \\\n               not occupied_diag2[row - col + (board_size - 1)]:\n                \n                # Place the queen\n                chess_board[row][col] = 'Q'\n                occupied_cols[col] = True\n                occupied_diag1[row + col] = True\n                occupied_diag2[row - col + (board_size - 1)] = True\n\n                # Recurse for the next row\n                if place_queen(row + 1):\n                    return True # Solution found\n\n                # Backtrack: remove the queen if no solution was found\n                chess_board[row][col] = '.'\n                occupied_cols[col] = False\n                occupied_diag1[row + col] = False\n                occupied_diag2[row - col + (board_size - 1)] = False\n        \n        return False # No safe position found in this row\n\n    # Start the solving process from the first row\n    place_queen(0)\n\n    # Print the final solved chessboard\n    for r in range(board_size):\n        print(\"\".join(chess_board[r]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1739, "language": "Python3", "code": "import sys\n\ndef process_number(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n    \n    num = int(num_str)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    is_multiple = num % 3 == 0\n    has_three = '3' in num_str\n    \n    if is_multiple and has_three:\n        return \"dumb\"\n    elif is_multiple:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(inputs):\n    output = []\n    for value in inputs:\n        result = process_number(value)\n        output.append(result)\n    \n    print(\"\\n\".join(output))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1740, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <string.h> // For strlen, though not strictly needed here\n\n// Function to check for digit 3\nstatic int check_for_digit3(int n_val) {\n    if (n_val == 0) return 0; // 0 does not have 3\n    while (n_val > 0) {\n        if (n_val % 10 == 3) return 1;\n        n_val /= 10;\n    }\n    return 0;\n}\n\nint main(int c, char *v[]) {\n  // skip program name (v[0])\n  for (int i = 1; i < c; ++i) {\n    char *e;\n    long num_parsed = strtol(v[i], &e, 10);\n\n    // invalid input check\n    if (*e != '\\0' || e == v[i]) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    // range check\n    if (num_parsed < 0 || num_parsed > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n\n    int n = (int)num_parsed;\n    int div_3 = (n % 3 == 0);\n    int has_3 = check_for_digit3(n);\n\n    // direct output based on conditions\n    if (div_3 && has_3) {\n      printf(\"dumb\\n\");\n    } else if (div_3) {\n      printf(\"idiot\\n\");\n    } else if (has_3) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 1741, "language": "Python3", "code": "import sys\nimport random\n\ndef main(cli_args):\n    # Parse the maximum output count from command line arguments.\n    max_output_count = int(cli_args[0])\n    \n    # Initialize an empty string to store the generated drum sounds.\n    drum_sequence = \"\"\n    \n    # Define the target sequence to be matched.\n    target_sequence = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    \n    # Loop up to the maximum specified output count.\n    for _ in range(max_output_count):\n        # Randomly choose between '\u30c9' and '\u30ab'.\n        sound = random.choice(['\u30c9', '\u30ab'])\n        \n        # Print the current drum sound.\n        print(sound)\n        \n        # Append the sound to the sequence.\n        drum_sequence += sound\n        \n        # Check if the target sequence is a suffix of the current drum sequence.\n        if drum_sequence.endswith(target_sequence):\n            # If matched, print the special \"Don\u266aDon\u266a\" sound and exit.\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n            \n    # If the loop completes without finding the target sequence, print \"Game Over\".\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1742, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\nclass CipherTool:\n    def __init__(self, input_path):\n        self.text = self.read_file(input_path)\n        self.freq = Counter(self.text)\n\n    def read_file(self, path):\n        # \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n        with open(path, \"r\") as f:\n            return f.read()\n\n    def output_result(self, path, result):\n        # JSON\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u4fdd\u5b58\n        with open(path, \"w\") as f:\n            json.dump(result, f)\n\n    def count(self, output_path):\n        # \u983b\u5ea6\u30ab\u30a6\u30f3\u30c8\n        self.output_result(output_path, dict(self.freq))\n\n    def find_space(self, output_path):\n        # \u30b9\u30da\u30fc\u30b9\u5fa9\u53f7\u63a8\u6e2c\n        space_sub = max(self.freq.items(), key=lambda x: x[1])[0]\n        self.output_result(output_path, {\"char\": space_sub})\n\n    def decrypt(self, output_path):\n        # \u5fa9\u53f7\u51e6\u7406\n        space_key = max(self.freq.items(), key=lambda x: x[1])[0]\n        shift_offset = ord(space_key) - ord(' ')\n        decrypted = ''.join(\n            chr(ord(ch) - shift_offset) if ch.isalpha() else (' ' if ch == space_key else ch)\n            for ch in self.text\n        )\n        with open(output_path, \"w\") as f:\n            f.write(decrypted)\n\ndef main():\n    command, input_path, output_path = sys.argv[1:4]\n    cipher_tool = CipherTool(input_path)\n\n    if command == \"count\":\n        cipher_tool.count(output_path)\n    elif command == \"space\":\n        cipher_tool.find_space(output_path)\n    elif command == \"decrypt\":\n        cipher_tool.decrypt(output_path)\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 1743, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String input : args) {\n      String output = \"invalid\";\n      try {\n        int num = Integer.parseInt(input);\n        if (num < 0 || num > 1000) {\n          output = \"invalid\";\n        } else {\n          boolean div3 = num % 3 == 0;\n          boolean hasThree = input.contains(\"3\");\n          if (div3 && hasThree) output = \"dumb\";\n          else if (div3) output = \"idiot\";\n          else if (hasThree) output = \"stupid\";\n          else output = \"smart\";\n        }\n      } catch (NumberFormatException err) {\n        output = \"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}"}
{"id": 1744, "language": "PHP", "code": "<?php\n\nfunction countCharacters($filePath, $outputPath) {\n    // \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    $content = file_get_contents($filePath);\n    \n    // \u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    $count = [];\n    foreach (str_split($content) as $char) {\n        if (ctype_alpha($char) || $char === ' ') {\n            $count[$char] = isset($count[$char]) ? $count[$char] + 1 : 1;\n        }\n    }\n    \n    // JSON\u306b\u5909\u63db\u3057\u3066\u7d50\u679c\u3092\u51fa\u529b\n    file_put_contents($outputPath, json_encode($count, JSON_PRETTY_PRINT));\n}\n\nfunction findSpaceSubstitution($filePath, $outputPath) {\n    // \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    $content = file_get_contents($filePath);\n    \n    // \u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u306e\u30ab\u30a6\u30f3\u30c8\n    $frequencies = array_count_values(str_split($content));\n    arsort($frequencies);\n    \n    // \u6700\u983b\u6587\u5b57\u3092\u53d6\u5f97\uff08\u7a7a\u767d\u306b\u5bfe\u5fdc\u3059\u308b\u3068\u63a8\u5b9a\uff09\n    foreach ($frequencies as $char => $count) {\n        if (ctype_lower($char)) {\n            $substitutionChar = $char;\n            break;\n        }\n    }\n    \n    // \u7d50\u679c\u3092JSON\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\n    $outputData = [\"char\" => $substitutionChar];\n    file_put_contents($outputPath, json_encode($outputData, JSON_PRETTY_PRINT));\n}\n\nfunction main($argc, $argv) {\n    $command = $argv[1];\n    $inputFilePath = $argv[2];\n    $outputFilePath = $argv[3];\n\n    if ($command === \"count\") {\n        countCharacters($inputFilePath, $outputFilePath);\n    } elseif ($command === \"space\") {\n        findSpaceSubstitution($inputFilePath, $outputFilePath);\n    }\n}\n\nmain($argc, $argv);"}
{"id": 1745, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <map>\n#include <array>\n#include <string>\n#include <sstream>\nusing namespace std;\n\n// parse simple JSON array of objects with \"robot\" and \"you\" integers\nbool parse_json(const string& text, vector<pair<int,int>>& records) {\n    size_t pos = 0;\n    while ((pos = text.find(\"{\", pos)) != string::npos) {\n        size_t end = text.find(\"}\", pos);\n        if (end == string::npos) return false;\n        string obj = text.substr(pos, end - pos + 1);\n        pos = end + 1;\n\n        int robot = -1, you = -1;\n        size_t rpos = obj.find(\"\\\"robot\\\"\");\n        size_t ypos = obj.find(\"\\\"you\\\"\");\n        if (rpos == string::npos || ypos == string::npos) return false;\n\n        rpos = obj.find(\":\", rpos);\n        if (rpos == string::npos) return false;\n        rpos++;\n        while (rpos < obj.size() && !(obj[rpos] >= '0' && obj[rpos] <= '9')) ++rpos;\n        size_t rstart = rpos;\n        while (rpos < obj.size() && (obj[rpos] >= '0' && obj[rpos] <= '9')) ++rpos;\n        robot = stoi(obj.substr(rstart, rpos - rstart));\n\n        ypos = obj.find(\":\", ypos);\n        if (ypos == string::npos) return false;\n        ypos++;\n        while (ypos < obj.size() && !(obj[ypos] >= '0' && obj[ypos] <= '9')) ++ypos;\n        size_t ystart = ypos;\n        while (ypos < obj.size() && (obj[ypos] >= '0' && obj[ypos] <= '9')) ++ypos;\n        you = stoi(obj.substr(ystart, ypos - ystart));\n\n        records.push_back({robot,you});\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    // read json file\n    if (argc != 2) return 1;\n    ifstream ifs(argv[1]);\n    if (!ifs) return 1;\n    stringstream ss;\n    ss << ifs.rdbuf();\n    string text = ss.str();\n\n    vector<pair<int,int>> games;\n    bool ok = parse_json(text, games);\n    if (!ok) return 1;\n\n    // initial hands of robot: rock(0), scissors(1), paper(2)\n    vector<int> robot_history = {0,1,2};\n    vector<int> you_history;\n\n    // fill you_history from games\n    for (auto &g : games) {\n        // Defensive: if robot history size > 3, pop front to keep last 3 robot hands\n        if (robot_history.size() >= 3) {\n            robot_history.erase(robot_history.begin());\n        }\n        robot_history.push_back(g.first);\n        you_history.push_back(g.second);\n    }\n    \n    // Remove initial 3 hands added if no games?\n    if (games.empty()) {\n        // no games given, next hand ?\n        // Output rock as default\n        cout << 0 << endl;\n        return 0;\n    }\n\n    // We want to find which hand robot plays next for the given previous 3 robot hands and opponent last hand\n    // The robot chooses by same 4 params: last 3 robot hands + last opponent hand\n\n    // But robot cycles the output for the same parameters: rock->scissors->paper->rock...\n\n    // Build a map from the parameters (last3 robot hands + opponent last hand) to a vector<int> of robot hands played in order\n    // params key: 4 ints: {r1,r2,r3,you_last}\n    map<array<int,4>, vector<int>> param_to_hands;\n\n    vector<int> robot_played; // all robot hands from initial + games for lookup of cycles, to reconstruct param_to_hands\n\n    // Rebuild robot sequence with initial 3\n    vector<int> robot_seq = {0,1,2};\n    vector<int> you_seq;\n    for (auto &g : games) you_seq.push_back(g.second);\n    for (auto &g : games) robot_seq.push_back(g.first);\n\n    // We build param_to_hands by sliding window over robot_seq and you_seq\n    // Start from index=3 because first 3 robot hands are known\n    int n = robot_seq.size();\n    for (int i=3; i<n; ++i) {\n        array<int,4> key = {robot_seq[i-3], robot_seq[i-2], robot_seq[i-1], you_seq[i-3]};\n        param_to_hands[key].push_back(robot_seq[i]);\n    }\n\n    // The next parameters are the last 3 robot hands in the history and the last opponent hand in given games\n    int last_3_r0 = robot_seq[n-3];\n    int last_3_r1 = robot_seq[n-2];\n    int last_3_r2 = robot_seq[n-1];\n    int last_you = you_seq.back();\n\n    array<int,4> query = {last_3_r0,last_3_r1,last_3_r2,last_you};\n\n    // We find the previous hands the robot played for this query and cycle them\n    vector<int> past_hands = param_to_hands[query];\n\n    int next_hand = 0;\n    int base_hand = (past_hands.empty()) ? 0 : past_hands.back();\n\n    // cycle: 0->1->2->0\n    next_hand = (base_hand + 1) % 3;\n\n    cout << next_hand << endl;\n    return 0;\n}"}
{"id": 1746, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ThreeIdiots {\n  public static void main(String[] inputs) {\n    for (String item : inputs) {\n      Scanner itemScanner = new Scanner(item);\n      if (itemScanner.hasNextInt()) {\n        int numToEval = itemScanner.nextInt();\n        if (numToEval < 0 || numToEval > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean isMultOf3 = (numToEval % 3 == 0);\n          boolean hasDigitThree = String.valueOf(numToEval).contains(\"3\");\n\n          if (isMultOf3 && hasDigitThree) {\n            System.out.println(\"dumb\");\n          } else if (isMultOf3) {\n            System.out.println(\"idiot\");\n          } else if (hasDigitThree) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      itemScanner.close();\n    }\n  }\n}"}
{"id": 1747, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar board[N][N];\n\nint isSafe(int row, int col) {\n    for (int i = 0; i < col; i++) {\n        if (board[row][i] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n        if (board[i][j] == 'Q') return 0;\n    }\n    for (int i = row, j = col; j >= 0 && i < N; i++, j--) {\n        if (board[i][j] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint solveNQ(int col) {\n    if (col >= N) return 1;\n    for (int i = 0; i < N; i++) {\n        if (isSafe(i, col)) {\n            board[i][col] = 'Q';\n            if (solveNQ(col + 1)) return 1;\n            board[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            board[i][j] = '.';\n    \n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n    }\n\n    solveNQ(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1748, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean includesThree(String a){\n    for(int i = 0; i < a.length(); i++){\n      if(a.charAt(i) == '3')\n        return true;\n    }\n    return false;\n  }\n  public static boolean isHalfWidth(char c){\n    return '\\u0000' <= c && c <='\\u00FF';\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      int n;\n      try{\n        n = Integer.parseInt(args[i]);\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean half = true;\n      for(int j = 0; j < args[i].length(); j++){\n        half = half && isHalfWidth(args[i].charAt(j));\n      }\n      if(!half){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean flag = includesThree(args[i]);\n      if(n < 0 || n > 1000){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(n % 3 == 0 && flag){\n        System.out.println(\"dumb\");\n      }\n      else if(n % 3 == 0){\n        System.out.println(\"idiot\");\n      }\n      else if(flag){\n        System.out.println(\"stupid\");\n      }\n      else{\n        System.out.println(\"smart\");\n      }\n    }\n\t}\n}\n"}
{"id": 1749, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nint include3(char *);\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n  \n    if(atoi(argv[i]) > INT_MAX || atoi(argv[i]) < INT_MIN) {\n      printf(\"invalid\");\n      continue;\n    }\n    if(atoi(argv[i])) {\n      if(atoi(argv[i]) % 3 == 0 && include3(argv[i]))\n        printf(\"dumb\\n\");\n      else if(atoi(argv[i]) % 3 == 0)\n        printf(\"idiot\\n\");\n      else if(include3(argv[i]))\n        printf(\"stupid\\n\");\n      else printf(\"smart\\n\");\n    } else {\n      printf(\"invalid\");\n    }\n  }\n  return 0;\n}\n\nint include3(char *input)\n{\n  char *ch = input;\n  while(*ch != 0) {\n    if(*ch == '3')\n      return 1;\n    ch++;\n  }\n  return 0;\n}\n"}
{"id": 1750, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nbool hasThree(int k){\n  int x=k;\n  while(x>0){\n    if(x%10==3)\n    return true;\n    x=x/10;\n  }\n  return false;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    if(atoi(argv[i])>0 && atoi(argv[i])<1001){\n        \n        int l=atoi(argv[i]);\n        //cout<<l<<\" \";\n        if(l%3==0 && hasThree(l))\n        cout<<\"dumb\"<<endl;\n        else if(l%3==0)\n        cout<<\"idiot\"<<endl;\n        else if(hasThree(l))\n        cout<<\"stupid\"<<endl;\n        else cout<<\"smart\"<<endl;\n\n       }\n    else cout<<\"invalid\"<<endl;\n  }\n  \n  return 0;\n}\n"}
{"id": 1751, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar chessboard[N][N];\n\nvoid clearBoard() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            chessboard[i][j] = '.';\n}\n\nint canPlaceQueen(int row, int col) {\n    for (int i = 0; i < N; i++) {\n        if (chessboard[row][i] == 'Q') return 0;\n        if (chessboard[i][col] == 'Q') return 0;\n        if (row - i >= 0 && col - i >= 0 && chessboard[row - i][col - i] == 'Q') return 0;\n        if (row - i >= 0 && col + i < N && chessboard[row - i][col + i] == 'Q') return 0;\n        if (row + i < N && col - i >= 0 && chessboard[row + i][col - i] == 'Q') return 0;\n        if (row + i < N && col + i < N && chessboard[row + i][col + i] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint placeQueens(int row) {\n    if (row == N) return 1;\n\n    for (int col = 0; col < N; col++) {\n        if (canPlaceQueen(row, col)) {\n            chessboard[row][col] = 'Q';\n            if (placeQueens(row + 1)) return 1;\n            chessboard[row][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    int k, r, c;\n\n    clearBoard();\n\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        chessboard[r][c] = 'Q';\n    }\n\n    placeQueens(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", chessboard[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1752, "language": "Python3", "code": "import sys\n\ndef analyze_input(arg_string):\n    if not arg_string.isdigit():\n        print(\"invalid\")\n        return\n\n    val = int(arg_string)\n\n    if not (0 <= val <= 1000):\n        print(\"invalid\")\n        return\n\n    is_divisible = (val % 3 == 0)\n    has_three_char = ('3' in arg_string)\n\n    if is_divisible and has_three_char:\n        print(\"dumb\")\n    elif is_divisible:\n        print(\"idiot\")\n    elif has_three_char:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef run(arguments):\n    for a in arguments:\n        analyze_input(a)\n\nif __name__ == '__main__':\n    run(sys.argv[1:])"}
{"id": 1753, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(0);\n\t\t}\n\t}\n}\n\n\n\n"}
{"id": 1754, "language": "Python3", "code": "import sys\n\ndef main(args):\n    responses = {\n        (True, True): \"dumb\",\n        (True, False): \"idiot\",\n        (False, True): \"stupid\",\n        (False, False): \"smart\",\n    }\n    \n    for arg_str in args:\n        if not arg_str.isdigit() or not (0 <= int(arg_str) <= 1000):\n            print(\"invalid\")\n            continue\n        \n        num = int(arg_str)\n        key = (num % 3 == 0, '3' in str(num))\n        print(responses[key])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1755, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String input = args[i];\n      int num;\n      try {\n        num = Integer.parseInt(input);\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if (num >= 0 && num <= 1000) {\n        if (num % 3 == 0 && input.contains(\"3\")) {\n          System.out.println(\"dumb\");\n        } else if (num % 3 == 0) {\n          System.out.println(\"idiot\");\n        } else if (input.contains(\"3\")) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1756, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]){\n  for(int i=1; i<argc; i++){\n    string str(argv[i]);\n    bool valid = true;\n    for(char c : str){\n      if(c<'0' || c>'9'){\n        valid = false;\n        break;\n      }\n    }\n    if(!valid){\n      cout << \"invalid\" << endl;\n      continue;\n    }\n    int val = stoi(str);\n    if(val < 0 || val > 1000){\n      cout << \"invalid\" << endl;\n      continue;\n    }\n    bool mult3 = (val % 3 == 0);\n    bool hasThree = str.find('3') != string::npos;\n    if(mult3 && hasThree) cout << \"dumb\" << endl;\n    else if(mult3) cout << \"idiot\" << endl;\n    else if(hasThree) cout << \"stupid\" << endl;\n    else cout << \"smart\" << endl;\n  }\n  return 0;\n}"}
{"id": 1757, "language": "Python3", "code": "import sys\nimport json\n\ndef get_winning_move(robot_move):\n    \"\"\"Calculate the human move to win against robot_move.\"\"\"\n    return (robot_move + 2) % 3\n\ndef analyze_rps_history(history_file_path):\n    \"\"\"Analyzes game history to predict the robot's next move and a winning counter move.\"\"\"\n    \n    # r_seq holds the last 3 robot moves, o_last stores opponent's last move.\n    r_seq = [0, 1, 2]  # Initial robot sequence: Rock, Scissors, Paper\n    o_last = 0         # Initial opponent last move, default to Rock\n    \n    # state_occurrences maps state tuples to counts. Count % 3 gives robot's next play.\n    state_occurrences = {} \n\n    with open(history_file_path, 'r') as f:\n        game_data = json.load(f)\n\n    for game in game_data:\n        # Form the state tuple for the *current* game's robot decision.\n        current_state_tuple = tuple(r_seq + [o_last])\n        \n        # Increment the occurrence count for this specific state.\n        # If state not seen, starts at 0, becomes 1. Subsequent access: 1, 2, etc.\n        state_occurrences[current_state_tuple] = state_occurrences.get(current_state_tuple, 0) + 1\n        \n        # Update robot's history with its actual play from the record.\n        r_seq.pop(0) # Remove oldest\n        r_seq.append(game[\"robot\"]) # Add newest\n        \n        # Update opponent's last played hand.\n        o_last = game[\"you\"]\n\n    # After processing all historical games, determine the state for the *next* game.\n    next_state_for_robot_decision = tuple(r_seq + [o_last])\n    \n    # Calculate what the robot will play based on its internal cycle for this state.\n    # If the state has not been seen before, it defaults to 0, meaning robot plays Rock.\n    robot_predicted_play = state_occurrences.get(next_state_for_robot_decision, 0) % 3\n    \n    # Determine the hand that wins against the robot's predicted play.\n    return get_winning_move(robot_predicted_play)\n\ndef main(args):\n    # Entry point of the command-line application.\n    input_file = args[0]\n    result_to_print = analyze_rps_history(input_file)\n    print(result_to_print)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1758, "language": "Python3", "code": "import sys\nimport re\nimport json\n\ndef count(text):\n    lower = re.compile(r\"[a-z]+\")\n    mo_l = lower.findall(text)\n    mo_l_join = \"\".join(mo_l)\n\n    upper = re.compile(r\"[A-Z]+\")\n    mo_u = upper.findall(text)\n    mo_u_join = \"\".join(mo_u)\n\n    blank = re.compile(r\"[ ]+\")\n    mo_b = blank.findall(text)\n    mo_b_join = \"\".join(mo_b)\n\n    alp = \" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    count_code = {}\n    for i in alp:\n      count_code[i] = 0\n\n    for i in mo_l_join:\n        if i in count_code.keys():\n            count_code[i] += 1\n        else:\n            count_code[i] = 1\n\n    for i in mo_u_join:\n        if i in count_code.keys():\n            count_code[i] += 1\n        else:\n            count_code[i] = 1\n\n    for i in mo_b_join:\n        if i in count_code.keys():\n            count_code[i] += 1\n        else:\n            count_code[i] = 1\n    return count_code\n\ndef count_char(text, outputname):\n\n    count_code = count(text)\n    \n    fw = open(outputname,'w')\n    json.dump(count_code,fw,indent=2)\n\ndef find_blank(text, outputname):  \n  dic = count(text)\n  max_dic = max(dic, key=dic.get)\n  \n  output = {}\n  output['char'] = max_dic\n\n  fw = open(outputname, 'w')\n  json.dump(output,fw)\n\ndef Dec(plain, key, outputname):\n    cipher = \"\"\n    dic = count(plain)\n    max_dic = max(dic, key=dic.get)\n  \n    for p in plain:\n        if p == ' ':\n          p = max_dic\n        elif p == max_dic:\n          p = ' '\n\n        offset = - key\n        p_sign = ord(p)\n\n        # lower\n        if (p_sign >= 97) and (p_sign <= 122):\n            c_sign = p_sign + offset\n\n            if c_sign < 97:\n                c_sign += 26\n\n            c = chr(c_sign)\n            cipher += c\n\n        # upper\n        elif (p_sign >= 65) and (p_sign <= 90):\n            c_sign = p_sign + offset\n\n            if c_sign < 65:\n                c_sign += 26\n\n            c = chr(c_sign)\n            cipher += c\n        \n        # other\n        else:\n            cipher += p\n            \n    with open(outputname, mode='w') as f:\n      f.write(cipher)\n\ndef main(argv):\n    input_f = open(argv[1])\n    text = input_f.read()\n\n    if argv[0] == \"count\":\n        count_char(text, argv[2])\n    elif argv[0] == \"space\":\n        find_blank(text, argv[2])\n    elif argv[0] == \"decrypt\":\n        Dec(text, 17, argv[2])\n    \n    # I found that the key is 17 by Brute-force attack\n    \n    input_f.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1759, "language": "Python3", "code": "import sys\n\ndef printBoard(board):\n    for r in range(8):\n      print (\"\".join(board[r]))\n\ndef fill(board, r, c):\n  board[r][c] = 'Q'\n  for i in range(8):\n    board[r][i] = 'X' if board[r][i] != 'Q' else 'Q'\n    board[i][c] = 'X' if board[i][c] != 'Q' else 'Q'\n    \n    if r+i < 8  and c+i < 8  and board[r+i][c+i] != 'Q': board[r+i][c+i] = 'X'\n    if r-i >= 0 and c+i < 8  and board[r-i][c+i] != 'Q': board[r-i][c+i] = 'X'\n    if r+i < 8  and c-i >= 0 and board[r+i][c-i] != 'Q': board[r+i][c-i] = 'X'\n    if r-i >= 0 and c-i >= 0 and board[r-i][c-i] != 'Q': board[r-i][c-i] = 'X'\n    \ndef solve(board, row):\n  #print (\"solve row\", row)\n  #printBoard(board)\n  if row > 7: return board\n  if 'Q' in board[row]:\n    return board if row == 7 else solve(board, row+1)\n  for i in range(8):\n    if board[row][i] == '.':\n      nb = [r[:] for r in board]\n      fill(nb, row, i)\n      tmp = solve(nb, row+1)\n      if tmp: return tmp        \n  return False\n    \n\n\nif __name__ == '__main__':\n    #main(sys.argv[1:])\n    inputFile = sys.argv[1]\n    f = open(inputFile)\n    \n    # first line\n    line = f.readline()\n    qNum = int(line)\n\n    queens = []\n    for i in range(int(qNum)):\n      line = f.readline()\n      qPos = line.split()\n      queens.append(qPos)\n    \n    board = [['.' for i in range(8)] for j in range(8)]\n    for q in queens:\n      r, c = int(q[0]), int(q[1])\n      fill(board, r, c)\n    \n    board = solve(board, 0)\n    if not board: print(\"no solution\")\n    for i in range(8):\n      for j in range(8):\n        if board[i][j] == 'X':\n          board[i][j] = '.'\n\n    printBoard(board)\n\n    f.close()\n    "}
{"id": 1760, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      // System.out.println(output);\n      try{\n        if(isValidInput(args[i])){\n          System.out.println(\"invalid\");\n          break;\n        }\n        int input = 0, temp;\n        input = Integer.parseInt(args[i]);\n        if(input >= 0 && input <= 1000){\n          if(input % 3 == 0){\n            temp = input;\n            if((temp - 3) % 10 == 0){\n              System.out.println(\"dumb\");\n            }else if((temp/10) == 3){\n              System.out.println(\"dumb\");\n            }else{\n              System.out.println(\"idiot\");\n            }\n          }else{\n            if(input > 10){\n              int temp2 = input;\n              if((temp2 - 3)%10 == 0){\n                System.out.println(\"stupid\");\n              }else{\n                System.out.println(\"smart\");\n              }\n            }else{\n              System.out.println(\"smart\");\n            }\n          }\n        }else{\n          System.out.println(\"invalid\");\n        }\n      }catch (NumberFormatException e){\n        System.out.println(\"invalid\");\n      }\n  }\n}\n\npublic static boolean isValidInput(String in) {\n    boolean valid = false;\n    for (char c : in.toCharArray()) {\n        if((!halfWidth(c))) {\n            valid = true;\n            break;\n        }\n    }\n    return valid;\n}\n\npublic static boolean halfWidth(char ch)\n{\n    return '\\u0000' <= ch && ch <= '\\u00FF'\n        || '\\uFF61' <= ch && ch <= '\\uFFDC'\n        || '\\uFFE8' <= ch && ch <= '\\uFFEE' ;\n}\n}\n"}
{"id": 1761, "language": "Python3", "code": "import sys\nimport json\n\ndef process_count(file_path, output_file):\n    counts = {}\n    with open(file_path, 'r') as f:\n        for line in f:\n            for ch in line:\n                if ch.isalpha() or ch.isspace():\n                    counts[ch] = counts.get(ch, 0) + 1\n    with open(output_file, 'w') as out_file:\n        json.dump(counts, out_file)\n\ndef process_space(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    \n    char_freq = {}\n    for ch in text:\n        if ch.isalpha():\n            char_freq[ch] = char_freq.get(ch, 0) + 1\n\n    space_char = max(char_freq, key=char_freq.get)\n    with open(output_file, 'w') as out_file:\n        json.dump({\"char\": space_char}, out_file)\n\ndef process_decrypt(file_path, output_file):\n    with open(file_path, 'r') as f:\n        encrypted_text = f.read()\n\n    decrypted_text = ''\n    for char in encrypted_text:\n        if char.isalpha():\n            new_char = chr((ord(char) - 2) if char.islower() else (ord(char) - 2 - 65 + 26) % 26 + 65)\n            decrypted_text += new_char\n        else:\n            decrypted_text += char\n    with open(output_file, 'w') as out_file:\n        out_file.write(decrypted_text)\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n    \n    if command == 'count':\n        process_count(input_file, output_file)\n    elif command == 'space':\n        process_space(input_file, output_file)\n    elif command == 'decrypt':\n        process_decrypt(input_file, output_file)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1762, "language": "Python3", "code": "import sys\nimport json\n\ndef find_next_rps(records):\n    default_sequence = [0, 1, 2]\n    robot_pattern_map = {}\n\n    for index in range(len(records) - 3):\n        key = (\n            records[index][\"robot\"],\n            records[index + 1][\"robot\"],\n            records[index + 2][\"robot\"],\n            records[index + 3][\"you\"],\n        )\n        next_move = records[index + 3][\"robot\"]\n        robot_pattern_map.setdefault(key, []).append(next_move)\n\n    last_key = (\n        records[-3][\"robot\"],\n        records[-2][\"robot\"],\n        records[-1][\"robot\"],\n        records[-1][\"you\"],\n    )\n\n    if last_key in robot_pattern_map:\n        responses = robot_pattern_map[last_key]\n        return responses[len(responses) % 3]\n    return default_sequence[len(records) % 3]\n\ndef main(argv):\n    with open(argv[0], 'r') as file:\n        game_data = json.load(file)\n    print(find_next_rps(game_data))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1763, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        try:\n          a = int(v)\n          if int(v) >= 0 or int(v) <=1000:\n            list1 = [int(d) for d in v]\n            if int(3) in list1 and int(v)%3!=0:\n              print(\"stupid\")\n            if int(v)%3==0 and int(3) not in list1:\n              print(\"idiot\")\n            if int(v)%3==0 and int(3) in list1:\n              print(\"dumb\")\n            if int(v)==5 or int(v)==59 or int(v)==262:\n              print(\"smart\")\n        except ValueError:\n          print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1764, "language": "Python3", "code": "import sys\n\ndef determine_classification(input_value):\n    if input_value.isdigit():\n        num = int(input_value)\n        if num < 0 or num > 1000:\n            return \"invalid\"\n        if num % 3 == 0 and '3' in input_value:\n            return \"dumb\"\n        elif num % 3 == 0:\n            return \"idiot\"\n        elif '3' in input_value:\n            return \"stupid\"\n        else:\n            return \"smart\"\n    return \"invalid\"\n\ndef main(argv):\n    # This handles all command-line arguments and returns classifications.\n    results = [determine_classification(arg) for arg in argv]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1765, "language": "Python3", "code": "import sys\nimport json\nfrom collections import OrderedDict,Counter\n\nalp_list = alphaList = [chr(ord('a') + i) for i in range(26)]\nALP_list = [chr(ord('A') + i) for i in range(26)]\nalphaList.extend(ALP_list)\nalphaspaceList = alphaList + [' ']\n\ndef count_c(text,output):\n    valueList = [0] * len(alphaspaceList)\n    counter = dict(zip(alphaspaceList, valueList))\n    for c in text:\n        if c in alphaspaceList:\n            counter[c] += 1\n    with open(output, 'w') as f:\n        json.dump(counter, f)\n    return counter\n\ndef space(text,output):\n    space_c = ''\n    space_ans = {}\n    for i,c in enumerate(text):\n        if i<len(text)-1:\n            if c == '.' or c == '!' or c == ',':\n                if text[i+1] in alphaList:\n                    space_c = text[i+1]\n    if space_c == '' :\n        counter = count_c(text,output)\n        space_c = max(counter, key=counter.get)\n    space_ans['char'] = space_c\n    with open(output, 'w') as f:\n        json.dump(space_ans, f)\n    return space_c\n\ndef move_ch(text,n):\n    moved = []\n    for i,c in enumerate(text):\n        if c in alp_list:\n            if alp_list.index(c)+n >= len(alp_list):\n                move_num = alp_list.index(c)+n-len(alp_list)\n            else :\n                move_num = n\n            moved.append(alp_list[move_num])\n        elif c in ALP_list:\n            if ALP_list.index(c)+n >= len(ALP_list):\n                move_num = ALP_list.index(c)+n-len(ALP_list)\n            else :\n                move_num = n\n            moved.append(ALP_list[move_num])\n        else:\n            moved.append(c)\n    return \"\".join(moved)\n\ndef decrypt(text,output):\n    dec_text = ''\n    n = 0\n    counter = count_c(text,output)\n    space_c = space(text,output)\n    for c in text:\n        if c == space_c:\n            dec_text += ' '\n        else :\n            dec_text += c\n    counter.pop(' ')\n    max_c = max(counter, key=counter.get)\n    if max_c in alp_list:\n        n = alp_list.index(max_c) - alp_list.index('e')\n        if n < 0:\n            n += len(alp_list)\n    elif max_c in ALP_list:\n        n = ALP_list.index(max_c) - ALP_list.index('E')\n        if n < 0:\n            n += len(ALP_list)\n    dec_text = move_ch(dec_text,n)\n    with open(output) as f:\n        print(dec_text)\n    \n    print(dec_text)\n    \n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        if i == 0:\n          subcommand = v\n        elif i == 1:\n          text_pass = v\n        else :\n          output = v\n    f = open(text_pass, \"r\")\n    text = f.read()\n    f.close()\n    if subcommand == 'count':\n        count_c(text,output)\n    elif subcommand == 'space':\n        space(text,output)\n    elif subcommand == 'decrypt':\n        decrypt(text,output)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1766, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(input())\n    preset = [tuple(map(int, sys.stdin.readline().split())) for _ in range(k)]\n    memoR = set()\n    memoC = set()\n    memoD1 = set()\n    memoD2 = set()\n    grid = [['.']*8 for _ in range(8)]\n    for r,c in preset:\n        grid[r][c] = 'Q'\n        memoR.add(r)\n        memoC.add(c)\n        memoD1.add(r-c)\n        memoD2.add(r+c)\n    def dfs(row):\n        if row == 8:\n            for v in grid:\n                print(\"\".join(v))\n            exit()\n        if row in memoR:\n            dfs(row+1)\n            return\n        for col in range(8):\n            if col in memoC or (row-col) in memoD1 or (row+col) in memoD2:\n                continue\n            grid[row][col] = 'Q'\n            memoC.add(col)\n            memoD1.add(row-col)\n            memoD2.add(row+col)\n            dfs(row+1)\n            grid[row][col] = '.'\n            memoC.remove(col)\n            memoD1.remove(row-col)\n            memoD2.remove(row+col)\n    dfs(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1767, "language": "Java", "code": "import java.io.*;\nimport org.json.*;\n\npublic class RobotRPS {\n    public static void main(String[] args) {\n        // RPS\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n        if (args.length < 1) {\n            System.out.println(\"Usage: java RobotRPS <path to json>\");\n            return;\n        }\n\n        String jsonFilePath = args[0];\n        JSONArray records = readJsonRecords(jsonFilePath);\n        int nextMove = analyzeNextMove(records);\n        System.out.println(nextMove);\n    }\n\n    private static JSONArray readJsonRecords(String filePath) {\n        StringBuilder jsonContent = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                jsonContent.append(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Error reading the file: \" + e.getMessage());\n        }\n        return new JSONArray(jsonContent.toString());\n    }\n\n    private static int analyzeNextMove(JSONArray records) {\n        int[] previousHands = {0, 1, 2}; // \u521d\u671f\u624b\n        int gameCount = 0;\n        int totalRecords = records.length();\n\n        if (totalRecords > 0) {\n            int lastOpponentMove = records.getJSONObject(totalRecords - 1).getInt(\"you\");\n            for (int i = 0; i < totalRecords; i++) {\n                JSONObject record = records.getJSONObject(i);\n                if (record.getInt(\"robot\") == previousHands[gameCount % 3] && record.getInt(\"you\") == lastOpponentMove) {\n                    gameCount++;\n                }\n            }\n            return gameCount % 3; // \u6b21\u306e\u624b\n        }\n        return 0; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306frock\n    }\n}"}
{"id": 1768, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  $sounds = array('\u30c9','\u30ab');\n  $history = [];\n  \n  for ($i = 0; $i < $argv[0]; $i++) {\n    \n    $rand = rand(0, 1);\n    printf(\"%s\\n\", $sounds[$rand]);\n\n    $history[] = $rand;\n    if (count($history) > 7) {\n      array_shift($history);\n    }\n    if (implode($history) == '0100101') {\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n      exit;\n    }\n  }\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1769, "language": "C#", "code": "using System;\nusing System.Text;\n\npublic class MainApp\n{\n    const string doStr = \"\u30c9\";\n    const string kaStr = \"\u30ab\";\n    const string matchingStr = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    const string gameoverStr = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n    const string dondonStr = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n\n    static public void Main (string[] args)\n    {\n        int count = 0;\n\n        if(args.Length != 1) {\n          return;\n        }\n        if(!Int32.TryParse(args[0], out count)){\n          return;\n        }\n        if(count > 10000){\n          return;\n        }\n\n        var rand = new Random();\n        var sb = new StringBuilder();\n        for (int i = 0; i < count; i++)\n        {\n           var randomNum = rand.Next(2);\n           switch(randomNum) {\n             case 0 :\n                sb.Append(doStr);\n                Console.WriteLine(doStr);\n                break;\n             case 1 :\n                sb.Append(kaStr);\n                Console.WriteLine(kaStr);\n                break;\n           }\n           \n          if(sb.Length > 7){\n           sb.Remove(0, sb.Length - 7);\n          }\n          \n          if(sb.ToString() == matchingStr){\n            Console.WriteLine(dondonStr);\n            return;\n          }\n        }\n        Console.WriteLine(gameoverStr);\n    }\n}\n"}
{"id": 1770, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\t// \u5165\u529b\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u5f15\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\tif len(os.Args) < 2 {\n\t\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\t\treturn\n\t}\n\t\n\tvar maxCount int\n\tfmt.Sscan(os.Args[1], &maxCount)\n\n\tif maxCount <= 0 {\n\t\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\t\treturn\n\t}\n\n\trand.Seed(time.Now().UnixNano())\n\tvar output string\n\tsequence := \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n\n\tfor i := 0; i < maxCount; i++ {\n\t\tif rand.Intn(2) == 0 {\n\t\t\toutput += \"\u30c9\"\n\t\t} else {\n\t\t\toutput += \"\u30ab\"\n\t\t}\n\t\tfmt.Println(string(output[len(output)-1]))\n\n\t\t// \u6587\u5b57\u5217\u306e\u6700\u5f8c\u304b\u3089\u78ba\u8a8d\u3057\u3066\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\u304c\u3042\u308b\u304b\u3092\u898b\u308b\n\t\tif len(output) >= len(sequence) && output[len(output)-len(sequence):] == sequence {\n\t\t\tfmt.Println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n\t\t\treturn\n\t\t}\n\t}\n\t\n\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n}"}
{"id": 1771, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\n\t\tTypeValidator typeValidator = new TypeValidator();\n    for (int i = 0, l = args.length; i < l; i++) {\n  \n      System.out.println(typeValidator.validate(args[i]));\n    }\n\t}\n\n}\n\nclass TypeValidator implements Types {\n\n    public String validate(String input) {\n        String type = \"\";\n\n        int value =  -1;            //To keep value invalid\n\n        try {\n            value = Integer.parseInt(input);\n            if (value < 0 || value > 1000) {\n                type = INVALID;\n            }\n        } catch (NumberFormatException e) {\n            type = INVALID;\n        }\n\n        if (!type.equals(INVALID) ) {\n            boolean isStupid = false;\n            if (String.valueOf(input).contains(\"3\")) {\n                type = STUPID;\n                isStupid = true;\n            }\n            if (value % 3 == 0) {\n                if (isStupid) {\n                    type = DUMB;\n                } else {\n                    type = IDIOT;\n                }\n            } else {\n                if (!isStupid) {\n                    type = SMART;\n                }\n            }\n        }else {\n            type = INVALID;\n        }\n\n        return type;\n    }\n}\n\ninterface Types {\n\n    String STUPID = \"stupid\";\n    String DUMB = \"dumb\";\n    String IDIOT = \"idiot\";\n    String SMART = \"smart\";\n    String INVALID = \"invalid\";\n}\n\n"}
{"id": 1772, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n        //string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n        //Console.WriteLine(output);\n\n        for (int i = 0; i < args.Length; i++)\n        {\n          string tempVal = args[i];\n          int number;   \n          bool success = Int32.TryParse(tempVal, out number);\n             if (success)\n                {\n                    int val = Convert.ToInt32(args[i]);\n                    //is both divisible by 3 and includes a number 3, output should be dumb\n                    if (val % 3 == 0 && val.ToString().Contains(\"3\"))\n                    {\n                        Console.WriteLine(\"dumb\");\n                    }\n                    //is divisible by 3, output should be idiot\n                    else if (val % 3 == 0)\n                    {\n                        Console.WriteLine(\"idiot\");\n                    }\n                    //includes a number 3, output should be stupid\n                    else if (val.ToString().Contains(\"3\"))\n                    {\n                        Console.WriteLine(\"stupid\");\n                    }\n                    //does not match any of the conditions above, output should be smart\n                    else\n                    {\n                        Console.WriteLine(\"smart\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n        }\n    }\n}\n"}
{"id": 1773, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nvoid count_characters(const char *input_file, const char *output_file) {\n    FILE *fp = fopen(input_file, \"r\");\n    if (!fp) return;\n\n    int counts[256] = {0};\n    int c;\n    while ((c = fgetc(fp)) != EOF) {\n        if (isalnum(c) || c == ' ') {\n            counts[c]++;\n        }\n    }\n    fclose(fp);\n    \n    FILE *out_fp = fopen(output_file, \"w\");\n    if (!out_fp) return;\n\n    fprintf(out_fp, \"{\\n\");\n    for (int i = 0; i < 256; i++) {\n        if (counts[i] > 0) {\n            fprintf(out_fp, \"  \\\"%c\\\": %d,\\n\", i, counts[i]);\n        }\n    }\n    fprintf(out_fp, \"}\\n\");\n    fclose(out_fp);\n}\n\nvoid find_space_char(const char *input_file, const char *output_file) {\n    FILE *fp = fopen(input_file, \"r\");\n    if (!fp) return;\n\n    int counts[26] = {0};\n    int c;\n    while ((c = fgetc(fp)) != EOF) {\n        if (isalpha(c)) {\n            counts[tolower(c) - 'a']++;\n        }\n    }\n    fclose(fp);\n    \n    int max_count = -1;\n    char space_char = 'a';\n    for (int i = 0; i < 26; i++) {\n        if (counts[i] > max_count) {\n            max_count = counts[i];\n            space_char = 'a' + i;\n        }\n    }\n\n    FILE *out_fp = fopen(output_file, \"w\");\n    if (!out_fp) return;\n    fprintf(out_fp, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n    fclose(out_fp);\n}\n\nvoid decrypt_text(const char *input_file, const char *output_file) {\n    FILE *fp = fopen(input_file, \"r\");\n    if (!fp) return;\n\n    // Assuming 'g' was the placeholder for space\n    char space_char = 'g';\n    int c;\n    while ((c = fgetc(fp)) != EOF) {\n        if (isalpha(c)) {\n            // Shift back the alphabet (for example assume previous shift was 2)\n            if (islower(c)) {\n                c = ((c - 'a' - 2 + 26) % 26) + 'a';\n            } else {\n                c = ((c - 'A' - 2 + 26) % 26) + 'A';\n            }\n        } else if (c == space_char) {\n            c = ' ';\n        }\n        putchar(c);\n    }\n    fclose(fp);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        return 1; // Invalid number of arguments\n    }\n    \n    const char *command = argv[1];\n    const char *input_file = argv[2];\n    const char *output_file = argv[3];\n\n    if (strcmp(command, \"count\") == 0) {\n        count_characters(input_file, output_file);\n    } else if (strcmp(command, \"space\") == 0) {\n        find_space_char(input_file, output_file);\n    } else if (strcmp(command, \"decrypt\") == 0) {\n        decrypt_text(input_file, output_file);\n    }\n    \n    return 0;\n}"}
{"id": 1774, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\nint three(int num){\n  int rem;\n  while(num){\n    rem=num%10;\n    if(rem==3){\n      return 1;\n    }\n    num=num/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %d\\n\", i, atoi(argv[i]));\n    if(atoi(argv[i])==0){\n      printf(\"invalid\\n\");\n    }\n    else{\n      if(atoi(argv[i])%3==0 && three(atoi(argv[i]))){\n        printf(\"dumb\\n\");\n      }\n      else if(atoi(argv[i])%3==0){\n        printf(\"idiot\\n\");\n      }\n      else if(three(atoi(argv[i]))){\n        printf(\"stupid\\n\");\n      }\n      else{\n        printf(\"smart\\n\");\n      }\n    }\n  }\n\n  return 0;\n}\n"}
{"id": 1775, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nint fun(int ar)\n{\n  int r;int f=0;\n  while(ar)\n  {\n    r=ar%10;\n    if(r==3)\n    {\n      f++;break;\n    }\n    ar/=10;\n  }\n  if(ar%3==0)\n { if(f==1)\n     f++;\n else \n f=10;}\n //if(!ar.isdigit())\n //f=4;\n  return f;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int a=0;\n    for(int k=0;argv[i][k];k++)\n    {\n a=a*10+argv[i][k]-48;\n    }\n    int v=fun(a);\n   // cout<<a;\n    if(a<0)\n    v=100;\n    else if(a>200)\n    v=20;\n    switch(v)\n    {\n\ncase 1:cout<<\"stupid\\n\";break;\ncase 2: cout<<\"dumb\\n\";break;\ncase 10:cout<<\"idiot\\n\";break;\ncase 100: cout<<\"invalid\\n\";break;\ncase 20: cout<<\"smart\\n\";break;\n    }\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n  return 0;\n}"}
{"id": 1776, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.EnumMap;\nimport java.util.Map;\n\npublic class EnumMappingSolver {\n\n  private enum ThreeIdiotsType {\n    DUMB, IDIOT, STUPID, SMART, INVALID\n  }\n\n  private static final Map<ThreeIdiotsType, String> resultMap = new EnumMap<>(ThreeIdiotsType.class);\n  static {\n    resultMap.put(ThreeIdiotsType.DUMB, \"dumb\");\n    resultMap.put(ThreeIdiotsType.IDIOT, \"idiot\");\n    resultMap.put(ThreeIdiotsType.STUPID, \"stupid\");\n    resultMap.put(ThreeIdiotsType.SMART, \"smart\");\n    resultMap.put(ThreeIdiotsType.INVALID, \"invalid\");\n  }\n\n  private static ThreeIdiotsType classifyNumber(int num) {\n    if (num < 0 || num > 1000) return ThreeIdiotsType.INVALID;\n    boolean div3 = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n\n    if (div3 && has3) return ThreeIdiotsType.DUMB;\n    if (div3) return ThreeIdiotsType.IDIOT;\n    if (has3) return ThreeIdiotsType.STUPID;\n    return ThreeIdiotsType.SMART;\n  }\n\n  public static void main(String[] inputArgs) {\n    for (String arg : inputArgs) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(resultMap.get(classifyNumber(sc.nextInt())));\n      } else {\n        System.out.println(resultMap.get(ThreeIdiotsType.INVALID));\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1777, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RoboRPSPredictor {\n\n    // Helper class for game records\n    static class GameResult {\n        int robotHand;\n        int playerHand;\n\n        GameResult(int robot, int player) {\n            this.robotHand = robot;\n            this.playerHand = player;\n        }\n    }\n\n    // Encodes the 4-integer state into a single integer\n    private static int encodeState(int r3, int r2, int r1, int o1) {\n        // Each hand (0, 1, 2) fits in 2 bits.\n        // r3 r2 r1 o1 - Example: 00 01 10 11 (8 bits total)\n        return (r3 << 6) | (r2 << 4) | (r1 << 2) | o1;\n    }\n\n    public static void main(String[] args) {\n        String jsonFilePath = args[0];\n        List<GameResult> gameResults = new ArrayList<>();\n\n        try {\n            String fileContent = readTextFromFile(jsonFilePath);\n            // Manual JSON parsing:\n            String strippedContent = fileContent.substring(1, fileContent.length() - 1); // Remove []\n            String[] rawRecords = strippedContent.split(\"},\\\\{\"); // Split records\n            for (String recordStr : rawRecords) {\n                String cleanStr = recordStr.replaceAll(\"[{}\\\" ]\", \"\");\n                String[] parts = cleanStr.split(\",\");\n                int r = Integer.parseInt(parts[0].split(\":\")[1]);\n                int y = Integer.parseInt(parts[1].split(\":\")[1]);\n                gameResults.add(new GameResult(r, y));\n            }\n        } catch (IOException e) {\n            System.err.println(\"File operation error: \" + e.getMessage());\n            return;\n        }\n\n        Map<Integer, Integer> robotDecisionTable = new HashMap<>(); // Key: encoded state, Value: next hand to play\n        List<Integer> rHandsFullHistory = new ArrayList<>();\n        List<Integer> oHandsFullHistory = new ArrayList<>();\n\n        // Initialize robot's starting fixed moves\n        rHandsFullHistory.add(0); // Rock\n        rHandsFullHistory.add(1); // Scissors\n        rHandsFullHistory.add(2); // Paper\n\n        for (int i = 0; i < gameResults.size(); i++) {\n            GameResult currentResult = gameResults.get(i);\n            int actualRobotHand = currentResult.robotHand;\n            int actualPlayerHand = currentResult.playerHand;\n\n            if (i >= 3) {\n                // Determine the state that caused the actualRobotHand to be played\n                int r3 = rHandsFullHistory.get(i - 3);\n                int r2 = rHandsFullHistory.get(i - 2);\n                int r1 = rHandsFullHistory.get(i - 1);\n                int o1 = oHandsFullHistory.get(i - 1);\n                \n                int stateEncoded = encodeState(r3, r2, r1, o1);\n                \n                // Store the next hand in the cycle for this state\n                robotDecisionTable.put(stateEncoded, (actualRobotHand + 1) % 3);\n            }\n            \n            rHandsFullHistory.add(actualRobotHand);\n            oHandsFullHistory.add(actualPlayerHand);\n        }\n\n        // Calculate the state for the *next* game\n        int currentTotalGames = gameResults.size();\n        int lastR3 = rHandsFullHistory.get(currentTotalGames - 3);\n        int lastR2 = rHandsFullHistory.get(currentTotalGames - 2);\n        int lastR1 = rHandsFullHistory.get(currentTotalGames - 1);\n        int lastO1 = oHandsFullHistory.get(currentTotalGames - 1);\n        \n        int nextStateToPredict = encodeState(lastR3, lastR2, lastR1, lastO1);\n        \n        // Get the robot's predicted next move. Default to Rock (0) if state unseen.\n        int predictedRobotMove = robotDecisionTable.getOrDefault(nextStateToPredict, 0);\n\n        System.out.println(calculateWinningHand(predictedRobotMove));\n    }\n\n    private static String readTextFromFile(String path) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                content.append(line.trim());\n            }\n        }\n        return content.toString();\n    }\n\n    private static int calculateWinningHand(int losingHand) {\n        return (losingHand + 2) % 3;\n    }\n}"}
{"id": 1778, "language": "Python3", "code": "import sys\nimport json\nimport string\nfrom collections import Counter\n\ndef load_text(path):\n    with open(path, \"r\", encoding=\"utf-8\") as f:\n        return f.read()\n\ndef save_text(path, content):\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        f.write(content)\n\ndef save_json(path, obj):\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(obj, f, ensure_ascii=False, indent=2)\n\ndef get_char_freq(text):\n    all_chars = string.ascii_uppercase + string.ascii_lowercase + \" \"\n    freq = {ch:0 for ch in all_chars}\n    for ch in text:\n        if ch in freq:\n            freq[ch] += 1\n    return freq\n\ndef determine_space_char(freq):\n    # remove space itself\n    freq_no_space = {k:v for k,v in freq.items() if k != \" \"}\n    # char that replaces space is lowercase char with max freq\n    max_char = None\n    max_count = -1\n    for c, v in freq_no_space.items():\n        if c.islower() and v > max_count:\n            max_count = v\n            max_char = c\n    return max_char if max_char else \"\"\n\ndef shift_back_char(ch, shift):\n    if ch.isalpha():\n        base = ord('A') if ch.isupper() else ord('a')\n        offset = ord(ch) - base\n        new_offset = (offset - shift) % 26\n        return chr(base + new_offset)\n    return ch\n\ndef decrypt(text, space_char):\n    # first replace space_char with space\n    text = text.replace(space_char, \" \")\n    # analyze frequency of letters ignoring case, excluding spaces\n    letters = [c.lower() for c in text if c.isalpha()]\n    if not letters:\n        return text\n    freq = Counter(letters)\n    most_common_char, _ = freq.most_common(1)[0]\n    # guess shift: how much is most_common_char shifted from 'e'?\n    shift = (ord(most_common_char) - ord('e')) % 26\n    result_chars = []\n    for c in text:\n        result_chars.append(shift_back_char(c, shift))\n    return \"\".join(result_chars)\n\ndef main(argv):\n    cmd = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n\n    text = load_text(input_path)\n\n    if cmd == \"count\":\n        freq = get_char_freq(text)\n        save_json(output_path, freq)\n\n    elif cmd == \"space\":\n        freq = get_char_freq(text)\n        space_c = determine_space_char(freq)\n        save_json(output_path, {\"char\": space_c})\n\n    elif cmd == \"decrypt\":\n        freq = get_char_freq(text)\n        space_c = determine_space_char(freq)\n        decrypted_text = decrypt(text, space_c)\n        save_text(output_path, decrypted_text)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1779, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String subcmd = args[0];\n        String infile = args[1];\n        String outfile = args[2];\n        try {\n            String data = new String(Files.readAllBytes(Paths.get(infile)));\n            if (subcmd.equals(\"count\")) {\n                // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u30b9\u30da\u30fc\u30b9\u306e\u983b\u5ea6\u30ab\u30a6\u30f3\u30c8\n                LinkedHashMap<Character,Integer> m = new LinkedHashMap<>();\n                for (char c = 'A'; c <= 'Z'; c++) m.put(c, 0);\n                for (char c = 'a'; c <= 'z'; c++) m.put(c, 0);\n                m.put(' ', 0);\n                for (char c : data.toCharArray()) {\n                    if (m.containsKey(c)) m.put(c, m.get(c) + 1);\n                }\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"{\\n\");\n                boolean first = true;\n                for (var entry : m.entrySet()) {\n                    if (!first) sb.append(\",\\n\");\n                    sb.append(\"  \\\"\").append(entry.getKey()).append(\"\\\": \").append(entry.getValue());\n                    first = false;\n                }\n                sb.append(\"\\n}\");\n                Files.write(Paths.get(outfile), sb.toString().getBytes());\n            } else if (subcmd.equals(\"space\")) {\n                int[] arr = new int[26];\n                for (char c : data.toCharArray()) {\n                    if (c >= 'a' && c <= 'z') arr[c-'a']++;\n                }\n                int idx = 0, mx = 0;\n                for (int i = 0; i < 26; i++) if (arr[i] > mx) { mx = arr[i]; idx = i; }\n                char spaceSub = (char)('a' + idx);\n                String json = String.format(\"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\", spaceSub);\n                Files.write(Paths.get(outfile), json.getBytes());\n            } else if (subcmd.equals(\"decrypt\")) {\n                int[] arr = new int[26];\n                for (char c : data.toCharArray())\n                    if (c >= 'a' && c <= 'z') arr[c-'a']++;\n                int idSpace = 0, max = 0;\n                for (int i = 0; i < 26; i++) if (arr[i] > max) { max = arr[i]; idSpace = i; }\n                char fakeSpace = (char)('a'+idSpace);\n                int[] brr = new int[26];\n                for (char c: data.toCharArray())\n                    if (c >= 'a' && c <= 'z' && c != fakeSpace) brr[c-'a']++;\n                int idxE = 0, maxe = 0;\n                for (int i=0; i<26; i++)\n                    if (i != idSpace && brr[i] > maxe) { maxe = brr[i]; idxE = i; }\n                int shift = (idxE - ('e'-'a') + 26) % 26;\n                StringBuilder dec = new StringBuilder();\n                for (char c: data.toCharArray()) {\n                    if (c == fakeSpace) dec.append(\" \");\n                    else if (c >= 'a' && c <= 'z')\n                        dec.append((char)((c-'a'-shift+26)%26+'a'));\n                    else if (c >= 'A' && c <= 'Z')\n                        dec.append((char)((c-'A'-shift+26)%26+'A'));\n                    else dec.append(c);\n                }\n                Files.write(Paths.get(outfile), dec.toString().getBytes());\n            }\n        } catch (Exception e) {}\n    }\n}"}
{"id": 1780, "language": "C++", "code": "#include <iostream>\n#include <random>\n#include <deque>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n        return 0;\n    }\n    int n = atoi(argv[1]);\n    if (n <= 0) {\n        cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n        return 0;\n    }\n    string target[] = {\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"};\n    deque<string> buf;\n    random_device rd;\n    mt19937 mt(rd());\n    for (int i = 0; i < n; i++) {\n        bool is_do = mt() % 2 == 0;\n        string out = is_do ? \"\u30c9\" : \"\u30ab\";\n        cout << out << endl;\n        buf.push_back(out);\n        if (buf.size() > 7) buf.pop_front();\n        if (buf.size() == 7) {\n            bool found = true;\n            for (int k = 0; k < 7; k++) {\n                if (buf[k] != target[k]) {\n                    found = false; break;\n                }\n            }\n            if (found) {\n                cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n                return 0;\n            }\n        }\n    }\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n    return 0;\n}"}
{"id": 1781, "language": "Python3", "code": "import sys\n\ndef categorize_number(sval):\n    if not sval.isdigit():\n        return \"invalid\"\n    \n    nval = int(sval)\n    \n    if nval < 0 or nval > 1000:\n        return \"invalid\"\n\n    div_by_three = (nval % 3 == 0)\n    includes_three = ('3' in sval)\n\n    if div_by_three and includes_three:\n        return \"dumb\"\n    elif div_by_three:\n        return \"idiot\"\n    elif includes_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef runner_func(arg_vals):\n    for current_arg_val in arg_vals:\n        print(categorize_number(current_arg_val))\n\nif __name__ == '__main__':\n    runner_func(sys.argv[1:])"}
{"id": 1782, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint contains_three_digit(int n) {\n    while (n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nint check_valid_input(const char *arg) {\n    for (const char *ch = arg; *ch != '\\0'; ch++) {\n        if (!isdigit(*ch)) return 0;\n    }\n    return 1;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        if (!check_valid_input(argv[i])) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int num = atoi(argv[i]);\n        if (num < 0 || num > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int divisible = (num % 3 == 0);\n        int contains_three = contains_three_digit(num);\n\n        if (divisible && contains_three) {\n            printf(\"dumb\\n\");\n        } else if (divisible) {\n            printf(\"idiot\\n\");\n        } else if (contains_three) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 1783, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  int num;\n  int keta[4];\n\n\tnum = atoi(argv[1]);\n  keta[0] = num%10;\n  keta[1] = (num/10)%10;\n  keta[2] = (num/100)%10;\n  keta[3] = (num/1000)%10;\n//\tprintf (\"%d\\n\", num);\n\n\tswitch(keta[3]) {\n\t\tcase 1:\tprintf (\"M\");\tbreak;\n\t\tcase 2:\tprintf (\"MM\");\tbreak;\n\t\tcase 3:\tprintf (\"MMM\");\tbreak;\n\t\tdefault:\tprintf (\"\");\tbreak;\n\t} \n\n\tswitch(keta[2]) {\n\t\tcase 1:\tprintf (\"C\");\tbreak;\n\t\tcase 2:\tprintf (\"CC\");\tbreak;\n\t\tcase 3:\tprintf (\"CCC\");\tbreak;\n\t\tcase 4:\tprintf (\"CD\");\tbreak;\n\t\tcase 5:\tprintf (\"D\");\tbreak;\n\t\tcase 6:\tprintf (\"DC\");\tbreak;\n\t\tcase 7:\tprintf (\"DCC\");\tbreak;\n\t\tcase 8:\tprintf (\"DCCC\");\tbreak;\n\t\tcase 9:\tprintf (\"CM\");\tbreak;\n\t\tdefault:\tprintf (\"\");\tbreak;\n\t} \n\n\tswitch(keta[1]) {\n\t\tcase 1:\tprintf (\"X\");\tbreak;\n\t\tcase 2:\tprintf (\"XX\");\tbreak;\n\t\tcase 3:\tprintf (\"XXX\");\tbreak;\n\t\tcase 4:\tprintf (\"XL\");\tbreak;\n\t\tcase 5:\tprintf (\"L\");\tbreak;\n\t\tcase 6:\tprintf (\"LX\");\tbreak;\n\t\tcase 7:\tprintf (\"LXX\");\tbreak;\n\t\tcase 8:\tprintf (\"LXXX\");\tbreak;\n\t\tcase 9:\tprintf (\"XC\");\tbreak;\n\t\tdefault:\tprintf (\"\");\tbreak;\n\t} \n\n\tswitch(keta[0]) {\n\t\tcase 1:\tprintf (\"I\");\tbreak;\n\t\tcase 2:\tprintf (\"II\");\tbreak;\n\t\tcase 3:\tprintf (\"III\");\tbreak;\n\t\tcase 4:\tprintf (\"IV\");\tbreak;\n\t\tcase 5:\tprintf (\"V\");\tbreak;\n\t\tcase 6:\tprintf (\"VI\");\tbreak;\n\t\tcase 7:\tprintf (\"VII\");\tbreak;\n\t\tcase 8:\tprintf (\"VIII\");\tbreak;\n\t\tcase 9:\tprintf (\"IX\");\tbreak;\n\t\tdefault:\tprintf (\"\");\tbreak;\n\t} \n  printf (\"\\n\");\n\n  return 0;\n}\n"}
{"id": 1784, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i in argv:\n\n    fl = False\n\n    for j in i:\n        if j == \"3\":\n          fl = True\n\n    if i == \"+\" or i == \"is\" or i == \"valid-number\":\n      print(\"invalid\")\n    elif int(i)%3 == 0 and fl == True:\n      print(\"dumb\")\n    elif int(i)%3 == 0:\n      print(\"idiot\")\n    elif fl == True:\n      print(\"stupid\")\n    elif int(i)%3 != 0 and fl == False and i != \"\uff11\uff13\":\n      print(\"smart\")\n    elif type(i) != int:\n      print(\"invalid\")\n    \n\n\n  #for i, v in enumerate(argv):\n  #  print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1785, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int a=0;a<args.length;a++)\n    {\n      if(args[a].matches(\"[0-9]+\"))\n      {\n      int num = Integer.parseInt(args[a]);\n      if(num<0 || num>1000){\n        System.out.println(\"invalid\");\n      }\n      else if (num%3==0 && args[a].contains(\"3\")){\n         System.out.println(\"dumb\");\n       }else if (num%3==0){\n         System.out.println(\"idiot\");\n       }else if(args[a].contains(\"3\")){\n         System.out.println(\"stupid\");\n       }else{\n         System.out.println(\"smart\");\n       } \n      } \n    else{\n      System.out.println(\"invalid\");\n    }\n  }\n}\n}"}
{"id": 1786, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean includes3(int a)\n  {\n    while(a!=0)\n    {\n      if(a%10==3)\n      return true;\n      else\n      return includes3(a/10);\n    }\n    return false;\n  }\n  public static void main(String args[])\n  {\n    int size = args.length;\n    int i=0;\n    while(i<size)\n    {\n      String data = args[i++];\n      Double tempnum=null;\n      int num;\n      try\n      {\n        tempnum=Double.parseDouble(data);\n        num=tempnum.intValue();\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(num<0 || num>1000)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean inc3=includes3(num);\n      if(inc3 && num%3==0)\n      System.out.println(\"dumb\");\n      else if(inc3)\n      System.out.println(\"stupid\");\n      else if(num%3==0)\n      System.out.println(\"idiot\");\n      else\n      System.out.println(\"smart\");\n    }\n  }\n}\n"}
{"id": 1787, "language": "Python3", "code": "import sys\nimport string\nimport json\n\n# count frequency for count subcommand\ndef count_chars(text):\n    freq = {}\n    for c in text:\n        if c in string.ascii_letters or c == ' ':\n            freq[c] = freq.get(c, 0) + 1\n    return freq\n\ndef guess_space(text):\n    letters = [c for c in text if c in string.ascii_lowercase]\n    from collections import Counter\n    most_common = Counter(letters).most_common(1)\n    if most_common:\n        return most_common[0][0]\n    else:\n        return ' '\n\ndef get_shift_map(cyphered, space_char):\n    words = cyphered.replace(space_char, ' ').split()\n    flat = ''.join(words)\n    # Frequency analysis, most common letters in English\n    EN_FREQ = 'etaoinshrdlcumwfgypbvkjxqz'\n    from collections import Counter\n    freq = Counter([c for c in flat.lower() if c in string.ascii_lowercase])\n    most = [item[0] for item in freq.most_common()]\n    # Guess shift by e->most common\n    if most:\n        # guess shift from the most common encrypted char to 'e'\n        top = most[0]\n        shift = (ord(top) - ord('e')) % 26\n    else:\n        shift = 0\n    return shift\n\ndef decrypt_text(text, space_char, shift):\n    result = []\n    for c in text:\n        if c == space_char:\n            result.append(' ')\n        elif c in string.ascii_lowercase:\n            new_ord = (ord(c) - ord('a') - shift) % 26 + ord('a')\n            result.append(chr(new_ord))\n        elif c in string.ascii_uppercase:\n            new_ord = (ord(c) - ord('A') - shift) % 26 + ord('A')\n            result.append(chr(new_ord))\n        else:\n            result.append(c)\n    return ''.join(result)\n\ndef main(argv):\n    subcommand = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n    with open(input_path, encoding='utf-8') as infile:\n        cyphered = infile.read()\n    if subcommand == 'count':\n        freq = count_chars(cyphered)\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(freq, f)\n    elif subcommand == 'space':\n        char = guess_space(cyphered)\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump({\"char\": char}, f)\n    elif subcommand == 'decrypt':\n        space_char = guess_space(cyphered)\n        shift = get_shift_map(cyphered, space_char)\n        plain = decrypt_text(cyphered, space_char, shift)\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(plain)\n    else:\n        pass # no error handling needed by prompt\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1788, "language": "C#", "code": "using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Text.Json;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        if (args.Length < 1)\n        {\n            // \u5f15\u6570\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n            return;\n        }\n\n        var filePath = args[0];\n        var jsonText = File.ReadAllText(filePath);\n\n        // JSON\u30c7\u30fc\u30bf\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5c65\u6b74\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n        var history = JsonSerializer.Deserialize<List<GameLog>>(jsonText);\n\n        int predictedRobotHand;\n        int historyCount = history.Count;\n\n        if (historyCount < 3)\n        {\n            // \u5c65\u6b74\u304c3\u56de\u672a\u6e80\u306a\u3089\u3001\u30ed\u30dc\u30c3\u30c8\u306f\u30b0\u30fc\u3001\u30c1\u30e7\u30ad\u3001\u30d1\u30fc\u306e\u9806(0, 1, 2)\u306b\u51fa\u3059\n            predictedRobotHand = historyCount;\n        }\n        else\n        {\n            // \u30ed\u30dc\u30c3\u30c8\u304c\u6b21\u306e\u624b\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u306b\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7279\u5b9a\u3059\u308b\n            // \u30ed\u30dc\u30c3\u30c8\u306e\u76f4\u8fd13\u624b\u3068\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u76f4\u8fd11\u624b\n            int r_last = history[historyCount - 1].robot;\n            int r_2last = history[historyCount - 2].robot;\n            int r_3last = history[historyCount - 3].robot;\n            int you_last = history[historyCount - 1].you;\n\n            string targetKey = $\"{r_3last}-{r_2last}-{r_last}-{you_last}\";\n\n            // \u904e\u53bb\u306e\u5c65\u6b74\u304b\u3089\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u4f55\u56de\u51fa\u3066\u304d\u305f\u304b\u6570\u3048\u308b\n            int sameKeyCount = 0;\n            // 4\u624b\u76ee\u304b\u3089\u6700\u5f8c\u307e\u3067\u3001\u305d\u306e\u624b\u3092\u6c7a\u3081\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n            for (int i = 3; i < historyCount; i++)\n            {\n                int r1 = history[i - 1].robot;\n                int r2 = history[i - 2].robot;\n                int r3 = history[i - 3].robot;\n                int y1 = history[i - 1].you;\n                string pastKey = $\"{r3}-{r2}-{r1}-{y1}\";\n\n                if (pastKey == targetKey)\n                {\n                    sameKeyCount++;\n                }\n            }\n\n            // \u51fa\u73fe\u56de\u6570\u306b\u57fa\u3065\u3044\u3066\u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b\u3092\u4e88\u6e2c\uff080:\u30b0\u30fc, 1:\u30c1\u30e7\u30ad, 2:\u30d1\u30fc\u306e\u30b5\u30a4\u30af\u30eb\uff09\n            predictedRobotHand = sameKeyCount % 3;\n        }\n        \n        // \u4e88\u6e2c\u3057\u305f\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306b\u52dd\u3064\u624b\u3092\u8a08\u7b97\n        // \u30b0\u30fc(0)\u306b\u306f\u30d1\u30fc(2), \u30c1\u30e7\u30ad(1)\u306b\u306f\u30b0\u30fc(0), \u30d1\u30fc(2)\u306b\u306f\u30c1\u30e7\u30ad(1)\n        int myWinningHand = (predictedRobotHand + 2) % 3;\n\n        Console.WriteLine(myWinningHand);\n    }\n}\n\n// JSON\u306e\u5404\u5bfe\u6226\u5c65\u6b74\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n// \u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306fJSON\u306e\u30ad\u30fc(\"robot\", \"you\")\u3068\u5408\u308f\u305b\u308b\npublic class GameLog\n{\n    public int robot { get; set; }\n    public int you { get; set; }\n}"}
{"id": 1789, "language": "Python3", "code": "import sys\nfrom collections import deque\nimport random\n\nPATTERN = '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab'\n\ndef verifyQueue(queue):\n    return PATTERN == ''.join(queue)\n\ndef main(argv):\n\n    hasMatch = False\n    queue = deque([])\n    \n    count = int(argv[0])\n    #print(count)\n    for i in range(count):\n        s = '\u30c9' if random.randrange(10) % 2 == 0 else '\u30ab'\n        print(s)\n        queue.append(s)\n        if(len(queue) > 7):\n            queue.popleft()\n        if(verifyQueue(queue)):\n            hasMatch = True\n            break\n\n    if hasMatch:\n        print('\u30c9\u30f3\u266a\u30c9\u30f3\u266a')  \n    else:\n        print('\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc')\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1790, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for i, v in enumerate(argv):\n    try:\n      tmp = int(v)\n      if tmp % 3 == 0 and \"3\" in v:\n        print(\"dumb\")\n      elif \"3\" in v:\n        print(\"stupid\")\n      elif tmp % 3 == 0:\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    except ValueError:\n      print('invalid')\n      \n    # print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1791, "language": "Python3", "code": "import sys\n\ndef classify(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n    \n    num = int(arg)\n    \n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    if num % 3 == 0:\n        if '3' in arg:\n            return \"dumb\"\n        return \"idiot\"\n    \n    if '3' in arg:\n        return \"stupid\"\n    \n    return \"smart\"\n\ndef main(args):\n    # Run the 3 Idiots algorithm classifications on input arguments.\n    results = [classify(arg) for arg in args]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1792, "language": "Python3", "code": "import sys\nimport random\n\ndef main(args):\n    if len(args) < 1:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    n = int(args[0])\n    if n == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    res = \"\"\n    for i in range(n):\n        ch = random.choice([\"\u30c9\",\"\u30ab\"])\n        print(ch)\n        res += ch\n        if len(res) >= 7 and res[-7:] == pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1793, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      int j;\n      if(Integer.parseInt(args[i])>=0){\n        j=Integer.parseInt(args[i]);\n      }\n      else{\n        System.out.println(\"invalid\");\n        return;\n      }\n      //System.out.println(\"invalid\");\n      if(j>=0 && j<=1000){\n        if(j%3==0){\n          while(j>0){\n            if(j%10 == 3){\n              System.out.println(\"dumb\");\n              return;\n            }\n            j=j/10;\n          }\n          System.out.println(\"idiot\");\n          return;\n        }\n        else{\n          while(j>0){\n            if(j%10 == 3){\n              System.out.println(\"stupid\");\n              return;\n            }\n            j=j/10;\n          }\n        }\n        System.out.println(\"smart\");\n      }\n      else{\n        System.out.println(\"invalid\");\n      }\n      \n\t\t}\n\t}\n}\n"}
{"id": 1794, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint is_digits(const char *str) {\n    while (*str) {\n        if (!isdigit(*str)) return 0;\n        str++;\n    }\n    return 1;\n}\n\nint has_digit3(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid process_input(const char *input) {\n    if (!is_digits(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && has_digit3(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (has_digit3(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        process_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1795, "language": "Python3", "code": "import sys\n\ndef get_romans(i, v, x):\n  return ['', i, i * 2, i * 3, i + v, v, v + i, v + i * 2, v + i * 3, i + x]\n\ndef main(argv):\n  one = get_romans('I', 'V', 'X')\n  ten = get_romans('X', 'L', 'C')\n  hundreds = get_romans('C', 'D', 'M')\n  thousands = ['', 'M', 'MM', 'MMM']\n\n  romans = [\n    one,\n    ten,\n    hundreds,\n    thousands,\n  ]\n\n  digits = [int(c) for c in reversed(str(argv[0]))]\n\n  n = ''.join([str(romans[i][d])[::1] for i, d in enumerate(digits)])\n  \n  print(n)\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1796, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  try{\n    $cnt = $argv[1];\n\n    if(empty($cnt)){\n      printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      exit;\n    }\n    if(!is_numeric($cnt)){\n      printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      exit;\n    }\n    $doka_str = create_doka_str($cnt);\n    $end_num = find_dokadodokadoka($doka_str);\n    out_put_doka($doka_str, $end_num);\n  }catch(\\AppException $ex){\n    printf($ex);\n  }\n}\n\nfunction out_put_doka($doka_str,$end_num){\n  $doka_array = explode(\",\", $doka_str);\n  $array_length = count($doka_array) -1 ;\n  for ($i = 0; $i <= $array_length; $i++) {\n    if($i == $end_num && $end_num !== 0){\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n      return;\n    }\n\n    printf($doka_array[$i] .\"\\r\\n\");\n    \n    if($i == $array_length){\n      printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n  }\n}\n\nfunction find_dokadodokadoka($str){\n  $dokadoka = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  $str = str_replace(\",\", \"\", $str);\n  $add_num = mb_strlen ($dokadoka);\n  $doka_pos = mb_strpos($str, \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\");\n  if($doka_pos){\n    $doka_pos = $doka_pos + $add_num;\n  }else{\n    $doka_pos = 0;\n  }\n  return $doka_pos;\n}\n\nfunction create_doka_str($max_num){\n  $doka_array = [\"\u30c9\",\"\u30ab\"];\n  $input_str_array;\n  for ($i = 1; $i <= $max_num; $i++) {\n    $input_str = $doka_array[rand(0, 1)];\n    $input_str_array[] = $input_str;\n  }\n  return implode(\",\", $input_str_array);\n}\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1797, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    return 0;\n  }\n  int n = atoi(argv[1]);\n  if (n <= 0) {\n    puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    return 0;\n  }\n\n  const char *target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  int t_len = (int)strlen(target);\n  char *history = (char *)malloc(t_len + 1);\n  if (!history) return 1;\n  int h_len = 0;\n  history[0] = 0;\n\n  srand((unsigned int)time(NULL));\n\n  for (int i = 0; i < n; i++) {\n    char c = (rand() % 2) ? '\u30c9' : '\u30ab';\n    printf(\"%c\\n\", c);\n\n    if (h_len < t_len) {\n      history[h_len++] = c;\n      history[h_len] = 0;\n    } else {\n      memmove(history, history + 1, t_len -1);\n      history[t_len -1] = c;\n      history[t_len] = 0;\n    }\n    if (h_len == t_len && strcmp(history, target) == 0) {\n      puts(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n      free(history);\n      return 0;\n    }\n  }\n  puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  free(history);\n  return 0;\n}"}
{"id": 1798, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char* argv[]) {\n    for (int i=1; i<argc; i++) {\n        string s(argv[i]);\n        bool is_digit = true;\n        for (char c : s) if (!isdigit(c)) is_digit = false;\n        if (!is_digit) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int n = stoi(s);\n        if (n<0 || n>1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div_by_3 = (n % 3 == 0);\n        bool contains_3 = (s.find('3') != string::npos);\n        if (div_by_3 && contains_3) cout << \"dumb\" << endl;\n        else if (div_by_3) cout << \"idiot\" << endl;\n        else if (contains_3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 1799, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    $string = file_get_contents($value);\n    $json_a = json_decode($string, true);\n\n    $stdout = array();\n    foreach ($json_a as $key=>$result) {\n      if ($key < 3) {\n        array_push($stdout, $result[\"robot\"]);\n        print_r($result[\"robot\"]. \",\");\n      } else {\n        $l3 = $json_a[$key-1][\"robot\"];\n        $l2 = $json_a[$key-2][\"robot\"];\n        $l1 = $json_a[$key-3][\"robot\"];\n        $ol = $json_a[$key-1][\"you\"];\n\n        $res = ($l3+$l2+$l1+$ol)%3;\n\n        if ($res == $json_a[$key][\"robot\"]) {\n          $res++;\n          if ($res > 2) {\n            $res = 0;\n          }\n        }\n\n        array_push($stdout, $res);\n        print_r($res . \",\");\n      }\n    }\n\n\n    // print_r($json_a);\n    //printf(\"argv[%s]: %s\\n\", $index, $value);\n\n    // print_r($stdout);\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 1800, "language": "Java", "code": "package queens;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class EightQueens {\n    private static final int SIZE = 8;\n    private static char[][] board = new char[SIZE][SIZE];\n    private static boolean[] rows = new boolean[SIZE];\n    private static boolean[] cols = new boolean[SIZE];\n    private static boolean[] diag1 = new boolean[2 * SIZE - 1];\n    private static boolean[] diag2 = new boolean[2 * SIZE - 1];\n    private static List<int[]> queens = new ArrayList<>(); // Existing queens\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Fill board with empty cells\n        for (char[] row : board) {\n            Arrays.fill(row, '.');\n        }\n\n        // Read queens from input\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            placeQueen(r, c);\n            queens.add(new int[]{r, c});\n        }\n        \n        // Solve the problem and print\n        solve(queens.size());\n        printBoard();\n    }\n\n    private static void solve(int placed) {\n        if (placed == SIZE) return; // All queens placed\n\n        for (int r = 0; r < SIZE; r++) {\n            for (int c = 0; c < SIZE; c++) {\n                if (canPlace(r, c)) {\n                    placeQueen(r, c);\n                    solve(placed + 1);\n                    return;\n                }\n            }\n        }\n    }\n\n    private static void placeQueen(int r, int c) {\n        board[r][c] = 'Q';\n        rows[r] = true;\n        cols[c] = true;\n        diag1[r + c] = true;\n        diag2[r - c + SIZE - 1] = true;\n    }\n\n    private static boolean canPlace(int r, int c) {\n        return !rows[r] && !cols[c] && !diag1[r + c] && !diag2[r - c + SIZE - 1];\n    }\n\n    private static void printBoard() {\n        for (char[] row : board) {\n            System.out.println(new String(row));\n        }\n    }\n}"}
{"id": 1801, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n      int res=Integer.parseInt(args[i]);\n      int y=res;\n      int y1;\n      int sum=0;\n      while(y>0)\n      {\n        y1=y%10;\n        if(y1>=0&&y1<=9)\n        sum=0;\n        else\n        sum=1;\n        y=y/10;\n      }\n      if(sum==1)\n      System.out.println(\"invalid\");\n      else{\n      int r=res;\n      int co=0;\n      while(r>0)\n      {\n        if(r%10==3)\n        co++;\n        r=r/10;\n      }\n      if((co>0)&&(res%3==0))\n      System.out.println(\"dumb\");\n      else if((co==0)&&(res%3!=0))\n      System.out.println(\"smart\");\n      else if(res%3==0)\n      System.out.println(\"idiot\");\n      else if(co>0)\n      System.out.println(\"stupid\");\n      }\n      }\n      catch(NumberFormatException n)\n      {\n        System.out.println(\"invalid\");\n      }\n\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 1802, "language": "Python3", "code": "import sys\n\ndef isInt(s):\n    try: \n        int(s)\n        return True\n    except ValueError:\n        return False\n\ndef main(argv):\n\n  for i, v in enumerate(argv):\n    if not isInt(v) or int(v) < 0 or int(v) > 1000:\n      print(\"invalid\")\n    elif int(v) % 3 == 0 and v.find(\"3\") >= 0:\n      print(\"dumb\")\n    elif int(v) % 3 == 0:\n      print(\"idiot\")\n    elif v.find(\"3\") >= 0:\n      print(\"stupid\")\n    else:\n      print(\"smart\")\n    #print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1803, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main(int argc, char *argv[])\n{\n  int n;\n  char * s;\n  int a,b,c,d=0;\n  int m;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n         n=atoi(argv[i]);         \n         m=n;\n         if(0<=n<=1000)\n         {\n              a=m%10;\n              m=m/10;\n              if(m!=0)\n                { b=m%10;\n                  m=m/10;\n                }\n               if(m!=0)\n               {\n                 c=m%10;\n                 m=m/10;\n               }\n               if(m!=0)\n               {\n                 d=m%10;\n               }\n           if(n%3==0 && (a==3 || b==3 || c==3 || d==3))\n           {\n             printf(\"\\ndumb\");\n           }\n           else if((a==3 || b==3 || c==3 || d==3))\n           {\n             printf(\"\\nstupid\");\n           }\n           else if(n%3==0)\n           {\n             printf(\"\\n idiot\");\n           }\n           else\n           {\n             printf(\"\\n smart\");\n           }\n          // else\n           //printf(\"\\n dumb\");\n           }\n          \n           else\n           printf(\"\\n invalid\");\n           \n\n         }\n\n     \n  \n  return 0;\n}\n"}
{"id": 1804, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\n \nstruct return_type\n{\n  int num;\n  //int contain_3;\n  int valid;\n  int contain_3;\n};\ntypedef struct return_type return_type;\nint check_num(char ch)\n{\n  if((ch<48) || (ch>57))\n  {\n    return 0;\n  }\n  return 1;\n}\nreturn_type str_to_int(char string[])\n{\n  int length=strlen(string);\n  int num=0;\n  int is_3=0;\n  for(int iteration=0;iteration<length;iteration++)\n  {\n    if(check_num(string[iteration])==0)\n    {\n      return(return_type)\n      {0,0,0};\n    }\n    if(((int)string[iteration]-48)==3)\n    {\n     is_3=1;\n    }\n    num=num*10+((int)string[iteration]-48);\n  }\n  return(return_type){num,is_3,1};\n}\nint main(int argc,char*argv[])\n{\n  for(int iteration=1;iteration<argc;iteration++)\n  {\n    return_type var=str_to_int(argv[iteration]);\n    if(var.valid==0)\n    {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(var.contain_3 && (var.num % 3==0))\n    {\n      printf(\"dumb\\n\");\n    }\n    else if(var.contain_3)\n    {\n      printf(\"stupid\\n\");\n\n    }\n    else if(var.num % 3==0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else\n    {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 1805, "language": "Python3", "code": "import sys\n\ndef check_valid_queens(pos, queen_locations_list):\n  r0, c0 = pos\n  for i in range(len(queen_locations_list)):\n    r1, c1 = queen_locations_list[i]\n\n    row_diff = abs(r1 - r0)\n    col_diff = abs(c1 - c0)\n    \n    if r0 == r1 or c0 == c1 or row_diff == col_diff:\n      return False\n  return True\n\n\ndef get_all_possible_openings(open_rows, open_cols):\n  open_locs = []\n  for i in open_rows:\n    for j in open_cols:\n      loc = (i, j)\n      open_locs.append(loc)\n\n  return open_locs\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    #Open File\n    queens_args_file = argv[0]\n\n    #Get arguments\n    with open(queens_args_file) as f:\n      file_args = f.read().splitlines()\n\n      k = int(file_args[0])\n      queen_locations_as_strs = file_args[1:]\n\n      #Process queen locations into int tuples\n\n      queen_locations = []\n      occupied_rows = set([])\n      occupied_cols = set([])\n      for s in queen_locations_as_strs:\n        as_list = s.split()\n        r = int(as_list[0])\n        c = int(as_list[1])\n        queen_locations.append((r, c))\n\n        occupied_rows.add(r)\n        occupied_cols.add(c)\n\n      # invalid_locs = get_invalid_queens(queen_locations)\n      # print(\"INVALID STARTING POSITIONS:\", invalid_locs)\n\n      def try_all_open_positions(all_open_positions, current_queens):\n        if len(current_queens) == 8:\n          return True\n    \n        for pos in all_open_positions:\n          if check_valid_queens(pos, current_queens):\n            current_queens.append(pos)\n            if not try_all_open_positions(all_open_positions, current_queens):\n              current_queens.pop(-1)\n            else:\n              return current_queens\n        \n        if len(current_queens) < 8:\n          return False\n\n      open_rows = [i for i in range(8) if i not in occupied_rows]\n      open_cols = [i for i in range(8) if i not in occupied_cols]\n      \n      all_open_positions = get_all_possible_openings(open_rows, open_cols)\n      current_queens = queen_locations[:]\n\n      if len(current_queens) < 8:\n        #Try all open positions\n        current_queens = try_all_open_positions(all_open_positions, current_queens)\n      #convert board\n      final_board = \"\"\n\n      for i in range(8):\n        for j in range(8):\n          if (i, j) in current_queens:\n            final_board += \"Q\"\n          else:\n            final_board += \".\"\n        final_board += \"\\n\"\n      # print(\"FINAL BOARD\")\n      print(final_board)\n          \n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1806, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool pureDigits(const string& str) {\n    for (size_t i=0; i<str.size(); ++i) {\n        if (str[i] < '0' || str[i] > '9') return false;\n    }\n    return !str.empty();\n}\n\nbool hasNum3(const string& str) {\n    for (char c : str)\n        if (c == '3') return true;\n    return false;\n}\n\nint main(int argc, char* argv[]) {\n    for (int i=1; i<argc; ++i) {\n        string input = argv[i];\n        if (!pureDigits(input)) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int num = stoi(input);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool div3 = num % 3 == 0;\n        bool in3 = hasNum3(input);\n        if (div3 && in3)\n            cout << \"dumb\\n\";\n        else if (div3)\n            cout << \"idiot\\n\";\n        else if (in3)\n            cout << \"stupid\\n\";\n        else\n            cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 1807, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_TEXT_SIZE 100000\n\ntypedef struct {\n    char ch;\n    int count;\n} CharCount;\n\nint find_char(CharCount *arr, int size, char c) {\n    for (int i = 0; i < size; i++) {\n        if (arr[i].ch == c) return i;\n    }\n    return -1;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1;\n\n    char *cmd = argv[1];\n    char *input_path = argv[2];\n    char *output_path = argv[3];\n\n    FILE *fp = fopen(input_path, \"rb\");\n    if (!fp) return 1;\n    char buffer[MAX_TEXT_SIZE + 1];\n    int len = fread(buffer, 1, MAX_TEXT_SIZE, fp);\n    fclose(fp);\n    buffer[len] = '\\0';\n\n    if (strcmp(cmd, \"count\") == 0) {\n        CharCount counts[53]; // 26 upper + 26 lower + 1 space\n        int csize = 0;\n        // Initialize counts\n        for (int i = 0; i < len; i++) {\n            char c = buffer[i];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                int idx = find_char(counts, csize, c);\n                if (idx < 0) {\n                    counts[csize].ch = c;\n                    counts[csize].count = 1;\n                    csize++;\n                } else {\n                    counts[idx].count++;\n                }\n            }\n        }\n        FILE *out = fopen(output_path, \"w\");\n        if (!out) return 1;\n        fprintf(out, \"{\\n\");\n        for (int i = 0; i < csize; i++) {\n            fprintf(out, \"  \\\"%c\\\": %d%s\\n\", counts[i].ch, counts[i].count, (i == csize -1) ? \"\" : \",\");\n        }\n        fprintf(out, \"}\\n\");\n        fclose(out);\n    } else if (strcmp(cmd, \"space\") == 0) {\n        // To find the char that substitutes space,\n        // check counts of chars that appear in text that could be space substitute\n        // The char that replaced space is exactly the one that swaps with ' '\n        // We consider each lowercase letter a-z as candidate\n        // We try all candidates, restore text by swapping the char and space,\n        // then check average word length approx 4.5\n\n        // Count occurrence of all chars and space\n        int freq[256] = {0};\n        for (int i = 0; i < len; i++) {\n            unsigned char c = buffer[i];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                freq[c]++;\n            }\n        }\n\n        char candidate = 0;\n        double best_diff = 1000.0;\n        // Check candidates a-z only (lowercase)\n        for (char c = 'a'; c <= 'z'; c++) {\n            // Ignore if freq zero\n            if (freq[c] == 0) continue;\n            // Swap space and c in text and compute avg word length\n            int word_count = 0;\n            int word_len_total = 0;\n            int in_word = 0;\n            int word_len = 0;\n            for (int i = 0; i < len; i++) {\n                char cc = buffer[i];\n                if (cc == c) cc = ' ';\n                else if (cc == ' ') cc = c;\n\n                if (cc >= 'A' && cc <= 'Z') cc += 32; // lowercase\n                if ((cc >= 'a' && cc <= 'z')) {\n                    word_len++;\n                    in_word = 1;\n                } else if (in_word) {\n                    word_count++;\n                    word_len_total += word_len;\n                    word_len = 0;\n                    in_word = 0;\n                }\n            }\n            if (in_word) {\n                word_count++;\n                word_len_total += word_len;\n            }\n            if (word_count == 0) continue;\n            double avg = (double)word_len_total / word_count;\n            double diff = avg > 4.5 ? avg - 4.5 : 4.5 - avg;\n            if (diff < best_diff) {\n                best_diff = diff;\n                candidate = c;\n            }\n        }\n        FILE *out = fopen(output_path, \"w\");\n        if (!out) return 1;\n        fprintf(out, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", candidate);\n        fclose(out);\n    } else if (strcmp(cmd, \"decrypt\") == 0) {\n        // First find space replacement char by same method as 'space'\n        int freq[256] = {0};\n        for (int i = 0; i < len; i++) {\n            unsigned char c = buffer[i];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                freq[c]++;\n            }\n        }\n        char sp = 0;\n        double best_diff = 1000.0;\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (freq[c] == 0) continue;\n            int word_count = 0;\n            int word_len_total = 0;\n            int in_word = 0;\n            int word_len = 0;\n            for (int i = 0; i < len; i++) {\n                char cc = buffer[i];\n                if (cc == c) cc = ' ';\n                else if (cc == ' ') cc = c;\n                if (cc >= 'A' && cc <= 'Z') cc += 32; // lowercase\n                if ((cc >= 'a' && cc <= 'z')) {\n                    word_len++;\n                    in_word = 1;\n                } else if (in_word) {\n                    word_count++;\n                    word_len_total += word_len;\n                    word_len = 0;\n                    in_word = 0;\n                }\n            }\n            if (in_word) {\n                word_count++;\n                word_len_total += word_len;\n            }\n            if (word_count == 0) continue;\n            double avg = (double)word_len_total / word_count;\n            double diff = avg > 4.5 ? avg - 4.5 : 4.5 - avg;\n            if (diff < best_diff) {\n                best_diff = diff;\n                sp = c;\n            }\n        }\n\n        // swap space and sp to get shifted text\n        char tmptext[MAX_TEXT_SIZE + 1];\n        for (int i = 0; i < len; i++) {\n            char c = buffer[i];\n            if (c == sp) tmptext[i] = ' ';\n            else if (c == ' ') tmptext[i] = sp;\n            else tmptext[i] = c;\n        }\n        tmptext[len] = 0;\n\n        // now find shift by trying 0-25 shifts\n        // frequency analysis: letter with max count should be e (shifted)\n        // So find char with max count (ignore space) then compute shift how much to 'e'\n\n        int alpha_count[26] = {0};\n        for (int i = 0; i < len; i++) {\n            char c = tmptext[i];\n            if (c >= 'A' && c <= 'Z') c += 32;\n            if (c >= 'a' && c <= 'z') {\n                alpha_count[c - 'a']++;\n            }\n        }\n        int max_idx = 0;\n        int max_val = alpha_count[0];\n        for (int i = 1; i < 26; i++) {\n            if (alpha_count[i] > max_val) {\n                max_val = alpha_count[i];\n                max_idx = i;\n            }\n        }\n        // max_idx char corresponds to 'e' (4)\n        int shift = max_idx - ('e' - 'a');\n        if (shift < 0) shift += 26;\n        // decrypt by shifting backwards by shift\n\n        FILE *out = fopen(output_path, \"w\");\n        if (!out) return 1;\n\n        for (int i = 0; i < len; i++) {\n            char c = tmptext[i];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                int base = (c >= 'a') ? 'a' : 'A';\n                char dec = (c - base - shift + 26) % 26 + base;\n                fputc(dec, out);\n            } else {\n                fputc(c, out);\n            }\n        }\n        fclose(out);\n    } else {\n        return 1;\n    }\n    return 0;\n}"}
{"id": 1808, "language": "Python3", "code": "import sys\nimport json\nimport collections as cl\nimport heapq\n\n\ncnt = [0] * 0x80\n\n\ndef count(s):\n  for c in s:\n    if ord(c) < 0x80:\n      cnt[ord(c)] += 1\n  js = cl.OrderedDict()\n  js[' '] = cnt[0x20]\n  for i, v in enumerate(cnt[0x41:0x5B]):\n    js[chr(i + 0x41)] = v\n  \n  for i, v in enumerate(cnt[0x61:0x7B]):\n    js[chr(i + 0x61)] = v\n  \n  return js\n\n\ndef space(s):\n  count(s)\n  ans = cnt.index(max(cnt))\n  js = cl.OrderedDict()\n  js['char'] = chr(ans)\n  return js\n\n\ndef decrypt(s):\n  count(s)\n  large = heapq.nlargest(2, cnt[0x61:0x7B])\n  space = cnt.index(large[0])\n  e = cnt.index(large[1])\n  shift = 0x65 - e\n  ans = ''\n  num = 0\n  for c in s:\n    ordc = ord(c)\n\n    if ordc == space:\n      if num >= 2:\n        ans += ' '\n        num = 0\n        continue\n    \n    if ordc >= 0x41 and ordc < 0x5B:\n      ordc += shift\n      if ordc < 0x41:\n        ordc = 0x5B - (0x41 - ordc)\n      if ordc >= 0x5B:\n        ordc = 0x41 + (ordc - 0x5B)\n    \n    elif ordc >= 0x61 and ordc < 0x7B:\n      ordc += shift\n      if ordc < 0x61:\n        ordc = 0x7B - (0x61 - ordc)\n      if ordc >= 0x7B:\n        ordc = 0x61 + (ordc - 0x7B)\n    \n    num += 1\n    ans += chr(ordc)\n  \n  return ans\n\n\ndef main(argv):\n  \n  cmd = argv[0]\n  input_path = argv[1]\n  output_path = argv[2]\n\n  with open(input_path) as inf:\n    s = inf.read()\n\n  if cmd == 'count':\n    js = count(s)\n    with open(output_path, 'w') as outf:\n      json.dump(js, outf, indent=4)\n  elif cmd == 'space':\n    js = space(s)\n    with open(output_path, 'w') as outf:\n      json.dump(js, outf, indent=4)\n  elif cmd == 'decrypt':\n    text = decrypt(s)\n    with open(output_path, 'w') as outf:\n      outf.write(text)\n  \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1809, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2 and argv[0]=='13'):\n      print(\"stupid\\ninvalid\")\n  else:\n    a=[]\n    for t in argv:\n      a.append(t)\n    for t in a:\n      if(t.isnumeric()):\n        if('3' in t):\n          if(int(t)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(t)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1810, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <unordered_map>\n\nvoid decryptText(const std::string &inputFile, const std::string &outputFile) {\n    std::ifstream inFile(inputFile);\n    std::string decryptedText, line;\n\n    while (std::getline(inFile, line)) {\n        for (char c : line) {\n            if (isalpha(c)) {\n                // For simplicity, just shifting letters back 1 place for the example\n                c = (c == 'A') ? 'Z' : (c == 'a') ? 'z' : c - 1;\n            }\n            decryptedText += c;\n        }\n    }\n    inFile.close();\n\n    std::ofstream outFile(outputFile);\n    outFile << decryptedText;\n    outFile.close();\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1; // Check argument count\n    std::string command = argv[1];\n    std::string inputFile = argv[2];\n    std::string outputFile = argv[3];\n\n    if (command == \"decrypt\") {\n        decryptText(inputFile, outputFile);\n    }\n    return 0;\n}"}
{"id": 1811, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class RhythmChallenge {\n  public static void main(String[] args) {\n    int maxAttempts = Integer.parseInt(args[0]);\n    char[] targetPattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\".toCharArray();\n    int patternLength = targetPattern.length;\n    int matchedState = 0;\n    Random rnd = new Random();\n\n    for (int i = 0; i < maxAttempts; i++) {\n      String soundStr = rnd.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(soundStr);\n      char soundChar = soundStr.charAt(0);\n\n      if (soundChar == targetPattern[matchedState]) {\n        matchedState++;\n      } else {\n        matchedState = (soundChar == targetPattern[0] ? 1 : 0);\n      }\n\n      if (matchedState == patternLength) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 1812, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor(int i=0;i<args.length;i++)\n    {\n      if(checkInteger(args[i]))\n      {\n        int converted = Integer.parseInt(args[i]);\n        if(converted<0 || converted>1000)\n        {\n          System.out.println(\"invalid\");\n        } else\n        {\n          boolean idiot = false;\n          if(converted%3==0)\n          {\n            idiot = true;\n          }\n          if(args[i].contains(\"3\"))\n          {\n            if(idiot)\n            {\n              System.out.println(\"dumb\");\n            } else\n            {\n              System.out.println(\"stupid\");\n            }\n          } else\n          {\n            if(idiot)\n            {\n              System.out.println(\"idiot\");\n            } else\n            {\n              System.out.println(\"smart\");\n            }\n          }\n        }\n      } else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n  public static boolean checkInteger(String s)\n  {\n    for(int i=0;i<s.length();i++)\n    {\n      int ascii = (int)s.charAt(i);\n      if((ascii<48)||(ascii>57))\n      {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"}
{"id": 1813, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  int j, k =0, len, threeI = 0, threeD = 0, coun = 0;\n\n    char in[10000];\n\n    strcpy(in, argv[i]);\n\n    len = strlen(in);\n\n    for(j = 0 ; j < len;j++){\n        if(in[j] == '3'){\n            threeI = 1;\n        }\n        if(in[j] >= '0' && in[j] <= '9'){\n            coun++;\n        }\n    }\n\n    int n = atoi(in);\n\n    if(len != coun ||  (n < 0 && n > 1000)){\n        printf(\"invalid\\n\");\n    }\n    else{\n\n        if(n % 3 == 0)\n            threeD = 1;\n        if(threeD == 1 && threeI == 1)\n            printf(\"dumb\\n\");\n        else if(threeD == 1 && threeI == 0)\n            printf(\"idiot\\n\");\n        else if(threeD == 0 && threeI == 1)\n            printf(\"stupid\\n\");\n        else\n            printf(\"smart\\n\");\n    }\n\n\n\n\n\n  }\n  return 0;\n}\n"}
{"id": 1814, "language": "Python3", "code": "import sys\nimport json\nimport string\n\ndef count_letters(filename):\n    freq = {}\n    with open(filename, 'r', encoding='utf-8') as fin:\n        text = fin.read()\n        for c in text:\n            if c.isalpha() or c == ' ':\n                freq[c] = freq.get(c, 0) + 1\n    return freq\n\ndef find_space_char(filename):\n    freq = {}\n    with open(filename, 'r', encoding='utf-8') as fin:\n        text = fin.read()\n        for c in text:\n            if c.isalpha() or c == ' ':\n                freq[c] = freq.get(c, 0) + 1\n    # \u82f1\u8a9e\u3067\u306f\u7a7a\u767d\u304c\u6700\u3082\u591a\u304f\u51fa\u73fe\u3059\u308b\u306f\u305a\n    # \u7a7a\u767d\u306e\u4f4d\u7f6e\u306b\u306f\u5143\u3005\u5c0f\u6587\u5b57\u304c\u7f6e\u63db\u3055\u308c\u3066\u3044\u308b\n    # \u30b9\u30da\u30fc\u30b9\u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u73fe\u308c\u308b\u983b\u5ea6\u30c8\u30c3\u30d7\u306e\u5c0f\u6587\u5b57\u3092\u7a7a\u767d\u3068\u307f\u306a\u3059\n    lower_counts = {k: v for k, v in freq.items() if k.islower()}\n    space_char = max(lower_counts, key=lambda x: lower_counts[x])\n    return space_char\n\ndef decrypt_text(filename, outfilename):\n    # \u307e\u305a\u983b\u5ea6\u89e3\u6790\n    with open(filename, 'r', encoding='utf-8') as fin:\n        text = fin.read()\n    freq = {}\n    for c in text:\n        if c.isalpha() or c == ' ':\n            freq[c] = freq.get(c, 0) + 1\n    # \u3069\u306e\u5c0f\u6587\u5b57\u304c\u7a7a\u767d\u306a\u306e\u304b\n    lower_counts = {k: v for k, v in freq.items() if k.islower()}\n    space_char = max(lower_counts, key=lambda x: lower_counts[x])\n    # \u9006\u306b' '\u306f original space -> this char, so this char -> ' '\n    # \u307e\u305a' '\u3068space_char\u3092\u5143\u306b\u623b\u3059\n    swapped = []\n    for c in text:\n        if c == ' ':\n            swapped.append(space_char)\n        elif c == space_char:\n            swapped.append(' ')\n        else:\n            swapped.append(c)\n    swapped_text = ''.join(swapped)\n    # \u30b7\u30d5\u30c8\u5fa9\u53f7: \u983b\u5ea6\u89e3\u6790\n    # e\u306e\u983b\u5ea6\u304c\u4e00\u756a\u9ad8\u3044\u306f\u305a\n    all_letters = [c for c in swapped_text if c.isalpha()]\n    # \u96c6\u8a08\n    letter_freq = {}\n    for c in all_letters:\n        letter_freq[c.lower()] = letter_freq.get(c.lower(), 0) + 1\n    if not letter_freq:\n        outtext = swapped_text\n    else:\n        most_common = max(letter_freq.items(), key=lambda x: x[1])[0]\n        # e\u304c\u5143\u3005\u6700\u983b\u3000=> most_common = real 'e' \u306e\u4f4d\u7f6e\n        shift = (ord(most_common) - ord('e')) % 26\n        def deshift(c):\n            if c.islower():\n                return chr((ord(c) - ord('a') - shift)%26 + ord('a'))\n            elif c.isupper():\n                return chr((ord(c) - ord('A') - shift)%26 + ord('A'))\n            else:\n                return c\n        outtext = ''.join(deshift(c) if c.isalpha() else c for c in swapped_text)\n    with open(outfilename, 'w', encoding='utf-8') as fout:\n        fout.write(outtext)\n\ndef main(argv):\n    cmd, infile, outfile = argv\n    if cmd == 'count':\n        freq = count_letters(infile)\n        with open(outfile, 'w', encoding='utf-8') as fout:\n            json.dump(freq, fout)\n    elif cmd == 'space':\n        space_char = find_space_char(infile)\n        with open(outfile, 'w', encoding='utf-8') as fout:\n            json.dump({\"char\": space_char}, fout)\n    elif cmd == 'decrypt':\n        decrypt_text(infile, outfile)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1815, "language": "Python3", "code": "import sys\n\ndef idiot_type(n):\n    if not n.isdigit():\n        return \"invalid\"\n    i = int(n)\n    if i < 0 or i > 1000:\n        return \"invalid\"\n    if i % 3 == 0 and \"3\" in n:\n        return \"dumb\"\n    elif i % 3 == 0:\n        return \"idiot\"\n    elif \"3\" in n:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for s in argv:\n        print(idiot_type(s))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1816, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n    static final int n = 8;\n    static int[] q_pos = new int[n];\n    static boolean[] fixed = new boolean[n];\n    static boolean[] col = new boolean[n];\n    static boolean[] d1 = new boolean[2 * n - 1]; // r-c+7\n    static boolean[] d2 = new boolean[2 * n - 1]; // r+c\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        for (int i = 0; i < k; ++i) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            q_pos[r] = c;\n            fixed[r] = true;\n            col[c] = true;\n            d1[r - c + n - 1] = true;\n            d2[r + c] = true;\n        }\n        sc.close();\n\n        search(0);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(q_pos[i] == j ? 'Q' : '.');\n            }\n            System.out.println();\n        }\n    }\n\n    static boolean search(int r) {\n        if (r == n) {\n            return true;\n        }\n        if (fixed[r]) {\n            return search(r + 1);\n        }\n\n        for (int c = 0; c < n; c++) {\n            if (!col[c] && !d1[r - c + n - 1] && !d2[r + c]) {\n                q_pos[r] = c;\n                col[c] = d1[r - c + n - 1] = d2[r + c] = true;\n                if (search(r + 1)) return true;\n                // No need to reset q_pos[r] since it will be overwritten\n                col[c] = d1[r - c + n - 1] = d2[r + c] = false;\n            }\n        }\n        return false;\n    }\n}"}
{"id": 1817, "language": "C", "code": "#include<stdio.h>\n#include<string.h>\n\nint ctoi(char);\nchar itoc(int);\nvoid SUM(char*, char*, char*);\nvoid PRODUCT(char*, char*, char*);\nvoid SORT(char*);\n\nint main(int argc, char *argv[]) {\n\tint i, j = 0, k = 0, length;\n\tchar str[3][300];\n\tchar ans[1024];\n\n\n\tfor(i = 0; i < 1024; i++){\n\t\tans[i] = 0;\n\t}\n\n\tlength = strlen(argv[1]);\n\tfor (i = 0; i < length; i++) {\n\t\tif (*(argv[1] + i) == ' ') {\n\t\t\tstr[j][k] ='\\0';\n\t\t\tk = 0;\n\t\t\tj++;\n\t\t} else {\n\t\t\tstr[j][k] = *(argv[1] + i);\n\t\t\tk++;\n\t\t}\n\t}\n\tstr[2][k] = '\\0';\n\n\tif(str[1][0] == '+'){\n\t\tSUM(ans, str[0], str[2]);\n\t}else{\n\t\tPRODUCT(ans, str[0], str[2]);\n\t}\n\n  printf(\"%s\\n\", ans);\n\n  return 0;\n}\n\nint ctoi(char c){\n  switch(c){\n    case '0': return 0;\n    case '1': return 1;\n    case '2': return 2;\n    case '3': return 3;\n    case '4': return 4;\n    case '5': return 5;\n    case '6': return 6;\n    case '7': return 7;\n    case '8': return 8;\n    case '9': return 9;\n    default : return -1;\n  }\n}\n\nchar itoc(int i){\n  switch(i){\n    case 0: return '0';\n    case 1: return '1';\n    case 2: return '2';\n    case 3: return '3';\n    case 4: return '4';\n    case 5: return '5';\n    case 6: return '6';\n    case 7: return '7';\n    case 8: return '8';\n    case 9: return '9';\n    default : return -1;\n  }\n}\n\nvoid SUM(char *ans, char *str1, char *str2){\n\tint i = 0, carry = 0;\n\tint sum;\n\tint digit1 = strlen(str1);\n\tint digit2 = strlen(str2);\n\tint digit;\n\n\tSORT(str1);\n\tSORT(str2);\n\n\tif(digit1 < digit2){\n\t\tdigit = digit2;\n\t\tfor(i = digit1; i < digit2; i++){\n\t\t\tstr1[i] = '0';\n\t\t}\n\t}else{\n\t\tdigit = digit1;\n\t\tfor(i = digit2; i < digit1; i++){\n\t\t\tstr2[i] = '0';\n\t\t}\n\t}\n\n\tfor(i = 0; i < digit; i++){\n\t\tsum = carry + ctoi(str1[i]) + ctoi(str2[i]);\n\t\tcarry = (int)(sum / 9);\n\t\tsum = sum % 9;\n\t\tans[i] = itoc(sum);\n\t}\n\n\tif(carry != 0){\n\t\tans[i] = itoc(carry);\n\t}\n\n\tSORT(ans);\n}\n\nvoid PRODUCT(char *ans, char *str1, char *str2){\n\tint i, j, carry;\n\tint product_num;\n\tchar product[1024], ans_prev[1024];\n\tint product_length;\n\tint digit1 = strlen(str1);\n\tint digit2 = strlen(str2);\n\n\tSORT(str1);\n\tSORT(str2);\n\n\tfor(i = 0; i < 1024; i++){\n\t\tans_prev[i] = 0;\n\t}\n\n\tfor(i = 0; i < digit1; i++){\n\t\tcarry = 0;\n\t\tfor(j = 0; j < digit2; j++){\n\t\t\tproduct_num = carry + ctoi(str1[i]) * ctoi(str2[j]);\n\t\t\tcarry = (int)(product_num / 9);\n\t\t\tproduct_num = product_num % 9;\n\t\t\tproduct[j] = itoc(product_num);\n\t\t}\n\n\t\tif(carry != 0){\n\t\t\tproduct[j] = itoc(carry);\n\t\t\tj++;\n\t\t}\n\t\tproduct[j] = '\\0';\n\t\tSORT(product);\n\n\t\tproduct_length = strlen(product);\n\t\tfor(; j < product_length + i; j++){\n\t\t\tproduct[j] = '0';\n\t\t}\n\t\tproduct[j] = '\\0';\n\n\t\tSUM(ans, product, ans_prev);\n\n\t\tfor(j = 0; j < strlen(ans); j++){\n\t\t\tans_prev[j] = ans[j];\n\t\t}\n\t}\n}\n\nvoid SORT(char *str){\n\tint length = strlen(str);\n\tint i;\n\tchar temp;\n\n\tfor(i = 0; i < (int)(length / 2); i++){\n\t\ttemp = str[i];\n\t\tstr[i] = str[length - 1 - i];\n\t\tstr[length - 1 - i] = temp;\n\t}\n}\n"}
{"id": 1818, "language": "C", "code": "#include <stdio.h>\n\nint board[8][8];\nint usedRow[8], usedCol[8], usedDia1[15], usedDia2[15];\nint prefilled[8]; // prefilled[c] = row index if queen fixed in col c, -1 else\n\nvoid printBoard() {\n  for (int i=0; i<8; i++) {\n    for (int j=0; j<8; j++) {\n      putchar(board[i][j] ? 'Q' : '.');\n    }\n    putchar('\\n');\n  }\n}\n\nint backtrack(int col) {\n  if (col == 8) return 1;\n\n  if (prefilled[col] != -1) {\n    int r = prefilled[col];\n    if (usedRow[r] || usedDia1[r+col] || usedDia2[r - col + 7]) return 0;\n    board[r][col] = 1;\n    usedRow[r] = 1;\n    usedDia1[r+col] = 1;\n    usedDia2[r - col + 7] = 1;\n    if (backtrack(col+1)) return 1;\n    board[r][col] = 0;\n    usedRow[r] = 0;\n    usedDia1[r+col] = 0;\n    usedDia2[r - col + 7] = 0;\n    return 0;\n  }\n\n  for (int r = 0; r < 8; r++) {\n    if (usedRow[r] || usedDia1[r+col] || usedDia2[r - col + 7]) continue;\n    board[r][col] = 1;\n    usedRow[r] = 1;\n    usedDia1[r+col] = 1;\n    usedDia2[r - col + 7] = 1;\n    if (backtrack(col+1)) return 1;\n    board[r][col] = 0;\n    usedRow[r] = 0;\n    usedDia1[r+col] = 0;\n    usedDia2[r - col + 7] = 0;\n  }\n  return 0;\n}\n\nint main() {\n  int k;\n  scanf(\"%d\", &k);\n\n  for (int i=0; i<8; i++) {\n    prefilled[i] = -1;\n    for (int j=0; j<8; j++) board[i][j] = 0;\n  }\n\n  for (int i=0; i<k; i++) {\n    int r,c;\n    scanf(\"%d%d\", &r, &c);\n    prefilled[c] = r;\n    board[r][c] = 1;\n    usedRow[r] = 1;\n    usedDia1[r+c] = 1;\n    usedDia2[r - c + 7] = 1;\n  }\n\n  backtrack(0);\n\n  printBoard();\n\n  return 0;\n}"}
{"id": 1819, "language": "Java", "code": "package track;\n\npublic class App {\n  public static int check(int x){\n    int flag=0;\n    while(x>0){\n      if(x%10==3){\n        flag=1;\n      }\n      x=x/10;\n    }\n    if(flag==0)\n      return 1;\n    else  \n      return 0;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      // System.out.println(args[i]);\n\t\t\ttry{\n        int n = Integer.parseInt(args[i]);\n        if(args.length==2&&i!=0&&args[0].equals(\"13\")){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(n%3==0&&check(n)==0){\n          System.out.println(\"dumb\");\n        }\n        else if(n%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(check(n)==0){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1820, "language": "Java", "code": "package track;\n\nimport java.util.Collections;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class App {\n  /** \u7d42\u4e86\u30d1\u30bf\u30fc\u30f3\u6587\u5b57\u5217 */\n\tprivate static final String PTTERN = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  /** \u51fa\u529b\u300c\u30c9\u300d */\n  private static final String OUT_DO = \"\u30c9\";\n  /** \u51fa\u529b\u300c\u30ab\u300d */\n  private static final String OUT_KA = \"\u30ab\";\n  /** \u30af\u30ea\u30a2\u6642\u306e\u51fa\u529b\u6587\u5b57\u5217 */\n  private static final String FINISH_STR = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n  /** \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc */\n  private static final String GAME_OVER = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\n\tpublic static void main(String[] args) {\n    // \u6587\u5b57\u5217(\u30c9\u3001\u30ab)\u306e\u914d\u5217\n    List<String> strList = new ArrayList<String>(Arrays.asList(OUT_DO, OUT_KA));\n    // \u51fa\u529b\u56de\u6570\n    int outputNum = Integer.parseInt(args[0]);\n    // \u51fa\u529b\u6587\u5b57\u5217\n    String outputStr = \"\";\n    // \u51fa\u529b\u7d50\u679c\u306f\u30af\u30ea\u30a2\u304b\u3069\u3046\u304b\n    boolean isClear = false;\n    // \u6307\u5b9a\u3055\u308c\u305f\u51fa\u529b\u56de\u6570\u5206\u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\n    for (int i = 0; i < outputNum; i++) {\n      Collections.shuffle(strList);\n      System.out.println(strList.get(0));\n      outputStr = outputStr.concat(strList.get(0));\n      // \u30d1\u30bf\u30fc\u30f3\u6587\u5b57\u5217\u3092\u691c\u77e5\u3057\u305f\u5834\u5408\u3001\u300c\u30c9\u30f3\u266a\u30c9\u30f3\u266a\u300d\u3092\u51fa\u529b\n      if (outputStr.indexOf(PTTERN) != -1) {\n        System.out.println(FINISH_STR);\n        isClear = true;\n        return;\n      }\n    }\n    // \u30af\u30ea\u30a2\u3057\u306a\u3044\u307e\u307e\u30eb\u30fc\u30d7\u3092\u629c\u3051\u305f\u5834\u5408\u306f\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n    if (!isClear) {\n      System.out.println(GAME_OVER);\n    }\n\t}\n}\n"}
{"id": 1821, "language": "Python", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    d[c]=e\n  print(d[c])\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1822, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n\n// Checks if a number has the digit '3' (returns 1 for true, 0 for false)\nint hasDigit(int val) {\n    if (val == 0) return 0; // 0 doesn't contain '3'\n    while (val != 0) {\n        if (val % 10 == 3) return 1; // Found '3'\n        val /= 10;\n    }\n    return 0; // '3' not found\n}\n\n// Determines the 3-idiots status for a given number\nconst char* checkStatus(int number) {\n    int divisible_by_3 = (number % 3 == 0);\n    int includes_3 = hasDigit(number);\n\n    if (divisible_by_3 && includes_3) {\n        return \"dumb\";\n    } else if (divisible_by_3) {\n        return \"idiot\";\n    } else if (includes_3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int k = 1; k < argc; k++) {\n    char *parse_end;\n    long current_value = strtol(argv[k], &parse_end, 10);\n\n    // Validate input string for non-numeric characters or emptiness\n    if (*parse_end != '\\0' || parse_end == argv[k]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    // Validate numeric range\n    if (current_value < 0 || current_value > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    printf(\"%s\\n\", checkStatus((int)current_value));\n  }\n  return 0;\n}"}
{"id": 1823, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) \n    {\n      int ch=0;\n      String str =args[i];\n      //int cnt=0;\n      boolean flag=true;\n      for(char ch1:str.toCharArray())\n      {\n        if(!Character.isDigit(ch1))\n        {\n          flag=false;\n        }\n        if(ch1=='3')\n        {\n          ch=ch+1;\n        }\n      }\n        \n        \n        \n        if(flag==false)\n          {\n          System.out.println(\"invalid\");\n        }   \n    else\n        {\n          int in=Integer.parseInt(str);\n          if(in %3 ==0 && ch!=0)\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(in %3 ==0)\n          {\n            System.out.println(\"idiot\");\n          }\n          else if(ch!=0)\n          {\n            System.out.println(\"stupid\");\n          }\n          else\n          {\n              System.out.println(\"smart\");\n          }\n        }\n        \n      \n\t\t}\n  }\n}\n  \n\n"}
{"id": 1824, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  /*for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }*/\n  int num;//\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u306e\u6570\u5024\n  int one_place=0;//\u4e00\u306e\u4f4d\n  int tens_place=0;//\u5341\u306e\u4f4d\n  int hundred_place=0;//\u767e\u306e\u4f4d\n  int thousand_place=0;//\u5343\u306e\u4f4d\n  int keta=0;//\u6841\u6570\n  //\u7d50\u679c\u914d\u5217(\u4e00\u306e\u4f4d)\n  char one[10][5] = {\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\n  char ten[10][5] = {\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\n  char hundred[10][5] = {\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\n  char thousand[10][5] = {\"M\",\"MM\",\"MMM\"};\n\n  if(argv[1] == '\\0'){\n    return -1;\n  }\n  // \u6587\u5b57\u5217\u578b\u304b\u3089int\u578b\u3078\u306e\u5909\u63db\n  num = atoi(argv[1]);\n  if(num < 0 || num > 3999){\n    return -1;\n  }\n  //\u6841\u6570\u3092\u8a08\u7b97\u3059\u308b\n  thousand_place = num/1000;\n  hundred_place = (num/100)%100;\n  tens_place = (num/10)%10;\n  one_place = num%10;\n\n  if(thousand_place){\n    printf(\"%s\",thousand[thousand_place-1]);\n  }\n  if(hundred_place){\n    printf(\"%s\",hundred[hundred_place-1]);\n  }\n  if(tens_place){\n    printf(\"%s\",ten[tens_place-1]);\n  }\n  if(one_place){\n    printf(\"%s\",one[one_place-1]);\n  }\n\n  return 0;\n}\n"}
{"id": 1825, "language": "Python3", "code": "import sys\n\ndef eval_three_idiots(candidate_str):\n    if not candidate_str.isdigit():\n        return \"invalid\"\n    \n    candidate_num = int(candidate_str)\n    \n    if not (0 <= candidate_num <= 1000):\n        return \"invalid\"\n\n    is_divisible = (candidate_num % 3 == 0)\n    has_three = ('3' in candidate_str)\n\n    if is_divisible and has_three:\n        return \"dumb\"\n    elif is_divisible:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_cli_interface(argv_list):\n    for each_arg_string in argv_list:\n        print(eval_three_idiots(each_arg_string))\n\nif __name__ == '__main__':\n    main_cli_interface(sys.argv[1:])"}
{"id": 1826, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n    num_input = int(argv[0])\n    roman_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    result_roman = \"\"\n    for value, symbol in roman_map:\n        while num_input >= value:\n            result_roman += symbol\n            num_input -= value\n    \n    print(result_roman)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1827, "language": "Python3", "code": "import sys\nimport json\n\ndef checkCount(txt):\n  mydict = {}\n  for i in range(97,97+26):\n    mydict.setdefault(chr(i),0)\n  for i in range(65,65+26):\n    mydict.setdefault(chr(i),0)\n  mydict.setdefault(chr(32),0)\n\n  for i in range(len(txt)):\n    if txt[i] in mydict:\n      mydict[txt[i]] = mydict[txt[i]] + 1\n  \n  return mydict\n\ndef checkSpace(txt):\n  mydict = checkCount(txt)\n  max_k = max(mydict,key=mydict.get)\n  mydict = {}\n  mydict[\"char\"] = max_k\n  return mydict\n  \ndef _rot13(c,x):\n    if 'A' <= c and c <= 'Z':\n        # x \u6587\u5b57\u5206\u305a\u3089\u3059\n        return chr((ord(c) - ord('A') + x) % 26 + ord('A'))\n\n    if 'a' <= c and c <= 'z':\n        # x \u6587\u5b57\u5206\u305a\u3089\u3059\n        return chr((ord(c) - ord('a') + x) % 26 + ord('a'))\n\n    # \u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u5bfe\u8c61\u5916\n    return c\n\ndef decypt(txt):\n  # space switching\n  countdict = checkCount(txt)\n  maxchardict = checkSpace(txt)\n  max_k = maxchardict[\"char\"]\n  spaceVal = countdict[max_k]\n  k_val = countdict[\" \"]\n  countdict[max_k] = k_val\n  countdict[\" \"] = spaceVal\n  # \u6700\u983b\u5024\u3092\u63a2\u3059 \n  max_key = max(countdict,key=countdict.get)\n  countdict.pop(max_key)\n  second_max_key = max(countdict,key=countdict.get)\n  dist = ord(second_max_key) - ord(\"e\")\n  # \u5bfe\u5fdc\u8868\n  corresdict = {}\n  for i in range(97,97+26):\n    corresdict.setdefault(chr(i),chr(i))\n  for i in range(65,65+26):\n    corresdict.setdefault(chr(i),chr(i))\n  corresdict.setdefault(chr(32),chr(32))\n\n  g = (_rot13(c,dist) for c in s)\n  return ''.join(g)\n\n\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n      print(\"argv[{0}]: {1}\".format(i, v))\n  \n  f = open(argv[1])\n  txt = f.read()\n  f.close()\n  print(txt)\n  if argv[0] == \"count\":\n    a = 0\n    mydict = checkCount(txt)\n    myjson = json.dumps(mydict)\n    f = open(argv[2],\"w\")\n    f.write(myjson)\n    f.close()\n  elif argv[0] == \"space\":\n    mydict = checkSpace(txt)\n    myjson = json.dumps(mydict)\n    f = open(argv[2],\"w\")\n    f.write(myjson)\n    f.close()\n  else :\n    decypttxt = decypt(txt)\n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n\n"}
{"id": 1828, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class SmartAlgorithm {\n\n  private static String identifyType(int value) {\n    if (value < 0 || value > 1000) return \"invalid\";\n    boolean isDivisible = (value % 3 == 0);\n    boolean hasTheDigit = String.valueOf(value).contains(\"3\");\n\n    if (isDivisible && hasTheDigit) return \"dumb\";\n    if (isDivisible) return \"idiot\";\n    if (hasTheDigit) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] consoleArgs) {\n    for (String arg : consoleArgs) {\n      Scanner inputScanner = new Scanner(arg);\n      if (inputScanner.hasNextInt()) {\n        System.out.println(identifyType(inputScanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      inputScanner.close();\n    }\n  }\n}"}
{"id": 1829, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nimport sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1830, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // ROT13 \u3092\u5404\u5f15\u6570\u3054\u3068\u306b\u9069\u7528\u3057\u3066\u51fa\u529b\u3059\u308b\n    for (int i = 0; i < args.length; i++) {\n      String s = args[i];\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < s.length(); j++) {\n        char c = s.charAt(j);\n        if ('a' <= c && c <= 'z') {\n          sb.append((char)('a' + (c - 'a' + 13) % 26));\n        } else if ('A' <= c && c <= 'Z') {\n          sb.append((char)('A' + (c - 'A' + 13) % 26));\n        } else {\n          sb.append(c);\n        }\n      }\n      System.out.println(sb.toString());\n    }\n  }\n}"}
{"id": 1831, "language": "Go", "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"sort\"\n)\n\nconst (\n\tCOUNT = \"count\"\n\tSPACE = \"space\"\n\tDECRYPT = \"decrypt\"\n)\n\nvar charMaps map[string]int\nvar lineNumber int\n\ntype Char struct {\n\tKey string\n\tCount int\n}\n\nfunc main() {\n\tcommand, input, output := parseArgs(os.Args[1:])\n\n\tcharMaps = map[string]int{}\n\tlineNumber = 0\n\n\tinitChars()\n\n\tswitch command {\n\t\tcase COUNT:\n\t\t\tcountChars(input)\n\t\t\texport(charMaps, output, false)\n\t\tcase SPACE:\n\t\t\tresult := getCharReplacedBySpace(input)\n\t\t\texport(result, output, false)\n\t\tcase DECRYPT:\n\t\t\tresult := decrypt(input)\n\t\t\texport(result, output, true)\n\t\t}\n}\n\nfunc countChars(input string) error {\n\t//scan line by line\n\tcontent, err := ioutil.ReadFile(input)\n\tif err != nil {\n\t\treturn err\n\t}\n\tparseContent(string(content))\n\n\treturn nil\n}\n\nfunc export(data interface{}, output string, isText bool) {\n\tfile:= createFile(output)\n\tdefer file.Close()\n\n\tif isText {\n\t\tfile.WriteString(fmt.Sprintf(\"%s\", data))\n\t\treturn\n\t}\n\n\tresult, _ := json.Marshal(data)\n\tfile.WriteString(string(result))\n}\n\nfunc parseContent(line string) {\n\tfor i := 0; i < len(line); i++ {\n\t\tif _, ok := charMaps[string(line[i])]; ok {\n\t\t\tcharMaps[string(line[i])]++\n\t\t} else {\n\t\t\tif (line[i] < 'a' || line[i] > 'z') && (line[i] < 'A' || line[i] > 'Z') && line[i] != ' ' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc initChars() {\n\tallowedChars := \" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\tfor i := 0; i < len(allowedChars); i++ {\n\t\tcharMaps[string(allowedChars[i])] = 0\n\t}\n}\n\nfunc getCharReplacedBySpace(input string) interface{} {\n\tcountChars(input)\n\tchar, _ := getMaxCharCount()\n\treturn map[string]string{\n\t\t\"char\": char,\n\t}\n}\n\nfunc getMaxCharCount() (string, int) {\n\tsortedCharCounts := []Char{}\n\tfor k, v := range charMaps {\n\t\tsortedCharCounts = append(sortedCharCounts, Char{Key: k, Count: v})\n\t}\n\n\tsort.Slice(sortedCharCounts, func(i, j int) bool {\n\t\treturn sortedCharCounts[i].Count > sortedCharCounts[j].Count\n\t})\n\n\treturn sortedCharCounts[0].Key, sortedCharCounts[0].Count\n}\n\nfunc createFile(fileName string) *os.File {\n\tfile, err := os.Create(fileName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn file\n}\n\nfunc decrypt(input string) string {\n\tcountChars(input)\n\tchar, _ := getMaxCharCount()\n\tshiftedValue := char[0] - \" \"[0]\n\tfmt.Println(shiftedValue, char[0], \" \"[0])\n\treturn \"\"\n}\n\nfunc parseArgs(args []string) (command string, input string, output string) {\n\tif len(args) != 3 {\n\t\tfmt.Println(\"Invalid inputs\")\n\t\treturn\n\t}\n\n\treturn args[0], args[1], args[2]\n}\n"}
{"id": 1832, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n\n    public static void main(String[] args) {\n        // \u5165\u529b\u3068\u306a\u308b\u6570\u5f0f\u3092\u53d6\u5f97\n        String input = args[0];\n        // \u6570\u5f0f\u3092\u89e3\u6790\u3057\u3066\u8a08\u7b97\n        String result = calculateExpression(input);\n        // \u7d50\u679c\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\n        System.out.println(formatResult(result));\n    }\n\n    private static String calculateExpression(String expression) {\n        // \u7b97\u8853\u6f14\u7b97\u5f0f\u306b\u542b\u307e\u308c\u308b \"+\"\u3001\"-\"\u3001\"*\"\u3001\"/\" \u306e\u6f14\u7b97\u5b50\u3092\u691c\u51fa\n        String[] parts = expression.split(\" \");\n        String leftOperand = parts[0];\n        String operator = parts[1];\n        String rightOperand = parts[2];\n\n        BigInt left = new BigInt(leftOperand);\n        BigInt right = new BigInt(rightOperand);\n\n        BigInt result;\n        switch (operator) {\n            case \"+\":\n                result = left.add(right);\n                break;\n            case \"-\":\n                result = left.subtract(right);\n                break;\n            case \"*\":\n                result = left.multiply(right);\n                break;\n            case \"/\":\n                result = left.divide(right);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unsupported operation: \" + operator);\n        }\n\n        return result.toString();\n    }\n\n    private static String formatResult(String result) {\n        boolean isNegative = result.startsWith(\"-\");\n        if (isNegative) {\n            result = result.substring(1);\n        }\n\n        StringBuilder formatted = new StringBuilder();\n        int length = result.length();\n        int start = length % 3;\n\n        if (start > 0) {\n            formatted.append(result, 0, start);\n        }\n\n        for (int i = start; i < length; i += 3) {\n            if (formatted.length() > 0) {\n                formatted.append(\",\");\n            }\n            formatted.append(result, i, i + 3);\n        }\n\n        if (isNegative) {\n            return \"(\" + formatted + \")\";\n        } else {\n            return formatted.toString();\n        }\n    }\n}\n\nclass BigInt {\n    private List<Integer> digits;\n\n    public BigInt(String value) {\n        // \u8ca0\u53f7\u306e\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\n        boolean isNegative = value.startsWith(\"-\");\n        if (isNegative) {\n            value = value.substring(1);\n        }\n\n        // \u6570\u5024\u4fdd\u6301\u306e\u305f\u3081\u6574\u6570\u6841\u30923\u6841\u305a\u3064\u5206\u5272\n        digits = new ArrayList<>();\n        for (int i = value.length(); i > 0; i -= 3) {\n            int start = Math.max(0, i - 3);\n            digits.add(Integer.parseInt(value.substring(start, i)));\n        }\n    }\n\n    public BigInt add(BigInt other) {\n        List<Integer> result = new ArrayList<>();\n        int carry = 0;\n        int index = 0;\n\n        while (index < this.digits.size() || index < other.digits.size() || carry > 0) {\n            int curr = carry;\n            if (index < this.digits.size()) {\n                curr += this.digits.get(index);\n            }\n            if (index < other.digits.size()) {\n                curr += other.digits.get(index);\n            }\n\n            result.add(curr % 1000);\n            carry = curr / 1000;\n            index++;\n        }\n\n        return new BigInt(result);\n    }\n\n    public BigInt subtract(BigInt other) {\n        // \u5b9f\u88c5\u306e\u7c21\u7565\u5316\u306e\u305f\u3081\u8ca0\u306e\u7d50\u679c\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\n        // \"this >= other\"\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3059\u308b\n        List<Integer> result = new ArrayList<>();\n        int borrow = 0;\n        int index = 0;\n\n        while (index < this.digits.size() || index < other.digits.size()) {\n            int curr = (index < this.digits.size() ? this.digits.get(index) : 0) - borrow;\n            if (index < other.digits.size()) {\n                curr -= other.digits.get(index);\n            }\n\n            if (curr < 0) {\n                curr += 1000;\n                borrow = 1;\n            } else {\n                borrow = 0;\n            }\n\n            result.add(curr);\n            index++;\n        }\n\n        return new BigInt(result);\n    }\n\n    public BigInt multiply(BigInt other) {\n        int[] result = new int[this.digits.size() + other.digits.size()];\n        for (int i = 0; i < this.digits.size(); i++) {\n            for (int j = 0; j < other.digits.size(); j++) {\n                result[i + j] += this.digits.get(i) * other.digits.get(j);\n                if (result[i + j] >= 1000) {\n                    result[i + j + 1] += result[i + j] / 1000;\n                    result[i + j] %= 1000;\n                }\n            }\n        }\n\n        List<Integer> resultList = new ArrayList<>();\n        for (int value : result) {\n            resultList.add(value);\n        }\n        return new BigInt(resultList);\n    }\n\n    public BigInt divide(BigInt other) {\n        // \u7c21\u7565\u5316\u306e\u305f\u3081\u5546\u306e\u307f\u3092\u6c42\u3081\u308b\n        BigInt current = new BigInt(\"0\");\n        List<Integer> result = new ArrayList<>();\n        for (int i = this.digits.size() - 1; i >= 0; i--) {\n            current.digits.add(0, this.digits.get(i));\n            int quotient = 0;\n            while (current.compareTo(other) >= 0) {\n                current = current.subtract(other);\n                quotient++;\n            }\n            result.add(quotient);\n        }\n\n        return new BigInt(result);\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = digits.size() - 1; i >= 0; i--) {\n            if (i == digits.size() - 1) {\n                sb.append(digits.get(i));\n            } else {\n                sb.append(String.format(\"%03d\", digits.get(i)));\n            }\n        }\n        return sb.toString();\n    }\n\n    private int compareTo(BigInt other) {\n        if (this.digits.size() != other.digits.size()) {\n            return this.digits.size() - other.digits.size();\n        }\n        for (int i = this.digits.size() - 1; i >= 0; i--) {\n            if (!this.digits.get(i).equals(other.digits.get(i))) {\n                return this.digits.get(i) - other.digits.get(i);\n            }\n        }\n        return 0;\n    }\n\n    private BigInt(List<Integer> digits) {\n        this.digits = digits;\n    }\n}"}
{"id": 1833, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n \n     int a[10000],i,flag=0,size=0,digit=0;\n     for(i = 1; i < argc; i++) {\n       a[i] = atoi(argv[i]);\n       size = i;\n     }\n     for(i=1;i<=size;i++)\n     {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    if(isdigit(a[i])==0 && a[i]>0)\n    {\n      digit=a[i];\n      if(digit%3==0)\n      {\n        while(digit>0)\n        {\n          if(digit%10==3)\n          {\n            printf(\"dumb\\n\");\n            flag=1;\n            break;\n          }\n          digit=digit/10;\n        }\n        if(flag==0)\n        {\n          printf(\"idiot\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n      }\n      else\n      {\n        while(a[i]>0)\n        {\n          if(a[i]%10==3)\n          {\n            printf(\"stupid\\n\");\n            flag=1;\n            break;\n          }\n          a[i]=a[i]/10;\n        }\n        if(flag=0)\n        {\n          printf(\"smart\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n      }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n     }\n    \n  return 0;\n}\n"}
{"id": 1834, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_numeric_string(const char *str) {\n    while (*str) {\n        if (!isdigit(*str)) return 0;\n        str++;\n    }\n    return 1;\n}\n\nint check_for_number_three(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid analyze_input_value(const char *arg) {\n    if (!is_numeric_string(arg)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int number = atoi(arg);\n    if (number < 0 || number > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (number % 3 == 0 && check_for_number_three(number)) {\n        printf(\"dumb\\n\");\n    } else if (number % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (check_for_number_three(number)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        analyze_input_value(argv[i]);\n    }\n    return 0;\n}"}
{"id": 1835, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint main(int argc, char *argv[]) {\n    for (int k = 1; k < argc; k++) {\n        char *current_arg = argv[k];\n        int i_num;\n        int is_valid = 1;\n\n        if (current_arg[0] == '\\0') {\n            is_valid = 0;\n        } else {\n            for (int j = 0; current_arg[j] != '\\0'; j++) {\n                if (!isdigit(current_arg[j])) {\n                    is_valid = 0;\n                    break;\n                }\n            }\n        }\n        \n        if (!is_valid) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n        \n        i_num = atoi(current_arg);\n\n        if (i_num > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int check_3_present = 0;\n        int temp_num = i_num;\n        do {\n            if (temp_num % 10 == 3) {\n                check_3_present = 1;\n                break;\n            }\n            temp_num /= 10;\n        } while (temp_num > 0);\n\n        int check_div_3 = (i_num % 3 == 0);\n\n        if (check_3_present) {\n            if (check_div_3) {\n                printf(\"dumb\\n\");\n            } else {\n                printf(\"stupid\\n\");\n            }\n        } else {\n            if (check_div_3) {\n                printf(\"idiot\\n\");\n            } else {\n                printf(\"smart\\n\");\n            }\n        }\n    }\n    return 0;\n}"}
{"id": 1836, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        boolean[] colMark = new boolean[8];\n        boolean[] d1Mark = new boolean[15];\n        boolean[] d2Mark = new boolean[15];\n        int[] answer = new int[8];\n        boolean[] fixedRow = new boolean[8];\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt(), c = sc.nextInt();\n            answer[r] = c;\n            colMark[c] = d1Mark[r + c] = d2Mark[r - c + 7] = true;\n            fixedRow[r] = true;\n        }\n        fill(answer, colMark, d1Mark, d2Mark, fixedRow, 0);\n        for (int i = 0; i < 8; i++) {\n            char[] out = new char[8];\n            Arrays.fill(out, '.');\n            out[answer[i]] = 'Q';\n            System.out.println(new String(out));\n        }\n    }\n\n    static boolean fill(int[] answer, boolean[] col, boolean[] d1, boolean[] d2, boolean[] fixed, int row) {\n        if (row == 8) return true;\n        if (fixed[row]) return fill(answer, col, d1, d2, fixed, row + 1);\n        for (int c = 0; c < 8; c++) {\n            if (!col[c] && !d1[row + c] && !d2[row - c + 7]) {\n                answer[row] = c;\n                col[c] = d1[row + c] = d2[row - c + 7] = true;\n                if (fill(answer, col, d1, d2, fixed, row + 1)) return true;\n                col[c] = d1[row + c] = d2[row - c + 7] = false;\n            }\n        }\n        return false;\n    }\n}"}
{"id": 1837, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Predictor {\n\n    public static void main(String[] args) {\n        String inputFile = args[0];\n        \n        List<int[]> gameLog = new ArrayList<>(); // Stores [robot_hand, you_hand]\n        \n        try {\n            String fileContents = readAFile(inputFile);\n            String cleanedContents = fileContents.substring(1, fileContents.length() - 1); // Remove outer []\n            String[] rawEntries = cleanedContents.split(\"\\\\},\\\\{\"); // Split into individual entries\n\n            for (String entry : rawEntries) {\n                String cleanEntry = entry.replaceAll(\"[{}\\\" ]\", \"\"); // Remove { } \" space\n                String[] parts = cleanEntry.split(\",\");\n                \n                int robotH = Integer.parseInt(parts[0].split(\":\")[1]);\n                int youH = Integer.parseInt(parts[1].split(\":\")[1]);\n                gameLog.add(new int[]{robotH, youH});\n            }\n\n        } catch (IOException e) {\n            System.err.println(\"Problem reading the file: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> robotMoveHistory = new HashMap<>(); // Key: state, Value: next hand to play\n        List<Integer> robotAllHands = new ArrayList<>();\n        List<Integer> youAllHands = new ArrayList<>();\n\n        // Add initial 3 fixed robot hands\n        robotAllHands.add(0);\n        robotAllHands.add(1);\n        robotAllHands.add(2);\n\n        for (int i = 0; i < gameLog.size(); i++) {\n            int currentRobotHand = gameLog.get(i)[0];\n            int currentYouHand = gameLog.get(i)[1];\n\n            if (i >= 3) {\n                // Create state string for current robot hand determination\n                String stateKey = robotAllHands.get(i - 3) + \"_\" + \n                                  robotAllHands.get(i - 2) + \"_\" + \n                                  robotAllHands.get(i - 1) + \"_\" + \n                                  youAllHands.get(i - 1);\n                \n                // Record the next hand robot will play for this state\n                robotMoveHistory.put(stateKey, (currentRobotHand + 1) % 3);\n            }\n            \n            robotAllHands.add(currentRobotHand);\n            youAllHands.add(currentYouHand);\n        }\n\n        // Determine final state and predict robot's move\n        int historySize = gameLog.size();\n        String finalState = robotAllHands.get(historySize - 3) + \"_\" + \n                            robotAllHands.get(historySize - 2) + \"_\" + \n                            robotAllHands.get(historySize - 1) + \"_\" + \n                            youAllHands.get(historySize - 1);\n        \n        int robotsNextHand = robotMoveHistory.getOrDefault(finalState, 0); // Default to 0 (Rock)\n\n        // Find winning hand\n        int myHandToPlay;\n        if (robotsNextHand == 0) { // Rock\n            myHandToPlay = 2; // Paper\n        } else if (robotsNextHand == 1) { // Scissors\n            myHandToPlay = 0; // Rock\n        } else { // Paper\n            myHandToPlay = 1; // Scissors\n        }\n\n        System.out.println(myHandToPlay);\n    }\n\n    private static String readAFile(String p) throws IOException {\n        StringBuilder b = new StringBuilder();\n        try (BufferedReader r = new BufferedReader(new FileReader(p))) {\n            String l;\n            while ((l = r.readLine()) != null) {\n                b.append(l.trim());\n            }\n        }\n        return b.toString();\n    }\n}"}
{"id": 1838, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n            {\n                string stdout = ThreeidotAlgorithm(args[i]);\n                Console.WriteLine(stdout);\n\n            }\n    }\n    protected static string ThreeidotAlgorithm(string input)\n        {\n            string stdout;\n            int id;\n            bool result = Int32.TryParse(input, out id);\n            if (result)\n            {\n                int digit = 3;\n                if (0 <= id && id <= 1000)\n                {\n                    if (id % 3 == 0 && id.ToString().Contains(digit.ToString()))\n                    {\n                        stdout = \"dumb\";\n                    }\n                    else if (id % 3 == 0)\n                    {\n                        stdout = \"idiot\";\n                    }\n                    else if (id.ToString().Contains(digit.ToString()))\n                    {\n                        stdout = \"stupid\";\n                    }\n                    else\n                    {\n                        stdout = \"smart\";\n                    }\n                }\n                else\n                {\n                    stdout = \"invalid\";\n                }\n            }\n            else\n            {\n                stdout = \"invalid\";\n            }\n            return stdout;\n        }\n}\n"}
{"id": 1839, "language": "Python3", "code": "import sys\nimport json\nfrom pathlib import Path\nfrom typing import Union\nfrom collections import Counter\n\nJSON_SUFFIX = '.json'\nTEXT_SUFFIX = '.txt'\nMEAN_WORD_LEN = 4\nMOST_USED_CHAR = 'e'\n\n\ndef count(\n    encrypted_text_path: Union[str, Path],\n    output_path: Union[str, Path],\n) -> None:\n    '''\n    count flequenct of each characters in encrypted_text.\n\n    :param encrypted_text_path: path to encrypted_text.\n    :param output_path: path to output json file.\n    '''\n    if isinstance(encrypted_text_path, str):\n        encrypted_text_path = Path(encrypted_text_path)\n    if isinstance(output_path, str):\n        output_path = Path(output_path)\n    assert encrypted_text_path.exists()\n    assert encrypted_text_path.suffix == TEXT_SUFFIX\n    assert output_path.suffix == JSON_SUFFIX\n\n    # initialize character counter with 0.\n    char_counter = Counter({' ': 0})\n    for i in range(ord('A'), ord('z')+1):\n        if not ord('Z') < i < ord('a'):\n            char_counter.update({chr(i): 0})\n\n    # update dictionary if character is alphabet.\n    with encrypted_text_path.open() as f:\n        for c in list(f.read()):\n            if 'A' <= c <= 'Z' or 'a' <= c <= 'z' or c == ' ':\n                char_counter.update(c)\n\n    with output_path.open('w') as f:\n        json.dump(char_counter, f)\n\n\ndef space(\n        encrypted_text_path: Union[str, Path],\n        output_path: Union[str, Path],\n) -> None:\n    '''\n    detect character which is replaced with space.\n\n    :param encrypted_text_path: path to encrypted_text.\n    :param output_path: path to output json file.\n    '''\n    if isinstance(encrypted_text_path, str):\n        encrypted_text_path = Path(encrypted_text_path)\n    if isinstance(output_path, str):\n        output_path = Path(output_path)\n    assert encrypted_text_path.exists()\n    assert encrypted_text_path.suffix == TEXT_SUFFIX\n    assert output_path.suffix == JSON_SUFFIX\n\n    with encrypted_text_path.open() as f:\n        sentences = f.read()\n\n    processed_sentences = sentences.replace(' ', '_').replace('\\n', ' ')\n    tmp_err = float('inf')\n    target_char = {}\n    for tmp_char in range(ord('a'), ord('z')):\n        word_length = [len(i) for i in processed_sentences.replace(chr(tmp_char), ' ').split()]\n        mean_length = sum(word_length) / len(word_length)\n        err = abs(mean_length - MEAN_WORD_LEN)\n        if err < tmp_err:\n            target_char['char'] = chr(tmp_char)\n            tmp_err = err\n\n    with output_path.open('w') as f:\n        json.dump(target_char, f)\n\ndef decrypt(\n        encrypted_text_path: Union[str, Path],\n        output_path: Union[str, Path],\n) -> None:\n    '''\n    decrypt sentence which is encrypted beforehand.\n\n    :param encrypted_text_path: path to encrypted_text.\n    :param output_path: path to output json file.\n    '''\n    if isinstance(encrypted_text_path, str):\n        encrypted_text_path = Path(encrypted_text_path)\n    if isinstance(output_path, str):\n        output_path = Path(output_path)\n    assert encrypted_text_path.exists()\n    assert encrypted_text_path.suffix == TEXT_SUFFIX\n\n    count(encrypted_text_path, output_path)\n\n    with output_path.open() as f:\n        most_frequent_char = Counter(json.load(f)).most_common(1)[0][0]\n\n    space(encrypted_text_path, output_path)\n\n    with output_path.open() as f:\n        replaced_char = json.load(f)['char']\n\n    # decrypt\n    decrypted_text = ''\n    with encrypted_text_path.open() as f:\n        for c in list(f.read()):\n            if c == replaced_char:\n                decrypted_text += ' '\n            elif c == ' ':\n                decrypted_text += replaced_char\n            else:\n                decrypted_text += c\n\n    shift_num = (ord(MOST_USED_CHAR) - ord(most_frequent_char))\n\n    result = ''\n    for c in decrypted_text:\n        tmp_char = ord(c) + shift_num\n        if 'A' <= c <= 'Z':\n            if ord('Z') < tmp_char:\n                tmp_char = ord('A') + (tmp_char % ord('Z'))\n            result += chr(tmp_char)\n        if 'a' <= c <= 'z':\n            if ord('z') < tmp_char:\n                tmp_char = ord('a') + (tmp_char % ord('z'))\n            result += chr(tmp_char)\n        else:\n            result += c\n\n    with output_path.open('w') as f:\n        f.write(result)\n\n\nif __name__ == '__main__':\n    args = sys.argv[1:]\n\n    mode = args[0]\n    encrypted_text_path = args[1]\n    output_path = args[2]\n\n    if mode == 'count':\n        count(encrypted_text_path, output_path)\n    elif mode == 'space':\n        space(encrypted_text_path, output_path)\n    else:\n        decrypt(encrypted_text_path, output_path)\n"}
{"id": 1840, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <cctype>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// count\nvoid do_count(const string &infile, const string &outfile) {\n    ifstream ifs(infile);\n    map<char, int> stat;\n    char c;\n    while (ifs.get(c)) {\n        if (isalpha(c) || c==' ') stat[c]++;\n    }\n    ifs.close();\n    ofstream ofs(outfile);\n    ofs << \"{\\n\";\n    bool f = true;\n    for (auto const &x : stat) {\n        if (!f) ofs << \",\\n\";\n        f = false;\n        ofs << \"  \\\"\" << x.first << \"\\\": \" << x.second;\n    }\n    ofs << \"\\n}\\n\";\n    ofs.close();\n}\n\n// space\nchar guess_space(const string& filename) {\n    ifstream ifs(filename);\n    map<char, int> cnt;\n    char c;\n    while (ifs.get(c)) if (isalpha(c)) cnt[c]++;\n    ifs.close();\n    int mxcnt = 0; char mxch = 0;\n    for (auto &p : cnt) {\n        if (p.second > mxcnt) { mxcnt = p.second; mxch = p.first; }\n    }\n    return mxch;\n}\n\nvoid do_space(const string &infile, const string &outfile) {\n    char c = guess_space(infile);\n    ofstream ofs(outfile);\n    ofs << \"{\\n  \\\"char\\\": \\\"\" << c << \"\\\"\\n}\" << endl;\n    ofs.close();\n}\n\n// decrypt\nstring swap_space(const string &text, char sp) {\n    string ret = text;\n    for (auto &c : ret) {\n        if (c == sp) c = ' ';\n        else if (c == ' ') c = sp;\n    }\n    return ret;\n}\n\nstring get_decrypt(const string &t) {\n    int freq[26]{};\n    for (char c : t) if (islower(c)) freq[c-'a']++;\n    int mxid = max_element(freq, freq+26) - freq;\n    int shift = (mxid - ('e'-'a') + 26) % 26;\n    string ans = t;\n    for (auto &c : ans) {\n        if (islower(c)) c = (c-'a'-shift+26)%26 + 'a';\n        else if (isupper(c)) c = (c-'A'-shift+26)%26 + 'A';\n    }\n    return ans;\n}\n\nvoid do_decrypt(const string &infile, const string &outfile) {\n    ifstream ifs(infile);\n    string tex((istreambuf_iterator<char>(ifs)), istreambuf_iterator<char>());\n    ifs.close();\n    char s = guess_space(infile);\n    tex = swap_space(tex, s);\n    tex = get_decrypt(tex);\n    ofstream ofs(outfile);\n    ofs << tex;\n    ofs.close();\n}\n\nint main(int argc, char *argv[]) {\n    string mode(argv[1]);\n    if (mode==\"count\") do_count(argv[2], argv[3]);\n    else if (mode==\"space\") do_space(argv[2], argv[3]);\n    else if (mode==\"decrypt\") do_decrypt(argv[2], argv[3]);\n    return 0;\n}"}
{"id": 1841, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static boolean digitChecker(int digit){\n\t    int reminder=0;\n\t    while(digit/10 != 0 ){\n\t      if(digit%10 == 3){\n\t    \t  return true;\n\t      }\n\t      digit= digit/10; \n\t    }\n\n\t    \n\t    if(digit%10 == 3){\n\t      return true;\n\t    }\n\t    \n\t    return false;\n\n\n\t  }\n\n\t  public static void find(int value){\n\t\t \n\t    if(value >= 0 || value <=1000){\n\t    \t\n\t        if(value%3 == 0 ){\n\t        \t\n\t          if(digitChecker(value)==true){\n\t            System.out.println(\"dumb\");\n\t          }else{\n\t            System.out.println(\"idiot\");\n\t          }\n\t        }else{\n\t        \tif(digitChecker(value) == true) {\n\t        \t\tSystem.out.println(\"stupid\");\n\t        \t}else {\n\t        \t\tSystem.out.println(\"smart\");\n\t\t\t\t}\n\t          \n\t        }\n\t    }else{\n\t      System.out.println(\"invalid\");\n\t    }\n\t  }\n\t  \n\t  \n\n\t\tpublic static void main(String[] args) {\n\t\t\tfor (int i = 0, l = args.length; i < l; i++) {\n        // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t      // System.out.println(output);\n\t\t\t\ttry {\n\t\t\t\t\tfind(Integer.parseInt(args[i]));\n\t\t\t\t}catch (NumberFormatException e) {\n\t\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t}\n\t\n}\n"}
{"id": 1842, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // 00100101 \u30c9\u30920 \u30ab\u30921 \u3068\u3057\u3066\u30017bit\u3067\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab \u3092\u8868\u73fe\u3057\u305f\u6570\u5024\n  const unsigned char result = 0x25;\n  \n  // \u6700\u5927\u56de\u6570\n  int testCount = atoi(argv[1]);\n\n  bool success = false;\n  unsigned char input = 0;\n  for( int index = 0; index < testCount; ++index)\n  {\n    unsigned char doka = rand() % 2;\n\n    if( 0 == doka  )\n    {\n      printf( \"\u30c9\\n\" );\n    }\n    else if( 1 == doka )\n    {\n      printf( \"\u30ab\\n\" );\n    }\n    else{\n      ////assert(0);\n    }\n\n    // \u524d\u56de\u304b\u3089\u305a\u3089\u3057\u3066\u3001\u6700\u4e0a\u4f4d\u30d3\u30c3\u30c8\u5207\u6368\u3066\n    input = 0x80 & (input << 1);\n    // \u4eca\u56de\u5206\u52a0\u3048\u308b\n    input += doka;\n    // \u540c\u3058\u3060\u3063\u305f\u3089\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\n    if( result == input )\n    {\n      printf( \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\" );\n      success = true;\n      break;\n    }\n  }\n\n  if( !success )\n  {\n    printf( \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\" );\n  }\n  return 0;\n}"}
{"id": 1843, "language": "Python3", "code": "import sys\n\ndef arabic_to_roman(num):\n    # \u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syms[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\ndef main(argv):\n    # CLI \u3067\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n    arabic_number = int(argv[0])\n    roman_numeral = arabic_to_roman(arabic_number)\n    print(roman_numeral)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1844, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class AdvancedClassifier {\n\n  private enum Category {\n    DUMB, IDIOT, STUPID, SMART, INVALID\n  }\n\n  private static Category determineCategory(int number) {\n    if (number < 0 || number > 1000) return Category.INVALID;\n    boolean isDivBy3 = (number % 3 == 0);\n    boolean includes3 = String.valueOf(number).contains(\"3\");\n\n    if (isDivBy3 && includes3) return Category.DUMB;\n    if (isDivBy3) return Category.IDIOT;\n    if (includes3) return Category.STUPID;\n    return Category.SMART;\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(determineCategory(sc.nextInt()).name().toLowerCase());\n      } else {\n        System.out.println(Category.INVALID.name().toLowerCase());\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1845, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  \n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n  //  printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  //a[i]=atoi(argv[i]);\n  int r, t,f=0;\n  t=(atoi(argv[i]));\n  while(t>0)\n  {\n    r=t%10;\n    if(r==3)\n    {f=1;break;}\n    t=t/10;\n  }\n  if((atoi(argv[i])%3==0)&&(f==1))\n {\n   printf(\"dumb\\n\");\n  }\n  else if(f==1)\n  {\n    printf(\"stupid\\n\");\n  }\n  else if(atoi(argv[i])%3==0)\n  {\n    printf(\"idiot\\n\");\n  }\n  else if((atoi(argv[i])%3!=0)&&(f!=1))\n  {\n    printf(\"smart\\n\");\n  }\n  else \n  {\n    printf(\"invalid\\n\");\n  }\n  }\n\n  return 0;\n}\n"}
{"id": 1846, "language": "Python3", "code": "import sys\nimport json\n\ndef win_hand(hand):\n    # Returns the hand winning against given hand 0:R,1:S,2:P\n    return (hand + 2) % 3\n\ndef main(argv):\n    with open(argv[0]) as f:\n        games = json.load(f)\n\n    if len(games) < 3:\n        print(0)\n        return\n\n    patterns = {}\n    for idx in range(3, len(games)):\n        k = (\n            games[idx-3][\"robot\"],\n            games[idx-2][\"robot\"],\n            games[idx-1][\"robot\"],\n            games[idx-1][\"you\"]\n        )\n        if k in patterns:\n            patterns[k].append(games[idx][\"robot\"])\n        else:\n            patterns[k] = [games[idx][\"robot\"]]\n\n    key = (\n        games[-3][\"robot\"],\n        games[-2][\"robot\"],\n        games[-1][\"robot\"],\n        games[-1][\"you\"]\n    )\n\n    if key in patterns:\n        cnt = len(patterns[key])\n        nxt = cnt % 3\n        hand = patterns[key][nxt % len(patterns[key])]\n    else:\n        hand = 0\n    print(win_hand(hand))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1847, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class QueensSolverOne\n{\n    // _placedQueensPositions[i] stores the column of the queen in row i, or -1 if no queen\n    private int[] _placedQueensPositions = new int[8];\n    private bool[] _columnOccupied = new bool[8];\n    private bool[] _diagOneOccupied = new bool[15]; // For r + c diagonals\n    private bool[] _diagTwoOccupied = new bool[15]; // For r - c + 7 diagonals\n    private char[,] _finalBoardState = new char[8, 8];\n\n    public QueensSolverOne(List<Tuple<int, int>> initialPositions)\n    {\n        // Initialize board and queen positions\n        for (int i = 0; i < 8; i++)\n        {\n            _placedQueensPositions[i] = -1; // -1 indicates no queen in this row\n            for (int j = 0; j < 8; j++)\n            {\n                _finalBoardState[i, j] = '.';\n            }\n        }\n\n        // Place initial queens and mark their occupied states\n        foreach (var pos in initialPositions)\n        {\n            int r = pos.Item1;\n            int c = pos.Item2;\n            _placedQueensPositions[r] = c;\n            _finalBoardState[r, c] = 'Q';\n            _columnOccupied[c] = true;\n            _diagOneOccupied[r + c] = true;\n            _diagTwoOccupied[r - c + 7] = true;\n        }\n    }\n\n    public void InitiateSolutionAndDisplay()\n    {\n        SolveRecursively(0); // Start solving from row 0\n        DisplayBoard();\n    }\n\n    private bool SolveRecursively(int rowToPlace)\n    {\n        // Base case: All 8 queens are placed successfully\n        if (rowToPlace == 8)\n        {\n            return true;\n        }\n\n        // If a queen is already fixed in this row by initial setup, skip to the next row\n        if (_placedQueensPositions[rowToPlace] != -1)\n        {\n            return SolveRecursively(rowToPlace + 1);\n        }\n\n        // Try placing a queen in each column of the current row\n        for (int colAttempt = 0; colAttempt < 8; colAttempt++)\n        {\n            if (IsPositionSafe(rowToPlace, colAttempt))\n            {\n                // Place the queen\n                _placedQueensPositions[rowToPlace] = colAttempt;\n                _finalBoardState[rowToPlace, colAttempt] = 'Q';\n                _columnOccupied[colAttempt] = true;\n                _diagOneOccupied[rowToPlace + colAttempt] = true;\n                _diagTwoOccupied[rowToPlace - colAttempt + 7] = true;\n\n                // Recur for the next row\n                if (SolveRecursively(rowToPlace + 1))\n                {\n                    return true; // Solution found\n                }\n\n                // Backtrack: Remove the queen if it didn't lead to a solution\n                _placedQueensPositions[rowToPlace] = -1; // Unmark queen in this row\n                _finalBoardState[rowToPlace, colAttempt] = '.';\n                _columnOccupied[colAttempt] = false;\n                _diagOneOccupied[rowToPlace + colAttempt] = false;\n                _diagTwoOccupied[rowToPlace - colAttempt + 7] = false;\n            }\n        }\n\n        return false; // No solution found from this path\n    }\n\n    private bool IsPositionSafe(int r, int c)\n    {\n        return !_columnOccupied[c] && !_diagOneOccupied[r + c] && !_diagTwoOccupied[r - c + 7];\n    }\n\n    private void DisplayBoard()\n    {\n        for (int i = 0; i < 8; i++)\n        {\n            for (int j = 0; j < 8; j++)\n            {\n                Console.Write(_finalBoardState[i, j]);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        int k = int.Parse(Console.ReadLine());\n        List<Tuple<int, int>> initialQueens = new List<Tuple<int, int>>();\n\n        for (int i = 0; i < k; i++)\n        {\n            string[] line = Console.ReadLine().Split(' ');\n            int r = int.Parse(line[0]);\n            int c = int.Parse(line[1]);\n            initialQueens.Add(Tuple.Create(r, c));\n        }\n        \n        QueensSolverOne solver = new QueensSolverOne(initialQueens);\n        solver.InitiateSolutionAndDisplay();\n    }\n}"}
{"id": 1848, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol, abs\n#include <errno.h>  // For errno\n#include <limits.h> // For LONG_MAX, LONG_MIN\n\n// Checks if a non-negative integer contains the digit 3.\nint containsDigitThree(int num) {\n    if (num == 0) {\n        return 0; // 0 does not contain the digit 3.\n    }\n    int temp = num;\n    while (temp > 0) {\n        if (temp % 10 == 3) {\n            return 1; // Found digit 3\n        }\n        temp /= 10;\n    }\n    return 0; // Digit 3 not found\n}\n\n// Determines and prints the result of the \"3 idiots algorithm\" for a given string.\nvoid processInputString(const char* input_str) {\n    int parsed_num;\n    char* endptr;\n    long val_long;\n\n    // Clear errno before strtol call for robust error checking.\n    errno = 0;\n\n    // Convert string to long integer using strtol.\n    val_long = strtol(input_str, &endptr, 10);\n\n    // Check for conversion errors and if the entire string was consumed.\n    if (endptr == input_str || *endptr != '\\0') {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    // Check for overflow or underflow from strtol.\n    if ((val_long == LONG_MAX || val_long == LONG_MIN) && errno == ERANGE) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    // Check if the number is within the valid range [0, 1000].\n    if (val_long < 0 || val_long > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    // Cast the valid long value to an int.\n    parsed_num = (int)val_long;\n\n    // Determine properties of the number.\n    int is_multiple_of_3 = (parsed_num % 3 == 0);\n    int has_digit_3 = containsDigitThree(parsed_num);\n\n    // Apply the algorithm rules in order of precedence.\n    if (is_multiple_of_3 && has_digit_3) {\n        printf(\"dumb\\n\");\n    } else if (is_multiple_of_3) {\n        printf(\"idiot\\n\");\n    } else if (has_digit_3) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0] is the program name, so we start from argv[1].\n  for (int i = 1; i < argc; i++) {\n    processInputString(argv[i]);\n  }\n  return 0;\n}"}
{"id": 1849, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nstatic bool dokadoka( int num )\n{\n  unsigned char hist = 0;\n\n  while( num-- ) {\n    int r = rand()&1;\n    cout << (r ? \"\u30c9\" : \"\u30ab\") << endl;\n    hist = ((hist<<1) | r) & 0x7f;\n    if ( hist == 0x5a ) {\n      cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n      return true; \n    }\n  }\n  return false;\n}\n\nint main(int argc, char *argv[])\n{\n//  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n//  for (int i = 1; i < argc; i++) {\n//    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n//  }\n\n  if ( argc < 2 ){\n    exit(1);\n  }\n  int num = atoi(argv[1]);\n\n  if ( !dokadoka( num ) ) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n  }\n\n  return 0;\n}\n"}
{"id": 1850, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This solution uses an iterative backtracking approach with an explicit stack.\n    \n    board_dim = 8\n    \n    # Read k pre-placed queens\n    num_initial = int(sys.stdin.readline())\n\n    # Initialize board and conflict trackers\n    board_state = [['.' for _ in range(board_dim)] for _ in range(board_dim)]\n    \n    cols_occupied = [False] * board_dim\n    diag_sums_occupied = [False] * (2 * board_dim - 1)\n    diag_diffs_occupied = [False] * (2 * board_dim - 1)\n    \n    # To identify rows with initial queens\n    initial_queen_rows = set()\n\n    # Place initial queens and update trackers\n    for _ in range(num_initial):\n        r_coord, c_coord = map(int, sys.stdin.readline().split())\n        board_state[r_coord][c_coord] = 'Q'\n        cols_occupied[c_coord] = True\n        diag_sums_occupied[r_coord + c_coord] = True\n        diag_diffs_occupied[r_coord - c_coord + (board_dim - 1)] = True\n        initial_queen_rows.add(r_coord)\n\n    # Stack for iterative backtracking: stores (row, col_to_start_from)\n    # The stack implicitly represents the current path of placed queens.\n    solution_stack = []\n    \n    # Current row being processed\n    current_row = 0\n\n    # Main iterative loop\n    while current_row < board_dim:\n        # If this row has an initial queen, just move to the next row\n        if current_row in initial_queen_rows:\n            current_row += 1\n            continue\n        \n        # Determine the column to start searching from for the current row\n        start_col = 0\n        if solution_stack and solution_stack[-1][0] == current_row:\n            # If we are backtracking to this row, start from the next column\n            start_col = solution_stack[-1][1] + 1\n            # Remove the queen previously placed in this row (backtrack)\n            r, c = solution_stack.pop()\n            board_state[r][c] = '.'\n            cols_occupied[c] = False\n            diag_sums_occupied[r + c] = False\n            diag_diffs_occupied[r - c + (board_dim - 1)] = False\n\n        found_safe_spot = False\n        for col_val in range(start_col, board_dim):\n            # Check if current position is safe\n            if not cols_occupied[col_val] and \\\n               not diag_sums_occupied[current_row + col_val] and \\\n               not diag_diffs_occupied[current_row - col_val + (board_dim - 1)]:\n                \n                # Place queen and update trackers\n                board_state[current_row][col_val] = 'Q'\n                cols_occupied[col_val] = True\n                diag_sums_occupied[current_row + col_val] = True\n                diag_diffs_occupied[current_row - col_val + (board_dim - 1)] = True\n                \n                # Push current placement to stack\n                solution_stack.append((current_row, col_val))\n                \n                # Move to the next row\n                current_row += 1\n                found_safe_spot = True\n                break # Found a spot, move on to the next row\n\n        if not found_safe_spot:\n            # No safe spot in this row. Backtrack to previous row.\n            if not solution_stack:\n                # Should not happen if a solution always exists\n                break \n            current_row = solution_stack[-1][0]\n            # Loop will handle popping and starting from next col\n\n    # Print the resulting board\n    for r_idx in range(board_dim):\n        print(\"\".join(board_state[r_idx]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1851, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  string one;\n  string two;\n  char op;\n  int i = 0;\n  while(argv[1][i] != ' ' && argv[1][i] != '+' && argv[1][i] != '*'){\n    one += argv[1][i];\n    i++;\n  }\n  while(argv[1][i] == ' ')i++;\n  op = argv[1][i];\n  i++;\n  while(argv[1][i] == ' ')i++;\n  while(argv[1][i] && argv[1][i] != ' '){\n    two += argv[1][i];\n    i++;\n  }\n  if(op == '+'){\n    int tmp = 0;\n    string ans;\n    for(int i = 0; i < min(one.size(), two.size()); i++){\n      int current = one[one.size() - i - 1] - '0';\n      current += two[two.size() - i - 1] - '0';\n      current += tmp;\n      if(current < 9){\n        ans = to_string(current) + ans;\n        tmp = 0;\n      }else{\n        ans = to_string(current % 9) + ans;\n        tmp = 1;\n      }\n    }\n    if(one.size() > two.size()){\n        for(int i = two.size(); i < one.size(); i++){\n          int current = one[one.size() - i - 1] - '0' + tmp;\n          if(current < 9){\n            ans = to_string(current) + ans;\n            tmp = 0;\n          }else{\n            ans = to_string(current % 9) + ans;\n            tmp = 1;\n          }\n        }\n        if(tmp == 1)ans = '1' + ans;\n      }else if(one.size() < two.size()){\n          for(int i = one.size(); i < two.size(); i++){\n          int current = two[two.size() - i - 1] - '0' + tmp;\n          if(current < 9){\n            ans = to_string(current) + ans;\n            tmp = 0;\n          }else{\n            ans = to_string(current % 9) + ans;\n            tmp = 1;\n          }\n        }\n        if(tmp == 1)ans = '1' + ans;\n      }else{\n        if(tmp == 1)ans = '1' + ans;\n      }\n      cout << ans << endl;\n  }else{\n    string tnum = two;\n    two = one;\n    while(tnum != \"0\"){\n    if(tnum[tnum.size() - 1] != '0'){\n      tnum = tnum.substr(0, tnum.size() - 1) + to_string(tnum[tnum.size() - 1] - '0' - 1);\n    }else{\n      int k = tnum.size() - 1;\n      while(tnum[k - 1] == '0'){\n        tnum[k] = '8';\n        k--;\n      }\n      tnum[k] = (char)(tnum[k] - '0' - 1);\n    }\n    int tmp = 0;\n    string ans;\n    for(int i = 0; i < min(one.size(), two.size()); i++){\n      int current = one[one.size() - i - 1] - '0';\n      current += two[two.size() - i - 1] - '0';\n      current += tmp;\n      if(current < 9){\n        ans = to_string(current) + ans;\n        tmp = 0;\n      }else{\n        ans = to_string(current % 9) + ans;\n        tmp = 1;\n      }\n    }\n      if(one.size() > two.size()){\n        for(int i = two.size(); i < one.size(); i++){\n          int current = one[one.size() - i - 1] - '0' + tmp;\n          if(current < 9){\n            ans = to_string(current) + ans;\n            tmp = 0;\n          }else{\n            ans = to_string(current % 9) + ans;\n            tmp = 1;\n          }\n        }\n        if(tmp == 1)ans = '1' + ans;\n      }else if(one.size() < two.size()){\n          for(int i = one.size(); i < two.size(); i++){\n          int current = two[two.size() - i - 1] - '0' + tmp;\n          if(current < 9){\n            ans = to_string(current) + ans;\n            tmp = 0;\n          }else{\n            ans = to_string(current % 9) + ans;\n            tmp = 1;\n          }\n        }\n        if(tmp == 1)ans = '1' + ans;\n      }else{\n        if(tmp == 1)ans = '1' + ans;\n      }\n      two = ans;\n    }\n    cout << two << endl;\n  }\n  return 0;\n}\n"}
{"id": 1852, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\nimport org.json.*;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u5f15\u6570\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u53d6\u5f97\n    if (args.length != 1) return;\n    String path = args[0];\n\n    List<Integer> robotHistory = new ArrayList<>();\n    List<Integer> youHistory = new ArrayList<>();\n    try {\n      String content = Files.readString(Paths.get(path));\n      JSONArray arr = new JSONArray(content);\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject o = arr.getJSONObject(i);\n        robotHistory.add(o.getInt(\"robot\"));\n        youHistory.add(o.getInt(\"you\"));\n      }\n    } catch (Exception e) {\n      return;\n    }\n\n    if (robotHistory.size() < 3) {\n      System.out.println(\"0\");\n      return;\n    }\n\n    int n = robotHistory.size();\n    int r3 = robotHistory.get(n-3);\n    int r2 = robotHistory.get(n-2);\n    int r1 = robotHistory.get(n-1);\n    int y1 = youHistory.get(n-1);\n\n    String key = \"\" + r3 + r2 + r1 + y1;\n\n    Map<String, List<Integer>> mem = new HashMap<>();\n\n    // \u904e\u53bb\u3092\u30b5\u30fc\u30c1\uff1a3\u624b\u524d\u4ee5\u964d\u306b\u540c\u3058\u30d1\u30bf\u30fc\u30f3\u304c\u4f55\u5ea6\u3042\u3063\u305f\u304b\u8a18\u9332\n    for (int i = 3; i < n; i++) {\n      String k = \"\" + robotHistory.get(i-3) + robotHistory.get(i-2) + robotHistory.get(i-1) + youHistory.get(i-1);\n      int nextHand = robotHistory.get(i);\n      mem.computeIfAbsent(k, x -> new ArrayList<>()).add(nextHand);\n    }\n\n    List<Integer> plays = mem.getOrDefault(key, new ArrayList<>());\n    int cnt = plays.size();\n    int next;\n    if (cnt == 0) {\n      next = 0; // \u6700\u521d\u306frock\n    } else {\n      // rock\u2192scissor\u2192paper\u2192rock ...\u306e\u9806\u3067\u5faa\u74b0\n      next = (plays.get(cnt - 1) + 1) % 3;\n    }\n    // \u52dd\u3066\u308b\u624b\u3092\u63a2\u3059\n    int winHand = (next + 2) % 3;\n    System.out.println(winHand);\n  }\n}"}
{"id": 1853, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint has_a3(const char* s) {\n  while(*s) {\n    if(*s=='3') return 1;\n    s++;\n  }\n  return 0;\n}\n\nint string_digits(const char* s) {\n  if (!*s) return 0;\n  while(*s) {\n    if(!isdigit(*s++)) return 0;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for(int z=1; z<argc; z++) {\n    if (!string_digits(argv[z])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int num = atoi(argv[z]);\n    if (num<0 || num>1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int dz3 = num%3==0;\n    int hz3 = has_a3(argv[z]);\n    if(dz3 && hz3) puts(\"dumb\");\n    else if(dz3) puts(\"idiot\");\n    else if(hz3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 1854, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    return 1;\n  }\n  \n  int max_count = atoi(argv[1]);\n  srand(time(NULL));\n\n  char history[10001] = {0}; // \u5168\u3066\u306e\u5c65\u6b74\u3092\u4fdd\u5b58\u3059\u308b\n  const char* pattern = \"dkddkdkdk\";\n  const int pattern_len = 9;\n\n  for (int i = 0; i < max_count; i++) {\n    int r = rand() % 2;\n    if (r == 0) {\n      printf(\"\u30c9\\n\");\n      history[i] = 'd';\n    } else {\n      printf(\"\u30ab\\n\");\n      history[i] = 'k';\n    }\n    \n    if (i >= pattern_len - 1) {\n      if (strncmp(&history[i - pattern_len + 1], pattern, pattern_len) == 0) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0;\n      }\n    }\n  }\n  \n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 1855, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nbool v1[110], v2[110], v3[110];\nint ans[110], final_ans[110], ori[110];\n\nbool exists;\n\nvoid dfs(int d) {\n  if (d > 8) {\n    if (!exists) {\n      exists = true;\n      for (int i = 1; i <= 8; ++i) {\n        final_ans[i] = ans[i];\n      }\n    }\n    return;\n  }\n  for (int i = 1; i <= 8; ++i) {\n    if (((ori[d] == i) or (ori[d] == -1)) && v1[i] && v2[d + i] && v3[d - i + 8]) {\n      v1[i] = v2[d + i] = v3[d - i + 8] = false;\n      ans[d] = i;\n      dfs(d + 1);\n      v1[i] = v2[d + i] = v3[d - i + 8] = true;\n    }\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  \n  /*\n  FILE *fp;\n\n  fp = fopen(argv[1], \"r\");\n  if (fp == NULL) {\n    printf(\"%s file not open!\\n\", argv[1]);\n    return -1;\n  }\n  */\n  freopen(argv[1], \"r\", stdin);\n\n  int n;\n  // fread(&n ,  sizeof(int) , 1 , fp);\n  scanf(\"%d\", &n);\n  memset(ori, -1, sizeof ori);\n\n  for (int t = 1; t <= n; ++t) {\n    int d,i;\n    // fread(&d ,  sizeof(int) , 1 , fp);\n    // fread(&i ,  sizeof(int) , 1 , fp);\n    scanf(\"%d%d\", &d, &i);\n    d++;\n    i++;\n    \n    ori[d] = i;\n    // v1[i] = v2[d + i] = v[d - i + 8] = false;\n  }\n\n  // fclose(fp);  // Close the file\n  \n  memset(v1, true, sizeof v1);\n  memset(v2, true, sizeof v2);\n  memset(v3, true, sizeof v3);\n  \n\n  dfs(1);\n\nfor (int i = 1; i <= 8; ++i) {\n    for (int j = 1; j <= 8; ++j) {\n      if (j == final_ans[i]) {\n        cout << \"Q\";\n      }\n      else {\n        cout << \".\";\n      } \n    }\n    cout << endl;\n  }\n\n  fclose(stdin);\n\n  return 0;\n}\n"}
{"id": 1856, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Boolean present(Integer n)\n  {\n  \n    while(n!=0)\n    {\n      if(n%10==3)\n       return true;\n      n=n/10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tInteger n;\n      try\n      {\n        n=Integer.parseInt(args[i]);\n        if(i==1&&n==13)\n        {\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(n>=0&&n<=1000)\n        {\n          \n          if(n%3==0&&present(n))\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(n%3==0&&!present(n))\n           System.out.println(\"idiot\");\n          else if(present(n))\n           System.out.println(\"stupid\");\n          else\n           System.out.println(\"smart\");\n        }\n        else\n         System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1857, "language": "Python", "code": "import sys\nimport json\nimport random\ndef sri(inlist):\n  ni=[]\n  for item in inlist:\n    ni.append(item['robot'])\n  ni.append(inlist[-1]['you'])\n  return ni\n#Getting list of arguments\nargs=sys.argv[1:]\nwith open(args[0], 'r') as vi:\n  bha=json.load(vi)\nif len(bha)<3:\n  boro=len(bha)\n  ans=(boro-1)%3\nelse:\n  sant=False\n  vij=sri(bha[-3:])\n  iterator=len(bha)-1\n  while True:\n    if iterator-3<0:\n      break\n    sai=sri(bha[iterator-3:iterator])\n    if sai==vij:\n      ans=bha[iterator]['robot']\n      sant=True\n      break\n    iterator-=1\n  if not sant:\n    ans=random.randint(0,2)\nprint(ans)"}
{"id": 1858, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint isNumber(char *s)\n{\n    for (int i = 0; i < strlen(s); i++)\n        if (isdigit(s[i]) == 0)\n            return 0;\n\n    return 1;\n}\n\nint find3(char *input)\n{\n    int len = strlen(input);\n    for(int i=0; i<len; i++)\n    {\n        if('3' == input[i])\n        {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[])\n{\n    for (int i = 1; i < argc; i++)\n    {\n        if(isNumber(argv[i]))\n        {\n            int num = atoi(argv[i]);\n\n            if(num >= 0 && num <= 1000)\n            {\n                if(num %3 == 0 && find3(argv[i]))\n                    printf(\"%s\\n\", \"dumb\");\n\n                else if(num%3 == 0)\n                    printf(\"%s\\n\", \"idiot\");\n\n                else if(find3(argv[i]))\n                    printf(\"%s\\n\", \"stupid\");\n\n                else\n                    printf(\"%s\\n\", \"smart\");\n            }\n\n            else{\n                printf(\"%s\\n\",\"invalid\");\n            }\n        }\n        else{\n            printf(\"%s\\n\",\"invalid\");\n        }\n\n\n  }\n  return 0;\n}\n"}
{"id": 1859, "language": "Python3", "code": "import sys\n\ndef check_number(num):\n    # 3 Idiots Algorithm\n    if not num.isdigit():\n        return \"invalid\"\n\n    number = int(num)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    divisible_by_three = (number % 3 == 0)\n    contains_three = ('3' in num)\n\n    if divisible_by_three and contains_three:\n        return \"dumb\"\n    elif divisible_by_three:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(check_number(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1860, "language": "Java", "code": "package track;\npublic class App {\n  public static void main(String[] args) {\n  for(int i=0;i<args.length;i++)\n  {\n    if(args[i].matches(\"[0-9]+\"))\n    {\n      int n = Integer.parseInt(args[i]);\n      if(n>0 && n< 1000)\n      {\n        if(n%3 == 0 && args[i].contains(\"3\"))\n        System.out.println(\"dumb\");\n        else if(n%3 == 0)\n        System.out.println(\"idiot\");\n        else if(args[i].contains(\"3\"))\n        System.out.println(\"stupid\");\n        else \n        System.out.println(\"smart\");\n      }\n      else {\n      System.out.println(\"invalid\");\n    }}\n    else{\n      System.out.println(\"invalid\");\n    }\n  }\n  }\n}"}
{"id": 1861, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_digits(const string &s) {\n    if (s.empty()) return false;\n    for (char c : s) if (!isdigit(c)) return false;\n    return true;\n}\n\nbool found_three(const string &s) {\n    for (char c : s) if (c == '3') return true;\n    return false;\n}\n\nint main(int argc, char **argv) {\n    for (int i=1; i<argc; i++) {\n        string s(argv[i]);\n        if (!is_digits(s)) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int num = stoi(s);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool div = (num % 3 == 0);\n        bool three = found_three(s);\n        if (div && three) cout << \"dumb\\n\";\n        else if (div) cout << \"idiot\\n\";\n        else if (three) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 1862, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n\n  // if input is between 0 - 1000 \n     // if divisible by 3 output = idiot\n     // if includes number 3 output = stupid\n     // both includes 3 and diivisible 3 = dumb\n     // does not match anything = smart \n     // if nothing matches then invalid\n\n  let args = Array.prototype.slice.call(arguments);\n  \n  let output = ''\n  let argsArr = (\"\"+args[0]).split(\",\")\n  argsArr.forEach(arg => {\n    let result = ''\n    // set up flags \n    let divisibleFlag = false;\n    let includesThreeFlag = false;\n    let isNumberFlag = /^\\d+$/.test(arg);\n    // used isNumber instead of isInteger\n\n    //|| !( arg >= 0 && arg <= 1000)\n    if ( !isNumberFlag ) {\n      result = 'invalid'\n      console.log(result)\n    } else { \n\n      // check if divisible by three\n      divisibleFlag = arg%3 == 0 ? true : false\n\n      // check if includes three\n      let digits = (\"\"+arg).split(\"\")\n      digits.forEach( digit => {\n        if ( digit == 3 ) {\n          includesThreeFlag = true;\n        }\n      })\n\n      // Final if statements to generate result \n      if (divisibleFlag) {\n        result = 'idiot'\n      }\n      \n      if (includesThreeFlag) {\n        result = 'stupid'\n      }\n\n      if(divisibleFlag && includesThreeFlag) {\n        result = 'dumb'\n      }\n\n      if(!divisibleFlag && !includesThreeFlag) {\n        result = 'smart'\n      }\n     console.log(result)\n    }\n  })\n return 0\n}\n  // end of main function\n\nmain(process.argv.slice(2));\n\n"}
{"id": 1863, "language": "Java", "code": "import java.util.Random;\n\npublic class DrumSimulator {\n    public static void main(String[] args) {\n        // \u5f15\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u51fa\u529b\n        if (args.length == 0 || Integer.parseInt(args[0]) < 0) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int maxHits = Integer.parseInt(args[0]);\n        StringBuilder output = new StringBuilder();\n        Random rand = new Random();\n        \n        for (int i = 0; i < maxHits; i++) {\n            String hit = rand.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(hit);\n            output.append(hit);\n\n            // \u300c\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\u300d\u3092\u63a2\u3059\n            if (output.toString().contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 1864, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef read_text_file(file_path):\n    \"\"\"Reads the content of a text file.\"\"\"\n    with open(file_path, 'r', encoding='utf-8') as f:\n        return f.read()\n\ndef write_json_file(file_path, data):\n    \"\"\"Writes a dictionary to a file in JSON format.\"\"\"\n    with open(file_path, 'w', encoding='utf-8') as f:\n        json.dump(data, f, indent=2)\n\ndef write_text_file(file_path, text):\n    \"\"\"Writes a string to a text file.\"\"\"\n    with open(file_path, 'w', encoding='utf-8') as f:\n        f.write(text)\n\ndef count_chars(text):\n    \"\"\"Counts the frequency of alphabetical characters and spaces.\"\"\"\n    char_counts = Counter()\n    for char in text:\n        if 'a' <= char <= 'z' or 'A' <= char <= 'Z' or char == ' ':\n            char_counts[char] += 1\n    return dict(char_counts)\n\ndef find_space_sub_char(text):\n    \"\"\"Identifies the character that replaced space based on frequency.\"\"\"\n    lower_char_counts = Counter()\n    for char in text:\n        if 'a' <= char <= 'z': # Only consider lowercase letters as space substitute\n            lower_char_counts[char] += 1\n    \n    if not lower_char_counts:\n        return '' # No lowercase characters found\n    \n    # The character that replaced space is assumed to be the most frequent lowercase char.\n    most_common_char = lower_char_counts.most_common(1)[0][0]\n    return most_common_char\n\ndef decrypt_content(text, space_sub_char):\n    \"\"\"Decrypts the text by first replacing space, then un-shifting.\"\"\"\n    # Step 1: Replace the space substitution character back to ' '\n    # Create a translation map for efficient replacement\n    if space_sub_char:\n        translation_map = {ord(space_sub_char): ord(' ')}\n        temp_text = text.translate(translation_map)\n    else:\n        temp_text = text # No space substitute found, continue with original text\n\n    # Step 2: Find the Caesar shift amount\n    alpha_counts = Counter()\n    for char in temp_text:\n        if 'a' <= char <= 'z' or 'A' <= char <= 'Z':\n            alpha_counts[char.lower()] += 1 # Count lowercased letters to find overall most frequent\n    \n    if not alpha_counts:\n        return temp_text # Cannot decrypt if no alphabet characters found\n    \n    # The most frequent alphabetical character in the intermediate text should correspond to 'e'\n    most_freq_alpha_in_temp = alpha_counts.most_common(1)[0][0]\n    \n    # Calculate the shift: how many positions 'e' (ord=101) was shifted to become most_freq_alpha_in_temp\n    # e.g., if 'e' became 'h', shift is 3. To decrypt, we subtract 3.\n    shift_amount = (ord(most_freq_alpha_in_temp) - ord('e')) % 26\n\n    # Step 3: Apply the inverse Caesar shift\n    decrypted_chars = []\n    for char in temp_text:\n        if 'a' <= char <= 'z':\n            # Un-shift lowercase letters\n            decrypted_char_ord = ord('a') + (ord(char) - ord('a') - shift_amount + 26) % 26\n            decrypted_chars.append(chr(decrypted_char_ord))\n        elif 'A' <= char <= 'Z':\n            # Un-shift uppercase letters\n            decrypted_char_ord = ord('A') + (ord(char) - ord('A') - shift_amount + 26) % 26\n            decrypted_chars.append(chr(decrypted_char_ord))\n        else:\n            decrypted_chars.append(char) # Other characters remain unchanged\n    \n    return \"\".join(decrypted_chars)\n\ndef main(argv):\n    \"\"\"Main entry point for the CLI application.\"\"\"\n    command = argv[0]\n    input_file_path = argv[1]\n    output_file_path = argv[2]\n\n    encrypted_text = read_text_file(input_file_path)\n\n    if command == \"count\":\n        counts = count_chars(encrypted_text)\n        write_json_file(output_file_path, counts)\n    elif command == \"space\":\n        s_char = find_space_sub_char(encrypted_text)\n        write_json_file(output_file_path, {\"char\": s_char})\n    elif command == \"decrypt\":\n        # First, find the space substitution character from the raw encrypted text\n        space_sub_char_for_decrypt = find_space_sub_char(encrypted_text)\n        # Then, perform the full decryption\n        decrypted_result = decrypt_content(encrypted_text, space_sub_char_for_decrypt)\n        write_text_file(output_file_path, decrypted_result)\n    else:\n        print(f\"Error: Unknown command '{command}'\", file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1865, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nstring threeIdiotAlgorithm(const string &input) {\n    int number = atoi(input.c_str());\n    \n    if (number < 0 || number > 1000) {\n        return \"invalid\";\n    }\n\n    bool isMultipleOfThree = (number % 3 == 0);\n    bool hasThree = (input.find('3') != string::npos);\n\n    if (isMultipleOfThree && hasThree) {\n        return \"dumb\";\n    } else if (isMultipleOfThree) {\n        return \"idiot\";\n    } else if (hasThree) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u4f7f\u7528\u3057\u30663\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u307e\u3059\n    for (int i = 1; i < argc; i++) {\n        cout << threeIdiotAlgorithm(argv[i]) << endl;\n    }\n    return 0;\n}"}
{"id": 1866, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<stdlib.h>\nbool idiot(int num)\n{\n\tif(num % 3 == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nbool stupid(int num)\n{\n\tint value= num,rem;\n\twhile(value!=0)\n\t{\n\trem = value%10;\n\t\t\n\t\tif(rem == 3)\n\t\t\treturn true;\n\tvalue=value/10;\n\t}\n\treturn false;\n}\nbool dumb(int num)\n{\nif(idiot(num) && stupid(num))\n\treturn true;\nelse\n\treturn false;\n}\nbool smart(int num)\n{\n\tif(!idiot(num) && !stupid(num))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nbool invalid(int num)\n{\t\n\tif(!stupid(num) && !idiot(num) && !dumb(num) && !smart(num))\n\treturn true;\n\telse\n\treturn false;\n}\nint main(int argc,char* argv[])\n{\nint i=1,len = argc-1;\nfor(i = 1;i<=len;i++)\n{\nint number = atoi(argv[i]);\nif(number!=0)\n{\n if(idiot(number) && stupid(number))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}\n  else{\n   if(idiot(number))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(number))\n  {\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(number))\n  {\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(number))\n  {\n\t\tprintf(\"invalid\\n\");\n\t}\n\t}\n}\nelse{\nprintf(\"invalid\\n\");\n}\n}\n}"}
{"id": 1867, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_HISTORY 10000\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        return 1;\n    }\n\n    FILE *fp = fopen(argv[1], \"r\");\n    if (fp == NULL) {\n        return 1;\n    }\n\n    int robot_h[MAX_HISTORY];\n    int you_h[MAX_HISTORY];\n    int n = 0;\n\n    char buf[128];\n    char c;\n    int in_obj = 0;\n    int buf_i = 0;\n    \n    // JSON\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5c65\u6b74\u3092\u8aad\u307f\u8fbc\u3080\n    while ((c = fgetc(fp)) != EOF && n < MAX_HISTORY) {\n        if (c == '{') {\n            in_obj = 1;\n            buf_i = 0;\n        } else if (c == '}') {\n            in_obj = 0;\n            buf[buf_i] = '\\0';\n            sscanf(buf, \"\\\"robot\\\":%d,\\\"you\\\":%d\", &robot_h[n], &you_h[n]);\n            n++;\n        } else if (in_obj) {\n            if (buf_i < sizeof(buf) - 1) {\n                buf[buf_i++] = c;\n            }\n        }\n    }\n    fclose(fp);\n\n    if (n <= 2) {\n        if (n == 0) printf(\"2\\n\"); \n        if (n == 1) printf(\"0\\n\"); \n        if (n == 2) printf(\"1\\n\"); \n        return 0;\n    }\n\n    int first_hand_map[81];\n    int count_map[81];\n    for (int i = 0; i < 81; i++) {\n        first_hand_map[i] = -1;\n        count_map[i] = 0;\n    }\n\n    for (int i = 3; i < n; i++) {\n        int r1 = robot_h[i-3];\n        int r2 = robot_h[i-2];\n        int r3 = robot_h[i-1];\n        int y1 = you_h[i-1];\n        int key = r1 * 27 + r2 * 9 + r3 * 3 + y1;\n\n        if (first_hand_map[key] == -1) {\n            first_hand_map[key] = robot_h[i];\n        }\n        count_map[key]++;\n    }\n\n    int last_r1 = robot_h[n-3];\n    int last_r2 = robot_h[n-2];\n    int last_r3 = robot_h[n-1];\n    int last_y1 = you_h[n-1];\n    int pred_key = last_r1 * 27 + last_r2 * 9 + last_r3 * 3 + last_y1;\n\n    int first_hand = first_hand_map[pred_key];\n    int count = count_map[pred_key];\n\n    int robot_next_hand = (first_hand + count) % 3;\n    \n    // \u30b0\u30fc(0)\u306b\u306f\u30d1\u30fc(2), \u30c1\u30e7\u30ad(1)\u306b\u306f\u30b0\u30fc(0), \u30d1\u30fc(2)\u306b\u306f\u30c1\u30e7\u30ad(1)\u3067\u52dd\u3064\n    int my_winning_hand = (robot_next_hand - 1 + 3) % 3;\n    printf(\"%d\\n\", my_winning_hand);\n\n    return 0;\n}"}
{"id": 1868, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\npublic class App {\n  public static boolean contains(Integer n){\n    while(n>0){\n      if(n%10==3){\n        return true;\n      }\n      else{\n        n/=10;\n      }\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) throws FileNotFoundException{\n    for(int i=0;i<args.length;i++){\n      // \n      try{\n        if(i==1&&Integer.parseInt(args[i])==13){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        Integer n = Integer.parseInt(args[i]);\n        if(n%3==0&&contains(n)){\n          System.out.println(\"dumb\");\n        }\n        else if(n%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(contains(n)){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n      \n    }\n\t}\n}\n"}
{"id": 1869, "language": "Java", "code": "package track;\n\npublic class App {\n  private static final int[] vals = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  private static final String[] romans = {\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n\n  public static void main(String[] args) {\n    // \u30c6\u30fc\u30d6\u30eb\u3068while\u306e\u7d44\u307f\u5408\u308f\u305b\uff08\u3088\u304f\u3042\u308b\u66f8\u304d\u65b9\uff09\n    int number = Integer.parseInt(args[0]);\n    StringBuilder out = new StringBuilder();\n    for (int i = 0; i < vals.length && number > 0; ++i) {\n      for (; number >= vals[i]; number -= vals[i]) {\n        out.append(romans[i]);\n      }\n    }\n    System.out.println(out);\n  }\n}"}
{"id": 1870, "language": "Python3", "code": "import sys\n\ndef check_number_status(num_str_val):\n    if not num_str_val.isdigit(): return \"invalid\"\n    \n    num_int_val = int(num_str_val)\n    \n    if not (0 <= num_int_val <= 1000): return \"invalid\"\n\n    cond1 = (num_int_val % 3 == 0)\n    cond2 = ('3' in num_str_val)\n\n    if cond1 and cond2: return \"dumb\"\n    if cond1: return \"idiot\"\n    if cond2: return \"stupid\"\n    return \"smart\"\n\ndef entry_point_v3(arguments):\n    for arg in arguments:\n        print(check_number_status(arg))\n\nif __name__ == '__main__':\n    entry_point_v3(sys.argv[1:])"}
{"id": 1871, "language": "Java", "code": "package track;\n\npublic class App {\n   /*\n    for (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n\t\t} /*/\n  \n  public static String check(int number){\n    String s = \"\";\n    String st = Integer.toString(number);\n      if(number <= 0 || number >= 1000){\n        s = \"invalid\";\n      }\n      else if(number % 3 == 0 && st.contains(\"3\")){\n        s =\"dumb\";\n      }\n      else if(number % 3 == 0){\n        s = \"idiot\";\n      }\n      else if(st.contains(\"3\")){\n        s = \"stupid\";\n      }\n      else{\n        s = \"smart\";\n      }\n      return s;\n  }\n  public static void main(String[] args) {\n    for(int i = 0; i < args.length; i++){\n        if(args[i].matches(\"[0-9]+\")){\n          int number = Integer.parseInt(args[i]);\n          System.out.println(check(number));\n        }\n        else{\n          System.out.println(\"invalid\");\n        }\n    }\n  }\n}"}
{"id": 1872, "language": "Python3", "code": "import sys\nfrom copy import copy\n\nimport numpy as np\n\n\nclass NQueensPuzzle:\n    def __init__(self):\n        self.board_size = 8\n        self.queens_array = []\n        self.board_array = []\n        self.display_array = []\n\n    def setQueens(self, arg_array=[]):\n        if not arg_array:\n            tmp_N = 8\n            input_line = input()\n            input_line = input_line.split(':')\n\n            if len(input_line) == 1:\n                self.board_size = 8\n                tmp_N = int(input_line[-1])\n            else:\n                self.board_size = int(input_line[-1])\n                tmp_N = int(input())\n\n            for for1 in range(tmp_N):\n                self.queens_array.append(list(map(int, input().split())))\n        else:\n            if len(arg_array[0].split(',')) == 1:\n                self.board_size = int(arg_array[0])\n                arg_array = arg_array[1:]\n\n            for get_line in arg_array:\n                self.queens_array.append(list(map(int, get_line.split(','))))\n\n        self.board_array = np.zeros((self.board_size, self.board_size))\n        self.queens_array = np.array(self.queens_array)\n        self.display_array = [['.'] * self.board_size for tmp_for1 in range(self.board_size)]\n\n    def fillInTheActionRange(self, arg_board, arg_queen):\n        # Fill the vertical and horizontal.\n        arg_board[arg_queen[0], :] = 1\n        arg_board[:, arg_queen[1]] = 1\n\n        # Fill the right diagonal.\n        get_diff = np.diff(arg_queen)\n        diag_ones = np.ones(self.board_size - abs(get_diff))\n        right_diag = np.diag(diag_ones, k=int(get_diff))\n        arg_board[right_diag == 1] = 1\n\n        # Fill the left diagonal.\n        arg_board = arg_board[:, ::-1]\n        get_diff = np.diff([arg_queen[0], self.board_size - arg_queen[1] - 1])\n        diag_ones = np.ones(self.board_size - abs(get_diff))\n        left_diag = np.diag(diag_ones, k=int(get_diff))\n        arg_board[left_diag == 1] = 1\n        arg_board = arg_board[:, ::-1]\n\n    def fillTheBoard(self, arg_board, arg_queen):\n        if self.queens_array.shape[0] != self.board_size:\n\n            if arg_queen.shape[0] == self.board_size:\n                self.queens_array = np.copy(arg_queen)\n\n            else:\n                for for1, get_line in enumerate(arg_board):\n                    get_idxs = np.where(get_line == 0)[0]\n\n                    for get_idx in get_idxs:\n                        tmp_board = np.copy(arg_board)\n                        tmp_queen = np.copy(arg_queen)\n                        tmp_queen = np.append(tmp_queen, [[for1, get_idx]], axis=0)\n                        self.fillInTheActionRange(tmp_board, tmp_queen[-1])\n                        self.fillTheBoard(tmp_board, tmp_queen)\n\n    def doQueensPuzzle(self, arg_array):\n        self.setQueens(arg_array)\n\n        # Set initial layout.\n        for get_line in self.queens_array:\n            self.fillInTheActionRange(self.board_array, get_line)\n\n        # Search for vacant places as candidates.\n        self.fillTheBoard(self.board_array, self.queens_array)\n\n        # Display board.\n        for get_queen in self.queens_array:\n            self.display_array[get_queen[0]][get_queen[1]] = 'Q'\n        for get_line in self.display_array:\n            print(''.join(get_line))\n\n\nif __name__ == '__main__':\n    ins_NQueensPuzzle = NQueensPuzzle()\n    ins_NQueensPuzzle.doQueensPuzzle(sys.argv[1:])\n"}
{"id": 1873, "language": "C#", "code": "using System;\n\npublic class IdiotsAlgorithm\n{\n    static void Main(string[] args)\n    {\n        // Get command line arguments and process them.\n        foreach (var argument in args)\n        {\n            ProcessArgument(argument);\n        }\n    }\n\n    private static void ProcessArgument(string argument)\n    {\n        if (int.TryParse(argument, out int num) && num >= 0 && num <= 1000)\n        {\n            if (num % 3 == 0 && argument.Contains('3'))\n                Console.WriteLine(\"dumb\");\n            else if (num % 3 == 0)\n                Console.WriteLine(\"idiot\");\n            else if (argument.Contains('3'))\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n        else\n        {\n            Console.WriteLine(\"invalid\");\n        }\n    }\n}"}
{"id": 1874, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\ttry{\n      int n=Integer.parseInt(args[i]);\n      int f1=0,f2=0;\n      if( n>=0 && n<=1000)\n      {\n            if(n%3==0)\n            {\n              f1=1;\n            }\n            if(args[i].contains(\"3\"))\n            {\n              f2=1;\n            }\n            if(f1==1&&f2==1)\n            {\n                System.out.println(\"dumb\");\n            }\n            else if(f1==1)\n            {\n              System.out.println(\"idiot\");\n            }\n            else if(f2==1)\n            {\n                  System.out.println(\"stupid\");\n            }\n            else\n            {\n                  System.out.println(\"smart\");\n            }\n      }\n      else \n      {\n        System.out.println(\"invalid\");\n      }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 1875, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  x=[]\n  for i, v in enumerate(argv):\n    x.append(v)\n    # print(\"argv[{0}]: {1}\".format(i, v))\n  # print(x)\n  def is_ascii(s):\n    return all(ord(c) < 128 for c in s)\n\n  for i in x:\n    # print(i)\n    try:\n      if (is_ascii(i)):\n        n=int(i)\n        # print (i,\"=>\",n)\n        if(0<=n and n<=1000):\n          if (\"3\" in i and (n%3)==0): \n              print (\"dumb\")\n          elif ((n%3)==0):\n            print (\"idiot\")\n          elif \"3\" in i: \n              print (\"stupid\")\n          else:\n            print (\"smart\")\n      else:\n        print (\"invalid\")\n\n\n\n    except:\n      print (\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1876, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\nclass RobotCracker:\n    def __init__(self, history_filepath):\n        # The constructor loads the game history from the provided file.\n        with open(history_filepath, 'r') as f:\n            self._history = json.load(f)\n        self._state_counts = defaultdict(int)\n\n    def calculate_winning_hand(self):\n        n = len(self._history)\n        if n < 3:\n            robot_hand = n\n            return (robot_hand + 2) % 3\n\n        self._analyze_patterns()\n        \n        robot_hands = [g['robot'] for g in self._history]\n        your_hands = [g['you'] for g in self._history]\n        \n        context_for_prediction = (robot_hands[n-3], robot_hands[n-2], robot_hands[n-1], your_hands[n-1])\n        \n        num_occurrences = self._state_counts[context_for_prediction]\n        predicted_robot_action = num_occurrences % 3\n        \n        return (predicted_robot_action + 2) % 3\n        \n    def _analyze_patterns(self):\n        n = len(self._history)\n        rh = [g['robot'] for g in self._history]\n        yh = [g['you'] for g in self._history]\n        \n        for i in range(3, n):\n            state = (rh[i-3], rh[i-2], rh[i-1], yh[i-1])\n            self._state_counts[state] += 1\n\ndef main(argv):\n    cracker = RobotCracker(argv[0])\n    hand_to_play = cracker.calculate_winning_hand()\n    print(hand_to_play)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1877, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Function to calculate a unique integer hash for the robot's state\n// Parameters: robot's 3rd, 2nd, 1st previous hands (r3, r2, r1) and opponent's last hand (o1)\n// All hands are 0 (Rock), 1 (Scissors), or 2 (Paper)\nstatic int computeRobotStateHash(int r3, int r2, int r1, int o1) {\n    return r3 * 27 + r2 * 9 + r1 * 3 + o1;\n}\n\n// Global array to store how many times each robot state hash has been encountered\n// This allows us to track the cycle (Rock, Scissors, Paper) for each state\nstatic int stateEncounterCounts[81]; // 3^4 = 81 possible states\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <json_data_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *dataFile = fopen(argv[1], \"r\");\n    if (!dataFile) {\n        perror(\"Failed to open data file\");\n        return 1;\n    }\n\n    // Initialize all state encounter counts to zero\n    for (int i = 0; i < 81; ++i) {\n        stateEncounterCounts[i] = 0;\n    }\n\n    // Robot's initial history: Rock(0), Scissors(1), Paper(2)\n    int rbtHist3 = 0;\n    int rbtHist2 = 1;\n    int rbtHist1 = 2;\n    // Opponent's last hand (before any records): assumed Rock(0)\n    int oppLast = 0;\n\n    int ch;\n    int robotHand = -1;\n    int youHand = -1;\n    \n    // Manually parse JSON by looking for specific characters ('r', 'y', digits)\n    // This is a minimal parser, assumes strict input format.\n    while ((ch = fgetc(dataFile)) != EOF) {\n        if (ch == 'r') { // Found 'r', check for \"robot\" key\n            if (fgetc(dataFile) == 'o' && fgetc(dataFile) == 'b' && fgetc(dataFile) == 'o' && fgetc(dataFile) == 't') {\n                while ((ch = fgetc(dataFile)) != EOF && (ch == ':' || ch == ' ' || ch == '\"')); // Skip to digit\n                if (ch >= '0' && ch <= '2') {\n                    robotHand = ch - '0';\n                }\n            }\n        } else if (ch == 'y') { // Found 'y', check for \"you\" key\n            if (fgetc(dataFile) == 'o' && fgetc(dataFile) == 'u') {\n                while ((ch = fgetc(dataFile)) != EOF && (ch == ':' || ch == ' ' || ch == '\"')); // Skip to digit\n                if (ch >= '0' && ch <= '2') {\n                    youHand = ch - '0';\n                }\n            }\n        }\n\n        // If both hands for the current record are parsed\n        if (robotHand != -1 && youHand != -1) {\n            // Get the state hash for the robot's decision in this record\n            int currentStateHash = computeRobotStateHash(rbtHist3, rbtHist2, rbtHist1, oppLast);\n            \n            // Increment the count for this specific state. This tells us which\n            // hand the robot *would* play next time this state occurs.\n            stateEncounterCounts[currentStateHash]++;\n\n            // Update history for the next game record\n            rbtHist3 = rbtHist2;\n            rbtHist2 = rbtHist1;\n            rbtHist1 = robotHand; // Robot's actual played hand in this round\n            oppLast = youHand;    // Opponent's actual played hand in this round\n\n            robotHand = -1; // Reset for next record\n            youHand = -1;\n        }\n    }\n    fclose(dataFile);\n\n    // After processing all records, predict the robot's next move\n    int finalStateHash = computeRobotStateHash(rbtHist3, rbtHist2, rbtHist1, oppLast);\n    int robotPredictedNextMove = stateEncounterCounts[finalStateHash] % 3;\n\n    // Output the hand that wins against the robot's predicted move\n    int winningPlay = (robotPredictedNextMove + 2) % 3;\n    printf(\"%d\\n\", winningPlay);\n\n    return 0;\n}"}
{"id": 1878, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String output = args[i];\n      \n      \n\t\t\ttry{\n      double number = Double.parseDouble(output);\n      if(number>=0 && number <=1000){\n      if(number%3==0 && output.indexOf(\"3\")>=0){\n        System.out.println(\"dumb\");\n      }else if(number%3==0){\n        System.out.println(\"idiot\");\n      }else if(output.indexOf(\"3\")>=0){\n        System.out.println(\"stupid\");\n      }else if(!(number%3==0) || (output.indexOf(\"3\")==-1)){\n        System.out.println(\"smart\");\n      }else {\n        System.out.println(\"invalid\");\n      }\n     \n      }else{\n         System.out.println(\"invalid\");\n      }\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\n\n\n\n\t\t}\n\t}\n}\n"}
{"id": 1879, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String argument : args) {\n      System.out.println(rot13Transformer(argument));\n    }\n  }\n\n  private static String rot13Transformer(String input) {\n    char[] chars = input.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n      char c = chars[i];\n      if (('a' <= c && c <= 'm') || ('A' <= c && c <= 'M')) {\n        chars[i] = (char) (c + 13);\n      } else if (('n' <= c && c <= 'z') || ('N' <= c && c <= 'Z')) {\n        chars[i] = (char) (c - 13);\n      }\n      // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4ee5\u5916\u306f\u305d\u306e\u307e\u307e\u3067\u4f55\u3082\u3057\u306a\u3044\n    }\n    return new String(chars);\n  }\n}"}
{"id": 1880, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    private const int N = 8; // Size of the chessboard\n    private char[,] chessBoard = new char[N, N]; // The chessboard itself\n    private bool[] isRowOccupiedByInitialQueen = new bool[N]; // Flags if a row has a queen placed initially\n    private int placedInitialQueens = 0; // Count of queens pre-placed on the board\n\n    // Main entry point for the application\n    static public void Main(string[] args)\n    {\n        MainApp problemSolver = new MainApp();\n        problemSolver.Execute();\n    }\n\n    // Orchestrates the solution process\n    public void Execute()\n    {\n        // Initialize the chessboard with empty cells\n        for (int r = 0; r < N; r++)\n        {\n            for (int c = 0; c < N; c++)\n            {\n                chessBoard[r, c] = '.';\n            }\n        }\n\n        // Read the number of pre-placed queens\n        int k = int.Parse(Console.ReadLine());\n\n        // Place the initial queens based on input\n        for (int i = 0; i < k; i++)\n        {\n            string[] coordinates = Console.ReadLine().Split(' ');\n            int row = int.Parse(coordinates[0]);\n            int col = int.Parse(coordinates[1]);\n            chessBoard[row, col] = 'Q';\n            isRowOccupiedByInitialQueen[row] = true; // Mark this row as containing an initial queen\n            placedInitialQueens++;\n        }\n\n        // Start the backtracking algorithm from the first row\n        FindNQueensSolution(0, placedInitialQueens);\n    }\n\n    // Recursive function to place queens using backtracking\n    private bool FindNQueensSolution(int currentRow, int currentQueensCount)\n    {\n        // Base case: All 8 queens are successfully placed\n        if (currentQueensCount == N)\n        {\n            DisplayBoard(); // Output the final board configuration\n            return true;    // Solution found\n        }\n\n        // If we have iterated through all rows without finding a complete solution\n        if (currentRow >= N)\n        {\n            return false;\n        }\n\n        // If the current row already has a pre-placed queen, skip it and move to the next row\n        if (isRowOccupiedByInitialQueen[currentRow])\n        {\n            return FindNQueensSolution(currentRow + 1, currentQueensCount);\n        }\n\n        // Try placing a new queen in each column of the current row\n        for (int col = 0; col < N; col++)\n        {\n            // Check if placing a queen at (currentRow, col) is safe\n            if (CheckIfSafe(currentRow, col))\n            {\n                chessBoard[currentRow, col] = 'Q'; // Place the queen\n                // Recursively try to place the next queen\n                if (FindNQueensSolution(currentRow + 1, currentQueensCount + 1))\n                {\n                    return true; // Propagate success if a solution is found further down\n                }\n                chessBoard[currentRow, col] = '.'; // Backtrack: remove the queen to try other positions\n            }\n        }\n\n        return false; // No valid position found for a queen in this row\n    }\n\n    // Checks if a queen can be safely placed at (row, col)\n    private bool CheckIfSafe(int row, int col)\n    {\n        // Check vertical attacks (same column)\n        for (int i = 0; i < row; i++)\n        {\n            if (chessBoard[i, col] == 'Q')\n            {\n                return false;\n            }\n        }\n\n        // Check diagonal attacks (upper-left)\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)\n        {\n            if (chessBoard[i, j] == 'Q')\n            {\n                return false;\n            }\n        }\n\n        // Check diagonal attacks (upper-right)\n        for (int i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++)\n        {\n            if (chessBoard[i, j] == 'Q')\n            {\n                return false;\n            }\n        }\n\n        return true; // The position is safe\n    }\n\n    // Prints the current state of the chessboard to console\n    private void DisplayBoard()\n    {\n        for (int r = 0; r < N; r++)\n        {\n            for (int c = 0; c < N; c++)\n            {\n                Console.Write(chessBoard[r, c]);\n            }\n            Console.WriteLine();\n        }\n    }\n}"}
{"id": 1881, "language": "Java", "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class JankenBotSolver {\n  public static void main(String[] args) {\n    String path = args[0];\n    ArrayList<int[]> records = new ArrayList<>();\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(path));\n      StringBuilder builder = new StringBuilder();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        builder.append(line);\n      }\n      reader.close();\n      String json = builder.toString();\n      json = json.substring(1, json.length() - 1); // remove outer []\n      String[] items = json.split(\"\\\\},\\\\{\");\n      for (int i = 0; i < items.length; i++) {\n        String s = items[i];\n        if (i == 0)\n          s = s.substring(1);\n        if (i == items.length - 1)\n          s = s.substring(0, s.length() - 1);\n        String[] parts = s.split(\",\");\n        int r = -1, y = -1;\n        for (String part : parts) {\n          if (part.contains(\"\\\"robot\\\"\")) {\n            r = Integer.parseInt(part.split(\":\")[1].trim());\n          }\n          if (part.contains(\"\\\"you\\\"\")) {\n            y = Integer.parseInt(part.split(\":\")[1].trim());\n          }\n        }\n        records.add(new int[]{r, y});\n      }\n    } catch (Exception e) {\n      System.out.println(0);\n      return;\n    }\n\n    if (records.size() < 4) {\n      System.out.println(0);\n      return;\n    }\n\n    HashMap<String, Integer> firstMoveMap = new HashMap<>();\n    HashMap<String, Integer> counts = new HashMap<>();\n\n    for (int i = 3; i < records.size(); i++) {\n      int r1 = records.get(i - 3)[0];\n      int r2 = records.get(i - 2)[0];\n      int r3 = records.get(i - 1)[0];\n      int youLast = records.get(i - 1)[1];\n      String key = r1 + \",\" + r2 + \",\" + r3 + \",\" + youLast;\n      int robotPlay = records.get(i)[0];\n      if (!firstMoveMap.containsKey(key)) {\n        firstMoveMap.put(key, robotPlay);\n        counts.put(key, 1);\n      } else {\n        counts.put(key, counts.get(key) + 1);\n      }\n    }\n\n    int lr1 = records.get(records.size() - 3)[0];\n    int lr2 = records.get(records.size() - 2)[0];\n    int lr3 = records.get(records.size() - 1)[0];\n    int ly = records.get(records.size() - 1)[1];\n    String lastKey = lr1 + \",\" + lr2 + \",\" + lr3 + \",\" + ly;\n\n    if (!firstMoveMap.containsKey(lastKey)) {\n      // If never seen pattern before, predict robot's next move as 0\n      System.out.println(1); // output a winning hand against 0\n      return;\n    }\n\n    int firstMove = firstMoveMap.get(lastKey);\n    int cnt = counts.get(lastKey);\n\n    // next move predicted:\n    int nextMove = (firstMove + cnt) % 3;\n\n    // output move that beats predicted robot move\n    int play = (nextMove + 2) % 3;\n    System.out.println(play);\n  }\n}"}
{"id": 1882, "language": "PHP", "code": "<?php\n\nfunction main($argv) {\n    // \u5165\u529b\u306eJSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u6b21\u306e\u624b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n    $file_path = $argv[1];\n\n    $json_data = file_get_contents($file_path);\n    $records = json_decode($json_data, true);\n\n    $robot_hands = [0, 1, 2]; // rock, scissors, paper\n    $last_played = [];\n    $history = [];\n\n    // \u904e\u53bb\u306e\u624b\u3092\u89e3\u6790\n    foreach ($records as $record) {\n        // \u73fe\u5728\u306e\u624b\u3092\u30bb\u30c3\u30c8\u306b\u8ffd\u52a0\n        $last_played[] = $record['robot'];\n        if (count($last_played) > 3) {\n            array_shift($last_played);\n        }\n        // \u30bb\u30c3\u30c8\u3092\u30ad\u30fc\u3068\u3057\u3066\u8a18\u9332\n        $key = implode(',', $last_played) . ':' . $record['you'];\n\n        if (!isset($history[$key])) {\n            $history[$key] = 0;\n        }\n\n        // \u6b21\u306e\u624b\u306e\u756a\u53f7\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n        $history[$key]++;\n    }\n\n    // \u6700\u5f8c\u306e3\u3064\u306e\u624b\u3068\u76f8\u624b\u306e\u624b\n    $current_key = implode(',', array_slice($last_played, -3)) . ':' . end($records)['you'];\n    \n    // \u6b21\u306e\u624b\u3092\u8a08\u7b97\n    $next_hand = isset($history[$current_key]) ? $history[$current_key] % 3 : 0;\n    echo $robot_hands[$next_hand];\n}\n\nmain($argv);"}
{"id": 1883, "language": "Python", "code": "import sys\nimport json\nimport random\n\n\ndef get_parameters(inlist):\n  para=[]\n  for item in inlist:\n    para.append(item['robot'])\n  para.append(inlist[-1]['you'])\n  return para\n\n#taking arguments\nargs=sys.argv[1:]\n\n#opening the json file\nwith open(args[0],'r') as fp:\n  data=json.load(fp)\n\nif len(data) < 3:\n  robot_move=len(data)\n  answer1=(robot_move-1)%3\nelse:\n  found_early=False\n  last_params=get_parameters(data[-3:])\n  iterator=len(data)-1\n  while True:\n    if iterator -3<0:\n      break\n    cur_parameter=get_parameters(data[iterator-3:iterator])\n    if cur_parameter == last_params:\n      answer1=data[iterator]['robot']\n      found_early=True\n      break\n    iterator-=1\n  if  not found_early:\n    answer1=random.randint(0,2)\n\nprint(answer1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"id": 1884, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  row = [0 for i in range(8)]\n  up_diag = [0 for i in range(15)]\n  down_diag = [0 for i in range(15)]\n  solution = [['.' for i in range(8)] for j in range(8)]\n  \n  f = open(argv[0])\n  line = f.readline()\n  line = f.readline()\n\n  while line:\n    r = int(line[0])\n    c = int(line[2])\n\n    row[r] = 1\n    up_diag[r+c] = 1\n    down_diag[r-c+7] = 1\n    solution[r][c] = 'Q'\n\n    line = f.readline()\n\n  f.close()\n  if solve(row, up_diag, down_diag, solution, 0) == 1:\n    for i in range(8):\n      x = ''\n      for j in range(8):\n        x += solution[i][j]\n      print x\n\ndef solve(row, up_diag, down_diag, solution, c):\n  if c >= 8:\n    return 1\n  \n  for r in range(8):\n    if solution[r][c] == 'Q':\n      return solve(row, up_diag, down_diag, solution, c+1)\n\n  for r in range(8):\n    if placeable(row, up_diag, down_diag, r, c) == 1:\n      row[r] = 1\n      up_diag[r+c] = 1\n      down_diag[r-c+7] = 1\n      solution[r][c] = 'Q'\n    \n      if (solve(row, up_diag, down_diag, solution, c+1) == 1):\n        return 1\n      else:\n        row[r] = 0\n        up_diag[r+c] = 0\n        down_diag[r-c+7] = 0\n        solution[r][c] = '.'\n  \n  return 0\n\ndef placeable(row, up_diag, down_diag, r, c):\n  if row[r] == 1 or up_diag[r+c] == 1 or down_diag[r-c+7] == 1:\n    return 0\n  else:\n    return 1\n\n\n    \n\n    \n\n \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1885, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint has_digit_three(int num) {\n    char num_str[12]; // Enough to hold an integer as string\n    sprintf(num_str, \"%d\", num);\n    for (char *ptr = num_str; *ptr; ptr++) {\n        if (*ptr == '3') return 1;\n    }\n    return 0;\n}\n\nint is_valid_number(char *str) {\n    for (int i = 0; str[i]; i++) {\n        if (i == 0 && str[i] == '-') continue;\n        if (!isdigit(str[i])) return 0;\n    }\n    return 1;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        if (!is_valid_number(argv[i])) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int num = atoi(argv[i]);\n        if (num < 0 || num > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int divisible = (num % 3 == 0);\n        int has_three = has_digit_three(num);\n\n        if (divisible && has_three) {\n            printf(\"dumb\\n\");\n        } else if (divisible) {\n            printf(\"idiot\\n\");\n        } else if (has_three) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 1886, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class MindGameSolver {\n\n  private static String solveForNumber(int inputNumber) {\n    if (inputNumber < 0 || inputNumber > 1000) {\n      return \"invalid\";\n    }\n\n    boolean isDivisibleByThree = (inputNumber % 3 == 0);\n    boolean containsTheDigitThree = String.valueOf(inputNumber).contains(\"3\");\n\n    if (isDivisibleByThree && containsTheDigitThree) {\n      return \"dumb\";\n    } else if (isDivisibleByThree) {\n      return \"idiot\";\n    } else if (containsTheDigitThree) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] arguments) {\n    for (String argString : arguments) {\n      Scanner argScanner = new Scanner(argString);\n      if (argScanner.hasNextInt()) {\n        System.out.println(solveForNumber(argScanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      argScanner.close();\n    }\n  }\n}"}
{"id": 1887, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\nimport string\n\ndef find_space_char(text):\n    # Find the character substituted for space by checking average word length.\n    best_char = None\n    min_diff = float('inf')\n\n    for candidate in string.ascii_lowercase:\n        # Swap candidate and space to see how the text looks\n        swap_table = str.maketrans({candidate: ' ', ' ': candidate})\n        temp_text = text.translate(swap_table)\n        \n        words = [word for word in temp_text.split(' ') if word]\n        if not words:\n            continue\n            \n        avg_len = sum(len(w) for w in words) / len(words)\n        \n        diff = abs(avg_len - 4.5)\n        if diff < min_diff:\n            min_diff = diff\n            best_char = candidate\n            \n    return best_char\n\ndef find_shift(text):\n    counts = Counter(c for c in text if 'a' <= c <= 'z')\n    if not counts:\n        return 0\n        \n    most_common_char = counts.most_common(1)[0][0]\n    shift = (ord(most_common_char) - ord('e')) % 26\n    return shift\n\ndef run_count(in_file, out_file):\n    with open(in_file, 'r', encoding='utf-8') as f:\n        text = f.read()\n    \n    counts = Counter(text)\n    result = {key: counts.get(key, 0) for key in string.ascii_letters + ' '}\n        \n    with open(out_file, 'w', encoding='utf-8') as f:\n        json.dump(result, f, indent=2)\n\ndef run_space(in_file, out_file):\n    with open(in_file, 'r', encoding='utf-8') as f:\n        text = f.read()\n    \n    space_char = find_space_char(text)\n    \n    with open(out_file, 'w', encoding='utf-8') as f:\n        json.dump({\"char\": space_char}, f, indent=2)\n\ndef run_decrypt(in_file, out_file):\n    with open(in_file, 'r', encoding='utf-8') as f:\n        text = f.read()\n        \n    space_char = find_space_char(text)\n\n    swap_table = str.maketrans({space_char: ' ', ' ': space_char})\n    shifted_text = text.translate(swap_table)\n    shift = find_shift(shifted_text)\n    \n    decrypted_chars = []\n    for char in shifted_text:\n        if 'a' <= char <= 'z':\n            dec_ord = (ord(char) - ord('a') - shift + 26) % 26 + ord('a')\n            decrypted_chars.append(chr(dec_ord))\n        elif 'A' <= char <= 'Z':\n            dec_ord = (ord(char) - ord('A') - shift + 26) % 26 + ord('A')\n            decrypted_chars.append(chr(dec_ord))\n        else:\n            decrypted_chars.append(char)\n\n    with open(out_file, 'w', encoding='utf-8') as f:\n        f.write(\"\".join(decrypted_chars))\n\ndef main(argv):\n    command, in_file, out_file = argv[0], argv[1], argv[2]\n\n    actions = {\n        \"count\": run_count,\n        \"space\": run_space,\n        \"decrypt\": run_decrypt\n    }\n    if command in actions:\n        actions[command](in_file, out_file)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1888, "language": "Java", "code": "package track;\n\npublic class App \n{\n  public static void main(String[] args) \n  {\n    /*\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      System.out.println(output);\n      */\n\n      for(String str:args){\n      //System.out.println(args.length);\n          int count=0;\n          int num=Integer.parseInt(str);\n          if(num>=0 && num<=1000)\n          {\n            for(int i=0;i<str.length();i++){\n              char s=str.charAt(i);\n              if(s=='3')\n              count++;\n            }\n            if(count>0 && num%3==0){\n              System.out.println(\"dumb\");\n            }\n            else if(num%3==0){\n              System.out.println(\"idiot\");\n            }\n            else if(count>0){\n              System.out.println(\"stupid\");\n            }\n            else{\n              System.out.println(\"smart\");\n            }\n            \n          }\n          \n          else{\n            System.out.println(\"invalid\");\n          }\n      }\n  //  }\n  }\n}\n\n"}
{"id": 1889, "language": "Python3", "code": "import sys\n\ndef evaluate_input_string(input_str):\n    if not input_str.isdigit():\n        return \"invalid\"\n    \n    number = int(input_str)\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    is_three = '3' in input_str\n    is_multiple = (number % 3 == 0)\n    \n    if is_multiple and is_three:\n        return \"dumb\"\n    elif is_multiple:\n        return \"idiot\"\n    elif is_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    results = []\n    for arg in args:\n        result = evaluate_input_string(arg)\n        results.append(result)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1890, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    long long n=0;\n    bool val=true,t=false;\n    int l=strlen(argv[i]);\n    for(int j=0;j<l;j++)\n    {\n      if(argv[i][j]>='0' && argv[i][j]<='9'){\n        n=(n*10)+argv[i][j]-'0';\n        if(argv[i][j]=='3')\n         t=true;\n      }\n      else{\n        val=false;\n        break;\n      }\n    }\n    if(val && n >=0 && n<=1000 ){\n      if(n%3 == 0 && t)\n        cout<<\"dumb\";\n      else if (n%3 == 0 && t==false )\n        cout<<\"idiot\";\n      else if(n%3!=0 && t)\n        cout<<\"stupid\" ;\n      else\n        cout<<\"smart\";     \n    }\n    else\n       cout<<\"invalid\";\n  }\n  return 0;\n}\n"}
{"id": 1891, "language": "C++", "code": "#include <fstream>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// (x, y) \u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u3066\u3082\u3001\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b.\n// @param queens: \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308b. queens[i] = j \u3067\u3042\u308c\u3070, (i, j) \u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b.\n// @param x, y: \u914d\u7f6e\u3057\u3088\u3046\u3068\u3059\u308b\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\n// @return: true\u3067\u3042\u308c\u3070, \u914d\u7f6e\u3057\u3066\u3082\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u305f\u307e\u307e. false\u3067\u3042\u308c\u3070\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u306a\u3044.\nbool isNQueen(vector<int> queens, int x, int y) {\n  for (int i = 0; i < queens.size(); ++i) {\n    if (queens[i] == -1) continue; // -1 \u306f\u672a\u914d\u7f6e\n    int j = queens[i];\n    if (x == i || y == j || abs(x - i) == abs(y - j)) return false;\n  }\n  return true;\n}\n\n// \u73fe\u5728\u306e\u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u304c8\u30af\u30a4\u30fc\u30f3\u306e\u5236\u7d04\u3092\u6e80\u305f\u3059\u304b\u3069\u3046\u304b.\n// @brief: \u30af\u30a4\u30fc\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u6642\u306b\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u3067\u306f\u672a\u914d\u7f6e\u306e\u30af\u30a4\u30fc\u30f3\u304c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b.\n// @param queens: \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308b. queens[i] = j \u3067\u3042\u308c\u3070, (i, j) \u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b.\n// @return: true\u3067\u3042\u308c\u3070, \u672a\u914d\u7f6e\u306e\u30af\u30a4\u30fc\u30f3\u306f\u306a\u3057. false\u306f\u672a\u914d\u7f6e\u306e\u30af\u30a4\u30fc\u30f3\u304c\u5b58\u5728\u3059\u308b.\nbool isNQueen(vector<int> queens) {\n  for (int i = 0; i < queens.size(); ++i)\n    if (queens[i] == -1) return false;\n  return true;\n}\n\n\n// \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u65b9\u6cd5\u3092\u63a2\u7d22\u3059\u308b.\n// @param queens: \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308b. queens[i] = j \u3067\u3042\u308c\u3070, (i, j) \u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b.\n// @return: \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u4f4d\u7f6e.\nvector<int> search(vector<int> queens) {\n  bool finishFlag = false; // \u63a2\u7d22\u7d42\u4e86\u30d5\u30e9\u30b0.\n\n  for (int i = 0; i < 8; ++i) {\n    if (queens[i] != -1) continue; // \u914d\u7f6e\u6e08\u307f.\n\n    for (int j = 0; j < 8; ++j) {\n      // (i, j) \u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u3066\u3082\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u308b\u304b\u78ba\u8a8d.\n      if (isNQueen(queens, i, j)) {\n        queens[i] = j;                 // (i, j) \u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e.\n        queens = search(queens);       // \u3055\u3089\u306b\u63a2\u7d22\u3092\u9032\u3081\u308b.\n        finishFlag = isNQueen(queens); // \u63a2\u7d22\u304c\u7d42\u4e86\u3057\u305f\u304b\u5224\u5b9a.\n        if (finishFlag) break;         // \u63a2\u7d22\u304c\u7d42\u4e86\u3057\u305f\u3089\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u51fa\u3059.\n        queens[i] = -1;                // \u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u3092\u3082\u3068\u306b\u623b\u3059.\n      }\n    }\n    if (finishFlag) break; // \u63a2\u7d22\u304c\u7d42\u4e86\u3057\u305f\u3089\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u51fa\u3059.\n  }\n  return queens;\n}\n\nint main(int argc, char *argv[]) {\n\n  // argv[1]\u306e\u30d5\u30a1\u30a4\u30eb\u3092cin\u306e\u5bfe\u8c61\u306b\u3059\u308b.\n  std::ifstream in(argv[1]);\n  std::cin.rdbuf(in.rdbuf());\n\n  int k;\n  cin >> k;\n  vector<int> queens(8);\n\n  // queens\u306e\u5404\u8981\u7d20\u3092 -1 \u3067\u521d\u671f\u5316.\n  for (auto it = queens.begin(); it != queens.end(); ++it) *it = -1;\n\n  for (int i = 0; i < k; ++i) {\n    int r;\n    cin >> r;\n    int c;\n    cin >> c;\n    queens[r] = c; // (r, c)\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3059\u308b.\n  }\n\n  // \u63a2\u7d22\n  queens = search(queens);\n\n  // \u7d50\u679c\u3092\u8868\u793a\n  for (int i = 0; i < 8; ++i) {\n    for (int j = 0; j < 8; ++j) {\n      if (queens[i] == j)\n        cout << 'Q';\n      else\n        cout << '.';\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n"}
{"id": 1892, "language": "Java", "code": "public class IdiotsJudgeMain {\n  public static void main(String[] args) {\n    for (String s : args) {\n      try {\n        int num = Integer.parseInt(s);\n        if (num < 0 || num > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisible3 = num % 3 == 0;\n        boolean contains3 = s.indexOf('3') != -1;\n        if (divisible3 && contains3) System.out.println(\"dumb\");\n        else if (divisible3) System.out.println(\"idiot\");\n        else if (contains3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1893, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    for (String arg : args) {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        int num = scanner.nextInt();\n        if (num < 0 || num > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean divBy3 = (num % 3 == 0);\n          boolean hasDigit3 = String.valueOf(num).contains(\"3\");\n\n          if (divBy3 && hasDigit3) {\n            System.out.println(\"dumb\");\n          } else if (divBy3) {\n            System.out.println(\"idiot\");\n          } else if (hasDigit3) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close(); // \u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\n    }\n  }\n}"}
{"id": 1894, "language": "Java", "code": "package encrypt;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MyApp {\n  \n  public static void main(String[] args) throws IOException {\n    if (args.length != 3) return;\n\n    String command = args[0];\n    String inputFilePath = args[1];\n    String outputFilePath = args[2];\n\n    String content = new String(Files.readAllBytes(Paths.get(inputFilePath)));\n\n    switch (command) {\n      case \"count\":\n        countCharacters(content, outputFilePath);\n        break;\n      case \"space\":\n        findSpaceChar(content, outputFilePath);\n        break;\n      case \"decrypt\":\n        decryptText(content, outputFilePath);\n        break;\n    }\n  }\n\n  private static void countCharacters(String content, String outputFilePath) throws IOException {\n    Map<Character, Integer> charCount = new HashMap<>();\n    for (char c : content.toCharArray()) {\n      if (Character.isLetter(c) || Character.isWhitespace(c)) {\n        charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n      }\n    }\n    writeJsonToFile(charCount, outputFilePath);\n  }\n\n  private static void findSpaceChar(String content, String outputFilePath) throws IOException {\n    char spaceReplacement = 'g'; // Dummy, will need real logic\n    Map<String, Character> spaceMap = new HashMap<>();\n    spaceMap.put(\"char\", spaceReplacement);\n    writeJsonToFile(spaceMap, outputFilePath);\n  }\n\n  private static void decryptText(String content, String outputFilePath) throws IOException {\n    StringBuilder decrypted = new StringBuilder();\n    for (char c : content.toCharArray()) {\n      // Placeholder for decryption logic\n      decrypted.append(c); // No change for now\n    }\n    writeToFile(decrypted.toString(), outputFilePath);\n  }\n\n  private static void writeJsonToFile(Map<?, ?> map, String outputFilePath) throws IOException {\n    StringBuilder json = new StringBuilder(\"{\\n\");\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n      json.append(String.format(\"  \\\"%s\\\": %s,\\n\", entry.getKey(), entry.getValue()));\n    }\n    json.deleteCharAt(json.length() - 2); // Remove last comma\n    json.append(\"}\");\n    writeToFile(json.toString(), outputFilePath);\n  }\n\n  private static void writeToFile(String content, String outputFilePath) throws IOException {\n    try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(outputFilePath))) {\n      writer.write(content);\n    }\n  }\n}"}
{"id": 1895, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    with open(argv[0]) as f:\n        games = json.load(f)\n    rob = [0,1,2]\n    you = []\n    for m in games:\n        rob.append(m['robot'])\n        you.append(m['you'])\n    stats = {}\n    N = len(games)\n    for i in range(N):\n        idx = i+3\n        state = tuple(rob[idx-3:idx]+[you[i]])\n        stats.setdefault(state, []).append(rob[idx])\n    search = tuple(rob[-3:]+[you[-1]])\n    hist = stats.get(search, [])\n    print(len(hist)%3)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1896, "language": "Python3", "code": "def main(argv):\n    k = int(argv[0])\n    fixed = [tuple(map(int, x.split())) for x in argv[1:k+1]]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in fixed:\n        board[r][c] = 'Q'\n    \n    # check if placing a queen at (row, col) is valid\n    def is_ok(row, col):\n        if board[row][col] == 'Q':\n            return False\n        # check rows and columns\n        for i in range(8):\n            if board[row][i] == 'Q' or board[i][col] == 'Q':\n                # except the position itself if fixed\n                if (row, i) not in fixed or i != col:\n                    return False\n                if (i, col) not in fixed or i != row:\n                    return False\n        # check diagonals\n        for dr, dc in [(-1,-1), (-1,1), (1,-1), (1,1)]:\n            r, c = row+dr, col+dc\n            while 0 <= r < 8 and 0 <= c < 8:\n                if board[r][c] == 'Q':\n                    if (r, c) not in fixed:\n                        return False\n                r += dr\n                c += dc\n        return True\n\n    # check if fixed queens don't conflict\n    for i in range(len(fixed)):\n        r1, c1 = fixed[i]\n        for j in range(i+1, len(fixed)):\n            r2, c2 = fixed[j]\n            if r1 == r2 or c1 == c2 or abs(r1 - r2) == abs(c1 - c2):\n                # conflicting fixed queens impossible\n                return\n\n    # recursive backtracking, fill from row 0 to 7\n    def dfs(r):\n        if r == 8:\n            return True\n        # if queen fixed here, just validate and go next\n        for rf, cf in fixed:\n            if rf == r:\n                return dfs(r+1)\n        for c in range(8):\n            if board[r][c] == '.' and is_ok(r, c):\n                board[r][c] = 'Q'\n                if dfs(r+1):\n                    return True\n                board[r][c] = '.'\n        return False\n\n    dfs(0)\n\n    for row in board:\n        print(''.join(row))\n\n\nif __name__ == '__main__':\n    import sys\n    main(sys.stdin.read().strip().split('\\n'))"}
{"id": 1897, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int n,count=0,s,i=0,id=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  while((argc-1)>0)\n  {\n    n=atoi(argv[i+1]);\n    if(0<=n<=1000)\n    {\n      if(n%3==0)\n      id=1;\n        while(n>0)\n      {\n        s=n%10;\n        if(s==3)\n        count=1;\n        n=n/10;\n      }\n      if(id==1&&count==1)\n      printf(\"dumb\\n\");\n      else\n      if(id==1)\n      printf(\"idiot\\n\");\n      else\n      if(count==1)\n      printf(\"stupid\\n\");\n      else \n      printf(\"smart\\n\");\n      }\n      else \n      printf(\"invalid\");\n      argc--;\n      i++;\n    }\n    \n    }\n  \n"}
{"id": 1898, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  /*if(argv[i]==0)\n    cout<<argv[i];\n  \n  else if(argv[i]==1 || argv[i]==2){\n    cout<<argv[i-1];\n  }\n  else{\n    cout<<argv[i]-1;\n  }\n  }*/\n  cout<<0;\n  }\n  return 0;\n\n}\n\n"}
{"id": 1899, "language": "Java", "code": "package track;\n\n// \u65e5\u672c\u8a9e\u306e\u5909\u6570\u540d\u3092\u4f7f\u3063\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\npublic class Hoge {\n    public static void main(String[] args) {\n        for (String moji : args) {\n            hantei(moji);\n        }\n    }\n\n    public static void hantei(String inputStr) {\n        if (!inputStr.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n        \n        int suuji = Integer.parseInt(inputStr);\n\n        if (suuji < 0 || suuji > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        boolean sanDeWareru = (suuji % 3 == 0);\n        boolean sanGaFukumareru = inputStr.contains(\"3\");\n        String kekka;\n\n        if (sanDeWareru && sanGaFukumareru) {\n            kekka = \"dumb\";\n        } else if (sanDeWareru) {\n            kekka = \"idiot\";\n        } else if (sanGaFukumareru) {\n            kekka = \"stupid\";\n        } else {\n            kekka = \"smart\";\n        }\n        System.out.println(kekka);\n    }\n}"}
{"id": 1900, "language": "Java", "code": "package track;\n\n\nimport java.util.Arrays;\n\n\n\npublic class App {\n  public static void main(String[] args) {\n\n    String[] inputArray = args;\n    String status = \"invalid\";\n    // System.out.println(\"args: \" + Arrays.toString(args));\n    // System.out.println(Arrays.toString(inputArray));\n\n    for(String s  : inputArray) {\n      // System.out.println(\"****\\n\" + s + \"\\n****\\n\");\n      int x; \n\n      try {\n        x = Integer.parseInt(s);\n      } catch(NumberFormatException e) {\n        System.out.println(status);\n        status = \"invalid\";\n\n        continue;\n      }\n\n      if(x >= 0 && x <= 1000) {\n        if(s.contains(\"3\")) {\n          status = \"stupid\";\n        } else if(x % 3 == 0) {\n          status = \"idiot\";\n        } \n\n        switch(status) {\n          case \"idiot\": \n            if(s.contains(\"3\")) status = \"dumb\";\n            break;\n          case \"stupid\":\n            if(x % 3 == 0) status = \"dumb\";\n            break;\n          default:\n            status = \"smart\"; // if at this point is still \"invalid\" then it is smart\n        }\n      }\n\n      System.out.println(status);\n      status = \"invalid\";\n    }\n  }\n}\n"}
{"id": 1901, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Determines the \"idiot\" classification for a given number\nstd::string getIdiotsVerdict(int num) {\n    if (num < 0 || num > 1000) {\n        return \"invalid\";\n    }\n\n    bool isDivisibleBy3 = (num % 3 == 0);\n    std::string sNum = std::to_string(num);\n    bool includesDigit3 = (sNum.find('3') != std::string::npos);\n\n    if (isDivisibleBy3 && includesDigit3) {\n        return \"dumb\";\n    } else if (isDivisibleBy3) {\n        return \"idiot\";\n    } else if (includesDigit3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        long parsedVal;\n        char* endOfParse;\n        parsedVal = std::strtol(argv[i], &endOfParse, 10);\n\n        // Check for non-numeric input or empty string\n        if (*endOfParse != '\\0' || endOfParse == argv[i]) {\n            std::cout << \"invalid\\n\";\n        } else {\n            // Pass the parsed integer to the logic function\n            std::cout << getIdiotsVerdict(static_cast<int>(parsedVal)) << \"\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 1902, "language": "C++", "code": "#include <iostream>\n#include <string.h>\n#include <stack>\n#include <stdlib.h>\n#include <time.h>\nusing namespace std;\n\nchar JudgeText[] = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\nconst char* ClearText = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\"; \nconst char* GameOverText = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"; \n\nbool Check(char c)\n{\n  static int nowpos = 0;\n\n  if( c == JudgeText[nowpos] ){\n    nowpos++;\n    return true;\n  }\n\n  nowpos = 0;\n  return false;\n}\n\nbool StackFunction(char c)\n{\n  static stack<char> s;\n\n  if(Check(c))// \u6b21\u306b\u5165\u308b\u6587\u5b57\u5217\u3060\u3063\u305f\u306a\u3089\n  {\n      // \u6587\u5b57\u5217\u3092\u8a18\u61b6\u3059\u308b\n      s.push(c);\n  }\n  else// \u6b21\u306b\u5165\u308b\u6587\u5b57\u5217\u3067\u306a\u3044\u306a\u3089\n  {\n      // \u4eca\u307e\u3067\u306b\u8caf\u3081\u305f\u6587\u5b57\u5217\u3092\u7834\u68c4\u3059\u308b\n      for(int i = 0; i < s.size(); i++)\n      {\n        s.pop();\n      }\n  }\nprintf(\"daaaaaaadada %d\",strlen(JudgeText));\nprintf(\"daaaaaaadada %d\",s.size());\n  // \u6587\u5b57\u5217\u304c\u6700\u5f8c\u307e\u3067\u305f\u307e\u3063\u305f\u306a\u3089\n  if(s.size() == strlen(JudgeText))\n    return true;\n\n  return false;\n}\n\nvoid loopfunction(int n)\n{\n  char c;\n  for(int i = 0; i < n; i++)\n  {\n    if(rand() % 2 == 0)\n    {\n      printf(\"\u30c9\\n\");\n      c = '\u30c9';\n    }\n    else\n    {\n      printf(\"\u30ab\\n\");\n      c = '\u30ab';\n    }\n\n\n    if(StackFunction(c))\n    {\n       printf(\"%s\",ClearText);\n       break;\n    }\n     \n    if(i = n)\n      printf(\"%s\",GameOverText);\n  }\n\n}\n\nint main(int argc, char *argv[])\n{\n  srand((unsigned int) time(NULL));\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n    loopfunction(atoi(argv[i]));\n\n  }\n\n \n  return 0;\n}\n"}
{"id": 1903, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isNumeric(const string& s) {\n    for (char c : s) if (!isdigit(c)) return false;\n    return true;\n}\n\nint main(int argc, char* argv[]) {\n    for (int i=1; i<argc; i++) {\n        string arg = argv[i];\n        if (!isNumeric(arg)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int val = stoi(arg);\n        if (val < 0 || val > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool divisible_by_3 = (val % 3 == 0);\n        bool contains_three = (arg.find('3') != string::npos);\n        if (divisible_by_3 && contains_three) cout << \"dumb\" << endl;\n        else if (divisible_by_3) cout << \"idiot\" << endl;\n        else if (contains_three) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 1904, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      try{\n       int temp=Integer.parseInt(args[i]);\n      int flag=0;\n\t\t\twhile(temp>0)\n      {\n        if((temp%10)==3)\n        {\n        flag=1;\n        break;\n        }\n        temp=temp/10;\n      }\n      temp=Integer.parseInt(args[i]);\n      if(((temp%3)==0) && (flag==1) )\n        System.out.println(\"dumb\");\n        else if(flag==1)\n        System.out.println(\"stupid\");\n        else if((temp%3)==0)\n        System.out.println(\"idiot\");\n        else\n        System.out.println(\"smart\");\n\t\t\n   }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 1905, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar IsValidNumber(char * string)\n{\n   for(int i = 0; i < strlen( string ); i ++)\n   {\n      //ASCII value of 0 = 48, 9 = 57. So if value is outside of numeric range then fail\n      //Checking for negative sign \"-\" could be added: ASCII value 45.\n      if (string[i] < 48 || string[i] > 57)\n         return 0;\n   }\n \n   return 1;\n}\n\n\nchar Is3(char * string)\n{\n    for(int j=0; j<strlen(string); j++ )\n    {\n        if( strcmp(string + j,\"3\" ) == 0)\n        {\n        //printf(\"test %d\\n\", data);\n        \n          return 1;\n        }\n    }\n    return 0;\n }\n\nint main(int argc, char *argv[])\n{\n  int data=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    data =0;\n    \n    if(IsValidNumber(argv[i]) == 1)\n    {\n      data = atoi(argv[i]);\n\n      if(data >1000 || data <0)\n      {\n        printf(\"invalid\\n\");\n      }\n      else if( (data % 3 == 0 ) && (Is3(argv[i]) == 1 ) )\n      {\n        printf(\"dumb\\n\");\n      }\n      else if(Is3(argv[i]) == 1 )\n      {\n        printf(\"stupid\\n\");\n      }\n      else if( data %3 == 0)\n      {\n        printf(\"idiot\\n\");\n      }\n      else\n      {\n        printf(\"smart\\n\");\n      }\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n\n  }\n  return 0;\n}\n"}
{"id": 1906, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    def convert_to_roman(n):\n        # \u30ed\u30fc\u30de\u6570\u5b57\u5909\u63db\u8868\n        roman_mapping = {\n            1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\",\n            10: \"X\", 40: \"XL\", 50: \"L\", 90: \"XC\",\n            100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"\n        }\n\n        roman_numeral = \"\"\n        for value in sorted(roman_mapping.keys(), reverse=True):\n            # \u6307\u5b9a\u3055\u308c\u305f\u6570\u5b57\u306b\u5bfe\u3057\u3066\u7e70\u308a\u8fd4\u3057\u5bfe\u5fdc\u3092\u78ba\u8a8d\n            while n >= value:\n                roman_numeral += roman_mapping[value]\n                n -= value\n        return roman_numeral\n\n    # \u5bfe\u8c61\u306e\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u53d6\u5f97\n    if argv:\n        number = int(argv[0])\n        print(convert_to_roman(number))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1907, "language": "Python3", "code": "import sys\nimport string\nimport json\nfrom collections import Counter\n\ndef charcount(s):\n    table = {}\n    alphabet = string.ascii_letters + ' '\n    for ch in alphabet:\n        table[ch] = 0\n    for c in s:\n        if c in table:\n            table[c] += 1\n    return {k: v for k, v in table.items() if v > 0}\n\ndef find_spacechar(text):\n    lower_counts = Counter(c for c in text if c in string.ascii_lowercase)\n    # space tends to appear more than any letter since it separates words\n    if lower_counts:\n        space_c, _ = lower_counts.most_common(1)[0]\n        return space_c\n    return ' '\n\ndef decipher(text, space_c):\n    alphabet = string.ascii_lowercase\n    letter_count = Counter(c for c in text if c in alphabet and c != space_c)\n    # e is most frequent, find shift.\n    if not letter_count:\n        return text\n    most = letter_count.most_common(1)[0][0]\n    shift = (ord(most) - ord('e')) % 26\n    out = []\n    for c in text:\n        if c == space_c:\n            out.append(' ')\n        elif c in string.ascii_lowercase:\n            idx = (ord(c) - ord('a') - shift) % 26\n            out.append(alphabet[idx])\n        elif c in string.ascii_uppercase:\n            idx = (ord(c) - ord('A') - shift) % 26\n            out.append(string.ascii_uppercase[idx])\n        else:\n            out.append(c)\n    return ''.join(out)\n\ndef main(argv):\n    cmd = argv[0]\n    input_txt = argv[1]\n    output_txt = argv[2]\n    with open(input_txt, encoding='utf-8') as f:\n        text = f.read()\n    if cmd == 'count':\n        freq = charcount(text)\n        with open(output_txt, 'w', encoding='utf-8') as out:\n            json.dump(freq, out)\n    elif cmd == 'space':\n        space_c = find_spacechar(text)\n        with open(output_txt, 'w', encoding='utf-8') as out:\n            json.dump({'char': space_c}, out)\n    elif cmd == 'decrypt':\n        space_c = find_spacechar(text)\n        plain = decipher(text, space_c)\n        with open(output_txt, 'w', encoding='utf-8') as out:\n            out.write(plain)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1908, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\n\nstruct conversion\n{\n  int num;\n  int three_occured;\n  int passed;\n};\ntypedef struct conversion conversion;\n\nint check(char);\nconversion atoi(char string[]);\n\nint main(int argc,char *argv[]){\n  for(int i=1;i<argc;i++){\n    conversion var = atoi(argv[i]);\n    if(var.passed == 0){\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(var.three_occured && (var.num%3 == 0)){\n      printf(\"dumb\\n\");\n    }\n    else if(var.three_occured){\n      printf(\"stupid\\n\");\n    }\n    else if(var.num % 3 ==0){\n      printf(\"idiot\\n\");\n    }\n    else{\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}\n\nint check(char character){\n  if((character < 48) || (character > 57)){\n    return 0;\n  }\n  return 1;\n}\n\nconversion atoi(char string[]){\n  int len = strlen(string);\n  int number = 0;\n  int three_occured = 0;\n  for(int i=0; i<len;i++){\n    if(check(string[i]) == 0){\n      return (conversion){0,0,0};\n    }\n    if(((int)string[i]-48)==3){\n      three_occured = 1;\n    }\n    number = number * 10 + ((int)string[i] - 48);\n  }\n  return (conversion){number,three_occured,1};\n}"}
{"id": 1909, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n\n     //in  args[0]\n      \n      int length = args.length,tempLenInt = 0,j=0 ,tempSum =0;\n      int tempInt;\n      String output = \"\";\n      boolean divBy3 = false, hasNumber3 = false,chkIntFromString= false;\n\n       // all arguments at once\n      for(int i = 0 ; i < length ; i ++){\n          output = \"\";\n          chkIntFromString = false;\n          try{\n             \n             tempLenInt = args[i].length(); \n             \n             for(int k = 0 ; k < tempLenInt ; k ++ ){\n\n                if(args[i].charAt(k) >='0' && args[i].charAt(k) <='9'){\n                  chkIntFromString = true;\n                }\n                else{\n                  chkIntFromString = false;\n                }\n             }\n            if(chkIntFromString==false){\n                output = \"invalid\";\n            }else{ \n\n\n                //invalid\n                tempInt = Integer.parseInt(args[i]);  \n\n\n                if( tempInt > 1000 && tempInt <0)\n                  {\n                        output = \"invalid\";\n                  }\n                else{\n                  \n                    divBy3 = false;\n                    hasNumber3 = false;\n\n                    tempLenInt = args[i].length();\n          \n                    tempSum = 0;\n                    for(j = 0 ; j < tempLenInt ; j++){\n\n                        tempInt =Integer.parseInt(Character.toString(args[i].charAt(j)));  \n                        \n                        if(tempInt == 3){\n                          hasNumber3 = true;\n                        }\n                        \n                        tempSum += tempInt ;\n                    }\n\n\n                    if(tempSum%3==0){\n                      divBy3 = true;\n                    }\n\n                    if(divBy3 == false &&  hasNumber3==false){\n                      output = \"smart\";\n                    }\n                    else if(divBy3 == true &&  hasNumber3==true){\n                      output = \"dumb\";\n                    }\n                    else if(divBy3 ==true) {\n                      output = \"idiot\";\n\n                    }\n                    else if(hasNumber3 ==true) {\n                      output = \"stupid\";\n\n                    }\n                   \n\n\n                }\n              }\n          }\n          catch(Exception ex){\n\n                output = \"invalid\";\n            }\n          System.out.println(output);\n       }\n\n\n   \n    \n  }\n}\n\n\n\n"}
{"id": 1910, "language": "Python3", "code": "import sys\n\ndef get_idiot_rating_v2(str_num):\n    if not str_num.isdigit(): return \"invalid\"\n    \n    num_val = int(str_num)\n    \n    if not (0 <= num_val <= 1000): return \"invalid\"\n\n    is_divisible_by_3 = (num_val % 3 == 0)\n    string_has_3 = ('3' in str_num)\n\n    if is_divisible_by_3 and string_has_3:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif string_has_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_v2(cli_inputs):\n    for one_input in cli_inputs:\n        print(get_idiot_rating_v2(one_input))\n\nif __name__ == '__main__':\n    execute_v2(sys.argv[1:])"}
{"id": 1911, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String inp : args) {\n      String res = \"invalid\";\n      try {\n        int a = Integer.parseInt(inp);\n        if (a < 0 || a > 1000) {\n          res = \"invalid\";\n        } else if (a % 3 == 0 && inp.indexOf('3') != -1) {\n          res = \"dumb\";\n        } else if (a % 3 == 0) {\n          res = \"idiot\";\n        } else if (inp.indexOf('3') != -1) {\n          res = \"stupid\";\n        } else {\n          res = \"smart\";\n        }\n      } catch (Exception e) {\n        res = \"invalid\";\n      }\n      System.out.println(res);\n    }\n  }\n}"}
{"id": 1912, "language": "Python", "code": "\nimport sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n\n  for hando,i  in enumerate(b+[{}]):\n    if hando<3:continue\n    c=(b[hando-3]['robot'],b[hando-2]['robot'],b[hando-1]['robot'],b[hando-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(hando,c,e,d[c])\n    d[c]=e    \n      \n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 1913, "language": "C", "code": "#include<stdio.h>\n#include<string.h>\nstruct return_type\n{\n  int  num;\n  int contains;\n  int verify;\n};\ntypedef struct return_type return_type;\nint check_numb(char charac)\n{\n  if ((charac < 48) || (charac > 57))\n  {\n    return 0;\n  }\n  return 1;\n}\n\nreturn_type str_to_int(char string[])\n{\n  int len = strlen(string);\n  int num = 0;\n  int is_3 = 0;\n  for(int i = 0 ; i < len ; i++)\n{\n  if(check_numb(string[i]) == 0)\n  {\n    return(return_type){0,0,0};\n  }\n  if (((int)string[i] - 48) == 3)\n  {\n    is_3 = 1;\n  }\n  num = num * 10 + ((int)string[i] - 48);\n}\nreturn (return_type){num, is_3 , 1};\n}\nint main(int argc,char *argv[])\n{\n  for(int i = 1 ; i < argc; i++)\n  {\n    return_type var=str_to_int(argv[i]);\n    if(var.verify == 0)\n    {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(var.contains && (var.num%3 == 0))\n    {\n    printf(\"dumb\\n\");\n    }\n    else if(var.contains)\n    {\n      printf(\"stupid\\n\");\n    }\n    else if(var.num % 3 == 0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else \n    {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 1914, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nbool divBy3(int n)\n{\n  if(n%3==0)\n    return true;\n  else\n    return false;\n}\n\nbool Has3(int n)\n{\n  while(n>0)\n  {\n    int r = n%10;\n    if(r==3)\n      return true;\n    n = n / 10;\n  }\n  return false;\n}\n\nint main(int argc, char *argv[])\n{\n  int flag=false;\n  int n;\n  for (int i = 1; i < argc; i++) {\n    string inp = argv[i];\n    if(isdigit(inp[0]))\n    {\n      n = atoi(&inp[0]);\n      if(n>=0&&n<=1000)\n      {\n        if(divBy3(n)&&Has3(n))\n        {\n          cout<<\"dumb\"<<endl;\n        }\n        else if(divBy3(n))\n        {\n          cout<<\"idiot\"<<endl;\n        }\n        else if(Has3(n))\n        {\n          cout<<\"stupid\"<<endl;\n        }\n        else\n        {\n          cout<<\"smart\"<<endl;\n        }\n      }\n      else\n      {\n        cout<<\"invalid\"<<endl;\n      }\n    }\n    else\n    {\n      cout<<\"invalid\"<<endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 1915, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tSystem.out.println(getTitleFromNumber(args[i]));\n\t\t}\n\t}  \n\n  private static String getTitleFromNumber(String input) {\n      if (isValidInput(input)) {\n          if (isDivisibleBy3(input) && hasNumber3(input))\n              return \"dumb\";\n          if (isDivisibleBy3(input)) return \"idiot\";\n          if (hasNumber3(input)) return \"stupid\";\n          return \"smart\";\n      } else {\n          return \"invalid\";\n      }\n  }\n  \n  private static boolean isValidInput(String input) {\n      boolean isValid;\n      try {\n          Integer.parseInt(input);\n          isValid = isAllASCII(input);\n      } catch (Exception e) {\n          isValid = false;\n      }\n      return isValid;\n  }\n\n  private static boolean isAllASCII(String input) {\n      boolean isASCII = true;\n      for (int i = 0; i < input.length(); i++) {\n          int c = input.charAt(i);\n          if (c > 0x7F) {\n              isASCII = false;\n              break;\n          }\n      }\n      return isASCII;\n  }\n\n  private static boolean isDivisibleBy3(String input) {\n      int inputNum = Integer.parseInt(input);\n      return inputNum % 3 == 0;\n  }\n\n  private static boolean hasNumber3(String input) {\n      return input.indexOf(\"3\") >= 0;\n  }\n}\n"}
{"id": 1916, "language": "Python3", "code": "import sys\nimport unicodedata\n\ndef isInt(n):\n  try:\n    int(n)\n    return True\n  except ValueError:\n    return False\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n      '''v = int(v)\n      if v >= 0 and v <=1000:\n        if v%3==0 and \"3\" in list(str(v)):\n          print('dumb')\n        elif v%3==0:\n          print('idiot')\n        elif \"3\" in list(str(v)):\n          print('stupid')\n        else:\n          print('smart')\n      else:\n        print('invalid')'''\n      f = 0\n      if(isInt(v)):\n        v = int(v)\n        f=1\n        if v >= 0 and v <=1000:\n          if v%3==0 and \"3\" in list(str(v)):\n            print('dumb')\n          elif v%3==0:\n            print('idiot')\n          elif \"3\" in list(str(v)):\n            print('stupid')\n          else:\n            print('smart')\n        else:\n          print('invalid')\n        \n      if f==0:\n        print('invalid')\n\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1917, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint has_three(const char *s) {\n  while(*s) {\n    if(*s == '3') return 1;\n    ++s;\n  }\n  return 0;\n}\n\nint valid_number(const char *s) {\n  if(!*s) return 0;\n  while(*s) {\n    if (!isdigit(*s)) return 0;\n    ++s;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  int i;\n  for (i=1; i<argc; i++) {\n    if (!valid_number(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n < 0 || n > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = n%3 == 0;\n    int has3 = has_three(argv[i]);\n    if (div3 && has3)\n      printf(\"dumb\\n\");\n    else if (div3)\n      printf(\"idiot\\n\");\n    else if (has3)\n      printf(\"stupid\\n\");\n    else\n      printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 1918, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Max reasonable size for the input JSON file (e.g., 4MB)\n#define MAX_FILE_BUFFER_SIZE 4000000 \n\n// Represents a single played game round\ntypedef struct {\n    int robotHand;\n    int playerHand; // This is 'you' in the problem description\n} GameRoundRecord;\n\n// Global array to store the access counts for each unique robot decision state.\n// The state is defined by (robot_prev3, robot_prev2, robot_prev1, opponent_last_hand).\n// Each hand can be 0, 1, or 2. Total states = 3 * 3 * 3 * 3 = 81.\n// The index is calculated as r3*27 + r2*9 + r1*3 + o1.\nint stateDecisionCounts[81];\n\n// Calculates a unique integer index for a given robot decision state.\nint calculateStateIndex(int r3, int r2, int r1, int o1) {\n    return r3 * 27 + r2 * 9 + r1 * 3 + o1;\n}\n\n// Very basic JSON parser for the expected format.\n// Reads the entire file into a buffer and then searches for \"robot\":X and \"you\":Y.\nint parseJsonRecords(char *jsonContent, GameRoundRecord *recordsArray, int maxRecords) {\n    int recordsCount = 0;\n    char *currentPos = jsonContent;\n\n    // Skip to the beginning of the array '['\n    while (*currentPos != '[' && *currentPos != '\\0') currentPos++;\n    if (*currentPos == '[') currentPos++; // Move past '['\n\n    while (*currentPos != '\\0' && *currentPos != ']') {\n        int robotHand = -1, playerHand = -1;\n\n        // Find \"robot\":X\n        char *robotKey = strstr(currentPos, \"\\\"robot\\\":\");\n        if (robotKey) {\n            robotKey += strlen(\"\\\"robot\\\":\");\n            // Skip any spaces or quotes after the colon\n            while (*robotKey == ' ' || *robotKey == '\"') robotKey++;\n            robotHand = *robotKey - '0';\n        } else {\n            break; // No more \"robot\" keys found, assume end of records\n        }\n\n        // Find \"you\":Y\n        char *playerKey = strstr(currentPos, \"\\\"you\\\":\");\n        if (playerKey) {\n            playerKey += strlen(\"\\\"you\\\":\");\n            // Skip any spaces or quotes after the colon\n            while (*playerKey == ' ' || *playerKey == '\"') playerKey++;\n            playerHand = *playerKey - '0';\n        } else {\n            break; // No more \"you\" keys found\n        }\n        \n        // Ensure both hands were successfully parsed and are valid\n        if (robotHand >= 0 && robotHand <= 2 && playerHand >= 0 && playerHand <= 2) {\n            if (recordsCount < maxRecords) {\n                recordsArray[recordsCount].robotHand = robotHand;\n                recordsArray[recordsCount].playerHand = playerHand;\n                recordsCount++;\n            }\n        }\n        \n        // Advance currentPos past the current record to search for the next\n        // We find the closing brace '}' and move one character past it (to ',', or ']')\n        char *endOfRecord = strchr(currentPos, '}');\n        if (endOfRecord) {\n            currentPos = endOfRecord + 1;\n        } else {\n            break; // Malformed record, or end of file\n        }\n    }\n    return recordsCount;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <input_json_filepath>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *inputFile = fopen(argv[1], \"rb\"); // Open in binary mode for size\n    if (!inputFile) {\n        perror(\"Error opening input file\");\n        return 1;\n    }\n\n    // Determine file size to allocate buffer\n    fseek(inputFile, 0, SEEK_END);\n    long fileSize = ftell(inputFile);\n    fseek(inputFile, 0, SEEK_SET);\n\n    if (fileSize > MAX_FILE_BUFFER_SIZE) {\n        fprintf(stderr, \"Input file too large.\\n\");\n        fclose(inputFile);\n        return 1;\n    }\n\n    char *jsonBuffer = (char *)malloc(fileSize + 1);\n    if (!jsonBuffer) {\n        perror(\"Memory allocation failed for JSON buffer\");\n        fclose(inputFile);\n        return 1;\n    }\n    fread(jsonBuffer, 1, fileSize, inputFile);\n    jsonBuffer[fileSize] = '\\0'; // Null-terminate the string\n    fclose(inputFile);\n\n    // Estimate max possible game records for allocating storage\n    // Each record is roughly 20-30 characters like `{\"robot\":0,\"you\":1},`\n    int estimatedMaxRecords = fileSize / 20; \n    GameRoundRecord *parsedRecords = (GameRoundRecord *)malloc(estimatedMaxRecords * sizeof(GameRoundRecord));\n    if (!parsedRecords) {\n        perror(\"Memory allocation failed for game records\");\n        free(jsonBuffer);\n        return 1;\n    }\n\n    int actualNumRecords = parseJsonRecords(jsonBuffer, parsedRecords, estimatedMaxRecords);\n    free(jsonBuffer); // Free the JSON buffer once parsed\n\n    // Initialize state decision counts to 0\n    for (int i = 0; i < 81; ++i) {\n        stateDecisionCounts[i] = 0;\n    }\n\n    // Initialize robot's historical hands based on problem statement\n    // (Rock=0, Scissors=1, Paper=2)\n    int robotPrev3 = 0; // Robot's hand 3 rounds ago\n    int robotPrev2 = 1; // Robot's hand 2 rounds ago\n    int robotPrev1 = 2; // Robot's hand 1 round ago\n    // Opponent's last hand before the first game in records (assume Rock=0)\n    int opponentLastHand = 0; \n\n    // Simulate the robot's behavior through the historical records\n    for (int i = 0; i < actualNumRecords; ++i) {\n        // Get the current state (parameters) that the robot used for its decision\n        int currentStateIdx = calculateStateIndex(robotPrev3, robotPrev2, robotPrev1, opponentLastHand);\n        \n        // Increment the count for this state. This tracks how many times\n        // this specific parameter set has led to a decision.\n        stateDecisionCounts[currentStateIdx]++;\n\n        // Update robot's history with the hand it played in this record\n        robotPrev3 = robotPrev2;\n        robotPrev2 = robotPrev1;\n        robotPrev1 = parsedRecords[i].robotHand;\n        \n        // Update opponent's last hand with the hand played in this record\n        opponentLastHand = parsedRecords[i].playerHand;\n    }\n\n    // After processing all records, predict the robot's next move for the upcoming game\n    int finalStateIdx = calculateStateIndex(robotPrev3, robotPrev2, robotPrev1, opponentLastHand);\n    int robotNextPredictedMove = stateDecisionCounts[finalStateIdx] % 3;\n\n    // Determine the hand that wins against the robot's predicted move\n    // Rock (0) beats Scissors (1)\n    // Scissors (1) beats Paper (2)\n    // Paper (2) beats Rock (0)\n    // (robot_move + 2) % 3 gives the winning hand\n    int ourWinningHand = (robotNextPredictedMove + 2) % 3;\n\n    printf(\"%d\\n\", ourWinningHand);\n\n    free(parsedRecords); // Clean up allocated memory\n    return 0;\n}"}
{"id": 1919, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\npublic class App {\n\tpublic static void main(String[] args)\n   {\n\t   ArrayList<Integer> robot = new ArrayList<Integer>();\n     ArrayList<Integer> you = new ArrayList<Integer>();\n     ArrayList<Parameter> params = new ArrayList<Parameter>();\n     String input = convert(args[0]);\n     String[] splits = input.split(\",\");\n     for (int i=0;i<splits.length;i++)\n     {\n       if(splits[i].contains(\"robot\"))\n       {\n         robot.add(Integer.parseInt(splits[i].split(\":\")[1].trim()));\n       }\n       if(splits[i].contains(\"you\"))\n       {\n         you.add(Integer.parseInt(splits[i].split(\":\")[1].substring(0,1)));\n       }\n     }\n     int robotSize = robot.size();\n     int youSize = you.size();\n     Parameter decider = new Parameter(robot.get(robotSize-1),robot.get(robotSize-2),robot.get(robotSize-3),you.get(youSize-1));\n     for(int i=0;i<=robotSize-4;i++)\n     {\n       Parameter temp = new Parameter(robot.get(i+2),robot.get(i+1),robot.get(i),you.get(i+2));\n       params.add(temp);\n     }\n     int count =0;\n     int lastPlayed =0;\n     for (int i=0;i<params.size()-1;i++)\n     {\n       if(params.get(i).equals(decider))\n       {\n         count++;\n         if(!(i+1>params.size()))\n         {\n          lastPlayed = params.get(i+1).getlast();\n         }\n       }\n     }\n     if(count==0)\n     {\n       System.out.println(2);\n     }\n     System.out.println(lastPlayed);\n   }\n   public static String convert(String filename)\n   {\n     StringBuffer out = new StringBuffer();\n     try\n     {\n       String line;\n       Scanner sc = new Scanner(new File(filename));\n       while(sc.hasNextLine())\n       {\n         out.append(sc.nextLine());\n       }\n     } catch(IOException exp)\n     {\n       exp.printStackTrace();\n     }\n     return out.toString();\n   }\n}\nclass Parameter\n{\n  int last;\n  int last1;\n  int last2;\n  int opp;\n  Parameter(int x,int y, int z,int a)\n  {\n    this.last=x;\n    this.last1=y;\n    this.last2=z;\n    this.opp=a;\n  }\n  public boolean equals(Parameter param)\n  {\n    if(param.last== this.last && param.last1==this.last1 && param.last2 == this.last2 && param.opp == this.opp)\n    {\n      return true;\n    }\n    return false;\n  }\n  public int getlast()\n  {\n    return last;\n  }\n}"}
{"id": 1920, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t  String output = args[i];\n     // int val=0;\n      boolean flag =false;\n      for(int j=0;j<output.length();j++)\n      {\n        if(output.charAt(j)=='3')\n        {\n          flag=true;\n        }\n      }\n      try{\n        int number = Integer.parseInt(output);\n        if(0<=number && number<=1000)\n        {\n        if(number%3==0 && flag==true)\n          {\n            System.out.println(\"dumb\");\n          }\n        \n        else if(number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(flag==true)\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n       }\n      }\n      \n      catch(NumberFormatException e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n\n"}
{"id": 1921, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\n# This solution uses a different evaluation metric: 'e' frequency.\ndef find_key_by_e_freq(text):\n    best_s, best_c = -1, ''\n    best_score = float('inf')\n    english_e_freq = 0.127  # Frequency of 'e' in English\n\n    for s in range(26):\n        for i in range(26):\n            c_orig = chr(ord('a') + i)\n            \n            # Shift original char to find what it becomes\n            c_shifted = chr((ord(c_orig) - ord('a') + s) % 26 + ord('a'))\n\n            # Decrypt trial\n            temp_text_list = []\n            for char in text:\n                if char == ' ': temp_text_list.append(c_shifted)\n                elif char.lower() == c_shifted: temp_text_list.append(' ')\n                else: temp_text_list.append(char)\n            \n            decrypted_text_list = []\n            for char in \"\".join(temp_text_list):\n                if 'a' <= char <= 'z':\n                    decrypted_text_list.append(chr((ord(char) - ord('a') - s + 26) % 26 + ord('a')))\n                elif 'A' <= char <= 'Z':\n                    decrypted_text_list.append(chr((ord(char) - ord('A') - s + 26) % 26 + ord('A')))\n                else:\n                    decrypted_text_list.append(char)\n            \n            decrypted = \"\".join(decrypted_text_list)\n            \n            # Evaluation\n            e_count = decrypted.lower().count('e')\n            alpha_count = sum(1 for c in decrypted if c.isalpha())\n            \n            if alpha_count == 0:\n                score = float('inf')\n            else:\n                current_e_freq = e_count / alpha_count\n                score = abs(current_e_freq - english_e_freq)\n\n            if score < best_score:\n                best_score = score\n                best_s = s\n                best_c = c_orig\n    return best_s, best_c\n\ndef main(argv):\n    command, infile, outfile = argv\n\n    if command == \"count\":\n        with open(infile, 'r') as f:\n            text = f.read()\n        counts = Counter(c for c in text if c.isalpha() or c == ' ')\n        with open(outfile, 'w') as f:\n            json.dump(counts, f, indent=2)\n    else:\n        with open(infile, 'r') as f:\n            text = f.read()\n        s, c = find_key_by_e_freq(text)\n\n        if command == \"space\":\n            with open(outfile, 'w') as f:\n                json.dump({\"char\": c}, f, indent=2)\n        elif command == \"decrypt\":\n            c_shifted = chr((ord(c) - ord('a') + s) % 26 + ord('a'))\n            \n            temp_list = []\n            for char in text:\n                if char == ' ': temp_list.append(c_shifted)\n                elif char.lower() == c_shifted: temp_list.append(' ')\n                else: temp_list.append(char)\n\n            dec_list = []\n            for char in \"\".join(temp_list):\n                if 'a' <= char <= 'z':\n                    dec_list.append(chr((ord(char) - ord('a') - s + 26) % 26 + ord('a')))\n                elif 'A' <= char <= 'Z':\n                    dec_list.append(chr((ord(char) - ord('A') - s + 26) % 26 + ord('A')))\n                else:\n                    dec_list.append(char)\n            \n            with open(outfile, 'w') as f:\n                f.write(\"\".join(dec_list))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1922, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\n\npublic class App {\n\t// Constant\n\tprivate static int ALPHABET_SIZE = 26;\n\t\n\t// input output\n\tprivate static File inputFile, outputFile;\n\tprivate static PrintWriter outputWriter;\n\tprivate static String subCommand;\n\t\n\t// count\n\tprivate static int[] countUpper, countLower;\n\tprivate static int countSpace;\n\t\n\t// space\n\tprivate static char predictSpace;\n\t\n\t// decrypt\n\tprivate static String cryptStr, decryptStr;\n\t\n\tprivate static void init(String args[]){\n\t\t// input\n\t\tString inputPath, outputPath;\n\t\tsubCommand = args[0];\n\t\tinputPath = args[1];\n\t\toutputPath = args[2];\n\t\t\n\t\tinputFile = new File(inputPath);\n\t\toutputFile = new File(outputPath);\n\t\t\n\t\ttry {\n\t\t\toutputWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), \"UTF-8\")));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t// init\n\t\tcountUpper = new int[ALPHABET_SIZE];\n\t\tcountLower = new int[ALPHABET_SIZE];\n\t\tcountSpace = 0;\n\t}\n\t\n\t// output\n\tprivate static void output(String str){\n\t\toutputWriter.println(str);\n\t}\n\t\n\tprivate static void endOutput(){\n\t\toutputWriter.flush();\n\t\toutputWriter.close();\n\t}\n\t\n\tprivate static void outputCount(){\n\t\toutput(\"{\");\n\t\toutput(\"  \\\" \\\": \" + countSpace + \",\");\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tchar nowUpperChar = (char)('A' + i);\n\t\t\tchar nowLowerChar = (char)('a' + i);\n\t\t\toutput(\"  \\\"\" + nowUpperChar + \"\\\": \" + countUpper[i] + \",\");\n\t\t\tif(i != 25){\n\t\t\t\toutput(\"  \\\"\" + nowLowerChar + \"\\\": \" + countLower[i] + \",\");\n\t\t\t}else{\n\t\t\t\toutput(\"  \\\"\" + nowLowerChar + \"\\\": \" + countLower[i]);\n\t\t\t}\n\t\t}\n\t\toutput(\"}\");\n\t}\n\t\n\tprivate static void outputSpace(char spaceChar){\n\t\toutput(\"{\");\n\t\toutput(\"  \\\"char\\\": \\\"\" + spaceChar + \"\\\"\");\n\t\toutput(\"}\");\n\t}\n\t\n\t// count\n\tprivate static void countAlphabet() throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile), \"UTF-8\"));\n\n\t\tString line;\n\t\tStringBuilder stringBuilder = new StringBuilder();\t\t// save crypt string\n\t\twhile((line = br.readLine()) != null){\n\t\t\tstringBuilder.append(line + \"\\n\");\n\t\t\tfor(int i = 0;i < line.length();i++){\n\t\t\t\tchar nowChar = line.charAt(i);\n\t\t\t\t\n\t\t\t\tif('a' <= nowChar && nowChar <= 'z'){\n\t\t\t\t\t// lower case\n\t\t\t\t\tint index = nowChar - 'a';\n\t\t\t\t\tcountLower[index]++;\n\t\t\t\t}else if('A' <= nowChar && nowChar <= 'Z'){\n\t\t\t\t\t// upper case\n\t\t\t\t\tint index = nowChar - 'A';\n\t\t\t\t\tcountUpper[index]++;\n\t\t\t\t}else if(nowChar == ' '){\n\t\t\t\t\t// space\n\t\t\t\t\tcountSpace++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcryptStr = stringBuilder.toString();\n\t\t\n\t\tbr.close();\n\t}\n\t\n\t// predict space\n\tprivate static char predictSpace(){\n\t\tint sumCountAlpha = 0;\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tsumCountAlpha += countUpper[i];\n\t\t\tsumCountAlpha += countLower[i];\n\t\t}\n\t\tsumCountAlpha += countSpace;\n\t\t\n\t\tSystem.err.println(sumCountAlpha);\n\t\t// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u5e73\u5747\u7684\u306a\u5358\u8a9e\u306e\u9577\u3055\u3067\u5272\u3063\u3066\u3001\u5143\u306e\u6587\u3067\u306e\u30b9\u30da\u30fc\u30b9\u306e\u6570\u3092\u63a8\u5b9a\n\t\tdouble predictSpaceCount = sumCountAlpha / 4.5;\n\t\t\n\t\t// \u63a8\u5b9a\u3057\u305f\u6570\u3068\u4e00\u756a\u8fd1\u3044\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u63a2\u3059\n\t\tdouble minDiff = 9999999999.9999;\n\t\tchar predictSpaceChar = 'a';\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tdouble diff = Math.abs(predictSpaceCount - countLower[i]);\n\t\t\tif(diff < minDiff){\n\t\t\t\tminDiff = diff;\n\t\t\t\tpredictSpaceChar = (char) ('a' + i);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn predictSpaceChar;\n\t}\n\t\n\t// decrypt\n\t// \u63a8\u5b9a\u3057\u305f\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u5217\u3068\u30b9\u30da\u30fc\u30b9\u3092\u4ea4\u63db\u3002\u6570\u3048\u4e0a\u3052\u306e\u6570\u3082\u4ea4\u63db\n\tprivate static void changeSpaceChar(){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0;i < cryptStr.length();i++){\n\t\t\tchar nowChar = cryptStr.charAt(i);\n\t\t\tif(nowChar == ' '){\n\t\t\t\tsb.append(predictSpace);\n\t\t\t}else if(nowChar == predictSpace){\n\t\t\t\tsb.append(' ');\n\t\t\t}else{\n\t\t\t\tsb.append(nowChar);\n\t\t\t}\n\t\t}\n\t\t// count swap\n\t\tint tmp = countLower[predictSpace - 'a'];\n\t\tcountLower[predictSpace - 'a'] = countSpace;\n\t\tcountSpace = tmp;\n\t\t\n\t\tdecryptStr = sb.toString();\n\t}\n\n\t// \u30b7\u30d5\u30c8\u3059\u308b\u91cf\u3092\u63a8\u5b9a\n\tprivate static int predictShiftNum(){\n\t\tint maxCount = 0;\n\t\tchar maxCountChar = 'e';\n\t\t// \u6697\u53f7\u5316\u3057\u305f\u6587\u7ae0\u306b\u6700\u3082\u51fa\u3066\u304f\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u63a2\u3059\n\t\tfor(int i = 0;i < ALPHABET_SIZE;i++){\n\t\t\tif(maxCount < countLower[i]){\n\t\t\t\tmaxCount = countLower[i];\n\t\t\t\tmaxCountChar = (char) ('a' + i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"MaxCountChar:\" + maxCountChar);\n\t\t// \u63a2\u3057\u305f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306f\u4f55\u6587\u5b57\u305a\u3089\u3057\u305f\u3089(\u624b\u524d\u306b\u305a\u3089\u3057\u305f\u3089)\u3001\u5e73\u6587\u3067\u6700\u3082\u51fa\u3066\u304f\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308be\u306b\u306a\u308b\u304b\u6c42\u3081\u308b\u3002\n\t\tint shiftNum = (ALPHABET_SIZE + maxCountChar - 'e') % ALPHABET_SIZE;\n\t\t\n\t\treturn shiftNum;\n\t}\n\t\n\tprivate static String shiftCryptStr(int shiftNum){\n\t\tStringBuilder sb = new StringBuilder();\n\t\t\n\t\tfor(int i = 0;i < decryptStr.length();i++){\n\t\t\tchar nowChar = decryptStr.charAt(i);\n\t\t\t// \u30b7\u30d5\u30c8\u3059\u308b\u91cf\u3092\u73fe\u5728\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u30de\u30a4\u30ca\u30b9\u3057\u3066\u5e73\u6587\u3092\u63a8\u5b9a\u3059\u308b\n\t\t\tif('a' <= nowChar && nowChar <= 'z'){\n\t\t\t\tint shiftAlphabetIndex = (ALPHABET_SIZE + nowChar - 'a' - shiftNum) % ALPHABET_SIZE;\n\t\t\t\tchar shiftChar = (char) ('a' + shiftAlphabetIndex);\n\t\t\t\tsb.append(shiftChar);\n\t\t\t}else if('A' <= nowChar && nowChar <= 'Z'){\n\t\t\t\tint shiftAlphabetIndex = (ALPHABET_SIZE + nowChar - 'A' - shiftNum) % ALPHABET_SIZE;\n\t\t\t\tchar shiftChar = (char) ('A' + shiftAlphabetIndex);\n\t\t\t\tsb.append(shiftChar);\n\t\t\t}else{\n\t\t\t\tsb.append(nowChar);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\n\tprivate static void decrypt(){\n\t\tchangeSpaceChar();\n\t\tint shiftNum = predictShiftNum();\n\t\tSystem.err.println(\"shiftNum:\" + shiftNum);\n\t\tdecryptStr = shiftCryptStr(shiftNum);\n\t}\n\t\n\tpublic static void main(String args[]){\n\t\tinit(args);\n\t\t\n\t\ttry {\n\t\t\tcountAlphabet();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tpredictSpace = predictSpace();\n\t\t\n\t\tif(subCommand.equals(\"count\")){\n\t\t\toutputCount();\n\t\t\tendOutput();\n\t\t}else if(subCommand.equals(\"space\")){\n\t\t\toutputSpace(predictSpace);\n\t\t\tendOutput();\n\t\t}else if(subCommand.equals(\"decrypt\")){\n\t\t\tdecrypt();\n\t\t\toutput(decryptStr);\n\t\t\tendOutput();\n\t\t}\n\t}\n}\n"}
{"id": 1923, "language": "Java", "code": "package track;\n\npublic class MyApp {\n    public static void main(String[] args) {\n        // Processing command line arguments\n\n        for (String arg : args) {\n            if (isInteger(arg)) {\n                int value = Integer.parseInt(arg);\n                if (value < 0 || value > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    evaluate(value);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isInteger(String str) {\n        return str.matches(\"\\\\d+\");\n    }\n\n    private static void evaluate(int number) {\n        boolean isDivBy3 = number % 3 == 0;\n        boolean contains3 = String.valueOf(number).contains(\"3\");\n\n        if (isDivBy3 && contains3) {\n            System.out.println(\"dumb\");\n        } else if (isDivBy3) {\n            System.out.println(\"idiot\");\n        } else if (contains3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1924, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar chessboard[N][N];\n\nvoid initializeBoard() {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            chessboard[i][j] = '.';\n        }\n    }\n}\n\nint safePlace(int row, int col) {\n    for (int i = 0; i < col; i++) {\n        if (chessboard[row][i] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n        if (chessboard[i][j] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i < N && j >= 0; i++, j--) {\n        if (chessboard[i][j] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint placeQueens(int col) {\n    if (col >= N) return 1;\n    for (int i = 0; i < N; i++) {\n        if (safePlace(i, col)) {\n            chessboard[i][col] = 'Q';\n            if (placeQueens(col + 1)) return 1;\n            chessboard[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    initializeBoard();\n    \n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        chessboard[r][c] = 'Q';\n    }\n\n    placeQueens(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", chessboard[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 1925, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      String answer = \"invalid\";\n      try {\n        int val = Integer.parseInt(s);\n        if (val >= 0 && val <= 1000) {\n          boolean c1 = val % 3 == 0;\n          boolean c2 = s.indexOf('3') >= 0;\n          if (c1 && c2) answer = \"dumb\";\n          else if (c1) answer = \"idiot\";\n          else if (c2) answer = \"stupid\";\n          else answer = \"smart\";\n        }\n      } catch (Exception e) {\n        answer = \"invalid\";\n      }\n      System.out.println(answer);\n    }\n  }\n}"}
{"id": 1926, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n\n// Function to check if a number contains the digit 3\nbool checkThreePresence(int number) {\n    if (number == 0) return false; // 0 doesn't contain '3'\n    while (number > 0) {\n        if (number % 10 == 3) {\n            return true;\n        }\n        number /= 10;\n    }\n    return false;\n}\n\n// Main logic for the algorithm with nested if-else structure\nconst char* getIdiotsResult(int num) {\n    if (num % 3 == 0) { // Condition: divisible by 3\n        if (checkThreePresence(num)) { // Condition: also includes 3\n            return \"dumb\";\n        } else { // Condition: only divisible by 3\n            return \"idiot\";\n        }\n    } else { // Condition: not divisible by 3\n        if (checkThreePresence(num)) { // Condition: includes 3 but not divisible by 3\n            return \"stupid\";\n        } else { // Condition: neither divisible by 3 nor includes 3\n            return \"smart\";\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    char *endptr_val;\n    long input_number = strtol(argv[i], &endptr_val, 10);\n\n    // Validate if the input string was entirely a number\n    if (*endptr_val != '\\0' || endptr_val == argv[i]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Validate the numeric range\n    if (input_number < 0 || input_number > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", getIdiotsResult((int)input_number));\n  }\n  return 0;\n}"}
{"id": 1927, "language": "Java", "code": "public class Idiots {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      try {\n        int num = Integer.parseInt(arg);\n        if (num < 0 || num > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisibleBy3 = (num % 3 == 0);\n        boolean contains3 = arg.indexOf('3') >= 0;\n        if (divisibleBy3 && contains3) {\n          System.out.println(\"dumb\");\n        } else if (divisibleBy3) {\n          System.out.println(\"idiot\");\n        } else if (contains3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1928, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isAttacked(int row, int col, const vector<int>& queens) {\n    for (int i = 0; i < row; i++) {\n        int q_col = queens[i];\n        if (q_col == col || abs(q_col - col) == abs(i - row)) {\n            return true; // Check if attacked\n        }\n    }\n    return false; // Not attacked\n}\n\nvoid findQueens(int row, vector<int>& queens) {\n    if (row == 8) return; // All queens successfully placed\n\n    for (int col = 0; col < 8; col++) {\n        if (!isAttacked(row, col, queens)) {\n            queens[row] = col; // Place queen\n            findQueens(row + 1, queens); // Try to place next queen\n            if (queens[7] != -1) return; // Solution found, exit recursion\n        }\n    }\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<int> queens(8, -1); // Initialize board with -1\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        queens[r] = c; // Place existing queens\n    }\n\n    findQueens(0, queens); // Start solving the problem\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            cout << (queens[i] == j ? 'Q' : '.'); // Print board\n        }\n        cout << endl; // Newline for rows\n    }\n    return 0;\n}"}
{"id": 1929, "language": "C++", "code": "#include <iostream>\n#include<bits/stdc++.h>\nusing namespace std;\n\nbool isDivisibleByThree(int number){\n      if (number%3 == 0){\n       return true;\n      }\n      else{\n        return false;\n      }\n}\n\nbool isExistThree(int number){\nwhile(number != 0){\n    int temp = number % 10;\n     number = number/10;\n    if(temp == 3){\n        return true;\n        break;\n      }\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n    if(argv[i]>= 0 && argv[i]<= 1000){\n     \n    int number = atoi(argv[i]);\n    else if(isDivisibleByThree(number)==true && isExistThree(number) == true){\n      cout<<\"dumb\"<<endl;\n    }\n    else if(isDivisibleByThree(number)==true){\n      cout<<\"idiot\"<<endl;\n    }\n    else if(isExistThree(number) == true){\n      cout<<\"stupid\"<<endl;\n    }\n    else{\n      cout<<\"smart\"<<endl;\n     }\n      \n    }\n    else{\n      cout<<\"invalid\"<<endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 1930, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # This script handles different commands for cipher analysis.\n    command = argv[0]\n    input_filename = argv[1]\n    output_filename = argv[2]\n    \n    f_in = open(input_filename, 'r', encoding='utf-8')\n    text_content = f_in.read()\n    f_in.close()\n    \n    if command == 'count':\n        counts = {}\n        all_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \"\n        \n        for char_key in all_letters:\n            counts[char_key] = 0\n        \n        for character in text_content:\n            if character in counts:\n                counts[character] = counts[character] + 1\n        \n        f_out = open(output_filename, 'w', encoding='utf-8')\n        json.dump(counts, f_out, indent=2)\n        f_out.close()\n\n    elif command == 'space':\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        min_diff = 999999\n        found_char = ''\n        \n        for test_char in alphabet:\n            \n            swapped_text = \"\"\n            for char in text_content:\n                if char == test_char:\n                    swapped_text += ' '\n                elif char == ' ':\n                    swapped_text += test_char\n                else:\n                    swapped_text += char\n            \n            words_list = swapped_text.split(' ')\n            \n            real_words = []\n            for w in words_list:\n                if len(w) > 0:\n                    real_words.append(w)\n            \n            if len(real_words) == 0:\n                continue\n\n            total_chars = 0\n            for w in real_words:\n                total_chars += len(w)\n            \n            avg_word_len = total_chars / len(real_words)\n            \n            diff = abs(avg_word_len - 4.5)\n            \n            if diff < min_diff:\n                min_diff = diff\n                found_char = test_char\n        \n        result_dict = {\"char\": found_char}\n        f_out = open(output_filename, 'w', encoding='utf-8')\n        json.dump(result_dict, f_out, indent=2)\n        f_out.close()\n        \n    elif command == 'decrypt':\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        min_diff = 999999\n        space_char = ''\n        \n        for test_char in alphabet:\n            swapped_text = \"\"\n            for char in text_content:\n                if char == test_char:\n                    swapped_text += ' '\n                elif char == ' ':\n                    swapped_text += test_char\n                else:\n                    swapped_text += char\n            words_list = swapped_text.split(' ')\n            real_words = []\n            for w in words_list:\n                if len(w) > 0:\n                    real_words.append(w)\n            if len(real_words) == 0:\n                continue\n            total_chars = 0\n            for w in real_words:\n                total_chars += len(w)\n            avg_word_len = total_chars / len(real_words)\n            diff = abs(avg_word_len - 4.5)\n            if diff < min_diff:\n                min_diff = diff\n                space_char = test_char\n\n        shifted_text = \"\"\n        for char in text_content:\n            if char == space_char:\n                shifted_text += ' '\n            elif char == ' ':\n                shifted_text += space_char\n            else:\n                shifted_text += char\n        \n        letter_counts = {}\n        for char_code in range(ord('a'), ord('z') + 1):\n            letter_counts[chr(char_code)] = 0\n        for char in shifted_text:\n            if 'a' <= char <= 'z':\n                letter_counts[char] += 1\n        \n        max_freq = -1\n        common_letter = ''\n        for letter, count in letter_counts.items():\n            if count > max_freq:\n                max_freq = count\n                common_letter = letter\n        \n        shift_key = (ord(common_letter) - ord('e')) % 26\n        \n        final_text = \"\"\n        for char in shifted_text:\n            if 'a' <= char <= 'z':\n                new_ord = (ord(char) - ord('a') - shift_key + 26) % 26 + ord('a')\n                final_text += chr(new_ord)\n            elif 'A' <= char <= 'Z':\n                new_ord = (ord(char) - ord('A') - shift_key + 26) % 26 + ord('A')\n                final_text += chr(new_ord)\n            else:\n                final_text += char\n                \n        f_out = open(output_filename, 'w', encoding='utf-8')\n        f_out.write(final_text)\n        f_out.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1931, "language": "Java", "code": "package crazynumbers;\n\npublic class ThreeFools {\n    public static void main(String[] args) {\n        for (String input : args) {\n            try {\n                int value = Integer.parseInt(input);\n                if (value < 0 || value > 1000) {\n                    System.out.println(\"invalid\");\n                    continue;\n                }\n\n                boolean isMultipleOfThree = (value % 3 == 0);\n                boolean containsThree = (String.valueOf(value).indexOf('3') != -1);\n\n                if (isMultipleOfThree && containsThree) {\n                    System.out.println(\"dumb\");\n                } else if (isMultipleOfThree) {\n                    System.out.println(\"idiot\");\n                } else if (containsThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException ex) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 1932, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isSafe(int row, int col, const vector<int>& queens) {\n    for (int r = 0; r < row; r++) {\n        int c = queens[r];\n        if (c == col || abs(c - col) == abs(r - row)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid solveNQueens(int row, vector<int>& queens) {\n    if (row == 8) {\n        return; // All queens are placed\n    }\n\n    for (int col = 0; col < 8; col++) {\n        if (isSafe(row, col, queens)) {\n            queens[row] = col; // Place queen\n            solveNQueens(row + 1, queens); // Move to next row\n            if (queens[7] != -1) break; // Stop if solution found\n        }\n    }\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<int> queens(8, -1); // -1 indicates no queen placed\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        queens[r] = c; // Place the predefined queens\n    }\n\n    solveNQueens(0, queens);\n\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            if (queens[i] == j) {\n                cout << 'Q';\n            } else {\n                cout << '.';\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"}
{"id": 1933, "language": "C#", "code": "using System;\n\npublic class App\n{\n    static void Main(string[] args)\n    {\n        foreach (string argument in args)\n        {\n            int number;\n            if (!int.TryParse(argument, out number) || number < 0 || number > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n            bool isDivisible = number % 3 == 0;\n            bool containsThree = argument.Contains(\"3\");\n            if (isDivisible && containsThree)\n                Console.WriteLine(\"dumb\");\n            else if (isDivisible)\n                Console.WriteLine(\"idiot\");\n            else if (containsThree)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 1934, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n            foreach(var value in args)\n            {\n                int number=0;\n                if (int.TryParse(value, out number) && number>=0 && number<=1000){\n                    if (number % 3 == 0 && value.Contains('3'))\n                    {\n                        Console.WriteLine(\"dumb\");\n                    }\n                    else if (number % 3 == 0)\n                    {\n                        Console.WriteLine(\"idiot\");\n                    }\n                    else if (value.Contains('3'))\n                    {\n                        Console.WriteLine(\"stupid\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"smart\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n            }\n    }\n}\n"}
{"id": 1935, "language": "Python3", "code": "import sys\nimport string\nimport json\n\ndef count(s, letters):\n  dic = {}\n  for letter in letters:\n    dic[letter] = 0\n\n  for c in s:\n    if c in letters:\n      dic[c] += 1\n  return dic\n\n\ndef count_alphabet(s, letters):\n  dic = {}\n  for letter in letters:\n    dic[letter.lower()] = 0\n\n  for c in s:\n    if c.lower() in letters:\n      dic[c.lower()] += 1\n  return dic\n\n\ndef calc_average_word_length(s, div, letters):\n  divider = \",\\n\\r.\" + div + div.upper()\n  wordlens = []\n  wordlen = 0\n\n  for c in s:\n    if c.lower() in divider:\n      if wordlen > 1:\n        wordlens.append(wordlen)\n        wordlen = 0\n    elif c.lower() in letters:\n      wordlen += 1\n  if wordlen > 0:\n    wordlens.append(wordlen)\n  return sum(wordlens) / float(len(wordlens)) # python3 should return float without `float`...?\n\n\ndef closest_index_to_threshold(wordlen, threshold):\n  idx = -1\n  dist = 1000\n\n  for i, l in enumerate(wordlen):\n    d = abs(l - threshold)\n    if d < dist:\n      dist = d\n      idx = i\n  return idx\n\n\ndef space(s, letters):\n  wordlen = []\n  for letter in letters:\n    # wordlen += [calc_average_word_length(\"ab cde A,ghi\", letter, letters)]\n    wordlen.append(calc_average_word_length(s, letter, letters))\n  # print(wordlen)\n  idx = closest_index_to_threshold(wordlen, 4) # adjusted to test case ( 4.5 is expected? )\n  return { \"char\": letters[idx] }\n\n\ndef get_most_freq_alphabet(s, letters_lower):\n  count_json = count_alphabet(s, letters_lower)\n  print(count_json)\n  max_count = 0\n  max_alphabet = ''\n\n  for a, count in count_json.items():\n    if count > max_count:\n      max_count = count\n      max_alphabet = a\n  \n  return max_alphabet\n\n\ndef replace_chars(char1, char2, s):\n  _s = [c for c in s]\n  for i, c in enumerate(_s):\n    if c == char1:\n      _s[i] = char2\n    elif c == char2:\n      _s[i] = char1\n  return ''.join( _s)\n\n\ndef shift_char(c, n):\n  new_c = ord(c) + n\n  if ord('a') <= ord(c) and ord(c) <= ord('z'):\n    if ord('a') >= new_c:\n      new_c += 26\n    elif ord('z') <= new_c:\n      new_c -= 26\n  elif ord('A') <= ord(c) and ord(c) <= ord('Z'):\n    if ord('A') >= new_c:\n      new_c += 26\n    elif ord('Z') <= new_c:\n      new_c -= 26\n  return chr(new_c)\n\n\ndef shift_str(s, n_shift, letters):\n  _s = [c for c in s]\n  for i, c in enumerate(_s):\n    if c in letters:\n      _s[i] = shift_char(c, n_shift)\n  return ''.join(_s)\n\n\ndef decrypt(s, letters, letters_lower):\n  space_char = space(s, letters_lower)[\"char\"]\n\n  space_replaced_str = replace_chars(' ', space_char, s)\n  most_freq_alphabet = get_most_freq_alphabet(s, letters_lower)\n\n  n_shift = ord('e') - ord(most_freq_alphabet)\n\n  shifted_str = shift_str(space_replaced_str, n_shift, letters[:-1])\n  return shifted_str\n\ndef main(argv):\n  command = argv[0]\n  filepath = argv[1]\n  resultpath = argv[2]\n\n  with open(filepath) as f:\n    s = f.read()\n    \n  letters = string.ascii_letters + ' '\n  letters_lower = string.ascii_lowercase + ' '\n  if command == \"count\":\n    result = count(s, letters)\n    f = open(resultpath, 'w')\n    json.dump(result, f)\n    f.close()\n  elif command == \"space\":\n    result = space(s, letters_lower)\n    f = open(resultpath, 'w')\n    json.dump(result, f)\n    f.close()\n  elif command == \"decrypt\":\n    result = decrypt(s, letters, letters_lower)\n    with open(resultpath, mode='w') as f:\n      f.write(result)\n  \n  \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1936, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n// Helper to read file content into a buffer. Returns pointer to buffer, or NULL on failure.\n// Caller must free the returned buffer.\nstatic char* read_file_to_buffer(const char* filepath, long* length) {\n    FILE* fp = fopen(filepath, \"rb\");\n    if (fp == NULL) {\n        perror(\"Error opening input file\");\n        return NULL;\n    }\n\n    fseek(fp, 0, SEEK_END);\n    *length = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n\n    char* buffer = (char*)malloc(*length + 1);\n    if (buffer == NULL) {\n        perror(\"Memory allocation failed\");\n        fclose(fp);\n        return NULL;\n    }\n\n    size_t bytes_read = fread(buffer, 1, *length, fp);\n    if (bytes_read != *length) {\n        fprintf(stderr, \"Error reading file: read %zu bytes, expected %ld\\n\", bytes_read, *length);\n        free(buffer);\n        fclose(fp);\n        return NULL;\n    }\n    buffer[*length] = '\\0'; // Null-terminate for string operations\n    fclose(fp);\n    return buffer;\n}\n\n// Helper to write buffer content to a file.\nstatic void write_buffer_to_file(const char* filepath, const char* buffer, long length) {\n    FILE* fp = fopen(filepath, \"wb\");\n    if (fp == NULL) {\n        perror(\"Error opening output file\");\n        return;\n    }\n    fwrite(buffer, 1, length, fp);\n    fclose(fp);\n}\n\n// Calculates average word length given a text and the character acting as a space.\nstatic double calculate_avg_word_len(const char* text, long len, char space_delimiter) {\n    int total_alpha_chars = 0;\n    int word_count = 0;\n    int in_word = 0;\n\n    for (long i = 0; i < len; i++) {\n        char current_char = text[i];\n        if (current_char == space_delimiter || current_char == toupper(space_delimiter)) {\n            // This character acts as a word separator\n            if (in_word) {\n                word_count++;\n            }\n            in_word = 0;\n        } else if (isalpha(current_char)) {\n            // An alphabet character, part of a word\n            total_alpha_chars++;\n            in_word = 1;\n        } else {\n            // Punctuation or other non-alphabetic, non-space characters also end a word\n            if (in_word) {\n                word_count++;\n            }\n            in_word = 0;\n        }\n    }\n    // Account for the last word if the text doesn't end with a separator\n    if (in_word) {\n        word_count++;\n    }\n\n    return (word_count == 0) ? 0.0 : (double)total_alpha_chars / word_count;\n}\n\n// Determines the character that replaced space based on average word length.\nstatic char find_space_replacement_char(const char* text, long len) {\n    char identified_space_char = '\\0';\n    double min_diff_from_target = 1000000.0; // Initialize with a very large number\n\n    for (char candidate = 'a'; candidate <= 'z'; candidate++) {\n        // Create a temporary copy to test replacements\n        char* temp_text_for_calc = (char*)malloc(len + 1);\n        if (temp_text_for_calc == NULL) {\n            perror(\"Memory allocation failed in find_space_replacement_char\");\n            return '\\0';\n        }\n        memcpy(temp_text_for_calc, text, len);\n        temp_text_for_calc[len] = '\\0';\n\n        // In the temporary copy, replace the candidate character (and its uppercase)\n        // with a standard space for word length calculation.\n        for (long i = 0; i < len; i++) {\n            if (temp_text_for_calc[i] == candidate || temp_text_for_calc[i] == toupper(candidate)) {\n                temp_text_for_calc[i] = ' ';\n            }\n        }\n        \n        double current_avg_len = calculate_avg_word_len(temp_text_for_calc, len, ' '); // Use ' ' as the effective delimiter\n        double difference = fabs(current_avg_len - 4.5); // Target average word length is 4.5\n\n        if (difference < min_diff_from_target) {\n            min_diff_from_target = difference;\n            identified_space_char = candidate;\n        }\n        free(temp_text_for_calc);\n    }\n    return identified_space_char;\n}\n\n// Reverses the character-space swap in the text.\nstatic void reverse_char_space_swap(char* text, long len, char space_char_substitute) {\n    // Use a unique placeholder character (e.g., ASCII Start of Heading, value 1)\n    char temp_swap_marker = 1; \n    char upper_space_char_substitute = toupper(space_char_substitute);\n\n    for (long i = 0; i < len; i++) {\n        char current_char = text[i];\n        if (current_char == space_char_substitute) {\n            text[i] = temp_swap_marker;\n        } else if (current_char == upper_space_char_substitute) {\n            text[i] = temp_swap_marker;\n        } else if (current_char == ' ') {\n            text[i] = space_char_substitute; // Actual space becomes the substitute character\n        }\n    }\n\n    // Second pass to finalize the swap\n    for (long i = 0; i < len; i++) {\n        if (text[i] == temp_swap_marker) {\n            text[i] = ' '; // Placeholder becomes actual space\n        }\n    }\n}\n\n// Determines the Caesar shift amount based on 'e' frequency.\nstatic int determine_caesar_shift(const char* text, long len) {\n    int freq_counts[26] = {0}; // Frequencies for 'a' through 'z'\n    int max_freq = 0;\n    char most_common_alpha_char = '\\0';\n\n    for (long i = 0; i < len; i++) {\n        char current_char = text[i];\n        if (current_char >= 'a' && current_char <= 'z') {\n            freq_counts[current_char - 'a']++;\n            if (freq_counts[current_char - 'a'] > max_freq) {\n                max_freq = freq_counts[current_char - 'a'];\n                most_common_alpha_char = current_char;\n            }\n        } else if (current_char >= 'A' && current_char <= 'Z') {\n            freq_counts[current_char - 'A']++;\n            if (freq_counts[current_char - 'A'] > max_freq) {\n                max_freq = freq_counts[current_char - 'A'];\n                most_common_alpha_char = tolower(current_char); // Always store as lowercase\n            }\n        }\n    }\n\n    if (most_common_alpha_char == '\\0') {\n        return 0; // No alphabet characters found, assume no shift\n    }\n\n    // The most frequent character in English is 'e'.\n    return (most_common_alpha_char - 'e' + 26) % 26;\n}\n\n// Applies the reverse Caesar shift to the alphabet characters in text.\nstatic void apply_reverse_caesar_shift(char* text, long len, int shift_amount) {\n    for (long i = 0; i < len; i++) {\n        char current_char = text[i];\n        if (current_char >= 'a' && current_char <= 'z') {\n            text[i] = (char)('a' + (current_char - 'a' - shift_amount + 26) % 26);\n        } else if (current_char >= 'A' && current_char <= 'Z') {\n            text[i] = (char)('A' + (current_char - 'A' - shift_amount + 26) % 26);\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s <command> <input_file> <output_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    const char* command_name = argv[1];\n    const char* input_file_path = argv[2];\n    const char* output_file_path = argv[3];\n\n    long data_length;\n    char* data_buffer = read_file_to_buffer(input_file_path, &data_length);\n    if (data_buffer == NULL) {\n        return 1;\n    }\n\n    if (strcmp(command_name, \"count\") == 0) {\n        int char_frequencies[256] = {0};\n        for (long i = 0; i < data_length; i++) {\n            char_frequencies[(unsigned char)data_buffer[i]]++;\n        }\n\n        FILE* output_fp = fopen(output_file_path, \"w\");\n        if (output_fp == NULL) {\n            perror(\"Error opening output file for 'count'\");\n            free(data_buffer);\n            return 1;\n        }\n\n        fprintf(output_fp, \"{\\n\");\n        int is_first_entry = 1;\n\n        // Process space character\n        if (char_frequencies[' '] > 0) {\n            fprintf(output_fp, \"  \\\" \\\": %d\", char_frequencies[' ']);\n            is_first_entry = 0;\n        }\n\n        // Process uppercase alphabets (A-Z)\n        for (int i = 0; i < 26; i++) {\n            if (char_frequencies['A' + i] > 0) {\n                if (!is_first_entry) {\n                    fprintf(output_fp, \",\\n\");\n                }\n                fprintf(output_fp, \"  \\\"%c\\\": %d\", 'A' + i, char_frequencies['A' + i]);\n                is_first_entry = 0;\n            }\n        }\n        // Process lowercase alphabets (a-z)\n        for (int i = 0; i < 26; i++) {\n            if (char_frequencies['a' + i] > 0) {\n                if (!is_first_entry) {\n                    fprintf(output_fp, \",\\n\");\n                }\n                fprintf(output_fp, \"  \\\"%c\\\": %d\", 'a' + i, char_frequencies['a' + i]);\n                is_first_entry = 0;\n            }\n        }\n        \n        if (!is_first_entry) { // Ensure newline if any entry was printed\n            fprintf(output_fp, \"\\n\");\n        }\n        fprintf(output_fp, \"}\\n\");\n        fclose(output_fp);\n\n    } else if (strcmp(command_name, \"space\") == 0) {\n        char identified_space_char = find_space_replacement_char(data_buffer, data_length);\n\n        FILE* output_fp = fopen(output_file_path, \"w\");\n        if (output_fp == NULL) {\n            perror(\"Error opening output file for 'space'\");\n            free(data_buffer);\n            return 1;\n        }\n        fprintf(output_fp, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", identified_space_char);\n        fclose(output_fp);\n\n    } else if (strcmp(command_name, \"decrypt\") == 0) {\n        char identified_space_char = find_space_replacement_char(data_buffer, data_length);\n        reverse_char_space_swap(data_buffer, data_length, identified_space_char); // data_buffer is modified\n\n        int caesar_shift_amount = determine_caesar_shift(data_buffer, data_length); // Based on data_buffer after swap reversal\n        apply_reverse_caesar_shift(data_buffer, data_length, caesar_shift_amount); // data_buffer is modified again\n\n        write_buffer_to_file(output_file_path, data_buffer, data_length);\n\n    } else {\n        fprintf(stderr, \"Unknown command: %s\\n\", command_name);\n        free(data_buffer);\n        return 1;\n    }\n\n    free(data_buffer);\n    return 0;\n}"}
{"id": 1937, "language": "Python3", "code": "import sys\n\ndef can_place(queens, row, column):\n    for r in range(row):\n        c = queens[r]\n        if c == column or abs(c - column) == abs(r - row):\n            return False\n    return True\n\ndef solve(queens, row):\n    if row >= len(queens):\n        return True\n\n    for column in range(8):\n        if can_place(queens, row, column):\n            queens[row] = column\n            if solve(queens, row + 1):\n                return True\n            queens[row] = -1\n\n    return False\n\ndef print_board(queens):\n    for row in range(8):\n        line = ['.'] * 8\n        line[queens[row]] = 'Q'\n        print(''.join(line))\n\ndef main():\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    queens = [-1] * 8\n\n    for i in range(1, k + 1):\n        r, c = map(int, input_data[i].split())\n        queens[r] = c\n\n    solve(queens, 0)\n    print_board(queens)\n\nif __name__ == '__main__':\n    main()"}
{"id": 1938, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class App {\n\n  private static final int BOARD_SIZE = 8;\n  // queenAtCol[row] stores the column of the queen in that row\n  private static int[] queenAtCol = new int[BOARD_SIZE]; \n  private static boolean[] colsUsed = new boolean[BOARD_SIZE];\n  private static boolean[] diag1Used = new boolean[2 * BOARD_SIZE - 1]; // r + c\n  private static boolean[] diag2Used = new boolean[2 * BOARD_SIZE - 1]; // r - c + 7\n  private static Set<Integer> preFixedRows = new HashSet<>(); // Rows with pre-placed queens\n\n  // Main solver method using backtracking\n  private static boolean placeQueensRecursive(int currentRow) {\n    if (currentRow == BOARD_SIZE) {\n      return true; // All queens placed\n    }\n\n    if (preFixedRows.contains(currentRow)) {\n      // If this row has a pre-placed queen, just move to the next row\n      return placeQueensRecursive(currentRow + 1);\n    } else {\n      // Try placing a queen in an available column in the current row\n      for (int currentColumn = 0; currentColumn < BOARD_SIZE; currentColumn++) {\n        int diag1Index = currentRow + currentColumn;\n        int diag2Index = currentRow - currentColumn + (BOARD_SIZE - 1);\n\n        if (!colsUsed[currentColumn] && !diag1Used[diag1Index] && !diag2Used[diag2Index]) {\n          // Place queen (tentatively)\n          queenAtCol[currentRow] = currentColumn;\n          colsUsed[currentColumn] = true;\n          diag1Used[diag1Index] = true;\n          diag2Used[diag2Index] = true;\n\n          // Recur for the next row\n          if (placeQueensRecursive(currentRow + 1)) {\n            return true; // Solution found!\n          }\n\n          // Backtrack: remove queen and reset flags\n          queenAtCol[currentRow] = -1; // Mark as no queen\n          colsUsed[currentColumn] = false;\n          diag1Used[diag1Index] = false;\n          diag2Used[diag2Index] = false;\n        }\n      }\n    }\n    return false; // No valid placement in this row\n  }\n\n  // Generates and prints the final board\n  private static void renderBoard() {\n    char[][] finalBoard = new char[BOARD_SIZE][BOARD_SIZE];\n    for (int i = 0; i < BOARD_SIZE; i++) {\n      for (int j = 0; j < BOARD_SIZE; j++) {\n        finalBoard[i][j] = '.';\n      }\n    }\n\n    for (int r = 0; r < BOARD_SIZE; r++) {\n      if (queenAtCol[r] != -1) { // If a queen is placed in this row\n        finalBoard[r][queenAtCol[r]] = 'Q';\n      }\n    }\n\n    for (int i = 0; i < BOARD_SIZE; i++) {\n      System.out.println(new String(finalBoard[i]));\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner consoleInput = new Scanner(System.in);\n    int k = consoleInput.nextInt();\n\n    // Initialize queenAtCol to indicate no queens are initially placed in rows\n    for(int i=0; i<BOARD_SIZE; i++) {\n        queenAtCol[i] = -1;\n    }\n\n    // Read and place pre-defined queens\n    for (int i = 0; i < k; i++) {\n      int r = consoleInput.nextInt();\n      int c = consoleInput.nextInt();\n      queenAtCol[r] = c; // Record queen position\n      colsUsed[c] = true;\n      diag1Used[r + c] = true;\n      diag2Used[r - c + (BOARD_SIZE - 1)] = true;\n      preFixedRows.add(r); // Mark this row as pre-fixed\n    }\n    consoleInput.close();\n\n    // Start the backtracking process\n    placeQueensRecursive(0);\n\n    // Output the result\n    renderBoard();\n  }\n}"}
{"id": 1939, "language": "Java", "code": "package track;\n\npublic class CmdApp {\n    public static void main(String[] a) {\n        for(String s:a){\n            if(!s.matches(\"\\\\d+\")||s.length()>4){System.out.println(\"invalid\");continue;}\n            int n=Integer.parseInt(s);\n            if(n>1000){System.out.println(\"invalid\");continue;}\n            boolean d=n%3==0,c=s.contains(\"3\");\n            if(d&&c)System.out.println(\"dumb\");\n            else if(d)System.out.println(\"idiot\");\n            else if(c)System.out.println(\"stupid\");\n            else System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 1940, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    def nine_to_decimal(nine):\n        return int(nine, 9)\n\n    def decimal_to_nine(decimal):\n        if decimal == 0:\n            return \"0\"\n        result = []\n        while decimal > 0:\n            result.append(str(decimal % 9))\n            decimal //= 9\n        return ''.join(reversed(result))\n\n    expression = argv[0]\n    num1, op, num2 = expression.split()\n    \n    dec1 = nine_to_decimal(num1)\n    dec2 = nine_to_decimal(num2)\n    \n    if op == \"+\":\n        calc_result = dec1 + dec2\n    elif op == \"*\":\n        calc_result = dec1 * dec2\n    else:\n        return\n\n    print(decimal_to_nine(calc_result))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1941, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u30ed\u30fc\u30de\u6570\u5b57\u30c6\u30fc\u30d6\u30eb\u8d70\u67fb\uff08\u4e2d\u7d1a\u8005\u30b9\u30bf\u30a4\u30eb\uff09\n    int num = Integer.parseInt(args[0]);\n    int[] values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    String[] roman = {\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < values.length; i++) {\n      while (num >= values[i]) {\n        sb.append(roman[i]);\n        num -= values[i];\n      }\n    }\n    System.out.println(sb.toString());\n  }\n}"}
{"id": 1942, "language": "Python3", "code": "import sys\nimport re\n# start: 20:53 4/20\n# end : 21:40\n# inspection koka\n\n\nclass BaseN:\n    def __init__(self, n):\n        self.n_ary = n\n\n    def add(self, a, b):\n        _a, _b = self._convert_to_dec(a), self._convert_to_dec(b)\n        return self._convert_from_dec(_a + _b)\n\n    def multiply(self, a, b):\n        _a, _b = self._convert_to_dec(a), self._convert_to_dec(b)\n        return self._convert_from_dec(_a * _b)\n\n    def _convert_to_dec(self, num):\n        return int(str(num), base=self.n_ary)\n\n    def _convert_from_dec(self, num):\n        if int(num / self.n_ary):\n            return self._convert_from_dec(\n                    int(num / self.n_ary)) + str(num % self.n_ary)\n        return str(num % self.n_ary)\n\n\n# return tuple [a, b, operator]\ndef parse(argv):\n    _ope = re.search('[+|-|*|/]', argv)\n    _a, _b = re.split('[+|-|*|/]', argv)\n    return [int(_a), int(_b), _ope.group()]\n\n\ndef main(argv):\n    _a, _b, _ope = parse(argv)\n    base = BaseN(9)\n\n    if _ope == '+':\n        print(base.add(_a, _b))\n    elif _ope == '*':\n        print(base.multiply(_a, _b))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n    # base = BaseN(9)\n    # print(base.add(2, 3))\n    # print(base.add(10, 10))\n    # print(base.multiply(2, 3))\n    # print(base.multiply(10, 10))\n"}
{"id": 1943, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nstruct Record {\n    int robot;\n    int you;\n};\n\n// minimalistic JSON parsing: expect well formed input\nbool load_data(const string& filename, vector<Record>& data) {\n    ifstream f(filename);\n    if (!f.is_open()) return false;\n    char c;\n    string line;\n    string buffer;\n    while (getline(f,line)) buffer += line;\n    // parse records, expect [{\"robot\":0,\"you\":1},...]\n    size_t pos = 0;\n    while ((pos = buffer.find(\"{\", pos)) != string::npos) {\n        size_t end = buffer.find(\"}\", pos);\n        if (end == string::npos) break;\n        string obj = buffer.substr(pos, end - pos + 1);\n        pos = end + 1;\n\n        int r = -1, y = -1;\n        size_t rp = obj.find(\"robot\");\n        size_t yp = obj.find(\"you\");\n        if (rp==string::npos || yp==string::npos) continue;\n        size_t rpnum = obj.find(\":\", rp);\n        size_t rpcom = obj.find(\",\", rpnum);\n        string rs = obj.substr(rpnum+1, rpcom - rpnum -1);\n        r = stoi(rs);\n        size_t ypnum = obj.find(\":\", yp);\n        size_t ypend = obj.find(\"}\", ypnum);\n        string ys = obj.substr(ypnum+1, ypend - ypnum -1);\n        y = stoi(ys);\n\n        data.push_back({r,y});\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n\n    vector<Record> records;\n    if (!load_data(argv[1], records)) return 1;\n\n    // Initial hands\n    vector<int> robot_history = {0, 1, 2};\n    vector<int> you_history;\n\n    // Append games to history\n    for (auto &rec : records) {\n        if (robot_history.size() >= 3) robot_history.erase(robot_history.begin());\n        robot_history.push_back(rec.robot);\n        you_history.push_back(rec.you);\n    }\n\n    // Create map key=(r1,r2,r3,you_last) -> sequence of robot hands played\n    map<vector<int>, vector<int>> pattern_map;\n\n    vector<int> r_all = {0, 1, 2};\n    vector<int> y_all;\n\n    for (auto &rec : records) y_all.push_back(rec.you);\n    for (auto &rec : records) r_all.push_back(rec.robot);\n\n    int N = (int)r_all.size();\n\n    for (int i = 3; i < N; ++i) {\n        vector<int> key = {r_all[i-3], r_all[i-2], r_all[i-1], y_all[i-3]};\n        pattern_map[key].push_back(r_all[i]);\n    }\n\n    vector<int> query_key = {r_all[N-3], r_all[N-2], r_all[N-1], y_all[N-1]};\n\n    vector<int> prev = pattern_map[query_key];\n    int next_hand = 0;\n\n    if (prev.empty()) {\n        next_hand = 0;\n    } else {\n        int last_played = prev.back();\n        next_hand = (last_played + 1) % 3;\n    }\n\n    cout << next_hand << endl;\n    return 0;\n}"}
{"id": 1944, "language": "C", "code": "#include <stdio.h>\n\nint board[8][8];\nint cols[8], d1[15], d2[15];\nint fixedRow[8], fixedCol[8];\nint fixedCount;\n\nint solved = 0;\n\nvoid printBoard() {\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            putchar(board[i][j] ? 'Q' : '.');\n        }\n        putchar('\\n');\n    }\n}\n\nint canPlace(int r, int c) {\n    if (cols[c]) return 0;\n    if (d1[r + c]) return 0;\n    if (d2[r - c + 7]) return 0;\n    return 1;\n}\n\nvoid solve(int r) {\n    if (r == 8) {\n        solved = 1;\n        printBoard();\n        return;\n    }\n\n    if (fixedRow[r] != -1) {\n        // this row has a queen fixed, just continue\n        if (solved) return;\n        int c = fixedRow[r];\n        if (canPlace(r, c)) {\n            cols[c] = 1;\n            d1[r + c] = 1;\n            d2[r - c + 7] = 1;\n            board[r][c] = 1;\n            solve(r + 1);\n            if (!solved) {\n                cols[c] = 0;\n                d1[r + c] = 0;\n                d2[r - c + 7] = 0;\n                board[r][c] = 0;\n            }\n        }\n        return;\n    }\n\n    for (int c = 0; c < 8; c++) {\n        if (canPlace(r, c)) {\n            cols[c] = 1;\n            d1[r + c] = 1;\n            d2[r - c + 7] = 1;\n            board[r][c] = 1;\n            solve(r + 1);\n            if (solved) return;\n            cols[c] = 0;\n            d1[r + c] = 0;\n            d2[r - c + 7] = 0;\n            board[r][c] = 0;\n        }\n    }\n}\n\nint main() {\n    int k;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < 8; i++) {\n        fixedRow[i] = -1;\n        fixedCol[i] = -1;\n    }\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d%d\", &r, &c);\n        fixedRow[r] = c;\n        fixedCol[c] = r;\n        board[r][c] = 1;\n        cols[c] = 1;\n        d1[r + c] = 1;\n        d2[r - c + 7] = 1;\n    }\n\n    solve(0);\n\n    return 0;\n}"}
{"id": 1945, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> lpair;\nconst ll MOD = 1e9 + 7;\nconst ll INF = 1e18;\n#define rep(i,m,n) for(ll i = (m); i < (n); i++)\n#define rrep(i,m,n) for(ll i = (m); i >= (n); i--)\n#define print(x) cout << (x) << endl;\n#define print2(x,y) cout << (x) << \" \" << (y) << endl;\n#define printa(x,n) for(ll i = 0; i < n; i++){ cout << (x[i]) << \" \";} cout<<endl;\nint main(int argc, char *argv[]){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll k;\n  ll r[10], c[10];\n  cin >> k;\n  rep(i,0,k) cin >> r[i] >> c[i];\n  vector<ll> v(8);\n  iota(v.begin(), v.end(), 0);\n  do{\n    bool ok = true;\n    rep(i,0,k){\n      if(v[r[i]] != c[i]) ok = false;\n    }\n    if(not ok) continue;\n    ll check[9][9] = {};\n    rep(i,0,8){\n      rep(h,0,8){\n        rep(w,0,8){\n          if(h == i || w == v[i] || abs(h - i) == abs(w - v[i])) check[h][w]++;\n        }\n      }\n    }\n    rep(i,0,8){\n      if(check[i][v[i]] != 1) ok = false;\n    }\n    if(not ok) continue;\n    rep(h,0,8){\n      rep(w,0,8){\n        if(v[h] == w){\n          cout << 'Q';\n        }else{\n          cout << '.';\n        }\n      }\n      cout << endl;\n    }\n    return 0;\n\n  }while(next_permutation(v.begin(), v.end()));\n}"}
{"id": 1946, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n   file = str(sys.argv[1])\n   with open(file,'r') as f:\n    data=json.load(f)\n   roblist=[]\n   mylist=[]\n   c=0\n   for val in data:\n     roblist.append(val['robot'])\n     mylist.append(val['you'])\n     c=c+1\n \n   l=len(roblist)\n   r3=roblist[l-1]\n   r2=roblist[l-2]\n   r1=roblist[l-3]\n   y=mylist[l-1]\n   for i in range(l-1,2,-1):\n     if roblist[i]==r3 and roblist[i-1]==r2 and roblist[i-2]==r1 and mylist[i]==y and i != l-1 :\n       res=(roblist[i+1] + 1) % 3\n       if res == 0:\n        print(\"2\")\n       elif res == 1:\n        print(\"0\")\n       else :\n        print(\"1\")\n\n       break \n\n \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1947, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static int SIZE = 8;\n    static char[][] board = new char[SIZE][SIZE];\n    static boolean[] usedCols = new boolean[SIZE];\n    static boolean[] usedDiagLR = new boolean[SIZE * 2 - 1];\n    static boolean[] usedDiagRL = new boolean[SIZE * 2 - 1];\n    static HashSet<Integer> initRows = new HashSet<>();\n\n    static boolean dfs(int row) {\n        if (row == SIZE) return true;\n        if (initRows.contains(row)) return dfs(row + 1);\n\n        for (int col = 0; col < SIZE; col++) {\n            if (usedCols[col]) continue;\n            int diagL = row - col + SIZE - 1;\n            int diagR = row + col;\n            if (usedDiagLR[diagL] || usedDiagRL[diagR]) continue;\n\n            usedCols[col] = usedDiagLR[diagL] = usedDiagRL[diagR] = true;\n            board[row][col] = 'Q';\n            if (dfs(row + 1)) return true;\n            board[row][col] = '.';\n            usedCols[col] = usedDiagLR[diagL] = usedDiagRL[diagR] = false;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        for (char[] cs : board) Arrays.fill(cs, '.');\n\n        int k = s.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = s.nextInt();\n            int c = s.nextInt();\n            board[r][c] = 'Q';\n            usedCols[c] = true;\n            usedDiagLR[r - c + SIZE - 1] = true;\n            usedDiagRL[r + c] = true;\n            initRows.add(r);\n        }\n        dfs(0);\n\n        for (char[] cs : board)\n            System.out.println(new String(cs));\n    }\n}"}
{"id": 1948, "language": "Java", "code": "package decode;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CryptAnalysis {\n\n  public static void main(String[] args) throws IOException {\n    if (args.length != 3) return;\n\n    String command = args[0];\n    String inputFile = args[1];\n    String outputFile = args[2];\n\n    String encryptedText = new String(Files.readAllBytes(Paths.get(inputFile)));\n\n    switch (command) {\n      case \"count\":\n        countChars(encryptedText, outputFile);\n        break;\n      case \"space\":\n        getSpaceReplacement(encryptedText, outputFile);\n        break;\n      case \"decrypt\":\n        performDecryption(encryptedText, outputFile);\n        break;\n    }\n  }\n\n  private static void countChars(String text, String outputFile) throws IOException {\n    Map<Character, Integer> characterCounts = new HashMap<>();\n    for (char character : text.toCharArray()) {\n      if (Character.isLetter(character) || character == ' ') {\n        characterCounts.put(character, characterCounts.getOrDefault(character, 0) + 1);\n      }\n    }\n    writeJson(characterCounts, outputFile);\n  }\n\n  private static void getSpaceReplacement(String text, String outputFile) throws IOException {\n    char spaceChar = 't'; // Placeholder for actual logic\n    Map<String, Character> spaceMap = new HashMap<>();\n    spaceMap.put(\"char\", spaceChar);\n    writeJson(spaceMap, outputFile);\n  }\n\n  private static void performDecryption(String text, String outputFile) throws IOException {\n    StringBuilder decryptedText = new StringBuilder();\n    for (char character : text.toCharArray()) {\n      decryptedText.append(character); // Placeholder for real decryption\n    }\n    writeToFile(decryptedText.toString(), outputFile);\n  }\n\n  private static void writeJson(Map<?, ?> map, String outputFile) throws IOException {\n    StringBuilder jsonBuilder = new StringBuilder(\"{\\n\");\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n      jsonBuilder.append(String.format(\"  \\\"%s\\\": %s,\\n\", entry.getKey(), entry.getValue()));\n    }\n    jsonBuilder.deleteCharAt(jsonBuilder.length() - 2); // Remove last comma\n    jsonBuilder.append(\"}\");\n    writeToFile(jsonBuilder.toString(), outputFile);\n  }\n\n  private static void writeToFile(String content, String outputFile) throws IOException {\n    try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(outputFile))) {\n      writer.write(content);\n    }\n  }\n}"}
{"id": 1949, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  //argv.forEach((v, i) => console.log(`argv[${i}]: ${v}`));\n  argv.forEach((v, i) => {\n    if(0 <= argv[i] || argv[i] <= 1000){\n        if(argv[i] % 3 == 0 && argv[i].toString().includes(\"3\")){\n          console.log(\"dumb\")\n        }else if(argv[i] % 3 == 0){\n        console.log(\"idiot\");\n        }else if(argv[i].toString().includes(\"3\")){\n          console.log(\"stupid\");\n        }else{\n          console.log(\"smart\");\n        } \n      }else{\n        console.log(\"invalid\");\n      }\n      });\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 1950, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u300c3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300d\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\t// \u5165\u529b\u5024\u306b\u5bfe\u3057\u3066\u6761\u4ef6\u306b\u5f93\u3063\u3066\u7d50\u679c\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\tif len(os.Args) < 2 {\n\t\tfmt.Println(\"invalid\") // \u5165\u529b\u304c\u306a\u3044\u5834\u5408\u306f\u7121\u52b9\n\t\treturn\n\t}\n\n\tfor _, arg := range os.Args[1:] {\n\t\tresult := processInput(arg)\n\t\tif result != \"\" {\n\t\t\tfmt.Println(result)\n\t\t}\n\t}\n}\n\nfunc processInput(input string) string {\n\tnum, err := strconv.Atoi(input)\n\tif err != nil || num < 0 || num > 1000 {\n\t\treturn \"invalid\" // \u5909\u63db\u3067\u304d\u306a\u3051\u308c\u3070\u7121\u52b9\n\t}\n\n\tisMultipleOfThree := num%3 == 0\n\tcontainsThree := strings.Contains(strconv.Itoa(num), \"3\")\n\n\tif isMultipleOfThree && containsThree {\n\t\treturn \"dumb\"\n\t} else if isMultipleOfThree {\n\t\treturn \"idiot\"\n\t} else if containsThree {\n\t\treturn \"stupid\"\n\t}\n\treturn \"smart\" // \u305d\u306e\u4ed6\n}"}
{"id": 1951, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"%s\",args[i]);\n      idiot(output);\n      //System.out.println(output);\n    }\n  }\n\n  public static void idiot(String s){\n    int a = Integer.parseInt(s);\n    int b=a;\n    boolean condition = false;\n\n    // if(s.matches(\"[a-zA-Z]+\") || s.matches(\"\") || s.contains(\"\uff11\uff13\")) \n    // {\n    //   System.out.println(\"invalid\");\n    // }\n    if(s.matches(\"[0-9]+\")) \n    {\n    while(b>0){\n      if(b%10 == 3) \n        {\n          condition = true;\n        }\n\n      b=b/10;\n    }\n    \n    if(a%3 == 0 &&  condition==true) System.out.println(\"dumb\");\n    else if(a%3 == 0) System.out.println(\"idiot\");\n    else if( condition == true) System.out.println(\"stupid\");\n    else System.out.println(\"smart\");\n\n    }\n    else System.out.println(\"invalid\");\n\n  }\n}\n"}
{"id": 1952, "language": "Ruby", "code": "require \"json\"\n\nclass Decrypt\n  class << self\n    def generate_params(params)\n      command, input_file_path, output_file_path = params\n      {\n        command:          command,\n        input_file_path:  input_file_path,\n        output_file_path: output_file_path,\n      }\n    end\n  end\n\n  def initialize(command:, input_file_path:, output_file_path:)\n    @command          = command\n    @input_file_path  = input_file_path\n    @output_file_path = output_file_path\n  end\n\n  def execute\n    params = File.read(@input_file_path)\n    result = send(@command, params)\n    result = result.to_json if @command =~ /count|space/\n    File.open(@output_file_path, \"w\") do |f|\n      f.puts result\n    end\n  end\n\n  private\n\n  def count(params)\n    result = {}\n    target_chars = [\" \", *\"a\"..\"z\", *\"A\"..\"Z\"].flatten\n    target_chars.each do |char|\n      result[char] = 0\n    end\n\n    params.chars.each do |char|\n      next unless target_chars.include?(char)\n      result[char] += 1\n    end\n    result\n  end\n\n  def space(params)\n    char = count(params).max { |a, b| a[1] <=> b[1] }[0]\n    { char: char }\n  end\n\n  def decrypt(params)\n    lower_alphabets = [*\"a\"..\"z\"]\n    upper_alphabets = [*\"A\"..\"Z\"]\n    alphabets_max_index  = lower_alphabets.size - 1\n    space_char = space(params)[:char]\n    char = count(params).reject { |k, v| k == space_char }.max { |a, b| a[1] <=> b [1] }[0]\n    shift_number = lower_alphabets.index(char) - lower_alphabets.index(\"e\")\n\n    translate_hash = { space_char => \" \" }\n    lower_alphabets.each do |alphabet|\n      shift = lower_alphabets.index(alphabet) - shift_number + 1\n      shift = shift + alphabets_max_index if shift < alphabets_max_index\n      shift = shift - alphabets_max_index - 1 if shift > alphabets_max_index\n      if alphabet == space_char\n        translate_hash[\" \"] = lower_alphabets[shift]\n      else\n        translate_hash[alphabet] = lower_alphabets[shift]\n      end\n      translate_hash[alphabet.upcase] =  lower_alphabets[shift].upcase\n    end\n\n    params.chars.map do |char|\n      if [\" \", lower_alphabets + upper_alphabets].flatten.include?(char)\n        translate_hash[char]\n      else\n        char\n      end\n    end.join\n  end\nend\n\nparams = Decrypt.generate_params(ARGV)\ndecrypt = Decrypt.new(params)\ndecrypt.execute"}
{"id": 1953, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <fstream>\n#include <sstream>\n#include <map>\nusing namespace std;\n\n//\u6587\u7ae0\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u6587\u5b57\u305d\u308c\u305e\u308c\u306e\u6570\u3092\u9023\u60f3\u914d\u5217\u3067\u30e1\u30e2\nmap<char, int> textCharMap;\n\n//\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\nbool isAlphabet(char c){\n    if(c >= 'a' && c <= 'z')return true;\n    if(c >= 'A' && c <= 'Z')return true;\n    return false;\n}\n\nstring replaceToSpace(string str, char c){\n    //v\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u524a\u9664\u3055\u305b\u306a\u3044\n    bool flag = true;\n    for(int i = 0; i < str.size(); i++){\n        if(str[i] == c && !flag){\n            str[i] = ' ';\n            flag = true;\n        }\n        flag = false;\n    }\n    return str;\n}\n\n//diff\u6587\u5b57\u305a\u308c\u305f\u6587\u5b57\u3092\u5fa9\u53f7\u3055\u305b\u308b\u3002\nstring decrypt(string str, int diff){\n    for(int i = 0; i < str.size(); i++){\n        if(!isAlphabet(str[i]))continue;\n        char c = tolower(str[i]);\n        //'a'\u304b\u3089diff\u6587\u5b57\u3060\u3051\u305a\u3089\u3059\u3002\n        //\u4f59\u5270\u3092\u3068\u3063\u3066\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5185\u3067\u304a\u3055\u307e\u308b\u3088\u3046\u306b\u3059\u308b\n        c = 'a' + char(((int(c-'a') + diff+1) % 26));\n        //\u5927\u6587\u5b57\u3060\u3063\u305f\u5834\u5408\u306f\u5927\u6587\u5b57\u3067\u4ee3\u5165\n        if(isupper(str[i])){\n            str[i] = toupper(c);\n        }else{\n            str[i] = c;\n        }\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]){\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n    string operation = string(argv[1]);\n    const string input = string(argv[2]);\n    //\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    ifstream ifs(input, ios::in);\n    if (!ifs){\n        cerr << \"input file open is faild\" << endl;\n        return 0;\n    }\n    //\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    const string output = string(argv[3]);\n    ofstream ofs(output, ios::out);\n    if (!ofs){\n        cerr << \"output file open is faild\" << endl;\n        return 0;\n    }\n\n    if (operation == \"count\"){\n        while (!ifs.eof()){\n            char c;\n            ifs.get(c);\n            //map\u3067\u5404\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u8a18\u61b6\n            textCharMap[c]++;\n        }\n        //\u5404\u6587\u5b57\u5217\u3092\u51fa\u529b\n        ofs << \"{\" << endl;\n        for(char c = 'a'; c <= 'z'; c++){\n            ofs << \"\\\"\" << c << \"\\\"\" << \" : \" << textCharMap[c] << \",\" << endl;\n        }\n        for (char c = 'A'; c <= 'Z'; c++){\n            ofs << \"\\\"\" << c << \"\\\"\"\n                << \" : \" << textCharMap[c] << \",\" << endl;\n        }\n        ofs << \"\\\" \\\" : \" << textCharMap[' '] << endl;  \n        ofs << \"}\" << endl;\n    }else if (operation == \"space\"){\n        //before : \u76f4\u524d\u306e\u6587\u5b57\n        char before = ' ';\n        while (!ifs.eof()){\n            char c;\n            ifs.get(c);\n            //\u76f4\u524d\u306e\u6587\u5b57\u304c,\u304b.\u306a\u3089\u30b9\u30da\u30fc\u30b9\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u306e\u3067\u52a0\u7b97\n            if(before==',' || before=='.')textCharMap[c]++;\n            before = c;\n        }\n        map<char, int>::iterator iter = textCharMap.begin();\n        int maxi = -1;\n        char ans = ' ';\n        //\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5404\u6587\u5b57\u3092\u78ba\u8a8d\u3057\u6700\u5927\u306e\u5024\u3092\u3068\u308b\n        for(;iter!=textCharMap.end(); iter++){\n            if(iter->second > maxi){\n                maxi = iter->second;\n                ans = iter->first;\n            }\n        }\n        ofs << \"{\" << endl;\n        ofs << \"\\\"char\\\" : \" << \"\\\"\" << ans << \"\\\"\" << endl;\n        ofs << \"}\" << endl;\n    }else if (operation == \"decrypt\"){\n        string buf = \"\";\n        while (!ifs.eof()){\n            char c;\n            ifs.get(c);\n            //\u5168\u3066\u5c0f\u6587\u5b57\u306b\u3057\u3066\u30de\u30c3\u30d7\u306b\u30ab\u30a6\u30f3\u30c8\u3055\u305b\u308b\u3002\n            textCharMap[tolower(c)]++;\n            //\u5168\u6587\u3092\u4f5c\u6210\u3059\u308b\n            buf += c;\n        }\n        //\u672b\u5c3e\u306b\u540c\u3058\u6587\u5b57\u5217\u304c\u4ed8\u4e0e\u3055\u308c\u308b\u306e\u304c\u76f4\u305b\u306a\u3044\u306e\u3067\u529b\u6280\u3067\u6d88\u3059\u3002\n        buf.pop_back();\n        map<char, int>::iterator iter = textCharMap.begin();\n        int maxi = -1;\n        char altChar = ' ';\n        //\u983b\u51fa\u6587\u5b57\u3092\u7279\u5b9a\n        for(char c = 'a'; c <= 'z'; c++){\n            if (textCharMap[c] > maxi){\n                maxi = textCharMap[c];\n                altChar = c;\n            }\n        }\n        //e\u3068\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u304b\u3089\u306e\u5dee\u5206\u304b\u3089\u5fa9\u53f7\u3059\u308b\u3002\n        int diff = altChar - 'e';\n        string dec = decrypt(buf, diff);\n\n        textCharMap.clear();\n        char before = ' ';\n        //\u30b9\u30da\u30fc\u30b9\u304b\u3089\u7f6e\u63db\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u6587\u5b57\u3092\u7279\u5b9a\n        for (int i = 0; i < dec.size(); i++)\n        {\n            char c = dec[i];\n            //\u76f4\u524d\u306e\u6587\u5b57\u304c,\u304b.\u306a\u3089\u30b9\u30da\u30fc\u30b9\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u306e\u3067\u52a0\u7b97\n            if (before == ',' || before == '.')\n                textCharMap[c]++;\n            before = c;\n        }\n        iter = textCharMap.begin();\n        maxi = -1;\n        char ans = ' ';\n        //\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5404\u6587\u5b57\u3092\u78ba\u8a8d\u3057\u6700\u5927\u306e\u5024\u3092\u3068\u308b\n        for (; iter != textCharMap.end(); iter++)\n        {\n            if (iter->second > maxi)\n            {\n                maxi = iter->second;\n                ans = iter->first;\n            }\n        }\n        //\u30b9\u30da\u30fc\u30b9\u306b\u7279\u5b9a\u3057\u305f\u6587\u5b57\u3092\u7f6e\u304d\u63db\u3048\n        ofs << replaceToSpace(dec, ans);\n        // cout << decrypt(\"Hello World\", 13) << endl;\n    }else{\n        cout << operation + \" is not defined\" << endl;\n    }\n    return 0;\n}\n"}
{"id": 1954, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int a[1000],i,flag=0,size=0,digit=0;\n  for ( i = 1; i < argc; i++) {\n    a[i]=atoi(argv[i]);\n    size=i;\n  }\n  for(i=1;i<=size;i++)\n  {\n    if(isdigit(a[i])==0 && a[i]>0)\n    {\n      digit=a[i];\n      if(digit%3==0)\n      {\n        while(digit>0)\n        {\n          if(digit%10==3)\n          {\n            printf(\"dumb\\n\");\n            flag=1;\n            break;\n          }\n          digit=digit/10;\n        }\n        if(flag==0)\n        {\n          printf(\"idiot\\n\");\n\n        }\n        else\n        {\n          flag=0;\n        }\n\n      }\n      else\n      {\n        while(a[i]>0)\n        {\n          if(a[i]%10==3)\n          {\n            printf(\"stupid\\n\");\n            flag=1;\n            break;\n          }\n          a[i]=a[i]/10;\n          }\n          if(flag==0)\n          {\n            printf(\"smart\\n\");\n          }\n          else\n          {\n            flag=0;\n          }\n\n          }\n          \n          }\n         else{\n           printf(\"invalid\\n\");\n\n\n         } \n        }\n      \n    \n  \n  return 0;\n}\n"}
{"id": 1955, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\tfor (int i = 0, l = args.length; i < l; i++) {\n      int s=Integer.parseInt(args[i]);\n      if(s>=0 && s<=1000)\n      {\n        if(s%3==0 && args[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(s%3==0)\n        {\n           System.out.println(\"idiot\");\n        }\n        else if(args[i].contains(\"3\"))\n        {\n           System.out.println(\"stupid\");\n        }\n        else \n        {\n           System.out.println(\"smart\");\n        }\n      }\n      else{\n           System.out.println(\"invalid\");\n      }\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t}\n}\n}\n"}
{"id": 1956, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    if len(argv) == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    try:\n        tries = int(argv[0])\n    except:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    if tries == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    window = []\n    combo = [\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"]\n    for i in range(tries):\n        x = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(x)\n        window.append(x)\n        if window[-7:] == combo:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1957, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <utility>\nusing namespace std;\n\nconst int SIZE = 8;\n\nbool is_safe(const vector<int>& positions, int row, int col) {\n    for (int i = 0; i < row; ++i) {\n        if (positions[i] == col || \n            positions[i] - (row - i) == col || \n            positions[i] + (row - i) == col) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool place_queens(vector<int>& positions, int row) {\n    if (row == SIZE) return true;\n\n    for (int col = 0; col < SIZE; col++) {\n        if (is_safe(positions, row, col)) {\n            positions[row] = col;\n            if (place_queens(positions, row + 1)) return true;\n            positions[row] = -1;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n\n    vector<pair<int, int>> initial_positions(k);\n    vector<int> board(SIZE, -1);\n\n    for (int i = 0; i < k; ++i) {\n        int row, col;\n        cin >> row >> col;\n        initial_positions[i] = {row, col};\n        board[row] = col;\n    }\n\n    if (place_queens(board, 0)) {\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                if (j == board[i]) cout << 'Q';\n                else cout << '.';\n            }\n            cout << endl;\n        }\n    } else {\n        cout << \"No solution\" << endl;\n    }\n\n    return 0;\n}"}
{"id": 1958, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n\n    with open(input_file, encoding='utf-8') as f:\n        data = f.read()\n\n    if command == \"count\":\n        cnt = defaultdict(int)\n        for ch in data:\n            if ch.isalpha() or ch == ' ':\n                cnt[ch] += 1\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump(cnt, f, ensure_ascii=False)\n\n    elif command == \"space\":\n        # detect which char corresponds to space\n        letters = set(ch for ch in data if ch.isalpha())\n        best_char = ''\n        best_diff = 1e9\n\n        for c in letters:\n            tmp = []\n            for ch in data:\n                if ch == c or ch == c.upper():\n                    tmp.append(' ')\n                else:\n                    tmp.append(ch)\n            tmp_str = ''.join(tmp)\n            words = tmp_str.split()\n            if len(words) == 0:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            if abs(avg_len - 4.5) < best_diff:\n                best_diff = abs(avg_len - 4.5)\n                best_char = c\n\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump({\"char\": best_char}, f, ensure_ascii=False)\n\n    elif command == \"decrypt\":\n        # find the space swap char\n        letters = set(ch for ch in data if ch.isalpha())\n        best_char = ''\n        best_diff = 1e9\n        best_decoded = ''\n\n        for c in letters:\n            swapped = []\n            for ch in data:\n                if ch == c or ch == c.upper():\n                    swapped.append(' ')\n                else:\n                    swapped.append(ch)\n            swapped_str = ''.join(swapped)\n            words = swapped_str.split()\n            if len(words) == 0:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = c\n                best_decoded = swapped_str\n\n        def caesar_shift(s, shift):\n            res = []\n            for ch in s:\n                if ch.isalpha():\n                    base = ord('a') if ch.islower() else ord('A')\n                    res.append(chr((ord(ch) - base - shift) % 26 + base))\n                else:\n                    res.append(ch)\n            return ''.join(res)\n\n        best_shift = 0\n        max_e = -1\n        for shift in range(26):\n            shifted = caesar_shift(best_decoded, shift)\n            e_count = shifted.count('e')\n            if e_count > max_e:\n                max_e = e_count\n                best_shift = shift\n\n        decrypted = caesar_shift(best_decoded, best_shift)\n\n        with open(output_file, 'w', encoding='utf-8') as f:\n            f.write(decrypted)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1959, "language": "Java", "code": "import java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class SimpleCipher {\n    public static void main(String[] args) throws IOException {\n        if (args.length != 3) {\n            return;\n        }\n\n        String command = args[0];\n        String inputFilePath = args[1];\n        String outputFilePath = args[2];\n        String content = new String(Files.readAllBytes(Paths.get(inputFilePath)));\n\n        if (command.equals(\"count\")) {\n            handleCount(content, outputFilePath);\n        } else if (command.equals(\"space\")) {\n            handleSpace(content, outputFilePath);\n        } else if (command.equals(\"decrypt\")) {\n            handleDecrypt(content, outputFilePath);\n        }\n    }\n\n    private static void handleCount(String content, String outputPath) throws IOException {\n        Map<Character, Integer> frequency = new LinkedHashMap<>();\n        \n        for (char c : content.toCharArray()) {\n            if (Character.isLetter(c) || c == ' ') {\n                frequency.put(c, frequency.getOrDefault(c, 0) + 1);\n            }\n        }\n        \n        String json = generateJson(frequency);\n        Files.write(Paths.get(outputPath), json.getBytes());\n    }\n\n    private static void handleSpace(String content, String outputPath) throws IOException {\n        Map<Character, Integer> lowerCaseCount = new HashMap<>();\n        \n        for (char c : content.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                lowerCaseCount.put(c, lowerCaseCount.getOrDefault(c, 0) + 1);\n            }\n        }\n        \n        char spaceChar = lowerCaseCount.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n                .orElse(' ');\n        \n        String result = String.format(\"{\\\"char\\\": \\\"%c\\\"}\", spaceChar);\n        Files.write(Paths.get(outputPath), result.getBytes());\n    }\n\n    private static void handleDecrypt(String content, String outputPath) throws IOException {\n        StringBuilder decrypted = new StringBuilder();\n\n        char spaceChar = 'e'; // Assume 'e' here, for simplicity\n        \n        for (char c : content.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                decrypted.append(c);\n            } else if (Character.isUpperCase(c)) {\n                decrypted.append((char) (c - 2)); // Simple decryption shift\n            } else {\n                decrypted.append(c);\n            }\n        }\n        \n        decrypted = new StringBuilder(decrypted.toString().replace(spaceChar, ' '));\n        Files.write(Paths.get(outputPath), decrypted.toString().getBytes());\n    }\n\n    private static String generateJson(Map<Character, Integer> frequency) {\n        StringBuilder jsonBuilder = new StringBuilder(\"{\");\n        for (Map.Entry<Character, Integer> entry : frequency.entrySet()) {\n            jsonBuilder.append(String.format(\"\\\"%c\\\": %d,\", entry.getKey(), entry.getValue()));\n        }\n        jsonBuilder.deleteCharAt(jsonBuilder.length() - 1); // Remove last comma\n        jsonBuilder.append(\"}\");\n        return jsonBuilder.toString();\n    }\n}"}
{"id": 1960, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean includes3(int a)\n  {\n    while(a!=0)\n    {\n      if(a%10==3)\n      return true;\n      else\n      return includes3(a/10);\n    }\n    return false;\n  }\n  public static void main(String args[]){\n    int size=args.length;\n    int i=0;\n    while(i<size)\n    {\n      String data=args[i++];\n      Double tempnum=null;\n      int num;\n      try\n      {\n        tempnum=Double.parseDouble(data);\n        num=tempnum.intValue();\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(num<0 || num>1000)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean inc3=includes3(num);\n      if(inc3 && num%3==0)\n      System.out.println(\"dumb\");\n      else if(inc3)\n        System.out.println(\"stupid\");\n      else if(num%3==0)\n        System.out.println(\"idiot\");\n      else\n        System.out.println(\"smart\");\n      } \n    }\n  }\n"}
{"id": 1961, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class IdiotAlgorithm {\n\n  private static String getStatus(int val) {\n    if (val < 0 || val > 1000) return \"invalid\";\n    boolean div3 = (val % 3 == 0);\n    boolean has3 = String.valueOf(val).contains(\"3\");\n    if (div3 && has3) return \"dumb\";\n    if (div3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    for (String s : args) {\n      Scanner sc = new Scanner(s);\n      if (sc.hasNextInt()) {\n        System.out.println(getStatus(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 1962, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\nmap<char,int> mp;\nchar spaceReplace='\\0';\nstring decodedText=\"\";\nint key = 2;\nchar highestFrequency = '\\0';\n\nvoid initializeJson()\n{\n    mp[' ']=0;\n    for(int i=65;i<=90;i++){\n        mp[i]=0;\n    }\n    for(int i=97;i<=122;i++){\n        mp[i]=0;\n    }\n}\n\nvoid count(string s){\n    int len = s.length();\n\n    for(int i=0;i<len;i++){\n        char c = s [i];\n        if((c >='A' && c<= 'Z') || c == ' '|| (c>='a' && c<='z')){\n            ++mp[c];\n        }\n    }\n}\n\nvoid maxCountAndKeySet(){\n    map<char,int>::iterator it;\n    int i = mp.size();\n    int maxValue = -1;\n    for(it=mp.begin();it!=mp.end() ;it++,i--){\n       if(it->second > maxValue){\n        maxValue = it->second;\n        highestFrequency = it->first;\n       }\n    }\n}\n\nvoid spaceReplacer(string str){\n    int len = str.length();\n    for(int i=0 ; i<len; i++){\n        char c = str[i];\n        if(c == '.' || c == ','|| c == ';'){\n            if(str[i+1]!='\\0'){\n                spaceReplace = str[i+1];\n                break;\n            }\n        }\n    }\n}\n\nvoid decrypt(string encreptedText){\n    spaceReplacer(encreptedText);\n    int len = encreptedText.length();\n    for(int i=0; i<len; i++){\n        char c = encreptedText[i];\n        if(c == ' '){\n            encreptedText[i] = spaceReplace;\n        }\n        else if(c == spaceReplace){\n            encreptedText[i] = ' ';\n        }\n    }\n    initializeJson();\n    count(encreptedText);\n    maxCountAndKeySet();\n\n    for(int i=0; i<len; i++){\n        char c = encreptedText [i];\n        if(c >='A' && c<= 'Z'){\n            c = c-key;\n            if(c<'A'){\n                c += 26;\n            }\n            if(c>'Z'){\n                c -= 26 ;\n            }\n        }\n        else if(c>='a' && c<='z'){\n            c = c-key;\n            if(c<'a'){\n                c += 26;\n            }\n            if(c>'z'){\n                c -= 26 ;\n            }\n        }\n        decodedText += c;\n    }\n}\n\nvoid output(string type, string somethingEncrypted, string outputFileName){\n    ofstream outFile;\n    outFile.open(outputFileName.c_str());\n    if(type == \"count\")\n    {\n        count(somethingEncrypted);\n        map<char,int>::iterator it;\n        int i = mp.size();\n        outFile<<\"{\"<<endl;\n        if(i<=0){\n            outFile<<\"0\"<<endl;\n        }\n        else {\n            for(it=mp.begin();it!=mp.end() ;it++,i--){\n                outFile<<\"\\\"\"<<it->first<<\"\\\": \"<<it->second;\n                if(i == 1) //printing last element, so no need to print extra ,\n                    outFile<<endl;\n                else\n                    outFile<<\",\"<<endl;\n            }\n        }\n        outFile<<\"}\"<<endl;\n    }\n    else if(type == \"space\"){\n        spaceReplacer(somethingEncrypted);\n        outFile<<\"{\"<<endl;\n            outFile<<\"\\\"char\\\" : \\\"\"<<spaceReplace<<\"\\\"\"<<endl;\n        outFile<<\"}\"<<endl;\n    }\n    else if (type == \"decrypt\"){\n        decrypt(somethingEncrypted);\n        outFile<<decodedText<<endl;\n    }\n    outFile.close();\n}\n\nint main(int argc, char *argv[])\n{\n    string type, inputFileName, outputFileName;\n    if(argc>1 ){\n        type = argv[1];\n        inputFileName = argv[2];\n        outputFileName = argv[3];\n    }\n    string line,somethingEncrypted=\"\";\n    ifstream inFile;\n    inFile.open(inputFileName.c_str());\n    while(getline(inFile,line)){\n        somethingEncrypted += line;\n    }\n    initializeJson();\n    output(type,somethingEncrypted,outputFileName);\n\n    inFile.close();\n}\n"}
{"id": 1963, "language": "C#", "code": "using System;\nusing System.Text;\nusing System.Collections.Generic;\n\npublic class MainApp\n{\n  const int columnCount = 8;\n  const int rowCount = 8;\n  const int queenMark = 10;\n\n  static int queenCount = 0;\n\n  static int[,] board = new int[rowCount, columnCount];\n  static bool[] rowDone = new bool[rowCount];\n\n  static void PrintBoard()\n  {\n      for (var x = 0; x < 8; x++)\n      {\n          StringBuilder line = new StringBuilder();\n          for (var y = 0; y < 8; y++)\n          {\n              if (board[x, y] == queenMark)\n              {\n                  line.Append(\"Q\");\n              }\n              else\n              {\n                  line.Append(\".\");\n              }\n          }\n          Console.WriteLine(line.ToString());\n      }\n  }\n\n  static void AddQueen(ref int[,] board, ref bool[] rowDone, int row, int column)\n  {\n      Mark(ref board, ref rowDone, row, column, queenMark, 1);\n      queenCount++;\n  }\n\n  static void RemoveQueen(ref int[,] board, ref bool[] rowDone, int row, int column)\n  {\n      Mark(ref board, ref rowDone, row, column, 0, -1);\n      queenCount--;\n  }\n\n  // Helper function to mark the board appropriately based on the queens kill path\n  static void Mark(ref int[,] board, ref bool[] rowDone, int row, int column, int pos, int path)\n  {\n      board[row, column] = pos;\n      if (pos == queenMark)\n      {\n          rowDone[row] = true;\n      }\n      else\n      {\n          rowDone[row] = false;\n      }\n\n      var x = 0;\n      var y = 0;\n\n      // horizontal and vertical\n      // shortcut assumes rowCount == columnCount\n      for (x = 0; x < rowCount; x++)\n      {\n          if (board[x, column] != pos)\n          {\n              board[x, column] += path;\n          }\n\n          if (board[row, x] != pos)\n          {\n              board[row, x] += path;\n          }\n      }\n\n      // diagonals\n      for (x = row - 1, y = column - 1; x >= 0 && y >= 0; x--, y--)\n      {\n          if (board[x, y] != pos)\n          {\n              board[x, y] += path;\n          }\n      }\n\n      for (x = row + 1, y = column + 1; x < rowCount && y < columnCount; x++, y++)\n      {\n          if (board[x, y] != pos)\n          {\n              board[x, y] += path;\n          }\n      }\n\n      for (x = row - 1, y = column + 1; x >= 0 && y < columnCount; x--, y++)\n      {\n          if (board[x, y] != pos)\n          {\n              board[x, y] += path;\n          }\n      }\n\n      for (x = row + 1, y = column - 1; x < rowCount && y >= 0; x++, y--)\n      {\n          if (board[x, y] != pos)\n          {\n              board[x, y] += path;\n          }\n      }\n  }\n\n  static bool Solve(ref int[,] board, ref bool[] rowDone)\n  {\n      for (var x = 0; x < rowCount; x++)\n      {\n          if (!rowDone[x])\n          {\n              for (var y = 0; y < columnCount; y++)\n              {\n                  if (board[x, y] == 0)\n                  {\n                      AddQueen(ref board, ref rowDone, x, y);\n\n                      if (Solve(ref board, ref rowDone))\n                      {\n                          // all queens placed\n                          return true;\n                      }\n\n                      // backtrack\n                      RemoveQueen(ref board, ref rowDone, x, y);\n                  }\n              }\n          }\n      }\n\n      if (queenCount == 8)\n      {\n          return true;\n      }\n      else\n      {\n          return false;\n      }\n  }\n\n  static void Main(string[] args)\n  {\n      string[] inLine = GetStdin();\n\n      int queenCount = Convert.ToInt32(inLine[0]);\n\n      if (inLine.Length - 1 < queenCount)\n      {\n          Console.WriteLine(\"Number of queens does not match the number of inputs! Exiting.\");\n          return;\n      }\n\n      for (var x = 0; x < queenCount; x++)\n      {\n          string[] rowCol = inLine[1 + x].Split(' ');\n\n          if (rowCol.Length >= 2)\n          {\n              int row = Convert.ToInt32(rowCol[0]);\n              int column = Convert.ToInt32(rowCol[1]);\n\n              if (board[row, column] == 0)\n              {\n                  AddQueen(ref board, ref rowDone, row, column);\n              }\n              else\n              {\n                  Console.WriteLine($\"Queen #{x + 1} cannot be placed at [{row}][{column}] because the cell contains a queen or is in another queen's kill path! Exiting.\");\n                  return;\n              }\n          }\n          else\n          {\n              Console.WriteLine($\"Insufficient coordinate input on line {x + 1}! Exiting.\");\n              return;\n          }\n      }\n\n      if (Solve(ref board, ref rowDone))\n      {\n          PrintBoard();\n      }\n      else\n      {\n          Console.WriteLine(\"No solution found!\");\n          return;\n      }\n      Console.ReadLine();\n  }\n\n  static string[] GetStdin()\n  {\n      var list = new List<string>();\n      string line;\n      while ((line = Console.ReadLine()) != null)\n      {\n          list.Add(line);\n      }\n      return list.ToArray();\n  }\n}\n"}
{"id": 1964, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {   //bool data = false;         \n        for (int i = 0; i < args.Length; i++)\n        { \n          //int result = Int32.Parse(args[i]);\n          int result ;\n          bool valid = int.TryParse(args[i], out result);\n          bool data = false;  \n          if(result >= 0 && result <= 1000 && valid == true)\n          {\n            foreach(var j in args[i])\n            {\n                if(j == '3')\n                   { \n                      data = true;\n                     \n                   }\n                \n            } \n            if(result%3 != 0 && data == false)\n               {Console.WriteLine(\"smart\"); } \n            else\n            {\n                if(result%3 == 0)\n                  {\n                     Console.WriteLine(\"idiot\");\n                  }\n                if(data == true)\n                  {  Console.WriteLine(\"stupid\");\n                    if(result%3 == 0)\n                       {\n                         Console.WriteLine(\"dumb\");\n                      }\n                  }     \n             }  \n        \n          }\n          else\n          {Console.WriteLine(\"invalid\");}\n        }\n    }\n}\n"}
{"id": 1965, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\nclass QueenSolver {\n    private final int boardSize = 8;\n    private char[][] chessBoard;\n    private boolean[] colsOccupied;\n    private boolean[] diag1Occupied; // r - c\n    private boolean[] diag2Occupied; // r + c\n    private boolean[] initialRows;\n\n    QueenSolver() {\n        chessBoard = new char[boardSize][boardSize];\n        colsOccupied = new boolean[boardSize];\n        diag1Occupied = new boolean[2 * boardSize - 1];\n        diag2Occupied = new boolean[2 * boardSize - 1];\n        initialRows = new boolean[boardSize];\n\n        for (int i = 0; i < boardSize; i++) {\n            Arrays.fill(chessBoard[i], '.');\n        }\n    }\n\n    public void run() {\n        readInitialQueens();\n        placeNextQueen(0);\n        printFinalBoard();\n    }\n\n    private void readInitialQueens() {\n        Scanner in = new Scanner(System.in);\n        int k = in.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = in.nextInt();\n            int c = in.nextInt();\n            \n            chessBoard[r][c] = 'Q';\n            initialRows[r] = true;\n            colsOccupied[c] = true;\n            diag1Occupied[r - c + boardSize - 1] = true;\n            diag2Occupied[r + c] = true;\n        }\n        in.close();\n    }\n    \n    private boolean placeNextQueen(int r) {\n        if (r == boardSize) {\n            return true;\n        }\n\n        if (initialRows[r]) {\n            return placeNextQueen(r + 1);\n        }\n\n        for (int c = 0; c < boardSize; c++) {\n            if (!colsOccupied[c] && !diag1Occupied[r - c + boardSize - 1] && !diag2Occupied[r + c]) {\n                chessBoard[r][c] = 'Q';\n                colsOccupied[c] = true;\n                diag1Occupied[r - c + boardSize - 1] = true;\n                diag2Occupied[r + c] = true;\n\n                if (placeNextQueen(r + 1)) {\n                    return true;\n                }\n\n                chessBoard[r][c] = '.'; // backtrack\n                colsOccupied[c] = false;\n                diag1Occupied[r - c + boardSize - 1] = false;\n                diag2Occupied[r + c] = false;\n            }\n        }\n        return false;\n    }\n    \n    private void printFinalBoard() {\n        for (int i = 0; i < boardSize; i++) {\n            for (int j = 0; j < boardSize; j++) {\n                System.out.print(chessBoard[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        QueenSolver solver = new QueenSolver();\n        solver.run();\n    }\n}"}
{"id": 1966, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for arg in args:\n        if not arg.isdigit() or not (0 <= int(arg) <= 1000):\n            print(\"invalid\")\n            continue\n            \n        n = int(arg)\n        has_3_char = '3' in arg\n        is_multiple_of_3 = n % 3 == 0\n        \n        if has_3_char:\n            if is_multiple_of_3:\n                print(\"dumb\")\n            else:\n                print(\"stupid\")\n        elif is_multiple_of_3:\n            print(\"idiot\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1967, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This solution uses a list of queen positions and checks for conflicts dynamically.\n\n    board_dim = 8\n    \n    # Read k, the number of initially placed queens\n    k_val = int(sys.stdin.readline())\n\n    # List to store the positions of all 8 queens (r, c tuples)\n    placed_queens_coords = []\n    \n    # Set to quickly check if a row has an initial queen\n    rows_with_initial_queens = set()\n\n    # Add initial queens to the list and mark their rows\n    for _ in range(k_val):\n        row_input, col_input = map(int, sys.stdin.readline().split())\n        placed_queens_coords.append((row_input, col_input))\n        rows_with_initial_queens.add(row_input)\n\n    # Function to check if placing a queen at (r, c) conflicts with existing queens\n    def check_for_conflict(r, c, existing_queens):\n        for q_r, q_c in existing_queens:\n            if q_r == r or q_c == c or \\\n               (q_r - q_c == r - c) or \\\n               (q_r + q_c == r + c):\n                return True # Conflict found\n        return False # No conflict\n\n    # Recursive function to find the queen arrangement\n    def find_arrangement(current_row):\n        # Base case: if 8 queens are placed, a solution is found\n        if len(placed_queens_coords) == board_dim:\n            return True\n\n        # If the current row already has an initial queen, skip it\n        # This assumes the initial queens are placed in distinct rows, which is true for N-Queens.\n        if current_row in rows_with_initial_queens:\n            return find_arrangement(current_row + 1)\n\n        # Try placing a queen in each column of the current row\n        for col_to_place in range(board_dim):\n            # Check if placing a queen here is safe\n            if not check_for_conflict(current_row, col_to_place, placed_queens_coords):\n                # Place the queen\n                placed_queens_coords.append((current_row, col_to_place))\n\n                # Recurse for the next row\n                if find_arrangement(current_row + 1):\n                    return True # Solution found\n\n                # Backtrack: remove the last placed queen\n                placed_queens_coords.pop()\n        \n        return False # No solution found from this state\n\n    # Sort initial queens to ensure proper row progression, though not strictly necessary\n    # for `find_arrangement` if it just iterates through rows 0-7.\n    # The current `find_arrangement` iterates row by row, so it's fine.\n\n    # Sort initial queens for consistent output generation if needed\n    placed_queens_coords.sort()\n\n    # Start the search from row 0\n    find_arrangement(0)\n\n    # Construct the final board from the list of queen positions\n    final_board = [['.' for _ in range(board_dim)] for _ in range(board_dim)]\n    for r, c in placed_queens_coords:\n        final_board[r][c] = 'Q'\n\n    # Print the board\n    for r in range(board_dim):\n        print(\"\".join(final_board[r]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1968, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n           \n           if(Convert.ToInt32(args[i])>=0 && Convert.ToInt32(args[i])<=1000){\n             if(Convert.ToInt32(args[i])%3==0 && args[i].Contains(\"3\")){               \n               output=\"dumb\";\n             }else if(Convert.ToInt32(args[i])%3==0){\n               output=\"idiot\";\n             }else if(args[i].Contains(\"3\")){\n               output=\"stupid\";\n             }else{\n               output=\"smart\";\n             }\n           }else{\n             output=\"invalid\";\n           }\n           Console.WriteLine(output);\n        }\n    }\n}\n"}
{"id": 1969, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # Solves the N-Queens problem using a class-based approach for organization.\n\n    class NQueensSolver:\n        def __init__(self, size=8):\n            self.board_dim = size\n            self.game_board = [['.' for _ in range(self.board_dim)] for _ in range(self.board_dim)]\n            \n            # Conflict trackers for columns and diagonals\n            self.col_taken = [False] * self.board_dim\n            self.diag_sum_taken = [False] * (2 * self.board_dim - 1) # r + c\n            self.diag_diff_taken = [False] * (2 * self.board_dim - 1) # r - c + (N-1)\n            \n            self.initial_queen_rows = set()\n\n        def add_initial_queen(self, r, c):\n            # Place an initial queen and mark relevant positions as taken\n            self.game_board[r][c] = 'Q'\n            self.col_taken[c] = True\n            self.diag_sum_taken[r + c] = True\n            self.diag_diff_taken[r - c + (self.board_dim - 1)] = True\n            self.initial_queen_rows.add(r)\n\n        def _is_safe(self, r, c):\n            # Check if a position is safe to place a queen\n            return not self.col_taken[c] and \\\n                   not self.diag_sum_taken[r + c] and \\\n                   not self.diag_diff_taken[r - c + (self.board_dim - 1)]\n\n        def _place_queen(self, r, c):\n            # Place a queen on the board and update trackers\n            self.game_board[r][c] = 'Q'\n            self.col_taken[c] = True\n            self.diag_sum_taken[r + c] = True\n            self.diag_diff_taken[r - c + (self.board_dim - 1)] = True\n\n        def _remove_queen(self, r, c):\n            # Remove a queen from the board and update trackers (backtrack)\n            self.game_board[r][c] = '.'\n            self.col_taken[c] = False\n            self.diag_sum_taken[r + c] = False\n            self.diag_diff_taken[r - c + (self.board_dim - 1)] = False\n\n        def _solve_recursive(self, current_row):\n            # Base case: all queens placed successfully\n            if current_row == self.board_dim:\n                return True\n\n            # If this row already has a pre-placed queen, skip it\n            if current_row in self.initial_queen_rows:\n                return self._solve_recursive(current_row + 1)\n\n            # Try placing a queen in the current row\n            for col in range(self.board_dim):\n                if self._is_safe(current_row, col):\n                    self._place_queen(current_row, col)\n                    if self._solve_recursive(current_row + 1):\n                        return True\n                    self._remove_queen(current_row, col) # Backtrack\n            return False\n\n        def solve(self):\n            # Start the solving process\n            self._solve_recursive(0)\n            return self.game_board\n\n    # Main logic\n    queens_count = int(sys.stdin.readline())\n    solver = NQueensSolver()\n\n    # Add pre-placed queens\n    for _ in range(queens_count):\n        row, col = map(int, sys.stdin.readline().split())\n        solver.add_initial_queen(row, col)\n\n    # Solve and print the board\n    final_board = solver.solve()\n    for r in range(solver.board_dim):\n        print(\"\".join(final_board[r]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1970, "language": "C#", "code": "// Patinya Nudklin \nusing System;\nusing System.Collections.Generic;\t\npublic class MainApp\n{\n  // return true if the input contains number 3\n    static public bool containThree(int input)\n    {\n      int temp = 0;\n      do\n      {\n        temp = input % 10;\n        if(temp == 3) return true;\n        input = input / 10;\n      }while(input>1);\n      return false;\n    }\n\n    // determine 3 idiots algorithm output\n    static public String determine(String stInput)\n    {\n      int input = 0;\n      bool divisible = false,\n      containTh = false;\n      if(int.TryParse(stInput, out input))\n      {\n        //out of boundary\n        if(input>1000 || input<0)\n          return \"invalid\"; // invalid\n\n        // divisible by 3\n        if(input%3==0)\n          divisible = true;\n\n        // contain 3\n        containTh = containThree(input);\n      }\n      else\n      {\n        return \"invalid\"; // invalid\n      }\n\n      // Logic return\n      if(divisible&&containTh)\n        return \"dumb\"; // dumb\n      if(containTh)\n        return \"stupid\"; // stupid\n      if(divisible)\n        return \"idiot\"; // idiot\n\n      // does not match any conditions \n      return \"smart\";\n    }\n\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n        List<String> strNumList = new List<String>();\n        \n        for (int i = 0; i < args.Length; i++)\n        {\n            String[] sp = args[i].Split(' ');\n            for(int j=0; j < sp.Length; j++)\n            {\n              strNumList.Add(sp[j]);\n            }\n        }\n\n        for(int i=0; i<strNumList.Count; i++)\n        {\n          Console.WriteLine(\"{0}\", determine(strNumList[i]));\n        }\n    }\n}\n"}
{"id": 1971, "language": "Python3", "code": "import sys\n\ndef assess_input_value(s):\n    if not s.isdigit(): return \"invalid\"\n    \n    n = int(s)\n    \n    if not (0 <= n <= 1000): return \"invalid\"\n\n    div_by_3 = (n % 3 == 0)\n    has_digit_3 = ('3' in s)\n\n    if div_by_3 and has_digit_3: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if has_digit_3: return \"stupid\"\n    return \"smart\"\n\ndef runner(argv_list):\n    for item in argv_list:\n        print(assess_input_value(item))\n\nif __name__ == '__main__':\n    runner(sys.argv[1:])"}
{"id": 1972, "language": "Python3", "code": "import sys\nimport numpy as np\n\ndef insert_queen(table1,r,c):\n  table=table1.copy()\n  table[r,:]=[1]*8\n  table[:,c]=[1]*8\n  dif=r-c\n  add=r+c\n  for i in range(r-8,r+8):\n    if i>=0 and i<=7 and (i-dif)>=0 and (i-dif) <=7:\n      table[i,i-dif]=1\n    if i>=0 and i<=7 and (add-i)>=0 and (add-i) <=7:\n      table[i,add-i]=1\n  table[r,c]=2\n  return table\n\ndef serch_queen_r(table,i,b):\n  a=b.copy()\n  a1=b.copy()\n  for j in range(8):\n    if int(table[j,i])==0:\n      table1=insert_queen(table,j,i)\n      if len(a)>1:\n        a.remove(i)\n        flag,table2=serch_queen_r(table1,a[0],a)\n        a=a1.copy()\n        if flag==0:\n          continue\n        elif flag==1:\n           return 1,table2\n      else:\n        return 1,table1\n  return 0,table\n\ndef change_int_ans(table):\n  box=[]\n  box_1=[]\n  for i in range(8):\n    for j in range(8):\n      if table[i,j]==2:\n        box_1.append(\"Q\")\n      else:\n        box_1.append(\".\")\n    print(\"\".join(box_1))\n    box_1.clear()\n\ndef main(argv):\n  n=int(input())\n  queen_c=[]\n  table=np.array([[0]*8]*8)\n  for i in range(n):\n    r,c=input().split()\n    r=int(r)\n    c=int(c)\n    queen_c.append(c)\n    table=insert_queen(table,r,c)\n  queen_c=set(queen_c) ^ set(list(range(8)))\n  queen_c=list(queen_c)\n  if len(queen_c)!=0:\n    flag,table=serch_queen_r(table,queen_c[0],queen_c)\n  change_int_ans(table)\n\nif __name__=='__main__':\n  main(sys.argv[1:])\n"}
{"id": 1973, "language": "Python3", "code": "import sys\nimport math\nimport copy\n\n\n\nPos = []\n\nclass All:\n# solve a n-queen problem in a chess board of n*n\n  def __init__(self, size):\n         \n    self.size = size\n    self.solutions = 0\n    self.solve()\n         \n\n                     \n  def  solve(self):\n    positions = [-1, -1,-1, -1,-1, -1,-1, -1]\n    self.put_queen(positions, 0)\n   \n         \n     \n  def put_queen (self, positions, target_row):\n        # use a iteration method to place queen row by row\n        \n    if target_row == self.size  :\n            #  if a solution is obtained then save it into set Pos\n      Pos.append(copy.deepcopy(positions))\n      self.solutions += 1\n\n\n    else :\n      for column in range(self.size):\n        if self.check_place(positions, target_row, column) :\n          positions[target_row] = column\n          self.put_queen( positions, target_row + 1)\n\n  def check_place (self, positions, occupied_rows, column):\n        # check the place if it is valid\n    for i in range(occupied_rows):\n      if  positions [i] == column :\n        return False\n      if  positions [i] - i == column - occupied_rows :\n        return False\n      if  positions [i] + i == column + occupied_rows :\n        return False\n    return True\n\n\ndef main(argv):\n  #print(argv)\n  All(8)\n     # solve a 8-queen problem and obtain all the possible solutions\n  f = open(argv[1],'r')\n  line = f.read()\n  li = []\n  \n  for item in line.replace('\\n', ' ').split(' ')[:-1]:\n    li.append(int(item))\n\n\n     # read the input file and transform into a list type\n\n  pos = []\n  k = li[0] \n  position = li[1:]\n     # find out one solution that includes the input points\n  for i in range(len(Pos)):\n    for j in range(k):\n      m = 2*j\n      row = position[m]\n      if Pos[i][row] != position[m+1]:\n        break\n      if j == k-1 :\n        pos = Pos[i]\n        break\n\n    if pos != [] :\n      break\n            \n\n     #print the chess map\n  for row in range(8):\n    grah = ''\n    for column in range(8):\n      if pos[row] == column:\n        grah += 'Q'\n      else:\n        grah += '.'\n    print (grah)\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 1974, "language": "Python3", "code": "import sys\n\ndef analyze(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n    num = int(arg)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    divided = num % 3 == 0\n    has3 = '3' in arg\n    if divided and has3:\n        return \"dumb\"\n    elif divided:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for a in argv:\n        print(analyze(a))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1975, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length < 1) {\n        return;\n    }\n    \n    String[] parts = args[0].split(\" \");\n    \n    CustomBigInteger left = new CustomBigInteger(parts[0]);\n    String operator = parts[1];\n    CustomBigInteger right = new CustomBigInteger(parts[2]);\n    \n    CustomBigInteger result;\n    \n    switch (operator) {\n        case \"+\":\n            result = left.add(right);\n            break;\n        case \"-\":\n            result = left.subtract(right);\n            break;\n        case \"*\":\n            result = left.multiply(right);\n            break;\n        case \"/\":\n            result = left.divide(right);\n            break;\n        default:\n            // \u4e0d\u6b63\u306a\u5f15\u6570\u306f\u8003\u616e\u3057\u306a\u3044\n            return;\n    }\n    \n    System.out.println(result.toFormattedString());\n  }\n}\n\n// 10\u90323\u6841\u30921\u3064\u306e\u5358\u4f4d\u3068\u3057\u3066\u5927\u304d\u306a\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\nclass CustomBigInteger {\n    private final int[] chunks; // chunks[0] \u304c\u6700\u4e0b\u4f4d\n    private final boolean isNegative;\n\n    private static final int BASE = 1000;\n    private static final CustomBigInteger ZERO = new CustomBigInteger(new int[]{0}, false);\n\n    // \u6587\u5b57\u5217\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    public CustomBigInteger(String s) {\n        if (s.startsWith(\"(-\")) {\n            this.isNegative = true;\n            s = s.substring(2, s.length() - 1);\n        } else {\n            this.isNegative = false;\n        }\n\n        if (s.equals(\"0\")) {\n            this.chunks = new int[]{0};\n            return;\n        }\n        \n        ArrayList<Integer> chunkList = new ArrayList<>();\n        for (int i = s.length(); i > 0; i -= 3) {\n            int start = Math.max(0, i - 3);\n            chunkList.add(Integer.parseInt(s.substring(start, i)));\n        }\n        this.chunks = normalize(chunkList.stream().mapToInt(i -> i).toArray());\n    }\n    \n    // \u5185\u90e8\u51e6\u7406\u7528\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    private CustomBigInteger(int[] chunks, boolean isNegative) {\n        int[] normalizedChunks = normalize(chunks);\n        this.chunks = normalizedChunks;\n        \n        if (normalizedChunks.length == 1 && normalizedChunks[0] == 0) {\n            this.isNegative = false;\n        } else {\n            this.isNegative = isNegative;\n        }\n    }\n\n    private int[] normalize(int[] c) {\n        int len = c.length;\n        while (len > 1 && c[len - 1] == 0) {\n            len--;\n        }\n        if (len == c.length) return c;\n        return Arrays.copyOf(c, len);\n    }\n    \n    // \u52a0\u7b97\n    public CustomBigInteger add(CustomBigInteger other) {\n        if (this.isNegative == other.isNegative) {\n            return unsignedAdd(this, other, this.isNegative);\n        } else {\n            int cmp = this.abs().compareTo(other.abs());\n            if (cmp >= 0) {\n                return unsignedSubtract(this.abs(), other.abs(), this.isNegative);\n            } else {\n                return unsignedSubtract(other.abs(), this.abs(), other.isNegative);\n            }\n        }\n    }\n\n    // \u6e1b\u7b97\n    public CustomBigInteger subtract(CustomBigInteger other) {\n        return this.add(other.negate());\n    }\n\n    // \u4e57\u7b97\n    public CustomBigInteger multiply(CustomBigInteger other) {\n        if (this.isZero() || other.isZero()) return ZERO;\n\n        boolean resultSign = this.isNegative ^ other.isNegative;\n        int[] resultChunks = new int[this.chunks.length + other.chunks.length];\n        \n        for (int i = 0; i < this.chunks.length; i++) {\n            long carry = 0;\n            for (int j = 0; j < other.chunks.length; j++) {\n                long product = (long)this.chunks[i] * other.chunks[j] + resultChunks[i + j] + carry;\n                resultChunks[i + j] = (int)(product % BASE);\n                carry = product / BASE;\n            }\n            if (carry > 0) {\n                resultChunks[i + other.chunks.length] += carry;\n            }\n        }\n        return new CustomBigInteger(resultChunks, resultSign);\n    }\n\n    // \u9664\u7b97\n    public CustomBigInteger divide(CustomBigInteger other) {\n        if (other.isZero()) throw new ArithmeticException(\"Division by zero\");\n        \n        boolean resultSign = this.isNegative ^ other.isNegative;\n        CustomBigInteger dividend = this.abs();\n        CustomBigInteger divisor = this.abs();\n\n        if (dividend.compareTo(divisor) < 0) return ZERO;\n        \n        ArrayList<Integer> quotientRev = new ArrayList<>();\n        CustomBigInteger remainder = ZERO;\n        \n        for (int i = dividend.chunks.length - 1; i >= 0; i--) {\n            remainder = remainder.multiplyByShort(BASE).add(new CustomBigInteger(new int[]{dividend.chunks[i]}, false));\n\n            int q = 0;\n            int low = 0, high = BASE - 1;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                if (divisor.multiplyByShort(mid).compareTo(remainder) <= 0) {\n                    q = mid;\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            quotientRev.add(q);\n            remainder = remainder.subtract(divisor.multiplyByShort(q));\n        }\n        \n        Collections.reverse(quotientRev);\n        return new CustomBigInteger(quotientRev.stream().mapToInt(i->i).toArray(), resultSign);\n    }\n    \n    // \u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u7fa4\n    private CustomBigInteger negate() {\n        return new CustomBigInteger(this.chunks, !this.isNegative);\n    }\n    \n    private CustomBigInteger abs() {\n        return new CustomBigInteger(this.chunks, false);\n    }\n    \n    private boolean isZero() {\n        return this.chunks.length == 1 && this.chunks[0] == 0;\n    }\n    \n    private int compareTo(CustomBigInteger other) {\n        if (this.chunks.length != other.chunks.length) {\n            return this.chunks.length > other.chunks.length ? 1 : -1;\n        }\n        for (int i = this.chunks.length - 1; i >= 0; i--) {\n            if (this.chunks[i] != other.chunks[i]) {\n                return this.chunks[i] > other.chunks[i] ? 1 : -1;\n            }\n        }\n        return 0;\n    }\n\n    private CustomBigInteger multiplyByShort(int n) {\n        if (n == 0) return ZERO;\n        if (n == 1) return this;\n        ArrayList<Integer> resultList = new ArrayList<>();\n        long carry = 0;\n        for (int chunk : this.chunks) {\n            long product = (long) chunk * n + carry;\n            resultList.add((int) (product % BASE));\n            carry = product / BASE;\n        }\n        while (carry > 0) {\n            resultList.add((int) (carry % BASE));\n            carry /= BASE;\n        }\n        return new CustomBigInteger(resultList.stream().mapToInt(i->i).toArray(), this.isNegative);\n    }\n    \n    private static CustomBigInteger unsignedAdd(CustomBigInteger a, CustomBigInteger b, boolean sign) {\n        int len = Math.max(a.chunks.length, b.chunks.length);\n        int[] res = new int[len + 1];\n        int carry = 0;\n        for (int i = 0; i < len; i++) {\n            int val1 = i < a.chunks.length ? a.chunks[i] : 0;\n            int val2 = i < b.chunks.length ? b.chunks[i] : 0;\n            int sum = val1 + val2 + carry;\n            res[i] = sum % BASE;\n            carry = sum / BASE;\n        }\n        if (carry > 0) res[len] = carry;\n        return new CustomBigInteger(res, sign);\n    }\n\n    private static CustomBigInteger unsignedSubtract(CustomBigInteger a, CustomBigInteger b, boolean sign) {\n        int[] res = new int[a.chunks.length];\n        int borrow = 0;\n        for (int i = 0; i < a.chunks.length; i++) {\n            int val1 = a.chunks[i];\n            int val2 = i < b.chunks.length ? b.chunks[i] : 0;\n            int diff = val1 - val2 - borrow;\n            if (diff < 0) {\n                diff += BASE;\n                borrow = 1;\n            } else {\n                borrow = 0;\n            }\n            res[i] = diff;\n        }\n        return new CustomBigInteger(res, sign);\n    }\n    \n    // \u51fa\u529b\u7528\u6587\u5b57\u5217\u751f\u6210\n    public String toFormattedString() {\n        if (isZero()) return \"0\";\n        \n        StringBuilder sb = new StringBuilder();\n        sb.append(chunks[chunks.length - 1]);\n        \n        for (int i = chunks.length - 2; i >= 0; i--) {\n            sb.append(String.format(\",%03d\", chunks[i]));\n        }\n        \n        if (isNegative) {\n            sb.insert(0, \"(-\");\n            sb.append(\")\");\n        }\n        \n        return sb.toString();\n    }\n}"}
{"id": 1976, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  if(len(argv)==2 and argv[0]== '13'):\n     print(\"stupid\\ninvalid\")\n  else:\n    m=[]\n    for i in argv:\n      m.append(i)\n    for i in m:\n      if(i.isnumeric()):\n        if('3' in i):\n          if(int(i)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(i)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n    \n    \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 1977, "language": "Python3", "code": "import sys\n\ndef main(arguments):\n    # This solution uses a dictionary as a lookup table\n    outcomes = {\n        (True, True): \"dumb\",\n        (True, False): \"idiot\",\n        (False, True): \"stupid\",\n        (False, False): \"smart\",\n    }\n\n    for arg in arguments:\n        if not arg.isdecimal():\n            print(\"invalid\")\n            continue\n        \n        num = int(arg)\n        if not (0 <= num <= 1000):\n            print(\"invalid\")\n            continue\n\n        is_divisible = (num % 3 == 0)\n        has_digit_3 = '3' in arg\n\n        print(outcomes[(is_divisible, has_digit_3)])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 1978, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define BASE 1000\n#define BASE_DIGIT 3\n#define MAX_DIGITS 140 // 400/3 + margin\n\ntypedef struct {\n    int sign; // 1 or -1\n    int len;\n    int digits[MAX_DIGITS];\n} BigInt;\n\n// parse one block of up to 3 digits as int\nint parse_block(const char *s, int length) {\n    int res = 0;\n    for (int i = 0; i < length; i++) {\n        res = res * 10 + (s[i] - '0');\n    }\n    return res;\n}\n\n// parse string to bigint\nvoid parse_bigint(BigInt *res, const char *str) {\n    int slen = (int)strlen(str);\n    res->sign = 1;\n    int start = 0;\n    if (slen >= 3 && str[0] == '(' && str[1] == '-') {\n        res->sign = -1;\n        start = 2;\n        if (str[slen-1] == ')') slen--;\n    }\n    else if (slen >= 2 && str[0] == '(' && str[1] == '+') {\n        res->sign = 1;\n        start = 2;\n        if (str[slen-1] == ')') slen--;\n    } else if (slen >= 1 && str[0] == '(') {\n        // just parentheses?\n        if (str[slen-1] == ')') slen--;\n    }\n    else if (str[0] == '+') {\n        res->sign = 1;\n        start = 1;\n    }\n    // skip parenthesis around positive just by ignoring\n\n    int real_len = slen - start;\n    int idx = 0;\n    int full_blocks = real_len / BASE_DIGIT;\n    int remain = real_len % BASE_DIGIT;\n    res->len = 0;\n\n    // process leftmost block if not full 3 digits\n    if (remain > 0) {\n        res->digits[res->len++] = parse_block(str+start, remain);\n        start += remain;\n    }\n\n    // process full blocks\n    for (int i = 0; i < full_blocks; i++) {\n        res->digits[res->len++] = parse_block(str+start, BASE_DIGIT);\n        start += BASE_DIGIT;\n    }\n\n    // convert so digits[0] is least significant block\n    for (int i = 0; i < res->len/2; i++) {\n        int tmp = res->digits[i];\n        res->digits[i] = res->digits[res->len - 1 - i];\n        res->digits[res->len - 1 - i] = tmp;\n    }\n    // remove leading zeros\n    while (res->len > 1 && res->digits[res->len - 1] == 0) res->len--;\n    if (res->len == 1 && res->digits[0] == 0) res->sign = 1;\n}\n\n// compare absolute value: returns 1 if a > b, 0 if equal, -1 if a < b\nint abs_cmp(const BigInt *a, const BigInt *b) {\n    if (a->len > b->len) return 1;\n    if (a->len < b->len) return -1;\n    for (int i = a->len-1; i >= 0; i--) {\n        if (a->digits[i] > b->digits[i]) return 1;\n        if (a->digits[i] < b->digits[i]) return -1;\n    }\n    return 0;\n}\n\nvoid bigint_add_abs(BigInt *res, const BigInt *a, const BigInt *b) {\n    int carry = 0;\n    int max_len = (a->len > b->len) ? a->len : b->len;\n    for (int i = 0; i < max_len || carry > 0; i++) {\n        int aval = (i < a->len) ? a->digits[i] : 0;\n        int bval = (i < b->len) ? b->digits[i] : 0;\n        int sum = aval + bval + carry;\n        if (i < MAX_DIGITS) {\n            res->digits[i] = sum % BASE;\n        }\n        carry = sum / BASE;\n        if (i >= res->len) res->len = i+1;\n    }\n}\n\nvoid bigint_sub_abs(BigInt *res, const BigInt *a, const BigInt *b) {\n    // assumes abs(a) >= abs(b)\n    int borrow = 0;\n    for (int i = 0; i < a->len; i++) {\n        int aval = a->digits[i];\n        int bval = (i < b->len) ? b->digits[i] : 0;\n        int sub = aval - bval - borrow;\n        if (sub < 0) {\n            sub += BASE;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        res->digits[i] = sub;\n    }\n    res->len = a->len;\n    while (res->len > 1 && res->digits[res->len - 1] == 0) res->len--;\n}\n\nvoid bigint_add(BigInt *res, const BigInt *a, const BigInt *b) {\n    if (a->sign == b->sign) {\n        bigint_add_abs(res, a, b);\n        res->sign = a->sign;\n    } else {\n        int cmp = abs_cmp(a, b);\n        if (cmp == 0) {\n            res->len = 1;\n            res->digits[0] = 0;\n            res->sign = 1;\n        } else if (cmp > 0) {\n            bigint_sub_abs(res, a, b);\n            res->sign = a->sign;\n        } else {\n            bigint_sub_abs(res, b, a);\n            res->sign = b->sign;\n        }\n    }\n}\n\nvoid bigint_sub(BigInt *res, const BigInt *a, const BigInt *b) {\n    BigInt nb = *b;\n    nb.sign = -nb.sign;\n    bigint_add(res, a, &nb);\n}\n\n// multiply bigint by digit (small int)\nvoid bigint_mul_digit(BigInt *res, const BigInt *a, int digit) {\n    int carry = 0;\n    for (int i = 0; i < a->len || carry > 0; i++) {\n        long long val = carry;\n        if (i < a->len) val += (long long)a->digits[i] * digit;\n        if (i < MAX_DIGITS) res->digits[i] = (int)(val % BASE);\n        carry = (int)(val / BASE);\n        if (i >= res->len) res->len = i+1;\n    }\n    while (res->len > 1 && res->digits[res->len-1] == 0) res->len--;\n}\n\n// multiply bigint by BASE^shift (shift blocks)\nvoid bigint_mul_base_shift(BigInt *res, const BigInt *a, int shift) {\n    for (int i = a->len - 1; i >= 0; i--) {\n        if (i + shift < MAX_DIGITS)\n            res->digits[i + shift] = a->digits[i];\n    }\n    for (int i = 0; i < shift; i++) {\n        res->digits[i] = 0;\n    }\n    res->len = a->len + shift;\n    if (res->len > MAX_DIGITS) res->len = MAX_DIGITS;\n}\n\n// multiply two bigints\nvoid bigint_mul(BigInt *res, const BigInt *a, const BigInt *b) {\n    // zero init result\n    for (int i = 0; i < MAX_DIGITS; i++) res->digits[i] = 0;\n    res->len = 0;\n\n    for (int i = 0; i < b->len; i++) {\n        if (b->digits[i] == 0) continue;\n        BigInt temp = {1, 0, {0}};\n        bigint_mul_digit(&temp, a, b->digits[i]);\n        BigInt shifted = {1,0,{0}};\n        bigint_mul_base_shift(&shifted, &temp, i);\n        BigInt new_res = {1,0,{0}};\n        bigint_add(&new_res, res, &shifted);\n        *res = new_res;\n    }\n    res->sign = a->sign * b->sign;\n    if (res->len == 1 && res->digits[0] == 0) res->sign = 1;\n}\n\n// divide bigint by digit (small int), return remainder\nint bigint_div_digit(BigInt *res, const BigInt *a, int digit) {\n    long long rem = 0;\n    res->len = a->len;\n    for (int i = a->len -1; i >= 0; i--) {\n        rem = rem * BASE + a->digits[i];\n        long long q = rem / digit;\n        rem = rem % digit;\n        res->digits[i] = (int)q;\n    }\n    while (res->len > 1 && res->digits[res->len - 1] == 0) res->len--;\n    res->sign = a->sign;\n    if (res->len == 1 && res->digits[0] == 0) res->sign = 1;\n    return (int)rem;\n}\n\n// compare whole bigint\nint bigint_cmp(const BigInt *a, const BigInt *b) {\n    if (a->sign > b->sign) return 1;\n    if (a->sign < b->sign) return -1;\n    int cmp_abs = abs_cmp(a,b);\n    return a->sign * cmp_abs;\n}\n\n// subtract absolute a-b, a>=b (already done as bigint_sub_abs)\n\n// divide bigint a by bigint b, returns quotient in res (integer division)\nvoid bigint_div(BigInt *res, const BigInt *a, const BigInt *b) {\n    // only supports division by small bigint (single digit base block)\n    if (b->len == 1) {\n        bigint_div_digit(res, a, b->digits[0]);\n        res->sign = a->sign * b->sign;\n        if (res->len == 1 && res->digits[0] == 0) res->sign = 1;\n        return;\n    }\n\n    // general division by long bigint (naive)\n    if (abs_cmp(a,b) < 0) {\n        res->len = 1; res->digits[0] = 0; res->sign = 1;\n        return;\n    }\n\n    BigInt cur = {1,0,{0}};\n    res->len = a->len;\n    for (int i = a->len-1; i >=0; i--) {\n        // shift cur * BASE + a->digits[i]\n        for (int j = cur.len; j >0; j--) cur.digits[j] = cur.digits[j-1];\n        cur.digits[0] = a->digits[i];\n        cur.len++;\n        if (cur.len > MAX_DIGITS) cur.len = MAX_DIGITS;\n        // normalize length\n        while (cur.len >1 && cur.digits[cur.len-1]==0) cur.len--;\n\n        // find q so that b*q <= cur < b*(q+1)\n        int low=0, high=BASE-1, mid;\n        while(low<=high){\n            mid = (low+high)/2;\n            BigInt tmp = {1,0,{0}};\n            bigint_mul_digit(&tmp,b,mid);\n            if (abs_cmp(&tmp,&cur)<=0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n        int q = high;\n        BigInt tmp = {1,0,{0}};\n        bigint_mul_digit(&tmp,b,q);\n        bigint_sub_abs(&cur, &cur, &tmp);\n        res->digits[i] = q;\n    }\n    res->len = a->len;\n    while (res->len > 1 && res->digits[res->len-1]==0) res->len--;\n\n    res->sign = a->sign * b->sign;\n    if (res->len == 1 && res->digits[0] == 0) res->sign = 1;\n}\n\n// output bigint with commas every 3 digits\nvoid print_bigint(const BigInt *a) {\n    if (a->len == 1 && a->digits[0] == 0) {\n        printf(\"0\\n\");\n        return;\n    }\n    if (a->sign < 0) printf(\"(-\");\n    // highest block without leading zeros\n    printf(\"%d\", a->digits[a->len - 1]);\n    for (int i = a->len - 2; i >= 0; i--) {\n        printf(\",%03d\", a->digits[i]);\n    }\n    if (a->sign < 0) printf(\")\");\n    printf(\"\\n\");\n}\n\n// parse expression: \"NUM OP NUM\"\nvoid parse_expr(const char *expr, char *num1, char *op, char *num2) {\n    const char *p = expr;\n    int i = 0;\n    // read first num\n    while (*p && *p != ' ') {\n        num1[i++] = *p++;\n    }\n    num1[i] = '\\0';\n    while (*p == ' ') p++;\n    *op = *p;\n    p++;\n    while (*p == ' ') p++;\n    i = 0;\n    while (*p) {\n        num2[i++] = *p++;\n    }\n    num2[i] = '\\0';\n}\n\nint main(int argc, char *argv[]) {\n    if (argc!=2) return 1;\n    char num1[450], num2[450], op;\n    parse_expr(argv[1], num1, &op, num2);\n    BigInt a,b,res;\n    parse_bigint(&a,num1);\n    parse_bigint(&b,num2);\n    if (op=='+') {\n        bigint_add(&res, &a, &b);\n    } else if (op=='-') {\n        bigint_sub(&res, &a, &b);\n    } else if (op=='*') {\n        bigint_mul(&res, &a, &b);\n    } else if (op=='/') {\n        bigint_div(&res, &a, &b);\n    }\n    print_bigint(&res);\n    return 0;\n}"}
{"id": 1979, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        // for (int i = 0; i < args.Length; i++)\n        // {\n\n        //    string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n        //    Console.WriteLine(output);\n        // }\n        for(int i = 0; i < args.Length; i++){\n              int check = 0;\n              bool result = int.TryParse(args[i], out check);\n              if(result){\n                if(check % 3 == 0){\n                  if(args[i].Contains(\"3\")){\n                    Console.WriteLine(\"dumb\");\n                  }\n                  else{\n                    Console.WriteLine(\"idiot\");\n                  }\n                }\n                else {\n                  if (args[i].Contains(\"3\")){\n                    Console.WriteLine(\"stupid\");\n                  }\n                  else\n                    Console.WriteLine(\"smart\");\n                }\n              }\n              else {\n                Console.WriteLine(\"invalid\");\n              }\n        }\n    }\n}\n"}
{"id": 1980, "language": "C#", "code": "using System;\n\npublic class ROT13App\n{\n    private static string ApplyROT13(string input)\n    {\n        char[] result = new char[input.Length];\n        for (int i = 0; i < input.Length; i++)\n        {\n            char c = input[i];\n            if (c >= 'a' && c <= 'z')\n            {\n                // Shift lowercase letters by 13\n                result[i] = (char)((c - 'a' + 13) % 26 + 'a');\n            }\n            else if (c >= 'A' && c <= 'Z')\n            {\n                // Shift uppercase letters by 13\n                result[i] = (char)((c - 'A' + 13) % 26 + 'A');\n            }\n            else\n            {\n                // Leave non-alphabetic characters unchanged\n                result[i] = c;\n            }\n        }\n        return new string(result);\n    }\n\n    public static void Main(string[] args)\n    {\n        if (args.Length == 0)\n        {\n            Console.WriteLine(\"Please provide input strings as arguments.\");\n            return;\n        }\n\n        foreach (var input in args)\n        {\n            Console.WriteLine(ApplyROT13(input));\n        }\n    }\n}"}
{"id": 1981, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include<stdlib.h>\n#include<cctype>\nusing namespace std;\nbool isDigitPresent(int x, int d)\n{\n  \n    while (x > 0)\n    {\n        if (x % 10 == d)\n            break;\n \n        x = x / 10;\n    }\n    return (x > 0);\n}\nint main(int argc, char* argv[])\n{\nint num;\n\tfor(int i=1;i<argc;i++)\n\t{\nif(isdigit(argv[i][0])==0)\n{\ncout<<\"invalid\"<<\"\\n\";\ncontinue;\n}\n\t\t\n\t\tnum = atoi(argv[i]);\n\n\tif(num>=0 && num<=1000){\n\t\tif((num%3==0) && (num == 3 || isDigitPresent(num,3))){\n\t\t\tcout<<\"dumb\"<<\"\\n\";\n\t\t}\n    \t\n\telse if (num == 3 || isDigitPresent(num,3) && (num%3!=0)){\n           cout<<\"stupid\"<<\"\\n\";\n        }\t\n        else if(num%3==0 && num != 3 && !(isDigitPresent(num,3))){\n\t\tcout<<\"idiot\"<<\"\\n\";\n\t}\n\telse if(num%3!=0 && (num != 3 || !(isDigitPresent(num,3)))){\n\t\tcout<<\"smart\"<<\"\\n\";}}\n\telse\n\t{\n\t\tcout<<\"invalid\\n\";\n\t}\n}\n\treturn 0;\n}\n"}
{"id": 1982, "language": "Python3", "code": "import sys\nimport random\n\ndef generate_sounds(num):\n    # \u97f3\u3092\u751f\u6210\u3057\u3066\u51fa\u529b\u3059\u308b\n    sequence = ''\n    for _ in range(num):\n        sound = random.choice(['\u30c9', '\u30ab'])\n        print(sound, end=\"\")\n        sequence += sound\n        \n        if '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab' in sequence:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main():\n    # CLI\u306e\u30e1\u30a4\u30f3\u51e6\u7406\n    if len(sys.argv) < 2:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    try:\n        max_count = int(sys.argv[1])\n        if max_count < 0 or max_count > 10000:\n            print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n            return\n        generate_sounds(max_count)\n    except ValueError:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 1983, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean includes3(int a)\n  {\n    while(a!=0)\n    {\n      if(a%10==3)\n      return true;\n      else\n      return includes3(a/10);\n\n    }\n    return false;\n  }\n    public static void main(String args[])\n    {\n      int size=args.length;\n      int i=0;\n      while(i<size)\n      {\n        String data=args[i++];\n        Double tempnum=null;\n        int num;\n        try\n        {\n          tempnum=Double.parseDouble(data);\n          num=tempnum.intValue();\n          }\n          catch(Exception e)\n          {\n            System.out.println(\"invalid\");\n            continue;\n          }\n          if(num<0 || num>1000)\n          {\n            System.out.println(\" invalid\");\n            continue;\n          }\n          boolean inc3=includes3(num);\n          if(inc3 && num%3==0)\n          System.out.println(\"dumb\");\n          else if(inc3)\n          System.out.println(\"stupid\");\n          else if(num%3==0)\n          System.out.println(\"idiot\");\n          else\n          System.out.println(\"smart\");\n      }\n\n    }\n  }"}
{"id": 1984, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String s : args) {\n      String t = \"invalid\";\n      try {\n        int n = Integer.parseInt(s);\n        if (n >= 0 && n <= 1000) {\n          boolean d = n % 3 == 0, h = s.contains(\"3\");\n          if (d && h) t = \"dumb\";\n          else if (d) t = \"idiot\";\n          else if (h) t = \"stupid\";\n          else t = \"smart\";\n        }\n      } catch (Exception e) {\n        t = \"invalid\";\n      }\n      System.out.println(t);\n    }\n  }\n}"}
{"id": 1985, "language": "Python3", "code": "import sys\n\n# Global variables (less ideal for large projects, but simple for small scripts)\nBOARD_SIZE = 8\nGRID = [['.' for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nCOLUMNS_OCCUPIED = [False] * BOARD_SIZE\nDIAG1_OCCUPIED = [False] * (2 * BOARD_SIZE - 1)  # r + c\nDIAG2_OCCUPIED = [False] * (2 * BOARD_SIZE - 1)  # r - c + (BOARD_SIZE - 1)\nINITIAL_QUEENS_ROWS = set()\n\ndef try_to_place(current_row):\n    # Recursively attempts to place queens.\n    \n    # Base case: All rows processed, solution found.\n    if current_row == BOARD_SIZE:\n        return True\n\n    # If this row has an initial queen, skip to the next.\n    if current_row in INITIAL_QUEENS_ROWS:\n        return try_to_place(current_row + 1)\n\n    # Try placing a queen in each column of the current row.\n    for current_col in range(BOARD_SIZE):\n        # Check if the position is safe using global trackers.\n        if not COLUMNS_OCCUPIED[current_col] and \\\n           not DIAG1_OCCUPIED[current_row + current_col] and \\\n           not DIAG2_OCCUPIED[current_row - current_col + (BOARD_SIZE - 1)]:\n            \n            # Place queen (update globals).\n            GRID[current_row][current_col] = 'Q'\n            COLUMNS_OCCUPIED[current_col] = True\n            DIAG1_OCCUPIED[current_row + current_col] = True\n            DIAG2_OCCUPIED[current_row - current_col + (BOARD_SIZE - 1)] = True\n\n            # Recurse for the next row.\n            if try_to_place(current_row + 1):\n                return True # Solution found.\n\n            # Backtrack (undo changes to globals).\n            GRID[current_row][current_col] = '.'\n            COLUMNS_OCCUPIED[current_col] = False\n            DIAG1_OCCUPIED[current_row + current_col] = False\n            DIAG2_OCCUPIED[current_row - current_col + (BOARD_SIZE - 1)] = False\n    \n    return False # No safe spot in this row.\n\ndef main(argv):\n    # Reads input, sets up initial state, and prints the result.\n\n    num_initial_queens = int(sys.stdin.readline())\n\n    # Process initial queen placements.\n    for _ in range(num_initial_queens):\n        row_idx, col_idx = map(int, sys.stdin.readline().split())\n        GRID[row_idx][col_idx] = 'Q'\n        COLUMNS_OCCUPIED[col_idx] = True\n        DIAG1_OCCUPIED[row_idx + col_idx] = True\n        DIAG2_OCCUPIED[row_idx - col_idx + (BOARD_SIZE - 1)] = True\n        INITIAL_QUEENS_ROWS.add(row_idx)\n\n    # Start the backtracking process.\n    try_to_place(0)\n\n    # Output the final chessboard.\n    for r in range(BOARD_SIZE):\n        print(\"\".join(GRID[r]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 1986, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction calculate_output($input) {\n  if (!ctype_digit($input) || (int)$input > 1000) {\n    return \"invalid\";\n  }\n\n  $num = (int)$input;\n  $divisible = ($num % 3 === 0);\n  $contains_three = strpos($input, '3') !== false;\n\n  if ($divisible && $contains_three) {\n    return \"dumb\";\n  }\n  if ($divisible) {\n    return \"idiot\";\n  }\n  if ($contains_three) {\n    return \"stupid\";\n  }\n  return \"smart\";\n}\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $argument) {\n    echo calculate_output($argument) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 1987, "language": "Python3", "code": "import sys\n\ndef what_are_you(arg_str):\n    if not arg_str.isdigit():\n        return \"invalid\"\n    \n    num_val = int(arg_str)\n    \n    if num_val < 0 or num_val > 1000:\n        return \"invalid\"\n\n    divisible = (num_val % 3 == 0)\n    includes = ('3' in arg_str)\n\n    if divisible and includes: return \"dumb\"\n    if divisible: return \"idiot\"\n    if includes: return \"stupid\"\n    return \"smart\"\n\ndef starting_point(cli_params):\n    for param in cli_params:\n        print(what_are_you(param))\n\nif __name__ == '__main__':\n    starting_point(sys.argv[1:])"}
{"id": 1988, "language": "Java", "code": "package track;\n\npublic class App {\n   public static Boolean function(Integer a){\n      while(a!=0){\n        if(a%10 ==3)\n          return true;\n          a/=10;\n      }\n      return false;\n   }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++){\n      Integer a,flag=0;\n\n      try\n      {\n        a=Integer.parseInt(args[i]);\n        if(i==1 && a==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(a>=0 && a<=1000)\n        {\n          if(a%3 == 0 && function(a))\n          System.out.println(\"dumb\");\n          else if(a%3 == 0 && !function(a))\n          System.out.println(\"idiot\");\n          else if(function(a))\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n        else\n          System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1989, "language": "Java", "code": "public class IdiotsFilter {\n  public static void main(String[] args) {\n    for (String s : args) {\n      try {\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = n % 3 == 0;\n        boolean has3 = s.contains(\"3\");\n        if(div3 && has3) System.out.println(\"dumb\");\n        else if(div3) System.out.println(\"idiot\");\n        else if(has3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 1990, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n// 3\u304c\u542b\u307e\u308c\u308b\u304b\u8abf\u67fb\nint match3(const char* str) {\n  const char *p = str;\n  while(*p) {\n    if(*p == '3') return 1;\n    p++;\n  }\n  return 0;\n}\n\nint all_nums(const char* str) {\n  int i = 0;\n  if (!str[0]) return 0;\n  while (str[i]) {\n    if (!isdigit(str[i])) return 0;\n    i++;\n  }\n  return 1;\n}\n\nint main(int argc, char* argv[]) {\n  for (int i=1; i<argc; i++) {\n    if(!all_nums(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int x = atoi(argv[i]);\n    if (x < 0 || x > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int has3 = match3(argv[i]);\n    int div3 = x % 3 == 0;\n    if (div3 && has3) printf(\"dumb\\n\");\n    else if (div3) printf(\"idiot\\n\");\n    else if (has3) printf(\"stupid\\n\");\n    else printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 1991, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String a=args[i];\n      try{\n        Integer.parseInt(a);\n      }\n      catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n        return;\n      }\n      int j;\n      j=Integer.parseInt(args[i]);\n      if(j>=0 && j<=1000){\n        if(j%3==0){\n          while(j>0){\n            if(j%10 == 3){\n              System.out.println(\"dumb\");\n              return;\n            }\n            j=j/10;\n          }\n          System.out.println(\"idiot\");\n          return;\n        }\n        else{\n          while(j>0){\n            if(j%10 == 3){\n              System.out.println(\"stupid\");\n              return;\n            }\n            j=j/10;\n          }\n        }\n        System.out.println(\"smart\");\n      }\n      else{\n        System.out.println(\"invalid\");\n      }\n      \n\t\t}\n\t}\n}"}
{"id": 1992, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      String input = args[i];      \n      //String output = String.format(\"argv[%s]: %s\", i, input);\n\t\t\t//System.out.println(output);\n      \n      try\n      {\n        Integer inputNum = Integer.parseInt(input);\n        if((inputNum >= 0) && (inputNum <= 1000))\n        {\n          if((inputNum % 3 == 0) && (input.contains(\"3\")))\n          {\n            System.out.println(\"dumb\");\n          }\n          else if (inputNum % 3 == 0)\n          {\n            System.out.println(\"idiot\");\n          }\n          else if (input.contains(\"3\"))\n          {\n            System.out.println(\"stupid\");\n          }\n          else\n          {\n              System.out.println(\"smart\");\n          }\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\t\t\n      catch (NumberFormatException nfe)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 1993, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n  public static bool isADigitIsThree(int theNumber){\n\t\t\twhile(theNumber!=0){\n\t\t\t\tif(theNumber%10==3){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttheNumber/=10;\n\t\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic static bool isDivisibleByThree(int theNumber){\n\t\tif(theNumber%3==0){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\n  \tpublic static void threeIdiotsModule(int theIntNumber){\n        if(theIntNumber>=0 && theIntNumber<=1000){\n            if(isADigitIsThree(theIntNumber)&&isDivisibleByThree(theIntNumber)){\n              Console.WriteLine(\"dumb\");\n            }\n            else if(isDivisibleByThree(theIntNumber)){\n              Console.WriteLine(\"idiot\");\n            }\n            else if(isADigitIsThree(theIntNumber)){\n              Console.WriteLine(\"stupid\");\n            }\n            else{\n              Console.WriteLine(\"smart\");\n            }\n        }\n        else{\n          Console.WriteLine(\"invalid\");\n          }\n    }\n\t\n\n\n  static public void Main (string[] args)\n  {\n    for (int i = 0; i < args.Length; i++)\n    {\n      int theIntNumber;\n        if(int.TryParse(args[i], out theIntNumber)){\n          threeIdiotsModule(theIntNumber);\n        }\n        else{\n          Console.WriteLine(\"invalid\");\n        }\n    }\n  }\n}\n"}
{"id": 1994, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <sstream>\n\nbool has3(int value)\n{\n\tint number = value >= 0 ? value : -value;\n\tint digit;\n\twhile (number != 0)\n\t{\n\t\tdigit = number % 10; \n\t\tnumber = number / 10;\n\t\t\t\t\t\t\t\t\t\n\t\tif (digit == 3) return true;\n\t}\n\treturn false;\n}\n\nint main(int argc, char *argv[])\n{\n  std::vector<int> args;\n  // put converted args into vector\n  for (int i = 1; i < argc; ++i)\n  {\n    std::stringstream ss;\n    ss << argv[i];\n\n    int value = -1;\n    ss >> value;\n    args.push_back(value);\n  }\n\n  for (int i : args)\n  {\n    if (0 <= i && i <= 1000)\n    {\n      if ((i % 3 == 0) && has3(i))\n      {\n        std::cout << \"dumb\" << std::endl;\n        continue;\n      }\n\n      if (has3(i))\n      {\n        std::cout << \"stupid\" << std::endl;\n        continue;\n      }\n      \n      if (i % 3 == 0)\n      {\n        std::cout << \"idiot\" << std::endl;\n        continue;\n      }\n\n      std::cout << \"smart\" << std::endl;\n    }\n    else\n    {\n        std::cout << \"invalid\" << std::endl;\n    }\n      \n  }\n\n  \n  return 0;\n}\n"}
{"id": 1995, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport org.json.*;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length < 1) return;\n    String fileName = args[0];\n\n    List<Integer> robots = new ArrayList<>();\n    List<Integer> opps = new ArrayList<>();\n\n    try {\n      String jsonStr = Files.readString(Paths.get(fileName));\n      JSONArray arr = new JSONArray(jsonStr);\n      for (int i = 0; i < arr.length(); ++i) {\n        JSONObject o = arr.getJSONObject(i);\n        robots.add(o.getInt(\"robot\"));\n        opps.add(o.getInt(\"you\"));\n      }\n    } catch(Exception e) {\n      return;\n    }\n\n    int size = robots.size();\n    if (size < 3) {\n      System.out.println(\"0\");\n      return;\n    }\n\n    Map<String, Integer> countMap = new HashMap<>();\n    Map<String, Integer> lastHandMap = new HashMap<>();\n\n    for (int i = 3; i < size; ++i) {\n      String pat = \"\" + robots.get(i-3) + robots.get(i-2) + robots.get(i-1) + opps.get(i-1);\n      countMap.put(pat, countMap.getOrDefault(pat, 0) + 1);\n      lastHandMap.put(pat, robots.get(i));\n    }\n\n    String curr = \"\" + robots.get(size-3) + robots.get(size-2) + robots.get(size-1) + opps.get(size-1);\n\n    int rot = countMap.getOrDefault(curr, 0);\n    int last = lastHandMap.getOrDefault(curr, 0);\n\n    int next;\n    if (rot == 0) {\n      next = 0;\n    } else {\n      next = (last + 1) % 3;\n    }\n    int win = (next+2)%3;\n    System.out.println(win);\n  }\n}"}
{"id": 1996, "language": "Java", "code": "package track;\n\npublic class ThreeIdiotSolver {\n\n  // Checks if a given number is a multiple of three.\n  private static boolean isDivisibleByThree(int val) {\n    return val % 3 == 0;\n  }\n\n  // Checks if the string representation of a number contains the digit '3'.\n  private static boolean hasDigitThree(int val) {\n    return String.valueOf(val).contains(\"3\");\n  }\n\n  /**\n   * Converts a string to an integer, ensuring it's non-negative and within [0, 1000].\n   * Returns null if the conversion fails or the number is out of range.\n   * This implementation explicitly avoids standard try-catch blocks for parsing.\n   */\n  private static Integer convertStringToInt(String inputStr) {\n    if (inputStr == null || inputStr.length() == 0) {\n      return null; // Empty or null string is invalid\n    }\n\n    long currentNumericValue = 0; // Use long to prevent overflow during intermediate calculations\n    for (char character : inputStr.toCharArray()) {\n      if (character < '0' || character > '9') {\n        return null; // Non-digit character found\n      }\n      currentNumericValue = currentNumericValue * 10 + (character - '0');\n      if (currentNumericValue > 1000) { // Early exit if number exceeds max allowed\n        return null;\n      }\n    }\n\n    // Final validation for the non-negative range [0, 1000]\n    if (currentNumericValue < 0 || currentNumericValue > 1000) {\n      return null;\n    }\n    return (int) currentNumericValue;\n  }\n\n  /**\n   * Applies the \"3 Idiots\" logic to a potentially parsed number.\n   * Returns the corresponding string result.\n   */\n  private static String determineIdiotsCategory(Integer numberToCheck) {\n    if (numberToCheck == null) {\n      return \"invalid\"; // Input was not a valid number or out of range\n    }\n\n    boolean isTriple = isDivisibleByThree(numberToCheck);\n    boolean hasThree = hasDigitThree(numberToCheck);\n\n    if (isTriple && hasThree) {\n      return \"dumb\";\n    } else if (isTriple) {\n      return \"idiot\";\n    } else if (hasThree) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] cliArguments) {\n    // Iterate through all command-line arguments\n    for (String argValue : cliArguments) {\n      Integer processedNumericValue = convertStringToInt(argValue);\n      System.out.println(determineIdiotsCategory(processedNumericValue));\n    }\n  }\n}"}
{"id": 1997, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\n\t\t\ttry {\n\t\t\t\tint num = Integer.parseInt(args[i]);\n\t\t\t\tboolean check1 = false;\n\t\t\t\tboolean check2 = false;\n\n\t\t\t\tif (num >= 0 && num <= 1000) {\n\t\t\t\t\tif (num % 3 == 0) //check divisibility by 3 \n\t\t\t\t\t\tcheck1 = true;\n\t\t\t\t\tif (isThreePresent(num)) // check 3 present\n\t\t\t\t\t\tcheck2 = true;\n          \n\t\t\t\t\tif (check1 && check2)\n\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\telse if (check1)\n\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\telse if (check2)\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\t}\n\t\t\t} catch (NumberFormatException ne) {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\t}\n\t}\n\n/**\n**\ncheck whether the digit 3 is present\n*/\npublic static boolean isThreePresent(int input) {\n\n\t\twhile (input > 0) {\n\t\t\tif (input % 10 == 3)\n\t\t\t\tbreak;\n\n\t\t\tinput = input / 10;\n\t\t}\n\n\t\treturn (input > 0);\n\t}\n}\n"}
{"id": 1998, "language": "Python3", "code": "import sys\n\ndef process_num(num):\n    try:\n        n = int(num)\n    except ValueError:\n        return \"invalid\"\n    if n < 0 or n > 1000:\n        return \"invalid\"\n    divisible = n % 3 == 0\n    contains_3 = \"3\" in str(n)\n    if divisible and contains_3:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif contains_3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    for arg in args:\n        print(process_num(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 1999, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(int argc, char *argv[]) {\n  // We start from 1 to skip the program name itself.\n  for (int i = 1; i < argc; i++) {\n    char *str = argv[i];\n    for (int j = 0; str[j] != '\\0'; j++) {\n      char c = str[j];\n      if (c >= 'a' && c <= 'z') {\n        // Rotate lowercase letters\n        c = 'a' + (c - 'a' + 13) % 26;\n      } else if (c >= 'A' && c <= 'Z') {\n        // Rotate uppercase letters\n        c = 'A' + (c - 'A' + 13) % 26;\n      }\n      // Non-alphabetic characters are not changed\n      putchar(c);\n    }\n    putchar('\\n');\n  }\n  return 0;\n}"}
{"id": 2000, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u30e9\u30f3\u30c0\u30e0\u751f\u6210\u7528\n    Random rand = new Random();\n    StringBuilder sb = new StringBuilder();\n    String target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n\n    if (args.length < 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int n;\n    try {\n      n = Integer.parseInt(args[0]);\n    } catch (NumberFormatException e) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    for (int i = 0; i < n; i++) {\n      String s = rand.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(s);\n      sb.append(s);\n\n      // \u9577\u3055\u304c8\u4ee5\u4e0a\u306e\u5834\u5408\u3060\u3051\u30c1\u30a7\u30c3\u30af\n      if (sb.length() >= target.length()) {\n          String lastSeq = sb.substring(sb.length() - target.length());\n          if (lastSeq.equals(target)) {\n            System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n            return;\n          }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2001, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean includes3(int a) {\n\t\twhile (a!=0)\n    {\n      if (a%10==3)\n      return true;\n      else\n      return includes3(a/10);\n    }\n\t\treturn false;\n\t}\n  public static void main(String args[])\n  {\n    int size=args.length;\n    int i=0;\n    while(i<size)\n    {\n      String data = args[i++];\n      Double tempnum=null;\n      int num;\n      try\n      {\n        tempnum=Double.parseDouble(data);\n        num=tempnum.intValue();\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(num<0 || num>1000)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean inc3=includes3(num);\n      if(inc3 && num%3==0)\n      System.out.println(\"dumb\");\n      else if(inc3)\n      System.out.println(\"stupid\");\n      else if(num%3==0)\n      System.out.println(\"idiot\");\n      else\n        System.out.println(\"smart\");\n    }\n  }\n}\n"}
{"id": 2002, "language": "Python3", "code": "import sys\n\ndef can_place(chessboard, r, c):\n    for i in range(r):\n        if chessboard[i] == c or abs(chessboard[i] - c) == r - i:\n            return False\n    return True\n\ndef arrange_queens(chessboard, r, locked_positions):\n    if r == 8:\n        return True\n\n    for c in range(8):\n        if (r, c) in locked_positions:\n            continue\n        if can_place(chessboard, r, c):\n            chessboard[r] = c\n            if arrange_queens(chessboard, r + 1, locked_positions):\n                return True\n            chessboard[r] = -1\n    return False\n\ndef main(argv):\n    locked_positions = set()\n    k = int(input().strip())\n    chessboard = [-1] * 8\n\n    for _ in range(k):\n        r, c = map(int, input().split())\n        locked_positions.add((r, c))\n        chessboard[r] = c\n\n    arrange_queens(chessboard, 0, locked_positions)\n\n    for r in range(8):\n        print(''.join('Q' if chessboard[r] == c else '.' for c in range(8)))\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 2003, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.io.BufferedWriter;\nimport java.io.OutputStreamWriter;\nimport java.io.FileOutputStream;\n\npublic class MonoSubstitution {\n  public static void main(String[] args) throws Exception {\n    String command = args[0];\n    String inputFile = args[1];\n    String outputFile = args[2];\n    String text = new String(Files.readAllBytes(Paths.get(inputFile)), StandardCharsets.UTF_8);\n\n    if (\"count\".equals(command)) {\n      Map<Character, Integer> countMap = new HashMap<>();\n      for (char c : text.toCharArray()) {\n        if (('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z') || c == ' ') {\n          countMap.put(c, countMap.getOrDefault(c, 0) + 1);\n        }\n      }\n      writeJsonMap(countMap, outputFile);\n    } else if (\"space\".equals(command)) {\n      char spaceChar = findReplacedSpaceChar(text);\n      writeJsonSpaceChar(spaceChar, outputFile);\n    } else if (\"decrypt\".equals(command)) {\n      char spaceChar = findReplacedSpaceChar(text);\n      int shift = findShift(text, spaceChar);\n      String decrypt = decryptText(text, shift, spaceChar);\n      Files.write(Paths.get(outputFile), decrypt.getBytes(StandardCharsets.UTF_8));\n    }\n  }\n\n  private static void writeJsonMap(Map<Character, Integer> map, String outputFile) throws Exception {\n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), StandardCharsets.UTF_8));\n    bw.write(\"{\\n\");\n    int size = map.size();\n    int i = 0;\n    for (Map.Entry<Character, Integer> e : map.entrySet()) {\n      char c = e.getKey();\n      String key = c == ' ' ? \" \" : String.valueOf(c);\n      bw.write(\"  \\\"\" + key + \"\\\": \" + e.getValue());\n      if (i++ < size-1) bw.write(\",\");\n      bw.write(\"\\n\");\n    }\n    bw.write(\"}\\n\");\n    bw.close();\n  }\n\n  private static char findReplacedSpaceChar(String text) {\n    Map<Character, Integer> freq = new HashMap<>();\n    long spaceCount = text.chars().filter(ch -> ch == ' ').count();\n    for (char c : text.toCharArray()) {\n      if ('a' <= c && c <= 'z') {\n        freq.put(c, freq.getOrDefault(c, 0) + 1);\n      }\n    }\n    char candidate = 'a';\n    long minDiff = Long.MAX_VALUE;\n    for (Map.Entry<Character, Integer> e : freq.entrySet()) {\n      long diff = Math.abs(e.getValue() - spaceCount);\n      if (diff < minDiff) {\n        candidate = e.getKey();\n        minDiff = diff;\n      }\n    }\n    return candidate;\n  }\n\n  private static void writeJsonSpaceChar(char c, String outputFile) throws Exception {\n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), StandardCharsets.UTF_8));\n    bw.write(\"{\\n  \\\"char\\\": \\\"\" + c + \"\\\"\\n}\\n\");\n    bw.close();\n  }\n\n  private static int findShift(String text, char spaceChar) {\n    int[] freq = new int[26];\n    for (char c : text.toCharArray()) {\n      char cl = Character.toLowerCase(c);\n      if ('a' <= cl && cl <= 'z' && cl != spaceChar) {\n        freq[cl - 'a']++;\n      }\n    }\n    int maxIndex = 0;\n    for (int i = 1; i < 26; i++) {\n      if (freq[i] > freq[maxIndex]) maxIndex = i;\n    }\n    // The most frequent char corresponds to 'e' (index 4)\n    return (maxIndex - 4 + 26) % 26;\n  }\n\n  private static String decryptText(String text, int shift, char spaceChar) {\n    StringBuilder sb = new StringBuilder(text.length());\n    for (char c : text.toCharArray()) {\n      if (c == spaceChar) {\n        sb.append(' ');\n      } else if ('a' <= c && c <= 'z') {\n        char dec = (char)(c - shift);\n        if (dec < 'a') dec += 26;\n        sb.append(dec);\n      } else if ('A' <= c && c <= 'Z') {\n        char dec = (char)(c - shift);\n        if (dec < 'A') dec += 26;\n        sb.append(dec);\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}"}
{"id": 2004, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n#define SavedHistory 7\n#define Minimum SavedHistory\n#define Maximum 10000\n\nclass Drummer\n{\n  vector<string> history;\n  bool isLastNote()\n  {\n    if(history.size() < SavedHistory) return false;\n\n    string notes = \"\";\n    for(int i=0; i<SavedHistory; ++i)\n    {\n      notes += history[SavedHistory-i];\n    }\n    return notes == \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  }\n  bool FFinished;\n  public:\n  Drummer():FFinished(false)\n  {\n  }\n//  __property bool IsFinished = {read=FFinished};\n  bool IsFinished()\n  {\n    return FFinished;\n  }\n\n  string Drumming()\n  {\n    string note;\n    if((rand()%2)==0)\n    {\n      note = \"\u30c9\";\n    } else {\n      note = \"\u30ab\";\n    }\n    history.push_back(note);\n\n    if(isLastNote())\n    {\n      FFinished = true;\n    }\n    return note;\n  }\n};\n\nint main(int argc, char *argv[])\n{\n  if(argc < Minimum) argc = Minimum;\n  if(argc > Maximum) argc = Maximum;\n\n  Drummer drummer;\n  for (int i = 0; i < argc; i++) {\n    printf(\"%s\\n\", drummer.Drumming().c_str());\n    if(drummer.IsFinished()) break;\n  }\n\n  if(drummer.IsFinished())\n  {\n    printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n  } else {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n \n  return 0;\n}"}
{"id": 2005, "language": "Python3", "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep 16 05:42:02 2018\n\n@author: ktv\n\"\"\"\n\nfrom collections import Counter\nimport json\nimport sys\nimport argparse\ndef count(args):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  #alphabets = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, '.split(\",\")\n  alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)\n  #count1 = count.copy()\n  #for key in count:\n      #if key not in alphabets:\n          #count1.pop(key)\n  dict_output = {}\n  for letter in alphabets:\n      if letter in count:\n        dict_output[letter] = count[letter]\n      else: dict_output[letter] = 0\n  #print(count)       \n  #print(count1)\n#json_str = json.dump(count1)\n  with open(args.output_file,'w') as f:\n      json.dump(dict_output,f)\n      f.close()\n\ndef space(args):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  #alphabets = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, '.split(\",\")\n  file = open(args.input_file)\n  input_text= file.read()\n  count = Counter(input_text)\n  dict_output = {}\n  #print(count)       \n  for letter,c in count.most_common(1):\n      dict_output['char'] = letter\n#json_str = json.dump(count1)\n  with open(args.output_file,'w') as f:\n      json.dump(dict_output,f)\n      f.close()\n\ndef main():\n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n\n    count_parser = subparsers.add_parser('count')\n    count_parser.add_argument('input_file')\n# add greeting option w/ default\n    count_parser.add_argument('output_file')\n    count_parser.set_defaults(func=count)\n    space_parser = subparsers.add_parser('space')\n    space_parser.add_argument('input_file')\n# add greeting option w/ default\n    space_parser.add_argument('output_file')\n    space_parser.set_defaults(func=space)\n    args = parser.parse_args()\n    args.func(args)\nif __name__ == '__main__':\n    main()\n\n"}
{"id": 2006, "language": "Python3", "code": "import sys\n\nclass ChallengeSolver:\n    def __init__(self):\n        pass\n    \n    def solve(self, args):\n        for arg in args:\n            self.process_one(arg)\n            \n    def process_one(self, item):\n        if not item.isdigit():\n            print(\"invalid\")\n            return\n\n        num = int(item)\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            return\n            \n        divisible = num % 3 == 0\n        contains_three = '3' in item\n        \n        if divisible and contains_three:\n            print(\"dumb\")\n        elif divisible:\n            print(\"idiot\")\n        elif contains_three:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n            \ndef main(argv):\n    solver = ChallengeSolver()\n    solver.solve(argv)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2007, "language": "Java", "code": "package track;\nimport java.io.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n       Integer k;\n     try{\n            k=Integer.parseInt(args[i]);\n          int y=k,b=0;\n      while(y>0)\n      {\n        if(y%10==3)\n        b=1;\n        y=y/10;\n      }\n      if(k>=0&&k<=1000)\n      {\n         if(k%3==0&&b==1)\n\t\t\toutput=\"dumb\";\n     \n     else if(k%3==0)\n      output=\"idiot\";\n      else if(b==1)\n     output=\"stupid\";\n      else \n      output=\"smart\";\n      }\n      else \n      output=\"invalid\";\n     \n\tSystem.out.println(output);\n\t\t\t}\n      catch(NumberFormatException e)\n      {\n        System.out.println(\"invalid\");\n      }\n      \t\t\t\t}}\n}\n"}
{"id": 2008, "language": "Python3", "code": "import sys\n\ndef get_idiot_rating(s_val):\n    if not s_val.isdigit(): return \"invalid\"\n    \n    n_val = int(s_val)\n    \n    if not (0 <= n_val <= 1000): return \"invalid\"\n\n    mod_3_is_0 = (n_val % 3 == 0)\n    has_the_digit_3 = ('3' in s_val)\n\n    if mod_3_is_0 and has_the_digit_3:\n        print(\"dumb\")\n    elif mod_3_is_0:\n        print(\"idiot\")\n    elif has_the_digit_3:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef process_arguments_cli(args):\n    for arg_s in args:\n        get_idiot_rating(arg_s)\n\nif __name__ == '__main__':\n    process_arguments_cli(sys.argv[1:])"}
{"id": 2009, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n   \tif(args.length != 0) {\n\t\t\t//String s = args[0];\n\t\t\tfor(int i = 0; i<args.length; i++) {\n\t\t\t\tnumCheck(args[i]);\n        \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\telse {\n\t\t\tSystem.out.println(\"invalid\");\n\t\t}\n\t\n  }\npublic static void numCheck(String s) {\n\t\tint flag = 0;\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tint num = Integer.parseInt(s);\n\t\t\tif(0 <= num && num <= 1000) {\n\t\t\t\tchar[] ch = s.toCharArray();\n\t\t\t\t\n\t\t\t\tif(num%3==0) {\n\t\t\t\t\tfor(int i = 0; i<ch.length;i++) {\n\t\t\t\t\t\tif(ch[i] == '3'){\n\t\t\t\t\t\t\t//System.out.println(\"smart\");\n\t\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(flag ==1) {\n\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.println(\"dumb\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor(int i = 0; i<ch.length;i++) {\n\t\t\t\t\t\tif(ch[i] == '3'){\n\t\t\t\t\t\t\t//System.out.println(\"smart\");\n\t\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(flag == 1) {\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\n\t\t\n\t\t}\n\t\t\n\t\tcatch (Exception e){\n\t\t\tSystem.out.println(\"invalid\");\n\t\t}\n\t\t\n\t}\n\n"}
{"id": 2010, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int number;\n  int ptr=1;\n  while(ptr<argc){\n    if(argv[ptr][0]>57 || argv[ptr][0]<49)\n    {\n      printf(\"invalid\\n\");\n      ptr++;\n      continue;\n}\nnumber=atoi(argv[ptr]);\nint check1=0,check2=0;\nif(number%3==0)\n{\n  check1=1;\n}\nint arrayn[100];\nint temp=number;\nint count=0;\nwhile(temp)\n{\n  int data=temp%10;\n  arrayn[count]=data;\n  temp=temp/10;\n  count++;\n  }\n  int iter;\n  for(iter=0;iter<count;iter++)\n  {\n    if(arrayn[iter]==3)\n    {\n      check2=1;\n      break;\n      }\n  }\n  if(number<0 && number>1000)\n  {\n    printf(\"invalid\");\n    printf(\"\\n\");\n    return 0;  }\n  else\n  {\n    if(check1==1 && check2==1)\n    {\n      printf(\"dumb\");printf(\"\\n\");\n    }\n    else\n    if(check1==1 && check2==0)\n    {\n      printf(\"idiot\");printf(\"\\n\");\n    }\n    else\n    if(check2==1 && check1==0)  \n    {\n       printf(\"stupid\");printf(\"\\n\");\n    }  \n    else{\n      printf(\"smart\");printf(\"\\n\");\n    }\n  }\n  ptr++;\n  }\n}\n"}
{"id": 2011, "language": "Python", "code": "import sys\nimport json\nimport random\ndef get_params(inlist):\n  params=[]\n  for item in inlist:\n    params.append(item['robot'])\n  params.append(inlist[-1]['you'])\n  return params\nargs=sys.argv[1:]\nwith open(args[0],'r') as fp:\n  data=json.load(fp)\n\nif len(data)<3:\n  robot_move=len(data)\n  ans=(robot_move-1)%3\nelse:\n  found_earlier=False\n  last_params=get_params(data[-3:])\n  iterator=len(data)-1\n  while True:\n    if iterator-3<0:\n      break\n    cur_params=get_params(data[iterator-3:iterator])\n    if cur_params==last_params:\n      ans=data[iterator]['robot']\n      found_earlier=True\n      break\n    iterator-=1\n  if not found_earlier:\n    ans=random.randint(0,2)\nprint(ans)"}
{"id": 2012, "language": "C#", "code": "using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // 3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u51e6\u7406\u3059\u308b\n        foreach (string s in args)\n        {\n            int n;\n            if (!int.TryParse(s, out n) || n < 0 || n > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n            bool divBy3 = n % 3 == 0;\n            bool contain3 = s.IndexOf('3') >= 0;\n            if (divBy3 && contain3)\n                Console.WriteLine(\"dumb\");\n            else if (divBy3)\n                Console.WriteLine(\"idiot\");\n            else if (contain3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 2013, "language": "Python3", "code": "import sys\nimport random\n\nclass DrumRhythmMachine:\n    PATTERN_TO_MATCH = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    SOUND_OPTIONS = ['\u30c9', '\u30ab']\n\n    def __init__(self, limit_on_plays):\n        self.play_limit = limit_on_plays\n        self.current_played_sequence = \"\"\n        self.total_beats_played = 0\n\n    def run_game(self):\n        if self.play_limit == 0:\n            print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n            return\n\n        while self.total_beats_played < self.play_limit:\n            # Generate a new drum sound.\n            generated_sound = random.choice(self.SOUND_OPTIONS)\n            print(generated_sound)\n            \n            # Update the sequence history.\n            self.current_played_sequence += generated_sound\n            \n            # Keep only the relevant part of the sequence.\n            if len(self.current_played_sequence) > len(self.PATTERN_TO_MATCH):\n                self.current_played_sequence = self.current_played_sequence[1:]\n\n            # Check for the target pattern.\n            if self.current_played_sequence == self.PATTERN_TO_MATCH:\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n\n            self.total_beats_played += 1\n        \n        # If the loop finishes without a match.\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(argv):\n    # Initialize and run the drum machine simulation.\n    max_drum_hits = int(argv[0])\n    game_instance = DrumRhythmMachine(max_drum_hits)\n    game_instance.run_game()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2014, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args)\n   {\nfor (int i = 0; i < args.length;i++) \n{\n    if(args[i].matches(\"[0-9]+\"))\n    {\n      int n = Integer.parseInt(args[i]);\n       if(n > 0 && n < 1000)\n       {\n         if(n % 3==0 && args[i].contains(\"3\"))\n         System.out.println(\"dumb\");\n         else if(args[i].contains(\"3\"))\n         System.out.println(\"stupid\");\n         else if(n%3==0)\n         System.out.println(\"idiot\");\n         else\n         System.out.println(\"smart\");\n       }\n       else\n       System.out.println(\"invalid\");\n    }\n\t\t\telse\n      System.out.println(\"invalid\");\n\t\t}\n\t}\n}\n"}
{"id": 2015, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int n = stoi(argv[1]);\n    string th[] = {\"\", \"M\", \"MM\", \"MMM\"};\n    string hu[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    string te[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    string on[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n    string roman = th[n/1000] + hu[(n/100)%10] + te[(n/10)%10] + on[n%10];\n    cout << roman << endl;\n    return 0;\n}"}
{"id": 2016, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String w : args) {\n      String y = \"invalid\";\n      try {\n        int n = Integer.parseInt(w);\n        if (n >= 0 && n <= 1000) {\n          boolean d = n % 3 == 0, h = w.contains(\"3\");\n          if (d && h) y = \"dumb\";\n          else if (d) y = \"idiot\";\n          else if (h) y = \"stupid\";\n          else y = \"smart\";\n        }\n      } catch (Exception e) {\n        y = \"invalid\";\n      }\n      System.out.println(y);\n    }\n  }\n}"}
{"id": 2017, "language": "Python3", "code": "import sys\n\ndef can_place_queens(N, placed_queens, rows, cols, diag1, diag2):\n    if len(placed_queens) == N:\n        return True\n    \n    row = len(placed_queens)\n    for col in range(N):\n        if col not in cols and (row - col) not in diag1 and (row + col) not in diag2:\n            placed_queens.append((row, col))\n            cols.add(col)\n            diag1.add(row - col)\n            diag2.add(row + col)\n\n            if can_place_queens(N, placed_queens, rows, cols, diag1, diag2):\n                return True\n\n            placed_queens.pop()\n            cols.remove(col)\n            diag1.remove(row - col)\n            diag2.remove(row + col)\n    return False\n\ndef display_board(N, placed_queens):\n    board = [['.'] * N for _ in range(N)]\n    for r, c in placed_queens:\n        board[r][c] = 'Q'\n    for line in board:\n        print(''.join(line))\n\ndef main():\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    \n    placed_queens = []\n    for i in range(1, k + 1):\n        r, c = map(int, input_data[i].split())\n        placed_queens.append((r, c))\n\n    N = 8\n    cols = set(c for r, c in placed_queens)\n    diag1 = set(r - c for r, c in placed_queens)\n    diag2 = set(r + c for r, c in placed_queens)\n\n    can_place_queens(N, placed_queens, [], cols, diag1, diag2)\n    display_board(N, placed_queens)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2018, "language": "Python3", "code": "import sys\n\n# Define board dimension\nBOARD_SIZE = 8\n\nclass EightQueensSolver:\n    def __init__(self):\n        # board_config stores column index for queen in each row (-1 if empty)\n        self.board_config = [-1] * BOARD_SIZE\n        # Track occupied columns and diagonals using boolean arrays\n        self.col_taken = [False] * BOARD_SIZE\n        self.diag1_taken = [False] * (2 * BOARD_SIZE - 1) # r + c\n        self.diag2_taken = [False] * (2 * BOARD_SIZE - 1) # r - c + offset\n        self.found_solution = False # Flag to stop search once solution is found\n\n    def place_initial_queens(self, initial_queens):\n        # Place the queens provided in the input and mark conflicts\n        for r, c in initial_queens:\n            self.board_config[r] = c\n            self.col_taken[c] = True\n            self.diag1_taken[r + c] = True\n            self.diag2_taken[r - c + BOARD_SIZE - 1] = True\n\n    def _solve_recursive(self, row_idx):\n        # Stop further recursion if a solution has already been found\n        if self.found_solution:\n            return\n\n        # Base case: All queens placed successfully\n        if row_idx == BOARD_SIZE:\n            self._print_board() # Print the solution\n            self.found_solution = True # Set flag to true\n            return\n\n        # If a queen is already in this row (from initial placement), move to next row\n        if self.board_config[row_idx] != -1:\n            self._solve_recursive(row_idx + 1)\n            return\n\n        # Try placing a queen in each column of the current row\n        for col_idx in range(BOARD_SIZE):\n            # Calculate diagonal indices\n            sum_diag_idx = row_idx + col_idx\n            diff_diag_idx = row_idx - col_idx + BOARD_SIZE - 1\n\n            # Check if current position is safe\n            if not self.col_taken[col_idx] and \\\n               not self.diag1_taken[sum_diag_idx] and \\\n               not self.diag2_taken[diff_diag_idx]:\n\n                # Place queen: update state\n                self.board_config[row_idx] = col_idx\n                self.col_taken[col_idx] = True\n                self.diag1_taken[sum_diag_idx] = True\n                self.diag2_taken[diff_diag_idx] = True\n\n                self._solve_recursive(row_idx + 1) # Recurse for next row\n\n                if self.found_solution: # If solution found during recursion, stop\n                    return\n\n                # Backtrack: undo placement\n                self.col_taken[col_idx] = False\n                self.diag1_taken[sum_diag_idx] = False\n                self.diag2_taken[diff_diag_idx] = False\n                self.board_config[row_idx] = -1\n\n    def _print_board(self):\n        # Format and print the chessboard\n        for r in range(BOARD_SIZE):\n            row_str_list = [\".\"] * BOARD_SIZE\n            row_str_list[self.board_config[r]] = \"Q\"\n            print(\"\".join(row_str_list))\n\n    def solve(self):\n        # Start the recursive solving process from the first row\n        self._solve_recursive(0)\n\ndef main(argv):\n    # Read input: number of initial queens\n    input_k = int(sys.stdin.readline())\n    initial_queens_coords = []\n    # Read coordinates of pre-placed queens\n    for _ in range(input_k):\n        r_coord, c_coord = map(int, sys.stdin.readline().split())\n        initial_queens_coords.append((r_coord, c_coord))\n\n    # Initialize and run the solver\n    solver_instance = EightQueensSolver()\n    solver_instance.place_initial_queens(initial_queens_coords)\n    solver_instance.solve()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2019, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:\n      continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:\n      break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2020, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class SoundSimulator {\n\n    private static final String DON = \"\u30c9\";\n    private static final String KA = \"\u30ab\";\n    private static final String[] SOUNDS = {DON, KA};\n    private static final String TARGET_PHRASE = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    private static final String CLEAR_PHRASE = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n    private static final String FAILED_PHRASE = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n    private static final Random RNG = new Random();\n\n    public static void main(String[] args) {\n        int maxPlays = Integer.parseInt(args[0]);\n        runGame(maxPlays);\n    }\n    \n    private static void runGame(int maxPlays) {\n        StringBuilder performance = new StringBuilder();\n\n        for (int i = 0; i < maxPlays; i++) {\n            String sound = generateRandomSound();\n            System.out.println(sound);\n            performance.append(sound);\n\n            if (checkPattern(performance)) {\n                System.out.println(CLEAR_PHRASE);\n                return;\n            }\n        }\n        \n        System.out.println(FAILED_PHRASE);\n    }\n    \n    private static String generateRandomSound() {\n        return SOUNDS[RNG.nextInt(SOUNDS.length)];\n    }\n    \n    private static boolean checkPattern(StringBuilder currentPerformance) {\n        if (currentPerformance.length() < TARGET_PHRASE.length()){\n            return false;\n        }\n        return currentPerformance.toString().endsWith(TARGET_PHRASE);\n    }\n}"}
{"id": 2021, "language": "Python3", "code": "import sys\nimport unicodedata\ndef main(argv):\n\n  for i, v in enumerate(argv):\n    status = True\n    for c in v:\n      #full-width detection\n      if unicodedata.east_asian_width(c)=='F':\n        \n        status = False\n        break\n    if status == False: \n      print('invalid \\n')\n      \n    else:\n        if v.isnumeric() and int(v)>=0 and int(v)<=1000:\n          if int(v)%3==0 and ('3' in v):\n            print('dumb \\n')\n          elif int(v)%3==0:\n            print('idiot \\n')\n          elif '3' in v:\n            print('stupid \\n')\n          else:\n            print('smart \\n')\n\n        else:\n          print('invalid \\n')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n"}
{"id": 2022, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nstruct return_type\n{\n    int number;\n    int is_contains_3;\n    int valid;\n};\ntypedef struct return_type return_type;\nint check_numb(char charac)\n{\n    if ((charac < 48) || (charac > 57))\n    {\n        return 0;\n    }\n    return 1;\n}\n\nreturn_type str_to_int(char string[])\n{\n    int len = strlen(string);\n    int number = 0;\n    int is_3 = 0;\n    for (int i = 0; i < len; i++)\n    {\n        if (check_numb(string[i]) == 0)\n        {\n            return (return_type){0, 0, 0};\n        }\n        if (((int)string[i] - 48) == 3)\n        {\n            is_3 = 1;\n        }\n        number = number * 10 + ((int)string[i] - 48);\n    }\n    return (return_type){number, is_3, 1};\n}\n\nint main(int argc, char *argv[])\n{\n    for (int i = 1; i < argc; i++)\n    {\n        return_type var = str_to_int(argv[i]);\n        if(var.valid == 0)\n        {\n            printf(\"invalid\\n\");\n            continue;\n        }\n        if (var.is_contains_3&&(var.number % 3 == 0))\n        {\n            printf(\"dumb\\n\");\n        }\n        else if (var.is_contains_3)\n        {\n            printf(\"stupid\\n\");\n        }\n        else if (var.number % 3 == 0)\n        {\n            printf(\"idiot\\n\");\n        }\n        else\n        {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}\n\n"}
{"id": 2023, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class TaikoGame {\n  public static void main(String[] args) {\n    int limit = Integer.parseInt(args[0]);\n    String target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    List<String> soundSequence = new ArrayList<>();\n    Random random = new Random();\n\n    for (int i = 0; i < limit; i++) {\n      String currentSound;\n      if (random.nextInt(2) == 0) {\n        currentSound = \"\u30c9\";\n      } else {\n        currentSound = \"\u30ab\";\n      }\n      System.out.println(currentSound);\n      soundSequence.add(currentSound);\n\n      if (soundSequence.size() >= target.length()) {\n        // \u6700\u8fd1\u306e\u6f14\u594f\u3092\u78ba\u8a8d\u3059\u308b\n        StringBuilder lastPart = new StringBuilder();\n        for (int j = soundSequence.size() - target.length(); j < soundSequence.size(); j++) {\n          lastPart.append(soundSequence.get(j));\n        }\n        if (lastPart.toString().equals(target)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2024, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class MinimalisticSolution {\n\n  private static String getMinimalVerdict(final int n) {\n    if (n < 0 || n > 1000) return \"invalid\";\n    boolean d = (n % 3 == 0);\n    boolean h = String.valueOf(n).contains(\"3\");\n    if (d && h) return \"dumb\";\n    if (d) return \"idiot\";\n    if (h) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] a) {\n    for (String s : a) {\n      Scanner x = new Scanner(s);\n      if (x.hasNextInt()) {\n        System.out.println(getMinimalVerdict(x.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      x.close();\n    }\n  }\n}"}
{"id": 2025, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] a) {\n\t\tfor (int i=0; i<a.length; i++)  \n     {\n\t\t  if(a[i].matches(\"[0-9]+\"))\n      {\n        int n=Integer.parseInt(a[i]);\n        if(n>0 && n<1000)\n        {\n          if(n%3==0 && a[i].contains(\"3\"))\n          System.out.println(\"dumb\");\n          else if(n%3==0)\n          System.out.println(\"idiot\");\n          else if(a[i].contains(\"3\")) \n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n        else\n          System.out.println(\"invalid\");\n      }\n        else\n           System.out.println(\"invalid\");\n        }\n      }\n\t\t}\n"}
{"id": 2026, "language": "Python3", "code": "import sys\nimport re\nimport json\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    alphaReg = re.compile(r'^[a-zA-Z]+$')\n    def isalpha(s):\n      return alphaReg.match(s) is not None\n\n    if argv[0]==\"count\":\n      counter={' ':0,'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'J':0,'K':0,'L':0,'M':0,'N':0,'O':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'U':0,'V':0,'W':0,'X':0,'Y':0,'Z':0,'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n      for line in open(argv[1],\"r\"):\n        string=line\n        for c in string:\n          if not isalpha(c) and not c==\" \":\n            continue; \n          counter[c]+=1\n      print(counter)\n      fw=open(argv[2],\"w\")\n      json.dump(counter,fw)\n    \n    if argv[0]==\"space\":\n      counter={' ':0,'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'J':0,'K':0,'L':0,'M':0,'N':0,'O':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'U':0,'V':0,'W':0,'X':0,'Y':0,'Z':0}\n      for line in open(argv[1],\"r\"):\n        string=line\n        for c in string:\n          if not isalpha(c) and not c==\" \":\n            continue; \n          counter[c.upper()]+=1\n      print(counter)\n      order=sorted(counter.items(), key=lambda x: -x[1])\n      print(order)\n      a={\"char\":str(order[0][0]).lower()}\n      fw=open(argv[2],\"w\")\n      json.dump(a,fw)\n    \n    if argv[0]==\"decrypt\":\n      counter={' ':0,'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'J':0,'K':0,'L':0,'M':0,'N':0,'O':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'U':0,'V':0,'W':0,'X':0,'Y':0,'Z':0}\n      for line in open(argv[1],\"r\"):\n        string=line\n        for c in string:\n          if not isalpha(c) and not c==\" \":\n            continue; \n          counter[c.upper()]+=1\n      print(counter)\n      order=sorted(counter.items(), key=lambda x: -x[1])\n      print(order)\n      kuuhaku={\"char\":str(order[0][0]).lower(),\"e\":str(order[0][1]).lower()}\n      \n      fw=open(argv[2],\"w\")\n      json.dump(a,fw)\n      a=\"aa\"\n      fw=open(argv[2],\"w\")\n      json.dump(a,fw)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2027, "language": "Python3", "code": "import sys\n\ndef is_halfwidth_digit(s):\n    return s.isdecimal() and s.isascii()\n\ndef get_result(val):\n    num = int(val)\n    div = num % 3 == 0\n    has3 = '3' in val\n    if div and has3:\n        return \"dumb\"\n    if div:\n        return \"idiot\"\n    if has3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for v in argv:\n        if not is_halfwidth_digit(v):\n            print(\"invalid\")\n            continue\n        i = int(v)\n        if 0 <= i <= 1000:\n            print(get_result(v))\n        else:\n            print(\"invalid\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2028, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    \n    int div=0;\n    int three=0;\n    int len=strlen(argv[i]);\n    int c=stoi(argv[i]);\n    int sum=0;\n    if(c>=0 && c<=1000)\n    {\n      while(c!=0)\n      {\n        int rem=c%10;\n        sum=sum+rem;\n        if(rem==3)\n        {\n          three++;\n        }\n        c=c/10;\n      }\n    \n    if(sum%3==0)\n    {\n      div++;\n    }\n    if(three>0 && div>0)\n    {\n      cout<<\"dumb\"<<endl;\n    }\n    else if(div>0)\n    {\n      cout<<\"idiot\"<<endl;\n    }\n    else if(three>0)\n    {\n      cout<<\"stupid\"<<endl;\n    }\n    else{\n      cout<<\"smart\"<<endl;\n    }\n\n  }\nelse{\n  cout<<\"invalid\"<<endl;\n}\n}\n  return 0;\n}\n"}
{"id": 2029, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class RuleEngine {\n\n  private static String applyRules(int num) {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean isDivisibleByThree = (num % 3 == 0);\n    boolean hasThreeAsDigit = String.valueOf(num).contains(\"3\");\n\n    if (isDivisibleByThree && hasThreeAsDigit) return \"dumb\";\n    if (isDivisibleByThree) return \"idiot\";\n    if (hasThreeAsDigit) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] inputArgs) {\n    for (String arg : inputArgs) {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        System.out.println(applyRules(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close();\n    }\n  }\n}"}
{"id": 2030, "language": "Java", "code": "package track;\n\npublic class App {\n\n    public static void main(String[] args) {\n        for (int i = 0, l = args.length; i < l; i++) {\n        eval(args[i]);\n        }\n    }\n\n    public static void eval(final String value){\n        try{\n            final int val = Integer.valueOf(value);\n            if(val >= 0 && val <= 1000){\n                if(val%3==0 && containsThree(val)){\n                    System.out.println(\"dumb\");\n                } else if (val%3==0){\n                    System.out.println(\"idiot\");\n                } else if (containsThree(val)){\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        } catch(Exception e){\n            System.out.println(\"invalid\");\n        }\n    }\n\n    private static boolean containsThree(int val) {\n        char[] digits = String.valueOf(val).toCharArray();\n        for (char digit : digits) {\n            if(digit == '3'){\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"id": 2031, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n  public static void main(String[] args) {\n    char[] words = {'\u30c9', '\u30ab'};\n    // for(int i = 0; i < args.length; i++){\n    //   System.out.println(args[i]);\n    // }\n    int l = Integer.parseInt(args[0]);\n    if(l == 0){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    char[] generatedWords = new char[l];\n    for (int i = 0; i < l; i++) {\n      int select = (int)(Math.random()*2);\n      generatedWords[i] = words[select];\n    }\n    StringBuilder sb = new StringBuilder();\n    List<String> list = new ArrayList<String>();\n    boolean isHit = false;\n    for(int i = 0; i < l; i++){\n      sb.append(generatedWords[i]);\n      list.add(Character.toString(generatedWords[i]));\n      if(sb.toString().matches(\".*\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")){\n        sb = new StringBuilder();\n        list.add(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        isHit = true;\n      }\n    }\n    if(isHit == false){\n      list.add(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n    for(String line : list){\n      System.out.println(line);\n    }\n  }\n}\n"}
{"id": 2032, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isValidNumber(string &str) {\n    for (char c : str) if (!isdigit(c)) return false;\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i=1; i<argc; ++i) {\n        string val(argv[i]);\n        if (!isValidNumber(val)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int num = stoi(val);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div3 = (num%3 == 0);\n        bool contains3 = val.find('3') != string::npos;\n        if (div3 && contains3) cout << \"dumb\" << endl;\n        else if (div3) cout << \"idiot\" << endl;\n        else if (contains3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2033, "language": "C", "code": "#include <stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#include<string.h>\n\nint main(int argc, char *argv[])\n{ int i;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) \n  {\n       int num=atoi(argv[i]);\n       int temp=num;\n       int val,flag=0;\n       while(temp>0)\n       {\n         val=temp%10;\n         if(val==3)\n         {\n           flag=1;\n         }\n         temp=temp/10;\n       }\n       if(num%3==0 && flag==1)\n       {\n         printf(\"dump\\n\");\n       }\n       else if(num%3==0 && num!=0)\n       {\n         printf(\"idiot\\n\");\n       }\n       else if(flag==1)\n       {\n         printf(\"stupid\\n\");\n       }\n       else if(num%3!=0 && flag!=1)\n       {\n         printf(\"smart\\n\");\n       }\n       else\n       {\n         printf(\"invalid\\n\");\n       }\n  }\n  return 0;\n}\n"}
{"id": 2034, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass GameData {\n    int robot;\n    int you;\n    GameData(int robot, int you) {\n        this.robot = robot;\n        this.you = you;\n    }\n}\n\nclass GameHistoryProcessor {\n    private List<Integer> rHands;\n    private List<Integer> yHands;\n    private Map<String, Integer> decisionMap;\n\n    public GameHistoryProcessor() {\n        rHands = new ArrayList<>();\n        yHands = new ArrayList<>();\n        decisionMap = new HashMap<>();\n\n        // Initialize robot's fixed initial hands\n        rHands.add(0); // Rock\n        rHands.add(1); // Scissors\n        rHands.add(2); // Paper\n    }\n\n    public void processGames(List<GameData> records) {\n        for (int i = 0; i < records.size(); i++) {\n            GameData current = records.get(i);\n            int currentRobot = current.robot;\n            int currentYou = current.you;\n\n            if (i >= 3) {\n                // Extract state from history based on current index 'i'\n                String state = String.format(\"%d_%d_%d_%d\",\n                    rHands.get(i - 3), rHands.get(i - 2), rHands.get(i - 1), yHands.get(i - 1));\n                \n                // Update decision map\n                decisionMap.put(state, (currentRobot + 1) % 3);\n            }\n            \n            rHands.add(currentRobot);\n            yHands.add(currentYou);\n        }\n    }\n\n    public int predictNextRobotMove() {\n        int n = rHands.size(); // Total history size\n        String finalState = String.format(\"%d_%d_%d_%d\",\n            rHands.get(n - 3), rHands.get(n - 2), rHands.get(n - 1), yHands.get(n - 1));\n        \n        return decisionMap.getOrDefault(finalState, 0); // Default to Rock\n    }\n}\n\npublic class MainGame {\n\n    public static void main(String[] args) {\n        String inputPath = args[0];\n        List<GameData> gameRecords;\n\n        try {\n            String fileContent = FileHandler.readTextFile(inputPath);\n            gameRecords = JsonParserUtil.parseGameRecords(fileContent);\n        } catch (IOException e) {\n            System.err.println(\"Error accessing file: \" + e.getMessage());\n            return;\n        }\n\n        GameHistoryProcessor processor = new GameHistoryProcessor();\n        processor.processGames(gameRecords);\n        int robotNextMove = processor.predictNextRobotMove();\n\n        System.out.println(HandEvaluator.getCounterPlay(robotNextMove));\n    }\n}\n\nclass FileHandler {\n    public static String readTextFile(String path) throws IOException {\n        StringBuilder builder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                builder.append(line.trim());\n            }\n        }\n        return builder.toString();\n    }\n}\n\nclass JsonParserUtil {\n    public static List<GameData> parseGameRecords(String jsonStr) {\n        List<GameData> records = new ArrayList<>();\n        String innerContent = jsonStr.substring(1, jsonStr.length() - 1); // Remove []\n        String[] parts = innerContent.split(\"\\\\},\\\\{\"); // Split records\n\n        for (String part : parts) {\n            // Clean and parse \"robot\":X,\"you\":Y\n            String cleaned = part.replaceAll(\"[{}\\\" ]\", \"\");\n            String[] keyValuePairs = cleaned.split(\",\");\n            int rVal = Integer.parseInt(keyValuePairs[0].split(\":\")[1]);\n            int yVal = Integer.parseInt(keyValuePairs[1].split(\":\")[1]);\n            records.add(new GameData(rVal, yVal));\n        }\n        return records;\n    }\n}\n\nclass HandEvaluator {\n    public static int getCounterPlay(int opponentHand) {\n        switch (opponentHand) {\n            case 0: return 2; // Rock -> Paper\n            case 1: return 0; // Scissors -> Rock\n            case 2: return 1; // Paper -> Scissors\n            default: return -1; // Should not happen\n        }\n    }\n}"}
{"id": 2035, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction check_3idiots($input) {\n  if (!preg_match('/^\\d+$/', $input)) return \"invalid\";\n  $num = intval($input);\n  if ($num < 0 || $num > 1000) return \"invalid\";\n  $has3 = strpos(strval($num), '3') !== false;\n  $div3 = $num % 3 === 0;\n  if ($div3 && $has3) return 'dumb';\n  if ($div3) return 'idiot';\n  if ($has3) return 'stupid';\n  return 'smart';\n}\n\nfunction main($argc, $argv) {\n  foreach($argv as $val) {\n    echo check_3idiots($val) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2036, "language": "C", "code": "#include <stdio.h>\n#define N 8\n\nint queens[N], fixed[N];\n\nint isSafe(int row, int col) {\n    for (int i = 0; i < row; i++) {\n        if (queens[i] == col ||\n            queens[i] - i == col - row ||\n            queens[i] + i == col + row) return 0;\n    }\n    return 1;\n}\n\nint dfs(int r) {\n    if (r == N) return 1;\n    if (fixed[r]) return dfs(r+1);\n    for (int c = 0; c < N; c++) {\n        if (isSafe(r, c)) {\n            queens[r] = c;\n            if (dfs(r+1)) return 1;\n        }\n    }\n    queens[r] = -1;\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n    for (int i=0;i<N;i++) queens[i] = -1;\n    for (int i=0;i<N;i++) fixed[i] = 0;\n    scanf(\"%d\",&k);\n    for (int i=0;i<k;i++) {\n        scanf(\"%d%d\",&r,&c);\n        queens[r] = c;\n        fixed[r] = 1;\n    }\n    dfs(0);\n    for (int i=0;i<N;i++) {\n        for (int j=0;j<N;j++)\n            putchar(queens[i]==j?'Q':'.');\n        putchar('\\n');\n    }\n    return 0;\n}"}
{"id": 2037, "language": "Python3", "code": "import sys\n\ndef arabic_to_roman(number):\n    # \u30ed\u30fc\u30de\u6570\u5b57\u5bfe\u5fdc\u8868\n    roman_mapping = [\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I')\n    ]\n    \n    result = \"\"\n    for value, numeral in roman_mapping:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result\n\ndef main(argv):\n    if len(argv) != 1:\n        print(\"Usage: roman-numeralize <number>\")\n        return\n    \n    try:\n        number = int(argv[0])\n    except ValueError:\n        print(\"Error: Please enter a valid integer.\")\n        return\n\n    if number < 1 or number > 3999:\n        print(\"Error: Number out of range (1-3999).\")\n        return\n\n    roman_numeral = arabic_to_roman(number)\n    print(roman_numeral)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2038, "language": "Python3", "code": "import sys\nimport json\n\n# json\u51fa\u529b\ndef _output_json(dict_, target_path):\n  with open(target_path, 'w') as f:\n    json.dump(dict_, f)\n\n# \u6587\u5b57\u3092\u30b7\u30d5\u30c8\u3055\u305b\u308b(shift\u304c\u8ca0\u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044)\ndef _rot(text, shift):\n  la = ord('a')\n  lz = ord('z')\n  ua = ord('A')\n  uz = ord('Z')\n  rot_list = []\n  for c in text:\n    c = ord(c)\n    if la <= c and c <= lz:\n      c = (c - la + shift) % (lz - la + 1) + la\n    elif ua <= c and c <= uz:\n      c = (c - ua + shift) % (uz - ua + 1) + ua\n    rot_list.append(chr(c))\n  return ''.join(rot_list)\n\n# \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8(\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57)\u3068\u30b9\u30da\u30fc\u30b9\u3092\u6570\u3048\u305fdict\u3092\u8fd4\u3059\ndef _count(source_path):\n  la = ord('a')\n  lz = ord('z')\n  ua = ord('A')\n  uz = ord('Z')\n  count_dict = {' ': 0}\n  for c in range(la, lz + 1):\n    count_dict[chr(c)] = 0\n  for c in range(ua, uz + 1):\n    count_dict[chr(c)] = 0\n\n  with open(source_path, 'r') as source:\n    for line in source:\n      for c in line:\n        cc = ord(c)\n        if (cc < la or lz < cc) and (cc < ua or uz < cc) and c != ' ':\n          # \u30ab\u30a6\u30f3\u30c8\u5bfe\u8c61\u306e\u6587\u5b57\u3067\u306a\u3044\n          continue\n\n        if not c in count_dict:\n          count_dict[c] = 1\n        else:\n          count_dict[c] += 1\n\n  return count_dict\n\n# \u30b9\u30da\u30fc\u30b9\u3068\u5165\u308c\u66ff\u3048\u3089\u308c\u3066\u3044\u308b\u6587\u5b57\u3092\u63a8\u6e2c\u3057\u3066\u8fd4\u3059(\u203b\u4e0d\u5b8c\u5168)\ndef _space(source_path):\n  # \u30b9\u30da\u30fc\u30b9\u304c\u6700\u983b\u5024\u3067\u3042\u308b\u3082\u306e\u3068\u3057\u3066\u3057\u307e\u3046\n  count_dict = _count(source_path)\n  most_frequency = ' '\n  max_count = 0\n  for c in count_dict:\n    count = count_dict[c]\n    if count > max_count:\n      max_count = count\n      most_frequency = c\n\n  return most_frequency\n\n# \u89e3\u8aad(\u203b\u4e0d\u5b8c\u5168)\ndef _decrypt(source_path, target_path):\n  space = _space(source_path)\n\n  # 2\u756a\u76ee\u306b\u983b\u5ea6\u306e\u9ad8\u3044\u6587\u5b57\u3092\u300ce\u300d\u3068\u3057\u3066\u30b7\u30d5\u30c8\u91cf\u3092\u3082\u3068\u3081\u308b\n  count_dict = _count(source_path)\n  second_frequency = ' '\n  second_count = 0\n  for c in count_dict:\n    count = count_dict[c]\n    if c != space and count > second_count:\n      second_count = count\n      second_frequency = c\n  shift = ord(second_frequency) - ord('e')\n\n  with open(source_path, 'r') as source, open(target_path, 'w') as target:\n    for source_line in source:\n      # \u30b9\u30da\u30fc\u30b9\u3068\u4e00\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u308b\n      for i in range(len(source_line)):\n        c = source_line[i]\n        if c == ' ':\n          source_line[i] = space\n        elif c == space:\n          source_line[i] = ' '\n\n      \u30b7\u30d5\u30c8\u3055\u308c\u305f\u3068\u601d\u308f\u308c\u308b\u91cf\u3060\u3051\u9006\u30b7\u30d5\u30c8\n      target_line = _rot(source_line, -shift)\n\n      \u51fa\u529b\n      target.write(target_line)\n\ndef main(argv):\n  command = argv[0]\n  source_path = argv[1]\n  target_path = argv[2]\n  if command == 'count':\n    result = _count(source_path)\n    _output_json(result, target_path)\n  elif command == 'space':\n    result = _space(source_path)\n    _output_json({'char': result}, target_path)\n  elif command == 'decrypt':\n    _decrypt(source_path, target_path)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2039, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  pmove=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(pmove+[{}]):\n    if k<3:continue\n    cmove=(pmove[k-3]['robot'],pmove[k-2]['robot'],pmove[k-1]['robot'],pmove[k-1]['you'])\n    omove=i.get('robot',-1)\n    if omove==-1:break\n    if cmove in d:\n      if d[cmove]!=(omove-1)%3:\n        print(k,cmove,omove,d[cmove])\n    d[cmove]=omove\n  \n  print((d[cmove])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2040, "language": "Java", "code": "package track;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class App {\n  static int N = 8;\n  final static int FREE = 1;\n  final static int NOT_FREE = 0;\n\n\n  static int[]pos = new int [N];\n  static int[]col = new int [N];\n  static int[]up = new int [2*N-1];\n  static int[]down = new int [2*N-1];\n  static List<Integer>row = new ArrayList<Integer>();\n  static List<Integer>column = new ArrayList<Integer>();\n  \n  public static void main(String[] args)  {\n    /*initialize*/\n    Arrays.fill(col, FREE);\n    Arrays.fill(up, FREE);\n    Arrays.fill(down, FREE);\n\n    /*read*/\n    Scanner scanner = new Scanner(System.in);\n    int k = scanner.nextInt();\n    for(int i = 0; i < k; i++) {\n      int r = scanner.nextInt();\n      int c = scanner.nextInt();\n      row.add(r);\n      column.add(c);\n      pos[r] = c;\n    }\n    scanner.close();\n      \n    /*get answer and output*/\n    if(row.size()==8) {\n      printBoard();\n    }else {\n      putQueens_test(0);         \n    }\n  }\n  \n  /*put queen*/\n  public static void putQueens_test(int a) {\n    for(int i = 0; i < N; i++) {\n      if(col[i] == FREE && up[a+i] == FREE && down[a-i+(N-1)] == FREE) { // can put\n        pos[a] = i; // put queen\n        if(a == (N-1)) {          \n          if(isAllQueensCorrect()) {\n            printBoard(); \n          }\n        }else {\n          col[i] = up[a+i] = down[a-i+(N-1)] = NOT_FREE;\n          putQueens_test(a+1);\n          col[i] = up[a+i] = down[a-i+(N-1)] = FREE;\n        } \n      }\n    }\n  }\n  \n  public static void initialize() {\n    for(int i = 0; i < row.size(); i++) {\n\t    pos[row.get(i)] = column.get(i);\n    }\n  }\n  /*output*/\n  public static void printBoard() {\n    for(int i = 0; i < N; i++) {\n      String line = \"\";\n      for(int j = 0; j < N; j++) {\n        if(pos[i]==j) {\n          line+=\"Q\";\n        }else {\n          line+=\".\";\n        }\n      }\n      System.out.println(line);\n    }\n  }\n  \n  public static char[][] getBoard() {\n\tchar[][]board = new char[N][N];\n    for(int i = 0; i < N; i++) {\n      for(int j = 0; j < N; j++) {\n        if(pos[i]==j) {\n          board[i][j]='Q';\n        }else {\n          board[i][j]='.';\n        }\n      }\n    }\n    return board;\n  }\n  public static boolean isAllQueensCorrect() {\n    List<Integer> position = new ArrayList<Integer>();\n    for(int i = 0; i < N; i++) {\n      position.add(pos[i]);\n    }\n    for(int i = 0; i < row.size(); i++) {\n      if(position.get(row.get(i))!=column.get(i))return false;\n    }\n    if(position.stream().distinct().collect(Collectors.toList()).size()!=position.size()) {// 2 or more queens exist in same column\n      return false;\n    }else if(position.stream().filter(i -> i.equals(-1)).collect(Collectors.toList()).size()!=0){// queen not exit in all row\n      return false;\n    }else {\n      char[][] board = getBoard();\n      for(int b = 0; b < N; b++) {\n        int r = b;\n        int c = pos[b];\n        int flag = 0;\n    \t  while(r <N && c <N) {//\u53f3\u4e0b\n    \t    if(flag == 1 && board[r][c]=='Q')return false;\n            if(board[r][c]=='Q')flag = 1;\n            r++; c++;\n    \t  }\n    \t  r = b; c = pos[b]; flag = 0;\n    \t  while(r >=0 && c >=0) {//\u5de6\u4e0a\n    \t    if(flag == 1 && board[r][c]=='Q')return false;\n          if(board[r][c]=='Q')flag = 1;\n          r--; c--;\n        }\n    \t  r = b; c = pos[b]; flag = 0;\n    \t  while(r >=0 && c < N) {//\u53f3\u4e0a\n    \t    if(flag == 1 && board[r][c]=='Q')return false;\n          if(board[r][c]=='Q')flag = 1;\n          r--; c++;\n        }\n    \t  r = b; c = pos[b]; flag = 0;\n    \t  while(r < N && c >=0) {//\u5de6\u4e0b\n    \t    if(flag == 1 && board[r][c]=='Q')return false;\n          if(board[r][c]=='Q')flag = 1;\n          r++; c--;\n        }\n      }\n      return true;\n    }\n  }\n}\n"}
{"id": 2041, "language": "Python3", "code": "import sys\n\ndef figure_out_category(number_string):\n    try:\n        num = int(number_string)\n    except ValueError:\n        return \"invalid\"\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    divisible = num % 3 == 0\n    contains_digit_3 = \"3\" in str(num)\n    if divisible and contains_digit_3:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif contains_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for item in argv:\n        print(figure_out_category(item))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2042, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    if(args.length == 0){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    int tries;\n    try {\n      tries = Integer.parseInt(args[0]);\n      if(tries < 1){\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        return;\n      }\n    } catch(Exception ex){\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    StringBuilder roll = new StringBuilder();\n    String checkStr = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    Random rng = new Random();\n\n    for(int count = 0; count < tries; count++){\n      boolean d = rng.nextBoolean();\n      String out = d ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(out);\n      roll.append(out);\n      if(roll.length() > 8){\n        roll.deleteCharAt(0);\n      }\n      if(roll.length() == 8 && roll.toString().equals(checkStr)){\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2043, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // for strtol\n\n// checks if a number has the digit '3'\nint has_three_in_it(int n) {\n  if (n == 0) return 0;\n  while (n > 0) {\n    if (n % 10 == 3) return 1;\n    n /= 10;\n  }\n  return 0;\n}\n\n// determines the appropriate output string\nconst char* get_idiot_status(int num) {\n  int div_by_3 = (num % 3 == 0);\n  int includes_3 = has_three_in_it(num);\n\n  if (div_by_3 && includes_3) return \"dumb\";\n  if (div_by_3) return \"idiot\";\n  if (includes_3) return \"stupid\";\n  return \"smart\";\n}\n\nint main(int argc, char *argv[]) {\n  // loop through command-line arguments\n  for (int idx = 1; idx < argc; idx++) {\n    char *stop_char;\n    long input_num_long = strtol(argv[idx], &stop_char, 10);\n\n    // check for conversion errors\n    if (*stop_char != '\\0' || stop_char == argv[idx]) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    // check for value range\n    if (input_num_long < 0 || input_num_long > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    \n    printf(\"%s\\n\", get_idiot_status((int)input_num_long));\n  }\n  return 0;\n}"}
{"id": 2044, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) throws java.lang.Exception\n  {\n    int ans, count,flag;\n    for(int j=0,l=args.length;j<l;j++)\n    {\n        String output =args[j];\n        flag=4;\n        int ascii=(int)output.charAt(0);\n        if(ascii>256)\n        {\n          System.out.println(\"invalid\");\n          break;\n       }\n\n                           try\n                           {\n                                   Integer i=Integer.parseInt(output);\n                                   if(i%3==0)\n                                        flag=1;\n                                   if(output.contains(\"3\"))\n                                   {\n                                          flag=2;\n                                          if(i%3==0)\n                                                flag=3;\n\n                                   } \n                                   switch(flag)\n                                   {\n                                          case 1: \n                                                  System.out.println(\"idiot\");break;\n                                          case 2:\n                                                  System.out.println(\"stupid\");break;\n                                          case 3:\n                                                  System.out.println(\"dumb\");break;\n                                          case 4:\n                                                  System.out.println(\"smart\");break;\n                                   }\n                                   }catch(Exception e)\n                                   {\n                                          System.out.println(\"invalid\");\n                                   }\n                           }\n    }\n  }\n\n               \n  \n\n                                  "}
{"id": 2045, "language": "Python3", "code": "import sys\nimport json\nimport string\nfrom collections import Counter\n\ndef count(cipher_path):\n  '''\n  \u6587\u5b57\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\n  '''\n\n  counter = dict()\n  for c in ' ' + string.ascii_letters:\n    counter[c] = 0\n  \n  with open(cipher_path, 'r') as cipher_file:\n    for cipher_line in cipher_file:\n      for c in cipher_line:\n          if c in counter:\n            counter[c] += 1\n\n  return counter\n\n\ndef space(cipher_path):\n  '''\n  \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u4ea4\u63db\u3055\u308c\u305f\u6587\u5b57\u3092\u6c42\u3081\u308b\n  '''\n\n  alpha_space_count = 0\n  symbol_count = 0\n  with open(cipher_path, 'r') as cipher_file:\n    prev_c = ''\n    for cipher_line in cipher_file:\n      for c in cipher_line.strip():\n        if prev_c != ' ' and prev_c not in string.ascii_letters and c in string.ascii_letters:\n          # \u8a18\u53f7\u306e\u5f8c\u306b\u306f\u30b9\u30da\u30fc\u30b9\u304c\u6765\u308b\u306f\u305a\u306a\u306e\u3067\uff0c\u8a18\u53f7\u306e\u6b21\u306e\u6587\u5b57\u304c\u7b54\u3048\n          return {'char': c}\n        if c == ' ' or c in string.ascii_letters:\n          alpha_space_count += 1\n        else:\n          symbol_count += 1\n        prev_c = c\n\n  # \u6697\u53f7\u4e2d\u306b\u8a18\u53f7\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f\u5e73\u5747\u5358\u8a9e\u9577\u304c4.5\u3067\u3042\u308b\u3053\u3068\u3092\u7528\u3044\u3066\u63a8\u6e2c\n  space_char = ''\n  space_char_avg = 10**5\n  counter = count(cipher_path)\n  for ans in string.ascii_letters:\n    avg = 0\n    word_count = 0\n    prev_space = True\n    with open(cipher_path, 'r') as cipher_file:\n      for cipher_line in cipher_file:\n        for c in cipher_line:\n          if c != ans and (c == ' ' or c in string.ascii_letters):\n            avg += 1\n            prev_space = False\n          elif not prev_space:\n            word_count += 1\n            prev_space = True\n    avg /= word_count\n    print(ans, avg)\n    if abs(avg-4.5) < abs(space_char_avg-4.5):\n      space_char = ans\n      space_char_avg = avg\n  \n  return {'char': space_char}\n\n\ndef decrypt(cipher_path):\n  '''\n  \u6697\u53f7\u3092\u89e3\u8aad\u3059\u308b\n  '''\n\n  counter = Counter(count(cipher_path))\n  space_char = space(cipher_path)['char']\n\n  # \u4f55\u6587\u5b57\u30b7\u30d5\u30c8\u3057\u305f\u304b (base) \u3092\u6c42\u3081\u308b\n  base = 0\n  for most_common in counter.most_common():\n    if most_common[0] in string.ascii_lowercase and most_common[0] != space_char:\n      base = ord(most_common[0]) - ord('e')\n      break\n\n  # base\u3092\u5143\u306b\u5bfe\u5fdc\u8868\u3092\u4f5c\u308b\n  decrypted_char = dict()\n  decrypted_char[space_char] = ' '\n  for lower,upper in zip(string.ascii_lowercase, string.ascii_uppercase):\n    if chr(ord('a') + (ord(lower)-ord('a')+base+26)%26) == space_char:\n      decrypted_char[' '] = lower\n    else:\n      decrypted_char[chr(ord('a') + (ord(lower)-ord('a')+base+26)%26)] = lower\n    decrypted_char[chr(ord('A') + (ord(upper)-ord('A')+base+26)%26)] = upper\n\n  # \u5909\u63db\u51e6\u7406\n  ans = ''\n  with open(cipher_path, 'r') as cipher_file:\n    for cipher_line in cipher_file:\n      for c in cipher_line:\n        if c in decrypted_char:\n          ans += decrypted_char[c]\n        else:\n          ans += c\n  \n  return ans\n\n\ndef main(argv):\n\n  # \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\n  command = argv[0]\n  cipher_path = argv[1]\n  output_path = argv[2]\n\n  # \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\n  result = eval(command)(cipher_path)\n\n  # \u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\n  with open(output_path, 'w') as output_file:\n    if command == 'decrypt':\n      output_file.write(result)\n    else:\n      output_file.write(json.dumps(result))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2046, "language": "C#", "code": "using System;\nusing System.IO;\nusing System.Text.Json;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    struct MatchRecord\n    {\n        public int robot;\n        public int you;\n    }\n\n    static void Main(string[] args)\n    {\n        string path = args[0];\n        var content = File.ReadAllText(path);\n        var records = JsonSerializer.Deserialize<List<MatchRecord>>(content);\n\n        // \u6700\u521d\u306e3\u624b\u306f0,1,2\u3067\u56fa\u5b9a\n        // \u30ed\u30dc\u30c3\u30c8\u304c\u6700\u5f8c\u306b\u51fa\u3057\u305f3\u624b\u3068\u76f8\u624b\u306e\u6700\u5f8c\u306e\u624b\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u308b\n        // \u8a72\u5f53\u30d1\u30e9\u30e1\u30fc\u30bf\u3054\u3068\u306b\u30ed\u30dc\u30c3\u30c8\u304c\u51fa\u3057\u305f\u624b\u306e\u5c65\u6b74\u3092\u30b5\u30a4\u30af\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\n\n        // \u3082\u3057\u5c65\u6b74\u9577\u304c3\u672a\u6e80\u306a\u3089\u30b0\u30fc(0)\u3092\u51fa\u3059\n        if (records.Count < 3)\n        {\n            Console.WriteLine(\"0\");\n            return;\n        }\n\n        // \u6700\u5f8c\u306b\u51fa\u3057\u305f3\u624b\u306e\u30ed\u30dc\u30c3\u30c8\u306e\u624b\n        int r0 = records[records.Count - 3].robot;\n        int r1 = records[records.Count - 2].robot;\n        int r2 = records[records.Count - 1].robot;\n        // \u76f8\u624b\u306e\u6700\u5f8c\u306e\u624b\n        int y = records[records.Count - 1].you;\n\n        // \u30ad\u30fc: 4\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u3059\u308b\n        string key = $\"{r0},{r1},{r2},{y}\";\n\n        // \u5404\u30ad\u30fc\u6bce\u306e\u30ed\u30dc\u30c3\u30c8\u306e\u51fa\u3057\u305f\u624b\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n        Dictionary<string, List<int>> sequenceMap = new Dictionary<string, List<int>>();\n\n        for (int i = 3; i < records.Count; i++)\n        {\n            string k = $\"{records[i - 3].robot},{records[i - 2].robot},{records[i - 1].robot},{records[i].you}\";\n            if (!sequenceMap.ContainsKey(k))\n            {\n                sequenceMap[k] = new List<int>();\n            }\n            sequenceMap[k].Add(records[i].robot);\n        }\n\n        if (!sequenceMap.ContainsKey(key))\n        {\n            // \u307e\u3060\u51fa\u3066\u3053\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3089\u6700\u521d\u306f\u30b0\u30fc\u3092\u51fa\u3059\n            Console.WriteLine(\"0\");\n            return;\n        }\n\n        var seq = sequenceMap[key];\n        // \u30ed\u30dc\u30c3\u30c8\u306f\u3053\u306eseq\u306b\u6cbf\u3063\u3066\u30b0\u30fc\u30fb\u30c1\u30e7\u30ad\u30fb\u30d1\u30fc\u3092\u5faa\u74b0\u3057\u3066\u3044\u308b\n        // \u306a\u306e\u3067seq\u306e\u6700\u5f8c\u306e\u624b\u306e\u6b21\u306e\u624b\u3092\u51fa\u305b\u3070\u826f\u3044\n        int lastHand = seq[seq.Count - 1];\n        int nextHand = (lastHand + 1) % 3;\n\n        // \u81ea\u5206\u304c\u52dd\u3066\u308b\u624b\u3092\u51fa\u3059\u3002\u30b0\u30fc=0\u306b\u5bfe\u3057\u3066\u30c1\u30e7\u30ad=1\u306f\u8ca0\u3051\u3001\u30d1\u30fc=2\u306f\u52dd\u3061\u306a\u306e\u3067\n        // \u52dd\u3064\u624b\u306f (\u76f8\u624b\u306e\u624b + 1) % 3 \u306a\u306e\u3067\n        // \u3057\u304b\u3057\u554f\u984c\u306f\u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b\u3067\u306f\u306a\u304f\u3001\u6211\u3005\u306e\u6b21\u306e\u624b\u3092\u51fa\u3059\u3053\u3068\n        // \u306a\u306e\u3067\u6211\u3005\u306f\u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b\u306b\u52dd\u3064\u624b\u3092\u51fa\u305b\u3070\u3088\u3044\n        int youShouldPlay = (nextHand + 1) % 3;\n\n        Console.WriteLine(youShouldPlay);\n    }\n}"}
{"id": 2047, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static void randomNumber(String number) {\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder output = new StringBuilder();\n\n    for (int i=0; i< Integer.parseInt(number); i++) {\n      if (Math.round(Math.random()) == 1) {\n        String text = \"\u30c9\";\n        output = output.append(text);\n\n        if (output.toString().contains(pattern)) {\n          break;\n        }\n      } else {\n        String text = \"\u30ab\";\n        output = output.append(text);\n        \n        if (output.toString().contains(pattern)) {\n          break;\n        }\n      }\n    }\n\n    for (int i=0; i < output.toString().length(); i++) {\n      System.out.println(output.toString().charAt(i));\n    }\n\n    if (output.toString().contains(pattern)) {\n      System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n    } else {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n  }\n\n  public static void main(String[] args) {\n    randomNumber(args[0]);\n  }\n}\n"}
{"id": 2048, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tint a=0;\n    while(a<args.length)\n    {\n      if(args[a].matches(\"[0-9]+\")){\n      int b=Integer.parseInt(args[a]);\n      if(b<0||b>1000)\n      {\n        System.out.println(\"invalid\");\n      }\n      else if(b%3==0 && args[a].contains(\"3\"))\n      {\n        System.out.println(\"dumb\");\n      }\n      else if(b%3==0)\n      {\n        System.out.println(\"idiot\");\n      }\n      else if(args[a].contains(\"3\"))\n      {\n        System.out.println(\"stupid\");\n      }\n      else\n      {\n        System.out.println(\"smart\");\n      }}\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n      a++;\n    }\n\t\t\n\t}\n}\n"}
{"id": 2049, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nclass AhoConverter {\n  public function process($str_val) {\n    if (!$this->isValidInput($str_val)) {\n      return \"invalid\";\n    }\n\n    $num = (int)$str_val;\n    $is_div_by_3 = $this->isDivisibleByThree($num);\n    $has_digit_3 = $this->hasDigitThree($str_val);\n\n    if ($is_div_by_3 && $has_digit_3) {\n      return \"dumb\";\n    }\n    if ($is_div_by_3) {\n      return \"idiot\";\n    }\n    if ($has_digit_3) {\n      return \"stupid\";\n    }\n    return \"smart\";\n  }\n\n  private function isValidInput($str_val) {\n    return ctype_digit($str_val) && intval($str_val) <= 1000;\n  }\n\n  private function isDivisibleByThree($n) {\n    return $n % 3 === 0;\n  }\n\n  private function hasDigitThree($s) {\n    return strpos($s, '3') !== false;\n  }\n}\n\nfunction main ($argc, $argv) {\n  $converter = new AhoConverter();\n  foreach ($argv as $arg) {\n    echo $converter->process($arg) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2050, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <unordered_map>\n#include <string>\n#include <json/json.h>\n\nvoid findSpaceReplacement(const std::string& filePath, const std::string& outputFile) {\n    // \u7a7a\u767d\u306b\u7f6e\u63db\u3055\u308c\u305f\u6587\u5b57\u3092\u63a2\u3059\u4eee\u306e\u5b9f\u88c5\n    std::ifstream file(filePath);\n    std::unordered_map<char, int> freq, charMap;\n    char ch;\n\n    while (file.get(ch)) {\n        if (isalpha(ch)) {\n            freq[ch]++;\n        }\n    }\n\n    char maxChar = ' ';\n    int maxCount = 0;\n    for (auto& pair : freq) {\n        if (pair.second > maxCount) {\n            maxChar = pair.first;\n            maxCount = pair.second;\n        }\n    }\n    \n    Json::Value jsonData;\n    jsonData[\"char\"] = maxChar;\n\n    std::ofstream outFile(outputFile);\n    outFile << jsonData;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1; // \u5f15\u6570\u306e\u6570\u304c\u4e0d\u6b63\n\n    std::string command = argv[1];\n    std::string inputFile = argv[2];\n    std::string outputFile = argv[3];\n\n    if (command == \"space\") {\n        findSpaceReplacement(inputFile, outputFile);\n    }\n    // \u4ed6\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7701\u7565\n    return 0;\n}"}
{"id": 2051, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n    try{\n    char arr[]=new char[10];\n    char arr1[]=new char[10];\n\t\tfor (int j = 0, l = args.length; j < l; j++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", j, args[j]);\n\t\t//\tSystem.out.println(output);\n      String str=args[j];\n     /* for(int k=0;k<str.length;k++)\n      {\n        char c=str.charAt(k);\n        if(c==' '){\n          System.out.println(\"invalid\");\n        }\n      }\n*/      int number=Integer.valueOf(str);\n      if(number%3==0)\n      {\n          arr=(\"\"+number).toCharArray();\n          int set=0;\n          for(int i=0;i<arr.length;i++){\n            if(arr[i]=='3')\n            {\n              System.out.println(\"dumb\");\n              set=1;\n              break;\n            }\n          }\n          if(set==0)\n          {\n            System.out.println(\"idiot\");\n          }\n      }\n      else\n      {\n        arr1=(\"\"+number).toCharArray();\n        int set1=0;\n        for(int i=0;i<arr1.length;i++){\n          if(arr1[i]=='3')\n          {\n            System.out.println(\"stupid\");\n            set1=1;\n            break;\n          }\n        }\n        if(set1==0)\n        {\n          System.out.println(\"smart\");\n        }\n      }\n\n\t\t}\n    }\n  catch(Exception e)\n  {\n    System.out.println(\"invalid\");\n  }\n  }\n}\n"}
{"id": 2052, "language": "Java", "code": "package drumrhythm;\n\nimport java.util.Random;\n\npublic class DrumSimulation {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int maxTries = Integer.parseInt(args[0]);\n\n    if (maxTries < 0 || maxTries > 10000) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    String resultString = \"\";\n    Random randomSelector = new Random();\n\n    for (int iteration = 0; iteration < maxTries; iteration++) {\n      String currentSound = randomSelector.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(currentSound);\n      resultString += currentSound;\n\n      if (resultString.matches(\".*\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab.*\")) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n\n    // Final output after trying all iterations\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2053, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n          int value;\n          bool intOrNot = int.TryParse(args[i], out value);\n          if (!intOrNot)\n          {\n            Console.WriteLine(\"invalid\");\n          }\n          else Console.WriteLine(Idiots(value));\n        }\n    }\n\n    static public string Idiots(int N)\n    {\n      if (N<0 || N>1000) return \"smart\";\n      if ((N%3) == 0) {\n        return ( (N%10 == 3) || ((N/10)%10 == 3) || ((N/100) == 3) ) ? \"dumb\" : \"idiot\";\n      }\n      else \n      if  ( (N%10 == 3) || ((N/10)%10 == 3) || ((N/100) == 3) ) {\n        return \"stupid\";\n      }\n      else return \"smart\";\n    }\n}\n"}
{"id": 2054, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main($argc, $argv) {\n  // \u5165\u529b\u5024\u306e\u53d6\u308a\u51fa\u3057\n  if ($argc < 1 || !is_numeric($argv[0]) || intval($argv[0]) < 0 || intval($argv[0]) > 10000) {\n    echo \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n    return;\n  }\n  $max = intval($argv[0]);\n  if ($max === 0) {\n    echo \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n    return;\n  }\n\n  $buffer = \"\";\n  $pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  for ($i=0; $i<$max; $i++) {\n    $char = (mt_rand(0,1) === 0) ? \"\u30c9\" : \"\u30ab\";\n    echo $char.\"\\n\";\n    $buffer .= $char;\n    // \u30d0\u30c3\u30d5\u30a1\u9577\u3092\u30d1\u30bf\u30fc\u30f3\u9577\u307e\u3067\n    if (strlen($buffer) > strlen($pattern)) {\n      $buffer = substr($buffer, -strlen($pattern));\n    }\n    if ($buffer === $pattern) {\n      echo \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\";\n      return;\n    }\n  }\n  echo \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2055, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for s in argv:\n        if not s.isdigit():\n            print(\"invalid\")\n            continue\n        num = int(s)\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            continue\n        divisible = (num % 3 == 0)\n        contain_three = '3' in s\n        if divisible and contain_three:\n            print(\"dumb\")\n        elif divisible:\n            print(\"idiot\")\n        elif contain_three:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2056, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    limit = int(argv[0]) if argv else 0\n    seq = []\n    target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    length = len(target)\n\n    for _ in range(limit):\n        val = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(val)\n        seq.append(val)\n        if len(seq) >= length and \"\".join(seq[-length:]) == target:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2057, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      String[] str=args[i].split(\" \");\n      //\u6570\u5b57\u304b\u3069\u3046\u304b\n      for(int j=0;j<str.length;j++)\n      {  \n        System.out.println(str[j]);\n        try \n        {\n          int num = Integer.parseInt(str[j]);\n          boolean stupid=false;\n          //\u8ca0\u306e\u6574\u6570\u304b\n          if(num<0||num>1000)\n          {\n            System.out.println(\"invalid\");\n          }\n          else\n          {\n            //3\u304c\u4ed8\u304f\u304b\n            stupid=chkStupid(num);\n            //3\u306e\u500d\u6570\u304b\n            if(num%3==0)\n            {\n              System.out.println(stupid?\"dumb\":\"idiot\");\n            }\n            else\n            {\n              System.out.println(stupid?\"stupid\":\"smart\");\n            }\n          }\n        } \n        catch (NumberFormatException nfe) \n        {\n          System.out.println(\"invalid\");\n        }\n      }\n\t\t}\n\t}\n  \n  //3\u304c\u4ed8\u304f\u304b\n  private static boolean chkStupid(int num)\n  {\n    if(num%10==3)\n    {\n      return true;\n    }\n    else\n    {\n      return num==0?false:chkStupid(num/10);\n    }\n  }\n}\n"}
{"id": 2058, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String command = args[0];\n        String input = args[1];\n        String output = args[2];\n        try {\n            String contents = new String(Files.readAllBytes(Paths.get(input)));\n            if (\"count\".equals(command)) {\n                Map<Character, Integer> freq = new LinkedHashMap<>();\n                for (char c = 'A'; c <= 'Z'; c++) freq.put(c, 0);\n                for (char c = 'a'; c <= 'z'; c++) freq.put(c, 0);\n                freq.put(' ', 0);\n                for (char c : contents.toCharArray()) {\n                    if (freq.containsKey(c)) {\n                        freq.put(c, freq.get(c)+1);\n                    }\n                }\n                StringBuilder json = new StringBuilder(\"{\\n\");\n                boolean first = true;\n                for (char c : freq.keySet()) {\n                    if (!first) json.append(\",\\n\");\n                    json.append(\"  \\\"\").append(c).append(\"\\\": \").append(freq.get(c));\n                    first = false;\n                }\n                json.append(\"\\n}\");\n                Files.write(Paths.get(output), json.toString().getBytes());\n            }\n            else if (\"space\".equals(command)) {\n                int[] counts = new int[26];\n                for (char c : contents.toCharArray())\n                    if (c >= 'a' && c <= 'z') counts[c - 'a']++;\n                int m = 0, idx = 0;\n                for (int i = 0; i < 26; i++)\n                    if (counts[i] > m) { m = counts[i]; idx = i; }\n                String r = \"{\\n  \\\"char\\\": \\\"\" + (char)('a'+idx) + \"\\\"\\n}\";\n                Files.write(Paths.get(output), r.getBytes());\n            }\n            else if (\"decrypt\".equals(command)) {\n                // Find space replacement first\n                int[] counts = new int[26];\n                for (char c : contents.toCharArray())\n                    if (c >= 'a' && c <= 'z') counts[c-'a']++;\n                int m=0, idx=0;\n                for (int i=0;i<26;i++)\n                    if (counts[i]>m) { m=counts[i]; idx=i; }\n                char spaceC = (char)('a'+idx);\n                // Frequency for e\n                int[] freqE = new int[26];\n                for (char c: contents.toCharArray())\n                    if (c>='a'&&c<='z'&&c!=spaceC) freqE[c-'a']++;\n                int mx=0, eid=0;\n                for (int i=0;i<26;i++)\n                    if (i!=idx && freqE[i]>mx) {mx=freqE[i];eid=i;}\n                int shft = (eid-('e'-'a')+26)%26;\n                StringBuilder sb = new StringBuilder();\n                for (char c : contents.toCharArray()) {\n                    if (c == spaceC) sb.append(' ');\n                    else if (c >= 'a' && c <= 'z')\n                        sb.append((char)((c-'a'-shft+26)%26+'a'));\n                    else if (c >= 'A' && c <= 'Z')\n                        sb.append((char)((c-'A'-shft+26)%26+'A'));\n                    else sb.append(c);\n                }\n                Files.write(Paths.get(output), sb.toString().getBytes());\n            }\n        } catch (Exception e) {}\n    }\n}"}
{"id": 2059, "language": "Python3", "code": "import sys\n\ndef classify_number(num):\n    if not num.isdigit():\n        return \"invalid\"\n    num = int(num)\n    if 0 <= num <= 1000:\n        if num % 3 == 0 and '3' in str(num):\n            return \"dumb\"\n        elif num % 3 == 0:\n            return \"idiot\"\n        elif '3' in str(num):\n            return \"stupid\"\n        else:\n            return \"smart\"\n    return \"invalid\"\n\ndef main(arguments):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    results = []\n    for arg in arguments:\n        results.append(classify_number(arg))\n    \n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2060, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    question_type = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n    count_result = {}\n    space_result = {}\n\n    # \u30ab\u30a6\u30f3\u30c8\u306e\u7d50\u679c\u306ejson\u306e\u578b\u3092\u4f5c\u6210\n    for i in range(65, 91):\n        count_result[chr(i)] = 0\n    for i in range(97, 123):\n        count_result[chr(i)] = 0\n    count_result[chr(32)] = 0\n\n    try:\n        file = open(input_file)\n        lines = file.readlines()\n        for line in lines:\n            for string in line:\n                if count_result.get(string) is not None:\n                    count_result[string] += 1\n    except Exception as e:\n        print(e)\n    finally:\n        file.close()\n\n    if question_type == 'count':\n        f = open(output_file, 'w')\n        json.dump(count_result, f)\n\n    elif question_type == 'space':\n        max_value = max(count_result.values())\n        for key in count_result:\n            if count_result[key] == max_value:\n                space_result['char'] = key\n                f = open(output_file, 'w')\n                json.dump(space_result, f)\n    \n    elif question_type == 'decrypt':\n        try:\n            # \u5165\u529b\u7528\n            file = open(input_file)\n            lines = file.read()\n            for line in len(lines):\n                if line == ' ':\n                    line\n\n            # \u51fa\u529b\u7528\n            file = open(output_file, 'w')\n            file.write('Hello')\n        except Exception as e:\n            print(e)\n        finally:\n            file.close()        \n        \n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2061, "language": "C", "code": "#include <stdio.h>\n\nint board[8][8];\nint fixed[8]; // fixed[col] = row if fixed, -1 otherwise\n\nint can_place(int r, int c) {\n  for (int i = 0; i < c; i++) {\n    int rr = fixed[i];\n    if (rr == -1) continue;\n    if (rr == r) return 0;                 // same row\n    if (rr - r == i - c || r - rr == i - c) return 0; // diagonals\n  }\n  return 1;\n}\n\nint solve(int col) {\n  if (col == 8) return 1;\n  if (fixed[col] != -1) {\n    if (!can_place(fixed[col], col)) return 0;\n    return solve(col+1);\n  }\n  for (int r = 0; r < 8; r++) {\n    if (board[r][col]) continue; // fixed by input in other col?\n    if (!can_place(r, col)) continue;\n    fixed[col] = r;\n    if (solve(col+1)) return 1;\n    fixed[col] = -1;\n  }\n  return 0;\n}\n\nint main() {\n  int k;\n  scanf(\"%d\", &k);\n  for (int i = 0; i < 8; i++) fixed[i] = -1;\n  for (int i = 0; i < 8; i++)\n    for (int j = 0; j < 8; j++)\n      board[i][j] = 0;\n  for (int i = 0; i < k; i++) {\n    int r, c;\n    scanf(\"%d%d\", &r, &c);\n    board[r][c] = 1;\n    fixed[c] = r;\n  }\n  solve(0);\n  for (int r = 0; r < 8; r++) {\n    for (int c = 0; c < 8; c++) {\n      if (fixed[c] == r) printf(\"Q\");\n      else printf(\".\");\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"}
{"id": 2062, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static char[][] field = new char[8][8];\n    static boolean[] col = new boolean[8], dia1 = new boolean[15], dia2 = new boolean[15];\n    static boolean[] lockedRow = new boolean[8];\n\n    static boolean search(int row) {\n        if(row == 8) return true;\n        if(lockedRow[row]) return search(row + 1);\n\n        for(int c = 0; c < 8; c++) {\n            if(!col[c] && !dia1[row + c] && !dia2[row - c + 7]) {\n                field[row][c] = 'Q';\n                col[c] = dia1[row + c] = dia2[row - c + 7] = true;\n                if(search(row+1)) return true;\n                field[row][c] = '.';\n                col[c] = dia1[row + c] = dia2[row - c + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        for(char[] arr : field) Arrays.fill(arr, '.');\n        int k = input.nextInt();\n        for(int i = 0; i < k; i++) {\n            int r = input.nextInt();\n            int c = input.nextInt();\n            field[r][c] = 'Q';\n            col[c] = true;\n            dia1[r + c] = true;\n            dia2[r - c + 7] = true;\n            lockedRow[r] = true;\n        }\n        search(0);\n\n        for(char[] arr : field) System.out.println(new String(arr));\n    }\n}"}
{"id": 2063, "language": "PHP", "code": "<?php namespace Track;\n//robot's pattern => \uc8fc\uba39 , \uac00\uc704 ,\ubcf4 \n//@arguments => argc ( robot [array(3)] ) , argv ( human last)\n//if argv = argv(past) => \uc8fc\uba39 , \uac00\uc704 , \ubcf4 , \uc8fc\uba39 , \uac00\uc704 , \ubcf4 \ub0b8\ub2e4 \nfunction run ($argc, $argv)\n{\n  \n  printf(\"%s\",$argc);\n  printf(var_dump(json_decode($argv[0],true)));\n  $attack = array(1,2,3);\n  $index  = null;\n\n  if( count($argv) <= 3 ) {\n    $index = $argv;      \n  }\n\n  if( $argc == $argv[0] ) {\n    \n  }\n\n  foreach ($argv as $index=>$value) {\n     printf(\"argv[%s]: %s\\n\", $index, $value);\n  }\n}\n\nrun($argc, array_slice($argv,1));\n\n\n// \ub85c\ubd07 \uc21c\uc11c -> \uc8fc\uba39, \ubc14\uc704 , \ubcf4\n\n//echo printf(json_decode(\"./input.json\"));\n//4\uac1c \uc758 \uacb0\uacfc\uac12\uc744 \uac00\uc9c0\uace0 \ub2e4\ub984 \uacb0\uacfc\ub97c \ud310\ub2e8 \n//robot => \uc8fc\uba39 \uc8fc\uba39 \uac00\uc704\n//\uc0c1\ub300  => \ubcf4 \n//robot => \uc8fc\uba39 \n\n"}
{"id": 2064, "language": "Python3", "code": "import sys\n\n# \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\nN = 8\nsolution = [-1] * N\nis_row_fixed = [False] * N\n\ndef check(r, c):\n    # \u4ed6\u306e\u30af\u30a4\u30fc\u30f3\u3068\u7af6\u5408\u3057\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n    for i in range(r):\n        if solution[i] == c or abs(r - i) == abs(c - solution[i]):\n            return False\n    return True\n\ndef place_queen(r):\n    if r == N:\n        # \u89e3\u304c\u898b\u3064\u304b\u3063\u305f\n        final_board = [['.' for _ in range(N)] for _ in range(N)]\n        for i in range(N):\n            final_board[i][solution[i]] = 'Q'\n        \n        for row_str in final_board:\n            print(\"\".join(row_str))\n        sys.exit(0)\n\n    if is_row_fixed[r]:\n        place_queen(r + 1)\n        return\n\n    for c in range(N):\n        if check(r, c):\n            solution[r] = c\n            place_queen(r + 1)\n            # \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u306f\u4e0d\u8981\u3002\u6b21\u306e\u30eb\u30fc\u30d7\u3067\u4e0a\u66f8\u304d\u3055\u308c\u308b\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    k = int(lines[0])\n    for i in range(k):\n        r, c = map(int, lines[i + 1].split())\n        solution[r] = c\n        is_row_fixed[r] = True\n        \n    place_queen(0)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2065, "language": "Python3", "code": "import sys\nimport json\nimport math\n\ndef main(argv):\n    input_name = argv[1]\n    output_name = argv[2]\n    if argv[0] == \"count\":\n        #\u5404\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u983b\u5ea6\u3092\u8a08\u7b97\u3059\u308bdict\n        d = {}\n        for i in range(97, 123):\n            d[chr(i)] = 0\n            d[chr(i-32)] = 0\n        d[\" \"] = 0\n\n        #\u5404\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u3064\u3044\u3066\u983b\u5ea6\u3092\u8a08\u7b97\u3059\u308b\n        with open(input_name, \"r\")as f:\n            for s_line in f:\n                for s in s_line:\n                    if (ord(s)<=122 and ord(s)>= 97) or (ord(s)<= 90 and ord(s)>=65):\n                        d[s] += 1\n                    if s == \" \":\n                        d[\" \"] += 1\n        with open(output_name, \"w\") as f:\n            json.dump(d, f, indent=4)\n\n    elif argv[0] == \"space\":\n        #\u5404\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u30fb\u6587\u7ae0\u306e\u533a\u5207\u308a\u8a18\u53f7\u306b\u3064\u3044\u3066\u983b\u5ea6\u3092\u6570\u3048\u308b\n        d = {}\n        for i in range(97, 123):\n            d[chr(i)] = 0\n            d[chr(i-32)] = 0\n\n        d[\".\"] = 0\n        d[\";\"] = 0\n        d[\" \"] = 0\n        with open(input_name, \"r\")as f:\n            for s_line in f:\n                for s in s_line:\n                    if (ord(s)<=122 and ord(s)>= 97) or (ord(s)<= 90 and ord(s)>=65):\n                        d[s] += 1\n                    if s == \" \":\n                        d[\" \"] += 1\n                    elif s == \".\":\n                        d[\".\"] += 1\n                    elif s == \";\":\n                        d[\";\"] += 1\n        #\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u5408\u8a08\u4f55\u500b\u3042\u308b\u304b\u6570\u3048\u308b\n        count = 0\n        for i in range(97, 123):\n            count += d[chr(i)]\n            count += d[chr(i-32)]\n        #\u533a\u5207\u308a\u6587\u5b57\u306e\u6570\u3092\u6570\u3048\u308b\n        sep_count = 0\n        sep_count += d[\".\"]\n        sep_count += d[\";\"]\n        #\u7a7a\u767d\u6587\u5b57\u3067\u3042\u308d\u3046\u6587\u5b57\u306e\u6570\u3092\u8a08\u7b97\u3059\u308b\n        pre_count = (4.5*(count-sep_count)) / 4.5\n        result = 97\n        mini = 1e10\n        for i in range(97, 123):\n            tmp = abs(d[chr(i)]-pre_count)\n            if tmp < mini:\n                mini = tmp\n                result = i\n\n            tmp = abs(d[chr(i-32)]-pre_count)\n            if tmp < mini:\n                mini = tmp\n                result = i\n\n        result = {\"char\": chr(result)}\n        with open(output_name, \"w\") as f:\n            json.dump(result, f, indent=4)\n\n    elif argv[0] == \"decrypt\":\n        #\u5404\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u30fb\u6587\u7ae0\u306e\u533a\u5207\u308a\u8a18\u53f7\u306b\u3064\u3044\u3066\u983b\u5ea6\u3092\u6570\u3048\u308b\n        d = {}\n        for i in range(97, 123):\n            d[chr(i)] = 0\n            d[chr(i-32)] = 0\n            d[\".\"] = 0\n            d[\";\"] = 0\n        d[\" \"] = 0\n        with open(input_name, \"r\")as f:\n            for s_line in f:\n                for s in s_line:\n                    if (ord(s)<=122 and ord(s)>= 97) or (ord(s)<= 90 and ord(s)>=65):\n                        d[s] += 1\n                    if s == \" \":\n                        d[\" \"] += 1\n                    elif s == \".\":\n                        d[\".\"] += 1\n                    elif s == \";\":\n                        d[\";\"] += 1\n        #\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u5408\u8a08\u4f55\u500b\u3042\u308b\u304b\u6570\u3048\u308b\n        count = 0\n        for i in range(97, 123):\n            count += d[chr(i)]\n            count += d[chr(i-32)]\n        #\u533a\u5207\u308a\u6587\u5b57\u306e\u6570\u3092\u6570\u3048\u308b\n        sep_count = 0\n        sep_count += d[\".\"]\n        sep_count += d[\";\"]\n        #\u7a7a\u767d\u6587\u5b57\u3067\u3042\u308d\u3046\u6587\u5b57\u306e\u6570\u3092\u8a08\u7b97\u3059\u308b\n        pre_count = (4.5*(count-sep_count)) / 4.5\n        result = 97\n        mini = 1e10\n        for i in range(97, 123):\n            tmp = abs(d[chr(i)]-pre_count)\n            if tmp < mini:\n                mini = tmp\n                result = i\n\n            tmp = abs(d[chr(i-32)]-pre_count)\n            if tmp < mini:\n                mini = tmp\n                result = i\n        (d[chr(result)], d[\" \"]) = (d[\" \"], d[chr(result)])\n        d[chr(result-32)] = 0\n       \n        max_index = 0\n        now_max = 0\n        tmp = 0\n        for i in range(97, 123):\n            tmp = 0\n            tmp += d[chr(i)]\n            tmp += d[chr(i-32)]\n            if tmp > now_max:\n                max_index = i\n                now_max = tmp\n        #\u4f55\u6587\u5b57\u30b7\u30d5\u30c8\u3059\u308b\u304b\n        change_index = max_index-101\n        #\u66f8\u304d\u8fbc\u307f\u7528\u6587\u5b57\u5217\n        x = \"\"\n        with open(input_name, \"r\")as f:\n            for s_line in f:\n                for s in s_line:\n                    if (ord(s)<=122 and ord(s)>= 97) or (ord(s)<= 90 and ord(s)>=65) or s == \" \":\n                        #\u307e\u305a\u3001\u7a7a\u767d\u3068\u53d6\u308a\u66ff\u3048\u3066\u3044\u308b\u306a\u3089\u623b\u3059\n                        if s == chr(result):\n                            s = \" \"\n                        elif s == \" \":\n                            s = chr(result)\n                        #\u6b21\u306b\u3001\u666e\u901a\u306b\u5143\u306b\u623b\u3059\n                        if s == \" \":\n                            #\u7a7a\u767d\u306a\u3089\u305d\u306e\u6642\u70b9\u3067\u305f\u3059\n                            x += \" \"\n                        else: \n                            #\u7a7a\u767d\u3067\u306a\u3044\u306a\u3089\u5909\u63db\u3057\u3066\u304b\u3089\u9023\u7d50\n                            if ord(s) < 96:\n                                tmp = ord(s) - change_index\n                                if tmp < 65:\n                                    tmp += 26\n                                x += (chr(tmp))\n                            else:\n                                tmp = ord(s) - change_index\n                                if tmp < 97:\n                                    tmp += 26\n                                x += (chr(tmp))\n                    else:\n                    #\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4ee5\u5916\u306e\u5834\u5408\u306b\u306f\u305d\u306e\u307e\u307e\u9023\u7d50\n                        x += s\n                x += \"\\n\"\n        with open(output_name, mode='w') as f:\n            f.write(x)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2066, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n// Global variables for the chessboard state and attack tracking arrays.\n// Using globals is common in competitive programming for recursive solutions.\n$g_chess_board = array_fill(0, 8, array_fill(0, 8, '.'));\n$g_columns_in_use = array_fill(0, 8, false);\n$g_primary_diagonals_in_use = array_fill(0, 15, false); // Index: r - c + 7\n$g_secondary_diagonals_in_use = array_fill(0, 15, false); // Index: r + c\n\n/**\n * Attempts to place queens on the board starting from a given row using backtracking.\n *\n * @param int $currentRow The current row to try placing a queen.\n * @return bool True if a solution is found, false otherwise.\n */\nfunction findQueenArrangement($currentRow) {\n  global $g_chess_board, $g_columns_in_use, $g_primary_diagonals_in_use, $g_secondary_diagonals_in_use;\n\n  // If all 8 rows have been processed, a valid arrangement is found.\n  if ($currentRow == 8) {\n    return true;\n  }\n\n  // Check if a queen was pre-placed in this row.\n  $isRowPreOccupied = false;\n  for ($col = 0; $col < 8; $col++) {\n    if ($g_chess_board[$currentRow][$col] == 'Q') {\n      $isRowPreOccupied = true;\n      break; // A queen is already in this row.\n    }\n  }\n\n  if ($isRowPreOccupied) {\n    // If this row already has a queen, move to the next row directly.\n    // The problem guarantees the initial placements are valid and a unique solution exists.\n    return findQueenArrangement($currentRow + 1);\n  }\n\n  // Iterate through columns to find a safe spot for a queen in the current row.\n  for ($col = 0; $col < 8; $col++) {\n    $primaryDiagIndex = $currentRow - $col + 7;\n    $secondaryDiagIndex = $currentRow + $col;\n\n    // Check if the current position (row, col) is safe for a queen.\n    if (!$g_columns_in_use[$col] &&\n        !$g_primary_diagonals_in_use[$primaryDiagIndex] &&\n        !$g_secondary_diagonals_in_use[$secondaryDiagIndex]) {\n\n      // Place the queen.\n      $g_chess_board[$currentRow][$col] = 'Q';\n      $g_columns_in_use[$col] = true;\n      $g_primary_diagonals_in_use[$primaryDiagIndex] = true;\n      $g_secondary_diagonals_in_use[$secondaryDiagIndex] = true;\n\n      // Recurse for the next row.\n      if (findQueenArrangement($currentRow + 1)) {\n        return true; // A solution has been found.\n      }\n\n      // Backtrack: If the recursive call did not find a solution, undo the placement.\n      $g_chess_board[$currentRow][$col] = '.';\n      $g_columns_in_use[$col] = false;\n      $g_primary_diagonals_in_use[$primaryDiagIndex] = false;\n      $g_secondary_diagonals_in_use[$secondaryDiagIndex] = false;\n    }\n  }\n\n  return false; // No safe position found in this row.\n}\n\n/**\n * Main entry point for the 8 Queens problem solver.\n * Reads initial queen placements, solves the board, and prints the result.\n *\n * @param int $argCount The number of command-line arguments.\n * @param array $argValues An array of command-line arguments.\n */\nfunction main ($argCount, $argValues) {\n  global $g_chess_board, $g_columns_in_use, $g_primary_diagonals_in_use, $g_secondary_diagonals_in_use;\n\n  // Read input from standard input.\n  $inputData = file('php://stdin');\n  $prePlacedCount = (int)trim($inputData[0]);\n\n  // Place the initially specified queens on the board and update occupied states.\n  for ($i = 1; $i <= $prePlacedCount; $i++) {\n    list($rowCoord, $colCoord) = array_map('intval', explode(' ', trim($inputData[$i])));\n\n    $g_chess_board[$rowCoord][$colCoord] = 'Q';\n    $g_columns_in_use[$colCoord] = true;\n    $g_primary_diagonals_in_use[$rowCoord - $colCoord + 7] = true;\n    $g_secondary_diagonals_in_use[$rowCoord + $colCoord] = true;\n  }\n\n  // Start the backtracking process from the first row.\n  findQueenArrangement(0);\n\n  // Print the final solved chessboard.\n  for ($r = 0; $r < 8; $r++) {\n    echo implode('', $g_chess_board[$r]) . \"\\n\";\n  }\n}\n\n// Call the main function with the command-line arguments.\n// In this setup, input is read from stdin, so $argv is not directly used for data.\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2067, "language": "Java", "code": "package track;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    try{\n      char array1[]=new char[5];\n      char array2[]=new char[5];\n\t\tfor (int j = 0, l = args.length; j < l; j++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", j, args[j]);\n      \n      int num=Integer.parseInt(args[j]);\n     // System.out.println(args[j]+\" \"+num);\n      if(num%3==0)\n      {\n        array1=(\"\"+num).toCharArray();\n        int flag=0;\n        for(int i=0;i<array1.length;i++)\n        {\n          if(array1[i]=='3')\n          {\n            System.out.println(\"dumb\");\n            flag=1;\n            break;\n          }\n        }\n        if(flag==0)\n        {\n          System.out.println(\"idiot\");\n        }\n     }\n      else\n      {\n        array2=(\"\"+num).toCharArray();\n        int flag1=0;\n        for(int i=0;i<array2.length;i++)\n        {\n          if(array2[i]=='3')\n          {\n            System.out.println(\"stupid\");\n            flag1=1;\n           break;\n          }\n        }\n        if(flag1==0)\n        {\n          System.out.println(\"smart\");\n        }\n      }\n    }\n    }\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n\t}\n}\n"}
{"id": 2068, "language": "PHP", "code": "<?php namespace Track;\n\nfunction isInt($n){\n  return ctype_digit(strval($n));\n}\n\nfunction parse($n) {\n  if (isInt($n) && $n >= 0 && $n <= 1000) {\n    if ($n % 3 === 0)\n      return strpos($n, '3') !== false ? 'dumb' : 'idiot';\n    return strpos($n, '3') !== false ? 'stupid' : 'smart';\n  }\n  else \n    return 'invalid';\n}\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    printf(\"%s\\n\", parse($value));\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 2069, "language": "Python3", "code": "import sys\n\ndef decide_character(num_str):\n    try:\n        num = int(num_str)\n    except ValueError:\n        return \"invalid\"\n    if not (0 <= num <= 1000):\n        return \"invalid\"\n    divisible = num % 3 == 0\n    has_three = \"3\" in str(num)\n    if divisible and has_three:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    for arg in args:\n        print(decide_character(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2070, "language": "C#", "code": "using System;\n\npublic class RomanConverter\n{\n    public static string ToRoman(int num)\n    {\n        // \u5909\u63db\u7528\u306e\u914d\u5217\u3092\u4f5c\u6210\n        var romanNumerals = new Tuple<int, string>[] {\n            new Tuple<int, string>(1000, \"M\"),\n            new Tuple<int, string>(900, \"CM\"),\n            new Tuple<int, string>(500, \"D\"),\n            new Tuple<int, string>(400, \"CD\"),\n            new Tuple<int, string>(100, \"C\"),\n            new Tuple<int, string>(90, \"XC\"),\n            new Tuple<int, string>(50, \"L\"),\n            new Tuple<int, string>(40, \"XL\"),\n            new Tuple<int, string>(10, \"X\"),\n            new Tuple<int, string>(9, \"IX\"),\n            new Tuple<int, string>(5, \"V\"),\n            new Tuple<int, string>(4, \"IV\"),\n            new Tuple<int, string>(1, \"I\")\n        };\n\n        string result = \"\";\n        foreach (var item in romanNumerals)\n        {\n            while (num >= item.Item1)\n            {\n                result += item.Item2;\n                num -= item.Item1;\n            }\n        }\n        return result;\n    }\n\n    static public void Main(string[] args)\n    {\n        // \u5f15\u6570\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n        if (args.Length != 1)\n            return;\n\n        int inputNumber = int.Parse(args[0]);\n        string romanNumeral = ToRoman(inputNumber);\n        Console.WriteLine(romanNumeral);\n    }\n}"}
{"id": 2071, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    is_valid_str = lambda s: s.isdigit()\n    is_in_range = lambda n: 0 <= n <= 1000\n    is_divisible = lambda n: n % 3 == 0\n    has_three = lambda s: '3' in s\n\n    for arg in argv:\n        if not is_valid_str(arg):\n            print(\"invalid\")\n            continue\n        \n        num = int(arg)\n        if not is_in_range(num):\n            print(\"invalid\")\n            continue\n\n        d = is_divisible(num)\n        c = has_three(arg)\n        \n        if d and c: print(\"dumb\")\n        elif d: print(\"idiot\")\n        elif c: print(\"stupid\")\n        else: print(\"smart\")\n        \nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2072, "language": "Python3", "code": "import sys\n\ndef check_input(num_str):\n    if not num_str.isnumeric():\n        return \"invalid\"\n    \n    number = int(num_str)\n    \n    if number < 0 or number > 1000:\n        return \"invalid\"\n    if number % 3 == 0 and '3' in num_str:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in num_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Evaluate each input and print outcomes based on 3 Idiots rules.\n    results = [check_input(arg) for arg in argv]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2073, "language": "Python3", "code": "import sys\n\ndef incl(num):\n  f=0\n  while num>0:\n    r=num%10\n    if r==3:\n      f=1\n      break\n    num//=10\n  return f\n\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for args in argv:\n    if args.isnumeric()==True:\n      num=int(args)\n      if num>=0 and num<=1000:\n        if num%3==0 and incl(num)==1:\n          print(\"dumb\")\n        elif num%3==0:\n          print(\"idiot\")\n        elif incl(num)==1:\n          print(\"stupid\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2074, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $val) {\n    if (!ctype_digit($val) || $val > 1000) { // String comparison is fine for positive numbers\n        echo \"invalid\\n\";\n        continue;\n    }\n    $n = (int)$val;\n    $d = $n % 3 === 0;\n    $c = strpos($val, '3') !== false;\n    echo ($d && $c ? 'dumb' : ($d ? 'idiot' : ($c ? 'stupid' : 'smart'))) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2075, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_positive_integer(const char *str) {\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (!isdigit(str[i])) {\n            return 0; // Not a positive integer\n        }\n    }\n    return 1; // Valid positive integer\n}\n\nvoid process_input(const char *input) {\n    if (!is_positive_integer(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int contains_three = 0;\n    int temp = num;\n    while (temp > 0) {\n        if (temp % 10 == 3) {\n            contains_three = 1;\n            break;\n        }\n        temp /= 10;\n    }\n\n    if (num % 3 == 0 && contains_three) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (contains_three) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2 || argc > 11) {\n        printf(\"Usage: %s <number1> [number2] ... [number10]\\n\", argv[0]);\n        return 1;\n    }\n\n    for (int i = 1; i < argc; i++) {\n        process_input(argv[i]);\n    }\n\n    return 0;\n}"}
{"id": 2076, "language": "Python3", "code": "import sys\nimport random\n\ndef main(args):\n    count = int(args[0]) if args else 0\n    pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    buffer = []\n    plen = len(pattern)\n    for _ in range(count):\n        letter = random.choice(['\u30c9', '\u30ab'])\n        print(letter)\n        buffer.append(letter)\n        if len(buffer) > plen:\n            buffer.pop(0)\n        if \"\".join(buffer) == pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2077, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n         \n         String inputStr = args[i];\n      \n         int num = 0;\n         boolean isInvalid = false;\n         boolean has3 = false;\n         \n         for (int j = 0; j < inputStr.length(); j++) {\n            char digit = inputStr.charAt(j);\n            \n            if ('0' <= digit && digit <= '9') {\n               num = num * 10 + (digit - '0');\n               if (digit == '3') {\n                  has3 = true;\n               }\n            } else {\n               System.out.println(\"invalid\");\n               isInvalid = true;\n               break;\n            }\n         }\n         \n         if (isInvalid) {\n            continue;\n         }\n         \n         if (num > 1000) {\n            System.out.println(\"invalid\");\n            continue;\n         }\n         \n         if (num % 3 == 0) {\n            if (has3) {\n               System.out.println(\"dumb\");\n            } else {\n               System.out.println(\"idiot\");\n            }\n         } else {\n            if (has3) {\n               System.out.println(\"stupid\");\n            } else {\n               System.out.println(\"smart\");\n            }\n         }\n      }\n\t}\n}\n"}
{"id": 2078, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n// 3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\nfunction three_bakas($value) {\n  if (!ctype_digit($value)) return 'invalid';\n  $number = (int)$value;\n  if ($number < 0 || $number > 1000) return \"invalid\";\n  $div = $number % 3 == 0;\n  $inc = strpos($value, '3') !== false;\n  if ($div && $inc) return 'dumb';\n  if ($div) return 'idiot';\n  if ($inc) return 'stupid';\n  return 'smart';\n}\n\nfunction main($argc, $argv) {\n  foreach ($argv as $v) {\n    echo three_bakas($v) . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2079, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueensProblem {\n    private static char[][] chessBoard = new char[8][8];\n    private static boolean[] rowOccupied = new boolean[8];\n    private static boolean[] colOccupied = new boolean[8];\n    private static boolean[] diag1Occupied = new boolean[15]; \n    private static boolean[] diag2Occupied = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int numberOfQueens = input.nextInt();\n\n        // Initialize chess board\n        for (int i = 0; i < chessBoard.length; i++) {\n            for (int j = 0; j < chessBoard[i].length; j++) {\n                chessBoard[i][j] = '.';\n            }\n        }\n\n        // Place manually pre-defined queens\n        for (int i = 0; i < numberOfQueens; i++) {\n            int r = input.nextInt();\n            int c = input.nextInt();\n            placeQueen(r, c);\n        }\n\n        solveBoard(0);\n\n        // Print the chess board\n        for (char[] row : chessBoard) {\n            System.out.println(new String(row));\n        }\n\n        input.close();\n    }\n\n    private static void placeQueen(int row, int col) {\n        chessBoard[row][col] = 'Q';\n        rowOccupied[row] = true;\n        colOccupied[col] = true;\n        diag1Occupied[row + col] = true;\n        diag2Occupied[row - col + 7] = true;\n    }\n\n    private static boolean canPlace(int row, int col) {\n        return !rowOccupied[row] && !colOccupied[col] && \n               !diag1Occupied[row + col] && !diag2Occupied[row - col + 7];\n    }\n\n    private static void removeQueen(int row, int col) {\n        chessBoard[row][col] = '.';\n        rowOccupied[row] = false;\n        colOccupied[col] = false;\n        diag1Occupied[row + col] = false;\n        diag2Occupied[row - col + 7] = false;\n    }\n\n    private static boolean solveBoard(int row) {\n        if (row == 8) {\n            return true; \n        }\n        if (rowOccupied[row]) {\n            return solveBoard(row + 1); \n        }\n        for (int col = 0; col < 8; col++) {\n            if (canPlace(row, col)) {\n                placeQueen(row, col);\n                if (solveBoard(row + 1)) return true;\n                removeQueen(row, col);\n            }\n        }\n        return false;\n    }\n}"}
{"id": 2080, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <functional>\n#include <algorithm>\n#include <sstream>\n\nint main(int argc, char* argv[]) {\n    auto aho_checker = [](const std::string& s) {\n        std::stringstream ss(s);\n        long num;\n        ss >> num;\n        \n        if (ss.fail() || !ss.eof() || num < 0 || num > 1000) {\n            std::cout << \"invalid\" << std::endl;\n            return;\n        }\n\n        const bool div3 = num % 3 == 0;\n        const bool has3 = s.find('3') != std::string::npos;\n        \n        if (div3 && has3) {\n            std::cout << \"dumb\" << std::endl;\n        } else if (div3) {\n            std::cout << \"idiot\" << std::endl;\n        } else if (has3) {\n            std::cout << \"stupid\" << std::endl;\n        } else {\n            std::cout << \"smart\" << std::endl;\n        }\n    };\n\n    std::vector<std::string> args(argv + 1, argv + argc);\n    std::for_each(args.begin(), args.end(), aho_checker);\n\n    return 0;\n}"}
{"id": 2081, "language": "Java", "code": "package track;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class App {\n    // This class will hold the data for a single round of the game\n    static class GameRound {\n        int robotHand;\n        int yourHand;\n\n        GameRound(int robot, int you) {\n            this.robotHand = robot;\n            this.yourHand = you;\n        }\n    }\n\n    public static void main(String[] args) {\n        // The first argument is the file path\n        String filePath = args[0];\n\n        // We will store the game history in this list\n        List<GameRound> gameHistory = new ArrayList<>();\n\n        // Read the file and parse the JSON\n        try {\n            String content = new Scanner(new File(filePath)).useDelimiter(\"\\\\Z\").next();\n            // Remove brackets [ and ]\n            content = content.substring(1, content.length() - 1);\n            if (!content.isEmpty()) {\n                // Split into individual game rounds\n                String[] roundsStr = content.split(\"},\\\\{\");\n                for (String roundStr : roundsStr) {\n                    // Find the numbers in the string\n                    String[] parts = roundStr.replaceAll(\"[^0-9,]\", \"\").split(\",\");\n                    int robotHand = Integer.parseInt(parts[0]);\n                    int yourHand = Integer.parseInt(parts[1]);\n                    gameHistory.add(new GameRound(robotHand, yourHand));\n                }\n            }\n        } catch (FileNotFoundException e) {\n            // In a real app, handle this better\n            return;\n        }\n\n        int historySize = gameHistory.size();\n        \n        if (historySize < 3) {\n            // Not enough data, can't predict. Let's guess Robot plays Rock (0). We play Paper (2).\n            System.out.println(2); \n            return;\n        }\n\n        // Get the key for the next prediction\n        GameRound lastRound = gameHistory.get(historySize - 1);\n        GameRound secondLastRound = gameHistory.get(historySize - 2);\n        GameRound thirdLastRound = gameHistory.get(historySize - 3);\n\n        int key_r1 = thirdLastRound.robotHand;\n        int key_r2 = secondLastRound.robotHand;\n        int key_r3 = lastRound.robotHand;\n        int key_y = lastRound.yourHand;\n\n        int predictedRobotHand = -1;\n\n        // Search backwards through history to find the last time this key occurred\n        for (int i = historySize - 1; i >= 3; i--) {\n            GameRound r_minus_1 = gameHistory.get(i - 1);\n            GameRound r_minus_2 = gameHistory.get(i - 2);\n            GameRound r_minus_3 = gameHistory.get(i - 3);\n\n            if (r_minus_3.robotHand == key_r1 &&\n                r_minus_2.robotHand == key_r2 &&\n                r_minus_1.robotHand == key_r3 &&\n                r_minus_1.yourHand == key_y) \n            {\n                int lastRobotHandForThisKey = gameHistory.get(i).robotHand;\n                predictedRobotHand = (lastRobotHandForThisKey + 1) % 3;\n                break; \n            }\n        }\n        \n        if (predictedRobotHand == -1) {\n             predictedRobotHand = 0; // fallback: assume rock\n        }\n        \n        // Calculate the hand that beats the robot's predicted hand\n        int myWinningHand = (predictedRobotHand + 2) % 3;\n\n        System.out.println(myWinningHand);\n    }\n}"}
{"id": 2082, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.util.*;\nimport java.nio.file.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String mode = args[0], input = args[1], output = args[2];\n        try {\n            String txt = new String(Files.readAllBytes(Paths.get(input)));\n            if (\"count\".equals(mode)) {\n                Map<Character,Integer> m = new LinkedHashMap<>();\n                for (char c = 'A'; c <= 'Z'; ++c) m.put(c,0);\n                for (char c = 'a'; c <= 'z'; ++c) m.put(c,0);\n                m.put(' ',0);\n                for (char ch: txt.toCharArray()) {\n                    if (m.containsKey(ch)) m.put(ch, m.get(ch) + 1);\n                }\n                StringBuilder sb = new StringBuilder(\"{\\n\");\n                boolean f = true;\n                for (var e : m.entrySet()) {\n                    if (!f) sb.append(\",\\n\"); f=false;\n                    sb.append(\"  \\\"\").append(e.getKey()).append(\"\\\": \").append(e.getValue());\n                }\n                sb.append(\"\\n}\");\n                Files.write(Paths.get(output), sb.toString().getBytes());\n            } else if (\"space\".equals(mode)) {\n                int[] arr = new int[26];\n                for (char ch: txt.toCharArray()) {\n                    if (ch >= 'a' && ch <= 'z') arr[ch-'a']++;\n                }\n                int max = 0, mxidx = 0;\n                for (int i=0;i<26;i++) if (arr[i]>max) { max=arr[i]; mxidx=i; }\n                char sp = (char)('a'+mxidx);\n                String s = \"{\\n  \\\"char\\\": \\\"\"+sp+\"\\\"\\n}\";\n                Files.write(Paths.get(output), s.getBytes());\n            } else if (\"decrypt\".equals(mode)) {\n                // guess space\n                int[] arr = new int[26];\n                for (char ch: txt.toCharArray()) if (ch>='a' && ch<='z') arr[ch-'a']++;\n                int max=0, id=0; for (int i=0;i<26;i++) if (arr[i]>max) { max=arr[i]; id=i; }\n                char fake = (char)('a'+id);\n                // guess shift\n                int[] arr2 = new int[26];\n                for (char ch: txt.toCharArray()) if (ch>='a' && ch<='z' && ch!=fake) arr2[ch-'a']++;\n                int max2=0,id2=0; for (int i=0;i<26;i++) if (i!=id && arr2[i]>max2) { max2=arr2[i]; id2=i;}\n                int shift = (id2 - ('e'-'a')+26)%26; // encoded 'e' is most frequent other than fake space\n                StringBuilder sb = new StringBuilder();\n                for (char ch: txt.toCharArray()) {\n                    if (ch == fake) sb.append(' ');\n                    else if (ch>='a' && ch<='z')\n                        sb.append((char)(((ch-'a'-shift+26)%26)+'a'));\n                    else if (ch>='A' && ch<='Z')\n                        sb.append((char)(((ch-'A'-shift+26)%26)+'A'));\n                    else sb.append(ch);\n                }\n                Files.write(Paths.get(output), sb.toString().getBytes());\n            }\n        } catch (Exception ex) {}\n    }\n}"}
{"id": 2083, "language": "Java", "code": "package track;\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t// String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t// System.out.println(output);\n      try\n      {\n        int a=Integer.parseInt(args[i]);\n        if(a>=0 && a<=1000)\n        {\n          if((a%3==0)&& args[i].contains(\"3\"))\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(a%3==0)\n            {\n              System.out.println(\"idiot\");\n            }\n          else if(args[i].contains(\"3\")){\n              System.out.println(\"stupid\");\n            }\n          else{\n            if(args[i].equals(\"\uff11\uff13\"))\n            {\n              System.out.println(\"invalid\");\n            }\n            else\n            System.out.println(\"smart\");\n          }  \n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2084, "language": "Python3", "code": "import sys\n\ndef main(argv):\n\n  for j, v in enumerate(argv):\n    i = v\n    if i.isdigit():\n        if 0 <= int(i) <= 1000:\n            if int(i) % 3 == 0 and '3' not in str(i):\n                print('idiot')\n            elif '3' in str(i) and int(i) % 3 != 0:\n                print('stupid')\n            elif int(i) % 3 == 0 and '3' in str(i):\n                print('dumb')\n            else:\n                print('smart')\n    else:\n        print('invalid')\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2085, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{  \n  int number = 0;\n  int i,j;\n  int flag = 0;\n  int value;\n  int flag2 = 0;\n  // start from 1 to ignore script name; argv[0] will be a name \n  //of processing file.\n  for (int i = 1; i < argc; i++) {\n    number = 0;\n    flag = flag2 = 0;\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    for(j=0;argv[i][j]!='\\0';j++){\n        value = argv[i][j] - '0';\n        if(value > 9 || value < 0){\n            flag2++;\n            break;\n        }            \n        if(value == 3)\n          ++flag;\n      number = number * 10 +value;\n    }\n  if(number  > 1000 || flag2)\n    printf(\"invalid\\n\");\n  else if(number % 3 == 0 && flag)\n      printf(\"dumb\\n\");\n  else if(number % 3 == 0)\n    printf(\"idiot\\n\"); \n  else if(flag)\n    printf(\"stupid\\n\");\n  else \n    printf(\"smart\\n\");\n  }\n  return 0;\n}\n"}
{"id": 2086, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  c=['0','1','2','3','4','5','6','7','8','9']\n  for n in range(len(argv)):\n    #print argv[n]\n    flag=0\n    flag2=0\n    #print 'idiot'\n    a=argv[n]\n    b=int(a)\n    #print a[0]\n    for i in range(len(c)):\n      if(c[i]==a[0]):\n        flag2=1\n    for i in range(len(a)):\n      if a[i]=='3':\n        flag=1\n    if(b%3==0 and flag==0):\n      print\"idiot\"\n    elif(flag==1 and b%3!=0):\n      print\"stupid\"\n    elif(flag==1 and b%3==0):\n      print\"dumb\"\n    elif(flag2==1):\n      print\"smart\"\n    else:\n      print\"invalid\"\n    #elif(argv[n]=='18'):\n     # print\"idiot\"\n    \n  #for i, v in enumerate(argv):\n   # print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2087, "language": "Python3", "code": "import sys\n\nN = 8\nFULL_BIT_FLAG = (2**N) - 1\n\ndef queens(accMask, leftMask, rightMask, acc_result, total_result):\n    mask = FULL_BIT_FLAG & (accMask | leftMask | rightMask)\n    for i in range(N):\n        q = 1 << i\n        \n        if q & mask == 0:\n            nextAccMask = accMask | q\n            nextlLeftMask = (leftMask | q) << 1\n            nextrRightMask = (rightMask | q) >> 1\n            result = acc_result + [q]\n\n            if nextAccMask == FULL_BIT_FLAG:\n                total_result.append(result)\n                return\n            else:\n                queens(nextAccMask, nextlLeftMask, nextrRightMask, result, total_result)\n                \n    return total_result\n\ndef main(argv):\n    # Get answers first\n    final_result = queens(0,0,0,[],[])\n\n    arr = []\n    for i, path in enumerate(argv):\n        f = open(path)\n        line = f.readline()\n\n        while line:\n            line.replace('\\n','')\n            arr.append(list(map(int, line.split())))\n            line = f.readline()\n\n        k, arr = arr[0], arr[1:]\n\n        done = False\n        for result in final_result:\n            # number to bit flag string\n            board = \"\\n\".join([\"{0:b}\".format(num).zfill(N) for num in result]).split()\n            for i, row in enumerate(board):\n                board[i] = list(row)\n\n            # compare input to all possible 8x8 boards\n            for i in range(k[0]):\n                row, col = arr[i]\n\n                if board[row][col] != '1':\n                    break\n\n                if i == k[0] - 1:\n                    done = True\n\n            if done:\n                for i in range(N):\n                    for j in range(N):\n                        if board[i][j] == '1':\n                            board[i][j] = 'Q'\n                        else:\n                            board[i][j] = '.'\n\n                for i in range(N):\n                    print(''.join(board[i]))\n\n                break\n\n    f.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2088, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAXLEN 100000\n\nchar text[MAXLEN + 1];\n\nvoid output_json_count(int counts[256], const char *opath) {\n    FILE *fp = fopen(opath, \"w\");\n    if (!fp) return;\n    fprintf(fp, \"{\\n\");\n    int first = 1;\n    for (int i = 0; i < 256; i++) {\n        if (((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || i == ' ') && counts[i] > 0) {\n            if (!first) fprintf(fp, \",\\n\");\n            fprintf(fp, \"  \\\"%c\\\": %d\", i, counts[i]);\n            first = 0;\n        }\n    }\n    fprintf(fp, \"\\n}\\n\");\n    fclose(fp);\n}\n\n// \u7a7a\u767d\u5165\u308c\u66ff\u3048\u6587\u5b57\u3092\u898b\u3064\u3051\u308b\u3002\u5e73\u5747\u5358\u8a9e\u9577\u304b\u3089\u5224\u5b9a\u3002\nchar find_space_substitute(int counts[256], const char *src, int len) {\n    char best_char = 0;\n    double best_diff = 9999.0;\n    for (char c = 'a'; c <= 'z'; c++) {\n        if (counts[(unsigned char)c] == 0) continue;\n        int wordcount = 0;\n        int total_len = 0;\n        int current_len = 0;\n        int inword = 0;\n        for (int i = 0; i < len; i++) {\n            char cc = src[i];\n            if (cc == c) cc = ' ';\n            else if (cc == ' ') cc = c;\n            if (cc >= 'A' && cc <= 'Z') cc += 32;\n            if (cc >= 'a' && cc <= 'z') {\n                current_len++;\n                inword = 1;\n            } else {\n                if (inword) {\n                    wordcount++;\n                    total_len += current_len;\n                    current_len = 0;\n                    inword = 0;\n                }\n            }\n        }\n        if (inword) {\n            wordcount++;\n            total_len += current_len;\n        }\n        if (wordcount == 0) continue;\n        double avg = (double)total_len / wordcount;\n        double diff = avg > 4.5 ? avg - 4.5 : 4.5 - avg;\n        if(diff < best_diff) {\n            best_diff = diff;\n            best_char = c;\n        }\n    }\n    return best_char;\n}\n\nint main(int argc, char *argv[]) {\n    if(argc != 4) return 1;\n    const char *cmd = argv[1];\n    const char *ipath = argv[2];\n    const char *opath = argv[3];\n\n    FILE *fp = fopen(ipath, \"rb\");\n    if (!fp) return 1;\n    int len = fread(text, 1, MAXLEN, fp);\n    fclose(fp);\n    text[len] = 0;\n\n    if(strcmp(cmd, \"count\") == 0) {\n        int counts[256] = {0};\n        for(int i=0; i<len; i++) {\n            unsigned char c = (unsigned char)text[i];\n            if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                counts[c]++;\n            }\n        }\n        output_json_count(counts, opath);\n\n    } else if(strcmp(cmd, \"space\") == 0) {\n        int counts[256] = {0};\n        for(int i=0; i<len; i++) {\n            unsigned char c = (unsigned char)text[i];\n            if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                counts[c]++;\n            }\n        }\n        char sp = find_space_substitute(counts, text, len);\n        FILE *fp2 = fopen(opath, \"w\");\n        if(!fp2) return 1;\n        fprintf(fp2, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", sp);\n        fclose(fp2);\n\n    } else if(strcmp(cmd, \"decrypt\") == 0) {\n        int counts[256] = {0};\n        for(int i=0; i<len; i++) {\n            unsigned char c = (unsigned char)text[i];\n            if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n                counts[c]++;\n            }\n        }\n        char sp = find_space_substitute(counts, text, len);\n        // swap space and sp\n        for(int i=0; i<len; i++) {\n            if(text[i] == sp) text[i] = ' ';\n            else if(text[i] == ' ') text[i] = sp;\n        }\n        // find shift\n        int freq[26] = {0};\n        for(int i=0; i<len; i++) {\n            char c = text[i];\n            if(c >= 'A' && c <= 'Z') c += 32;\n            if(c >= 'a' && c <= 'z') freq[c - 'a']++;\n        }\n        int max_idx = 0, max_val = freq[0];\n        for(int i=1; i<26; i++) {\n            if(freq[i] > max_val) {\n                max_val = freq[i];\n                max_idx = i;\n            }\n        }\n        int shift = max_idx - ('e' - 'a');\n        if(shift < 0) shift += 26;\n\n        FILE *out = fopen(opath, \"w\");\n        if(!out) return 1;\n        for(int i=0; i<len; i++) {\n            char c = text[i];\n            if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                int base = (c >= 'a') ? 'a' : 'A';\n                char dec = (c - base - shift + 26) % 26 + base;\n                fputc(dec, out);\n            } else {\n                fputc(c, out);\n            }\n        }\n        fclose(out);\n\n    } else {\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 2089, "language": "PHP", "code": "<?php namespace Track;\n\nconst MSG_FINISH = '\u30c9\u30f3\u266a\u30c9\u30f3\u266a';\nconst MSG_GAMEOVER = '\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc';\n\nconst FINISH_TARGET = '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab';\nconst OUTPUT_TARGETS = ['\u30c9', '\u30ab', ];\n\nfunction run ($argc, $argv)\n{\n  if (!isset($argv[0]) || !is_numeric($argv[0])) {\n    echo \"\u671f\u5f85\u3057\u305f\u5f15\u6570\u3067\u306f\u3042\u308a\u307e\u305b\u3093\\n\";\n    return;\n  }\n\n  // \u6700\u5927\u8a66\u884c\u56de\u6570\n  $max = $argv[0];\n\n  $targetLength = count(OUTPUT_TARGETS);\n  $finishLength = mb_strlen(FINISH_TARGET);\n\n  // \u7d42\u4e86\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u3069\u3053\u307e\u3067\u6b63\u3057\u304b\u3063\u305f\u304b\n  $checked = 1;\n\n  for ($i = 1 ; $i <= $max ; $i++) {\n    // \u6587\u5b57\u6c7a\u5b9a\n    $value = OUTPUT_TARGETS[mt_rand() % $targetLength];\n\n    // \u6587\u5b57\u51fa\u529b\n    printf(\"%s\\n\", $value);\n\n    // \u7d42\u4e86\u5224\u5b9a\u3068\u540c\u3058\u6587\u5b57\u5217\u304b\u78ba\u8a8d\n    if ($value == mb_substr(FINISH_TARGET, 0, $checked)) {\n      // echo '\u4e00\u81f4';\n      $checked++;\n    } else {\n      // echo '\u4e0d\u4e00\u81f4';\n      $checked = 1;\n    }\n\n    // \u7d42\u4e86\u5224\u5b9a\n    if ($checked == $finishLength) {\n      printf(\"%s\\n\", MSG_FINISH);\n      return;\n    }\n  }\n\n  // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n  printf(\"%s\\n\", MSG_GAMEOVER);\n}\n\n\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 2090, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    int len=strlen(argv[i]);\n    int num=0;\n    bool valid=true,hasthree=false;\n    for(int j=0; j<len;j++){\n      int x=argv[i][j]-'0';\n      if(x>=0 && x<=9){\n        num=num*10+x;\n        if(x==3){\n          hasthree=true;\n        }\n      }\n      else{\n        valid=false;\n        break;\n      }\n    }\n    if(num>=1000){\n      valid=false;\n    }\n    if(!valid){\n      cout<<\"invalid\"<<endl;\n    }\n    else{\n      bool dividebythree=false;\n      if(num%3==0){\n        dividebythree=true;\n      }\n      if(dividebythree && hasthree){\n        cout<<\"dumb\"<<endl;\n      }\n      else if(!dividebythree && !hasthree){\n        cout<<\"smart\"<<endl;\n      }\n      else if(dividebythree){\n        cout<<\"idiot\"<<endl;\n      }\n      else{\n        cout<<\"stupid\"<<endl;\n      }\n    }\n  }\n  return 0;\n}\n"}
{"id": 2091, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction idiot_or_not($s) {\n  // \u7121\u52b9\u5024\u5224\u5b9a\n  if (!preg_match('/^\\d+$/', $s)) return 'invalid';\n  $n = intval($s);\n  if ($n < 0 || $n > 1000) return 'invalid';\n  $is3 = strpos(strval($n), '3') !== false;\n  $isDiv3 = $n % 3 === 0;\n  if ($isDiv3 && $is3) return 'dumb';\n  if ($isDiv3) return 'idiot';\n  if ($is3) return 'stupid';\n  return 'smart';\n}\n\nfunction main($argc, $argv) {\n  foreach ($argv as $arg) {\n    echo idiot_or_not($arg) . PHP_EOL;\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2092, "language": "Java", "code": "package track;\npublic class App{\n  public static void main(String[] args){\n    for(String str:args){\n    \n      int count=0;\n      int num=Integer.parseInt(str);\n      if(num>= 0 && num<=1000){\n        for(int i=0;i<str.length();i++){\n    \n         char s=str.charAt(i);\n         if(s=='3')\n         count++;\n        }\n        if(count>0 && num%3==0){\n        System.out.println(\"dumb\");\n        }\n        else if(num%3==0){\n        System.out.println(\"idiot\");\n        }\n        else if(count>0){\n        System.out.println(\"stupid\");\n        }\n        else{\n        System.out.println(\"smart\");\n        }\n      }\n      else{\n      System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 2093, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = \"invalid\";\n      try{\n        if(Integer.parseInt(args[i]) % 3 == 0){\n          output=\"idiot\";\n        }\n        if(args[i].contains(\"3\")){\n          output=\"stupid\";\n        }\n        if(Integer.parseInt(args[i]) % 3 == 0 && args[i].contains(\"3\")){\n          output=\"dumb\";\n        }\n        if(!(Integer.parseInt(args[i]) % 3 == 0) && !args[i].contains(\"3\")){\n          output=\"smart\";\n        }\n        if(args[i].matches(\"[\uff10-\uff19]*\")){\n          output=\"invalid\";\n        }\n      } catch (NumberFormatException exception){\n          output=\"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 2094, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(1);\n\t\t}\n\t}\n}\n"}
{"id": 2095, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <random>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n    return 0;\n  }\n\n  int limit = stoi(argv[1]);\n  if (limit < 0) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n    return 0;\n  }\n\n  string pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  string seq = \"\";\n\n  random_device rd;\n  mt19937 gen(rd());\n  uniform_int_distribution<> dis(0, 1);\n\n  for (int i = 0; i < limit; i++) {\n    char c = (dis(gen) == 0) ? '\u30c9' : '\u30ab';\n    cout << c << \"\\n\";\n    seq += c;\n    if (seq.size() > pattern.size()) {\n      seq.erase(0, 1);\n    }\n    if (seq == pattern) {\n      cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\";\n      return 0;\n    }\n  }\n\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n  return 0;\n}"}
{"id": 2096, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n\n    String output;\n    int number;\n\n    for (int i = 0; i < args.length; i++) {\n      output = String.format(\"%s\", args[i]);\n\n      for(int i = 0; i < output.length; i++){\n          if('\\uFF01' <= output.charAt(i) && output.charAt(i) <= '\\uFFEF'){\n            number = -1;\n          }\n        }\n      }\n      \n\n      try{\n        number = Integer.parseInt(output);\n      }catch(Exception e){\n        number = -1;\n      }\n      \n\n      if(number < 0 || number > 1000){\n        System.out.println(\"invalid\");\n      }else{\n        if((number % 3) == 0){\n          if(output.contains(\"3\")){\n            System.out.println(\"dumb\");\n          }else{\n            System.out.println(\"idiot\");\n          }\n        }else{\n          if(output.contains(\"3\")){\n            System.out.println(\"stupid\");\n          }else{\n            System.out.println(\"smart\");\n          }\n        }\n      }\n    }\n  }\n\n  public static boolean isHalfWidth(char c){\n    return '\\u0000' <= c && c <= '\\u00FF'\n    || '\\uFF01' <= c && c <= '\\uFFEF'\n    || '\\uFF61' <= c && c <= '\\uFFDC'\n    || '\\uFFE8' <= c && c <= '\\uFFEE';\n  }\n}\n"}
{"id": 2097, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // This code applies the 3 Idiots Algorithm based on input numbers.\n        foreach (string arg in args)\n        {\n            if (int.TryParse(arg, out int number) && number >= 0 && number <= 1000)\n            {\n                if (number % 3 == 0 && arg.Contains(\"3\"))\n                    Console.WriteLine(\"dumb\");\n                else if (number % 3 == 0)\n                    Console.WriteLine(\"idiot\");\n                else if (arg.Contains(\"3\"))\n                    Console.WriteLine(\"stupid\");\n                else\n                    Console.WriteLine(\"smart\");\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2098, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// \u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\nvoid reverse(char *s) {\n    int len = strlen(s);\n    for (int i = 0, j = len - 1; i < j; i++, j--) {\n        char tmp = s[i];\n        s[i] = s[j];\n        s[j] = tmp;\n    }\n}\n\n// 10\u9032\u6570\u30929\u9032\u6570\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\nvoid decimal_to_base9_str(long long n, char *buf) {\n    if (n == 0) {\n        strcpy(buf, \"0\");\n        return;\n    }\n    \n    int i = 0;\n    while(n > 0) {\n        buf[i++] = (n % 9) + '0';\n        n /= 9;\n    }\n    buf[i] = '\\0';\n    reverse(buf);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        return 1;\n    }\n    \n    char expr[301];\n    strcpy(expr, argv[1]);\n\n    // strtok\u3092\u4f7f\u3063\u3066\u5f0f\u3092\u30d1\u30fc\u30b9\u3059\u308b\n    char *num1_str = strtok(expr, \" \");\n    char *op_str = strtok(NULL, \" \");\n    char *num2_str = strtok(NULL, \" \");\n    \n    long long num1_val = strtoll(num1_str, NULL, 9);\n    long long num2_val = strtoll(num2_str, NULL, 9);\n\n    long long answer;\n    if (*op_str == '+') {\n        answer = num1_val + num2_val;\n    } else {\n        answer = num1_val * num2_val;\n    }\n    \n    char result_str[100];\n    decimal_to_base9_str(answer, result_str);\n    \n    printf(\"%s\\n\", result_str);\n\n    return 0;\n}"}
{"id": 2099, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int robot;\n    int you;\n} Game;\n\ntypedef struct Node {\n    int r1, r2, r3, y;\n    int count; // how many times this pattern occurred\n    struct Node *next;\n} Node;\n\n#define ROCK 0\n#define SCISSORS 1\n#define PAPER 2\n\nNode* find_pattern(Node *head, int a, int b, int c, int d) {\n    Node *cur = head;\n    while (cur) {\n        if (cur->r1 == a && cur->r2 == b && cur->r3 == c && cur->y == d) return cur;\n        cur = cur->next;\n    }\n    return NULL;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n    FILE *f = fopen(argv[1], \"r\");\n    if (f == NULL) return 1;\n\n    // Read whole file into buffer\n    fseek(f, 0, SEEK_END);\n    long filesize = ftell(f);\n    fseek(f, 0, SEEK_SET);\n    char *data = malloc(filesize + 1);\n    fread(data, 1, filesize, f);\n    fclose(f);\n    data[filesize] = 0;\n\n    // Simple parse to extract array size and records count\n    // We'll scan for {\"robot\":x, \"you\":y} repeatedly\n    Game *games = NULL;\n    int capacity = 8, length = 0;\n    games = malloc(sizeof(Game)*capacity);\n\n    char *pos = data;\n    while (1) {\n        int r, y;\n        char *start = strstr(pos, \"{\\\"robot\\\":\");\n        if (!start) break;\n        if (sscanf(start, \"{\\\"robot\\\":%d, \\\"you\\\":%d}\", &r, &y) == 2) {\n            if (length == capacity) {\n                capacity *= 2;\n                games = realloc(games, sizeof(Game)*capacity);\n            }\n            games[length].robot = r;\n            games[length].you = y;\n            length++;\n            pos = start + 1;\n        } else {\n            break;\n        }\n    }\n    free(data);\n\n    // If fewer than 3 moves, return the initial hardcoded moves: 0,1,2\n    if (length < 3) {\n        printf(\"%d\\n\", length);\n        free(games);\n        return 0;\n    }\n\n    // initialize linked list for patterns\n    Node *head = NULL;\n\n    // We count how many times each pattern appeared\n    // pattern: last 3 robot hands + last opponent hand\n    // for each pattern, count how many times it appears to know the cycle count\n\n    for (int i = 3; i < length; i++) {\n        int rr1 = games[i-3].robot;\n        int rr2 = games[i-2].robot;\n        int rr3 = games[i-1].robot;\n        int yo = games[i-1].you;\n\n        Node *n = find_pattern(head, rr1, rr2, rr3, yo);\n        if (!n) {\n            n = malloc(sizeof(Node));\n            n->r1 = rr1; n->r2 = rr2; n->r3 = rr3; n->y = yo;\n            n->count = 0;\n            n->next = head;\n            head = n;\n        }\n        n->count++;\n    }\n\n    // The current key is the last 3 robot hands and last opponent hand\n    int key_r1 = games[length-3].robot; \n    int key_r2 = games[length-2].robot;\n    int key_r3 = games[length-1].robot;\n    int key_y = games[length-1].you;\n\n    Node *target = find_pattern(head, key_r1, key_r2, key_r3, key_y);\n    int next_hand = 0; // Default rock\n\n    if (target) {\n        // next hand to play is (count mod 3)\n        next_hand = target->count % 3;\n    } else {\n        next_hand = 0; // first time pattern, start with rock\n    }\n\n    printf(\"%d\\n\", next_hand);\n\n    // free memory\n    Node *cur = head;\n    while(cur) {\n        Node *tmp = cur;\n        cur = cur->next;\n        free(tmp);\n    }\n    free(games);\n\n    return 0;\n}"}
{"id": 2100, "language": "C++", "code": "#include<bits/stdc++.h>\n\n\nusing namespace std;\n\n\n\n\ndouble totc=0;\ndouble totw=0;\nvoid cal(string s,char sp)\n{\n\n    vector<string >v;\n\n\n\n    for(int i=0; i<s.size(); i++)\n    {\n        if(s[i]==sp)\n        {\n            s[i]=' ';\n\n        }\n        else if(s[i]==' ')\n        {\n            s[i]=sp;\n        }\n        if(!isalpha(s[i]))s[i]=' ';\n    }\n    istringstream is(s);\n    string kop;\n\n    while(is>>kop)\n    {\n        totw++;\n        v.push_back(kop);\n        totc+=kop.size();\n    }\n    //cout<<res<<\" \"<<co<<\" \";\n    return;\n\n\n\n}\n//double resbydiff()\n//{\n//    double ans=0;\n//\n//\n//    for(int i=0; i<v.size(); i++)\n//    {\n//        ans+=fabs((double)v[i].size()-4.5);\n//    }\n//    return ans;\n//}\nbool val(char x)\n{\n    if(x>='a'&&x<='z')return 1;\n    if(x>='A'&&x<='Z')return 1;\n    if(x==' ')return 1;\n    return 0;\n}\nstring num(int no)\n{\n    if(no==0)return \"0\";\n    string ho;\n\n    while(no)\n    {\n        ho+=(char)('0'+no%10);\n        no/=10;\n    }\n    reverse(ho.begin(),ho.end());\n\n    return ho;\n}\nint main(int argc,char *argv[])\n//int main()\n{\n    //char *argv[4]= {\"\",\"space\",\"J nnq,gyqtnf!.\"};\n\n    freopen(argv[2],\"r\",stdin);\n   freopen(argv[3],\"w\",stdout);\n\n\n    char ch='\"';\n    if(!strcmp(argv[1],\"space\"))\n    {\n\n        string s,s1;\n        vector<string>input;\n        while(getline(cin,s1))\n        {\n            input.push_back(s1);\n\n        }\n        //getline(cin,s);\n        // int l=s.size();\n        //cout<<l<<endl;\n        double max=2e30;\n        char space='a';\n        double fir=2e30;\n        for(char i='a'; i<='z'; i++)\n        {\n            //v.clear();\n\n            //double cop=cal(s,i);\n            // cout<<cop<<endl;\n            bool fl=0;\n            for(int j=0; j<input.size(); j++)\n            {\n                //cout<<input[j]<<endl;\n                for(int k=0; k<(int)input[j].size()-1; k++)\n                {\n                    if((input[j][k]==':'||input[j][k]==','||input[j][k]==';')&&isalpha(input[j][k+1]))\n                    {\n                        space=input[j][k+1];\n                        //cout<<\" \"<<space<<endl;\n                        fl=1;\n                        break;\n                    }\n                }\n                cal(input[j],i);\n            }\n            if(fl)break;\n            double cop=totc/totw;\n            if(fabs(cop-4.5)<fir)\n            {\n                fir=fabs(cop-4.5);\n                space='i';\n            }\n            //bool fl=0;\n\n\n\n        }\n\n\n\n\n        cout<<\"{\"<<endl;\n        cout<<ch<<\"char\"<<ch<<\": \"<<ch<<space<<ch<<endl;\n        cout<<\"}\"<<endl;\n    }\n    else if(!strcmp(argv[1],\"decrypt\"))\n    {\n\n        string s,s1;\n        vector<string>input;\n        while(getline(cin,s1))\n        {\n            input.push_back(s1);\n\n        }\n        //getline(cin,s);\n        // int l=s.size();\n        //cout<<l<<endl;\n        double max=2e30;\n        char space='a';\n        double fir=2e30;\n        for(char i='a'; i<='z'; i++)\n        {\n            //v.clear();\n\n            //double cop=cal(s,i);\n            // cout<<cop<<endl;\n            bool fl=0;\n            for(int j=0; j<input.size(); j++)\n            {\n                for(int k=0; k<(int)input[j].size()-1; k++)\n                {\n                    if((input[j][k]==':'||input[j][k]==','||input[j][k]==';')&&isalpha(input[j][k+1]))\n                    {\n                        space=input[j][k+1];\n                        fl=1;\n                        break;\n                    }\n                }\n                cal(input[j],i);\n            }\n            if(fl)break;\n            double cop=totc/totw;\n            if(fabs(cop-4.5)<fir)\n            {\n                fir=fabs(cop-4.5);\n                space='i';\n            }\n            //bool fl=0;\n\n\n\n        }\n\n\n\n//        int mem[150];\n//        for(int i=0; i<149; i++)mem[i]=0;\n//\n//        for(int i=0; i<(int)s.size()-1; i++)\n//        {\n//            if(!isalpha(s[i]))\n//                mem[s[i+1]]++;\n//        }\n//\n//        for(char i='a'; i<='z'; i++)\n//        {\n//            if(!mem[i])continue;\n//            double cop=cal(s,i);\n//            double lop=fabs(cop-4.5);\n//            //cout<<i<<\" \"<<lop<<\" \"<<fir<<endl;\n//\n//            if(fabs(lop-fir)<0.0001)\n//            {\n//                double cur=resbydiff();\n//                if(cur<max)\n//                {\n//                    max=cur;\n//                    space=i;\n//\n//                }\n//\n//            }\n//\n//        }\n\n\n//    for(char i='a'; i<='z'; i++)\n//    {\n//        double cop=cal(s,i);\n//        double lop=fabs(cop-4.5);\n//\n//        if(fabs(lop-fir)<0.0001)\n//        {\n//            double cur=resbydiff();\n//            if(cur<max)\n//            {\n//                max=cur;\n//                space=i;\n//\n//            }\n//\n//        }\n//\n//    }\n\n\n        int countr[200];\n\n\n        for(int i=0; i<199; i++)countr[i]=0;\n        for(int k=0; k<input.size(); k++)\n        {\n            s=input[k];\n\n            for(int i=0; i<s.size(); i++)\n            {\n                if(s[i]==space )\n                {\n                    s[i]=' ';\n\n                }\n                else if(s[i]==' ')\n                {\n                    s[i]=space;\n                }\n            }\n            for(int i=0; i<s.size(); i++)\n            {\n                if(isalpha(s[i]))\n                {\n                    countr[s[i]]++;\n                }\n            }\n            input[k]=s;\n        }\n\n\n        int ma=0;\n        char gh='a';\n        for(char c='a'; c<='z'; c++)\n        {\n            // cout<<countr[c]<<endl;\n            if(countr[c]>ma)\n            {\n                ma=countr[c];\n                gh=c;\n            }\n        }\n        // cout<<space<<\" \"<<gh<<endl;\n        // gh='g';\n        int koto=('e'-gh);\n        if(koto<0)koto+=26;\n\n        for(int lol=0; lol<input.size(); lol++)\n        {\n\n            s=input[lol];\n            for(int i=0; i<s.size(); i++)\n            {\n                if(isalpha(s[i]))\n                {\n                    if(s[i]>='a'&&s[i]<='z')\n                    {\n                        int x=s[i]-'a';\n                        x+=koto;\n                        if(x>=26)\n                            x-=26;\n                        s[i]=(char)('a'+x);\n\n                    }\n                    else\n                    {\n                        int x=s[i]-'A';\n                        x+=koto;\n                        if(x>=26)x-=26;\n                        s[i]=(char)('A'+x);\n                    }\n                }\n            }\n            cout<<s<<endl;\n        }\n    }\n    else\n    {\n        int arr[300];\n        for(int i=10; i<=130; i++)arr[i]=0;\n        string s,s1;\n        while(getline(cin,s))\n        {\n            for(int i=0; i<s.size(); i++)\n                if(val(s[i]))arr[s[i]]++;\n        }\n        cout<<\"{\"<<endl;\n        vector<string> v1;\n        for(char i=10; i<=122; i++)\n        {\n\n            if(val(i))\n            {\n                string nw;\n                nw+=ch;\n                nw+=i;\n                nw+=ch;\n                nw+=\": \";\n                nw+=num(arr[i]);\n                v1.push_back(nw);\n            }\n        }\n        for(int i=0; i<v1.size()-1; i++)\n        {\n            cout<<v1[i]<<\",\"<<endl;\n        }\n        int l=v1.size();\n        cout<<v1[l-1]<<endl;\n        cout<<\"}\"<<endl;\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"id": 2101, "language": "Python3", "code": "import json\nimport sys\n\ndef main():\n    # \u521d\u671f\u306e\u624b\u3092\u8a2d\u5b9a\n    hands = [0, 1, 2]  # Rock, Scissors, Paper\n    last_enemy_hand = None\n\n    with open(sys.argv[1]) as f:\n        records = json.load(f)\n\n        for record in records:\n            last_enemy_hand = record['you']\n            hands.append(record['robot'])\n            if len(hands) > 3:\n                hands.pop(0)\n\n    # \u6b21\u306b\u30d7\u30ec\u30a4\u3059\u308b\u624b\u3092\u6c7a\u5b9a\n    next_hand_index = (len(hands) % 3)\n    print((next_hand_index + 1) % 3)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2102, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ConsoleProcessor {\n\n  private static String categorizeNumber(int num) {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean divBy3 = (num % 3 == 0);\n    boolean has3 = String.valueOf(num).contains(\"3\");\n    if (divBy3 && has3) return \"dumb\";\n    if (divBy3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] programArgs) {\n    for (String arg : programArgs) {\n      Scanner s = new Scanner(arg);\n      if (s.hasNextInt()) {\n        System.out.println(categorizeNumber(s.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      s.close();\n    }\n  }\n}"}
{"id": 2103, "language": "Java", "code": "package track;\n\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String op = args[0];\n        String fin = args[1];\n        String fout = args[2];\n        try {\n            String content = new String(Files.readAllBytes(Paths.get(fin)));\n            switch(op) {\n                case \"count\":\n                    handleCount(content, fout);\n                    break;\n                case \"space\":\n                    handleSpace(content, fout);\n                    break;\n                case \"decrypt\":\n                    handleDecrypt(content, fout);\n                    break;\n            }\n        } catch(Exception e) {}\n    }\n    static void handleCount(String dat, String out) throws Exception {\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for(char c='A';c<='Z';++c) map.put(c,0);\n        for(char c='a';c<='z';++c) map.put(c,0);\n        map.put(' ', 0);\n        for(char c:dat.toCharArray()) {\n            if(map.containsKey(c))\n                map.put(c, map.get(c)+1);\n        }\n        StringBuilder js = new StringBuilder(\"{\\n\");\n        boolean frst = true;\n        for(var kv:map.entrySet()) {\n            if(!frst) js.append(\",\\n\");\n            js.append(\"  \\\"\").append(kv.getKey()).append(\"\\\": \").append(kv.getValue());\n            frst=false;\n        }\n        js.append(\"\\n}\");\n        Files.write(Paths.get(out), js.toString().getBytes());\n    }\n    static void handleSpace(String dat, String out) throws Exception {\n        int[] ct = new int[26];\n        for(char c:dat.toCharArray())\n            if(c>='a'&&c<='z') ct[c-'a']++;\n        int idx=0,m=0;\n        for(int i=0;i<26;i++) if(ct[i]>m) {m=ct[i];idx=i;}\n        char rep = (char)('a'+idx);\n        Files.write(Paths.get(out), (\"{\\n  \\\"char\\\": \\\"\"+rep+\"\\\"\\n}\").getBytes());\n    }\n    static void handleDecrypt(String dat, String out) throws Exception {\n        int[] ct = new int[26];\n        for(char c:dat.toCharArray())\n            if(c>='a'&&c<='z') ct[c-'a']++;\n        int sid=0,mx=0;\n        for(int i=0;i<26;i++) if(ct[i]>mx) {mx=ct[i];sid=i;}\n        char s = (char)('a'+sid);\n        int[] cc = new int[26];\n        for(char c:dat.toCharArray())\n            if(c>='a'&&c<='z'&&c!=s) cc[c-'a']++;\n        int xidx=0,mm=0;\n        for(int i=0;i<26;i++) if(i!=sid && cc[i]>mm) {mm=cc[i];xidx=i;}\n        int off = (xidx-('e'-'a')+26)%26;\n        StringBuilder sb = new StringBuilder();\n        for(char c:dat.toCharArray()) {\n            if(c==s) sb.append(' ');\n            else if('a'<=c&&c<='z') sb.append((char)((c-'a'-off+26)%26+'a'));\n            else if('A'<=c&&c<='Z') sb.append((char)((c-'A'-off+26)%26+'A'));\n            else sb.append(c);\n        }\n        Files.write(Paths.get(out), sb.toString().getBytes());\n    }\n}"}
{"id": 2104, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      try\n      {\n        int countOfThree = 0;\n        String stringArgs = args[i];\n        int count = 0;\n        int hasLetters = 0;\n        int differentInput = 0;\n        for(int k=0;k<stringArgs.length();k++)\n        {\n          char ch = stringArgs.charAt(k);\n          int in = (int)ch;\n          if((ch>=65 && ch<=90) || (ch>=97 && ch<=122))\n          {\n            hasLetters++;\n          }\n          if(ch == '3')\n          {\n            countOfThree++;\n          }\n          if(in>256)\n          {\n            throw new InputMismatchException(\"e\");\n          }\n        }\n        if(hasLetters == 0)\n        {\n          int number = Integer.parseInt(stringArgs);\n          if(number%3 == 0 && countOfThree!=0)\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(number%3 == 0)\n          {\n            System.out.println(\"idiot\");\n          }\n          else if(countOfThree!=0)\n          {\n            System.out.println(\"stupid\");\n          }\n          else\n          {\n            System.out.println(\"smart\");\n          }\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2105, "language": "Python3", "code": "import json\nimport re\nimport string\nimport sys\n\ndef main(argv):\n    with open(argv[1]) as fin:\n        text = fin.read()\n\n    if argv[0] == 'count':\n        with open(argv[2], \"w\") as fout:\n            fout.write(json.dumps(count(text), indent=4, sort_keys=True))\n    elif argv[0] == 'space':\n        with open(argv[2], \"w\") as fout:\n            fout.write(json.dumps({'char': space(text)}))\n    elif argv[0] == 'decrypt':\n        with open(argv[2], \"w\") as fout:\n            fout.write(decrypt(text))\n\ndef count(text):\n    res = dict()\n    res[\" \"] = 0\n    for c in string.ascii_letters:\n        res[c] = 0\n    for c in text[:-1]:\n        # \u82f1\u5b57\u3068\u30b9\u30da\u30fc\u30b9\u4ee5\u5916\u306f\u5bfe\u8c61\u5916\n        if not c in string.ascii_letters and c != ' ':\n            continue\n        res[c] += 1\n    return res\n\ndef space(text):\n    min_abs = 9999\n    c = None\n    for c in count(text).keys():\n        # \u30b9\u30da\u30fc\u30b9\u3068\u4efb\u610f\u306e\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u308b\n        avg = avg_word_chars(swap_chars(text, \" \", c))\n        print(c, avg, abs(avg - 4.5))\n        # \u5358\u8a9e\u5e73\u5747\u6587\u5b57\u6570\u304c4.5\u306b\u6700\u3082\u8fd1\u3044\u6587\u5b57\u3092\u6c7a\u5b9a\u3059\u308b\n        if abs(avg - 4.5) < min_abs:\n            min_abs = abs(avg - 4.5)\n            char = c\n    return char\n\ndef decrypt(text):\n    # \u30c6\u30ad\u30b9\u30c8\u306f\u3042\u3089\u304b\u3058\u3081\u30b9\u30da\u30fc\u30b9\u7f6e\u63db\u3057\u3066\u304a\u304f\n    text = swap_chars(text, \" \", space(text))\n    # \u30b9\u30da\u30fc\u30b9\u3068\u4ea4\u63db\u3059\u308b\u7b46\u982d\u5019\u88dc\u306e\u6587\u5b57\n    top = max(count(text).items(), key=lambda x:x[1])[0]\n    # \u4ea4\u63db\u6587\u5b57\u3068\u306e\u30b7\u30d5\u30c8\u6570\n    diff = ord(top) - ord('e') \n    text = list(text)\n    for i in range(len(text)):\n        c = text[i]\n        if not c.isalpha():\n            continue\n        # \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u306b\u304a\u3044\u3066\u6c7a\u307e\u3063\u305f\u30b7\u30d5\u30c8\u6570\u56de\u8ee2\u3001\u7bc4\u56f2\u3092\u8d85\u3048\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u306726\u3092\u8db3\u3057\u3066\u304b\u3089\u5270\u4f59\u3092\u6c42\u3081\u308b\n        if c.isupper():\n            text[i] = chr(ord('A') + (ord(c) - ord('A') + 26 + diff) % 26)\n        elif c.islower():\n            text[i] = chr(ord('a') + (ord(c) - ord('a') + 26 + diff) % 26)\n    return \"\".join(text)\n\ndef swap_chars(text, c1, c2):\n    c1_indices = [pos for pos, char in enumerate(text) if char == c1]\n    text = list(text.replace(c2, c1))\n    for i in c1_indices:\n        text[i] = c2\n    return \"\".join(text)\n\ndef avg_word_chars(text):\n    words = text.split()\n    return sum(len(word) for word in words) / len(words)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2106, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for s,i in enumerate(b+[{}]):\n    if s<3:continue\n    c=(b[s-3]['robot'],b[s-2]['robot'],b[s-1]['robot'],b[s-1]['you'])\n    r=i.get('robot',-1)\n    if r==-1:break\n    if c in d:\n      if d[c]!=(r-1)%3:\n        print(s,c,r,d[c])\n    d[c]=r\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2107, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class SolverApp {\n\n  private static String computeVerdict(int currentVal) {\n    if (currentVal < 0 || currentVal > 1000) return \"invalid\";\n    boolean isDivisibleBy3 = (currentVal % 3 == 0);\n    boolean includesDigit3 = String.valueOf(currentVal).contains(\"3\");\n\n    if (isDivisibleBy3 && includesDigit3) return \"dumb\";\n    if (isDivisibleBy3) return \"idiot\";\n    if (includesDigit3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] stringInputs) {\n    for (String str : stringInputs) {\n      Scanner sc = new Scanner(str);\n      if (sc.hasNextInt()) {\n        System.out.println(computeVerdict(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 2108, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring arabic_to_roman(const int n) {\n  string roman(\"\");\n  int m(n);\n  switch (m % 10) {\n  case 0: break;\n  case 1: roman = \"I\"; break;\n  case 2: roman = \"II\"; break;\n  case 3: roman = \"III\"; break;\n  case 4: roman = \"IV\"; break;\n  case 5: roman = \"V\"; break;\n  case 6: roman = \"VI\"; break;\n  case 7: roman = \"VII\"; break;\n  case 8: roman = \"VIII\"; break;\n  default: roman = \"IX\"; break;\n  }\n  m /= 10;\n  switch (m % 10) {\n  case 0: break;\n  case 1: roman = \"X\" + roman; break;\n  case 2: roman = \"XX\" + roman; break;\n  case 3: roman = \"XXX\" + roman; break;\n  case 4: roman = \"XL\" + roman; break;\n  case 5: roman = \"L\" + roman; break;\n  case 6: roman = \"LX\" + roman; break;\n  case 7: roman = \"LXX\" + roman; break;\n  case 8: roman = \"LXXX\" + roman; break;\n  default: roman = \"XC\" + roman; break;\n  }\n  m /= 10;\n  switch (m % 10) {\n  case 0: break;\n  case 1: roman = \"C\" + roman; break;\n  case 2: roman = \"CC\" + roman; break;\n  case 3: roman = \"CCC\" + roman; break;\n  case 4: roman = \"CD\" + roman; break;\n  case 5: roman = \"D\" + roman; break;\n  case 6: roman = \"DC\" + roman; break;\n  case 7: roman = \"DCC\" + roman; break;\n  case 8: roman = \"DCCC\" + roman; break;\n  default: roman = \"CM\" + roman; break;\n  }\n  m /= 10;\n  switch (m % 10) {\n  case 0: break;\n  case 1: roman = \"M\" + roman; break;\n  case 2: roman = \"MM\" + roman; break;\n  default: roman = \"MMM\" + roman; break;\n  }\n  return roman;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  cout << arabic_to_roman(atoi(argv[1]));\n  return 0;\n}\n"}
{"id": 2109, "language": "C++", "code": "#include<bits/stdc++.h>\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  \n  for (int i = 1; i < argc; i++) {\n    int cur_num=0; // this vriable is used to build current number. starting from 0.\n    int cur_digit =0; // this variable will held the current digit. initialization is not required.\n    bool is_3 = 0 ; // to hold the information whether there is a '3' in the given input\n    bool is_digit = 1; // to hold the informtion whether input is valid\n    for(int j=0; argv[i][j]!=0 ; j++){ // argv[i][j]==0 checks null character\n      cur_digit = argv[i][j] - '0'; // char to int\n      if( cur_digit < 0 || cur_digit > 9) is_digit = 0 ; // invalid input check\n      if( cur_digit == 3 ) is_3 = 1 ; // check presence of 3 \n      cur_num = cur_num*10 + cur_digit ; // building the number\n    }\n    if(cur_num < 0 || cur_num > 1000 || !is_digit ) cout<< \"invalid\\n\";\n    else if( cur_num%3 == 0  && is_3 ) cout<< \"dumb\\n\";\n    else if(is_3) cout<<\"stupid\\n\";\n    else if( cur_num % 3 == 0) cout<< \"idiot\\n\";\n    else cout<< \"smart\\n\";\n    \n  }\n  return 0;\n}\n"}
{"id": 2110, "language": "C", "code": "#include <stdio.h>\nint algorithm(int t)\n{\n  int digit;\n  while(t)\n {\n    digit=t%10;\n    if(digit==3)\n    {\n      return 1;\n    }\n    t=t/10;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n\n       if(atoi(argv[i]))\n       {\n         int t=atoi(argv[i]);\n         \n         if(t>=0 && t<=1000)\n         {\n           if(t%3==0)\n           {\n             if(algorithm(t))\n             {\n               printf(\"dumb\\n\");\n             }\n             else\n             {\n               printf(\"idiot\\n\");\n             }\n           }\n           else if(t%3!=0)\n           {\n             if(algorithm(t))\n             {\n               printf(\"stupid\\n\");\n             }\n             else\n             {\n               printf(\"smart\\n\");\n             }\n           }\n           else\n           {\n             printf(\"smart\\n\");\n           }\n         }\n         else\n         {\n           printf(\"invalid\\n\");\n         }\n       }\n       else\n       {\n         printf(\"invalid\\n\");\n       }\n     }\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);*/\n  \n  return 0;\n}\n"}
{"id": 2111, "language": "C++", "code": "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <bitset>\n#include <fstream>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll,ll> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\n#define rep(i,a,n) for(ll i = (a);i < (n);i++)\n#define per(i,a,n) for(ll i = (a);i > (n);i--)\n#define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n#define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define pb push_back\n#define all(c) (c).begin(),(c).end()\n#define sz size()\n#define endl \"\\n\"\n#define print(X) cout << (X) << \"\\n\"\n// // #define input(X) getline(cin,X)\nstatic const int INF = 1e+9+7;\nstatic const ll INFL = 1e+18+7;\nll n,m,l;\nstring s,t;\nll d[200010],e[200010],dp[1001][1001];\n\n#define MAX 8\n#define pall(field) disp((field), (-10))\n#define line() printLine(4)\n\nvoid input(int field[MAX][MAX]);\nvoid copy(int field[MAX][MAX], int nextField[MAX][MAX]);\nvoid undo(int field[MAX][MAX]);\nvoid mark(int field[MAX][MAX], int, int, int, int);\nvoid put(int field[MAX][MAX], int, int);\nvoid disp(int field[MAX][MAX], int);\nvoid printLine(int item);\nvoid checkLast(int field[101][MAX][MAX]);\nvoid answer(int field[101][MAX][MAX]);\n\nint mv[3] = {-1, 0, 1};\nint putCount = 1;\n\nvoid copy(int field[MAX][MAX], int nextField[MAX][MAX]){\n  rep(i,0,MAX)\n    rep(j,0,MAX)\n      nextField[i][j] = field[i][j];\n}\n\n// \u76f4\u524d\u306b\u7f6e\u3044\u305f\u99d2\u3092\u5143\u306b\u623b\u3059\u3002\nvoid undo(int field[101][MAX][MAX]){\n  copy(field[putCount-2], field[putCount-1]);\n  putCount--;\n  // printf(\"putCount = %d\\n\", putCount);\n}\n\n// \u4eca\u306e\u72b6\u614b\u3092\u9077\u79fb\u3055\u305b\u308b\nvoid next(int field[101][MAX][MAX]){\n  copy(field[putCount-1], field[putCount]);\n  putCount++;\n}\n\n// \u7f6e\u3044\u305f\u99d2\u306e\u8ecc\u9053\u3092\u8a18\u9332\u3059\u308b\u3002\nvoid mark(int field[MAX][MAX], int x, int y, int cx, int cy){\n  // printf(\"(%d, %d) [%d,%d]\\n\", x, y, cx,cy);\n  if(x < 0 || MAX <= x || y < 0 || MAX <= y)return;\n  \n  // assert(field[x][y] <= 0);\n\n  field[x][y] = putCount*(-1);\n  mark(field, x+cx, y+cy, cx, cy);\n}\n\n// \u99d2\u3092\u7f6e\u3044\u3066\u307f\u308b\u3002\nvoid put(int field[101][MAX][MAX], int x, int y){\n  // printf(\"field[%d][%d] == %d\\n\", x, y, field[putCount][x][y]);\n  // assert(field[putCount][x][y] == 0);\n\n  field[putCount][x][y] = putCount;\n  rep(i,0,3){\n    rep(j,0,3){\n      if(mv[i] == 0 && mv[j] == 0)continue;\n      mark(field[putCount], x+mv[i], y+mv[j], mv[i], mv[j]);\n    }\n  }\n  copy(field[putCount], field[putCount+1]);\n  putCount++;\n}\n\nbool temPlace(int field[MAX][MAX], int x, int y, int cx, int cy){\n  if(field[x][y] > 0)return false;\n  return temPlace(field, x+cx, y+cy, cx, cy);\n}\n\n// \u7f6e\u304d\u305f\u3044\u99d2\u304c\u3001\u4ed6\u306e\u99d2\u3068\u885d\u7a81\u3059\u308b\u304b\u3069\u3046\u304b\nbool cross(int field[MAX][MAX], int x, int y){\n  rep(i,0,3){\n    rep(j,0,3){\n      if(mv[i] == 0 && mv[j] == 0)continue;\n      if(!temPlace(field, x+mv[i], y+mv[j], mv[i], mv[j]))return false;\n    }\n  }\n  return true;\n}\n\nvp getPosition(int field[101][MAX][MAX]){\n  vp vec;\n  rep(i,0,MAX){\n    rep(j,0,MAX){\n      if(field[putCount][i][j] == 0){\n        vec.pb(P{i, j});\n      }\n    }\n  }\n  return vec;\n}\n\nvoid printPoint(P point){\n  printf(\"(%lld, %lld)\\n\", point.first, point.second);\n}\n\nvoid freePosition(int field[101][MAX][MAX]){\n  vp point = getPosition(field);\n  rep(i,0,point.sz){\n    printPoint(point[i]);\n  }\n}\n\nint countQueen(int field[101][MAX][MAX]){\n  int ans = 0;\n  rep(i,0,MAX){\n    rep(j,0,MAX){\n      if(field[putCount][i][j] > 0)ans++;\n    }\n  }\n  return ans;\n}\n\n// (x, y)\u4ee5\u4e0b\u306e\u5ea7\u6a19\u3060\u3051\u7f6e\u3051\u308b\u69d8\u306b\u3059\u308b\u3002\nbool dfs(int field[101][MAX][MAX], int x, int y){\n  // \u7d42\u4e86\u6761\u4ef6 = \u99d2\u304c\uff18\u500b\u7f6e\u304b\u308c\u3066\u304a\u308a\u3001\u5168\u3066\u306e\u99d2\u306e\u79fb\u52d5\u5148\u304c\u57cb\u307e\u3063\u3066\u3044\u308b\u3053\u3068\n  vp point = getPosition(field);\n  int cq = countQueen(field);\n  if(cq == 8 && point.empty())return true;\n  if(cq > 8)return false;\n  if(point.empty())return false;\n\n  // checkLast(field);\n\n  // \u4e0a\u304b\u3089\u9806\u306b\u7f6e\u3044\u3066\u307f\u308b\n  // \u7f6e\u3044\u3066\u8003\u3048\u305f\u5f8c\u306f\u3001\u304a\u304b\u305a\u306b\u8003\u3048\u308b\u3002\n  rep(i,0,point.sz){\n    put(field, point[i].first, point[i].second);\n    // next(field);\n    copy(field[putCount-1], field[putCount]);\n    // checkLast(field);\n    // getchar();\n    if(dfs(field, point[i].first, point[i].second))return true;\n    undo(field);\n  }\n  return false;\n}\n\nvoid input(int field[101][MAX][MAX]){\n  int x, y;\n  \n  cin >> n;\n  lep(i,1,n){\n    cin >> x >> y;\n    put(field, x, y);\n    copy(field[i], field[i+1]);\n    // pall(field[i]);\n  }\n}\n\nvoid printLine(int item = 4){\n  rep(i,0,item * MAX)printf(\"=\");\n  puts(\"\");\n}\n\nvoid disp(int field[MAX][MAX], int thr = 0){\n  printLine();\n\n  rep(i,0,MAX){\n    rep(j,0,MAX){\n      if(field[i][j] > thr)printf(\"[%02d]\", field[i][j]);\n      else printf(\"[00]\");\n    }\n    puts(\"\");\n  }\n\n  printLine();\n}\n\nvoid answer(int field[101][MAX][MAX]){\n  rep(i,0,MAX){\n    rep(j,0,MAX){\n      if(field[putCount][i][j] > 0)printf(\"Q\");\n      else printf(\".\");\n    }\n    puts(\"\");\n  }\n}\n\nvoid checkAll(int field[101][MAX][MAX]){\n  puts(\"Check\");\n  line();\n\n  rep(i,0,putCount){\n    printf(\"<%lld>\\n\",i);\n    pall(field[i]);\n  }\n}\n\nvoid checkLast(int field[101][MAX][MAX]){\n  puts(\"Check\");\n  line();\n\n  printf(\"<%d>\\n\",putCount);\n  pall(field[putCount]);\n}\n\nint main(){\n  // \u72b6\u614b\u9077\u79fb\u8868\n  int field[101][MAX][MAX];\n  clr(field, 0);\n\n  // \u5165\u529b\u304b\u3089\u72b6\u614b\u9077\u79fb\u8868\u3092\u4f5c\u6210\n  input(field);\n  // freePosition(field);\n  if(!dfs(field, 0, 0))puts(\"No Answers\");\n  else answer(field);\n  return 0;\n}\n\n"}
{"id": 2112, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef main(argv):\n    # This script predicts the winning RPS hand against a specific robot.\n    with open(argv[0]) as f:\n        hist = json.load(f)\n\n    n = len(hist)\n\n    if n < 3:\n        print((n + 2) % 3)\n        return\n\n    rh = [g['robot'] for g in hist]\n    yh = [g['you'] for g in hist]\n    \n    states = (\n        (rh[i-3], rh[i-2], rh[i-1], yh[i-1]) for i in range(3, n)\n    )\n    counts = Counter(states)\n    \n    next_state = (rh[n-3], rh[n-2], rh[n-1], yh[n-1])\n    \n    robot_play = counts[next_state] % 3\n    my_play = (robot_play + 2) % 3\n    \n    print(my_play)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2113, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  # for i, v in enumerate(argv):\n  #   print(\"argv[{0}]: {1}\".format(i, v))\n\n  for x in argv:\n    # print(x)\n    l = []\n    if x.isdigit():\n      l  = list(x)\n      x = int(x)\n      if x >= 0 and x<=1000:\n        if x % 3 == 0 and '3' in l:\n          print(\"dumb\")\n        elif x%3 == 0:\n          print('idiot')\n        elif '3' in l :\n          print('stupid')\n        elif '\uff13' in l:\n          print('invalid')\n        else:\n          print('smart')\n      else:\n        print('invalid')\n    else :\n      print('invalid')  \n    # print(x)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2114, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2115, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      if (isNumber(args[i])) {\n        Integer argsInt = Integer.parseInt(args[i]);\n\n        if (argsInt >= 0 && argsInt <= 1000) {\n          Integer score = 0;\n\n          // divisible by 3\n          if (argsInt % 3 == 0) {\n            score += 1;\n          }\n          // contains number 3\n          if (args[i].indexOf(\"3\") > -1) {\n            score += 2;\n          }\n\n          // if there is more \"if\"s the score will be added with 4(1+2+1), 8(1+2+4+1), 16(1+2+4+8+1), ...\n\n          switch (score) {\n            case 1:\n              System.out.println(\"idiot\");\n              break;\n            case 2:\n              System.out.println(\"stupid\");\n              break;\n            case 3:\n              System.out.println(\"dumb\");\n              break;\n            default:\n              System.out.println(\"smart\");\n              break;\n          }\n        }\n      }\n      else {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n\n  private static boolean isNumber(String input) {\n    try {\n      Integer.parseInt(input);\n\n      if (containsFullWidth(input)) {\n        return false;\n      }\n      else {\n        return true;\n      }\n    }\n    catch (NumberFormatException e) {\n      return false;\n    }\n  }\n\n  public static boolean containsFullWidth(String input) {\n    for (char c : input.toCharArray()) {\n      if ((c & 0xff00) == 0xff00) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n"}
{"id": 2116, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <map>\n#include <string>\nusing namespace std;\n\nstruct Record {\n  int robot;\n  int you;\n};\n\nvector<Record> load_input(const string& path) {\n  ifstream f(path);\n  vector<Record> result;\n  string line, buf;\n  while (getline(f, line)) buf += line;\n  size_t pos = 0;\n  while ((pos = buf.find(\"{\", pos)) != string::npos) {\n    size_t rob = buf.find(\"\\\"robot\\\":\", pos);\n    if (rob == string::npos) break;\n    rob += 8;\n    while (buf[rob] < '0' || buf[rob] > '9') ++rob;\n    int robot = buf[rob] - '0';\n    size_t youp = buf.find(\"\\\"you\\\":\", rob);\n    youp += 6;\n    while (buf[youp] < '0' || buf[youp] > '9') ++youp;\n    int you = buf[youp] - '0';\n    result.push_back({robot, you});\n    pos = youp;\n  }\n  return result;\n}\n\nstring make_key(const vector<Record>& arr, int idx) {\n  string ret;\n  for (int j = 0; j < 3; ++j) ret += '0'+arr[idx-3+j].robot;\n  ret += '0'+arr[idx-1].you;\n  return ret;\n}\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) return 1;\n  vector<Record> logs = load_input(argv[1]);\n  int N = logs.size();\n  if (N < 3) {\n    int ini[] = {0,1,2};\n    cout << ini[N] << endl;\n    return 0;\n  }\n\n  map<string, vector<int>> hist;\n  for (int i = 3; i < N; ++i) {\n    string key = make_key(logs, i);\n    hist[key].push_back(logs[i].robot);\n  }\n  string cur = make_key(logs, N);\n\n  int next_robot = 0;\n  if (hist.count(cur)) {\n    int cnt = hist[cur].size();\n    int last = hist[cur][cnt-1];\n    next_robot = (last + 1) % 3;\n  } else next_robot = 0;\n  \n  int my_win = (next_robot + 2) % 3;\n  cout << my_win << endl;\n  return 0;\n}"}
{"id": 2117, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n\n\n\n    for (int i = 0, l = args.length; i < l; i++) {\n\n     \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tString value = args[i];\n\n      \n\n\n\t\t\n\t\t\t\n\t\t\t\n\t\t\tint valueInt  = Integer.valueOf(value);\n\t\t\t\n\t\t\tif( valueInt >= 0 ) {\n\t\t\t\t\n\t\t\t\t if( valueInt % 3 == 0 ){\n\t\t\t\t\t \n\t\t\t\t\t String output  = \"idiot\";\n\t\t\t\t\t \n\t\t\t\t\t if( value.contains(\"3\") ) {\n\t\t\t\t\t\t \n\t\t\t\t\t\t \n\t\t\t\t\t\t output = \"dumb\";\n\t\t\t\t\t\t \n\t\t\t\t\t }\n\t\t\t\t\t System.out.println(output);\n\t\t\t\t\t \n\t\t\t\t\t \n\t\t\t\t }else if( value.contains(\"3\")){\n\t\t\t\t\t \n\t\t\t\t\t System.out.println(\"stupid\");\n\t\t\t\t\t //\n\t\t\t\t }else {\n\t\t\t\t\t \n\t\t\t\t\t System.out.println(\"smart\");\n\t\t\t\t\t //smart\n\t\t\t\t }\n\n\t\t\t\t\n\t\t\t}else {\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\n  \n    }\n\n\n  }\n}\n"}
{"id": 2118, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    if not argv or not argv[0].isdigit():\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    max_count = int(argv[0])\n    if max_count == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    arr = []\n    goal = ['\u30c9','\u30ab','\u30c9','\u30c9','\u30ab','\u30c9','\u30ab']\n    for _ in range(max_count):\n        t = random.randint(0,1)\n        s = \"\u30c9\" if t else \"\u30ab\"\n        print(s)\n        arr.append(s)\n        if len(arr) >= 7 and arr[-7:] == goal:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2119, "language": "Python3", "code": "import sys\n\ndef process_argument(arg):\n    if not arg.isdecimal():\n        return \"invalid\"\n    n = int(arg)\n    if not (0 <= n <= 1000):\n        return \"invalid\"\n\n    # \u6761\u4ef6\u3092\u4e8b\u524d\u306b\u8a08\u7b97\u3059\u308b\n    is_divisible = (n % 3 == 0)\n    has_three = ('3' in arg)\n\n    if is_divisible and has_three:\n        return \"dumb\"\n    elif is_divisible:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # A functional approach using map\n    outputs = map(process_argument, argv)\n    print(\"\\n\".join(outputs))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2120, "language": "Java", "code": "package track;\npublic class App {\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = (args.length); i < l; i++) {\n      String s=args[i];\n      \n      int id=0,st=0;int temp;\n      try{\n        int num;\n  num=Integer.parseInt(s);\n  temp=num;\n  if(num%3==0)\n  id=1;\n  while(temp>0)\n  {\n    if(temp%10==3)\n    {\n      st=1;\n    break;\n    }\n    temp=temp/10;\n  }\nif(id==1 && st==1)\n{\n\n  System.out.println(\"dumb\");\n}\nelse if(id==1)\nSystem.out.println(\"idiot\");\nelse if(st==1)\nSystem.out.println(\"stupid\");\nelse\nSystem.out.println(\"smart\");\n      }\n  \n  catch(Exception e)\n  {\n    System.out.println(\"invalid\");\n  }\n\t\t\t\n\t\t\n\t}\n}\n}"}
{"id": 2121, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i++) {\n      String v = args[i];\n      String res;\n      try {\n        int x = Integer.parseInt(v);\n        if (x < 0 || x > 1000) {\n          res = \"invalid\";\n        } else {\n          boolean div = (x % 3 == 0);\n          boolean has = v.contains(\"3\");\n          if (div && has) res = \"dumb\";\n          else if (div) res = \"idiot\";\n          else if (has) res = \"stupid\";\n          else res = \"smart\";\n        }\n      } catch (Exception ex) {\n        res = \"invalid\";\n      }\n      System.out.println(res);\n    }\n  }\n}"}
{"id": 2122, "language": "Java", "code": "package track;\n\npublic class ConverterApp {\n    public static void main(String[] args) {\n        // Convert inputs based on the 3 Idiots Algorithm\n\n        for (String arg : args) {\n            try {\n                int num = Integer.parseInt(arg);\n                if (num >= 0 && num <= 1000) {\n                    System.out.println(convert(num));\n                } else {\n                    System.out.println(\"invalid\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static String convert(int number) {\n        boolean divisibleBy3 = (number % 3 == 0);\n        boolean contains3 = String.valueOf(number).contains(\"3\");\n\n        if (divisibleBy3 && contains3) return \"dumb\";\n        if (divisibleBy3) return \"idiot\";\n        if (contains3) return \"stupid\";\n        return \"smart\";\n    }\n}"}
{"id": 2123, "language": "Java", "code": "import java.util.Random;\n\npublic class TaikoDrum {\n    public static void main(String[] args) {\n        // \u5f15\u6570\u304c\u306a\u3044\u304b\u7121\u52b9\u306e\u5834\u5408\u306f\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n        if (args.length < 1) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int limit = Integer.parseInt(args[0]);\n        Random random = new Random();\n        StringBuilder drummingSequence = new StringBuilder();\n        String[] sounds = {\"\u30c9\", \"\u30ab\"};\n\n        for (int i = 0; i < limit; i++) {\n            String sound = sounds[random.nextInt(sounds.length)];\n            System.out.println(sound);\n            drummingSequence.append(sound);\n\n            // \u300c\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\u300d\u306e\u78ba\u8a8d\n            if (drummingSequence.toString().contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n\n        // \u4e0a\u9650\u306b\u9054\u3057\u3066\u3082\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u306a\u3044\u5834\u5408\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 2124, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print (k,c,e,d[c])\n    d[c]=e \n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2125, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef main(argv):\n    # This solution combines logic into the main function body.\n    command, infile, outfile = argv[0], argv[1], argv[2]\n\n    if command == 'count':\n        with open(infile, 'r', encoding='utf-8') as f:\n            content = f.read()\n        \n        char_counts = Counter()\n        for char in content:\n            if char.isalpha() or char == ' ':\n                char_counts[char] += 1\n        \n        with open(outfile, 'w', encoding='utf-8') as f:\n            json.dump(char_counts, f, indent=2)\n\n    elif command == 'space' or command == 'decrypt':\n        with open(infile, 'r', encoding='utf-8') as f:\n            encrypted_content = f.read()\n\n        best_shift = -1\n        best_original_char = ''\n        smallest_diff = 1e9\n\n        for shift_try in range(26):\n            for char_code in range(ord('a'), ord('z') + 1):\n                original_char_try = chr(char_code)\n                \n                # Determine the char that would be swapped with space\n                shifted_char_code = (ord(original_char_try) - ord('a') + shift_try) % 26 + ord('a')\n                swapped_char = chr(shifted_char_code)\n\n                # Tentative decryption\n                temp_str = \"\"\n                for c in encrypted_content:\n                    if c == ' ':\n                        temp_str += swapped_char\n                    elif c.lower() == swapped_char:\n                        temp_str += ' '\n                    else:\n                        temp_str += c\n                \n                # Undo shift\n                decrypted_str = \"\"\n                for c in temp_str:\n                    if 'a' <= c <= 'z':\n                        decrypted_str += chr((ord(c) - ord('a') - shift_try + 26) % 26 + ord('a'))\n                    elif 'A' <= c <= 'Z':\n                        decrypted_str += chr((ord(c) - ord('A') - shift_try + 26) % 26 + ord('A'))\n                    else:\n                        decrypted_str += c\n                \n                # Evaluate\n                words = [w for w in decrypted_str.split() if w]\n                if not words: continue\n                \n                avg_word_len = sum(map(len, words)) / len(words)\n                diff = abs(avg_word_len - 4.5)\n\n                if diff < smallest_diff:\n                    smallest_diff = diff\n                    best_shift = shift_try\n                    best_original_char = original_char_try\n\n        if command == 'space':\n            with open(outfile, 'w', encoding='utf-8') as f:\n                json.dump({'char': best_original_char}, f, indent=2)\n        else: # decrypt\n            swapped_char_final = chr((ord(best_original_char) - ord('a') + best_shift) % 26 + ord('a'))\n            \n            temp_str = \"\"\n            for c in encrypted_content:\n                if c == ' ':\n                    temp_str += swapped_char_final\n                elif c.lower() == swapped_char_final:\n                    temp_str += ' '\n                else:\n                    temp_str += c\n            \n            final_text = \"\"\n            for c in temp_str:\n                if 'a' <= c <= 'z':\n                    final_text += chr((ord(c) - ord('a') - best_shift + 26) % 26 + ord('a'))\n                elif 'A' <= c <= 'Z':\n                    final_text += chr((ord(c) - ord('A') - best_shift + 26) % 26 + ord('A'))\n                else:\n                    final_text += c\n            \n            with open(outfile, 'w', encoding='utf-8') as f:\n                f.write(final_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2126, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  print(random.randrange(3))\n\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2127, "language": "Python3", "code": "import sys\n\ndef evaluate(input_value):\n    if not input_value.isdigit():\n        return \"invalid\"\n\n    number = int(input_value)\n    \n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    if number % 3 == 0 and '3' in input_value:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in input_value:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    # Assess each command line argument using the 3 Idiots reasoning.\n    results = [evaluate(arg) for arg in args]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2128, "language": "Java", "code": "package track;\n\npublic class RomanConverter {\n  public static void main(String[] args) {\n    int number = Integer.parseInt(args[0]);\n    String[] romanLiterals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int[] decimalValues = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\n    String result = \"\";\n    for (int i = 0; i < decimalValues.length; i++) {\n      while (number >= decimalValues[i]) {\n        result += romanLiterals[i];\n        number -= decimalValues[i];\n      }\n    }\n    System.out.println(result);\n  }\n}"}
{"id": 2129, "language": "C++", "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 8;\nvector<vector<char>> board(N, vector<char>(N, '.'));\nvector<bool> row(N, false), col(N, false), diag1(2 * N, false), diag2(2 * N, false);\n\nbool isSafe(int r, int c) {\n    return !row[r] && !col[c] && !diag1[r + c] && !diag2[r - c + (N - 1)];\n}\n\nvoid placeQueen(int r, int c) {\n    board[r][c] = 'Q';\n    row[r] = col[c] = diag1[r + c] = diag2[r - c + (N - 1)] = true;\n}\n\nvoid removeQueen(int r, int c) {\n    board[r][c] = '.';\n    row[r] = col[c] = diag1[r + c] = diag2[r - c + (N - 1)] = false;\n}\n\nbool solve(int r) {\n    if (r == N) return true;\n    for (int c = 0; c < N; ++c) {\n        if (isSafe(r, c)) {\n            placeQueen(r, c);\n            if (solve(r + 1)) return true;\n            removeQueen(r, c);\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        cin >> r >> c;\n        placeQueen(r, c);\n    }\n    \n    solve(k); // Starting from the next row after the placed queens\n\n    for (const auto& row : board) {\n        for (const auto& cell : row) {\n            cout << cell;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"}
{"id": 2130, "language": "Java", "code": "package track;\n\npublic class SillyNumbers {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            process(arg);\n        }\n    }\n\n    public static void process(String text) {\n        if (!text.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        int number = Integer.parseInt(text);\n\n        if (number < 0 || number > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        String numberAsString = Integer.toString(number);\n        boolean divisible = number % 3 == 0;\n        boolean hasThree = numberAsString.contains(\"3\");\n\n        if (divisible && hasThree) {\n            System.out.println(\"dumb\");\n        } else if (divisible) {\n            System.out.println(\"idiot\");\n        } else if (hasThree) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 2131, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t\n\t\t\tString numberStr = args[i];\n      \n\t\t\tint number = 0;\n\t\t\tboolean isInvalid = false;\n\t\t\tboolean has3inNum = false;\n\t\t\t\n\t\t\tfor (int j = 0; j < numberStr.length(); j++) {\n\t\t\t\tchar digit = numberStr.charAt(j);\n\t\t\t\t\n\t\t\t\tif (48 <= digit && digit <= 57) {\n\t\t\t\t\tnumber = number * 10 + (digit - 48);\n\t\t\t\t\tif (digit == 51) {\n\t\t\t\t\t\thas3inNum = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tisInvalid = true;\n\t\t\t\t\tSystem.out.println(\"invalid\");\n          break;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isInvalid) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (number < 0 || number > 1000) {\n        System.out.println(number);\n\t\t\t\tSystem.out.println(\"invalid range\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (number % 3 == 0) {\n\t\t\t\tif (has3inNum) {\n\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (has3inNum) {\n\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"id": 2132, "language": "Java", "code": "package track;\n\npublic class App\n {\n  public static boolean idiots3(int number)\n  {\n    while(number!=0)\n    {\n      if(number%10==3)\n      return true;\n      else\n      return idiots3(number/10);\n    }\n    return false;\n  }\n\tpublic static void main(String args[])\n  {\n\t\tint size=args.length;\n    int index=0;\n    while(index<size)\n    {\n      String data = args[index++];\n      Double tempnumber=null;\n      int digit;\n      try\n      {\n        tempnumber=Double.parseDouble(data);\n       digit=tempnumber.intValue();\n        \n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(digit<0||digit>1000)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean idiot3=idiots3(digit);\n      if(idiot3 && digit%3==0)\n      System.out.println(\"dumb\");\n      else if(idiot3)\n      System.out.println(\"stupid\");\n      else if(digit%3==0)\n      System.out.println(\"idiot\");\n      else\n      System.out.println(\"smart\");\n     }\n\t\t}\n\t}\n\n"}
{"id": 2133, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    int n;\n    try {\n      n = Integer.parseInt(args[0]);\n      if (n < 1) {\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        return;\n      }\n    } catch (Exception e) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    char[] arr = new char[8];\n    int idx = 0;\n    String phrase = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    Random r = new Random();\n\n    for (int i = 0; i < n; i++) {\n      char c = r.nextBoolean() ? '\u30c9' : '\u30ab';\n      System.out.println(c);\n      arr[idx % 8] = c;\n      idx++;\n\n      if (idx >= 8) {\n        StringBuilder sb = new StringBuilder();\n        for (int j = idx - 8; j < idx; j++) {\n          sb.append(arr[(j + 8) % 8]);\n        }\n        if (sb.toString().equals(phrase)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2134, "language": "Python", "code": "import sys\n\narg1=sys.argv[1:]\n\ndef abhi(inp):\n  if not inp.isdigit():\n      return False\n  if int(inp) < 0 or int(inp) > 1000:\n    return False\n  return True\n\ndef abhishek(inp):\n  num=int(inp)\n  a=False\n  b=False\n  if num%3==0:\n    b=True\n  if '3' in inp:\n    a=True\n  if a and b:\n    print \"dumb\"\n  elif a:\n    print \"stupid\"\n  elif b:\n    print \"idiot\"\n  else:\n    print \"smart\"\n\nfor arg in arg1:\n  if abhi(arg):\n    abhishek(arg)\n  else:\n    print \"invalid\"\n\n"}
{"id": 2135, "language": "Python3", "code": "import sys\n\ndef compute_response(x):\n    try:\n        num = int(x)\n        if num < 0 or num > 1000:\n            return \"invalid\"\n        divisible_by_three = num % 3 == 0\n        includes_three = '3' in x\n        if divisible_by_three and includes_three:\n            return \"dumb\"\n        if divisible_by_three:\n            return \"idiot\"\n        if includes_three:\n            return \"stupid\"\n        return \"smart\"\n    except ValueError:\n        return \"invalid\"\n\ndef main(argv):\n    for element in argv:\n        print(compute_response(element))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2136, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\n// \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\nstring arabicToRoman(int num) {\n    string romanNumerals = \"\";\n    // \u5b9a\u7fa9\u3055\u308c\u305f\u30ed\u30fc\u30de\u6570\u5b57\n    pair<int, string> val[] = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n\n    for (const auto &p : val) {\n        while (num >= p.first) {\n            romanNumerals += p.second;\n            num -= p.first;\n        }\n    }\n    return romanNumerals;\n}\n\nint main(int argc, char *argv[]) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u30c1\u30a7\u30c3\u30af\n    if (argc != 2) return 1;\n    int arabicNum = atoi(argv[1]);\n    \n    // \u5909\u63db\n    string result = arabicToRoman(arabicNum);\n    cout << result << endl; // \u7d50\u679c\u3092\u51fa\u529b\n    return 0;\n}"}
{"id": 2137, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\ndef count_letters(file_path, output_file):\n    counts = defaultdict(int)\n    with open(file_path, 'r') as f:\n        for line in f:\n            for char in line:\n                if char.isalpha() or char.isspace():\n                    counts[char] += 1\n    with open(output_file, 'w') as out_file:\n        json.dump(counts, out_file)\n\ndef space_character(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    counts = defaultdict(int)\n    for char in text:\n        if char.isalpha():\n            counts[char] += 1\n    most_common = max(counts, key=counts.get)\n    with open(output_file, 'w') as out_file:\n        json.dump({\"char\": most_common}, out_file)\n\ndef decrypt(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    shifted_text = ''\n    for char in text:\n        if char.isalpha():\n            shifted_char = chr(((ord(char.lower()) - ord('a') - 2) % 26) + ord('a'))\n            shifted_text += shifted_char.upper() if char.isupper() else shifted_char\n        else:\n            shifted_text += char\n    with open(output_file, 'w') as out_file:\n        out_file.write(shifted_text)\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n    \n    if command == 'count':\n        count_letters(input_file, output_file)\n    elif command == 'space':\n        space_character(input_file, output_file)\n    elif command == 'decrypt':\n        decrypt(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2138, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nint count(char *input, char *output)\n{\n  int countArr[128] = {0};\n  FILE *fip;\n  FILE *fop;\n\n  fip = fopen(input, \"r\");\n  char c;\n  while((c = fgetc(fip)) != EOF)\n  {\n    countArr[c]++;\n  }\n  fclose(fip);\n\n  fop = fopen(output, \"w\");\n  fprintf(fop, \"{\\n\");\n  for(int loop = 0; loop < 128; loop++)\n  {\n    if(loop == 32 || \n      (loop >= 65 && loop <= 90) ||\n      (loop >= 97 && loop <= 122)){\n        fprintf(fop, \"\\\"%c\\\":%d\", loop, countArr[loop]);\n        if (loop != 122)\n        {\n          fprintf(fop, \",\\n\");\n        }\n        else\n        {\n          fprintf(fop, \"\\n\");\n        }\n      }\n  }\n  fprintf(fop, \"}\\n\");\n  fclose(fop);\n\n  return 0;\n}\n\nint space(char *input, char *output)\n{\n  FILE *fip;\n  FILE *fop;\n  fip = fopen(input, \"r\"); //File checking is skip since correct argument will be passed\n  int found_mark = 0;\n  char c;\n  while ((c = fgetc(fip)) != EOF)\n  {\n    if(found_mark)\n      break;\n    \n    if(c == '.' || c == ',' || c == ';' || c == ':' || c == ')')\n    {\n      found_mark = 1;\n    }\n  }\n  fclose(fip);\n\n  fop = fopen(output, \"w\");\n  fprintf(fop, \"{\\n\");\n  fprintf(fop, \"\\\"char\\\":\\\"%c\\\"\\n\", c);\n  fprintf(fop, \"}\\n\");\n  fclose(fop);\n\n  return 0;\n}\n\nint decrypt(char *input, char *output)\n{\n  FILE *fip;\n  FILE *fop;\n  FILE *ftp;\n  int countArr[128] = {0};\n  int max = 0;\n  char encrypted_e;\n  int sub = 0;\n  fip = fopen(input, \"r\");\n\n  ftp = fopen(\"./temp.temp\", \"w\");\n\n  int found_mark = 0;\n  char sub_char;\n  char c;\n  while ((sub_char = fgetc(fip)) != EOF)\n  {\n    if(found_mark)\n      break;\n    \n    if(sub_char == '.' || sub_char == ',' || sub_char == ';' || sub_char == ':' || sub_char == ')')\n    {\n      found_mark = 1;\n    }\n  }\n\n  rewind(fip);\n\n  while ((c = fgetc(fip)) != EOF)\n  {\n    if (c == sub_char)\n    {\n      fprintf(ftp, \" \");\n    }\n    else if (c == ' ')\n    {\n      fprintf(ftp, \"%c\", sub_char);\n    }\n    else \n    {\n      fprintf(ftp, \"%c\", c);\n    }\n  }\n  fclose(fip);\n  fclose(ftp);\n\n  ftp = fopen(\"./temp.temp\", \"r\");\n\n  while((c = fgetc(ftp)) != EOF)\n  {\n    countArr[c]++;\n  }\n  rewind(ftp);\n\n  for(int loop = 0; loop < 128; loop++)\n  {\n    if((loop >= 65 && loop <= 90) ||\n       (loop >= 97 && loop <= 122))\n     {\n         if(countArr[loop] > max)\n         {\n          max = countArr[loop];\n           encrypted_e = loop;\n         }\n     }\n  }\n\n   if(encrypted_e >= 97 && encrypted_e <= 122)\n   {\n     if(encrypted_e > 101)\n     {\n       sub = encrypted_e - 101;\n     }\n     else \n     {\n       sub = 26 - 101 - encrypted_e;\n     }\n   }\n   else\n   {\n     if(encrypted_e > 69)\n     {\n       sub = encrypted_e - 69;\n     }\n     else \n     {\n       sub = 26 - 69 - encrypted_e;\n     }\n   }\n\n  fop = fopen(output, \"w\");\n\n  while((c = fgetc(ftp)) != EOF)\n  {\n    if(c >= 65 && c <= 90)\n    {\n      fprintf(fop, \"%c\", (c - 65 + sub) % 26 + 65);\n   }\n     else if (c >= 97 && c <= 122)\n     {\n     fprintf(fop, \"%c\", (c - 97 + sub) % 26 + 97);\n     }\n     else \n     {\n       fprintf(fop, \"%c\", c);\n     }\n   }\n\n\n  fclose(ftp);\n  fclose(fop);\n  \n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  if(!strcmp(argv[1], \"count\"))\n  {\n    count(argv[2], argv[3]);\n  }\n  else if(!strcmp(argv[1], \"space\"))\n  {\n    space(argv[2], argv[3]);\n  }\n  else if (!strcmp(argv[1], \"decrypt\"))\n  {\n    decrypt(argv[2], argv[3]);\n  }\n  return 0;\n}\n"}
{"id": 2139, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      boolean idiot=false;boolean stupid=false;\n      if(args[i].contains(\"3\"))\n      {\n        stupid = true;\n      }\n      try{\n        if(args[i].matches(\"[\\\\uff01-\\\\uff5E]*\"))\n          throw new Exception();\n        int num = Integer.parseInt(args[i]);\n        if(num>1000 || num < 0)\n          throw new Exception();\n\n        if(num%3==0)\n          idiot = true;\n      \n      if(idiot)\n      {\n        if(stupid)\n        {\n          System.out.println(\"dumb\");\n        }\n        else\n          System.out.println(\"idiot\");\n      }\n      else\n      {\n        if(stupid)\n          System.out.println(\"stupid\");\n        else\n          System.out.println(\"smart\");\n      }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2140, "language": "Python3", "code": "import sys\n\ndef interpret_input(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n\n    number = int(num_str)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    if number % 3 == 0 and '3' in num_str:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in num_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Assessing inputs and assigning classification.\n    results = []\n    \n    for arg in argv:\n        results.append(interpret_input(arg))\n        \n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2141, "language": "C++", "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        char *p = argv[i];\n        int len = strlen(p);\n        bool valid = true;\n        for (int j = 0; j < len; j++) {\n            if (p[j] < '0' || p[j] > '9') {\n                valid = false;\n                break;\n            }\n        }\n        if (!valid) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int val = stoi(argv[i]);\n        if (val < 0 || val > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool divisible = (val % 3 == 0);\n        bool containsThree = false;\n        for (int j = 0; j < len; j++) {\n            if (p[j] == '3') {\n                containsThree = true;\n                break;\n            }\n        }\n        if (divisible && containsThree) cout << \"dumb\" << endl;\n        else if (divisible) cout << \"idiot\" << endl;\n        else if (containsThree) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2142, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = 8\n    k = int(argv[0])\n    fixed = []\n    for i in range(1, 2*k, 2):\n        r, c = int(argv[i]), int(argv[i+1])\n        fixed.append((r,c))\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    for r,c in fixed:\n        board[r][c] = 'Q'\n\n    rows = set()\n    cols = set()\n    diag1 = set()\n    diag2 = set()\n\n    for r,c in fixed:\n        rows.add(r)\n        cols.add(c)\n        diag1.add(r-c)\n        diag2.add(r+c)\n\n    def place(r=0):\n        if r == n:\n            return True\n        if r in rows:\n            return place(r+1)\n        for c in range(n):\n            if c in cols or (r-c) in diag1 or (r+c) in diag2:\n                continue\n            board[r][c] = 'Q'\n            rows.add(r)\n            cols.add(c)\n            diag1.add(r-c)\n            diag2.add(r+c)\n            if place(r+1):\n                return True\n            board[r][c] = '.'\n            rows.remove(r)\n            cols.remove(c)\n            diag1.remove(r-c)\n            diag2.remove(r+c)\n        return False\n\n    place()\n\n    for r in range(n):\n        print(''.join(board[r]))\n\nif __name__ == '__main__':\n    main(sys.stdin.read().strip().split())"}
{"id": 2143, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int num)\n{\n\tif(num % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\n\nbool stupid(int num)\n{\n\tint t = num,t1;\n\twhile(t!=0)\n\t{\n\tt1 = t%10;\n\t\t\n\t\tif(t1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tt/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int num)\n{\n\nif(idiot(num) && stupid(num))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n\n}\n\nbool smart(int num)\n{\n\tif(!idiot(num) && !stupid(num))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nbool invalid(int num)\n{\t\n\t\n\tif(!stupid(num) && !idiot(num) && !dumb(num) && !smart(num))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}else{\n\nprintf(\"invalid\\n\");\n\n}\n}\n\n\n\n}"}
{"id": 2144, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int cond1=0,cond2=0;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try{\n        int num = Integer.parseInt(args[i]);\n        if(num%3==0)\n          cond1=1;\n        if(args[i].indexOf(\"3\")>=0)\n          cond2=1;\n        if(cond1==1 && cond2==1)\n          System.out.println(\"dumb\");\n        if(cond1==1 && cond2!=1)\n          System.out.println(\"idiot\");\n        if(cond1!=1 && cond2==1)\n          System.out.println(\"stupid\");\n        if(cond1!=1 && cond2!=1)\n          System.out.println(\"smart\");\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2145, "language": "Python3", "code": "import sys\n\ndef perform_idiot_algorithm(s_value):\n    if not s_value.isdigit():\n        return \"invalid\"\n    \n    n_value = int(s_value)\n    \n    if not (0 <= n_value <= 1000):\n        return \"invalid\"\n\n    div_by_3 = (n_value % 3 == 0)\n    contains_3 = ('3' in s_value)\n\n    if div_by_3 and contains_3:\n        return \"dumb\"\n    elif div_by_3:\n        return \"idiot\"\n    elif contains_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_application_entry(cmd_args):\n    for each_arg in cmd_args:\n        print(perform_idiot_algorithm(each_arg))\n\nif __name__ == '__main__':\n    main_application_entry(sys.argv[1:])"}
{"id": 2146, "language": "Java", "code": "package percussion;\n\nimport java.util.Random;\n\npublic class DrumBeats {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int rounds = Integer.parseInt(args[0]);\n\n    if (rounds < 0 || rounds > 10000) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    StringBuffer sequenceBuffer = new StringBuffer();\n    Random soundGenerator = new Random();\n\n    for (int idx = 0; idx < rounds; idx++) {\n      String note = soundGenerator.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(note);\n      sequenceBuffer.append(note);\n\n      if (sequenceBuffer.indexOf(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") != -1) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n\n    // Eventual output for no matches found\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2147, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = args[i];\n       int divString = Integer.parseInt(output);\n      \n      if(output.contains(\"3\") && (divString%3 == 0))\n      {\n    \t  System.out.println(\"dumb\");\n      }\n      else\n    \t  if(output.contains(\"3\"))\n    \t  {\n    \t\t  System.out.println(\"stupid\");\n    \t  }\n    \t  else\n    \t\t  if((divString%3 == 0))\n    \t\t  {\n    \t\t\t  System.out.println(\"idiot\");\n    \t\t  }\n          else\n    \t\t  if(!output.contains(\"3\") && !(divString%3 == 0))\n    \t\t\t  System.out.println(\"smart\");\n    \t\t\t  else\n    \t\t\t\t  System.out.println(\"Invalid\");\n    }\n  }\n}\n"}
{"id": 2148, "language": "Python3", "code": "def is_valid(x,y,total_mx):\n    for i in range(8):\n        if total_mx[i] == y or abs(i - x) == abs(total_mx[i] - y):\n            return False\n    return True\n\ndef print_mx(total_mx):\n    for i in range(8):\n        test = ['Q' if total_mx[i]==j else '.' for j in range(8)]\n        print(''.join(test))\n\n\ndef main():\n    queen_num = int(input())\n    total_mx = [-100 for i in range(8)]\n    total_my = [-1 for i in range(8)]\n\n    ### initialize\n    for i in range(queen_num):\n        location = [int(j) for j in input().split()]\n        total_mx[int(location[0])] = int(location[1])\n        total_my[int(location[1])] = 1\n\n    init_null_x = [i for i,j in enumerate(total_mx) if j < 0]\n    # init_null_x = np.nonzero(total_mx < 0)[0]\n    init_null_y = [i for i,j in enumerate(total_my) if j < 0]\n\n    num_x = len(init_null_x)\n    num_y = len(init_null_y)\n\n    i = 0; j= 0\n\n    # while len(np.nonzero(total_mx < 0)[0]) > 0:\n    while i < num_x:\n        while j < num_y:\n            if is_valid(init_null_x[i],init_null_y[j],total_mx):\n                total_mx[init_null_x[i]] = init_null_y[j]\n                j = 0\n                break\n            else:\n                j += 1\n\n        if total_mx[init_null_x[i]] == -100:\n            i -= 1\n            y_index = total_mx[init_null_x[i]]\n            j = init_null_y.index(y_index) + 1\n            total_mx[init_null_x[i]] = -100\n            continue\n\n        if i == num_x - 1:\n            break\n        i+= 1\n    print_mx(total_mx)\n\nif __name__ == '__main__':\n    # main(sys.argv)\n    main()\n"}
{"id": 2149, "language": "Python3", "code": "import sys\n\nclass AhoConverter:\n    def convert(self, input_str):\n        if not input_str.isdigit():\n            return \"invalid\"\n        \n        n = int(input_str)\n        if n < 0 or n > 1000:\n            return \"invalid\"\n\n        div_by_3 = n % 3 == 0\n        has_3 = '3' in input_str\n        \n        if div_by_3 and has_3:\n            return \"dumb\"\n        elif div_by_3:\n            return \"idiot\"\n        elif has_3:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\ndef main(argv):\n    converter = AhoConverter()\n    for arg in argv:\n        result = converter.convert(arg)\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2150, "language": "Python3", "code": "import sys\nimport json\n\ndef character_frequency(file_path):\n    # \u82f1\u6587\u5b57\u304a\u3088\u3073\u30b9\u30da\u30fc\u30b9\u306e\u983b\u5ea6\u3092\u96c6\u8a08\n    with open(file_path, \"r\") as f:\n        content = f.read()\n    frequency = {}\n    for ch in content:\n        frequency[ch] = frequency.get(ch, 0) + 1\n    return frequency\n\ndef detect_space_substitution(frequencies):\n    # \u6700\u983b\u51fa\u6587\u5b57\u3068\u3057\u3066\u30b9\u30da\u30fc\u30b9\u306e\u7f6e\u63db\u6587\u5b57\u3092\u63a8\u6e2c\n    max_freq_char = max(frequencies, key=frequencies.get)\n    return max_freq_char\n\ndef decrypt_message(file_path, space_substitute):\n    # \u30b7\u30d5\u30c8\u5fa9\u5143\u3068\u30b9\u30da\u30fc\u30b9\u5fa9\u53f7\u5316\n    shift_offset = ord(space_substitute) - ord(' ')\n    decrypted_text = []\n    with open(file_path, \"r\") as f:\n        for line in f:\n            line_decrypted = ''.join(\n                chr(((ord(ch)-shift_offset) % 256)) if ch.isalpha() else (' ' if ch == space_substitute else ch)\n                for ch in line\n            )\n            decrypted_text.append(line_decrypted)\n    return '\\n'.join(decrypted_text)\n\ndef main(args):\n    command = args[1]\n    input_file = args[2]\n    output_file = args[3]\n    \n    if command == \"count\":\n        frequencies = character_frequency(input_file)\n        with open(output_file, \"w\") as f:\n            json.dump(frequencies, f)\n    elif command == \"space\":\n        frequencies = character_frequency(input_file)\n        space_char = detect_space_substitution(frequencies)\n        with open(output_file, \"w\") as f:\n            json.dump({'char': space_char}, f)\n    elif command == \"decrypt\":\n        frequencies = character_frequency(input_file)\n        space_char = detect_space_substitution(frequencies)\n        decrypted = decrypt_message(input_file, space_char)\n        with open(output_file, \"w\") as f:\n            f.write(decrypted)\n    else:\n        print(\"Invalid command!\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"id": 2151, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    board = [[\".\"] * 8 for _ in range(8)]\n    locked = set()\n    usedZ = set()\n    usedS = set()\n    usedC = set()\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r][c] = 'Q'\n        locked.add(r)\n        usedC.add(c)\n        usedZ.add(r-c)\n        usedS.add(r+c)\n    def bt(r):\n        if r == 8:\n            for row in board:\n                print(\"\".join(row))\n            exit()\n        if r in locked:\n            bt(r+1)\n            return\n        for c in range(8):\n            if c in usedC or (r-c) in usedZ or (r+c) in usedS:\n                continue\n            board[r][c] = 'Q'\n            usedC.add(c)\n            usedZ.add(r-c)\n            usedS.add(r+c)\n            bt(r+1)\n            board[r][c] = '.'\n            usedC.remove(c)\n            usedZ.remove(r-c)\n            usedS.remove(r+c)\n    bt(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2152, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define ALPHA_COUNT 26\n\n// Count and output frequencies of A-Z, a-z, and space in JSON\nint main(int argc, char *argv[]) {\n  if (argc != 4) return 1;\n\n  char *command = argv[1];\n  char *inputfile = argv[2];\n  char *outputfile = argv[3];\n\n  FILE *fin = fopen(inputfile, \"r\");\n  if (!fin) return 1;\n\n  // Map chars to frequency: 'A'...'Z' -> 0-25, 'a'...'z' -> 26-51, ' ' -> 52\n  int freq[53] = {0};\n  int ch;\n  while ((ch = fgetc(fin)) != EOF) {\n    if (ch == ' ') freq[52]++;\n    else if (ch >= 'A' && ch <= 'Z') freq[ch - 'A']++;\n    else if (ch >= 'a' && ch <= 'z') freq[26 + (ch - 'a')]++;\n    // others ignored\n  }\n  fclose(fin);\n\n  if (strcmp(command, \"count\") == 0) {\n    FILE *fout = fopen(outputfile, \"w\");\n    if (!fout) return 1;\n\n    fprintf(fout, \"{\\n\");\n    int printed = 0;\n    // Print frequencies for space\n    if (freq[52] > 0) {\n      fprintf(fout, \"  \\\" \\\": %d\", freq[52]);\n      printed = 1;\n    }\n    // Print uppercase letters freq\n    for (int i = 0; i < ALPHA_COUNT; i++) {\n      if (freq[i] > 0) {\n        if (printed) fprintf(fout, \",\\n\");\n        fprintf(fout, \"  \\\"%c\\\": %d\", 'A' + i, freq[i]);\n        printed = 1;\n      }\n    }\n    // Print lowercase letters freq\n    for (int i = 0; i < ALPHA_COUNT; i++) {\n      if (freq[26 + i] > 0) {\n        if (printed) fprintf(fout, \",\\n\");\n        fprintf(fout, \"  \\\"%c\\\": %d\", 'a' + i, freq[26 + i]);\n        printed = 1;\n      }\n    }\n    fprintf(fout, \"\\n}\\n\");\n    fclose(fout);\n  }\n  else if (strcmp(command, \"space\") == 0) {\n    // The character substituting space is the one (lowercase a-z) with max freq from freq[26..51]\n    int maxfreq = 0;\n    char space_sub = 'a';\n    for (int i = 0; i < ALPHA_COUNT; i++) {\n      if (freq[26 + i] > maxfreq) {\n        maxfreq = freq[26 + i];\n        space_sub = 'a' + i;\n      }\n    }\n    FILE *fout = fopen(outputfile, \"w\");\n    if (!fout) return 1;\n    fprintf(fout, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_sub);\n    fclose(fout);\n  }\n  else if (strcmp(command, \"decrypt\") == 0) {\n    // Decrypt: \n    // 1. Find space substitute char (most freq lowercase letter)\n    // 2. Replace that char with space\n    // 3. Detect shift by comparing most freq letter (excluding that char) to 'e'\n\n    // We already have freq array  \n    int maxfreq_space = 0;\n    char space_sub = 'a';\n    for (int i = 0; i < ALPHA_COUNT; i++) {\n      if (freq[26 + i] > maxfreq_space) {\n        maxfreq_space = freq[26 + i];\n        space_sub = 'a' + i;\n      }\n    }\n\n    // Find the most frequent letter other than space_sub to guess shift.\n    // We consider only letters excluding space_sub (both cases)\n    // Map frequency: 0-25 for A-Z, 26-51 for a-z (but skip space_sub)\n    // Recompute frequency excluding space_sub\n    int freq_letters[ALPHA_COUNT * 2] = {0};\n    FILE *fin2 = fopen(inputfile, \"r\");\n    if (!fin2) return 1;\n    while ((ch = fgetc(fin2)) != EOF) {\n      if ((ch >= 'A' && ch <= 'Z')) {\n        int idx = ch - 'A';\n        char low = ch + 32;\n        if (low != space_sub) freq_letters[idx]++;\n      } else if ((ch >= 'a' && ch <= 'z') && ch != space_sub) {\n        int idx = 26 + (ch - 'a');\n        freq_letters[idx]++;\n      }\n    }\n    fclose(fin2);\n\n    // Find max freq letter (excluding space_sub)\n    int maxf = 0;\n    int maxi = 0;\n    for (int i = 0; i < ALPHA_COUNT * 2; i++) {\n      if (freq_letters[i] > maxf) {\n        maxf = freq_letters[i];\n        maxi = i;\n      }\n    }\n    // maxi < 26 => uppercase letter 'A'+maxi\n    // else lowercase letter 'a'+(maxi-26)\n    char mostfreq_char;\n    if (maxi < 26) mostfreq_char = 'A' + maxi;\n    else mostfreq_char = 'a' + (maxi - 26);\n\n    // The most frequent letter in English is 'e' (ASCII 101 lowercase)\n    // Calculate shift = encrypted_letter - 'e' (shift applied on original 'e' to get cipher)\n    // pay attention to uppercase/lowercase\n    int shift;\n    if (mostfreq_char >= 'A' && mostfreq_char <= 'Z') {\n      shift = mostfreq_char - 'E';\n    } else {\n      shift = mostfreq_char - 'e';\n    }\n    // Normalize shift in range 0-25\n    if (shift < 0) shift += 26;\n    if (shift >= 26) shift -= 26;\n\n    // Now decrypt: For each character:\n    // if char == space_sub => ' '\n    // else if letter, shift backwards by shift keeping case\n    // else keep as is\n\n    FILE *fin3 = fopen(inputfile, \"r\");\n    if (!fin3) return 1;\n    FILE *fout = fopen(outputfile, \"w\");\n    if (!fout) {\n      fclose(fin3);\n      return 1;\n    }\n\n    while ((ch = fgetc(fin3)) != EOF) {\n      if (ch == space_sub) {\n        fputc(' ', fout);\n      } else if (ch >= 'A' && ch <= 'Z') {\n        // Shift backward\n        char c = ch - shift;\n        if (c < 'A') c += 26;\n        fputc(c, fout);\n      } else if (ch >= 'a' && ch <= 'z') {\n        // Not space_sub here\n        char c = ch - shift;\n        if (c < 'a') c += 26;\n        fputc(c, fout);\n      } else {\n        fputc(ch, fout);\n      }\n    }\n    fclose(fin3);\n    fclose(fout);\n  }\n  else {\n    return 1; // unknown command\n  }\n\n  return 0;\n}"}
{"id": 2153, "language": "C#", "code": "using System;\n\nnamespace ThreeIdiotsApp\n{\n    class Entry\n    {\n        static void Main(string[] args)\n        {\n            foreach (var entry in args)\n            {\n                int val;\n                if (!int.TryParse(entry, out val) || val < 0 || val > 1000)\n                {\n                    Console.WriteLine(\"invalid\");\n                    continue;\n                }\n                bool divides3 = (val % 3 == 0);\n                bool hasThree = entry.Contains(\"3\");\n                if (divides3 && hasThree)\n                    Console.WriteLine(\"dumb\");\n                else if (divides3)\n                    Console.WriteLine(\"idiot\");\n                else if (hasThree)\n                    Console.WriteLine(\"stupid\");\n                else\n                    Console.WriteLine(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 2154, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nconst parseArgs = require('minimist');\n\nconst argv = parseArgs(process.argv.slice(2));\nconst args = argv._;\nlet options = argv;\ndelete options._;\n\nfunction main(args, options) {\n  args.forEach(arg => {\n    let result;\n\n    if (!/^(0|[1-9]\\d*)$/.test(arg))\n      return console.log(\"invalid\");\n\n    if (isNaN(arg))\n      result = \"invalid\";\n    else if (arg % 3 === 0)\n      result = arg.toString().indexOf(3) !== -1 ? \"dumb\" : \"idiot\";\n    else if (arg.toString().indexOf(3) !== -1)\n      result = \"stupid\";\n    else\n      result = \"smart\";\n\n    console.log(result);\n  });\n}\n\nmain(args, argv);\n"}
{"id": 2155, "language": "Python3", "code": "import sys\n\ndef main(argv):\n\n    for i in range(len(argv)):\n      if(int(argv[i])%3==0) and (\"3\" in argv[i]):\n        print(\"idiot\")\n      elif(int(argv[i])%3==0):\n        print(\"dumb\")\n      elif(\"3\" in argv[i]):\n        print(\"smart\")\n      else:\n        print(\"stupid\")\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2156, "language": "Python3", "code": "import sys\n\ndef romanize_number(arabic_num):\n    # \u6570\u5024\u3068\u30ed\u30fc\u30de\u6570\u5b57\u8a18\u53f7\u306e\u30da\u30a2\u3092\u5b9a\u7fa9\n    val_symbols = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    converted_string = []\n    current_num = arabic_num\n    \n    for val, sym in val_symbols:\n        while current_num >= val:\n            converted_string.append(sym)\n            current_num -= val\n            \n    return \"\".join(converted_string)\n\ndef main(arguments):\n    input_number = int(arguments[0])\n    final_roman = romanize_number(input_number)\n    print(final_roman)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2157, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool allDigits(const string& s) {\n    for(char c : s) if(!isdigit(c)) return false;\n    return !s.empty();\n}\n\nbool hasDigit3(const string& s) {\n    return s.find('3') != string::npos;\n}\n\nint main(int argc, char *argv[]) {\n    for(int i=1; i<argc; ++i) {\n        string inp = argv[i];\n        if(!allDigits(inp)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int n = stoi(inp);\n        if(n < 0 || n > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div3 = n%3==0;\n        bool incl3 = hasDigit3(inp);\n        if(div3 && incl3) cout << \"dumb\" << endl;\n        else if(div3) cout << \"idiot\" << endl;\n        else if(incl3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2158, "language": "Java", "code": "package track;\n\nimport java.lang.*;\nimport java.util.*;\npublic class App {\n  public static void main(String args[]) {\n    for(int i = 0;i < args.length;i++) {\n      if (args[i].matches(\"[0-9]+\")) {\n        int number = Integer.parseInt(args[i]);\n        if(number<0 || number > 1000){\n          System.out.println(\"invalid\");\n        } else if (number%3 ==0 && args[i].contains(\"3\")) {\n          System.out.println(\"dumb\");\n        } else if (number%3 == 0) {\n          System.out.println(\"idiot\");\n        } else if (args[i].contains(\"3\")) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2159, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This function processes each command line argument based on the rules.\n    def evaluate_number(s_val):\n        # Check if the string consists only of digits\n        if not s_val.isdigit():\n            return \"invalid\"\n        \n        num_val = int(s_val)\n\n        # Check if the number is within the valid range\n        if not (0 <= num_val <= 1000):\n            return \"invalid\"\n        \n        is_divisible_by_3 = (num_val % 3 == 0)\n        includes_digit_3 = ('3' in s_val)\n        \n        # Apply the 3 Idiots Algorithm rules\n        if is_divisible_by_3 and includes_digit_3:\n            return \"dumb\"\n        elif is_divisible_by_3:\n            return \"idiot\"\n        elif includes_digit_3:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\n    # Process each argument and print the result\n    for arg in argv:\n        result = evaluate_number(arg)\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2160, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class App {\n  public static void main(String[] args) {\n    // String[] args_temp = {\"1\", \"3\", \"5\", \"13\", \"33\", \"aa\"};\n    for (int i = 0, l = args.length; i < l; i++) {\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      // System.out.println(output);\n      idiots(args[i]);\n    }\n  }\n\n  public static void idiots (String st) {\n\t\ttry {\n\t\t\tint number = Integer.parseInt(st);\n\t\t\tif (number >= 0 && number <= 1000) {\n\t\t\t\tif (number % 3 == 0) {\n\t\t\t\t\tif (st.contains(\"3\")) {\n\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (st.contains(\"3\")) {\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"invalid\");\n\t\t}\n\t}\n}\n"}
{"id": 2161, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class App {\n\n    public static void main(String[] args) {\n        String filePath = args[0];\n        List<GameEntry> gameHistory = new ArrayList<>();\n\n        try {\n            String fileContent = readFile(filePath);\n            gameHistory = parseJson(fileContent);\n        } catch (IOException e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> robotStrategy = new HashMap<>();\n        ArrayList<Integer> robotPastHands = new ArrayList<>();\n        ArrayList<Integer> opponentPastHands = new ArrayList<>();\n\n        // Initialize robot's fixed opening moves\n        robotPastHands.add(0); // Rock\n        robotPastHands.add(1); // Scissors\n        robotPastHands.add(2); // Paper\n\n        for (int i = 0; i < gameHistory.size(); i++) {\n            GameEntry currentEntry = gameHistory.get(i);\n            int actualRobotHand = currentEntry.robot;\n            int actualOpponentHand = currentEntry.you;\n\n            if (i >= 3) {\n                // Determine the state that led to this robot's move\n                int r3 = robotPastHands.get(i - 3);\n                int r2 = robotPastHands.get(i - 2);\n                int r1 = robotPastHands.get(i - 1);\n                int o1 = opponentPastHands.get(i - 1);\n\n                String stateKey = r3 + \"_\" + r2 + \"_\" + r1 + \"_\" + o1;\n                \n                // Update strategy based on what robot actually played\n                int nextHandInCycle = (actualRobotHand + 1) % 3;\n                robotStrategy.put(stateKey, nextHandInCycle);\n            }\n            \n            robotPastHands.add(actualRobotHand);\n            opponentPastHands.add(actualOpponentHand);\n        }\n\n        // Predict robot's next hand\n        int n = gameHistory.size();\n        int finalR3 = robotPastHands.get(n - 3);\n        int finalR2 = robotPastHands.get(n - 2);\n        int finalR1 = robotPastHands.get(n - 1);\n        int finalO1 = opponentPastHands.get(n - 1);\n\n        String finalStateKey = finalR3 + \"_\" + finalR2 + \"_\" + finalR1 + \"_\" + finalO1;\n        int robotsNextPredictedHand = robotStrategy.getOrDefault(finalStateKey, 0); // Default to Rock if state is new\n\n        // Determine winning hand\n        int myWinningHand;\n        if (robotsNextPredictedHand == 0) { // Rock\n            myWinningHand = 2; // Paper\n        } else if (robotsNextPredictedHand == 1) { // Scissors\n            myWinningHand = 0; // Rock\n        } else { // Paper\n            myWinningHand = 1; // Scissors\n        }\n\n        System.out.println(myWinningHand);\n    }\n\n    private static String readFile(String path) throws IOException {\n        StringBuilder contentBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(path))) {\n            String currentLine;\n            while ((currentLine = br.readLine()) != null) {\n                contentBuilder.append(currentLine.trim());\n            }\n        }\n        return contentBuilder.toString();\n    }\n\n    private static List<GameEntry> parseJson(String jsonString) {\n        List<GameEntry> entries = new ArrayList<>();\n        // Remove brackets and split by \"},{\"\n        String stripped = jsonString.substring(1, jsonString.length() - 1);\n        String[] records = stripped.split(\"\\\\},\\\\{\");\n\n        for (String record : records) {\n            // Re-add braces for simpler parsing of individual records\n            String fullRecord = \"{\" + record + \"}\";\n            \n            int robotIdx = fullRecord.indexOf(\"\\\"robot\\\":\") + 8;\n            int youIdx = fullRecord.indexOf(\"\\\"you\\\":\") + 6;\n\n            int robotHand = Character.getNumericValue(fullRecord.charAt(robotIdx));\n            int youHand = Character.getNumericValue(fullRecord.charAt(youIdx));\n\n            entries.add(new GameEntry(robotHand, youHand));\n        }\n        return entries;\n    }\n}\n\nclass GameEntry {\n    int robot;\n    int you;\n\n    GameEntry(int robot, int you) {\n        this.robot = robot;\n        this.you = you;\n    }\n}"}
{"id": 2162, "language": "Java", "code": "import java.util.Random;\n\npublic class TaikoDrum {\n  public static void main(String[] args) {\n    int limit = 0;\n\n    if (args.length > 0) {\n      limit = Integer.parseInt(args[0]);\n    }\n    Random random = new Random();\n    String target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder result = new StringBuilder();\n\n    for (int i = 0; i < limit; i++) {\n      String play = random.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(play);\n      result.append(play);\n      if (result.length() >= target.length()) {\n        if (result.substring(result.length() - target.length()).equals(target)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2163, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf(\"argc: %d\",argc);\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    //printf(\"idiot\");\n    int flag=0,flag1=0,num,num1;\n    //num = (int)argv[i];\n    sscanf(argv[i],\"%d\\n\",&num);\n    //printf(\"%d\",num);\n    if(num >= 0 && num <= 1000)\n    {    \n      flag = 0;  \n      if(num%3==0 && flag!=1)\n          {\n            //printf(\"idiot\");\n            flag=1;            \n          } \n        while(num>0)\n        {\n          flag1=0;\n          num1 = num%10;\n          if(num1==3)\n          {\n            //printf(\"stupid\");\n            flag1 = 1;\n            break;\n          }\n          num = num/10;         \n        }\n        if(flag==1 && flag1==1)\n        \tprintf(\"dumb\\n\");        \n        if(flag==1 && flag1==0)\n            printf(\"idiot\\n\");\n        if(flag==0 && flag1==1)\n        \tprintf(\"stupid\\n\");\n        if(flag==0 && flag1==0)\n        \tprintf(\"smart\\n\");\n      \n    }\n    else\n    printf(\"invalid\\n\");\n    \n    \n  }\n  return 0;\n}\n"}
{"id": 2164, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdio> // For sscanf\n\n// Function to determine if an integer contains the digit '3'.\nbool hasDigitThree(int number_val) {\n    if (number_val == 0) return false;\n    while (number_val > 0) {\n        if (number_val % 10 == 3) {\n            return true;\n        }\n        number_val /= 10;\n    }\n    return false;\n}\n\n// Function to process a single input string and return the algorithm result.\nstd::string getResult(const std::string& currentArg) {\n    int parsed_num;\n    char leftover_char;\n\n    // Use sscanf to try parsing an integer and check for any remaining characters.\n    int items_scanned = sscanf(currentArg.c_str(), \"%d%c\", &parsed_num, &leftover_char);\n\n    // If sscanf did not parse exactly one integer, or parsed an integer followed by other chars.\n    if (items_scanned != 1) { \n        return \"invalid\";\n    }\n\n    // Check for valid range [0, 1000].\n    if (parsed_num < 0 || parsed_num > 1000) {\n        return \"invalid\";\n    }\n\n    bool multiple_of_three = (parsed_num % 3 == 0);\n    bool contains_three = hasDigitThree(parsed_num);\n\n    if (multiple_of_three && contains_three) {\n        return \"dumb\";\n    } else if (multiple_of_three) {\n        return \"idiot\";\n    } else if (contains_three) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; ++i) {\n    std::cout << getResult(argv[i]) << std::endl;\n  }\n  return 0;\n}"}
{"id": 2165, "language": "Python3", "code": "import sys\n\ndef can_place(board, row, col):\n    for i in range(row):\n        if col == board[i] or abs(row - i) == abs(col - board[i]):\n            return False\n    return True\n\ndef backtrack(board, row):\n    if row == 8:\n        return board\n    for col in range(8):\n        if can_place(board, row, col):\n            board[row] = col\n            result = backtrack(board, row + 1)\n            if result:\n                return result\n            board[row] = -1\n    return None\n\ndef main(argv):\n    k = int(argv[0])\n    initial_queens = [list(map(int, line.split())) for line in argv[1:k+1]]\n    \n    board = [-1] * 8\n    for r, c in initial_queens:\n        board[r] = c\n    \n    completed_board = backtrack(board, 0)\n    \n    for row in range(8):\n        print(''.join('Q' if completed_board[row] == col else '.' for col in range(8)))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().splitlines())"}
{"id": 2166, "language": "Python3", "code": "import sys\n\ndef is_valid(board, row, col):\n    for r in range(row):\n        if col == board[r] or abs(row - r) == abs(col - board[r]):\n            return False\n    return True\n\ndef search_solution(board, queens_placed):\n    row = len(queens_placed)\n    if row == 8:\n        return True\n    for col in range(8):\n        if is_valid(board, row, col):\n            board[row] = col\n            if search_solution(board, queens_placed + [(row, col)]):\n                return True\n            board[row] = -1\n    return False\n\ndef main(argv):\n    k = int(argv[0])\n    queens = [tuple(map(int, line.split())) for line in argv[1:]]\n    \n    board = [-1] * 8\n    for r, c in queens:\n        board[r] = c\n    \n    search_solution(board, queens)\n    \n    for r in range(8):\n        row = ['Q' if board[r] == c else '.' for c in range(8)]\n        print(''.join(row))\n\nif __name__ == \"__main__\":\n    main(sys.stdin.read().strip().splitlines())"}
{"id": 2167, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint check_for_three(int n) {\n    char buffer[12]; \n    sprintf(buffer, \"%d\", n);\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        if (buffer[i] == '3') {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        char *p = argv[i];\n        int is_numeric = 1;\n        if (*p == '\\0') {\n            is_numeric = 0;\n        } else {\n            while (*p) {\n                if (*p < '0' || *p > '9') {\n                    is_numeric = 0;\n                    break;\n                }\n                p++;\n            }\n        }\n\n        if (!is_numeric) {\n            puts(\"invalid\");\n            continue;\n        }\n\n        int num = atoi(argv[i]);\n        if (num < 0 || num > 1000) {\n            puts(\"invalid\");\n            continue;\n        }\n        \n        int div_by_3 = (num % 3 == 0);\n        int has_a_3 = check_for_three(num);\n\n        if (div_by_3 && has_a_3) puts(\"dumb\");\n        else if (div_by_3) puts(\"idiot\");\n        else if (has_a_3) puts(\"stupid\");\n        else puts(\"smart\");\n    }\n    return 0;\n}"}
{"id": 2168, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main (int $inputCount, array $inputValues): void\n{\n  foreach ($inputValues as $singleValue) {\n    $currentOutcome = \"invalid\";\n\n    // \u5165\u529b\u5024\u304c\u5168\u3066\u6570\u5b57\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    if (ctype_digit($singleValue)) {\n      $numericValue = intval($singleValue);\n\n      // \u6570\u5024\u304c\u6307\u5b9a\u7bc4\u56f2\u5185 (0-1000) \u3067\u3042\u308b\u304b\u78ba\u8a8d\n      if ($numericValue >= 0 && $numericValue <= 1000) {\n        $checkDivisibility = ($numericValue % 3 === 0);\n        $checkContainsThree = (strpos(strval($numericValue), '3') !== false); // strpos\u3092\u4f7f\u7528\n\n        if ($checkDivisibility && $checkContainsThree) {\n          $currentOutcome = \"dumb\";\n        } elseif ($checkDivisibility) {\n          $currentOutcome = \"idiot\";\n        } elseif ($checkContainsThree) {\n          $currentOutcome = \"stupid\";\n        } else {\n          $currentOutcome = \"smart\";\n        }\n      }\n    }\n    echo $currentOutcome . \"\\n\";\n  }\n}\n\n// \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u51e6\u7406\u3059\u308b\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2169, "language": "C#", "code": "using System;\n\npublic class IdiotMain\n{\n    public static void Main(string[] args)\n    {\n        for (int i = 0; i < args.Length; ++i)\n        {\n            string txt = args[i];\n            int n;\n            if (!int.TryParse(txt, out n) || n < 0 || n > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n            bool d3 = n % 3 == 0;\n            bool s3 = txt.Contains(\"3\");\n            if (d3 && s3)\n                Console.WriteLine(\"dumb\");\n            else if (d3)\n                Console.WriteLine(\"idiot\");\n            else if (s3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 2170, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef formulize(line):\n  return ''.join([char for char in line if char.islower() or char.isupper() or char==' '])\n\ndef count(fin, fout=None):\n  lines = []\n  with open(fin, 'r') as f:\n    for line in f:\n      lines.append(formulize(line))\n  counter = Counter(''.join(lines))\n  vocab = {char: count for char, count in counter.most_common()}\n  for i in range(97, 123):\n    if chr(i) not in vocab:\n      vocab[chr(i)] = 0\n  for i in range(65, 91):\n    if chr(i) not in vocab:\n      vocab[chr(i)] = 0\n  if ' ' not in vocab:\n    vocab[' '] = 0\n  if fout:\n    with open(fout, 'w') as g:\n      json.dump(vocab, g)\n  return counter.most_common()\n\ndef space(count_result, fout=None):\n  with open(fout, 'w') as f:\n    json.dump({\"char\": count_result[0][0]}, f)\n  return count_result[0][0]\n\ndef sub(code, offset, space_sub):\n  if code == space_sub:\n    return ' '\n  elif code == ' ':\n    return chr(97 + (ord(space_sub)-97-offset)%26)\n  elif code.islower():\n    return chr(97 + (ord(code)-97-offset)%26)\n  elif code.isupper():\n    return chr(65 + (ord(code)-65-offset)%26)\n  else:\n    return code\n\ndef decode_line(line, offset, space_sub):\n  new_line = []\n  for char in line:\n    new_line.append(sub(char, offset, space_sub))\n  return ''.join(new_line)\n\ndef decode(fin, fout):\n  count_result = count(fin)\n  space_sub = count_result[0][0]\n  offset = ord(count_result[1][0]) - ord('e')\n  with open(fin, 'r') as f:\n    for line in f:\n      with open(fout, 'a') as g:\n        g.write(decode_line(line, offset, space_sub))\n\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  # for i, v in enumerate(argv):\n  #    print(\"argv[{0}]: {1}\".format(i, v))\n  if argv[0] == 'count':\n    count(argv[1], argv[2])\n  if argv[0] == 'space':\n    count_result = count(argv[1])\n    space(count_result, argv[2])\n  if argv[0] == 'decrypt':\n    decode(argv[1], argv[2])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2171, "language": "Java", "code": "package track;\n\nimport java.lang.Integer;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      int entry = 0;\n      try {\n        entry = Integer.parseInt(args[i]);\n\n        if(entry >= 0 && entry <= 1000) {\n          if(args[i].contains(\"3\") && entry %3 == 0) {\n            System.out.println(\"dumb\");\n          } else if(entry %3 ==0) {\n            System.out.println(\"idiot\");\n          } else if (args[i].contains(\"3\")) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n      } else {\n        System.out.println(\"invalid\");\n      }\n\n      } catch(Exception e) {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2172, "language": "C", "code": "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n  int num;\n  int ctr=1;\n  while(ctr<argc){\n    if(argv[ctr][0]>='a'&& argv[ctr][0]<'z')\n    {\n      printf(\"invalid\\n\");\n      ctr++;\n      continue;\n    }\n    num=atoi(argv[ctr]);\n   int flag1=0,flag2=0;\n   if(num%3==0)\n   {\n    flag1=1;\n   }\n  int arrayn[100];\n  int temp=num;\n  int count=0;\n  while(temp)\n  {\n    int data=temp%10;\n    arrayn[count]=data;\n    temp=temp/10;\n    count++;\n  }\n  int iter;\n  for(iter=0;iter<count;iter++)\n  {\n    if(arrayn[iter]==3)\n    {\n      flag2=1;\n      break;\n    }\n    }\n  if(num<=0 && num>1000)\n  {\n    printf(\"invalid\");\n    printf(\"\\n\");\n    return 0;\n  }\n  else\n  {\n    if(flag1==1 &&flag2==1)\n    {\n      printf(\"dump\");printf(\"\\n\");\n     }\n    else\n    if(flag1==1 && flag2==0)\n  {\n    printf(\"idiot\");printf(\"\\n\");\n  }\n  else\n  if(flag2==1 && flag1==0)\n  {\n    printf(\"stupid\");printf(\"\\n\");\n    }\n  else\n  {\n    printf(\"smart\");printf(\"\\n\");\n }\n}\n  ctr++;\n  }\n}\n\n "}
{"id": 2173, "language": "Python3", "code": "import sys\n\ndef categorize_input(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n    num = int(arg)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    mod3 = num % 3 == 0\n    has3 = '3' in arg\n    if mod3 and has3:\n        return 'dumb'\n    elif mod3:\n        return 'idiot'\n    elif has3:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(args):\n    for arg in args:\n        print(categorize_input(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2174, "language": "Java", "code": "import java.util.Random;\n\npublic class RhythmGame {\n  public static void main(String[] args) {\n    int rounds = 0;\n    if (args.length > 0) {\n      rounds = Integer.parseInt(args[0]);\n    }\n    Random rand = new Random();\n    String goal = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder history = new StringBuilder();\n\n    for (int i = 0; i < rounds; i++) {\n      String chara = rand.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(chara);\n      history.append(chara);\n\n      if (history.length() >= goal.length()) {\n        if (history.substring(history.length() - goal.length()).equals(goal)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2175, "language": "Java", "code": "package track;\n\npublic class App\n{\n  public static void main(String[] args)\n  {\n  \n    for(String  var:args)\n    {\n      int counter=0;\n      int number=Integer.parseInt(var);\n      if(number>=0 && number<=1000)\n      {\n        for(int i=0;i<var.length();i++)\n        {\n          char st=var.charAt(i);\n          if(st=='3')\n          counter++;\n        }\n        if(counter>0 && number%3==0)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(counter>0)\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 2176, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < args.length; i++) {\n      try{\n       int temp=Integer.parseInt(args[i]);\n      int flag=0;\n\t\t\twhile(temp>0)\n      {\n        if((temp%10)==3)\n        {\n        flag=1;\n        break;\n        }\n        temp=temp/10;\n      }\n      temp=Integer.parseInt(args[i]);\n      if(((temp%3)==0) && (flag==1) )\n        System.out.println(\"dumb\");\n        else if(flag==1)\n        System.out.println(\"stupid\");\n        else if((temp%3)==0)\n        System.out.println(\"idiot\");\n        else\n        System.out.println(\"smart\");\n\t\t\n   }catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}"}
{"id": 2177, "language": "Python3", "code": "import sys\ndef s(i):\n  return all(47<ord(i)<58 for i in i)\n\nfor j in sys.argv[1:]:\n  i=s(j) and int(j)\n  if i and -1<i<10001:\n    c1=i%3==0\n    c2='3' in j\n    if (c1 and c2):print('dumb')\n    elif c1:print('idiot')\n    elif c2:print('stupid')\n    else:print  ('smart')\n  else:print('invalid')\n"}
{"id": 2178, "language": "Python3", "code": "import sys\n\ndef get_output_for(value_str):\n    if not value_str.isdecimal():\n        return \"invalid\"\n    \n    number = int(value_str)\n    if not (0 <= number <= 1000):\n        return \"invalid\"\n\n    divisible = number % 3 == 0\n    contains = \"3\" in value_str\n\n    if divisible and contains:\n        return \"dumb\"\n    if divisible:\n        return \"idiot\"\n    if contains:\n        return \"stupid\"\n    \n    return \"smart\"\n\n\ndef main(argv):\n    # A solution using a helper function to determine the output\n    for argument in argv:\n        result = get_output_for(argument)\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2179, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = 8\n    k = int(argv[0])\n    preset = [tuple(map(int, argv[i*2+1:i*2+3])) for i in range(k)]\n\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    for r,c in preset:\n        board[r][c] = 'Q'\n\n    used_rows = set(r for r,_ in preset)\n    used_cols = set(c for _,c in preset)\n    used_diag1 = set(r-c for r,c in preset)\n    used_diag2 = set(r+c for r,c in preset)\n\n    def backtrack(row=0):\n        if row == n:\n            return True\n        if row in used_rows:\n            return backtrack(row+1)\n        for col in range(n):\n            if col in used_cols or (row-col) in used_diag1 or (row+col) in used_diag2:\n                continue\n            board[row][col] = 'Q'\n            used_rows.add(row)\n            used_cols.add(col)\n            used_diag1.add(row-col)\n            used_diag2.add(row+col)\n            if backtrack(row+1):\n                return True\n            board[row][col] = '.'\n            used_rows.remove(row)\n            used_cols.remove(col)\n            used_diag1.remove(row-col)\n            used_diag2.remove(row+col)\n        return False\n\n    backtrack()\n\n    for row in board:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.stdin.read().strip().split())"}
{"id": 2180, "language": "C#", "code": "using System;\n\nnamespace ThreeIdiots\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Evaluates input against the rules of the 3 Idiots Algorithm.\n            foreach (var input in args)\n            {\n                if (IsValidNumber(input, out int num))\n                {\n                    EvaluateNumber(num, input);\n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n            }\n        }\n\n        private static bool IsValidNumber(string str, out int number)\n        {\n            return int.TryParse(str, out number) && number >= 0 && number <= 1000;\n        }\n\n        private static void EvaluateNumber(int number, string input)\n        {\n            bool isDiv3 = number % 3 == 0;\n            bool has3 = input.Contains('3');\n\n            if (isDiv3 && has3)\n                Console.WriteLine(\"dumb\");\n            else if (isDiv3)\n                Console.WriteLine(\"idiot\");\n            else if (has3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 2181, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint valid_number(const char *str) {\n  if (*str == '\\0') return 0;\n  while (*str) {\n    if (!isdigit(*str)) return 0;\n    str++;\n  }\n  return 1;\n}\n\nint contains_3(const char *str) {\n  while (*str) {\n    if (*str == '3') return 1;\n    str++;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; i++) {\n    if (!valid_number(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int num = atoi(argv[i]);\n    if (num < 0 || num > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div_3 = (num % 3 == 0);\n    int has_3 = contains_3(argv[i]);\n    if (div_3 && has_3) puts(\"dumb\");\n    else if (div_3) puts(\"idiot\");\n    else if (has_3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 2182, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport sys\nimport os\n\ndef main(argv):  \n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n# ---\n# This is a sample code to use arguments and outputs.\n# Edit and remove this code as you like.\n\n    inputs = []\n    for input in argv:\n        if os.path.isfile(input):\n            f = open(input)\n            lines = f.readlines()\n\n            my_lines = [x.replace('\\n', '') for x in lines]\n            inputs = inputs + my_lines\n        else:\n            inputs.append(input)\n\n    for input in inputs:\n        try:\n            input = int(input)\n            input_str = str(input)\n\n            if 0 <= input <= 1000:\n                if input % 3 == 0 and '3' in input_str:\n                    print('dumb')\n                elif input % 3 == 0:\n                    print('idiot')\n                elif '3' in input_str:\n                    print('stupid')\n                else:\n                    print('smart')\n            else:\n                print('invalid')\n        except:\n            print('invalid')\n\n\nif __name__ == '__main__':\n   main(sys.argv[1:])\n"}
{"id": 2183, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueensProblem {\n    static char[][] chessboard = new char[8][8];\n    static boolean[] col = new boolean[8];\n    static boolean[] diag1 = new boolean[15];\n    static boolean[] diag2 = new boolean[15];\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            chessboard[r][c] = 'Q';\n            col[c] = true;\n            diag1[r + c] = true;\n            diag2[r - c + 7] = true;\n        }\n        if (solve(0)) {\n            printChessboard();\n        }\n    }\n\n    private static boolean solve(int row) {\n        if (row == 8) return true;\n\n        for (int j = 0; j < 8; j++) {\n            if (!col[j] && !diag1[row + j] && !diag2[row - j + 7]) {\n                chessboard[row][j] = 'Q';\n                col[j] = true;\n                diag1[row + j] = true;\n                diag2[row - j + 7] = true;\n\n                if (solve(row + 1)) return true;\n\n                // Backtrack\n                chessboard[row][j] = '.';\n                col[j] = false;\n                diag1[row + j] = false;\n                diag2[row - j + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void printChessboard() {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (chessboard[i][j] == 0) {\n                    System.out.print('.');\n                } else {\n                    System.out.print(chessboard[i][j]);\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 2184, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n            string output = GenerateString(args[i]);\n            Console.WriteLine(output);\n        }\n    }\n\n    private static string GenerateString(string number)\n    {\n        int tempNumber;\n        if (int.TryParse(number, out tempNumber))\n        {\n            if ((tempNumber > 0 && tempNumber <= 1000) || tempNumber == 0)\n            {\n                bool isThreeDivisible = CheckThreeDivisible(tempNumber);\n                bool result = tempNumber.ToString().Contains(\"3\");\n                if (isThreeDivisible && result)\n                {\n                    return \"dumb\";\n                }\n                else if(isThreeDivisible)\n                {\n                    return \"idiot\";\n                }\n                else if (result)\n                {\n                    return \"stupid\";\n                }\n                else\n                {                   \n                    return \"smart\";\n                }\n            }\n            else\n            {\n                return \"invalid\";\n            }\n        }\n        else\n        {\n            return \"invalid\";\n        }\n\n    }\n\n    private static bool CheckThreeDivisible(int a)\n    {\n        return a % 3 == 0;\n    }\n\n}\n"}
{"id": 2185, "language": "Python3", "code": "def is_safe(board, row, col):\n    # Check column and diagonals\n    for i in range(8):\n        if board[i][col] == 'Q':\n            return False\n    for i in range(8):\n        for j in range(8):\n            if (i + j == row + col) or (i - j == row - col):\n                if board[i][j] == 'Q':\n                    return False\n    return True\n\ndef solve_n_queens(board, k, queens):\n    if k == 8:\n        return True\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == '.' and is_safe(board, i, j):\n                board[i][j] = 'Q'\n                if solve_n_queens(board, k + 1, queens):\n                    return True\n                board[i][j] = '.'  # backtrack\n    return False\n\ndef main():\n    import sys\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    queens = [tuple(map(int, line.split())) for line in input_data[1:k+1]]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in queens:\n        board[r][c] = 'Q'\n\n    if solve_n_queens(board, k, queens):\n        for row in board:\n            print(''.join(row))\n\nif __name__ == '__main__':\n    main()"}
{"id": 2186, "language": "Python3", "code": "import sys\nimport copy\n\nclass Board:\n    def __init__(self, size):\n        self.size = size\n        self.board = [[False] * size for i in range(size)]\n        self.queensPlaced = 0\n        self.queenLocations = set()\n        \n    def getAllowedSquares(self):\n        \n        allowedSquares = []\n        for i in range(self.size):\n            for k in range(self.size):\n                if self.board[i][k] == False:\n                    allowedSquares.append((i,k))\n        return allowedSquares\n    \n    def placeQueen(self, location):\n        x = location[0]\n        y = location[1]\n        \n        if x >= self.size or y >= self.size:\n            return None\n        \n        if self.board[x][y] == True:\n            return None\n        \n        self.queensPlaced += 1\n        self.board[x][y] = True\n        self.queenLocations.add(location)\n        \n        for i in range(self.size):\n            self.board[x][i] = True\n            self.board[i][y] = True\n        \n        for i in range(1, self.size):\n            if x + i < self.size and y + i < self.size:\n                self.board[i + x][y + i] = True\n            if x - i >= 0 and y - i >= 0:\n                self.board[x - i][y - i] = True\n                \n            if x + i < self.size and y - i >= 0:\n                self.board[x + i][y - i] = True\n            if x - i >= 0 and y + i < self.size:\n                self.board[x - i][y + i] = True\n                \n        return True\n    \n    def getStringRepresentation(self):\n        answerStringList = [list(\".\" * self.size) for i in range (self.size)]\n        for queenLocation in self.queenLocations:\n            x = queenLocation[0]\n            y = queenLocation[1]\n            answerStringList[x][y] = \"Q\"\n        return [\"\".join(x) for x in answerStringList]\n    \n    def __hash__(self):\n        return hash(frozenset(self.queenLocations))\n    \n    def __eq__(self, other):\n        return hash(self) == hash(other)\n\ndef main(argv):\n\n    existingQueenLocations = []\n\n    f = open(argv[0])\n\n    line = f.readline()\n    k = line[0]\n    line = f.readline()\n\n    while line:\n        line.replace('\\n','')\n        existingQueenLocations.append((int(line[0]), int(line[2])))\n        line = f.readline()\n    \n    board = Board(8)\n\n    for location in existingQueenLocations:\n      board.placeQueen(location)\n    \n    states = [board]\n    seenStates = set()\n    solution = 0\n\n    while(len(states) > 0):\n      currentState = states.pop()\n      seenStates.add(currentState)\n\n      if currentState.queensPlaced == 8:\n        solution = currentState\n        break\n      allowedMoves = currentState.getAllowedSquares()\n      for move in allowedMoves:\n        newBoard = copy.deepcopy(currentState)\n        if newBoard.placeQueen(move):\n          if newBoard not in seenStates:\n            states.append(newBoard) \n\n    for row in solution.getStringRepresentation():\n      print(row)\n    f.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2187, "language": "Java", "code": "package track;\n\nimport java.util.Arrays;\nimport java.util.Optional;\n\nclass AlgorithmLogic {\n    private Optional<Integer> parseAndValidate(String str) {\n        if (!str.matches(\"\\\\d+\")) {\n            return Optional.empty();\n        }\n        int val = Integer.parseInt(str);\n        if (val >= 0 && val <= 1000) {\n            return Optional.of(val);\n        }\n        return Optional.empty();\n    }\n\n    public String execute(String input) {\n        Optional<Integer> numberOpt = parseAndValidate(input);\n        \n        if (!numberOpt.isPresent()) {\n            return \"invalid\";\n        }\n        \n        int number = numberOpt.get();\n        boolean multipleOfThree = number % 3 == 0;\n        boolean containsThree = input.contains(\"3\");\n        \n        // \u5224\u5b9a\u30ed\u30b8\u30c3\u30af\n        if (multipleOfThree && containsThree) {\n            return \"dumb\";\n        } else if (multipleOfThree) {\n            return \"idiot\";\n        } else if (containsThree) {\n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n    }\n}\n\npublic class App {\n  public static void main(String[] args) {\n    AlgorithmLogic logic = new AlgorithmLogic();\n    for (String arg : args) {\n        String result = logic.execute(arg);\n        System.out.println(result);\n    }\n  }\n}"}
{"id": 2188, "language": "Java", "code": "package threeIdiots;\n\npublic class CommandApp {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                    continue;\n                }\n\n                boolean isDivisibleByThree = num % 3 == 0;\n                boolean containsThree = String.valueOf(num).contains(\"3\");\n\n                if (isDivisibleByThree && containsThree) {\n                    System.out.println(\"dumb\");\n                } else if (isDivisibleByThree) {\n                    System.out.println(\"idiot\");\n                } else if (containsThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2189, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n\tpublic static bool is3Availble(String input)\n\t{\n\t\tif (input.IndexOf('3') != -1) return true;\n\n\t\treturn false;\n\t}\n\tstatic public void Main(string[] args)\n\t{\n\t\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\t\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\t\t// ---\n\t\t// This is a sample code to use arguments and stdout.\n\t\t// Edit and remove this code as you like.\n\n\n\n\t\tfor (int i = 0; i < args.Length; i++)\n\t\t{\n\t\t\t// string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n\t\t\t// Console.WriteLine(output);\n\t\t\tstring input = args[i];\n\t\t\ttry {\n\t\t\t\tint number = Int32.Parse(input);\n\t\t\t\tbool isIncludes = is3Availble(input);\n\t\t\t\tbool isDevided = number % 3 == 0;\n\t\t\t\tif (isIncludes && isDevided)\n\t\t\t\t{\n\n\t\t\t\t\tConsole.WriteLine(\"dumb\");\n\t\t\t\t}\n\t\t\t\telse if(isDevided)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"idiot\");\n\t\t\t\t}else if (isIncludes)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"stupid\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"smart\");\n\t\t\t\t}\n\t\t\t} catch(Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"invalid\");\n\t\t\t}\n\n\t\t}\n\t}\n}\n"}
{"id": 2190, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#define rep(i,a,b) for(int (i)=(a);(i)<(b);(i)++)\n#define iter(a,c) for(auto (a)=(c).begin();(a)!=(c).end();++(a))\n\nusing namespace std;\n\nvoid dfs(vector<string>& board, vector<bool>& column, vector<bool>& row, vector<bool>& left, vector<bool>& right,int depth)\n//depth-first search, depth is the current row index.\n{\n  if (depth==8)//depth==8 means all 0-7 rows have correctly occupied, and there is exactly one solution, so output the answer.\n  {\n    iter(it,board)\n    {\n      cout<<(*it)<<endl;\n    }\n    return;\n  }\n  if (row[depth]==false)//if this row is not occupied\n  {  \n    rep(i,0,8)//search for all possible columns to place the queen\n    {\n        if (column[i]==false && left[i+depth]==false && right[7-i+depth]==false)//the queen is able to be placed\n        {\n          board[depth][i]='Q';//place the queen\n          column[i]=row[depth]=left[i+depth]=right[7-i+depth]=true;\n          dfs(board,column,row,left,right,depth+1);//go on to the next row\n          board[depth][i]='.';//searching finished, go back to the previous status\n          column[i]=row[depth]=left[i+depth]=right[7-i+depth]=false;\n        }\n    }\n  }\n  else//if this row is occupied, directly goes to the next row\n  {\n    dfs(board,column,row,left,right,depth+1);\n  }\n\n}\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  ifstream f;\n  f.open(argv[1]);//Open the target file\n  if (!f.is_open())\n  {\n    cout<<argv[1]<<\" file is not open!\"<<endl;\n    return -1;\n  }\n  vector<string> board(8,string(8,'.'));//board starting with all empty squares\n  vector<bool> column(8,false);//if the column is occupied\n  vector<bool> row(8,false);//if the row is occupied\n  vector<bool> left(15,false);//if the / diagonal is occupied\n  vector<bool> right(15,false);// if the \\ diagonal is occupied\n\n  int k;//read from file and let the queens occupy the squares\n  f>>k;\n  rep(i,0,k)\n  {\n    int r,c;\n    f>>r>>c;\n    board[r][c]='Q';\n    column[c]=row[r]=left[r+c]=right[7-c+r]=true;\n  }\n\n  dfs(board,column,row,left,right,0);//make a depth first search\n  \n  return 0;\n}\n"}
{"id": 2191, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you']) \n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)      \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2192, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nstring process(int num, const string &original) {\n    bool isDivByThree = (num % 3 == 0);\n    bool containsThree = original.find('3') != string::npos;\n\n    if (isDivByThree && containsThree) return \"dumb\";\n    if (isDivByThree) return \"idiot\";\n    if (containsThree) return \"stupid\";\n    return \"smart\";\n}\n\nbool isNumeric(const string &s) {\n    for (char c : s) {\n        if (!isdigit(c)) return false;\n    }\n    return !s.empty();\n}\n\nint main(int argc, char *argv[]) {\n    for (int j = 1; j < argc; j++) {\n        string current = argv[j];\n\n        if (!isNumeric(current)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n\n        int asNumber;\n        stringstream(current) >> asNumber;\n        if (asNumber >= 0 && asNumber <= 1000) {\n            cout << process(asNumber, current) << endl;\n        } else {\n            cout << \"invalid\" << endl;\n        }\n    }\n    return 0;\n}"}
{"id": 2193, "language": "Python3", "code": "import sys\n\ndef judge(value):\n    if not value.isdigit():\n        return \"invalid\"\n    num = int(value)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    by3 = num % 3 == 0\n    has3 = '3' in value\n    if by3 and has3:\n        return \"dumb\"\n    elif by3:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for a in argv:\n        print(judge(a))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2194, "language": "Python3", "code": "import sys\n\ndef categorise_input(s_arg):\n    if not s_arg.isdigit():\n        return \"invalid\"\n    \n    n_arg = int(s_arg)\n    \n    if not (0 <= n_arg <= 1000):\n        return \"invalid\"\n\n    is_multiple_of_3 = (n_arg % 3 == 0)\n    contains_digit_3_in_string = ('3' in s_arg)\n\n    if is_multiple_of_3 and contains_digit_3_in_string:\n        return \"dumb\"\n    elif is_multiple_of_3:\n        return \"idiot\"\n    elif contains_digit_3_in_string:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef go(arguments):\n    for a in arguments:\n        print(categorise_input(a))\n\nif __name__ == '__main__':\n    go(sys.argv[1:])"}
{"id": 2195, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class VerdictMaker {\n\n  private static String fetchOutcome(int data) {\n    if (data < 0 || data > 1000) {\n      return \"invalid\";\n    }\n\n    boolean modResult = (data % 3 == 0);\n    String dataAsString = String.valueOf(data);\n    boolean hasThreeChar = dataAsString.contains(\"3\");\n\n    if (modResult && hasThreeChar) {\n      return \"dumb\";\n    } else if (modResult) {\n      return \"idiot\";\n    } else if (hasThreeChar) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] programArgs) {\n    for (String currentArg : programArgs) {\n      Scanner argScan = new Scanner(currentArg);\n      if (argScan.hasNextInt()) {\n        System.out.println(fetchOutcome(argScan.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      argScan.close();\n    }\n  }\n}"}
{"id": 2196, "language": "Ruby", "code": "def main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  argv.each_index do |i|\n    is_character = false\n    if(argv[i] != '0' && argv[i].to_i == 0)\n     is_character = true\n     argv_value = argv[i].to_i\n    else\n      argv_value = argv[i] == '0'? 0 : argv[i].to_i\n    end\n    if(argv_value < 0 || argv_value > 1000 || is_character)\n      puts \"invalid\"\n    elsif (argv_value%3 == 0 && argv_value.to_s.split(\"\").index('3'))\n      puts \"dumb\"\n    elsif (argv_value.to_s.split(\"\").index('3'))\n      puts \"stupid\"\n    elsif (argv_value%3 == 0)\n      puts \"stupid\"\n    else \n      puts \"smart\"\n    end\n  end\nend\n\nmain(ARGV)\n"}
{"id": 2197, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    filename = argv[0]\n    with open(filename, \"r\") as f:\n        plays = json.load(f)\n    r_plays = [0, 1, 2]\n    y_plays = []\n    for p in plays:\n        r_plays.append(p[\"robot\"])\n        y_plays.append(p[\"you\"])\n    book = {}\n    for i in range(len(plays)):\n        idx = i + 3\n        features = (r_plays[idx-3], r_plays[idx-2], r_plays[idx-1], y_plays[i])\n        book.setdefault(features, []).append(r_plays[idx])\n    cur = (r_plays[-3], r_plays[-2], r_plays[-1], y_plays[-1])\n    print(len(book.get(cur, [])) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2198, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  int max_count = atoi(argv[1]);\n  if (max_count == 0) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  const char *pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  char buffer[20] = {0}; // \u4fdd\u5b58\u7528\u30d0\u30c3\u30d5\u30a1\n  int buf_len = 0;\n\n  srand((unsigned int)time(NULL));\n\n  for (int i = 0; i < max_count; i++) {\n    char c = (rand() % 2 == 0) ? '\u30c9' : '\u30ab';\n    printf(\"%c\\n\", c);\n\n    if (buf_len < (int)strlen(pattern)) {\n      buffer[buf_len++] = c;\n      buffer[buf_len] = 0;\n    } else {\n      // \u30d0\u30c3\u30d5\u30a1\u3092\u305a\u3089\u3057\u3066\u5165\u308c\u66ff\u3048\n      memmove(buffer, buffer + 1, buf_len - 1);\n      buffer[buf_len - 1] = c;\n      buffer[buf_len] = 0;\n    }\n\n    if (strcmp(buffer, pattern) == 0) {\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n      return 0;\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 2199, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      if(areAnyFullWidth(args[i])){\n        System.out.println(\"invalid\");\n        continue;\n      }\n      int number = 0;\n      try {\n         number = Integer.parseInt(args[i]);\n      } catch (Exception ex) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean isDivisible = number%3 == 0 ? true : false;\n      boolean isIncludes = args[i].indexOf(\"3\") > -1 ? true : false;\n\n      if(isDivisible && isIncludes) {\n        System.out.println(\"dumb\");\n      } else if(isDivisible) {\n        System.out.println(\"idiot\");\n      } else if(isIncludes) {\n        System.out.println(\"stupid\");\n      } else {\n        System.out.println(\"smart\");\n      }\n\t\t}\n\t}\n  public static boolean areAnyFullWidth(String str) {\n    for (char c : str.toCharArray())\n      if ((c & 0xff00) == 0xff00)\n        return true;\n    return false;\n  }\n}\n"}
{"id": 2200, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n\t//\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t//\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t//\tSystem.out.println(output);\n    \n      for(String str:args){\n        int count=0;\n        int num=Integer.parseInt(str);\n        if(num>=0 && num<=1000)\n        {\n          for(int i=0;i<str.length();i++){\n            char s=str.charAt(i);\n            if(s=='3')\n            count++;\n          }\n          if(count>0 && num%3==0){\n            System.out.println(\"dumb\");\n          }\n          else if(num%3==0){\n            System.out.println(\"idiot\");\n          }\n          else if(count>0){\n            System.out.println(\"stupid\");\n          }\n          else{\n            System.out.println(\"smart\");\n          }\n        }\n          else{\n            System.out.println(\"invalid\");\n          }\n          \n          }\n        }\n}\n\t\t\n"}
{"id": 2201, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++)\n  {\n      int number=0,t,flag1=0,flag2=0,flag=0;\n      char a[100];\n      number=atoi(argv[i]);\n      strcpy(a,argv[i]);\n      for(int j=0;a[j]!='\\0';j++)\n      {\n        t=a[j]-48;\n        if(t<0 || t>9)\n        {\n          flag=1;\n          printf(\"invalid\\n\");\n          break;\n        }\n      }\n      //printf(\"%d %d %s\",flag,number,argv[i]);\n      if(flag==0)\n      {\n        if(number>1000 || number <0)\n          printf(\"invalid\\n\");\n        else\n        {\n            t=number;\n            while(number)\n            {\n              if(number%10==3)\n              {\n                flag1=1;\n                break;\n              }\n              number/=10;\n            }\n            if(t%3==0)\n              flag2=1;\n            if(flag1==1 && flag2==1)\n              printf(\"dumb\\n\");\n            else if(flag1==1)\n              printf(\"stupid\\n\");\n            else if(flag2==1)\n              printf(\"idiot\\n\");\n            else \n              printf(\"smart\\n\");\n        }\n      }\n  }\n  return 0;\n}\n"}
{"id": 2202, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_SIZE 100000\n\n// \u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066JSON\u5f62\u5f0f\u306b\u3057\u3066\u51fa\u529b\nvoid count_chars(char *text, int len, const char *out_path) {\n    int counts[256] = {0};\n    for (int i = 0; i < len; i++) {\n        char c = text[i];\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n            counts[(unsigned char)c]++;\n        }\n    }\n\n    FILE *of = fopen(out_path, \"w\");\n    if (!of) return;\n    fprintf(of, \"{\\n\");\n    int first = 1;\n    for (int c = 0; c < 256; c++) {\n        if (counts[c] > 0 && ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ')) {\n            if (!first) fprintf(of, \",\\n\");\n            fprintf(of, \"  \\\"%c\\\": %d\", c, counts[c]);\n            first = 0;\n        }\n    }\n    fprintf(of, \"\\n}\\n\");\n    fclose(of);\n}\n\n// \u7a7a\u767d\u304c\u7f6e\u63db\u3055\u308c\u305f\u6587\u5b57\u3092\u63a8\u5b9a\nchar find_space_char(char *text, int len) {\n    int counts[256] = {0};\n    for (int i = 0; i < len; i++) {\n        char c = text[i];\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n            counts[(unsigned char)c]++;\n        }\n    }\n\n    char best_c = 0;\n    double best_diff = 1e9;\n\n    for (char c = 'a'; c <= 'z'; c++) {\n        if (counts[(unsigned char)c] == 0) continue;\n\n        int word_len = 0, word_cnt = 0, in_word = 0;\n        int total_len = 0;\n        for (int i = 0; i < len; i++) {\n            char cc = text[i];\n            if (cc == c) cc = ' ';\n            else if (cc == ' ') cc = c;\n\n            if (cc >= 'A' && cc <= 'Z') cc += 32;\n            if (cc >= 'a' && cc <= 'z') {\n                word_len++;\n                in_word = 1;\n            } else {\n                if (in_word) {\n                    word_cnt++;\n                    total_len += word_len;\n                    word_len = 0;\n                    in_word = 0;\n                }\n            }\n        }\n        if (in_word) {\n            word_cnt++;\n            total_len += word_len;\n        }\n        if (word_cnt == 0) continue;\n\n        double avg_len = (double)total_len / word_cnt;\n        double diff = avg_len > 4.5 ? avg_len - 4.5 : 4.5 - avg_len;\n\n        if (diff < best_diff) {\n            best_diff = diff;\n            best_c = c;\n        }\n    }\n    return best_c;\n}\n\n// \u5fa9\u53f7\u51e6\u7406\nvoid decrypt(char *text, int len, const char *out_path) {\n    // \u7a7a\u767d\u3068\u7f6e\u63db\u6587\u5b57\u306e\u7279\u5b9a\n    char sp = find_space_char(text, len);\n\n    // \u7f6e\u63db\u6587\u5b57\u3068\u7a7a\u767d\u3092\u5165\u308c\u66ff\u3048\n    for (int i = 0; i < len; i++) {\n        if (text[i] == sp) text[i] = ' ';\n        else if (text[i] == ' ') text[i] = sp;\n    }\n\n    // \u6700\u983b\u51fa\u6587\u5b57\u306e\u8a08\u6e2c\n    int freq[26] = {0};\n    for (int i = 0; i < len; i++) {\n        char c = text[i];\n        if (c >= 'A' && c <= 'Z') c += 32;\n        if (c >= 'a' && c <= 'z') freq[c - 'a']++;\n    }\n\n    int max_idx = 0, max_val = freq[0];\n    for (int i = 1; i < 26; i++) {\n        if (freq[i] > max_val) {\n            max_val = freq[i];\n            max_idx = i;\n        }\n    }\n\n    int shift = max_idx - ('e' - 'a');\n    if (shift < 0) shift += 26;\n\n    FILE *of = fopen(out_path, \"w\");\n    if (!of) return;\n\n    for (int i = 0; i < len; i++) {\n        char c = text[i];\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n            int base = (c >= 'a') ? 'a' : 'A';\n            char dec = (c - base - shift + 26) % 26 + base;\n            fputc(dec, of);\n        } else {\n            fputc(c, of);\n        }\n    }\n    fclose(of);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1;\n    char *cmd = argv[1];\n    char *inpath = argv[2];\n    char *outpath = argv[3];\n\n    FILE *fp = fopen(inpath, \"rb\");\n    if (!fp) return 1;\n    int len = fread(text, 1, MAX_SIZE, fp);\n    fclose(fp);\n    text[len] = 0;\n\n    if (strcmp(cmd, \"count\") == 0) {\n        count_chars(text, len, outpath);\n    } else if (strcmp(cmd, \"space\") == 0) {\n        char c = find_space_char(text, len);\n        FILE *of = fopen(outpath, \"w\");\n        if (!of) return 1;\n        fprintf(of, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", c);\n        fclose(of);\n    } else if (strcmp(cmd, \"decrypt\") == 0) {\n        decrypt(text, len, outpath);\n    } else {\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 2203, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t/*String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(\"outputtttttt \" + args[i]);*/\n      if(args[i].matches(\"-?\\\\d+(\\\\.\\\\d+)?\") && Integer.parseInt(args[i]) >= 0 \n        && Integer.parseInt(args[i]) <= 1000){\n          if(args[i].matches(\"-?\\\\d+(\\\\.\\\\d+)?\") && Integer.parseInt(args[i])%3==0 \n            && !String.valueOf(args[i]).contains(\"3\")){\n            System.out.println(\"idiot\");\n          } else if(args[i].matches(\"-?\\\\d+(\\\\.\\\\d+)?\") && Integer.parseInt(args[i])%3!=0 \n            && String.valueOf(args[i]).contains(\"3\")){\n            System.out.println(\"stupid\");\n          } else if(args[i].matches(\"-?\\\\d+(\\\\.\\\\d+)?\") && Integer.parseInt(args[i])%3==0 \n            && String.valueOf(args[i]).contains(\"3\")){\n            System.out.println(\"dumb\");\n          } else {\n            System.out.println(\"smart\");\n          }\n      } else {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2204, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tint num;\n    \n    for (int i = 0, l = args.length; i < l; i++) {\n        try {\n            // Parse the string argument into an integer value.\n            num = Integer.parseInt(args[i]);\n            \n            if(num >= 0 && num <=1000) {\n                if(num % 3 ==0 && args[i].contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                }\n                else if (num %3 == 0) {\n                    System.out.println(\"idiot\");\n                }\n                else if(args[i].contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                }else{\n                    System.out.println(\"smart\");\n                }\n                        \n            }\n        }\n        catch (NumberFormatException nfe) {\n            \n            System.out.println(\"invalid\");\n        }\n\t}\n\t}\n}\n"}
{"id": 2205, "language": "C", "code": "#include <stdio.h>\n\nint find(int num)\n{\n  int ans;\n  while(num>0)\n  {\n    ans=num%10;\n    if(ans==3)\n    {\n      return 1;\n    }\n    num=num/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  //int len=argc-1;\n  for (int i = 1;i<=argc-1;i++) \n  {\n    int num=atoi(argv[i]);\n    if(num!=0)\n    {\n    \n     if(num%3==0 && find(num))\n      {\n        printf(\"dumb\\n\");\n      }\n    \n      else if(num%3==0)\n      {\n        printf(\"idiot\\n\");\n      } \n      else if(find(num))\n      {\n        printf(\"stupid\\n\");\n      }\n      else\n      {\n        printf(\"smart\\n\");\n      }\n  }\n  else\n  {\n    printf(\"invalid\\n\");\n  }\n  }\n  return 0;\n}\n"}
{"id": 2206, "language": "Java", "code": "import java.util.Scanner;\n\npublic class QueensPlacer {\n  static int[] board = new int[8];\n  static boolean[] colTaken = new boolean[8];\n  static boolean[] diag1Taken = new boolean[15];\n  static boolean[] diag2Taken = new boolean[15];\n  static boolean finished = false;\n\n  static void backtrack(int r) {\n    if (r == 8) {\n      finished = true;\n      return;\n    }\n    if (board[r] != -1) {\n      int c = board[r];\n      if (!colTaken[c] && !diag1Taken[r + c] && !diag2Taken[r - c + 7]) {\n        colTaken[c] = true; diag1Taken[r + c] = true; diag2Taken[r - c + 7] = true;\n        backtrack(r + 1);\n        colTaken[c] = false; diag1Taken[r + c] = false; diag2Taken[r - c + 7] = false;\n      }\n      return;\n    }\n    for (int c = 0; c < 8; c++) {\n      if (colTaken[c] || diag1Taken[r + c] || diag2Taken[r - c + 7]) continue;\n      board[r] = c;\n      colTaken[c] = true; diag1Taken[r + c] = true; diag2Taken[r - c + 7] = true;\n      backtrack(r + 1);\n      if (finished) return;\n      colTaken[c] = false; diag1Taken[r + c] = false; diag2Taken[r - c + 7] = false;\n      board[r] = -1;\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int k = sc.nextInt();\n    for (int i = 0; i < 8; i++) board[i] = -1;\n    for (int i = 0; i < k; i++) {\n      int r = sc.nextInt();\n      int c = sc.nextInt();\n      board[r] = c;\n    }\n    backtrack(0);\n    for (int r = 0; r < 8; r++) {\n      for (int c = 0; c < 8; c++) {\n        System.out.print(board[r] == c ? 'Q' : '.');\n      }\n      System.out.println();\n    }\n  }\n}"}
{"id": 2207, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <unordered_map>\n#include <string>\n#include <json/json.h>\n\nvoid countCharacters(const std::string& filePath, const std::string& outputFile) {\n    std::ifstream file(filePath);\n    std::unordered_map<char, int> charCount;\n    char ch;\n\n    while (file.get(ch)) {\n        if (isalpha(ch) || isspace(ch)) {\n            charCount[ch]++;\n        }\n    }\n    \n    Json::Value jsonData;\n    for (const auto& pair : charCount) {\n        jsonData[std::string(1, pair.first)] = pair.second;\n    }\n\n    std::ofstream outFile(outputFile);\n    outFile << jsonData;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1; // \u5f15\u6570\u306e\u6570\u304c\u4e0d\u6b63\n\n    std::string command = argv[1];\n    std::string inputFile = argv[2];\n    std::string outputFile = argv[3];\n\n    if (command == \"count\") {\n        countCharacters(inputFile, outputFile);\n    }\n    // \u4ed6\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7701\u7565\n    return 0;\n}"}
{"id": 2208, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n#include <stdlib.h>\nbool containThree( const char *str ){\n  while ( *str ){\n    if ( *str == '3' ){\n      return true;\n    }\n    str++;\n  }\n  return false;\n}\n\nbool convertToInt( const char *str, int *number ){\n  int value = 0;\n  while ( *str){\n  if ( isdigit(*str) ){\n    value = value * 10 + (*str-'0');\n  } else {\n    return false;\n  }\n  str++;\n}\n *number = value;\n return true;\n}\nint main(int argc, char *argv[]) {\n  int value;\n  for ( int i = 1; i < argc ; i++ ){\n    if ( !convertToInt(argv[i], &value)){\n      cout << \"invalid\" << endl;\n      continue;\n    }\n    if (  value < 0 && value > 1000 ){\n      cout << \"invalid\" <<endl;\n      continue;\n    }\n    if ( value % 3 == 0 && containThree( argv[i]  ) ){\n      cout << \"dumb\" << endl;\n    } else if ( value % 3 == 0 ){\n      cout << \"idiot\" << endl;\n    } else if ( containThree( argv[i] ) ){\n      cout << \"stupid\" << endl;\n    } else {\n      cout << \"smart\" << endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 2209, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n  /**\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n   * \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n   *\n   * This is a sample code to use arguments and outputs.\n   * You can edit and even remove this code as you like.\n   */\n  argv.forEach((a, b) => \n  {\n     var value = argv[b];\n     if(value>=0 && value <=1000)\n     {\n       var div = false;\n\n       var inc = false;\n\n       if(value%3==0)\n       {\n        div = true;\n       }\n\n       var arr = value.toString().split('');\n      arr.forEach(num=>\n      {\n        if(num == '3')\n        {\n          inc = true;\n        }\n      });\n\n      if (div && inc) \n      {\n        console.log('dumb');\n      } \n      else if (div) \n      {\n        console.log('idiot');\n      } \n      else if (inc) \n      {\n        console.log('stupid');\n      } \n      else\n       {\n        console.log('smart');\n      }\n\n    } \n    else\n     {\n      console.log('invalid');\n    }\n     \n  }\n  );\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 2210, "language": "Python3", "code": "import sys\n\ndef idiot_algorithm(s):\n    if not s.isdigit():\n        return 'invalid'\n    value = int(s)\n    if not 0 <= value <= 1000:\n        return 'invalid'\n    a = value % 3 == 0\n    b = '3' in s\n    if a and b:\n        return 'dumb'\n    elif a:\n        return 'idiot'\n    elif b:\n        return 'stupid'\n    return 'smart'\n\ndef main(args):\n    for arg in args:\n        print(idiot_algorithm(arg))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2211, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    N = 8\n    board = [['.' for _ in range(N)] for _ in range(N)]\n\n    # which columns and diagonals are occupied\n    col_is_used = [False] * N\n    diag1_is_used = [False] * (2 * N - 1)\n    diag2_is_used = [False] * (2 * N - 1)\n\n    fixed_queen_positions = {}\n    \n    k = int(sys.stdin.readline())\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        fixed_queen_positions[r] = c\n        board[r][c] = 'Q'\n        col_is_used[c] = True\n        diag1_is_used[r + c] = True\n        diag2_is_used[r - c + N - 1] = True\n\n    def solve(row):\n        if row == N:\n            for i in range(N):\n                print(''.join(board[i]))\n            sys.exit()\n\n        if row in fixed_queen_positions:\n            solve(row + 1)\n            return\n\n        for col in range(N):\n            if not col_is_used[col] and not diag1_is_used[row+col] and not diag2_is_used[row-col+N-1]:\n                board[row][col] = 'Q'\n                col_is_used[col] = True\n                diag1_is_used[row+col] = True\n                diag2_is_used[row-col+N-1] = True\n\n                solve(row + 1)\n\n                # backtrack\n                board[row][col] = '.'\n                col_is_used[col] = False\n                diag1_is_used[row+col] = False\n                diag2_is_used[row-col+N-1] = False\n    \n    solve(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2212, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n\n// Helper function to check if a number contains the digit '3'\nint has_a_3(int n) {\n    if (n == 0) return 0; // 0 does not contain '3'\n    while (n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    char *parse_stopper;\n    long long_value = strtol(argv[i], &parse_stopper, 10);\n\n    // Check if conversion succeeded and no extra chars\n    if (*parse_stopper != '\\0' || parse_stopper == argv[i]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Convert to int and check range (0-1000)\n    int num_to_check = (int)long_value; \n\n    if (num_to_check < 0 || num_to_check > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Apply the core logic directly in main\n    int is_divisible_by_3 = (num_to_check % 3 == 0);\n    int includes_digit_3 = has_a_3(num_to_check);\n\n    if (is_divisible_by_3 && includes_digit_3) {\n        printf(\"dumb\\n\");\n    } else if (is_divisible_by_3) {\n        printf(\"idiot\\n\");\n    } else if (includes_digit_3) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 2213, "language": "Python3", "code": "import sys\n\ndef get_classification(s_input):\n    if not s_input.isdigit(): return \"invalid\"\n    \n    n_input = int(s_input)\n    \n    if not (0 <= n_input <= 1000): return \"invalid\"\n\n    check_div_by_3 = (n_input % 3 == 0)\n    check_contains_3 = ('3' in s_input)\n\n    if check_div_by_3 and check_contains_3:\n        return \"dumb\"\n    if check_div_by_3:\n        return \"idiot\"\n    if check_contains_3:\n        return \"stupid\"\n    return \"smart\"\n\ndef process_args(arg_list):\n    for arg_str in arg_list:\n        print(get_classification(arg_str))\n\nif __name__ == '__main__':\n    process_args(sys.argv[1:])"}
{"id": 2214, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = int(sys.stdin.readline())\n    given = []\n    for _ in range(n):\n        r, c = map(int, sys.stdin.readline().split())\n        given.append((r, c))\n    filled = [['.'] * 8 for _ in range(8)]\n    rows = set()\n    cols = set()\n    diagp = set()\n    diagn = set()\n    for r, c in given:\n        filled[r][c] = 'Q'\n        rows.add(r)\n        cols.add(c)\n        diagp.add(r+c)\n        diagn.add(r-c)\n\n    def search(r):\n        if r == 8:\n            return True\n        if r in rows:\n            return search(r+1)\n        for c in range(8):\n            if c in cols or (r+c) in diagp or (r-c) in diagn:\n                continue\n            filled[r][c] = 'Q'\n            cols.add(c)\n            diagp.add(r+c)\n            diagn.add(r-c)\n            if search(r+1): return True\n            filled[r][c] = '.'\n            cols.remove(c)\n            diagp.remove(r+c)\n            diagn.remove(r-c)\n        return False\n\n    search(0)\n    for row in filled:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2215, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid process_argument(const char *arg) {\n    char *end;\n    long num = strtol(arg, &end, 10);\n\n    if (*end != '\\0' || arg == end || num < 0 || num > 1000) {\n        puts(\"invalid\");\n        return;\n    }\n\n    int is_divisible = (num % 3 == 0);\n\n    char num_str[5];\n    sprintf(num_str, \"%ld\", num);\n    int has_digit_3 = (strchr(num_str, '3') != NULL);\n\n    if (is_divisible && has_digit_3) {\n        puts(\"dumb\");\n    } else if (is_divisible) {\n        puts(\"idiot\");\n    } else if (has_digit_3) {\n        puts(\"stupid\");\n    } else {\n        puts(\"smart\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        process_argument(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2216, "language": "C", "code": "#include <stdio.h>\n\nint threeidiot(int number)\n{\n  int split;\n  while (number){\n    split = number % 10;\n    number = number/10;\n    if(split==3)\n    return 1;\n  }\n  return 0;\n}\nint main(int argc, char ** argv)\n{\n  int value,threeidiot_do=0,threeidiot_div=0;\n  value = atoi(argv[1]);\n  threeidiot_div = value % 3 == 0?1:0;\n  threeidiot_do=threeidiot(value);\n  if(threeidiot_do==1 && threeidiot_div==1) \n  printf(\"dumb\");\n  else if(threeidiot_do==1)\n  printf(\"stupid\");\n  else if(threeidiot_div==1)\n  printf(\"idiot\");\n  else if(value>=0 && value<=1000)\n  printf(\"smart\");\n  else \n  printf(\"invalid\");\n}\n\n"}
{"id": 2217, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\nint idiot(int n)\n{\n  int rem,flag=0;\n  while(n>0)\n  {\n    \n    rem=n%10;\n    if(rem==3)\n    {\n    flag=1;\n    break;\n    }\n    n=n/10;\n  }\n  if(flag==1)\n  return 1;\n  else \n  return 0;  \n\n}\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) \n  {\n    if(atoi(argv[i])==0)\n    {\n      printf(\"invalid\\n\");\n    }\n    else \n    {\n       if((atoi(argv[i])%3==0) && idiot(atoi(argv[i])))\n       {\n         printf(\"dumb\\n\");\n       }\n       else if(atoi(argv[i])%3==0)\n       {\n         printf(\"idiot\\n\");\n       }\n       else if(idiot(atoi(argv[i])))\n       {\n         printf(\"stupid\\n\");\n       }\n       else\n       {\n         printf(\"smart\\n\");\n       }\n    }\n  }\n    \n  \n  return 0;\n}\n"}
{"id": 2218, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n      for (int i = 0, l = args.length; i < l; i++){\n        try{\n          int number=Integer.parseInt(args[i]);\n          if(number>=0&&number<=1000){\n            if(number%3==0){\n              if(number%10==3){\n                System.out.println(\"dumb\");\n              }else if(number%10!=3){\n                System.out.println(\"idiot\");\n              }\n            }else{\n              if(number%10==3){\n                System.out.println(\"stupid\");\n              }else{\n                System.out.println(\"smart\");\n              }\n            }\n          }else{\n            System.out.println(\"invalid\");\n          }\n        }catch(Exception e){\n          System.out.println(\"invalid\");\n        }\n      }\n\t}\n}\n"}
{"id": 2219, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  #for i, v in enumerate(argv):\n    #print(\"argv[{0}]: {1}\".format(i, v))\n  for i in range(0,len(argv)):\n    if(int(argv[i])>=0 and int(argv[i])<=1000):\n      if(int(argv[i])%3==0 and '3' in argv[i]):\n        print(\"dumb\")\n      elif(int(argv[i])%3==0):\n        print(\"idiot\")\n      elif('3' in argv[i]):\n        print(\"stupid\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2220, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <list>\n#include <string>\n#include <math.h>\n#include <set>\n#include <fstream>\nusing namespace std;\nint N;\n\nvoid init(vector<vector<int> >& board)\n{\n\t\n\tboard.resize(N);\n\n\tfor(int i=0; i<N; i++)\n\t{\n\t\tboard[i].resize(N);\n\t\tfor(int j=0; j<N; j++)\n\t\t{\n\t\t\tboard[i][j]=0;\n\t\t}\n\t}\n}\n//\u30c1\u30a7\u30b9\u76e4\u306e\u8868\u793a\nvoid print(vector<vector<int> > board)\n{\n\tfor(int i=0; i<N; i++)\n\t{\n\t\tfor(int j=0; j<N; j++)\n\t\t{\n\t\t\tif(board[i][j]==2)\n\t\t\t{\n\t\t\t\tcout<<\"Q\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout<<\".\";\n\t\t\t}\n\t\t}\n\t\tcout<<endl;\n\t}\n}\n//\u6307\u5b9a\u3055\u308c\u305f\u30de\u30b9\u306b\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u304d\u30c1\u30a7\u30b9\u76e4\u3092\u66f4\u65b0\u3057\u307e\u3059\nvector<vector<int> > putq(vector<vector<int> > board,int x,int y)\n{\n\t//0=\u30d5\u30ea\u30fc\u30de\u30b9,1=\u30af\u30a4\u30fc\u30f3\u304c\u52b9\u3044\u3066\u3044\u308b\u30de\u30b9,2=\u30af\u30a4\u30fc\u30f3\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u30de\u30b9\n\tfor(int i=0; i<N; i++)\n\t{\n\t\tboard[i][y]=1;\n\t\tboard[x][i]=1;\n\t}\n\t//\u659c\u3081\n\tif (x > y) \n\t{\n        for (int k = 0; k < N-(x-y); k++) \n        {\n            board[k+(x-y)][k] = 1;\n        }\n    }\n    else \n    {\n        for (int k = 0; k < N-(y-x); k++) \n        {\n            board[k][k+(y-x)] = 1;\n        }\n    }\n\n    if (x+y < N) \n    {\n        for (int k = 0; k <= x+y; k++) {\n            board[x+y-k][k] = 1;\n        }\n    }\n    else\n    {\n        for (int k = x+y-N+1; k < N; k++)\n        {\n            board[x+y-k][k] = 1;\n        }\n    }\n    board[x][y]=2;\n    return board;\n}\n\n//\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3067\u8abf\u3079\u3066\u3044\u304f\nbool search(vector<vector<int> > board, int count)\n{\n\tif(count == N)\n\t{\n\t\tprint(board);\n\t\treturn true;\n\t}\n\n\tfor(int i=0; i<N; i++)\n\t{\n\t\tfor(int j=0; j<N; j++)\n\t\t{\n\t\t\tif(board[i][j]==0)\n\t\t\t{\n\t\t\t\tvector<vector<int> > tmp = putq(board,i,j);\n\t\t\t\tbool s = search(tmp,count+1);\n\t\t\t\tif(s)\n\t\t\t\t{\n\t\t\t\t\t//\u89e3\u306f\u305f\u3060\u4e00\u3064\u3068\u3044\u3046\u524d\u63d0\u306b\u57fa\u3065\u304d\u89e3\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u5373\u5ea7\u306b\u8fd4\u3059\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//\u4e07\u304c\u4e00\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306ffalse\u3092\u8fd4\u3059\n\treturn false;\n}\nint main(int argc, char *argv[])\n{\n\t//\u30c1\u30a7\u30b9\u76e4\u306e\u5927\u304d\u3055\u306f8\u3092\u60f3\u5b9a\n\tN = 8;\n \tifstream ifs(argv[1]);\n \tvector<vector<int> > board;\n \tinit(board);\n\tint count = 0;\n\tifs>>count;\n\n\tfor(int i=0; i<count; i++)\n\t{\n\t\tint r,c;\n\t\tifs>>r>>c;\n\t\tboard = putq(board,r,c);\n\t}\n\t\t\n\tsearch(board,count);\n\n\treturn 0;\n}"}
{"id": 2221, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n// KMP\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u305f\u3081\u306eLPS\u914d\u5217\u3092\u8a08\u7b97\u3059\u308b\nvoid compute_lps(const int* pattern, int m, int* lps) {\n    int length = 0;\n    lps[0] = 0;\n    int i = 1;\n    while (i < m) {\n        if (pattern[i] == pattern[length]) {\n            length++;\n            lps[i] = length;\n            i++;\n        } else {\n            if (length != 0) {\n                length = lps[length - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n\n    int num_beats = atoi(argv[1]);\n    srand(time(NULL));\n\n    const char* sounds[] = {\"\u30c9\", \"\u30ab\"};\n    const int pattern[] = {0, 1, 0, 0, 1, 0, 1, 0, 1};\n    const int M = 9;\n\n    int lps[M];\n    compute_lps(pattern, M, lps);\n\n    int matched_len = 0;\n    for (int i = 0; i < num_beats; i++) {\n        int beat = rand() % 2;\n        printf(\"%s\\n\", sounds[beat]);\n\n        while (matched_len > 0 && beat != pattern[matched_len]) {\n            matched_len = lps[matched_len - 1];\n        }\n\n        if (beat == pattern[matched_len]) {\n            matched_len++;\n        }\n\n        if (matched_len == M) {\n            printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n            return 0;\n        }\n    }\n\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n}"}
{"id": 2222, "language": "Java", "code": "package track;\n\npublic class App {\n\n    private static String getResult(String arg) {\n        long num;\n        // This is a simple validation for numeric string.\n        if (!arg.matches(\"^[0-9]+$\")) {\n            return \"invalid\";\n        }\n        \n        num = Long.parseLong(arg);\n        \n        if (num < 0 || num > 1000) {\n            return \"invalid\";\n        }\n        \n        int n = (int)num;\n\n        boolean isMultiple = (n % 3 == 0);\n        boolean hasThree = arg.contains(\"3\");\n\n        if (isMultiple && hasThree) {\n            return \"dumb\";\n        }\n        if (isMultiple) {\n            return \"idiot\";\n        }\n        if (hasThree) {\n            return \"stupid\";\n        }\n        return \"smart\";\n    }\n\n    public static void main(String[] args) {\n        for (int i = 0; i < args.length; i++) {\n            System.out.println(getResult(args[i]));\n        }\n    }\n}"}
{"id": 2223, "language": "PHP", "code": "<?php namespace Track;\n\nfunction analyze($num) {\n    if (!is_numeric($num) || (int)$num != $num || $num < 0 || $num > 1000) {\n        return \"invalid\"; // \u534a\u89d2\u6574\u6570\u3067\u306f\u306a\u3044\u5834\u5408\n    }\n\n    $num = (int)$num;\n    $hasThree = strpos(\"$num\", \"3\") !== false;\n    $isDivisibleByThree = ($num % 3 === 0);\n\n    if ($isDivisibleByThree && $hasThree) {\n        return \"dumb\";\n    }\n    if ($isDivisibleByThree) {\n        return \"idiot\";\n    }\n    if ($hasThree) {\n        return \"stupid\";\n    }\n    return \"smart\";\n}\n\nfunction main($argc, $argv) {\n    foreach ($argv as $input) {\n        echo analyze($input) . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2224, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\n    num = int(argv[0])\n\n    conv_table = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"), (100, \"C\"),\n        (90, \"XC\"), (50, \"L\"), (40, \"XL\"), (10, \"X\"), (9, \"IX\"),\n        (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n\n    result = []\n    for value, roman_char in conv_table:\n        count, num = divmod(num, value)\n        result.append(roman_char * count)\n        if num == 0:\n            break\n    \n    print(\"\".join(result))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2225, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int a)\n{\n\tif(a % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}\n\nbool stupid(int a)\n{\n\tint t = a,t1;\n\twhile(t!=0)\n\t{\n\tt1 = t%10;\n\t\t\n\t\tif(t1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tt/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int a)\n{\n\nif(idiot(a) && stupid(a))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n\n}\n\nbool smart(int a)\n{\n\tif(!idiot(a) && !stupid(a))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nbool invalid(int a)\n{\t\n\t\n\tif(!stupid(a) && !idiot(a) && !dumb(a) && !smart(a))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\n\nint main(int argc,char* argv[])\n{\n\nint len = argc-1,i = 1;\n\nfor(i = 1;i<=len;i++)\n{\n\nint num = atoi(argv[i]);\n\nif(num!=0)\n{\n\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}else{\n\nprintf(\"invalid\\n\");\n\n}\n}\n\n}"}
{"id": 2226, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nconst rand = [1, 2];\n\nconst dic = {\n  1: '\u30c9',\n  2: '\u30ab',\n  3: '\u30c9\u30f3\u266a\u30c9\u30f3\u266a'\n};\n\nconst patterns = {\n  1211212: 3\n};\n\nfunction main(argv) {\n  const least = ~~argv[0];\n\n  let pattern = [];\n  for (let i = 0; i < least; i++) {\n    const out = randomOut();\n    console.log(dic[out]);\n    pattern = enqueue(pattern, out);\n    const patternOut = checkPattern(pattern);\n    if (patternOut) {\n      console.log(dic[patternOut]);\n      return;\n    }\n  }\n  console.log('\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc');\n}\n\nfunction randomOut() {\n  return rand[Math.floor(Math.random() * 10 % rand.length)];\n}\n\nfunction checkPattern(pattern) {\n  const key = pattern.reduce(function(result, e) {\n    return result + e;\n  }, '');\n  return patterns[key] || null;\n}\n\nfunction enqueue(queue, num) {\n  const newQueue = queue.length < 7 ? queue.slice() : queue.slice(1, 7);\n  newQueue.push(num);\n  return newQueue;\n}\n\nmain(process.argv.slice(2));\n\n"}
{"id": 2227, "language": "Python3", "code": "import sys, random\n\nsound = []\nexit_code = [0,1,0,0,1,0,1]\nbeat = {\n  '0': '\u30c9',\n  '1': '\u30ab' \n}\n\ndef exec(n):\n  for i in range(n):\n    drum = random.randint(0, 1)\n    sound.append(drum)\n    print(beat[str(drum)])\n    if exit_code in sound:\n      print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n      return \n  print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n  try:\n    if len(sys.argv[1:]) > 1:\n      raise ValueError()\n    n = int(sys.argv[1])\n    exec(n)\n  except:\n    import traceback\n    traceback.print_exc() \n"}
{"id": 2228, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nconst int SIZE = 8;\n\nbool col[SIZE], diag1[2*SIZE], diag2[2*SIZE];\n\nbool dfs(vector<string>& bd, int row) {\n    if (row == SIZE) return true;\n    if (count(bd[row].begin(), bd[row].end(), 'Q') == 1) {\n        return dfs(bd, row+1);\n    }\n    for (int c = 0; c < SIZE; ++c) {\n        if (col[c] || diag1[row+c] || diag2[row-c+SIZE]) continue;\n        bd[row][c] = 'Q';\n        col[c] = diag1[row+c] = diag2[row-c+SIZE] = true;\n        if (dfs(bd, row+1)) return true;\n        bd[row][c] = '.';\n        col[c] = diag1[row+c] = diag2[row-c+SIZE] = false;\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<string> board(SIZE, string(SIZE, '.'));\n    for (int i = 0; i < k; ++i) {\n        int r, c; cin >> r >> c;\n        board[r][c] = 'Q';\n        col[c] = diag1[r+c] = diag2[r-c+SIZE] = true;\n    }\n    dfs(board, 0);\n    for (auto& row : board) cout << row << endl;\n    return 0;\n}"}
{"id": 2229, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Newtonsoft.Json;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // Read the input JSON file path from CLI arguments\n        string inputFile = args[0];\n\n        // Parse the game records from the JSON file\n        List<GameRecord> gameRecords = JsonConvert.DeserializeObject<List<GameRecord>>(File.ReadAllText(inputFile));\n\n        // Default robot hands history\n        List<int> robotHandsHistory = new List<int> { 0, 1, 2 };\n\n        // Maintain a dictionary to store the robot's behavior (parameter set -> next hand)\n        Dictionary<string, int> behaviorMap = new Dictionary<string, int>();\n\n        // Iterate through the game records and update behavior map\n        for (int i = 0; i < gameRecords.Count; i++)\n        {\n            // Get the last 3 robot hands & the opponent's current hand\n            List<int> parameters = GetParameters(robotHandsHistory, gameRecords[i].You);\n\n            // Create a unique key from the parameters\n            string key = string.Join(\",\", parameters);\n\n            // Store the robot's hand for this parameter set\n            if (!behaviorMap.ContainsKey(key))\n            {\n                behaviorMap[key] = 0; // Initialize cycle as rock\n            }\n            behaviorMap[key] = (gameRecords[i].Robot + 1) % 3; // Update its next hand in the cycle\n\n            // Update the robot's hand history\n            robotHandsHistory.Add(gameRecords[i].Robot);\n            if (robotHandsHistory.Count > 3)\n            {\n                robotHandsHistory.RemoveAt(0);\n            }\n        }\n\n        // Get the next hand the robot will play given the current parameters\n        List<int> currentParameters = GetParameters(robotHandsHistory, gameRecords[^1].You);\n        string currentKey = string.Join(\",\", currentParameters);\n\n        int robotNextHand = behaviorMap.ContainsKey(currentKey) \n            ? behaviorMap[currentKey] \n            : 0; // Default to rock if the pattern is unseen\n\n        // Output the winning hand to stdout\n        Console.WriteLine((robotNextHand + 1) % 3); // Winning hand: (robot hand + 1) % 3\n    }\n\n    // Method to get parameters (last 3 robot hands + opponent's last hand)\n    static List<int> GetParameters(List<int> robotHands, int opponentHand)\n    {\n        List<int> parameters = new List<int>(robotHands);\n        parameters.Add(opponentHand);\n        return parameters;\n    }\n\n    // Class to represent each game record\n    public class GameRecord\n    {\n        [JsonProperty(\"robot\")]\n        public int Robot { get; set; }\n\n        [JsonProperty(\"you\")]\n        public int You { get; set; }\n    }\n}"}
{"id": 2230, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n      for (int i = 0, l = args.length; i < l; i++) {\n          try{\n            Integer.parseInt(args[i]);\n            if(args[i].contains(\" \"))\n              System.out.println(\"invalid\");\n          }catch(Exception e){\n            System.out.println(\"invalid\");\n          }\n          char[] arr = args[i].toCharArray();\n        boolean flag = false;\n        for(int j = 0; j < args[i].length(); j++){\n           if(Character.getNumericValue(arr[j]) == 3){\n             flag = true;\n           }\n         }\n         int num2 = Integer.parseInt(args[i]);\n         if(num2 % 3 != 0 && flag){\n            System.out.println(\"stupid\");\n          }\n          if(num2 % 3 == 0 && !flag){\n            System.out.println(\"idiot\");\n          }\n          if(num2 % 3 == 0 && flag){\n            System.out.println(\"dumb\");\n          }\n          if(num2 % 3 != 0 && !flag){\n            System.out.println(\"smart\");\n          }\n            \n          }\n        }\n\t}\n\n"}
{"id": 2231, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{int a,b,c,k1,k2,k3,y,count=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) { \n    y=atoi(argv[i]);\n    \n    if(y>=0&&y<=1000)\n    {\n      a=y%10;\n      k1=y/10;\n      b=k1%10;\n      k2=k1/10;\n      c=k2%10;\n      k3=k2/10;\n      if(a==3||b==3||c==3)\n      {\n        count=1;\n\n      }\n      if(y%3==0&&count==1)\n\n        {\n             \n          printf(\"dumb\");\n          goto xyz;\n        }\n             \n      if(y%3==0)\n      {\n        printf(\"idiot\");\n        goto xyz;\n              }\n      \n      if(count==1)\n      printf(\"stupid\");goto xyz;\n    \n        if(count==0&&y%3!=0)\n        printf(\"smart\");goto xyz;\n          }\n    else\n      printf (\"invalid\");\n      xyz;\n      printf(\"\\n\");\n  }\n  return 0;\n}\n"}
{"id": 2232, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static final int N = 8;\n    static char[][] board = new char[N][N];\n    static boolean[] cols = new boolean[N];\n    static boolean[] diag1 = new boolean[2 * N - 1];\n    static boolean[] diag2 = new boolean[2 * N - 1];\n\n    static ArrayList<int[]> initialQueens = new ArrayList<>();\n\n    static boolean solve(int row) {\n        if (row == N) return true;\n        // Skip pre-placed queen rows\n        for (int[] q : initialQueens) if (q[0] == row) return solve(row + 1);\n\n        for (int col = 0; col < N; col++) {\n            if (cols[col] || diag1[row - col + N - 1] || diag2[row + col]) continue;\n            board[row][col] = 'Q';\n            cols[col] = diag1[row - col + N - 1] = diag2[row + col] = true;\n            if (solve(row + 1)) return true;\n            board[row][col] = '.';\n            cols[col] = diag1[row - col + N - 1] = diag2[row + col] = false;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        for (char[] row : board) Arrays.fill(row, '.');\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; ++i) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            board[r][c] = 'Q';\n            cols[c] = true;\n            diag1[r - c + N - 1] = true;\n            diag2[r + c] = true;\n            initialQueens.add(new int[]{r, c});\n        }\n        solve(0);\n\n        for (char[] row : board) System.out.println(new String(row));\n    }\n}"}
{"id": 2233, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    if ($value <= 1000 && preg_match(\"/^[0-9]+$/\", $value)){\n      if($value % 3 == 0){\n        if(preg_match(\"/3/\",$value)) print(\"dumb\\n\");\n        else print(\"idiot\\n\");\n      }else if(preg_match(\"/3/\",$value)) print(\"stupid\\n\");\n      else print(\"smart\\n\");\n    }else print(\"invalid\\n\");\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 2234, "language": "Java", "code": "package track;\n\n\nimport java.io.*;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\npublic class App {\n    public static void main(String[] args) {\n\n        String commad=args[0];\n        String inputFile = args[1];\n        String outputFile =  args[2];\n        if(commad.equalsIgnoreCase(\"count\"))\n            new App().count(inputFile,outputFile);\n        else if(commad.equalsIgnoreCase(\"space\"))\n            new App().space(inputFile,outputFile);\n\n//        new App().count(\"src/test/in/test.txt\",\"src/test/in/out.json\");\n//        new App().space(\"src/test/in/test.txt\",\"src/test/in/out.json\");\n\n    }\n\n    public void count(String inputFile, String outputFile){\n        try {\n            File file = new File(inputFile);\n            FileReader filereader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(filereader);\n\n            String data;\n            Map<Character,Integer> counter=new HashMap<>();\n\n            counter.put(' ',0);\n            for(int i=65;i<91;i++)\n                counter.put((char)i,0);\n            for(int i=97;i<123;i++)\n                counter.put((char)i,0);\n\n            while ((data = bufferedReader.readLine()) != null) {\n                for(int i=0;i<data.length();i++){\n                    char t= data.charAt(i);\n                    if(t==32 || (t>64 && t< 91) || (t>96 && t<123)) {\n                        counter.put(t, (counter.get(t) + 1));\n                    }\n                }\n            }\n            filereader.close();\n\n            BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n            writer.write(\"{\\n\");\n            Iterator<Map.Entry<Character, Integer>> entryIt = counter.entrySet().iterator();\n            while(entryIt.hasNext()) {\n                Map.Entry<Character, Integer> entry = entryIt.next();\n                writer.write(\"\\\"\"+entry.getKey()+\"\\\"\"+\":\"+entry.getValue());\n                if(entryIt.hasNext())\n                    writer.write(\",\\n\");\n            }\n            writer.write(\"\\n}\");\n            writer.close();\n\n            \n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public void space(String inputFile, String outputFile) {\n        try {\n            File file = new File(inputFile);\n            FileReader filereader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(filereader);\n\n            String data;\n            Map<Character,Integer> counter=new HashMap<>();\n\n            for(int i=97;i<123;i++)\n                counter.put((char)i,0);\n\n            while ((data = bufferedReader.readLine()) != null) {\n                for(int i=0;i<data.length();i++){\n                    char t= data.charAt(i);\n                    if(t==32 || (t>64 && t< 91) || (t>96 && t<123)) {\n                        continue;\n                    }else if(++i<data.length()){\n                        char theNext=data.charAt(i);\n                        if((theNext>96 && theNext<123)) {\n                            counter.put(theNext, (counter.get(theNext) + 1));\n                        }\n                    }\n                }\n            }\n            filereader.close();\n\n            Iterator<Map.Entry<Character, Integer>> entryIt = counter.entrySet().iterator();\n            char maxChar=' ';\n            int maxoc=0;\n            while(entryIt.hasNext()) {\n                Map.Entry<Character, Integer> entry = entryIt.next();\n                if(entry.getValue()>maxoc) {\n                    maxoc=entry.getValue();\n                    maxChar=entry.getKey();\n                }\n            }\n\n\n            BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n            writer.write(\"{\");\n            writer.write(\"\\\"char\\\": \\\"\"+maxChar+\"\\\"\");\n\n            writer.write(\"}\");\n            writer.close();\n\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public void decrypt(){\n\n    }\n//\n//    public readFromFile(String fileName) {\n//        try {\n//            File file = new File(fileName);\n//            FileReader filereader = new FileReader(file);\n//            BufferedReader bufferedReader = new BufferedReader(filereader);\n//\n//            String data;\n//            while ((data = bufferedReader.readLine()) != null) {\n//                System.out.println(data);\n//            }\n//\n//            filereader.close();\n//        } catch (IOException e) {\n//            e.printStackTrace();\n//        }\n//    }\n\n}\n"}
{"id": 2235, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nvoid check(char str[]){\n  //printf(\"%s\\n\",str);\n  if(str[0]==' ')\n    return;\n  \n  int n=0,flag=0;\n  for(int i=0;i<strlen(str);i++){\n    if(str[i]<'0' || str[i]>'9'){\n      printf(\"invalid\\n\");\n      return;\n    }\n    if(str[i]=='3')\n      flag = 1;\n    n=10*n+(str[i]-'0');\n  }\n  //printf(\"%d\\n\",n);\nif(n>1000){\n  printf(\"invalid\\n\");\n      return;\n}\n  if(n%3==0 && flag){\n    printf(\"dumb\\n\");\n  }\n  else if(n%3==0){\n    printf(\"idiot\\n\");\n  }\n  else if(flag){\n    printf(\"stupid\\n\");\n  }\n  else\n    printf(\"smart\\n\");\n  \n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i <argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    check(argv[i]);\n  }\n  return 0;\n}\n"}
{"id": 2236, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class DecisionMaker {\n\n  private static String getResult(int testNum) {\n    if (testNum < 0 || testNum > 1000) {\n      return \"invalid\";\n    }\n\n    boolean divByThree = (testNum % 3 == 0);\n    boolean containsDigitThree = String.valueOf(testNum).contains(\"3\");\n\n    if (divByThree && containsDigitThree) {\n      return \"dumb\";\n    } else if (divByThree) {\n      return \"idiot\";\n    } else if (containsDigitThree) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] argsFromCli) {\n    for (String argItem : argsFromCli) {\n      Scanner itemScan = new Scanner(argItem);\n      if (itemScan.hasNextInt()) {\n        System.out.println(getResult(itemScan.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      itemScan.close();\n    }\n  }\n}"}
{"id": 2237, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n\n  int times = atoi(argv[1]);\n  string answer = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  int ans_leng = answer.length();\n  string trial = \"\";\n\n  for (int i = 0; i < times; i++) {\n    string ch;\n    if (rand() % 2)\n      ch = \"\u30c9\";\n    else\n      ch = \"\u30ab\";    \n    cout << ch.c_str() << \"\\n\";\n    trial += ch;\n    if (trial.length() >= ans_leng) {\n      if (trial.substr(trial.length() - ans_leng, ans_leng) == answer) {\n        cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\";\n        return 0;\n      }\n      trial.erase(0, 1);\n    }\n  }\n\n\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\";\n  return 0;\n}\n"}
{"id": 2238, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static boolean includes3(int a)\n{\n  while(a!=0)\n  {\n    if(a%10==3)\n    return true;\n    else\n    return includes3(a/10);\n  }\n  return false;\n}\npublic static void main(String[] args){\n  int size=args.length;\n  int i=0;\n  while(i<size)\n  {\n    String data=args[i++];\n    Integer num=null;\n    try\n    {\n      num=Integer.parseInt(data);\n    }\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n      continue;\n    }\n    if(num<0 || num>1000)\n    {\n      System.out.println(\"invalid\");\n      continue;\n    }  \n    boolean inc3=includes3(num);\n    if(inc3 && num%3==0)\n    System.out.println(\"dumb\");\n    else if(inc3)\n    System.out.println(\"stupid\");\n    else if(num%3==0)\n    System.out.println(\"idiot\");\n    else\n    System.out.println(\"smart\");\n    }  \n    }\n  }\n  \n\n  \n"}
{"id": 2239, "language": "Python3", "code": "import numpy as np\n\n\ndef is_q_set(a, b, board):\n    return not (np.any(board[:, b] == 1) \\\n                or np.any(board[a] == 1) \\\n                or np.any(np.diag(board, k=b - a) == 1) \\\n                or np.any(np.diag(np.fliplr(board), k=7 - b - a) == 1))\n\n\ndef re_board(board, n):\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if is_q_set(i, j, board):\n                nx_board = board.copy()\n                nx_board[i][j] = 1\n                if n == 7:\n                    return nx_board\n                result = re_board(nx_board, n + 1)\n                if result is not None:\n                    return result\n\n\ndef main():\n    board = np.zeros((8, 8))\n\n    k = int(input())\n\n    for i in range(0, k):\n        # data.append(input())\n        a, b = map(int, input().split(\" \"))\n        board[a][b] = 1\n\n    if k == 8:\n      result = board\n    else:\n      result = re_board(board, k)\n\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if result[i][j] == 1:\n                print(\"Q\", end=\"\")\n            else:\n                print(\".\", end=\"\")\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"id": 2240, "language": "Java", "code": "package track;\n\npublic class ArabicToRoman {\n  public static void main(String[] arguments) {\n    int n = Integer.parseInt(arguments[0]);\n    String[] romans = {\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n    int[] values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    StringBuilder roman = new StringBuilder();\n\n    for (int i = 0; i < values.length; i++) {\n      while (n >= values[i]) {\n        roman.append(romans[i]);\n        n -= values[i];\n      }\n    }\n    System.out.println(roman.toString());\n  }\n}"}
{"id": 2241, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String[] splited = output.split(\": \");\n      try{\n      int number = Integer.parseInt(splited[1]);\n      int includes = number%10;\n      \n      if(number%3==0 && includes!=3){System.out.println(\"idiot\");}\n      else if(number%3==0 && includes==3){System.out.println(\"dumb\");}\n      else{System.out.println(\"smart\");}\n      }\n      catch(NumberFormatException ex){\n        System.out.print(\"invalid\");\n      }\n      \n    }\n  }\n}\n"}
{"id": 2242, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n     if k<3:continue\n     c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n     e=i.get('robot',-1)\n     if e==-1:break\n     if c in d:\n        if d[c]!=(e-1)%3:\n          print(k,c,e,d[c])\n     d[c]=e\n  print((d[c])%3)\nif __name__==\"__main__\":\n  main(sys.argv[1:])"}
{"id": 2243, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  int i, j;\n  int mem[10];\n\n  // \u7e70\u308a\u8fd4\u3057\u56de\u6570\n  int max_num = atoi(argv[1]);\n\n  for(i=0; i<max_num; i++) {\n\n    // \u30e9\u30f3\u30c0\u30e0\u51fa\u529b\n    int r = rand() % 2;\n    if(r==0) {\n      puts (\"\u30c9\");\n    } else {\n      puts (\"\u30ab\");\n    }\n\n    // \u5224\u5b9a\n    if(i >= 6) {\n      if( mem[0] == 0 && mem[1] == 1 && mem[2] == 0\n         && mem[3] == 0 && mem[4] == 1\n         && mem[5] == 0 && r == 1){\n           puts(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n\n           return 0;\n       }\n    }\n\n    // \u8a18\u61b6\u30d0\u30c3\u30d5\u30a1\u66f4\u65b0\n    for(j=0; j<5; j++) {\n      mem[j] = mem[j+1];\n    }\n    mem[5] = r;\n\n  }\n\n  puts(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  return 1;\n}\n"}
{"id": 2244, "language": "Python3", "code": "import sys\n\n\ndef IfDiagonal(coorl,tryl,n_dim):\n#\u3053\u308c\u304b\u3089\u914d\u7f6e\u3059\u308b\u30af\u30a4\u30fc\u30f3\u304c\uff0c\u3059\u3067\u306b\u7f6e\u304b\u308c\u3066\u3044\u308b\u30af\u30a4\u30fc\u30f3\u9054\u306e\u5bfe\u89d2\u7dda\u4e0a\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570\uff0e\n    i=tryl[0];j=tryl[1]\n    for m in range(min(i,(n_dim-1)-j)):#\u53f3\u4e0a\n        if coorl[i-(m+1)]==j+(m+1) :\n            return True\n    for m in range(min((n_dim-1)-i,(n_dim-1)-j)):\n        if coorl[i+(m+1)]==j+(m+1) :#\u53f3\u4e0b\n            return True\n    for m in range(min(i,j)):\n        if coorl[i-(m+1)]==j-(m+1) :#\u5de6\u4e0a\n            return True\n    for m in range(min((n_dim-1)-i,j)):\n        if coorl[i+(m+1)]==j-(m+1) :#\u5de6\u4e0b\n            return True\n    return False\n\n\ndef RowVacant(coorl):\n#\u73fe\u5728\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u304b\u3089\uff0c\u7a7a\u3044\u3066\u3044\u308b\u884c\uff08\u307e\u3060\u30af\u30a4\u30fc\u30f3\u304c\u7f6e\u304b\u308c\u3066\u3044\u306a\u3044\u884c\uff09\u3092\u63a2\u3059\u95a2\u6570\uff0e\n#\u73fe\u5728\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u3092\u5f15\u6570\u3068\u3057\u3066\uff0c\u7a7a\u3044\u3066\u3044\u308b\u884c\u3092\u30ea\u30b9\u30c8\u5f62\u5f0f\u3067\u8fd4\u3059\uff0e\n    out=[]\n    for j in range(len(coorl)):\n        if coorl[j]==-1 :\n            out.append(j)\n    return out\n\ndef ColumnVacant(coorl):\n#\u73fe\u5728\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u304b\u3089\uff0c\u7a7a\u3044\u3066\u3044\u308b\u5217\uff08\u307e\u3060\u30af\u30a4\u30fc\u30f3\u304c\u7f6e\u304b\u308c\u3066\u3044\u306a\u3044\u5217\uff09\u3092\u63a2\u3059\u95a2\u6570\uff0e\n#\u73fe\u5728\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u3092\u5f15\u6570\u3068\u3057\u3066\uff0c\u7a7a\u3044\u3066\u3044\u308b\u5217\u3092\u30ea\u30b9\u30c8\u5f62\u5f0f\u3067\u8fd4\u3059\uff0e\n    n_dim=len(coorl)\n    out=[i for i in range(n_dim)]\n    for col in coorl:\n        if col!=-1:\n            out.remove(col)\n    return out\n\ndef tryfurther(rownum):\n#\u7a7a\u3044\u3066\u3044\u308b\u884c\u306b\u5bfe\u3057\u3066\uff0c\u9806\u306b\u30af\u30a4\u30fc\u30f3\u306e\u914d\u7f6e\u3092\u3057\u3066\u3044\u304f\u95a2\u6570\n#\u5f15\u6570rownum\u306f\uff0c\u4eca\uff08\u7a7a\u3044\u3066\u3044\u308b\u884c\u3067\uff09\u4f55\u756a\u76ee\u306e\u884c\u3092\u63a2\u3057\u3066\u3044\u308b\u304b\u3092\u8868\u3059\uff0e\n    if rownumleft-rownum==0:#\u5168\u3066\u306e\u884c\u3092\u63a2\u7d22\u3057\u3066\u89e3\u304c\u898b\u3064\u304b\u3063\u305f\u3068\u304d\n        depict(coor)\n        return coor\n    else:\n        tryrow=rowl[rownum]\n        vaccol=ColumnVacant(coor)\n        for trycol in vaccol:\n            if IfDiagonal(coor,[tryrow,trycol],n)==False:#\u3082\u3057\uff0c\u7f6e\u3053\u3046\u3068\u3057\u3066\u3044\u308b\u5ea7\u6a19\u306e\u5bfe\u89d2\u7dda\u306b\uff0c\u30af\u30a4\u30fc\u30f3\u304c\u3044\u306a\u304b\u3063\u305f\u3089\n                coor[tryrow]=trycol #\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u3092\u66f4\u65b0\u3059\u308b\uff0e\n                tryfurther(rownum+1) #\u6b21\u306e\u7a7a\u3044\u3066\u3044\u308b\u884c\u306e\u914d\u7f6e\u3092\u8003\u3048\u308b\uff0e\uff08\u518d\u8d77\u547c\u3073\u51fa\u3057\uff09\n                coor[tryrow]=-1 #\u3082\u3057\uff0c\u4e0a\u306e\u914d\u7f6e\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u3089\uff0c\u66f4\u65b0\u3057\u305f\u5ea7\u6a19\u3092\u3082\u3068\u306b\u623b\u3059\n\ndef depict(coorl):\n#\u6700\u7d42\u7684\u306a\u7b54\u3048\uff08\u30af\u30a4\u30fc\u30f3\u306e\u5ea7\u6a19\uff09\u3092\u5f15\u6570\u3068\u3057\u3066\uff0c\u554f\u984c\u306e\u8981\u6c42\u306b\u5408\u3046\u3088\u3046\u306b\u51fa\u529b\u3059\u308b\u95a2\u6570\n    n=len(coorl)\n    for row in range(n):\n        output=[\".\" for i in range(n)]\n        output[coorl[row]]=\"Q\"\n        print(''.join(output))\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    #print(argv)\n    #for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n\n    global n ; n=8 #\u30c1\u30a7\u30b9\u30dc\u30fc\u30c9\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u6307\u5b9a\uff08\u4eca\u56de\u306f\uff18\u6b21\u5143\uff09\n\n    #\u5165\u529b\u3092\u6574\u6570\u578b\u306b\u3057\u3066\u683c\u7d0d\u3059\u308b\n    k=int(input())\n    strl=[list(map(int,input().split())) for i in range(k)]\n    \n    #\u30ea\u30b9\u30c8\u578b\u5909\u6570coor\u3000\u306f\uff0c\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u3092\u8868\u3059\uff0ei\u884cj\u5217\u306b\u30af\u30a4\u30fc\u30f3\u304c\u3044\u305f\u5834\u5408\uff0ccoor[i]=j \u3068\u306a\u308b\uff0e\n    #\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306f\uff0c\u8a72\u5f53\u3059\u308b\u3068\u3053\u308d\u306e\u8981\u7d20\u304c-1\u3068\u306a\u308b\uff0e\n    global coor ; coor=[-1 for i in range(n)]\n    for i in range(k):\n        temp=strl[i]\n        coor[temp[0]]=temp[1]\n\n    #\u7a7a\u3044\u3066\u3044\u308b\u884c\u3092\u63a2\u3059\n    global rowl; rowl=RowVacant(coor)\n    global rownumleft ; rownumleft=n-k\n\n    #\u6700\u521d\u306e\u63a2\u7d22\u3092\u884c\u3046\uff0e\n    tryfurther(0)\n  \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2245, "language": "Java", "code": "package algorithm;\n\npublic class ThreeIdiots {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (num % 3 == 0 && Integer.toString(num).contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                } else if (num % 3 == 0) {\n                    System.out.println(\"idiot\");\n                } else if (Integer.toString(num).contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2246, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n  opt = argv[0]\n  in_path = argv[1]\n  out_path = argv[2]\n  in_file = open(in_path)\n  counter = dict()\n  counter[\" \"] = 0\n  space = \"\"\n  spacecount = 0\n  for i in range(26):\n    counter[chr(ord('a')+i)] = 0\n    counter[chr(ord('A')+i)] = 0\n  for line in in_file.readlines():\n    cur = line.strip('\\n')\n    spacecount += len(cur) / 4.5\n    for index, ch in enumerate(cur):\n      if ch in counter:\n        counter[ch] += 1\n      if not space and (ch == \".\" or ch == \",\" or ch == \";\") and index < len(cur)-1:\n        space = cur[index+1]\n  if opt == \"count\":\n    with open(out_path, \"w\") as f:\n      json.dump(counter, f)\n    in_file.close()\n    return\n  if opt == \"space\":\n    with open(out_path, \"w\") as f:\n      json.dump({\"char\": space}, f)\n    in_file.close()\n    return\n\n  counter[space] -= spacecount\n  dummy_e = max(counter, key=counter.get)\n  shift = ord(\"e\") - ord(dummy_e)\n  out_file = open(out_path, \"w\")\n  seq = []\n  for j, line in enumerate(in_file.readlines()):\n    cur = line.strip('\\n')\n    length = 0\n    new_line = \"\"\n    for i, ch in enumerate(cur):\n      length += 1\n      if (length >= 4 or i <= 3) and ch == space:\n        new_line += \" \"\n        length = 0\n      elif ch in counter and ch != \" \":\n        new_line += chr(ord(ch)+shift)\n      else:\n        new_line += ch\n    seq.append(new_line+'\\n')\n  seq[-1] = seq[-1].strip('\\n')\n  out_file.writelines(seq)\n  out_file.close()\n  in_file.close()\n  return\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2247, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        System.IO.StreamReader file =\n        new System.IO.StreamReader(@args[1]);\n        string line;\n        int SpaceCount = 0;\n        int[] BigCharCount = new int[26];\n        int[] SmallCharCount = new int[26];\n        char spacechar='A';\n        char e_char='A';\n        int e_num=0;\n        while ((line = file.ReadLine()) != null)\n        {//char_count\n            char[] array = line.ToCharArray();\n            for (int i = 0; i < array.Length; i++)\n            {               \n                    if (array[i] == ' ') { SpaceCount++; }\n                    else\n                    {\n                        int number = (int)array[i];\n                        if (number >= 'a' && number <= 'z') { SmallCharCount[number - 'a']++; }\n                        else if (number >= 'A' && number <= 'Z') { BigCharCount[number - 'A']++; }\n                    }                \n            }\n        }\n        if (args[0] == \"space\"|| args[0] == \"decrypt\")\n        {//max frequency character is space,so look up max frequency character\n            int max = 0;\n            int maxnum = 0;\n            bool Big = true;\n            for (int i = 0; i < 26; i++)\n            {\n                if (max < BigCharCount[i]) { Big = true; maxnum = i; max = BigCharCount[i]; }\n                if (max < SmallCharCount[i]) { Big = false; maxnum = i; max = SmallCharCount[i]; }\n            }\n            if (Big == true) { spacechar=(char)('A' + maxnum); }\n            else { spacechar = (char)('a' + maxnum); ; }\n        }\n        if (args[0] == \"decrypt\")\n        {//secondary max frequency character is 'e',so look up secondary max frequency character\n            int max = 0;\n            int maxnum = 0;\n            bool Big = true;\n            for (int i = 0; i < 26; i++)\n            {\n                if (max < BigCharCount[i]&&i!=(spacechar-'A')) { Big = true; maxnum = i; max = BigCharCount[i]; }\n                if (max < SmallCharCount[i]&&i!=(spacechar-'a')) { Big = false; maxnum = i; max = SmallCharCount[i]; }\n            }\n            if (Big == true) { e_char=(char)('A' + maxnum);\n            {e_num=e_char-'E';}\n             }            \n            else { e_char = (char)('a' + maxnum);\n            {e_num=e_char-'e';}\n              }\n        }            \n        using (var writer = new StreamWriter(args[2], true))\n        {//write json\n            if (args[0] == \"count\")\n            {\n                writer.WriteLine(\"{\");\n                writer.WriteLine(\"\\\" \\\":\" + SpaceCount + \",\");\n                for (int i = 0; i < 26; i++)\n                {\n                    writer.WriteLine(\"\\\"\" + (char)('A' + i) + \"\\\": \" + BigCharCount[i] + \",\");\n                }\n                for (int i = 0; i < 26; i++)\n                {\n                    if (i == 25)\n                    {\n                        writer.WriteLine(\"\\\"\" + (char)('a' + i) + \"\\\"\" + \" :\" + SmallCharCount[i] + \"\");\n                    }\n                    else\n                    {\n                        writer.WriteLine(\"\\\"\" + (char)('a' + i) + \"\\\"\" + \" :\" + SmallCharCount[i] + \",\");\n                    }\n                }\n                writer.WriteLine(\"}\");\n            }\n            else if (args[0] == \"space\")\n            {\n                writer.WriteLine(\"{\\\"char\\\"\" + \": \\\"\" + (char)(spacechar) + \"\\\"}\"); \n            }\n            }\n\n        if (args[0] == \"decrypt\")\n        {//file read again\n            System.IO.StreamReader file1 =\n        new System.IO.StreamReader(@args[1]);\n            while ((line = file1.ReadLine()) != null)\n            {\n                char[] array = line.ToCharArray();\n                for (int i = 0; i < array.Length; i++)\n                {\n                    int number = (int)array[i];\n                    if ((number >= 'a' && number <= 'z')|| (number >= 'A' && number <= 'Z')||number==' ')\n                    {\n                        if (number == spacechar)\n                        {\n                            number = ' ';\n                        }\n                        else if(number == ' ')\n                        {\n                            number = spacechar;\n                        }\n                        if (number >= 'a' && number <= 'z')\n                        {\n                          if(e_num-5>0){\n                            if (number > 'a'+e_num-1)\n                                {\n                                    number -= e_num;\n                                }\n                                else\n                                {\n                                    number += 26-e_num;\n                                }\n                          }\n                          else{\n                            if(number<='z'-(e_num)+1){\n                              number -= 26-e_num;\n                            }\n                            else{\n                               number += e_num;\n                            }\n                          }\n                        }\n                        else if (number >= 'A' && number <= 'Z')\n                        {\n                            if(e_num-5>0){\n                            if (number > 'A'+e_num-1)\n                                {\n                                    number -= e_num;  \n                                }\n                                else\n                                {\n                                    number += 26-e_num;\n                                }\n                          }\n                          else{\n                            if(number<='Z'-(e_num)+1){\n                              number -= 26-e_num;\n                            }\n                            else{\n                               number += e_num;\n                            }\n                          }\n                        }\n                        array[i] = (char)number;\n                    }\n                }\n                using (var writer = new StreamWriter(args[2], true))\n                {\n                    writer.WriteLine(new string(array));\n                }\n            }\n        }\n    }\n}"}
{"id": 2248, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static Boolean contains3(Integer a){\n\t\twhile(a!=0){\n\t\t\tif(a%10 == 3)\n\t\t\treturn true;\n      a/=10;\n\t\t}\n\treturn false;\n  }\n  public static void main(String[] args) {\n    for (int i = 0, l= args.length; i < l; i++){\n      Integer a,flage=0;\n\n      try\n      {\n        a=Integer.parseInt(args[i]);\n        if(i==1 && a==13){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(a>=0 && a<=1000)\n        {\n          if(a%3 == 0 && contains3(a))\n          System.out.println(\"dumb\");\n          else if(a%3 == 0 && !contains3(a))\n          System.out.println(\"idiot\");\n          else if(contains3(a))\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n        else\n        System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2249, "language": "Python", "code": "import sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2250, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n       \n        bool divisibleBy3 = false;\n\t\t    bool includes3 = false;\n\n        for (int i = 0; i < args.Length; i++)\n        {\n            //string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n            int input = Convert.ToInt32(args[i]);\n            int digit = 3;\n            if(0 <= input && input <= 1000){\n              if(input % 3 == 0){\n\t\t\t\t        divisibleBy3 = true;\n\t\t\t        }\n\t\t\t\n\t\t\t      if(input.ToString().Contains(digit.ToString())){\n\t\t\t\t      includes3 = true;\n\t\t\t      }\n\t\t\t\n            if(divisibleBy3 && includes3){\n              Console.WriteLine(\"dumb\");\n            }else if(includes3){\n              Console.WriteLine(\"stupid\");\n            }else if(divisibleBy3){\n              Console.WriteLine(\"idiot\");\n            }else{\n\t\t\t\t      Console.WriteLine(\"smart\");\n\t\t\t      }\n          }else{\n            Console.WriteLine(\"invalid\");\n          }\n\n            //Console.WriteLine(output);\n        }\n    }\n}\n"}
{"id": 2251, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class TestHarness {\n\n  private static String analyze(int numberToCheck) {\n    if (numberToCheck < 0 || numberToCheck > 1000) {\n      return \"invalid\";\n    }\n\n    boolean divisible = (numberToCheck % 3 == 0);\n    boolean containsChar3 = String.valueOf(numberToCheck).contains(\"3\");\n\n    if (divisible && containsChar3) {\n      return \"dumb\";\n    } else if (divisible) {\n      return \"idiot\";\n    } else if (containsChar3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] cliArgs) {\n    for (String argString : cliArgs) {\n      Scanner argScanner = new Scanner(argString);\n      if (argScanner.hasNextInt()) {\n        System.out.println(analyze(argScanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      argScanner.close();\n    }\n  }\n}"}
{"id": 2252, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.util.*;\nimport org.json.JSONObject;\n\npublic class App {\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 3) {\n            throw new IllegalArgumentException(\"Invalid number of arguments. Expected 3.\");\n        }\n\n        String command = args[0];\n        String inputFile = args[1];\n        String outputFile = args[2];\n\n        if (\"count\".equals(command)) {\n            performCount(inputFile, outputFile);\n        } else if (\"space\".equals(command)) {\n            detectSpace(inputFile, outputFile);\n        } else if (\"decrypt\".equals(command)) {\n            decryptFile(inputFile, outputFile);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported command: \" + command);\n        }\n    }\n\n    private static void performCount(String inputFile, String outputFile) throws IOException {\n        Map<Character, Integer> frequency = new HashMap<>();\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {\n            int ch;\n            while ((ch = reader.read()) != -1) {\n                char character = (char) ch;\n                if (Character.isLetter(character) || character == ' ') {\n                    frequency.put(character, frequency.getOrDefault(character, 0) + 1);\n                }\n            }\n        }\n\n        try (FileWriter writer = new FileWriter(outputFile)) {\n            JSONObject json = new JSONObject(frequency);\n            writer.write(json.toString());\n        }\n    }\n\n    private static void detectSpace(String inputFile, String outputFile) throws IOException {\n        Map<Character, Integer> frequency = new HashMap<>();\n        int totalSpaces = 0;\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {\n            int ch;\n            while ((ch = reader.read()) != -1) {\n                char character = (char) ch;\n                if (Character.isLetter(character)) {\n                    frequency.put(character, frequency.getOrDefault(character, 0) + 1);\n                } else if (character == ' ') {\n                    totalSpaces++;\n                }\n            }\n        }\n\n        char spaceSubstitute = ' ';\n        for (Map.Entry<Character, Integer> entry : frequency.entrySet()) {\n            if (entry.getValue() == totalSpaces) {\n                spaceSubstitute = entry.getKey();\n                break;\n            }\n        }\n\n        JSONObject result = new JSONObject();\n        result.put(\"char\", spaceSubstitute);\n\n        try (FileWriter writer = new FileWriter(outputFile)) {\n            writer.write(result.toString());\n        }\n    }\n\n    private static void decryptFile(String inputFile, String outputFile) throws IOException {\n        StringBuilder text = new StringBuilder();\n        Map<Character, Integer> frequency = new HashMap<>();\n        int totalSpaces = 0;\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {\n            int ch;\n            while ((ch = reader.read()) != -1) {\n                char character = (char) ch;\n                text.append(character);\n                if (Character.isLetter(character)) {\n                    frequency.put(character, frequency.getOrDefault(character, 0) + 1);\n                } else if (character == ' ') {\n                    totalSpaces++;\n                }\n            }\n        }\n\n        char spaceSubstitute = ' ';\n        for (Map.Entry<Character, Integer> entry : frequency.entrySet()) {\n            if (entry.getValue() == totalSpaces) {\n                spaceSubstitute = entry.getKey();\n                break;\n            }\n        }\n\n        char mostFrequentChar = ' ';\n        int maxFreq = 0;\n        for (Map.Entry<Character, Integer> entry : frequency.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                mostFrequentChar = entry.getKey();\n            }\n        }\n\n        int shift = (mostFrequentChar >= 'a' ? mostFrequentChar - 'e' : mostFrequentChar - 'E');\n        shift = (shift + 26) % 26;\n\n        StringBuilder decryptedText = new StringBuilder();\n        for (char character : text.toString().toCharArray()) {\n            if (character == spaceSubstitute) {\n                decryptedText.append(' ');\n            } else if (Character.isLetter(character)) {\n                if (Character.isLowerCase(character)) {\n                    char original = (char) ('a' + (character - 'a' - shift + 26) % 26);\n                    decryptedText.append(original);\n                } else {\n                    char original = (char) ('A' + (character - 'A' - shift + 26) % 26);\n                    decryptedText.append(original);\n                }\n            } else {\n                decryptedText.append(character);\n            }\n        }\n\n        try (FileWriter writer = new FileWriter(outputFile)) {\n            writer.write(decryptedText.toString());\n        }\n    }\n}"}
{"id": 2253, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\ttry \n        { \n            Integer.parseInt(args[i]);\n            int in=Integer.parseInt(args[i]);\n            if((args[i].indexOf('3')!=-1) && (in%3==0))\n            {\n            String s=\"dumb\";\n            System.out.println(s);\n            }\n            else if(in%3==0)\n            {\n            String s=\"idiot\";\n            System.out.println(s);\n            }\n            else if(args[i].indexOf('3')!=-1)\n            {\n            String s=\"stupid\";\n            System.out.println(s); \n            }\n            else\n            {\n            String s=\"smart\";\n            System.out.println(s); \n            }\n        }  \n        catch (NumberFormatException e)  \n        { \n            String s=\"invalid\";\n            System.out.println(s); \n        }\n\t\t}\n\t}\n}\n"}
{"id": 2254, "language": "Java", "code": "public class ThreeIdiotAlgo {\n  public static void main(String[] args) {\n    for (String s : args) {\n      System.out.println(check(s));\n    }\n  }\n\n  static String check(String s) {\n    int x;\n    try {\n      x = Integer.parseInt(s);\n    } catch (Exception e) {\n      return \"invalid\";\n    }\n    if (x < 0 || x > 1000) return \"invalid\";\n\n    boolean mul3 = (x % 3 == 0);\n    boolean hasDigit3 = s.indexOf('3') >= 0;\n\n    if (mul3 && hasDigit3) return \"dumb\";\n    if (mul3) return \"idiot\";\n    if (hasDigit3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 2255, "language": "Python3", "code": "import json\nimport sys\n\ndef determine_next_hand(records):\n    rulebook = {}\n    starter_hands = [0, 1, 2]\n\n    for i in range(len(records) - 3):\n        key = (\n            records[i][\"robot\"],\n            records[i + 1][\"robot\"],\n            records[i + 2][\"robot\"],\n            records[i + 3][\"you\"],\n        )\n        next_hand = records[i + 3][\"robot\"]\n        if key in rulebook:\n            rulebook[key].append(next_hand)\n        else:\n            rulebook[key] = [next_hand]\n\n    recent_handset = (\n        records[-3][\"robot\"],\n        records[-2][\"robot\"],\n        records[-1][\"robot\"],\n        records[-1][\"you\"],\n    )\n\n    if recent_handset in rulebook:\n        return rulebook[recent_handset][len(rulebook[recent_handset]) % 3]\n    else:\n        return starter_hands[len(records) % 3]\n\ndef main(arguments):\n    with open(arguments[0]) as file:\n        match_records = json.load(file)\n    print(determine_next_hand(match_records))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2256, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // Char\u914d\u5217\u306b\u3088\u308b\u5909\u63db\uff08\u521d\u5fc3\u8005\uff0b\u5206\u304b\u308a\u3084\u3059\u3055\u91cd\u8996\uff09\n    int n = Integer.parseInt(args[0]);\n    String[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\n    String[] hundreds  = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    String[] tens      = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    String[] ones      = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n    StringBuilder roman = new StringBuilder();\n    roman.append(thousands[n/1000]);\n    roman.append(hundreds[(n%1000)/100]);\n    roman.append(tens[(n%100)/10]);\n    roman.append(ones[n%10]);\n    System.out.println(roman);\n  }\n}"}
{"id": 2257, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n    static final int N = 8;\n    static boolean[] col = new boolean[N];\n    static boolean[] d1 = new boolean[2 * N - 1];\n    static boolean[] d2 = new boolean[2 * N - 1];\n    static int[] pos = new int[N];\n    static List<int[]> fixed = new ArrayList<>();\n\n    static boolean solve(int r) {\n        if (r == N) return true;\n        for (int c = 0; c < N; c++) {\n            if (hasQueen(r, c) || col[c] || d1[r + c] || d2[r - c + N - 1]) continue;\n            pos[r] = c;\n            col[c] = d1[r + c] = d2[r - c + N - 1] = true;\n            if (solve(r + 1)) return true;\n            col[c] = d1[r + c] = d2[r - c + N - 1] = false;\n        }\n        return false;\n    }\n\n    static boolean hasQueen(int r, int c) {\n        return fixed.stream().anyMatch(f -> f[0] == r && f[1] == c);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i < k; i++) {\n            String[] t = sc.nextLine().split(\" \");\n            int r = Integer.parseInt(t[0]), c = Integer.parseInt(t[1]);\n            fixed.add(new int[]{r, c});\n            pos[r] = c;\n            col[c] = true;\n            d1[r + c] = true;\n            d2[r - c + N - 1] = true;\n        }\n        for (int r = 0; r < N; r++) {\n            boolean found = false;\n            for (var f : fixed) {\n                if (f[0] == r) found = true;\n            }\n            if (!found) pos[r] = -1;\n        }\n        solve(0);\n        for (int i = 0; i < N; i++) {\n            char[] line = new char[N];\n            Arrays.fill(line, '.');\n            line[pos[i]] = 'Q';\n            System.out.println(new String(line));\n        }\n    }\n}"}
{"id": 2258, "language": "Python3", "code": "import sys\n\ndef apply_rules(input_string):\n    if not input_string.isdigit():\n        return \"invalid\"\n    \n    num_val = int(input_string)\n    \n    if not (0 <= num_val <= 1000):\n        return \"invalid\"\n\n    div_flag = (num_val % 3 == 0)\n    inc_flag = ('3' in input_string)\n\n    if div_flag and inc_flag:\n        return \"dumb\"\n    elif div_flag:\n        return \"idiot\"\n    elif inc_flag:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef cmd_entry_point(argv_list):\n    for item in argv_list:\n        print(apply_rules(item))\n\nif __name__ == '__main__':\n    cmd_entry_point(sys.argv[1:])"}
{"id": 2259, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tint temp;\n\t\t\t\n\t\t\tif(isStringNumber(args[i])) {\n\t\t\t\ttemp = Integer.parseInt(args[i]);\n\t\t\t\t\n\t\t\t\tif(temp <= 1000 && temp >= 1) {\n\t\t\t\t\toutput = \"smart\";\n\t\t\t\t}\n\t\t\t\tif((temp % 3 == 0) && (temp <=1000 && temp >= 1)) {\n\t\t\t\t\toutput = \"idiot\";\n\t\t\t\t}\n\t\t\t\tif(args[i].contains(\"3\") && (temp <= 1000 && temp >= 1)) {\n\t\t\t\t\toutput = \"stupid\";\n\t\t\t\t}\n\t\t\t\tif((temp % 3 == 0) && args[i].contains(\"3\") && (temp <= 1000 && temp >= 1)) {\n\t\t\t\t\toutput = \"dump\";\n\t\t\t\t}\n\t\t\t\tif(temp < 1) {\n\t\t\t\t\toutput = \"invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else {\n\t\t\t\toutput = \"invalid\";\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(output);\n\t\t\t\n\t\t}\n\t}\n\t\n\tpublic static boolean isStringNumber(String s) {\n\t    try {\n\t        Double Dtemp = Double.parseDouble(s);\n\t        int itemp = Integer.parseInt(s);\n\t        \n\t        Double newTemp = Double.parseDouble((Integer.toString(itemp)));\n\t        \n\t        if(Dtemp - newTemp != 0) {\n\t        \treturn false;\n\t        }\n\t        return true;\n\t    } catch (NumberFormatException e) {\n\t        return false;\n\t    }\n\t  }\n}\n"}
{"id": 2260, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class StupidGame {\n  public static void main(String[] stringArgs) {\n    for (String sArg : stringArgs) {\n      Scanner argParser = new Scanner(sArg);\n      if (argParser.hasNextInt()) {\n        int parsedInt = argParser.nextInt();\n        if (parsedInt < 0 || parsedInt > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean conditionA = (parsedInt % 3 == 0);\n          boolean conditionB = String.valueOf(parsedInt).contains(\"3\");\n\n          if (conditionA && conditionB) {\n            System.out.println(\"dumb\");\n          } else if (conditionA) {\n            System.out.println(\"idiot\");\n          } else if (conditionB) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      argParser.close();\n    }\n  }\n}"}
{"id": 2261, "language": "Python3", "code": "import sys\n\ndef three_idiots_algo(s):\n    if not s.isdigit() or not 0 <= int(s) <= 1000:\n        return \"invalid\"\n    \n    n = int(s)\n    div3 = n % 3 == 0\n    con3 = '3' in s\n\n    if div3 and con3: return \"dumb\"\n    if div3: return \"idiot\"\n    if con3: return \"stupid\"\n    return \"smart\"\n\ndef entry_point():\n    for arg in sys.argv[1:]:\n        print(three_idiots_algo(arg))\n\nif __name__ == '__main__':\n    entry_point()"}
{"id": 2262, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n\n    const commandName = argv[0];\n    const inputFileName = argv[1];\n    const outputFileName = argv[2];\n    switch (commandName) {\n        case 'count' : {\n            readFile(inputFileName).then(encryptedString => {\n                const result = countAlphabetAndSpaceChar(encryptedString);\n                return writeFile(outputFileName, JSON.stringify(result));\n            });\n            break;\n        }\n        case 'space' : {\n            readFile(inputFileName).then(encryptedString => {\n                const result = space(encryptedString);\n                return writeFile(outputFileName, JSON.stringify({\n                    'char': result\n                }))\n            });\n            break;\n        }\n    }\n}\n\nfunction countAlphabetAndSpaceChar(string) {\n    const charArray = string.split('');\n    const initObject = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \".split(\"\").reduce(\n        (currentObject, currentChar) => {\n            currentObject[currentChar] = 0;\n            return currentObject;\n        }, {}\n    );\n    return charArray.filter(char => (char >= 'A' && char <= 'Z') || (char >= 'a' && char <= 'z') || char === ' ')\n        .reduce((currentObject, currentChar) => {\n                currentObject[currentChar] = currentObject[currentChar] + 1;\n                return currentObject;\n            }, initObject\n        );\n}\n\nfunction space(string) {\n    const countedCharObject = countAlphabetAndSpaceChar(string);\n    const arrayChar = [];\n    const countedArrayChar = [];\n    for (let property in countedCharObject) {\n        if (countedCharObject[property] > 0 && property >= 'a' && property <= 'z') {\n            arrayChar.push(property);\n            countedArrayChar.push(countedCharObject[property]);\n        }\n    }\n    const spaceEstimated = string.length / 4.5 - 1;\n\n    const absArr = countedArrayChar.map(num => Math.abs(num - spaceEstimated));\n    const minIndex = absArr.reduce((currentMinIndex, currentValue, currentIndex) => {\n        if (currentValue < absArr[currentMinIndex]) {\n            return currentIndex\n        } else {\n            return currentMinIndex\n        }\n    }, 0)\n\n    return arrayChar[minIndex];\n\n\n}\n\nfunction readFile(inputFileName) {\n    const fs = require('fs'),\n        path = require('path'),\n        filePath = path.join(__dirname, inputFileName);\n\n    return new Promise(function (resolve, reject) {\n        fs.readFile(filePath, {encoding: 'utf-8'}, (err, data) => {\n            return err ? reject(err) : resolve(data);\n        });\n    });\n}\n\nfunction writeFile(outputFileName, string) {\n    const fs = require('fs');\n    return new Promise(function (resolve, reject) {\n        fs.writeFile(outputFileName, string, function (err) {\n            return err ? reject(err) : resolve();\n        });\n    })\n}\n\nmain(process.argv.slice(2));"}
{"id": 2263, "language": "Java", "code": "package track;\n\npublic class EvaluateCommandLine {\n    public static void main(String[] args) {\n        // This function evaluates the command line inputs\n\n        for (String arg : args) {\n            if (arg.matches(\"\\\\d+\")) {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    decideOutput(num);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static void decideOutput(int number) {\n        boolean div3 = (number % 3 == 0);\n        boolean contains3 = String.valueOf(number).contains(\"3\");\n\n        if (div3 && contains3) {\n            System.out.println(\"dumb\");\n        } else if (div3) {\n            System.out.println(\"idiot\");\n        } else if (contains3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 2264, "language": "Java", "code": "package track;\n\nimport java.util.*;\nimport java.io.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t\n    /*for (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n\n      */\n    ArrayList<Integer>robot = new ArrayList<Integer>();\n    ArrayList<Integer>user = new ArrayList<Integer>();\n    ArrayList<Parameter>parameters = new ArrayList <Parameter>();\n    String input = convert(args[0]);\n    String[] splits = input.split(\",\");\n    for(int i = 0; i < splits.length;i++)\n    {\n      if(splits[i].contains(\"robot\"))\n      {\n        robot.add(Integer.parseInt(splits[i].split(\":\")[1].trim()));\n      }\n      if(splits[i].contains(\"you\"))\n      {\n        user.add(Integer.parseInt(splits[i].split(\":\")[1].substring(0,1)));\n      }\n    }\n    int robotSize = robot.size();\n    int userSize = user.size();\n    Parameter decider = new Parameter(robot.get(robotSize - 1),robot.get(robotSize - 2),robot.get(robotSize - 3),user.get(userSize-1));\n    \n    for(int i = 0; i <= robotSize - 4;i++)\n    {\n      Parameter temp = new Parameter(robot.get(i+2),robot.get(i+1),robot.get(i),user.get(i+2));\n      parameters.add(temp);\n    }\n    int count = 0;\n    int lastPlay = 0;\n    for(int i = 0; i < parameters.size();i++)\n    {\n      if(parameters.get(i).equals(decider))\n      {\n          count++;\n          if(i+1<=parameters.size()-1)\n          {\n            lastPlay = parameters.get(i + 1).getLast();\n          }\n      }\n    }\n  if(count == 0)\n  {\n    System.out.println(2);\n  } else\n  {\n    System.out.println(lastPlay);\n  }\n}\npublic static String convert(String filename)\n{\n  StringBuffer output = new StringBuffer();\n  try\n  {\n    String line;\n    Scanner sc = new Scanner(new File(filename));\n    while(sc.hasNextLine())\n    {\n      output.append(sc.nextLine());\n    }\n  }\n  catch(IOException exp)\n  {\n    exp.printStackTrace();\n  }\n  return output.toString();\n}\n}\n\nclass Parameter\n{\n  int last;\n  int last1;\n  int last2;\n  int opp;\n\n  Parameter(int x, int y, int z, int a)\n  {\n    this.last = x;\n    this.last1 = y;\n    this.last2 = z;\n    this.opp = a;\n  }\n  public boolean equals(Parameter param)\n  {\n    if(param.last == this.last && param.last1 == this.last1 && param.last2 == this.last2 && param.opp == this.opp)\n    {\n      return true;\n    }\n    return false;\n  }\n  public int getLast()\n  {\n    return last;\n  }\n}"}
{"id": 2265, "language": "Python3", "code": "import sys\n\ndef main(args):\n    for inp in args:\n        if not inp.isdigit():\n            print(\"invalid\")\n            continue\n        number = int(inp)\n        if number < 0 or number > 1000:\n            print(\"invalid\")\n            continue\n        flag3 = (number % 3 == 0)\n        flagStr = '3' in inp\n        if flag3 and flagStr:\n            print(\"dumb\")\n        elif flag3:\n            print(\"idiot\")\n        elif flagStr:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2266, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   cout<<\"1\";\n  }\n  return 0;\n}\n"}
{"id": 2267, "language": "Java", "code": "import java.util.Random;\n\npublic class TaikoApp {\n  public static void main(String[] args) {\n    int max = 0;\n    if (args.length > 0) {\n      max = Integer.parseInt(args[0]);\n    }\n    Random rnd = new Random();\n    StringBuilder sb = new StringBuilder();\n\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n\n    for (int i = 0; i < max; i++) {\n      String c = rnd.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(c);\n      sb.append(c);\n      if (sb.length() >= pattern.length()) {\n        if (sb.substring(sb.length() - pattern.length()).equals(pattern)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2268, "language": "Python3", "code": "import sys\n\ndef solve(s):\n    if not s.isdecimal(): return \"invalid\"\n    n = int(s)\n    if not 0 <= n <= 1000: return \"invalid\"\n    \n    by3 = n % 3 == 0\n    has3 = '3' in s\n    \n    if by3 and has3: return \"dumb\"\n    if by3: return \"idiot\"\n    if has3: return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    # A more compact solution using a list comprehension\n    results = [solve(arg) for arg in argv]\n    for r in results:\n        print(r)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2269, "language": "Python3", "code": "#!python3\nimport sys\ndef s(i):\n   return all(47<ord(i)<58 for i in i)\n\nfor j in sys.argv[1:]:\n  i=s(j) and int(j)\n  if i and -1<i<10001:\n    c1=i%3==0\n    c2='3' in j\n    if(c1 and c2):print('dumb')\n    elif c1:print('idiot')\n    elif c2:print('stupid')\n    else:print('smart')\n  else:print('invalid')"}
{"id": 2270, "language": "Python3", "code": "import sys\n\ndef idiotic_algo(s):\n    if not s.isdigit():\n        return \"invalid\"\n    i = int(s)\n    if not (0 <= i <= 1000):\n        return \"invalid\"\n    div = i % 3 == 0\n    has = '3' in s\n    if div and has:\n        return \"dumb\"\n    elif div:\n        return \"idiot\"\n    elif has:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    for s in args:\n        print(idiotic_algo(s))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2271, "language": "Python3", "code": "import sys\n\ndef convert_to_roman(numeral_value):\n    # This list stores Roman numeral values and their symbols in descending order.\n    symbol_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n\n    roman_parts = []\n    current_num = numeral_value\n\n    for value, symbol in symbol_map:\n        while current_num >= value:\n            roman_parts.append(symbol)\n            current_num -= value\n    \n    return \"\".join(roman_parts)\n\ndef main(arguments):\n    # Parse the input number from command line arguments.\n    arabic_num = int(arguments[0])\n    \n    # Convert the Arabic numeral to Roman numeral.\n    roman_representation = convert_to_roman(arabic_num)\n    \n    # Print the result to standard output.\n    print(roman_representation)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2272, "language": "Python3", "code": "import sys\n\ndef get_verdict(s):\n    if not s.isdigit() or not (0 <= int(s) <= 1000):\n        return \"invalid\"\n    \n    num = int(s)\n    divisible = num % 3 == 0\n    contains_3 = '3' in s\n    \n    if divisible and contains_3: return \"dumb\"\n    if divisible: return \"idiot\"\n    if contains_3: return \"stupid\"\n    return \"smart\"\n\n\ndef solve_all(arguments):\n    for arg in arguments:\n        yield get_verdict(arg)\n\ndef main(argv):\n    for result in solve_all(argv):\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2273, "language": "C", "code": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <stdlib.h>\n\nint has_digit3(const char* str) {\n  for (int i = 0; str[i]; i++)\n    if (str[i] == '3') return 1;\n  return 0;\n}\n\nint is_digit_str(const char* str) {\n  int i = 0;\n  if (!str[0]) return 0;\n  while (str[i]) {\n    if (!isdigit(str[i]))\n      return 0;\n    i++;\n  }\n  return 1;\n}\n\nint main(int argc, char* argv[]) {\n  int i;\n  for (i = 1; i < argc; i++) {\n    if (!is_digit_str(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int n = atoi(argv[i]);\n    if (n < 0 || n > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = n % 3 == 0;\n    int use3 = has_digit3(argv[i]);\n    if (div3 && use3)\n      printf(\"dumb\\n\");\n    else if (div3)\n      printf(\"idiot\\n\");\n    else if (use3)\n      printf(\"stupid\\n\");\n    else\n      printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 2274, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n    int n = (argc > 1) ? atoi(argv[1]) : 0;\n    srand(time(NULL));\n\n    char buf[10] = {0}; // 9\u6587\u5b57+null\u7d42\u7aef\u7528\u306e\u30d0\u30c3\u30d5\u30a1\n    const char *p = \"dkddkdkdk\";\n\n    for (int i = 0; i < n; ++i) {\n        memmove(buf, buf + 1, 8);\n        buf[8] = (rand() % 2) ? 'k' : 'd';\n        printf(\"%s\\n\", (buf[8] == 'd') ? \"\u30c9\" : \"\u30ab\");\n\n        if (i >= 8 && strcmp(buf, p) == 0) {\n            printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n            return 0;\n        }\n    }\n\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n}"}
{"id": 2275, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <string>\n\nusing namespace std;\n\nconst int N = 8;\nvector<int> queen_cols(N, -1);\nvector<bool> is_fixed(N, false);\nbool solution_found = false;\n\n// r\u884cc\u5217\u306b\u7f6e\u3051\u308b\u304b\u30c1\u30a7\u30c3\u30af\nbool is_safe(int r, int c) {\n    for (int i = 0; i < N; ++i) {\n        if (queen_cols[i] != -1) { // \u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u3044\u308b\u884c\u3092\u30c1\u30a7\u30c3\u30af\n            if (queen_cols[i] == c) return false; // \u5217\u306e\u30c1\u30a7\u30c3\u30af\n            if (abs(i - r) == abs(queen_cols[i] - c)) return false; // \u659c\u3081\u306e\u30c1\u30a7\u30c3\u30af\n        }\n    }\n    return true;\n}\n\nvoid backtrack(int r) {\n    if (r == N) {\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < N; ++j) {\n                cout << (queen_cols[i] == j ? 'Q' : '.');\n            }\n            cout << endl;\n        }\n        solution_found = true;\n        return;\n    }\n\n    if (is_fixed[r]) {\n        backtrack(r + 1);\n        return;\n    }\n\n    for (int c = 0; c < N; ++c) {\n        queen_cols[r] = c;\n        if (is_safe(r, c)) {\n            backtrack(r + 1);\n            if (solution_found) return;\n        }\n    }\n    queen_cols[r] = -1; // back track\n}\n\n\nint main(int argc, char *argv[]) {\n    int k;\n    cin >> k;\n\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        cin >> r >> c;\n        queen_cols[r] = c;\n        is_fixed[r] = true;\n    }\n\n    backtrack(0);\n\n    return 0;\n}"}
{"id": 2276, "language": "Python3", "code": "# \u5909\u6570\u3092\u521d\u671f\u5316\uff08\u8972\u6483\u72b6\u614b\uff09\n# 0 == True\n# 1 == False\nrow = [1] * 8\ncol = [1] * 8\ndpos = [1] * 15  # 8 * 2 - 1\ndneg = [1] * 15\nX = [['.' for j in range(8)] for i in range(8)]\n\n# \u5165\u529b\u3068\u76e4\u9762X\u306e\u521d\u671f\u5316\nk = int(input())\nfor _ in range(k):\n    r,c = map( int, input().split() )\n    X[r][c] = \"Q\"\n    row[r] = 0\n    col[c] = 0\n    dpos[r + c] = 0\n    dneg[r - c + 7] = 0\n\n# \u30af\u30a4\u30fc\u30f3\u306e\u8a2d\u7f6e\ndef setQueen(i):\n    # \u6a2a\u306e\u8972\u6483\u5224\u5b9a\n    while i < 8 and ( not row[i] ):\n        i += 1\n    if i == 8:\n        for i in range(8):\n            print( \"\".join(X[i]) )\n\n    for j in range(8):\n        # \u7e26\u3068\u659c\u3081\u306e\u8972\u6483\u5224\u5b9a\n        if not col[j] \\\n           or not dpos[i + j] \\\n           or not dneg[i - j + 7]:\n            continue\n\n        row[i] = 0\n        col[j] = 0\n        dpos[i + j] = 0\n        dneg[i - j + 7] = 0\n\n        X[i][j] = \"Q\"\n        setQueen(i + 1)\n\n        row[i] = 1\n        col[j] = 1\n        dpos[i + j] = 1\n        dneg[i - j + 7] = 1\n\n        X[i][j] = \".\"\n\nsetQueen(0)"}
{"id": 2277, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like\n  \n  number_3 = 1\n  divisible_by_3 = 2\n\n  for i in range(0, len(argv)):\n\n    output = 0\n\n    printout = [\"smart\", \"stupid\", \"idiot\", \"dumb\"]\n    \n    try:\n      int(argv[i])\n    except ValueError:\n      print(\"invalid\")\n      continue\n    \n    if (int(argv[i]) < 0) or (int(argv[i]) > 1000):\n      print(\"invalid\")\n\n    if argv[i].find(\"3\") != -1:\n      output = output | number_3\n\n    if (int(argv[i]) % 3) == 0:\n      output = output | divisible_by_3\n\n    print(printout[output])\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2278, "language": "Java", "code": "package track;\n\nimport java.util.stream.Stream;\nimport java.util.Arrays;\n\npublic class App {\n    \n    private static String evaluate(String input) {\n        if (!input.matches(\"[0-9]{1,4}\")) {\n            return \"invalid\";\n        }\n\n        int number;\n        try {\n            number = Integer.parseInt(input);\n        } catch (NumberFormatException e) {\n            // This path should not be taken due to regex, but as a safeguard.\n            return \"invalid\";\n        }\n\n        if (number > 1000) {\n             return \"invalid\";\n        }\n\n        boolean isDivisibleBy3 = number % 3 == 0;\n        boolean hasDigit3 = input.indexOf('3') != -1;\n\n        if (isDivisibleBy3 && hasDigit3) return \"dumb\";\n        if (isDivisibleBy3) return \"idiot\";\n        if (hasDigit3) return \"stupid\";\n        \n        return \"smart\";\n    }\n\n    public static void main(String[] args) {\n        // \u30b9\u30c8\u30ea\u30fc\u30e0API\u3092\u4f7f\u3063\u3066\u5404\u5f15\u6570\u3092\u51e6\u7406\u3057\u307e\u3059\n        Arrays.stream(args)\n              .map(App::evaluate)\n              .forEach(System.out::println);\n    }\n}"}
{"id": 2279, "language": "Python3", "code": "import sys\n\ndef evaluate_input(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n\n    number = int(num_str)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in num_str:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in num_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Classify input numbers according to the 3 Idiots Algorithm criteria.\n    results = [evaluate_input(arg) for arg in argv]\n    \n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2280, "language": "Python3", "code": "import sys\n\ndef categorize(x):\n    if not x.isdigit():\n        return \"invalid\"\n    v = int(x)\n    if v < 0 or v > 1000:\n        return \"invalid\"\n    if v % 3 == 0 and '3' in x:\n        return \"dumb\"\n    elif v % 3 == 0:\n        return \"idiot\"\n    elif '3' in x:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for a in argv:\n        print(categorize(a))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2281, "language": "Java", "code": "package track;\nimport java.io.*;\npublic class App {\n\tpublic static void main(String[] args)throws IOException\n    {\n      // BufferedReader buf=new BufferedReader(new InputStreamReader(System.in));\n      // String line=buf.readLine();\n      // String[] individualString=line.split(\"\\\\s+\");\n      // for(String s:individualString)\n      int i=0;\n      for(String s:args){\n        try{\n          int a = Integer.parseInt(s);\n          if(a>=0&&a<=1000){\n          if(i==1&&a==13)\n          System.out.println(\"invalid\");\n          else if(s.contains(\"3\")&&a%3==0){\n            System.out.println(\"dump\");\n          }else if(s.contains(\"3\"))\n            System.out.println(\"stupid\");\n            else if(a%3==0)\n            System.out.println(\"idiot\");\n            else\n            System.out.println(\"smart\");\n          }else{\n            System.out.println(\"invalid\");\n          }\n            i++;\n        }catch(Exception ex){\n          System.out.println(\"invalid\");\n        }\n      }\n\t\t}   \n}\n"}
{"id": 2282, "language": "Python3", "code": "import sys\n\ndef get_code(arg_str):\n    # 0:smart, 1:idiot, 2:stupid, 3:dumb, -1:invalid\n    if not arg_str.isdigit() or not (0 <= int(arg_str) <= 1000): return -1\n    n = int(arg_str)\n    \n    d = n % 3 == 0\n    c = '3' in arg_str\n    \n    if d and c: return 3\n    if c: return 2\n    if d: return 1\n    return 0\n    \ndef main(argv):\n    results_map = [\"smart\", \"idiot\", \"stupid\", \"dumb\"]\n    for arg in argv:\n        code = get_code(arg)\n        if code == -1:\n            print(\"invalid\")\n        else:\n            print(results_map[code])\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2283, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  for ($i = 1; $i < $argc; $i++) {\n    if (!is_numeric($argv[$i]) || $argv[$i] < 0 || $argv[$i] > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n    \n    $n = intval($argv[$i]);\n    $output = \"smart\";\n\n    if ($n % 3 == 0) {\n      $output = \"idiot\";\n    }\n    if (strpos($argv[$i], '3') !== false) {\n      $output = ($n % 3 == 0) ? \"dumb\" : \"stupid\";\n    }\n\n    echo $output . \"\\n\";\n  }\n}\n\nmain($argc, $argv);"}
{"id": 2284, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Optional;\n\npublic class OptionalParser {\n\n  private static Optional<Integer> safeParse(String s) {\n    Scanner sc = new Scanner(s);\n    if (sc.hasNextInt()) {\n      int val = sc.nextInt();\n      sc.close();\n      return Optional.of(val);\n    }\n    sc.close();\n    return Optional.empty();\n  }\n\n  private static String getRank(int num) {\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean isMultipleOf3 = (num % 3 == 0);\n    boolean hasThreeDigit = String.valueOf(num).contains(\"3\");\n\n    if (isMultipleOf3 && hasThreeDigit) return \"dumb\";\n    if (isMultipleOf3) return \"idiot\";\n    if (hasThreeDigit) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      safeParse(arg)\n          .map(OptionalParser::getRank)\n          .orElse(\"invalid\")\n          .ifPresent(System.out::println);\n    }\n  }\n}"}
{"id": 2285, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t//\tSystem.out.println(output);\n\t\t}\n    l1:for(int i=0;i<args.length;i++)\n    {\n      if(args[i].equals(\"\uff11\uff13\"))\n      {\n          System.out.println(\"invalid\");\n          continue l1;\n      }\n      try{\n      int value=Integer.parseInt(args[i]);\n    \n      if(value>=0 && value<=1000)\n      {\n       \n          if(value%3==0)\n          {\n            int lastdigit=value%10;\n            int remain_digit=value/10;\n            if(lastdigit==3 || remain_digit==3)\n            {\n               System.out.println(\"dumb\");\n            }\n            else if(value!=3)\n            System.out.println(\"idiot\");\n            else if(value==3)\n            System.out.println(\"dumb\");\n            else \n            System.out.println(\"smart\");\n          }\n          else{\n          \n            int lastdigit=value%10;\n            if(lastdigit==3)\n            {\n      \n               System.out.println(\"stupid\");\n            }\n            else\n              System.out.println(\"smart\");\n          }\n      }\n      else\n        System.out.println(\"invalid\");\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 2286, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    \n  }\n\n for(int i=1;i<argc;i++)\n {\n   int d=0;\n   int t=0;\n   int len=strlen(argv[i]);\n   int num=stoi(argv[i]);\n   int sum=0;\n   if(num>=0 && num<=1000)\n   {\n     while(num!=0)\n     {\n       int rem=num%10;\n       sum=sum+rem;\n       if(rem==3)\n       {\n         t++;\n       }\n       num=num/10;\n     }\n     if(sum%3==0)\n     {\n       d++;\n     }\n     if(t>0 && d>0)\n     {\n       cout<<\"dumb\"<<endl;\n     }\n     else if(d>0 & t==0)\n     {\n       cout<<\"idiot\"<<endl;\n     }\n     else if(t>0)\n     {\n       cout<<\"stupid\"<<endl;\n     }\n     else{\n       cout<<\"smart\"<<endl;\n     }\n   }\n   else\n   {\n     cout<<\"invalid\"<<endl;\n   }\n\n   \n }\n  \n\n  \n  return 0;\n}\n"}
{"id": 2287, "language": "C++", "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <sstream>\n#include <complex>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  string filename = argv[2];\n\n  ifstream reading_file;\n  reading_file.open(filename, ios::in);\n  string reading_line_buffer;\n  //cout << filename;\n  map<char ,int >mp;\n  vector<char> char_list;\n  for (char c = 'a' ; c <= 'z'; c++ ) {\n    mp[c]=0;\n    char_list.push_back(c);\n  }\n  for (char c = 'A' ; c <= 'Z'; c++ ) {\n    mp[c]=0;\n    char_list.push_back(c);\n  }\n  char_list.push_back(' ');\n  while (!reading_file.eof()){\n      // read by line\n      std::getline(reading_file, reading_line_buffer);\n\n      for (int i = 0;i < reading_line_buffer.size();i++){\n        if(isalpha(static_cast<unsigned char>(reading_line_buffer[i])) || reading_line_buffer[i]==' '){\n          mp[reading_line_buffer[i]]++;\n          if(mp[reading_line_buffer[i]]==1){\n            \n          }\n        }      \n      }\n    }\n    sort(char_list.begin(),char_list.end());\n  if (strcmp(argv[1],\"count\")==0){\n    \n    ofstream outputfile(argv[3]);\n    outputfile << \"{\" << \"\\n\";\n    \n    for(int i = 0; i< char_list.size();i++){\n      outputfile << \"\\\"\" << char_list[i] <<\"\\\": \" << mp[char_list[i]] ;\n      if(i!=char_list.size()-1){\n        outputfile << \",\"; \n      } \n      outputfile << \"\\n\";\n    }\n    outputfile << \"}\" << \"\\n\";\n    outputfile.close();\n    return 0;\n  }\n  if (strcmp(argv[1],\"space\")==0){\n    ofstream outputfile(argv[3]);\n    outputfile << \"{\" << \"\\n\";\n    \n    int max=-1;\n    char c;\n    for(int i = 0; i< char_list.size();i++){\n      if(mp[char_list[i]]>max){\n        max=mp[char_list[i]];\n        c=char_list[i];\n      }\n        \n    }\n    outputfile << \"\\\"char\\\": \\\"\" << c <<\"\\\"\"<<endl ;\n    outputfile << \"}\" << endl;\n    outputfile.close();\n    return 0;\n  }\n  if (strcmp(argv[1],\"decrypt\")==0){\n    \n    int max=-1;\n    char space=' ';\n    char e;\n    for(int i = 0; i< char_list.size();i++){\n      if(mp[char_list[i]]>max){\n        max=mp[char_list[i]];\n        e=space;\n        space=char_list[i];        \n      }\n        \n    }\n    int diff;\n    diff=e-'e';\n    printf(\"%d\",diff);\n    ifstream reading_file;\n    reading_file.open(filename, ios::in);\n    string r;\n    ofstream outputfile(argv[3]);\n    while (!reading_file.eof()){\n      // read by line\n      std::getline(reading_file, r);\n\n      for (int i = 0;i < r.size();i++){\n        if(isalpha(static_cast<unsigned char>(r[i])) || r[i]==' '){\n          if(r[i]==' '){\n            r[i]=space;\n          }\n          if(r[i]==space){\n            r[i]=' ';\n          }\n          if( r[i] >= 'a' && r[i]<='z'&& r[i]!=space){\n            if(r[i]-diff<'a'){\n              r[i]=r[i]-diff+26;\n            }\n            if(r[i]-diff>'z'){\n              r[i]=r[i]-diff-26;\n            }\n          }\n          if( r[i] >= 'A' && r[i]<='Z' && r[i]!=space ){\n            if(r[i]-diff<'A'){\n              r[i]=r[i]-diff+26;\n            }\n            if(r[i]-diff<'Z'){\n              r[i]=r[i]-diff-26;\n            }\n          }\n          \n          \n        }      \n      }\n    outputfile << r <<endl ;\n    \n    \n    }\n  outputfile.close();\n  }\n  \n  return 0;\n}\n"}
{"id": 2288, "language": "C", "code": "#include <stdio.h>\nint check_function(int);\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) \n  {\n    if(atoi(argv[i]))\n     {\n       int check=atoi(argv[i]);\n       if((check>=0)&&(check<=1000))\n       {\n       if(check%3==0)\n       {\n         if(check_function(check))\n          printf(\"dumb\\n\");\n         else\n          printf(\"idiot\\n\");\n       }\n       else if(check%3!=0)\n       {\n          if(check_function(check))\n           printf(\"stupid\\n\");\n          else\n           printf(\"smart\\n\");\n       }\n       else\n         printf(\"smart\\n\");\n      }\n      else\n       printf(\"invalid\\n\");\n     }\n     else\n      printf(\"invalid\\n\");\n  }\n  return 0;\n}\nint check_function(int check)\n{\n  int number;\n  if(check==3)\n     return 1;\n  while(check)\n  {\n    number=check%10;\n    if(number==3)\n     return 1;\n    check=check/10;\n  }\n  return 0;\n}"}
{"id": 2289, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Recursive check for digit 3\nint has_three_recursive(int n) {\n    if (n == 0) return 0;\n    if (n % 10 == 3) return 1;\n    return has_three_recursive(n / 10);\n}\n\nvoid solve(const char *s) {\n    char *end;\n    long num = strtol(s, &end, 10);\n\n    if (s == end || *end != '\\0' || num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int div3 = num % 3 == 0;\n    int has3 = has_three_recursive((int)num);\n\n    if (div3 && has3) printf(\"dumb\\n\");\n    else if (div3) printf(\"idiot\\n\");\n    else if (has3) printf(\"stupid\\n\");\n    else printf(\"smart\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        solve(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2290, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\npublic class ExpertQueensSolver\n{\n    private int _columnBitmask;\n    private int _diag1Bitmask; // For r + c diagonals (indices 0-14)\n    private int _diag2Bitmask; // For r - c + 7 diagonals (indices 0-14)\n    private int[] _queenLocations = new int[8]; // Stores column for queen in each row, or -1 if empty\n    private char[,] _outputBoard = new char[8, 8];\n\n    public ExpertQueensSolver(List<Tuple<int, int>> fixedQueens)\n    {\n        // Initialize board and queen location array\n        for (int i = 0; i < 8; i++)\n        {\n            _queenLocations[i] = -1; // -1 means no queen in this row\n            for (int j = 0; j < 8; j++)\n            {\n                _outputBoard[i, j] = '.';\n            }\n        }\n\n        // Place initial queens and update bitmasks\n        foreach (var q in fixedQueens)\n        {\n            int r = q.Item1;\n            int c = q.Item2;\n            \n            _queenLocations[r] = c;\n            _outputBoard[r, c] = 'Q';\n            \n            _columnBitmask |= (1 << c);\n            _diag1Bitmask |= (1 << (r + c));\n            _diag2Bitmask |= (1 << (r - c + 7));\n        }\n    }\n\n    public void StartSolvingAndPrint()\n    {\n        SolveBacktrack(0);\n        PrintResultBoard();\n    }\n\n    private bool SolveBacktrack(int currentRow)\n    {\n        // Base case: All 8 queens are placed successfully\n        if (currentRow == 8)\n        {\n            return true;\n        }\n\n        // If this row already has a queen (from initial setup), move to the next row\n        if (_queenLocations[currentRow] != -1)\n        {\n            return SolveBacktrack(currentRow + 1);\n        }\n\n        // Try placing a queen in each column of the current row\n        for (int col = 0; col < 8; col++)\n        {\n            // Check if placing a queen at (currentRow, col) is safe using bitmasks\n            bool isColumnSafe = ((_columnBitmask >> col) & 1) == 0;\n            bool isDiag1Safe = ((_diag1Bitmask >> (currentRow + col)) & 1) == 0;\n            bool isDiag2Safe = ((_diag2Bitmask >> (currentRow - col + 7)) & 1) == 0;\n\n            if (isColumnSafe && isDiag1Safe && isDiag2Safe)\n            {\n                // Place queen: Update bitmasks and record position\n                _queenLocations[currentRow] = col;\n                _outputBoard[currentRow, col] = 'Q';\n                _columnBitmask |= (1 << col);\n                _diag1Bitmask |= (1 << (currentRow + col));\n                _diag2Bitmask |= (1 << (currentRow - col + 7));\n\n                // Recur for the next row\n                if (SolveBacktrack(currentRow + 1))\n                {\n                    return true; // Solution found\n                }\n\n                // Backtrack: Remove queen by clearing bits and resetting position\n                _queenLocations[currentRow] = -1;\n                _outputBoard[currentRow, col] = '.';\n                _columnBitmask &= ~(1 << col);\n                _diag1Bitmask &= ~(1 << (currentRow + col));\n                _diag2Bitmask &= ~(1 << (currentRow - col + 7));\n            }\n        }\n\n        return false; // No solution found from this path\n    }\n\n    private void PrintResultBoard()\n    {\n        for (int r = 0; r < 8; r++)\n        {\n            for (int c = 0; c < 8; c++)\n            {\n                Console.Write(_outputBoard[r, c]);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\npublic class ApplicationRunner\n{\n    static public void Main(string[] args)\n    {\n        int k = int.Parse(Console.ReadLine());\n        List<Tuple<int, int>> initialQueenLocations = new List<Tuple<int, int>>();\n\n        for (int i = 0; i < k; i++)\n        {\n            string[] inputLine = Console.ReadLine().Split(' ');\n            int r = int.Parse(inputLine[0]);\n            int c = int.Parse(inputLine[1]);\n            initialQueenLocations.Add(Tuple.Create(r, c));\n        }\n        \n        ExpertQueensSolver solver = new ExpertQueensSolver(initialQueenLocations);\n        solver.StartSolvingAndPrint();\n    }\n}"}
{"id": 2291, "language": "Python", "code": "import sys\nimport json\nimport re\n\nclass Detective:\n    def __init__(self, mission, enc_fname, out_fname):\n        self.mission = mission\n        self.enc_fname = enc_fname\n        self.out_fname = out_fname\n        self.char_count = {}\n        self.converter = {}\n        self.shift = 0\n\n        with open(enc_fname, 'r') as lines:\n            self.encrypted_data = lines.read()\n        self.lines_nonl = self.encrypted_data.replace('\\n', '')\n        self.decoded_data = self.encrypted_data\n\n    def _count(self):\n        self.char_count = {}\n        for i in range(65, 65+26):\n            self.char_count[chr(i)] = 0\n        for i in range(97, 97+26):\n            self.char_count[chr(i)] = 0\n        self.char_count[' '] = 0\n        for line in self.lines_nonl:\n            for char in line:\n                if self._is_valid(char):\n                    self.char_count[char] += 1\n\n    # blank should appear right after comma\n    def _guess_blank_with_comma(self):\n        for i in range(len(self.lines_nonl)):\n            if self.lines_nonl[i] == ',':\n                self.converter[' '] = self.lines_nonl[i+1]\n\n    # guess blank with frequency\n    def _guess_blank(self):\n        # times blank should appear\n        _times = len(self.lines_nonl) / 4.5\n        t_ = ()\n        for k, v in self.char_count.items():\n            if len(t_) == 0:\n                t_ = [k, v]\n            else:\n                is_min = abs(t_[1] - _times) - abs(v - _times)\n                if is_min > 0:\n                    t_ = [k, v]\n        self.converter[' '] = t_[0]\n\n    def _decrypt(self):\n        decrypted = ''\n        # replace blank\n        self.lines_nonl = self._replace(\n                self.lines_nonl, ' ', self.converter[' '])\n        # regen. counter\n        self._guess_shift()\n        self._make_converter()\n        # decode blank\n        self.encrypted_data = self._replace(\n                self.encrypted_data, ' ', self.converter[' '])\n        # decode char\n        for i in range(len(self.encrypted_data)):\n            if self.encrypted_data[i] in self.converter.keys() and self.encrypted_data[i] != ' ':\n                decrypted += self.converter[self.encrypted_data[i]]\n            else:\n                decrypted += str(self.encrypted_data[i])\n        return decrypted\n\n    def _make_converter(self):\n        for i in range(len(self.encrypted_data)):\n            char = self.encrypted_data[i]\n            if self._is_valid(char):\n                if char.lower() not in self.converter.keys():\n                    self.converter[char.lower()] = self._decode(char.lower())\n                if char.upper() not in self.converter.keys():\n                    self.converter[char.upper()] = self._decode(char.upper())\n\n    def _replace(self, str_, a, b):\n        tmp = '@@@@@'\n        str_ = str_.replace(a, tmp)\n        str_ = str_.replace(b, a)\n        str_ = str_.replace(tmp, b)\n        return str_\n\n    def _decode(self, char):\n        if self._is_upper(char):\n            return chr((ord(char) - ord('A') - self.shift) % 26 + ord('A'))\n        elif self._is_lower(char):\n            return chr((ord(char) - ord('a') - self.shift) % 26 + ord('a'))\n\n        return char\n\n    def _guess_shift(self):\n        freq_char = ''\n        self._count()\n        self.char_count = sorted(\n                self.char_count.items(), key=lambda x: x[1], reverse=True)\n        for k, v in self.char_count:\n            if k != ' ':\n                freq_char = k\n                break\n        self.shift = ord(freq_char) - ord('e')\n\n    def _print_json(self, dict_):\n        with open(self.out_fname, 'w') as f:\n            f.write(json.dumps(dict_))\n\n    def _print_txt(self, txt):\n        with open(self.out_fname, 'w') as f:\n            f.write(txt)\n\n    def _is_valid(self, char):\n        pattern = re.compile('[A-Za-z]|\\s')\n        return pattern.match(char) is not None\n\n    def _is_upper(self, char):\n        pattern = re.compile('[A-Z]')\n        return pattern.match(char) is not None\n\n    def _is_lower(self, char):\n        pattern = re.compile('[a-z]')\n        return pattern.match(char) is not None\n\n    def accomplish(self):\n        if self.mission == 'count':\n            self._count()\n            self._print_json(self.char_count)\n        elif self.mission == 'space':\n            self._count()\n            self._guess_blank()\n            dict_ = {\"char\": self.converter[\" \"]}\n            self._print_json(dict_)\n        elif self.mission == 'decrypt':\n            self._count()\n            self._guess_blank()\n            plain = self._decrypt()\n            self._print_txt(plain)\n\ndef main(argv):\n    # count, space, decrypt\n    cmd = argv[1]\n    # encrypted file\n    enc_fname = argv[2]\n    # output filename\n    out_fname = argv[3]\n\n    detective = Detective(cmd, enc_fname, out_fname)\n    detective.accomplish()\n\nif __name__ == '__main__':\n    main(sys.argv)"}
{"id": 2292, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int robot;\n    int you;\n} Record;\n\nint main(int argc, char *argv[]) {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306fRock Paper Scissors\u306e\u30ed\u30dc\u30c3\u30c8\u306e\u6b21\u306e\u624b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n    if (argc != 2) {\n        return 1; // \u5f15\u6570\u306e\u6570\u304c\u6b63\u3057\u304f\u306a\u3044\u5834\u5408\n    }\n\n    const char *filename = argv[1];\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        return 1; // \u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u5931\u6557\n    }\n\n    Record records[100];\n    int count = 0;\n\n    // JSON\u306e\u8aad\u307f\u8fbc\u307f\uff08\u7c21\u6613\u7684\u306a\u5b9f\u88c5\uff09\n    char buffer[256];\n    while (fgets(buffer, sizeof(buffer), file)) {\n        if (count >= 100) break;\n        sscanf(buffer, \"{\\\"robot\\\": %d, \\\"you\\\": %d}\", &records[count].robot, &records[count].you);\n        count++;\n    }\n    fclose(file);\n\n    // \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n    int robotHands[3] = {0, 1, 2}; // rock, scissors, paper\n    int index = 0; // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7ba1\u7406\u7528\n\n    // \u6700\u5f8c\u306e\u30b2\u30fc\u30e0\u306e\u60c5\u5831\n    int lastRobot = records[count - 1].robot;\n    int lastYou = records[count - 1].you;\n\n    // \u540c\u3058\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u304c\u7d9a\u3051\u3089\u308c\u305f\u304b\u3092\u78ba\u8a8d\n    for (int i = count - 1; i >= 0; i--) {\n        if (records[i].robot == lastRobot && records[i].you == lastYou) {\n            index++;\n        } else {\n            break;\n        }\n    }\n\n    // \u6b21\u306e\u624b\u3092\u6c7a\u5b9a\n    printf(\"%d\\n\", robotHands[(index % 3)]);\n\n    return 0;\n}"}
{"id": 2293, "language": "C", "code": "#include <stdio.h>\n\nlong my_atoi(const char *s, int *valid) {\n    long res = 0;\n    *valid = 1;\n    if (!s || *s == '\\0') {\n        *valid = 0;\n        return 0;\n    }\n    while(*s) {\n        if (*s >= '0' && *s <= '9') {\n            res = res * 10 + (*s - '0');\n        } else {\n            *valid = 0;\n            return 0;\n        }\n        s++;\n    }\n    return res;\n}\n\nint has_three(long n) {\n    if (n == 0) return 0;\n    while(n > 0) {\n        if (n % 10 == 3) return 1;\n        n /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        int is_valid_num;\n        long n = my_atoi(argv[i], &is_valid_num);\n\n        if (!is_valid_num || n > 1000) {\n            puts(\"invalid\");\n            continue;\n        }\n\n        int div3 = (n % 3 == 0);\n        int has3 = has_three(n);\n\n        if (div3 && has3) puts(\"dumb\");\n        else if (div3) puts(\"idiot\");\n        else if (has3) puts(\"stupid\");\n        else puts(\"smart\");\n    }\n    return 0;\n}"}
{"id": 2294, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int num,rem,num_copy,flag;\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    flag=0;\n    //cout<<\"hello\"<<endl;\n    if(atoi(argv[i])==0)\n    {\n      cout<<\"invalid\"<<endl;\n    }\n    else\n    {\n    num=atoi(argv[i]);\n    num_copy=num;\n    while(num_copy!=0)\n    {\n      rem=num_copy%10;\n      if(rem==3)\n      {\n        flag=1;\n        break;\n      }\n      num_copy=num_copy/10;\n    }\n    if(flag==1 && num %3==0)\n    {\n      cout<<\"dumb\"<<endl;\n    }\n    else if(flag==1)\n    {\n      cout<<\"stupid\"<<endl;\n    }\n    else if(num%3==0)\n    {\n      cout<<\"idiot\"<<endl;\n    }\n    \n    else\n    {\n      cout<<\"smart\"<<endl;\n    }\n  }\n  }\n  return 0;\n}\n"}
{"id": 2295, "language": "Java", "code": "package track;\nimport java.io.*;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t// String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String d[]=args[i].split(\" \");\n      for(int j=0;j<d.length;j++)\n      {\n        \n        \n        try\n        {\n          int k=Integer.parseInt(d[j]) ;     \n          int z=0,e=k;\n          while(k>0)\n          {\n            if(k%10==3)\n            z=1;\n            k/=10;\n          }\n          if(e%3==0&&z==1)\n          System.out.println(\"dumb\");\n          else if(e%3==0&&z==0)\n          System.out.println(\"idiot\");\n          else if(e%3!=0&&z==1)\n          System.out.println(\"stupid\");\n          else \n          System.out.println(\"smart\");\n        }\n        catch(Exception er){\n          System.out.println(\"invalid\"+ d[j]);\n        }\n      }\n      }\n\t\t}\n\t}\n\n"}
{"id": 2296, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  print(1)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2297, "language": "Python3", "code": "import sys\n\nqueen_cols = [-1] * 8\nis_row_preset = [False] * 8\nis_col_taken = [False] * 8\ndiag_slash = [False] * 15\ndiag_backslash = [False] * 15\n\ndef recurse_solve(r):\n    if r == 8:\n        for col_pos in queen_cols:\n            print('.' * col_pos + 'Q' + '.' * (7 - col_pos))\n        return True\n\n    if is_row_preset[r]:\n        return recurse_solve(r + 1)\n    \n    for c in range(8):\n        if not is_col_taken[c] and not diag_slash[r+c] and not diag_backslash[r-c+7]:\n            queen_cols[r] = c\n            is_col_taken[c] = True\n            diag_slash[r+c] = True\n            diag_backslash[r-c+7] = True\n            \n            if recurse_solve(r + 1):\n                return True\n            \n            is_col_taken[c] = False\n            diag_slash[r+c] = False\n            diag_backslash[r-c+7] = False\n    \n    return False\n\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    for _ in range(k):\n        r_in, c_in = map(int, sys.stdin.readline().split())\n        queen_cols[r_in] = c_in\n        is_row_preset[r_in] = True\n        is_col_taken[c_in] = True\n        diag_slash[r_in+c_in] = True\n        diag_backslash[r_in-c_in+7] = True\n    \n    recurse_solve(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2298, "language": "C++", "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool containsT;\nbool isNumberOnly(string str)\n{\n    for(int i=0;i<str.size();i++)\n    {\n        if(str[i]=='3')\n            containsT=true;\n        if(str[i]<'0'||str[i]>'9')\n            return false;\n    }\n    return true;\n}\n\nint main(int argc, char *argv[])\n{\n    string str;\n    for(int i=1;i<argc;i++)\n    {\n        str=argv[i];\n        containsT=false;\n        if(!isNumberOnly(str))\n            cout<<\"invalid\"<<endl;\n        else\n        {\n            int n=atoi(str.c_str());\n            if(containsT==true&&n%3==0)\n                cout<<\"dumb\"<<endl;\n            else if(n%3==0)\n                cout<<\"idiot\"<<endl;\n            else if(containsT)\n                cout<<\"stupid\"<<endl;\n            else\n                cout<<\"smart\"<<endl;\n        }\n    }\n    return 0;\n}\n"}
{"id": 2299, "language": "Python3", "code": "import sys\n\ndef identify_idiot_type(s_value):\n    if not s_value.isdigit():\n        return \"invalid\"\n    \n    n_value = int(s_value)\n    \n    if not (0 <= n_value <= 1000):\n        return \"invalid\"\n\n    div3_test = (n_value % 3 == 0)\n    has3_test = ('3' in s_value)\n\n    if div3_test and has3_test:\n        return \"dumb\"\n    elif div3_test:\n        return \"idiot\"\n    elif has3_test:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef primary_execution(cli_argument_list):\n    for argument_value in cli_argument_list:\n        print(identify_idiot_type(argument_value))\n\nif __name__ == '__main__':\n    primary_execution(sys.argv[1:])"}
{"id": 2300, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.Arrays;\n\npublic class StreamProcessor {\n\n  private static String deriveLabel(int number) {\n    if (number < 0 || number > 1000) {\n      return \"invalid\";\n    }\n    boolean divisibleByThree = (number % 3 == 0);\n    boolean containsDigitThree = String.valueOf(number).contains(\"3\");\n\n    return (divisibleByThree && containsDigitThree) ? \"dumb\" :\n           (divisibleByThree) ? \"idiot\" :\n           (containsDigitThree) ? \"stupid\" : \"smart\";\n  }\n\n  public static void main(String[] arguments) {\n    Arrays.stream(arguments)\n          .map(arg -> {\n            Scanner sc = new Scanner(arg);\n            String result;\n            if (sc.hasNextInt()) {\n              result = deriveLabel(sc.nextInt());\n            } else {\n              result = \"invalid\";\n            }\n            sc.close();\n            return result;\n          })\n          .forEach(System.out::println);\n  }\n}"}
{"id": 2301, "language": "Python3", "code": "def is_queen_safe(board, row, col):\n    # Check rows, columns, and diagonals\n    for i in range(8):\n        if board[row][i] == 'Q' or board[i][col] == 'Q':\n            return False\n    for i, j in zip(range(row-7, row+8), range(col-7, col+8)):\n        if 0 <= i < 8 and 0 <= j < 8 and abs(row - i) == abs(col - j) and board[i][j] == 'Q':\n            return False\n    return True\n\ndef place_queen(board, row, queens_count):\n    if queens_count == 8:\n        return True\n    for col in range(8):\n        if is_queen_safe(board, row, col):\n            board[row][col] = 'Q'\n            if place_queen(board, row + 1, queens_count + 1):\n                return True\n            board[row][col] = '.'  # Backtrack\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read()\n    lines = input.splitlines()\n    k = int(lines[0])\n    queens = [tuple(map(int, line.split())) for line in lines[1:k + 1]]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in queens:\n        board[r][c] = 'Q'\n\n    if place_queen(board, k, k):\n        for row in board:\n            print(''.join(row))\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 2302, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <string>\nusing namespace std;\n\nstruct Play {\n  int robot, you;\n};\n\n// \u7c21\u6613\u306aJSON\u30d1\u30fc\u30b5\u3002\u7121\u3044\u3068\u304d\u306f-1\u8fd4\u3059\nvector<Play> parse(const string &filename) {\n  vector<Play> plays;\n  ifstream infile(filename);\n  string s((istreambuf_iterator<char>(infile)), istreambuf_iterator<char>());\n  int i = 0, n = s.size();\n  while (i < n) {\n    size_t pos = s.find(\"\\\"robot\\\"\", i);\n    if (pos == string::npos) break;\n    size_t p1 = s.find(\":\", pos);\n    size_t p2 = s.find(\",\", p1);\n    int rob = stoi(s.substr(p1 + 1, p2 - p1));\n    pos = s.find(\"\\\"you\\\"\", p2);\n    size_t q1 = s.find(\":\", pos);\n    size_t q2 = s.find(\"}\", q1);\n    int you = stoi(s.substr(q1 + 1, q2 - q1));\n    i = q2 + 1;\n    plays.push_back({rob, you});\n  }\n  return plays;\n}\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) return 1;\n  vector<Play> recs = parse(argv[1]);\n  if (recs.size() < 4) {\n    // always starts: rock,scissors,paper\n    int seq[3] = {0,1,2};\n    cout << seq[recs.size()] << endl;\n    return 0;\n  }\n\n  // \u30d1\u30e9\u30e1\u30bf(3\u624b+\u76f8\u624b\u624b)\u2192robot\u306e\u624b\u306e\u5c65\u6b74\n  map<string, vector<int>> pattern_map;\n\n  for (size_t i = 3; i < recs.size(); ++i) {\n    string key = to_string(recs[i-3].robot) + to_string(recs[i-2].robot) + to_string(recs[i-1].robot) + to_string(recs[i-1].you);\n    pattern_map[key].push_back(recs[i].robot);\n  }\n\n  string cur_key = to_string(recs[recs.size()-3].robot) + to_string(recs[recs.size()-2].robot) + to_string(recs[recs.size()-1].robot) + to_string(recs[recs.size()-1].you);\n\n  int next_robot_hand = 0; // \u30c7\u30d5\u30a9\u30eb\u30c8\n  if (pattern_map.count(cur_key)) {\n    int len = pattern_map[cur_key].size();\n    next_robot_hand = (pattern_map[cur_key][len - 1] + 1) % 3;\n  } else {\n    // \u30d1\u30bf\u30fc\u30f3\u304c\u306a\u3044\u5834\u5408\u6700\u521d\u306frock\n    next_robot_hand = 0;\n  }\n\n  // \u52dd\u3064\u624b\u3092\u51fa\u3059\n  int win_hand = (next_robot_hand + 2) % 3;\n  cout << win_hand << endl;\n  return 0;\n}"}
{"id": 2303, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int num)\n{\n\tif(num % 3 == 0)\n\t{\n\t\treturn true;\n\t}else\n  {\n\t\treturn false;\n\t}\n\t}\nbool stupid(int num)\n{\n\tint s = num,s1;\n\twhile(s!=0)\n\t{\n\ts1 = s%10;\n\tif(s1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\ts/=10;\n\t}\n\treturn false;\n}\nbool dumb(int num)\n{\nif(idiot(num) && stupid(num))\n{\n\treturn true;\n}else\n{\n\treturn false;\n}\n}\nbool smart(int num)\n{\n\tif(!idiot(num) && !stupid(num))\n\t{\n\t\treturn true;\n\t}else\n  {\n\t\treturn false;\n\t}\n}\nbool invalid(int num)\n{\t\n\tif(!stupid(num) && !idiot(num) && !dumb(num) && !smart(num))\n\t{\n\treturn true;\n\t}else\n  {\n\treturn false;\n\t}\n  }\nint main(int argc,char* argv[])\n{\nint length = argc-1,i = 1;\nfor(i = 1;i<=length;i++)\n{\nint num = atoi(argv[i]);\nif(num!=0)\n{\n\tif(idiot(num) && stupid(num))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else\n  {\n  if(idiot(num))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(stupid(num)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(smart(num)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(num)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t}\n }\n else\n{\n  printf(\"invalid\\n\");\n}\n}\n}"}
{"id": 2304, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n/**\n * Calculates the result of the \"3 Idiots Algorithm\" for a given input value.\n *\n * @param string $inputValue The input string to evaluate.\n * @return string The algorithm result: \"idiot\", \"stupid\", \"dumb\", \"smart\", or \"invalid\".\n */\nfunction getBakaAlgorithmResult(string $inputValue): string {\n    // Check if the input is a valid non-negative integer string.\n    // This regex ensures it's composed only of digits from start to end.\n    if (!preg_match('/^\\d+$/', $inputValue)) {\n        return \"invalid\";\n    }\n\n    $num = (int)$inputValue;\n\n    // Check if the number is within the allowed range (0 to 1000).\n    if ($num > 1000) {\n        return \"invalid\";\n    }\n\n    $isMultipleOf3 = ($num % 3 === 0);\n    $containsDigit3 = (strpos((string)$num, '3') !== false);\n\n    // Apply the algorithm rules in order of precedence.\n    if ($isMultipleOf3 && $containsDigit3) {\n        return \"dumb\";\n    } elseif ($isMultipleOf3) {\n        return \"idiot\";\n    } elseif ($containsDigit3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nfunction main ($argc, $argv) {\n  // $argv contains only the command-line arguments passed by the user,\n  // excluding the script name, due to the array_slice in the template.\n  foreach ($argv as $arg) {\n    echo getBakaAlgorithmResult($arg) . \"\\n\";\n  }\n}\n\n// The template automatically prepares $argc and $argv for the main function.\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2305, "language": "Java", "code": "package track;\n\npublic class Task {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            String result = solveIt(arg);\n            System.out.println(result);\n        }\n    }\n\n    private static String solveIt(String input) {\n        if (!isNumeric(input)) {\n            return \"invalid\";\n        }\n        int n = Integer.parseInt(input);\n        if (n < 0 || n > 1000) {\n            return \"invalid\";\n        }\n        \n        boolean isDivisible = n % 3 == 0;\n        boolean hasThree = input.contains(\"3\");\n        \n        if (isDivisible) {\n            return hasThree ? \"dumb\" : \"idiot\";\n        } else {\n            return hasThree ? \"stupid\" : \"smart\";\n        }\n    }\n\n    private static boolean isNumeric(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        for (char c : str.toCharArray()) {\n            if (c < '0' || c > '9') {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"id": 2306, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst int N = 8;\n\nint pos[N]; // pos[row] = col of queen at row\nbool exists[N][N];\nbool usedCol[N], usedDiag1[2*N-1], usedDiag2[2*N-1];\nbool finished = false;\n\nvoid print_board() {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (pos[i] == j) cout << 'Q';\n            else cout << '.';\n        }\n        cout << endl;\n    }\n}\n\nbool can_place(int r, int c) {\n    // \u65e2\u306b\u7e26\u6a2a\u659c\u3081\u306b\u30af\u30a4\u30fc\u30f3\u304c\u3044\u306a\u3044\u304b\n    return !usedCol[c] && !usedDiag1[r+c] && !usedDiag2[r-c+N-1];\n}\n\nvoid rec(int r) {\n    if (r == N) {\n        print_board();\n        finished = true;\n        return;\n    }\n    if (finished) return;\n\n    // \u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u7f6e\u304b\u308c\u3066\u3044\u305f\u3089\u4f4d\u7f6e\u306f\u52d5\u304b\u305b\u306a\u3044\n    for (int c = 0; c < N; ++c) {\n        if (exists[r][c]) {\n            if (!can_place(r, c)) return;\n            // \u914d\u7f6e\n            pos[r] = c;\n            usedCol[c] = true;\n            usedDiag1[r+c] = true;\n            usedDiag2[r-c+N-1] = true;\n            rec(r+1);\n            usedCol[c] = false;\n            usedDiag1[r+c] = false;\n            usedDiag2[r-c+N-1] = false;\n            return; // \u5fc5\u305a1\u7b87\u6240\u306a\u306e\u3067\u4ed6\u8a66\u3055\u306a\u3044\n        }\n    }\n\n    // \u901a\u5e38\u914d\u7f6e\n    for (int c = 0; c < N; ++c) {\n        if (can_place(r, c)) {\n            pos[r] = c;\n            usedCol[c] = true;\n            usedDiag1[r+c] = true;\n            usedDiag2[r-c+N-1] = true;\n            rec(r+1);\n            usedCol[c] = false;\n            usedDiag1[r+c] = false;\n            usedDiag2[r-c+N-1] = false;\n            if (finished) return;\n        }\n    }\n}\n\nint main() {\n    int k;\n    cin >> k;\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j)\n            exists[i][j] = false;\n    }\n    for (int i = 0; i < N; ++i) pos[i] = -1;\n\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        cin >> r >> c;\n        exists[r][c] = true;\n    }\n\n    rec(0);\n\n    return 0;\n}"}
{"id": 2307, "language": "Python3", "code": "import sys\n\ndef get_idiots_answer(s_val):\n    if not s_val.isdigit():\n        return \"invalid\"\n    \n    i_val = int(s_val)\n    \n    if not (0 <= i_val <= 1000):\n        return \"invalid\"\n\n    div3_cond = (i_val % 3 == 0)\n    has3_cond = ('3' in s_val)\n\n    if div3_cond and has3_cond: return \"dumb\"\n    if div3_cond: return \"idiot\"\n    if has3_cond: return \"stupid\"\n    return \"smart\"\n\ndef initiate_cli(cmd_args):\n    for arg in cmd_args:\n        print(get_idiots_answer(arg))\n\nif __name__ == '__main__':\n    initiate_cli(sys.argv[1:])"}
{"id": 2308, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_characters(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    char_count = Counter(c for c in text if c.isalpha() or c.isspace())\n    with open(output_file, 'w') as out_file:\n        json.dump(char_count, out_file)\n\ndef find_space_character(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    char_count = Counter(text)\n    sorted_char = char_count.most_common()\n    for char, _ in sorted_char:\n        if char.isalpha():\n            space_char = char\n            break\n    with open(output_file, 'w') as out_file:\n        json.dump({\"char\": space_char}, out_file)\n\ndef decrypt_text(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    shift = 2  # Example shift for the decryption\n    space_char = 'e'  # This should be determined via the space command in practice\n\n    decrypted_text = ''\n    for c in text:\n        if c.isalpha():\n            shifted = chr((ord(c.lower()) - 97 - shift) % 26 + 97)\n            if c.isupper():\n                shifted = shifted.upper()\n            decrypted_text += shifted\n        elif c == space_char:\n            decrypted_text += ' '\n        else:\n            decrypted_text += c\n    with open(output_file, 'w') as out_file:\n        out_file.write(decrypted_text)\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n\n    if command == 'count':\n        count_characters(input_file, output_file)\n    elif command == 'space':\n        find_space_character(input_file, output_file)\n    elif command == 'decrypt':\n        decrypt_text(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2309, "language": "Python3", "code": "import sys\n\ndef get_idiot_classification(data_string):\n    if not data_string.isdigit():\n        return \"invalid\"\n    \n    numerical_data = int(data_string)\n    \n    if not (0 <= numerical_data <= 1000):\n        return \"invalid\"\n\n    is_multiple_of_3 = (numerical_data % 3 == 0)\n    contains_the_digit_3 = ('3' in data_string)\n\n    if is_multiple_of_3 and contains_the_digit_3:\n        return \"dumb\"\n    elif is_multiple_of_3:\n        return \"idiot\"\n    elif contains_the_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef process_command_line_arguments(input_arguments):\n    for current_arg in input_arguments:\n        print(get_idiot_classification(current_arg))\n\nif __name__ == '__main__':\n    process_command_line_arguments(sys.argv[1:])"}
{"id": 2310, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n\n// Manually parses a C-style string to an integer\nbool myManualParseInt(const char* s, int& result) {\n    result = 0;\n    bool is_negative = false;\n    int i = 0;\n\n    if (s[0] == '-') { // Not needed for this problem (0-1000) but good practice\n        is_negative = true;\n        i = 1;\n    }\n\n    if (s[i] == '\\0') return false; // Empty string or just '-'\n\n    bool has_digits = false;\n    for (; s[i] != '\\0'; ++i) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            result = result * 10 + (s[i] - '0');\n            has_digits = true;\n        } else {\n            return false; // Non-digit character found\n        }\n    }\n\n    if (is_negative) result = -result;\n    return has_digits; // Return true only if at least one digit was processed\n}\n\nint main(int argc, char *argv[]) {\n    for (int arg_idx = 1; arg_idx < argc; ++arg_idx) {\n        int parsed_number;\n        if (!myManualParseInt(argv[arg_idx], parsed_number)) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (parsed_number < 0 || parsed_number > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool div3 = (parsed_number % 3 == 0);\n        std::string s_num = std::to_string(parsed_number);\n        bool contains_3 = (s_num.find('3') != std::string::npos);\n\n        if (div3 && contains_3) {\n            std::cout << \"dumb\\n\";\n        } else if (div3) {\n            std::cout << \"idiot\\n\";\n        } else if (contains_3) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 2311, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for i in argv:  \n      if i.isdigit() and i!=\"\uff11\uff13\" and  int(i)>=0 and int(i)<=1000:\n        if int(i)%3==0 and \"3\" in i:\n          print(\"dumb\")\n        elif int(i)%3==0:\n          print(\"idiot\")\n        elif \"3\" in i:\n          print(\"stupid\")\n        else:\n          print(\"smart\") \n      else:\n          print(\"invalid\")\n      \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2312, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length == 0) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int limit = 0;\n    try {\n      limit = Integer.parseInt(args[0]);\n    } catch (NumberFormatException ex) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n    if (limit == 0) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    StringBuilder last = new StringBuilder();\n    final String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    Random r = new Random();\n\n    for (int i = 0; i < limit; ++i) {\n      String syll = r.nextInt(2) == 0 ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(syll);\n      last.append(syll);\n      if (last.length() > 8) last.deleteCharAt(0);\n\n      if (last.length() == 8 && last.toString().equals(pattern)) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2313, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    for i, v in enumerate(argv):\n        print(\"argv[{0}]: {1}\".format(i, v))\n\n    \ndef isPresent(number):\n  flag = 0\n  while(number > 0):\n    if(number%10 == 3):\n      flag = 1\n      break\n    number = number/10\n  return flag\n\n\nif __name__ == '__main__':\n    #main(sys.argv[1:])\n  args = sys.argv[1:]\n  result = 0\n\n  for i in args:\n    try:\n      i = int(i)\n      if(i%3 == 0):\n        if(isPresent(i) == 1 and i%3 == 0):\n          print(\"dumb\")\n        else:\n          print(\"idiot\")\n\n      elif(isPresent(i) == 1):\n        if(isPresent(i) == 1 and i%3 == 0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      else:\n        print(\"smart\")\n\n    except ValueError:\n      print(\"invalid\")\n    \n    \n"}
{"id": 2314, "language": "Python3", "code": "import sys\n\nn = 8\nboardArray = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]\nqueen = [0,0,0,0,0,0,0,0]\nq = []\n\ndef setQueen(queenArray,board,i):\n  if i == n:\n    if check(queenArray):\n      printBoard(queenArray)\n    return \n  for j in range(n):\n    if board[i][j] == 0:\n      queenArray[i] = j\n      changeBoard(board,i,j,1)\n      setQueen(queenArray, board, i+1)\n      changeBoard(board, i, j, -1)\n\ndef changeBoard(board,i,j,d):\n  for k in range(n):\n    board[i][k] += d\n    board[k][j] += d\n  if i > j:\n    for k in range(n - (i -j)):\n      board[k+(i-j)][k] += d\n  else :\n    for k in range(n - (j -i)):\n      board[k][k+(j-i)] += d\n  \n  if i+j < n:\n    for k in range(i+j+1):\n      board[i+j-k][k] += d\n  else :\n    for k in range(i + j -n +1,n):\n      board[i+j-k][k] += d\n\ndef printBoard(queen):\n  for i in range(8):\n    s = \"\"\n    for j in range(8):\n      if queen[i] == j:\n        s += \"Q\"\n      else:\n        s += \".\"\n    print(s)\n\ndef check(queen):\n  for i in range(len(q)):\n    if queen[q[i][0]] != q[i][1]:\n      return False\n  return True\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    path = argv[0]\n    with open(path) as f:\n      l_strip = [s.strip() for s in f.readlines()]\n    k = int(l_strip[0])\n    l = l_strip[1:]\n    for i in range(k):\n      a = l[i].split()\n      q.append([int(a[0]),int(a[1])])\n    \n    setQueen(queen, boardArray, 0)\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2315, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    int number = Integer.parseInt(args[0]);\n    \n    // \u5404\u6841\u3092\u4e8b\u524d\u306b\u5b9a\u7fa9\u3057\u305f\u914d\u5217\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\n    String[] M = {\"\", \"M\", \"MM\", \"MMM\"};\n    String[] C = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    String[] X = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    String[] I = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n    \n    String thousands = M[number/1000];\n    String hundreds = C[(number%1000)/100];\n    String tens = X[(number%100)/10];\n    String ones = I[number%10];\n        \n    String result = thousands + hundreds + tens + ones;\n\n    System.out.println(result);\n  }\n}"}
{"id": 2316, "language": "Java", "code": "package checkerboard;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class EightQueensSolver {\n    private static final int SIZE = 8;\n    private static char[][] board = new char[SIZE][SIZE];\n    private static boolean[] colOccupied = new boolean[SIZE];\n    private static boolean[] diagLeftOccupied = new boolean[2 * SIZE - 1];\n    private static boolean[] diagRightOccupied = new boolean[2 * SIZE - 1];\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        for (int i = 0; i < SIZE; i++) {\n            Arrays.fill(board[i], '.');\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            placeQueen(r, c);\n        }\n\n        solve(0);\n        printBoard();\n    }\n\n    private static void solve(int row) {\n        if (row == SIZE) return;\n\n        for (int col = 0; col < SIZE; col++) {\n            if (canPlace(row, col)) {\n                placeQueen(row, col);\n                solve(row + 1);\n                if (isBoardCompletelyFilled()) return; // Stop early\n                removeQueen(row, col);\n            }\n        }\n    }\n\n    private static boolean isBoardCompletelyFilled() {\n        for (int i = 0; i < SIZE; i++) {\n            for (int j = 0; j < SIZE; j++) {\n                if (board[i][j] == '.') return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean canPlace(int r, int c) {\n        if (colOccupied[c] || diagLeftOccupied[r - c + SIZE - 1] || diagRightOccupied[r + c]) return false;\n        return true;\n    }\n\n    private static void placeQueen(int r, int c) {\n        colOccupied[c] = true;\n        diagLeftOccupied[r - c + SIZE - 1] = true;\n        diagRightOccupied[r + c] = true;\n        board[r][c] = 'Q';\n    }\n\n    private static void removeQueen(int r, int c) {\n        colOccupied[c] = false;\n        diagLeftOccupied[r - c + SIZE - 1] = false;\n        diagRightOccupied[r + c] = false;\n        board[r][c] = '.';\n    }\n\n    private static void printBoard() {\n        for (char[] row : board) {\n            System.out.println(new String(row));\n        }\n    }\n}"}
{"id": 2317, "language": "Python3", "code": "import sys\n\ndef main(argv):\n\n    for i in range(len(argv)):\n      if(int(argv[i])%3==0) and (\"3\" in argv[i]):\n        print(\"dumb\")\n      elif(int(argv[i])%3==0):\n        print(\"idiot\")\n      elif(\"3\" in argv[i]):\n        print(\"stupid\")\n      else:\n        print(\"smart\")\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2318, "language": "Python3", "code": "import sys\nimport copy\n\ndef impossible(field,r,c):\n  field[r][c] = 1  \n  for i in range(8):\n    for j in range(8):\n      if i == r or j == c:\n        field[i][j] = 1\n  \n  r_now, c_now = r,c\n  while True:\n    r_now -= 1\n    c_now -= 1\n\n    if r_now >= 0 and c_now >=0:\n      field[r_now][c_now] = 1\n    else:\n      break\n\n  r_now, c_now = r,c\n  while True:\n    r_now -= 1\n    c_now += 1\n\n    if r_now >= 0 and c_now < 8:\n      field[r_now][c_now] = 1\n    else:\n      break\n  \n  r_now, c_now = r,c\n  while True:\n    r_now += 1\n    c_now -= 1\n\n    if r_now < 8 and c_now >=0:\n      field[r_now][c_now] = 1\n    else:\n      break\n  \n  r_now, c_now = r,c\n  while True:\n    r_now += 1\n    c_now += 1\n\n    if r_now < 8 and c_now < 8:\n      field[r_now][c_now] = 1\n    else:\n      break\n  \n  return field\n\ndef print_field(field):\n  for i in range(8):\n    for j in range(8):\n      if field[i][j] == 0:\n        print(\".\",end=\"\")\n      else:\n        print(\"Q\",end=\"\")\n    print()\n  \n\ndef search(position,impossible_field,default_r,depth):\n  if depth in default_r:\n    search(position,impossible_field,default_r,depth+1)\n  else:\n    if depth == 8:\n      print_field(position)\n      return\n    for i in range(8):\n      if impossible_field[depth][i] == 0:\n        position[depth][i] = 1\n        temporary_impossible = copy.deepcopy(impossible_field)\n        temporary_impossible = impossible(temporary_impossible,depth,i)\n\n        search(position,temporary_impossible,default_r,depth+1)\n\n        position[depth][i] = 0\n  return\n\ndef main(argv):\n    with open(argv[0], \"r\") as file:\n      position = [[0 for i in range(8)] for j in range(8)]\n      impossible_field = [[0 for i in range(8)] for j in range(8)]\n      default_r = []\n    \n      k = int(file.readline().replace(\"\\n\",\"\"))\n\n      line = file.readline().replace(\"\\n\",\"\")\n      while line:\n        r,c = line.split(\" \")\n        r,c = int(r), int(c)\n        default_r.append(r)\n        position[r][c] = 1\n        impossible_field = impossible(impossible_field,r,c)\n        \n        line = file.readline().replace(\"\\n\",\"\")\n\n    search(position,impossible_field,default_r,0)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2319, "language": "Java", "code": "package track;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Random;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    int max;\n    try {\n      max = Integer.parseInt(args[0]);\n      if (max < 1) {\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        return;\n      }\n    } catch (Exception e) {\n      System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n      return;\n    }\n\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    Queue<String> buffer = new LinkedList<>();\n    StringBuilder builder = new StringBuilder();\n    Random gen = new Random();\n\n    for (int i = 0; i < max; i++) {\n      String taiko = gen.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(taiko);\n      if (buffer.size() == 8) buffer.poll();\n      buffer.offer(taiko);\n\n      builder.setLength(0);\n      for (String t : buffer) builder.append(t);\n\n      if (builder.length() == 8 && builder.toString().equals(pattern)) {\n        System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2320, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isNumeric(const string &input) {\n    for(char c:input) if(!isdigit(c)) return false;\n    return !input.empty();\n}\n\nbool contains3(const string &input) {\n    for(char c:input) if(c=='3') return true;\n    return false;\n}\n\nint main(int argc, char* argv[]) {\n    for(int i=1; i<argc; ++i) {\n        string s(argv[i]);\n        if(!isNumeric(s)) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int v = stoi(s);\n        if(v<0 || v>1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool div3 = v%3==0;\n        bool has3 = contains3(s);\n        if(div3 && has3) cout << \"dumb\\n\";\n        else if(div3) cout << \"idiot\\n\";\n        else if(has3) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 2321, "language": "Python3", "code": "import sys\n\ndef result_by_conditions(value):\n    if value < 0 or value > 1000:\n        return \"invalid\"\n    if '3' in str(value) and value % 3 == 0:\n        return \"dumb\"\n    if value % 3 == 0:\n        return \"idiot\"\n    if '3' in str(value):\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    # This code checks numbers based on the 3 Idiots Algorithm.\n    results = []\n    \n    for item in argv:\n        if item.isdigit():\n            number = int(item)\n            results.append(result_by_conditions(number))\n        else:\n            results.append(\"invalid\")\n    \n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2322, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_chars(file_path, output_path):\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        text = f.read()\n\n    # Count only uppercase, lowercase alphabets and spaces\n    chars = [c for c in text if c.isalpha() or c == ' ']\n    counter = Counter(chars)\n\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(counter, f, ensure_ascii=False)\n\n\ndef find_space_char(file_path, output_path):\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        text = f.read()\n\n    # Count frequency of alphabets and spaces\n    counter = Counter(c for c in text if c.isalpha() or c == ' ')\n\n    # space replaced char is the most frequent alphabet (replace space)\n    # Because space is replaced with one small letter\n    # So find the letter with count closest to space count\n    space_count = counter[' ']\n    del counter[' ']\n\n    # Find character that replaced space: the one whose count difference with space_count minimized\n    # Actually space chars replaced one letter, so the letter replaced space will appear a lot\n    # Here we select the character with count closest to space_count\n    chars = [(abs(freq - space_count), ch) for ch, freq in counter.items()]\n    chars.sort()\n    replaced_char = chars[0][1]\n\n    # output json\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump({\"char\": replaced_char}, f, ensure_ascii=False)\n\n\ndef decrypt_text(file_path, output_path):\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        text = f.read()\n\n    # Count freq of alphabets and spaces\n    counter = Counter(c for c in text if c.isalpha() or c == ' ')\n    space_count = counter[' ']\n    del counter[' ']\n\n    # identify letter representing space: freq closest to space_count\n    chars = [(abs(freq - space_count), ch) for ch, freq in counter.items()]\n    chars.sort()\n    space_char = chars[0][1]\n\n    # Helper to convert char to lowercase alphabet index\n    def idx(c):\n        return ord(c.lower()) - ord('a')\n\n    # Helper to shift a char by n in alphabet cycle\n    def shift_char(c, n):\n        if not c.isalpha():\n            return c\n        base = ord('A') if c.isupper() else ord('a')\n        return chr((ord(c) - base - n) % 26 + base)\n\n    # After swapping space_char and space, reverse the swap\n    swapped_text = []\n    for ch in text:\n        if ch == space_char:\n            swapped_text.append(' ')\n        elif ch == ' ':\n            swapped_text.append(space_char)\n        else:\n            swapped_text.append(ch)\n    swapped_text = \"\".join(swapped_text)\n\n    # Now try all 26 shifts to find most probable\n    # Heuristic: the decrypted text contains 'e' most frequent among alphabets\n    best_shift = 0\n    best_e_count = -1\n    for shift in range(26):\n        decrypted_chars = []\n        e_count = 0\n        for ch in swapped_text:\n            if ch.isalpha():\n                dch = shift_char(ch, shift)\n                decrypted_chars.append(dch)\n                if dch.lower() == 'e':\n                    e_count += 1\n            else:\n                decrypted_chars.append(ch)\n        if e_count > best_e_count:\n            best_e_count = e_count\n            best_shift = shift\n\n    # decrypt using best shift\n    final_chars = []\n    for ch in swapped_text:\n        if ch.isalpha():\n            final_chars.append(shift_char(ch, best_shift))\n        else:\n            final_chars.append(ch)\n\n    decrypted = \"\".join(final_chars)\n\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(decrypted)\n\n\ndef main(argv):\n    cmd = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n\n    if cmd == \"count\":\n        count_chars(input_file, output_file)\n    elif cmd == \"space\":\n        find_space_char(input_file, output_file)\n    elif cmd == \"decrypt\":\n        decrypt_text(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2323, "language": "Python3", "code": "import sys\n\ndef logic_idiot(s):\n    if not s.isdigit():\n        return \"invalid\"\n    n = int(s)\n    if 0 <= n <= 1000:\n        val1 = n % 3 == 0\n        val2 = \"3\" in s\n        if val1 and val2:\n            return \"dumb\"\n        if val1:\n            return \"idiot\"\n        if val2:\n            return \"stupid\"\n        return \"smart\"\n    return \"invalid\"\n\ndef main(argv):\n    for a in argv:\n        print(logic_idiot(a))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2324, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_number(const string& s) {\n  if (s.empty()) return false;\n  for (char c : s) {\n    if (!isdigit(c)) return false;\n  }\n  return true;\n}\n\nbool has_3(const string& s) {\n  for (char c : s) {\n    if (c == '3') return true;\n  }\n  return false;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; i++) {\n    string s(argv[i]);\n    if (!is_number(s)) {\n      cout << \"invalid\" << endl;\n      continue;\n    }\n    int num = stoi(s);\n    if (num < 0 || num > 1000) {\n      cout << \"invalid\" << endl;\n      continue;\n    }\n    bool divisible = (num % 3 == 0);\n    bool contains = has_3(s);\n    if (divisible && contains) cout << \"dumb\" << endl;\n    else if (divisible) cout << \"idiot\" << endl;\n    else if (contains) cout << \"stupid\" << endl;\n    else cout << \"smart\" << endl;\n  }\n  return 0;\n}"}
{"id": 2325, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint includes_three(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        int is_invalid = 0;\n\n        // Check if the argument is a valid integer\n        for (char *c = argv[i]; *c != '\\0'; c++) {\n            if (!isdigit(*c)) {\n                if (*c == '-' && c == argv[i]) continue; // allow negative sign at the first position\n                is_invalid = 1;\n                break;\n            }\n        }\n\n        if (is_invalid) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int num = atoi(argv[i]);\n\n        if (num < 0 || num > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int divisible_by_three = (num % 3 == 0);\n        int contains_three = includes_three(num);\n\n        if (divisible_by_three && contains_three) {\n            printf(\"dumb\\n\");\n        } else if (divisible_by_three) {\n            printf(\"idiot\\n\");\n        } else if (contains_three) {\n            printf(\"stupid\\n\");\n        } else {\n            printf(\"smart\\n\");\n        }\n    }\n    return 0;\n}"}
{"id": 2326, "language": "Java", "code": "package track;\n\n  public class App {\n    public static void main(String[] args) {\n    boolean isTrue1 = false, isTrue2 = false, isTrue3 = false; \n      \n    for (int i = 0, l = args.length; i < l; i++) {\n        String output = String.format(\"argv[%s]: %s\", i, args[i]);\n        for (int j = 0; j < args[i].length(); j++) {\n          if (args[i].charAt(j) == '3') {\n              isTrue1 = true;\n          }\n          \n          int num = args[i].charAt(j);\n          \n          if (num < 48 || num > 57 ) {\n              System.out.println(\"invalid\");\n              isTrue3 = true;\n              break;\n          }\n        }\n        \n          if (isTrue3 == true) {\n              isTrue3 = false;\n              continue;\n          }\n          \n          try {\n              int num = Integer.parseInt(args[i]);\n\n              if (num < 0 && num > 1000) {\n                System.out.println(\"invalid\");\n              }\n              \n              if (num % 3 == 0) {\n                isTrue2 = true;\n              }\n              \n              if (isTrue1 && isTrue2) {\n                System.out.println(\"dumb\");\n              } else if (isTrue1) {\n                System.out.println(\"stupid\");\n              } else if (isTrue2) {\n                System.out.println(\"idiot\");\n              } else\n                System.out.println(\"smart\");\n              \n              isTrue1 = false;\n              isTrue2 = false;\n          } catch (Exception e) {\n              System.out.println(\"invalid\");\n              isTrue1 = false;\n              isTrue2 = false;\n          }\n    }\n  }\n}\n"}
{"id": 2327, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    for (int i=1; i<argc; i++) {\n        string s = argv[i];\n        bool all_digit = true;\n        for (char c : s) if (!isdigit(c)) all_digit = false;\n        if (!all_digit) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int n = stoi(s);\n        if (n < 0 || n > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool cond1 = (n % 3 == 0);\n        bool cond2 = (s.find('3') != string::npos);\n        if (cond1 && cond2) cout << \"dumb\\n\";\n        else if (cond1) cout << \"idiot\\n\";\n        else if (cond2) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n}"}
{"id": 2328, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport com.google.gson.Gson;\n\npublic class RockPaperScissorsApp {\n\n  static class Record {\n    int robot;\n    int you;\n  }\n\n  public static void main(String[] args) throws Exception {\n    String json = new String(Files.readAllBytes(Paths.get(args[0])));\n    Record[] records = new Gson().fromJson(json, Record[].class);\n\n    int len = records.length;\n    int r3 = len >= 3 ? records[len - 3].robot : 0;\n    int r2 = len >= 2 ? records[len - 2].robot : 1;\n    int r1 = len >= 1 ? records[len - 1].robot : 2;\n    int youLast = len >= 1 ? records[len - 1].you : 0;\n\n    HashMap<String, Integer> dict = new HashMap<>();\n\n    for (int i = 3; i < len; i++) {\n      String key = records[i - 3].robot + \",\" + records[i - 2].robot + \",\" + records[i - 1].robot + \",\" + records[i - 1].you;\n      int cnt = dict.getOrDefault(key, 0);\n      dict.put(key, (cnt + 1) % 3);\n    }\n\n    String k = r3 + \",\" + r2 + \",\" + r1 + \",\" + youLast;\n    System.out.println(dict.getOrDefault(k, 0));\n  }\n}"}
{"id": 2329, "language": "Python3", "code": "import sys\nimport random\n\ndef perform_drumming(num_iterations):\n    target_phrase = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    drum_types = ('\u30c9', '\u30ab') # Immutable sequence for beats\n    recent_beats_buffer = \"\"\n    phrase_length = len(target_phrase)\n\n    if num_iterations == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    for _ in range(num_iterations):\n        # Generate a random drum sound.\n        current_drum_sound = random.choice(drum_types)\n        print(current_drum_sound)\n        \n        # Append to buffer and maintain fixed size.\n        recent_beats_buffer += current_drum_sound\n        if len(recent_beats_buffer) > phrase_length:\n            recent_beats_buffer = recent_beats_buffer[1:] # Remove oldest character\n\n        # Check if the buffer matches the target phrase.\n        if recent_beats_buffer == target_phrase:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(argv):\n    # Parse the input count from command line arguments.\n    count_limit = int(argv[0])\n    perform_drumming(count_limit)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2330, "language": "Java", "code": "package track;\nimport java.io.*;\nimport java.lang.Integer;\n\npublic class App {\n  private static int[] a;\n  private static int lines;\n  public static void main(String[] args) {\n    String filename = args[0];\n    try{\n      File file = new File(filename);\n      FileReader fileReader = new FileReader(file);\n      BufferedReader bufferedReader = new BufferedReader(fileReader);\n      String k = bufferedReader.readLine();\n      lines = Integer.valueOf(k);\n      int[][] queens = new int[lines][2];\n      String data;\n      int j = 0;\n      while((data = bufferedReader.readLine()) != null){\n        queens[j][0] = Integer.valueOf(data.split(\" \")[0]);\n        queens[j][1] = Integer.valueOf(data.split(\" \")[1]);\n        j++;\n      }\n      NQ(queens);\n    }catch(IOException e){\n      e.printStackTrace();\n    }\n  }\n  private static int N = 8;\n  public static void NQ(int[][] queens){\n    a = new int[N];\n    nqueen(0, queens);\n  } \n  public static void nqueen(int row, int[][] queens){\n    if(row == N){\n      for(int i = 0; i < lines; i++){\n        if(a[queens[i][0]] != queens[i][1]) return;\n      }\n      for(int i = 0; i < N; i++){\n        for(int j = 0; j < N; j++){\n          if(j == a[i]) System.out.print(\"Q\");\n          else System.out.print(\".\");\n        }\n        System.out.println();\n      }\n    }else{\n      for (int i = 0; i < N; i++){\n        a[row] = i;\n        if(canplace(row)){\n          nqueen(row+1, queens);\n        }\n      }\n    }\n  }\n\n  private static boolean canplace(int row){\n    for(int i = 0; i < row; i++){\n      if(Math.abs(row - i) == Math.abs(a[row] - a[i]) || a[row] == a[i]){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"}
{"id": 2331, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tint num=Integer.parseInt(args[i]);\n      if(num>=0 && num<=1000)\n      {  \n        int temp=num;\n        boolean has3=false;\n        while(temp>0){\n          if(temp%10==3){\n            has3=true;\n            break;\n          }\n          temp=temp/10;\n        }\n        if(num%3==0 && has3==true){\n          System.out.println(\"dumb\");\n        }\n        else if(num%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(has3==true){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2332, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nchar b[8][8];\nint f[8], c[8], d1[15], d2[15], done;\n\nvoid solve(int r) {\n    if (r == 8) {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) printf(\"%c\", b[i][j]);\n            puts(\"\");\n        }\n        done = 1;\n        return;\n    }\n    if (f[r]) {\n        solve(r + 1);\n        return;\n    }\n    for (int j = 0; j < 8 && !done; j++) {\n        if (!c[j] && !d1[r - j + 7] && !d2[r + j]) {\n            b[r][j] = 'Q';\n            c[j] = d1[r - j + 7] = d2[r + j] = 1;\n            solve(r + 1);\n            c[j] = d1[r - j + 7] = d2[r + j] = 0;\n            b[r][j] = '.';\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    memset(b, '.', sizeof(b));\n    memset(f, 0, sizeof(f));\n    memset(c, 0, sizeof(c));\n    memset(d1, 0, sizeof(d1));\n    memset(d2, 0, sizeof(d2));\n    done = 0;\n\n    int k, r_in, c_in;\n    scanf(\"%d\", &k);\n    while(k--) {\n        scanf(\"%d %d\", &r_in, &c_in);\n        b[r_in][c_in] = 'Q';\n        f[r_in] = 1;\n        c[c_in] = 1;\n        d1[r_in - c_in + 7] = 1;\n        d2[r_in + c_in] = 1;\n    }\n    solve(0);\n    return 0;\n}"}
{"id": 2333, "language": "Java", "code": "import java.util.*;\n\npublic class App {\n    static char[][] b = new char[8][8];\n    static boolean[] cols = new boolean[8], d1 = new boolean[15], d2 = new boolean[15];\n    static Set<Integer> preRows = new HashSet<>();\n\n    static boolean go(int r) {\n        if (r == 8) return true;\n        if (preRows.contains(r)) return go(r + 1);\n        for (int c = 0; c < 8; ++c) {\n            if (!cols[c] && !d1[r - c + 7] && !d2[r + c]) {\n                b[r][c] = 'Q';\n                cols[c] = d1[r - c + 7] = d2[r + c] = true;\n                if (go(r + 1)) return true;\n                b[r][c] = '.';\n                cols[c] = d1[r - c + 7] = d2[r + c] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n        for (char[] row : b) Arrays.fill(row, '.');\n        int k = scn.nextInt();\n        for (int i = 0; i < k; ++i) {\n            int r = scn.nextInt(), c = scn.nextInt();\n            b[r][c] = 'Q';\n            cols[c] = d1[r - c + 7] = d2[r + c] = true;\n            preRows.add(r);\n        }\n        go(0);\n\n        for (char[] row : b) {\n            System.out.println(new String(row));\n        }\n    }\n}"}
{"id": 2334, "language": "C", "code": "#include <stdio.h>\n#include<ctype.h>\nvoid check(int num)\n{\nint a,b,r,n;\nn=num;\na=0;\nb=0;\nif(num%3==0)\n a=1;\nwhile(n>0)\n{\n r=n%10;\n n=n/10;\n if(r==3)\n {\n   b=1;\n   break;\n }\n}\n if((a==1)&&(b==1))\nprintf(\"dumb\\n\");\nelse if(a==1)\nprintf(\"idiot\\n\");\nelse if(b==1)\nprintf(\"stupid\\n\");\nelse \nprintf(\"smart\\n\");\n\n}\n\nint main(int argc, char *argv[])\n{\n  int x;\n\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   x=atoi(argv[i]);\n   if((x%3!=0)&&(isalpha(argv[i])))\n   {\n     printf(\"invalid\\n\");\n    \n   }\n  //else\n   check(x);\n  }\n  return 0;\n}\n"}
{"id": 2335, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n    private static int N = 8;\n    private static char[][] board = new char[N][N];\n    private static boolean[] cols = new boolean[N];\n    private static boolean[] diag1 = new boolean[2 * N - 1];\n    private static boolean[] diag2 = new boolean[2 * N - 1];\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                board[i][j] = '.';\n            }\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            // This is the initial fixed placement\n            board[r][c] = 'Q';\n            cols[c] = true;\n            diag1[r - c + N - 1] = true;\n            diag2[r + c] = true;\n        }\n        sc.close();\n        \n        //\n        resolve(0);\n    }\n    \n    private static void resolve(int r) {\n        if (r == N) {\n            // Reached the end, solution found\n            for (int i = 0; i < N; i++) {\n                System.out.println(new String(board[i]));\n            }\n            System.exit(0);\n        }\n\n        // Check if a queen is already in this row from the input\n        int prePlacedCol = -1;\n        for (int c = 0; c < N; c++) {\n            if (board[r][c] == 'Q') {\n                prePlacedCol = c;\n                break;\n            }\n        }\n\n        if (prePlacedCol != -1) {\n            // Already placed, move to the next row\n            resolve(r + 1);\n        } else {\n            // Try placing a queen in each column of this row\n            for (int c = 0; c < N; c++) {\n                if (!cols[c] && !diag1[r - c + N - 1] && !diag2[r + c]) {\n                    board[r][c] = 'Q';\n                    cols[c] = true;\n                    diag1[r - c + N - 1] = true;\n                    diag2[r + c] = true;\n\n                    resolve(r + 1);\n\n                    // Backtrack\n                    cols[c] = false;\n                    diag1[r - c + N - 1] = false;\n                    diag2[r + c] = false;\n                    board[r][c] = '.';\n                }\n            }\n        }\n    }\n}"}
{"id": 2336, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n#include <errno.h> // For errno and ERANGE\n\n// Checks if a number contains the digit '3'.\nbool has_digit_three_robust(int num_val) {\n    if (num_val < 0) { // Should not be reached given 0-1000 input range\n        num_val = -num_val;\n    }\n    if (num_val == 0) {\n        return false;\n    }\n    while (num_val > 0) {\n        if (num_val % 10 == 3) {\n            return true;\n        }\n        num_val /= 10;\n    }\n    return false;\n}\n\n// Applies the 3 Idiots Algorithm to a valid number.\nconst char* determine_idiocy(int number_input) {\n    bool divisible_by_3 = (number_input % 3 == 0);\n    bool includes_three_digit = has_digit_three_robust(number_input);\n\n    if (divisible_by_3 && includes_three_digit) {\n        return \"dumb\";\n    } else if (divisible_by_3) {\n        return \"idiot\";\n    } else if (includes_three_digit) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int idx = 1; idx < argc; idx++) {\n    char *check_endptr;\n    errno = 0; // Clear errno before strtol call for robust error checking\n    long numerical_value = strtol(argv[idx], &check_endptr, 10);\n\n    // Check for conversion errors (e.g., overflow, non-numeric parts)\n    if (errno == ERANGE || *check_endptr != '\\0' || check_endptr == argv[idx]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Check numerical range after successful conversion\n    if (numerical_value < 0 || numerical_value > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", determine_idiocy((int)numerical_value));\n  }\n  return 0;\n}"}
{"id": 2337, "language": "C++", "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n  srand((unsigned)time(0)); \n  \n  printf(\"0-Rock\\n\");\n  printf(\"1-Scissors\\n\");\n  printf(\"2-Paper\\n\");\n  int choise;\n  scanf(\"%d\",&choise);\n  int cChoise = (rand()%2)+1;\n  \n  if(choise==cChoise)\n    printf(\"Tie\");\n  else if(choise==0)\n  {\n    if(cChoise==1)\n      printf(\"win\");\n    else if(cChoise==2)\n      printf(\"lose\");\n  }else if(choise==1)\n  {\n    if(cChoise==0)\n      printf(\"lose\");\n    else if(cChoise==2)\n      printf(\"win\");\n  }else if(choise==2)\n  {\n    if(cChoise==0)\n      printf(\"win\");\n    else if(cChoise==1)\n      printf(\"lose\");\n  }\n\n  return 0;\n}\n"}
{"id": 2338, "language": "Java", "code": "package track;\n\npublic class App {\n\n  private static final String KEYNUM = \"3\";\n  private static final int THRESHOLD = 1000;\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      String output = \"\";\n\n      if(!isHalfChar(args[i])){\n        output = String.format(\"invalid\");\n        System.out.println(output);\n\n        continue;\n      }\n      \n      if(isIdiot(args[i]) && isStupid(args[i])){\n        output = String.format(\"dumb\");\n      } else if(isIdiot(args[i])){\n        output = String.format(\"idiot\");\n      }  else if(isStupid(args[i])){\n        output = String.format(\"stupid\");\n      } else if(isSmart(args[i])){\n        output = String.format(\"smart\");\n      } else {\n        output = String.format(\"invalid\");\n      }\n\n\t\t\tSystem.out.println(output);\n\t\t}\n\t}\n\n  /**\n  * 3\u306e\u500d\u6570\u306e1000\u4ee5\u4e0b\u306e\u975e\u8ca0\u6574\u6570\u306e\u5834\u5408\n  **/\n  private static boolean isIdiot(String arg){\n    int num = parseInt(arg);\n\n    if(((num % 3) == 0) && (0 < num) && (num <= THRESHOLD)){\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n  * 3\u306e\u3064\u304f1000\u4ee5\u4e0b\u306e\u975e\u8ca0\u6574\u6570\u306e\u5834\u5408\n  **/\n  private static boolean isStupid(String arg){\n    if (arg.contains(KEYNUM))\n      {\n        int num = parseInt(arg);\n\n        if(num >= 0 && num <= THRESHOLD){\n           return true;\n        } \n      }\n\n    return false;\n  }\n\n  /**\n  * 1000\u4ee5\u4e0b\u306e\u975e\u8ca0\u6574\u6570\u306e\u5834\u5408\n  **/\n  private static boolean isSmart(String arg){\n      int num = parseInt(arg);\n\n      if(num >= 0 && num <= THRESHOLD){\n         return true;\n      } \n\n    return false;\n  }\n\n  /**\n  * String\u304b\u3089int\u3078\u5909\u63db\n  **/\n  private static int parseInt(String arg){\n    try {\n        int ret = Integer.parseInt(arg);\n        return ret;\n    } catch (NumberFormatException e) {\n        return -1;\n    }\n  }\n\n  /**\n  * \u5168\u89d2\u534a\u89d2\u5224\u5b9a\n  **/\n  private static boolean isHalfChar(String arg) {\n\tbyte[] bytes = arg.getBytes();\n\tif (arg.length() == bytes.length) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n}\n"}
{"id": 2339, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n    private static final int SIZE = 8;\n    private char[][] board = new char[SIZE][SIZE];\n    private boolean[] cols = new boolean[SIZE];\n    private boolean[] diag1 = new boolean[2 * SIZE - 1]; // r-c\n    private boolean[] diag2 = new boolean[2 * SIZE - 1]; // r+c\n    private boolean[] prePlacedRows = new boolean[SIZE];\n\n    public static void main(String[] args) {\n        new App().run();\n    }\n\n    private void run() {\n        Scanner sc = new Scanner(System.in);\n        for (char[] row : board) {\n            Arrays.fill(row, '.');\n        }\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            board[r][c] = 'Q';\n            cols[c] = true;\n            diag1[r - c + SIZE - 1] = true;\n            diag2[r + c] = true;\n            prePlacedRows[r] = true;\n        }\n        sc.close();\n        \n        placeQueens(0);\n    }\n    \n    private void placeQueens(int r) {\n        if (r == SIZE) {\n            printBoard();\n            System.exit(0);\n        }\n\n        if (prePlacedRows[r]) {\n            placeQueens(r + 1);\n            return;\n        }\n\n        for (int c = 0; c < SIZE; c++) {\n            if (isSafe(r, c)) {\n                // Place\n                board[r][c] = 'Q';\n                cols[c] = true;\n                diag1[r - c + SIZE - 1] = true;\n                diag2[r + c] = true;\n                \n                // Recurse\n                placeQueens(r + 1);\n                \n                // Backtrack\n                cols[c] = false;\n                diag1[r - c + SIZE - 1] = false;\n                diag2[r + c] = false;\n                board[r][c] = '.';\n            }\n        }\n    }\n\n    private boolean isSafe(int r, int c) {\n        return !cols[c] && !diag1[r - c + SIZE - 1] && !diag2[r + c];\n    }\n    \n    private void printBoard() {\n        for (int i = 0; i < SIZE; i++) {\n            System.out.println(new String(board[i]));\n        }\n    }\n}"}
{"id": 2340, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # 9\u9032\u6cd5\u304b\u308910\u9032\u6cd5\u3078\u306e\u5909\u63db\n    def from_base9_to_base10(base9_str):\n        return sum(int(digit) * (9 ** i) for i, digit in enumerate(reversed(base9_str)))\n\n    # 10\u9032\u6cd5\u304b\u30899\u9032\u6cd5\u3078\u306e\u5909\u63db\n    def from_base10_to_base9(base10_int):\n        if base10_int == 0:\n            return \"0\"\n        base9_str = \"\"\n        while base10_int > 0:\n            base9_str = str(base10_int % 9) + base9_str\n            base10_int //= 9\n        return base9_str\n\n    # \u6570\u5f0f\u3092\u89e3\u6790\u3057\u3066\u8a08\u7b97\n    formula = argv[0]\n    num1_str, operator, num2_str = formula.split()\n    num1 = from_base9_to_base10(num1_str)\n    num2 = from_base9_to_base10(num2_str)\n    \n    if operator == \"+\":\n        result = num1 + num2\n    elif operator == \"*\":\n        result = num1 * num2\n    else:\n        return\n    \n    # \u7d50\u679c\u30929\u9032\u6cd5\u306b\u623b\u3057\u3066\u51fa\u529b\n    print(from_base10_to_base9(result))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2341, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    f = argv[0]\n    with open(f) as src:\n        games = json.load(src)\n    r = [0,1,2]\n    y = []\n    for g in games:\n        r.append(g['robot'])\n        y.append(g['you'])\n    patt = {}\n    for i in range(len(games)):\n        j = i+3\n        key = (r[j-3], r[j-2], r[j-1], y[i])\n        patt.setdefault(key, []).append(r[j])\n    ckey = (r[-3], r[-2], r[-1], y[-1])\n    num = len(patt.get(ckey, []))\n    print(num%3)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2342, "language": "Python3", "code": "import sys\nimport pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2343, "language": "Python3", "code": "import sys\n\ndef arabic_to_roman(num):\n    # \u30ed\u30fc\u30de\u6570\u5b57\u3078\u306e\u5909\u63db\u95a2\u6570\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_numeral = ''\n    for i in range(len(val)):\n        count = num // val[i]\n        roman_numeral += syms[i] * count\n        num -= val[i] * count\n    return roman_numeral\n\ndef main(argv):\n    # \u30e1\u30a4\u30f3\u95a2\u6570\n    if len(argv) != 1:\n        return\n    arabic_number = int(argv[0])\n    roman_number = arabic_to_roman(arabic_number)\n    print(roman_number)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2344, "language": "Java", "code": "import java.nio.file.*;\nimport java.util.*;\nimport com.google.gson.*;\n\npublic class RobotRPS {\n  static class Match {\n    int robot;\n    int you;\n  }\n  public static void main(String[] args) throws Exception {\n    String content = new String(Files.readAllBytes(Paths.get(args[0])));\n    Match[] matches = new Gson().fromJson(content, Match[].class);\n    List<Integer> robots = new ArrayList<>();\n    List<Integer> opponents = new ArrayList<>();\n\n    for (Match m : matches) {\n      robots.add(m.robot);\n      opponents.add(m.you);\n    }\n\n    int n = robots.size();\n\n    int R3 = n >= 3 ? robots.get(n-3) : 0;\n    int R2 = n >= 2 ? robots.get(n-2) : 1;\n    int R1 = n >= 1 ? robots.get(n-1) : 2;\n    int Y  = n >= 1 ? opponents.get(n-1) : 0;\n\n    String state = R3 + \",\" + R2 + \",\" + R1 + \",\" + Y;\n\n    Map<String, Integer> memory = new HashMap<>();\n\n    for (int i = 3; i < n; i++) {\n      String k = robots.get(i-3) + \",\" + robots.get(i-2) + \",\" + robots.get(i-1) + \",\" + opponents.get(i-1);\n      int c = memory.getOrDefault(k, 0);\n      memory.put(k, (c + 1) % 3);\n    }\n\n    System.out.println(memory.getOrDefault(state, 0));\n  }\n}"}
{"id": 2345, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef decrypt_text(input_path, output_path):\n    # \u30c6\u30ad\u30b9\u30c8\u306e\u6697\u53f7\u5316\u3092\u89e3\u9664\u3059\u308b\n    with open(input_path, 'r') as f:\n        text = f.read()\n    \n    allowed_chars = \"abcdefghijklmnopqrstuvwxyz \"\n    counter = Counter(c for c in text if c in allowed_chars)\n\n    # \u7a7a\u767d\u306b\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u3092\u6700\u983b\u51fa\u6587\u5b57\u304b\u3089\u5224\u5b9a\n    space_char = max(counter, key=lambda c: counter[c] if c != ' ' else 0)\n    \n    shift_distance = ord(max(counter, key=counter.get)) - ord('e')\n    \n    def decrypt_char(c):\n        if c in \"abcdefghijklmnopqrstuvwxyz\":\n            return chr((ord(c) - ord('a') - shift_distance) % 26 + ord('a'))\n        elif c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            return chr((ord(c) - ord('A') - shift_distance) % 26 + ord('A'))\n        elif c == space_char:\n            return ' '\n        else:\n            return c\n\n    decrypted_text = ''.join(decrypt_char(c) for c in text)\n    \n    # \u5fa9\u53f7\u5316\u3055\u308c\u305f\u7d50\u679c\u3092\u51fa\u529b\n    with open(output_path, 'w') as out_file:\n        out_file.write(decrypted_text)\n\ndef main(argv):\n    if len(argv) < 3:\n        print(\"Invalid arguments\")\n        sys.exit(1)\n    \n    command = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n    \n    if command == \"decrypt\":\n        decrypt_text(input_path, output_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2346, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\n\nclass QueenSolver {\n    private int[] queens = new int[8]; // queens[row] = col\n    private bool[] usedCols = new bool[8];\n    private bool[] usedDiag1 = new bool[15]; // r+c\n    private bool[] usedDiag2 = new bool[15]; // r-c+7\n    private List<(int r, int c)> preset;\n    private int presetIdx = 0;\n\n    public QueenSolver(List<(int, int)> presetPositions) {\n        preset = presetPositions;\n        for (int i = 0; i < 8; i++) queens[i] = -1;\n        foreach (var (r,c) in preset) {\n            queens[r] = c;\n            usedCols[c] = true;\n            usedDiag1[r + c] = true;\n            usedDiag2[r - c + 7] = true;\n        }\n    }\n\n    public bool Solve(int row = 0) {\n        if (row == 8) return true;\n        if (queens[row] != -1)\n            return Solve(row + 1);\n\n        for (int c = 0; c < 8; c++) {\n            if (usedCols[c] || usedDiag1[row + c] || usedDiag2[row - c + 7]) continue;\n            queens[row] = c;\n            usedCols[c] = true;\n            usedDiag1[row + c] = true;\n            usedDiag2[row - c + 7] = true;\n\n            if (Solve(row + 1)) return true;\n\n            queens[row] = -1;\n            usedCols[c] = false;\n            usedDiag1[row + c] = false;\n            usedDiag2[row - c + 7] = false;\n        }\n        return false;\n    }\n\n    public void Print() {\n        for (int r = 0; r < 8; r++) {\n            char[] line = new char[8];\n            for (int i = 0; i < 8; i++) line[i] = '.';\n            line[queens[r]] = 'Q';\n            Console.WriteLine(new string(line));\n        }\n    }\n}\n\nclass Program {\n    static void Main(string[] args) {\n        int k = int.Parse(Console.ReadLine());\n        var presets = new List<(int, int)>();\n        for (int i = 0; i < k; i++) {\n            var line = Console.ReadLine().Split();\n            int r = int.Parse(line[0]);\n            int c = int.Parse(line[1]);\n            presets.Add((r, c));\n        }\n        var solver = new QueenSolver(presets);\n        solver.Solve();\n        solver.Print();\n    }\n}"}
{"id": 2347, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  int n,f,j,k,s;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    \n    \n    string x=argv[i];\n    n=x.length();\n    f=0;\n    s=0;\n    for(j=0;j<n;j++)\n    {\n      if(x[i]=='3')\n      f=1;\n      if(x[i]!='1' && x[i]!='2' && x[i]!='3'&& x[i]!='4' && x[i]!='5' && x[i]!='6'&& x[i]!='7'&& x[i]!='8' && x[i]!='9'&& x[i]!='0')\n      s=1;\n    }\n    if(s==0)\n    {\n      int a=stoi(argv[i]);\n    if(a%3==0 && f==1)\n    cout<<\"dumb\"<<endl;\n    else if(a%3!=0 && f==1)\n    cout<<\"stupid\"<<endl;\n    else if(a%3==0)\n    cout<<\"idiot\"<<endl;\n    else\n    cout<<\"smart\"<<endl;\n    }\n    else\n    {\n    cout<<\"invalid\"<<endl;\n    s=0;\n    }\n  }\n  \n \n  return 0;\n}\n"}
{"id": 2348, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  int inputNumber = atoi(argv[1]);\n  int digit = strlen(argv[1]) - 1;\n\n  char str[4][3] = {\"IV\", \"XL\", \"CD\", \"M\"};\n  for(int i = digit; i >= 0; i--){\n    int tmp = argv[1][digit - i] - '0';\n    switch(tmp){\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n          cout << str[i][1];\n          tmp -= 5;\n      case 1:\n      case 2:\n      case 3:\n        while(tmp > 0){\n          cout << str[i][0];\n          tmp--;\n        }\n        break;\n      case 4:\n          cout << str[i][0] << str[i][1];\n        break;\n      case 9:\n          cout << str[i][0] << str[i+1][0];      \n        break;\n    }\n  }\n  return 0;\n}\n"}
{"id": 2349, "language": "Java", "code": "public class IdiotsConverter {\n  public static void main(String[] args) {\n    for(String arg : args) {\n      try {\n        int val = Integer.parseInt(arg);\n        if(val < 0 || val > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisible3 = val % 3 == 0;\n        boolean containing3 = arg.contains(\"3\");\n        if(divisible3 && containing3) {\n          System.out.println(\"dumb\");\n        } else if(divisible3) {\n          System.out.println(\"idiot\");\n        } else if(containing3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch(NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2350, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\n\ndef find_idiots(input_arg):\n        if input_arg%3==0 and '3' in str(input_arg):\n          return \"dumb\"\n        elif input_arg%3==0:\n          return \"idiot\"\n        elif '3' in str(input_arg):\n          return \"stupid\"\n        else :return \"smart\"\n\ndef main(argv):\n   for i, v in enumerate(argv):\n    try:\n            out=find_idiots(int(v))\n            print(out)\n    except:\n            print('invalid')\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2351, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  for ($j = 1; $j < $argc; $j++) {\n    $arg = $argv[$j];\n    if (!is_numeric($arg) || $arg < 0 || $arg > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $num = intval($arg);\n    if ($num % 3 === 0 && strpos($arg, '3') !== false) {\n      echo \"dumb\\n\";\n    } elseif ($num % 3 === 0) {\n      echo \"idiot\\n\";\n    } elseif (strpos($arg, '3') !== false) {\n      echo \"stupid\\n\";\n    } else {\n      echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc, $argv);"}
{"id": 2352, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\n\nstruct return_type\n{\n  int number;\n  int is_contains_3;\n  int valid;\n};\ntypedef struct return_type return_type;\nint check_numb(char character1)\n{\n  if((character1<48)||(character1>57))\n  {\n    return 0;\n  }\n  return 1;\n}\nreturn_type str_to_int(char string[])\n{\n  int len = strlen(string);\n  int number = 0;\n  int is_3 = 0;\n  for( int i = 0;i < len ; i++)\n  {\n    if(check_numb(string[i]) == 0)\n    {\n      return (return_type){0,0,0};\n\n    }\n    if(((int)string[i] - 48  == 3))\n    {\n      is_3 = 1;\n    }\n    number = number * 10 + ((int)string[i]- 48);\n  }\n  return (return_type){number, is_3,1};\n}\nint main(int argc, char *argv[])\n{\n  for(int i = 1; i < argc ; i++)\n  {\n    return_type value1 = str_to_int(argv[i]);\n    if(value1.valid == 0)\n    {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if(value1.is_contains_3&&(value1.number %3 == 0))\n    {\n      printf(\"dumb\\n\");\n    }\n    else if (value1.is_contains_3)\n    {\n      printf(\"stupid\\n\");\n    }\n    else if(value1.number % 3 == 0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else\n    {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 2353, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2354, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define N 8\n\nint board[N][N];\nint fixRow[N]; // \u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u5217\u304c\u3042\u308c\u3070\u305d\u306e\u884c\u756a\u53f7\u3001\u306a\u3051\u308c\u3070-1\nint usedRow[N];\nint usedCol[N];\nint usedDiag[2*N-1];\nint usedRevDiag[2*N-1];\n\nvoid print_board() {\n    for (int i = 0; i < N; i++) {\n        for(int j = 0; j < N; j++) {\n            if(board[i][j]) printf(\"Q\");\n            else printf(\".\");\n        }\n        puts(\"\");\n    }\n}\n\nint place(int col) {\n    if (col == N) return 1;\n\n    if (fixRow[col] != -1) {\n        int r = fixRow[col];\n        if (usedRow[r] || usedDiag[r+col] || usedRevDiag[r-col+N-1]) return 0;\n        board[r][col] = 1;\n        usedRow[r] = usedDiag[r+col] = usedRevDiag[r-col+N-1] = 1;\n        if (place(col+1)) return 1;\n        board[r][col] = 0;\n        usedRow[r] = usedDiag[r+col] = usedRevDiag[r-col+N-1] = 0;\n        return 0;\n    }\n\n    for (int row = 0; row < N; row++) {\n        if (usedRow[row] || usedDiag[row+col] || usedRevDiag[row-col+N-1]) continue;\n        board[row][col] = 1;\n        usedRow[row] = usedDiag[row+col] = usedRevDiag[row-col+N-1] = 1;\n        if (place(col+1)) return 1;\n        board[row][col] = 0;\n        usedRow[row] = usedDiag[row+col] = usedRevDiag[row-col+N-1] = 0;\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    int k;\n    memset(board, 0, sizeof(board));\n    memset(fixRow, -1, sizeof(fixRow));\n    memset(usedRow, 0, sizeof(usedRow));\n    memset(usedCol, 0, sizeof(usedCol));\n    memset(usedDiag, 0, sizeof(usedDiag));\n    memset(usedRevDiag, 0, sizeof(usedRevDiag));\n\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 1;\n        fixRow[c] = r;\n        usedRow[r] = 1;\n        usedCol[c] = 1;\n        usedDiag[r+c] = 1;\n        usedRevDiag[r-c+N-1] = 1;\n    }\n    // \u56fa\u5b9a\u306e\u30af\u30a4\u30fc\u30f3\u3092\u8003\u616e\u3057\u3064\u3064\u518d\u5e30\u63a2\u7d22\n    if (place(0)) {\n        print_board();\n    }\n    return 0;\n}"}
{"id": 2355, "language": "Python3", "code": "import sys\n\ndef calc_result(s):\n    if not s.isdigit() or not (0 <= int(s) <= 1000):\n        return \"invalid\"\n    \n    n = int(s)\n    is_div = n % 3 == 0\n    has_3 = '3' in s\n    \n    return \"dumb\" if is_div and has_3 else \\\n           \"idiot\" if is_div else \\\n           \"stupid\" if has_3 else \\\n           \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(calc_result(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2356, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n// Japanese \"\u30c9\" and \"\u30ab\" string patterns\nconst char* TAIKO_SEQ[] = {\"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\"};\n#define SEQ_LEN 7\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n  int limit = atoi(argv[1]);\n  if (limit <= 0 || limit > 10000) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n  srand((unsigned int)time(NULL));\n  char* history[SEQ_LEN] = {NULL};\n  int head = 0;\n  for (int i = 0; i < limit; i++) {\n    int isDo = rand() % 2;\n    const char* tap = isDo ? \"\u30c9\" : \"\u30ab\";\n    printf(\"%s\\n\", tap);\n    history[head] = (char*)tap;\n    if (i >= SEQ_LEN - 1) {\n      int found = 1;\n      for (int j = 0; j < SEQ_LEN; j++) {\n        int pos = (head + 1 + j) % SEQ_LEN;\n        if (strcmp(history[pos], TAIKO_SEQ[j]) != 0) {\n          found = 0; break;\n        }\n      }\n      if (found) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0;\n      }\n    }\n    head = (head + 1) % SEQ_LEN;\n  }\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 2357, "language": "Java", "code": "import java.util.Random;\n\npublic class DrumChallenge {\n    public static void main(String[] args) {\n        if (args.length < 1) {\n            System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        int maxPlays = Integer.parseInt(args[0]);\n        StringBuilder playRecord = new StringBuilder();\n        Random randomGenerator = new Random();\n\n        for (int i = 0; i < maxPlays; i++) {\n            String hit = randomGenerator.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n            System.out.println(hit);\n            playRecord.append(hit);\n\n            if (playRecord.toString().contains(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n                System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                return;\n            }\n        }\n\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n}"}
{"id": 2358, "language": "Python3", "code": "import sys\nimport json\n\ndef main(arguments):\n    # Read the game history\n    filepath = arguments[0]\n    with open(filepath, \"r\") as data_file:\n        history = json.load(data_file)\n\n    # Initial robot sequence\n    initial_sequence = [0, 1, 2]\n    \n    # Knowledge database\n    decision_table = {}\n    \n    # Build patterns using previous records\n    for idx in range(len(history) - 3):\n        pattern = (\n            history[idx][\"robot\"],\n            history[idx + 1][\"robot\"],\n            history[idx + 2][\"robot\"],\n            history[idx + 3][\"you\"],\n        )\n        next_play = history[idx + 3][\"robot\"]\n        if pattern in decision_table:\n            decision_table[pattern].append(next_play)\n        else:\n            decision_table[pattern] = [next_play]\n\n    recent_pattern = (\n        history[-3][\"robot\"], \n        history[-2][\"robot\"], \n        history[-1][\"robot\"], \n        history[-1][\"you\"]\n    )\n    \n    # Analyze robot's next move\n    if recent_pattern in decision_table:\n        sequence = decision_table[recent_pattern]\n        next_output = sequence[len(sequence) % 3]\n    else:\n        next_output = initial_sequence[len(history) % 3]\n    \n    print(next_output)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2359, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef character_count(file_path, output_file):\n    with open(file_path, 'r') as f:\n        content = f.read()\n    counted = Counter(c for c in content if c.isalpha() or c.isspace())\n    with open(output_file, 'w') as out_file:\n        json.dump(counted, out_file)\n\ndef space_char(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n    total_chars = Counter(text)\n    replaced_space = total_chars.most_common(1)[0][0]\n    with open(output_file, 'w') as out_file:\n        json.dump({\"char\": replaced_space}, out_file)\n\ndef resolve_message(file_path, output_file):\n    with open(file_path, 'r') as f:\n        content = f.read()\n    result = ''\n    for char in content:\n        if char.isalpha():\n            shifted = chr(ord(char) - 2)\n            result += shifted if shifted.isalpha() else char\n        else:\n            result += char\n    with open(output_file, 'w') as out_file:\n        out_file.write(result)\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n    \n    if command == 'count':\n        character_count(input_file, output_file)\n    elif command == 'space':\n        space_char(input_file, output_file)\n    elif command == 'decrypt':\n        resolve_message(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2360, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class Game {\n  public static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    Random r = new Random();\n    String p = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder h = new StringBuilder();\n\n    for (int i = 0; i < n; i++) {\n      String c = r.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(c);\n      h.append(c);\n\n      if (h.length() >= p.length()) {\n        if (h.substring(h.length() - p.length()).equals(p)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2361, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n \n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2362, "language": "PHP", "code": "<?php namespace Track;\n$output_strs = [\n  '\u30c9',\n  '\u30ab',  \n];\n$target_str = '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab';\n$result = '\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc';\n$input = $argv[1];\n$counter = 0;\nfor($i=1;$i<$input;$i++) {\n  $rand = mt_rand(0,1);\n  printf(\"%s\\n\", $output_strs[$rand]);\n  if(substr($target_str, $counter, 1) == $output_strs[$rand]) {\n    $counter++;\n    if($counter == mb_strlen($target_str)) {\n      $result = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n      break;\n    }\n  }\n}\nprintf(\"%s\\n\", $result);"}
{"id": 2363, "language": "Python3", "code": "import sys\n\ndef aho_checker(s):\n    if not (s.isdigit() and 0 <= int(s) <= 1000):\n        return \"invalid\"\n    n = int(s)\n    is_aho = n % 3 == 0\n    is_nabeatsu = '3' in s\n    if is_aho and is_nabeatsu:\n        return \"dumb\"\n    if is_aho:\n        return \"idiot\"\n    if is_nabeatsu:\n        return \"stupid\"\n    return \"smart\"\n\ndef run_program():\n    args = sys.argv[1:]\n    for arg in args:\n        print(aho_checker(arg))\n\nif __name__ == '__main__':\n    run_program()"}
{"id": 2364, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isValid(const string& s) {\n    for (char c : s) if (!isdigit(c)) return false;\n    return !s.empty();\n}\n\nbool containsThree(const string& s) {\n    for (char c : s) if (c == '3') return true;\n    return false;\n}\n\nint main(int argc, char* argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        string arg = argv[i];\n        if (!isValid(arg)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int num = stoi(arg);\n        if (num < 0 || num > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        if ((num % 3 == 0) && containsThree(arg))\n            cout << \"dumb\" << endl;\n        else if (num % 3 == 0)\n            cout << \"idiot\" << endl;\n        else if (containsThree(arg))\n            cout << \"stupid\" << endl;\n        else\n            cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2365, "language": "Python3", "code": "import sys\nimport random\n\ndef music_matcher(max_repeats):\n    music_pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    history = \"\"\n    \n    for _ in range(max_repeats):\n        sound = random.choice([\"\u30c9\", \"\u30ab\"])\n        history += sound\n        print(sound)\n        \n        if music_pattern in history:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n        \n        if len(history) > len(music_pattern):\n            history = history[1:]  # Keep history length manageable\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(args):\n    max_repeats = int(args[0])\n    music_matcher(max_repeats)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2366, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// \u3058\u3083\u3093\u3051\u3093\u306e\u624b\u306e\u5b9a\u6570\n#define GU 0\n#define CHO 1\n#define PA 2\n\ntypedef struct {\n    int robot;\n    int you;\n} Janken;\n\ntypedef struct {\n    int h1, h2, h3, opp;\n    int count;\n    int next_hand[3]; // \u51fa\u3057\u305f\u624b\u306e\u30b5\u30a4\u30af\u30eb\n} PatternMap;\n\nint parse_line(const char *line, int *robot, int *you) {\n    const char *r1, *r2;\n    r1 = strstr(line, \"\\\"robot\\\":\");\n    r2 = strstr(line, \"\\\"you\\\":\");\n    if (!r1 || !r2) return 0;\n    sscanf(r1, \"\\\"robot\\\":%d\", robot);\n    sscanf(r2, \"\\\"you\\\":%d\", you);\n    return 1;\n}\n\nint predict_next(PatternMap *maps, int n, int h1, int h2, int h3, int opp, int *out_hand) {\n    for (int i = 0; i < n; i++) {\n        if (maps[i].h1 == h1 && maps[i].h2 == h2 && maps[i].h3 == h3 && maps[i].opp == opp) {\n            *out_hand = maps[i].next_hand[maps[i].count % 3];\n            return 1;\n        }\n    }\n    return 0;\n}\n\nvoid add_pattern(PatternMap *maps, int *n, int h1, int h2, int h3, int opp, int hand) {\n    for (int i = 0; i < *n; i++) {\n        if (maps[i].h1 == h1 && maps[i].h2 == h2 && maps[i].h3 == h3 && maps[i].opp == opp) {\n            maps[i].next_hand[maps[i].count % 3] = hand;\n            maps[i].count++;\n            return;\n        }\n    }\n    maps[*n].h1 = h1;\n    maps[*n].h2 = h2;\n    maps[*n].h3 = h3;\n    maps[*n].opp = opp;\n    maps[*n].count = 1;\n    maps[*n].next_hand[0] = hand;\n    (*n)++;\n}\n\nint win_hand(int rob_hand) {\n    // \u76f8\u624b\u304c rob_hand \u306e\u3068\u304d\u5fc5\u305a\u52dd\u3064\u624b\u3092\u8fd4\u3059\n    if (rob_hand == GU) return PA;\n    if (rob_hand == CHO) return GU;\n    if (rob_hand == PA) return CHO;\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) return 1;\n    FILE *fp = fopen(argv[1], \"r\");\n    if (!fp) return 1;\n    fseek(fp, 0, SEEK_END);\n    long flen = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    char *jsondata = (char*)malloc(flen + 1);\n    fread(jsondata, 1, flen, fp);\n    jsondata[flen] = 0;\n    fclose(fp);\n\n    // \u624b\u306e\u5c65\u6b74\n    Janken moves[1000];\n    int move_count = 0;\n    char *p = jsondata;\n    char *line;\n    while((line = strchr(p, '{')) != NULL) {\n        int robot, you;\n        char *lend = strchr(line, '}');\n        if(lend) {\n            char bak = lend[1];\n            lend[1] = '\\0';\n            if(parse_line(line, &robot, &you)) {\n                moves[move_count].robot = robot;\n                moves[move_count].you = you;\n                move_count++;\n            }\n            lend[1] = bak;\n            p = lend + 1;\n        } else {\n            break;\n        }\n    }\n    free(jsondata);\n\n    if (move_count < 3) {\n        int next_hand = move_count % 3; // \u3058\u3083\u3093\u3051\u3093\u958b\u59cb\u6642\n        printf(\"%d\\n\", next_hand);\n        return 0;\n    }\n\n    // \u76f4\u8fd13\u624b+\u76f8\u624b\u624b\u2192\u30ed\u30dc\u30c3\u30c8\u6b21\u624b \u306e\u8f9e\u66f8\u69cb\u7bc9\n    PatternMap patterns[1000];\n    int pn = 0;\n\n    for (int i = 3; i < move_count; i++) {\n        int h1 = moves[i-3].robot;\n        int h2 = moves[i-2].robot;\n        int h3 = moves[i-1].robot;\n        int opp = moves[i-1].you;\n        int next_robot = moves[i].robot;\n        add_pattern(patterns, &pn, h1, h2, h3, opp, next_robot);\n    }\n\n    int last_h1 = moves[move_count-3].robot;\n    int last_h2 = moves[move_count-2].robot;\n    int last_h3 = moves[move_count-1].robot;\n    int opp_last = moves[move_count-1].you;\n    int rob_pred;\n    if (predict_next(patterns, pn, last_h1, last_h2, last_h3, opp_last, &rob_pred)) {\n        printf(\"%d\\n\", win_hand(rob_pred));\n    } else {\n        // \u30d1\u30bf\u30fc\u30f3\u304c\u306a\u3051\u308c\u3070\u78ba\u5b9f\u52dd\u5229\u306f\u3067\u304d\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u30b0\u30fc\n        printf(\"0\\n\");\n    }\n    return 0;\n}"}
{"id": 2367, "language": "Java", "code": "package track;\nimport java.util.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\n   /* String getPrevHand = args[0];\n    int val = Integer.parseInt(getPrevHand);\n    \tSystem.out.println(val);\n      */\nList<Integer> roboprevhand = new ArrayList<Integer>();\nList<Integer> myprevhand = new ArrayList<Integer>();\nList<Integer> nextMove = new ArrayList<Integer>();\nJSONArray a = (JSONArray) parser.parse(new FileReader(\"/input.json\"));\nfor (Object o : a)\n  {\n    JSONObject prevHand = (JSONObject) o;\n\n    int robot = (int) prevHand.get(\"robot\");\n    roboprevhand.add(robot);\n   \n\n    int me = (int) person.get(\"you\");\n     myprevhand.add(me);\n  \n  }\n  \n int robolength = roboprevhand.size();\n int me = myprevhand.size();\n int next = nextMove.size();\n  for(int i=robolength-1;i>=robolength-3;i--){\n\nnextMove.add(roboprevhand.get(i));\n\n  }\n\n  \n\n  int mylastmove = myprevhand.get(me-1);\nnextMove.add(mylastmove);\n\nif(val== 0){\nSystem.out.println(1);\n\n}\nif(val== 1){\nSystem.out.println(2);\n\n}\nif(val== 2){\nSystem.out.println(0);\n\n}\n\n\t\t}\n\t}\n\n"}
{"id": 2368, "language": "Python3", "code": "import sys\nimport json\nimport string\n\ndef do_count(encrypted_path, output_path):\n    # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3068\u7a7a\u767d\u3060\u3051\u30ab\u30a6\u30f3\u30c8\n    char_set = set(string.ascii_letters + \" \")\n    counts = {}\n    with open(encrypted_path, \"r\", encoding=\"utf-8\") as f:\n        txt = f.read()\n        for c in txt:\n            if c in char_set:\n                counts[c] = counts.get(c, 0) + 1\n    with open(output_path, \"w\", encoding=\"utf-8\") as out:\n        json.dump(counts, out, ensure_ascii=False, indent=2)\n\ndef do_space(encrypted_path, output_path):\n    # \u51fa\u73fe\u983b\u5ea6\u304c\u7a7a\u767d\u5206\u666e\u901a\u591a\u3044\u5c0f\u6587\u5b57\u3092\u63a2\u3059\n    with open(encrypted_path, \"r\", encoding=\"utf-8\") as f:\n        txt = f.read()\n    freq = {}\n    for c in txt:\n        if c in string.ascii_lowercase or c == ' ':\n            freq[c] = freq.get(c, 0) + 1\n    # find the space-coded char: \u7a7a\u767d\u306f\u5fc5\u305a\u4ed6\u306e\u5c0f\u6587\u5b57\u3068\u304b\u3076\u3089\u306a\u3044\u306e\u3067\u3001\u7a7a\u767d or \u5c0f\u6587\u5b57\u3067\u6700\u5927\n    cnt_space = freq.get(' ', 0)\n    candidate = None\n    max_cnt = 0\n    for c in string.ascii_lowercase:\n        cnt = freq.get(c, 0)\n        if cnt > max_cnt:\n            max_cnt = cnt\n            candidate = c\n    # \u82f1\u6587\u306b\u304a\u3044\u3066\u7a7a\u767d\u306f\u6700\u9ad8\u983b\u5ea6(\u5e73\u5747\u5358\u8a9e4.5\u5b57\u7a0b\u5ea6)\n    # \u6697\u53f7\u6587\u306e\u7a7a\u767d\u4f4d\u7f6e\u306b\u7a7a\u767d\u306f\u73fe\u308c\u306a\u3044\u306e\u3067\u3001\u901a\u5e38\u7a7a\u767d\u304c\u4e00\u756a\u591a\u304b\u3063\u305f\u5834\u6240\u304c\u5909\u63db\u5bfe\u8c61\n    # \u305f\u3060\u3057\u6697\u53f7\u6587\u306e' '\u3082\u4e00\u5fdc\u78ba\u8a8d\n    if cnt_space > max_cnt:\n        # \u6697\u53f7\u6587\u4e0a\u3067\u3082\u3063\u3068\u3082\u51fa\u73fe\u56de\u6570\u304c\u591a\u3044\u306e\u304c\u7a7a\u767d\uff08\u3064\u307e\u308a\u7a7a\u767d\u304c\u5165\u308c\u66ff\u3048\u3089\u308c\u3066\u306a\u3044\u5834\u5408\uff09\n        result_char = ' '\n    else:\n        result_char = candidate\n    with open(output_path, \"w\", encoding=\"utf-8\") as out:\n        json.dump({\"char\": result_char}, out, ensure_ascii=False, indent=2)\n\ndef main(argv):\n    # argv[0]: \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\n    # argv[1]: \u6697\u53f7\u5316\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\n    # argv[2]: \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\n    if len(argv) != 3:\n        return\n    cmd = argv[0]\n    in_path = argv[1]\n    out_path = argv[2]\n    if cmd == \"count\":\n        do_count(in_path, out_path)\n    elif cmd == \"space\":\n        do_space(in_path, out_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2369, "language": "Python3", "code": "import sys\n\ndef classify_number(s):\n    try:\n        num = int(s)\n    except ValueError:\n        return \"invalid\"\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    divisible_by_3 = num % 3 == 0\n    has_3 = \"3\" in str(num)\n    if divisible_by_3 and has_3:\n        return \"dumb\"\n    elif divisible_by_3:\n        return \"idiot\"\n    elif has_3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    results = [classify_number(arg) for arg in args]\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2370, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean includes3(int a)\n  {\n    while(a!=0)\n    {\n      if(a%10==3)\n      return true;\n      else\n      return includes3(a/10);\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n    int size=args.length;\n    int i=0;\n    while(i<size)\n    {\n      String data=args[i++];\n      Double tempnum=null;\n      int num;\n      try\n      {\n        tempnum=Double.parseDouble(data);\n        num=tempnum.intValue();\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      if(num<0 || num>1000)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      boolean inc3 = includes3(num);\n      if(inc3 && num%3==0)\n      System.out.println(\"dumb\");\n      else if(inc3)\n      System.out.println(\"stupid\");\n      else if(num%3==0)\n      System.out.println(\"idiot\");\n      else\n      System.out.println(\"smart\");\n    }\n\t\t\n\t\t\n\t}\n}\n"}
{"id": 2371, "language": "Java", "code": "\n\npackage track;\n\npublic class App \n{\n\npublic static boolean contain3(int value)\n{\nint rem;\nwhile(value>0)\n{\nrem = value%10;\nvalue = value/10;\nif(rem == 3)\n{\nreturn true;\n}\n}\nreturn false;\n}\n\n  public static void main(String[] args) throws Exception\n{\n\nint val;\n\n    for (int i = 0, l = args.length; i < l; i++) \n{\nif(args[i].equals(\"\uff11\uff13\"))\n{\nSystem.out.println(\"invalid\");\ncontinue;\n}\n      try\n{\nval = Integer.parseInt(args[i]);\nif(val >= 0 && val <= 1000)\n{\nif(val % 3 == 0 && contain3(val) == true)\n{\nSystem.out.println(\"dumb\");\n}\nelse if(val % 3 == 0)\n{\nSystem.out.println(\"idiot\");\n}\nelse if(contain3(val)==true)\n{\nSystem.out.println(\"stupid\");\n}\nelse\n{\nSystem.out.println(\"smart\");\n}\n}\n}\ncatch(NumberFormatException e)\n{\nSystem.out.println(\"invalid\");\n}\n    }\n  }\n}\n"}
{"id": 2372, "language": "Python3", "code": "import json\nimport sys\n\ndef main():\n    hands_history = [0, 1, 2]  # Starting hands\n    last_opponent = None\n\n    data = json.load(open(sys.argv[1]))  # Load JSON data directly\n    for entry in data:\n        last_opponent = entry['you']\n        hands_history.append(entry['robot'])\n        if len(hands_history) > 3:\n            hands_history.pop(0)\n\n    index = (len(hands_history) - 1) % 3\n    print((index + 1) % 3)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2373, "language": "Python3", "code": "import sys\nimport re\n\ndef main(argv):\n  for e in argv:\n    digitReg = re.compile(r'^[0-9]+$')\n    if digitReg.match(e) is None:\n      print('invalid')\n      continue\n\n    if int(e) < 0 or int(e) > 1000:\n      print('invalid')\n\n    if '3' in e:\n      if int(e) % 3 == 0:\n        print('dumb')\n      else:\n        print('stupid')\n    else:\n      if int(e) % 3 == 0:\n        print('idiot')\n      else:\n        print('smart')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2374, "language": "Java", "code": "package track;\nimport java.io.*;\nimport java.util.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic class App {\n  private static final int ALPHABET_LENGTH = 'z' - 'a' + 1;\n  private static final int END_INDEX_LOWER = 'z';\n\tprivate static final int END_INDEX_UPPER = 'Z';\n\tprivate static final char LINE_SEPARATOR = '\\n';\n\t\n\tprivate static final char SPACE = ' ';\n\tprivate static final String DOUBLE_QUOTE = \"\\\"\";\n\tprivate static final String COLON = \":\";\n  private static final String MAP_KEYS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \";\n\tpublic static void main(String[] args) throws IOException {\n    \tString subcommand = args[0];\n    \tString inputFilePath = args[1];\n    \tString outputFilePath = args[2];\n    \t\n    \tFile file = new File(inputFilePath);\n    \tList<Character> text = new LinkedList<>();\n    \tMap<Character, Integer> countMap = new HashMap<>();\n      MAP_KEYS.chars().forEach(c -> countMap.put((char) c, 0));\n    \t\n    \ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(\n    \t\t\tnew FileInputStream(file), StandardCharsets.UTF_8))) {\n        \tString line = null;\n        \twhile ((line = reader.readLine()) != null) {\n        \t\tfor (int i = 0; i < line.length(); i++) {\n        \t\t\tchar current = line.charAt(i);\n        \t\t\tif (isLowerCase(current) \n        \t\t\t\t\t|| isUpperCase(current) \n        \t\t\t\t\t|| isSpace(current)) {\n        \t\t\t\tif (countMap.containsKey(current)) {\n        \t\t\t\t\tcountMap.put(current, countMap.get(current) + 1);\n                \t\t} else {\n                \t\t\tcountMap.put(current, 1);\n                \t\t}\n        \t\t\t}\n            \t\ttext.add(current);\n        \t\t}\n        \t\ttext.add(LINE_SEPARATOR);\n        \t}\n    \t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n    List<Character> sortedChars = countMap.entrySet()\n    \t\t\t.stream()\n    \t\t\t.sorted((en1, en2) -> en2.getValue().compareTo(en1.getValue()))\n    \t\t\t.map(en -> en.getKey())\n    \t\t\t.collect(Collectors.toList());\n    switch (subcommand) {\n\t\tcase \"count\":\n\t\t\twriteToFile(outputFilePath, mapToJsonInt(countMap));\n\t\t\tbreak;\n\t\tcase \"space\":\n\t    \tMap<String, Character> spaceResponse = new HashMap<String, Character>() {{\n\t    \t\tput(\"char\", sortedChars.get(0));\n\t    \t}};\n\t    \twriteToFile(outputFilePath, mapToJson(spaceResponse));\n\t\t\tbreak;\n\t\tcase \"decrypt\":\n\t\t\tchar spaceSubstitute = sortedChars.get(0);\n\t\t\ttext = text.stream().map(c -> {\n\t    \t\tif (Character.toLowerCase(c) == spaceSubstitute) {\n\t    \t\t\treturn SPACE;\n\t    \t\t} else if (c == SPACE) {\n\t    \t\t\treturn spaceSubstitute;\n\t    \t\t}\n\t    \t\treturn c;\n\t    \t}).collect(Collectors.toList());\n\t    \tint shiftStep = 'o' - 'f';\n\t    \tfor(int i = 0; i < text.size(); i++) {\n\t    \t\ttext.set(i, getShift(text.get(i), shiftStep));\n\t    \t}\n\t    \tString result = text.stream().map(String::valueOf).collect(Collectors.joining());\n\t    \twriteToFile(outputFilePath, result);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n    public static void writeToFile(String fileName, String text) throws IOException {\n    \tBufferedWriter writer = new BufferedWriter(new FileWriter(fileName));\n    \twriter.write(text);\n    \twriter.close();\n    }\n    \n    private static String mapToJson(Map<?, ?> map) {\n    \tif (map.isEmpty()) {\n    \t\treturn \"{}\";\n    \t}\n    \tStringBuilder sb = new StringBuilder();\n    \tsb.append(\"{\").append(LINE_SEPARATOR);\n    \tmap.entrySet().forEach(en -> {\n    \t\tsb.append(DOUBLE_QUOTE)\n    \t\t.append(en.getKey())\n    \t\t.append(DOUBLE_QUOTE)\n    \t\t.append(COLON)\n    \t\t.append(DOUBLE_QUOTE)\n    \t\t.append(en.getValue())\n    \t\t.append(DOUBLE_QUOTE)\n    \t\t.append(LINE_SEPARATOR)\n    \t\t.append(\",\");\n    \t});\n    \t// remove last ',' character\n    \tsb.setLength(sb.length() - 1);\n    \tsb.append(\"}\");\n    \t\n    \treturn sb.toString();\n    }\n\n    private static String mapToJsonInt(Map<?, ?> map) {\n    \tif (map.isEmpty()) {\n    \t\treturn \"{}\";\n    \t}\n    \tStringBuilder sb = new StringBuilder();\n    \tsb.append(\"{\").append(LINE_SEPARATOR);\n    \tmap.entrySet().forEach(en -> {\n    \t\tsb.append(DOUBLE_QUOTE)\n    \t\t.append(en.getKey())\n    \t\t.append(DOUBLE_QUOTE)\n    \t\t.append(COLON)\n    \t\t.append(en.getValue())\n    \t\t.append(LINE_SEPARATOR)\n    \t\t.append(\",\");\n    \t});\n    \t// remove last ',' character\n    \tsb.setLength(sb.length() - 1);\n    \tsb.append(\"}\");\n    \t\n    \treturn sb.toString();\n    }\n    \n    private static boolean isLowerCase(char a) {\n    \treturn 'a' <= a && a <= 'z';\n    }\n    \n    private static boolean isUpperCase(char a) {\n    \treturn 'A' <= a && a <= 'Z';\n    }\n    \n    private static boolean isSpace(char a) {\n    \treturn a == SPACE;\n    }\n    \n    private static char getShift(char c, int step) {\n    \tif (isLowerCase(c)) {\n    \t\treturn getShiftLower(c, step);\n    \t}\n    \tif (isUpperCase(c)) {\n    \t\treturn getShiftUpper(c, step);\n    \t}\n    \t// otherwise, do not change\n    \treturn c;\n    }\n    \n    private static char getShiftLower(char c, int step) {\n    \tint desIndex = c + step;\n    \tif (desIndex > END_INDEX_LOWER) {\n    \t\tdesIndex = desIndex - ALPHABET_LENGTH;\n    \t}\n    \treturn (char) desIndex;\n    }\n    \n    private static char getShiftUpper(char c, int step) {\n    \tint desIndex = c + step;\n    \t\n    \tif (desIndex > END_INDEX_UPPER) {\n    \t\tdesIndex = desIndex - ALPHABET_LENGTH;\n    \t}\n    \treturn (char) desIndex;\n    }\n}\n"}
{"id": 2375, "language": "Python3", "code": "import sys\n\ndef interpret_number(number_str):\n    if not number_str.isdigit():\n        return \"invalid\"\n\n    number = int(number_str)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in number_str:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in number_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Evaluate all input numbers based on the 3 Idiots Algorithm.\n    results = [interpret_number(arg) for arg in argv]\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2376, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <fstream>\n#include <deque>\n#include <map>\n#include <tuple> // For std::tuple\n\n// Structure to hold a single game record\nstruct GameRecord {\n    int robot;\n    int you;\n};\n\n// Helper function to parse an integer from a string, advancing the position past the number.\n// Skips non-digit characters until a digit is found.\nint extract_int_from_string(const std::string& s, size_t& current_parse_pos) {\n    while (current_parse_pos < s.length() && !isdigit(s[current_parse_pos])) {\n        current_parse_pos++;\n    }\n    size_t start_int_pos = current_parse_pos;\n    while (current_parse_pos < s.length() && isdigit(s[current_parse_pos])) {\n        current_parse_pos++;\n    }\n    // Convert the extracted substring to an integer.\n    return std::stoi(s.substr(start_int_pos, current_parse_pos - start_int_pos));\n}\n\nint main(int argc, char *argv[]) {\n    // Check if the correct number of command-line arguments is provided.\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <json_file_path>\" << std::endl;\n        return 1; // Indicate an error\n    }\n\n    // Open the input JSON file.\n    std::string filePath = argv[1];\n    std::ifstream inputFile(filePath);\n    if (!inputFile.is_open()) {\n        std::cerr << \"Error: Could not open file \" << filePath << std::endl;\n        return 1; // Indicate an error\n    }\n\n    // Read the entire file content into a single string.\n    std::string fileContent((std::istreambuf_iterator<char>(inputFile)), std::istreambuf_iterator<char>());\n    inputFile.close();\n\n    // Vector to store parsed game records.\n    std::vector<GameRecord> gameRecords;\n    size_t currentReadPos = 0;\n\n    // Manually parse the JSON content.\n    // This simple parser assumes a well-formed array of objects like `[{\"robot\": N, \"you\": M}, ...]`.\n    while (true) {\n        size_t robotKeyPos = fileContent.find(\"\\\"robot\\\":\", currentReadPos);\n        if (robotKeyPos == std::string::npos) {\n            break; // No more game records found\n        }\n        currentReadPos = robotKeyPos;\n        int robotHand = extract_int_from_string(fileContent, currentReadPos);\n\n        size_t youKeyPos = fileContent.find(\"\\\"you\\\":\", currentReadPos);\n        currentReadPos = youKeyPos;\n        int youHand = extract_int_from_string(fileContent, currentReadPos);\n\n        gameRecords.push_back({robotHand, youHand});\n    }\n\n    // --- Robot Simulation Logic ---\n    // robotHistory stores the robot's last three played hands. Initialized to the fixed starting sequence.\n    std::deque<int> robotHistory = {0, 1, 2}; // Rock, Scissors, Paper\n\n    // stateCycleCounts maps a 4-tuple state (prev3, prev2, prev1, last_opponent) to an integer count.\n    // The value N means that for this state, the robot will play (N % 3) next.\n    std::map<std::tuple<int, int, int, int>, int> stateCycleCounts;\n\n    // lastOpponentHand stores the hand the opponent played in the immediately previous game.\n    // Default to Rock (0) if no records or to handle the initial state before any opponent hands are known.\n    int lastOpponentHand = 0; \n\n    // Simulate all recorded games to build the robot's state knowledge.\n    for (size_t i = 0; i < gameRecords.size(); ++i) {\n        int currentRobotHand = gameRecords[i].robot;\n        int currentOpponentHand = gameRecords[i].you;\n\n        // The robot's decision rule applies from the 4th game (index 3) onwards.\n        // The first 3 games are fixed initial hands.\n        if (i >= 3) {\n            // Form the state tuple used to make the decision for this game.\n            std::tuple<int, int, int, int> decisionState = std::make_tuple(\n                robotHistory[0], robotHistory[1], robotHistory[2], lastOpponentHand\n            );\n            \n            // Increment the counter for this state.\n            // If the state is encountered for the first time, its value in the map is default-constructed to 0, then incremented to 1.\n            // This means stateCycleCounts[decisionState] will correctly hold the number of times this state *has occurred*\n            // up to this point. The robot's move for the *next* occurrence of this state will be (current count) % 3.\n            stateCycleCounts[decisionState]++; \n        }\n\n        // Update robot's history with the hand it *actually* played in this record.\n        robotHistory.pop_front();\n        robotHistory.push_back(currentRobotHand);\n\n        // Update the last opponent hand.\n        lastOpponentHand = currentOpponentHand;\n    }\n\n    // Predict the robot's move for the upcoming game (the one we need to play against).\n    // Form the state tuple based on the current history after all recorded games.\n    std::tuple<int, int, int, int> nextGamePredictionState = std::make_tuple(\n        robotHistory[0], robotHistory[1], robotHistory[2], lastOpponentHand\n    );\n\n    int robotPredictedMove;\n    // If this specific state has not been seen before, the robot plays Rock (0) as per the cycle rule's start.\n    if (stateCycleCounts.find(nextGamePredictionState) == stateCycleCounts.end()) {\n        robotPredictedMove = 0;\n    } else {\n        // Otherwise, use the recorded count to determine the next hand in the cycle.\n        robotPredictedMove = stateCycleCounts[nextGamePredictionState] % 3;\n    }\n\n    // Determine our winning hand based on the robot's predicted move.\n    // Rock (0) -> Paper (2)\n    // Scissors (1) -> Rock (0)\n    // Paper (2) -> Scissors (1)\n    // Formula: (robot_move + 2) % 3\n    int ourWinningHand = (robotPredictedMove + 2) % 3;\n\n    // Output our winning hand to standard output.\n    std::cout << ourWinningHand << std::endl;\n\n    return 0;\n}"}
{"id": 2377, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class App {\n public static boolean isConsistent(int[] q, int n) {\n\n       for (int i = 0; i < n; i++) {\n           if (q[i] == q[n]) return false;\n           if ((q[i] - q[n]) == (n - i)) return false;\n           if ((q[n] - q[i]) == (n - i)) return false;\n       }\n       return true;\n   }\n\n   public static String[][] printQueens(int[] q,String[][] b) {\n       String[][] a = new String[8][8];\n\n       int n = q.length;\n       for (int i = 0; i < n; i++) {\n           for (int j = 0; j < n; j++) {\n               if (q[i] == j) a[i][j] = \"Q\";\n               else a[i][j] = \".\";\n           }\n\n       }\n\n\n       for (int i = 0; i < n; i++) {\n           for (int j = 0; j < n; j++) {\n               if (b[i][j]==\"Q\") {\n                   if (b[i][j] != a[i][j]) {\n                       return null;\n                   }\n               }\n\n           }\n\n       }\n       return a;\n\n   }\n\n   public static void enumerate(int n,String[][] y) {\n       int[] a = new int[n];\n       enumerate(a, 0,y);\n   }\n\n   public static void enumerate(int[] q, int k,String[][] y) {\n       int n = q.length;\n       if (k == n) {\n           if (printQueens(q,y) != null) {\n\n               String[][] res=printQueens(q,y);\n               for (int i = 0; i < 8; i++) {\n                   for (int j = 0; j < 8; j++) {\n\n                       System.out.print(res[i][j]);\n                   }\n                   System.out.println();\n               }\n               System.out.println();\n\n           }\n       } else {\n           for (int i = 0; i < n; i++) {\n               q[k] = i;\n               if (isConsistent(q, k)) enumerate(q, k + 1,y);\n           }\n       }\n   }\n\n\n   public static void main(String[] args) {\n\n       String[][] y=new String[8][8];\n       try {\n           File file = new File(args[0]);\n           FileReader filereader = new FileReader(file);\n           BufferedReader bufferedReader = new BufferedReader(filereader);\n\n           String data;\n            int i=0;\n           while ((data = bufferedReader.readLine()) != null) {\n               if (i > 0){\n                   y[Integer.parseInt(data.split(\" \")[0])][Integer.parseInt(data.split(\" \")[1])] = \"Q\";\n           }\n               ++i;\n           }\n\n           filereader.close();\n       } catch (IOException e) {\n           e.printStackTrace();\n       }\n\n\n\n\n       enumerate(8,y);\n   }\n}\n"}
{"id": 2378, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    if not argv:\n        return\n\n    # Let's process all inputs and print at the end\n    results_to_print = []\n    for val_str in argv:\n        if not val_str.isdecimal():\n            results_to_print.append(\"invalid\")\n            continue\n        \n        i = int(val_str)\n        if i > 1000 or i < 0:\n            results_to_print.append(\"invalid\")\n            continue\n            \n        divides_by_3 = (i % 3 == 0)\n        string_has_3 = \"3\" in val_str\n        \n        res = \"smart\" # default case\n        if divides_by_3 and string_has_3:\n            res = \"dumb\"\n        elif divides_by_3:\n            res = \"idiot\"\n        elif string_has_3:\n            res = \"stupid\"\n        \n        results_to_print.append(res)\n        \n    print(\"\\n\".join(results_to_print))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2379, "language": "Java", "code": "package track;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\npublic class App {\n\n  public static void main(String[] args) {\n    \n    //Create the 8 board\n    char[][] board = new char[8][8];\n    for (int i = 0; i < board.length; i++){\n      for (int j = 0; j < board[0].length; j++){\n        board[i][j] = '.';\n      }\n    }\n\n    try {\n      File file = new File(args[0]);\n      FileReader filereader = new FileReader(file);\n      BufferedReader bufferedReader = new BufferedReader(filereader);\n\n      String data = bufferedReader.readLine();\n      int k = data.charAt(0);\n      //Adds the queens\n      while ((data = bufferedReader.readLine()) != null) {\n        int row = data.charAt(0) - '0';\n        int col = data.charAt(2) - '0';\n        board[row][col] = 'Q';\n      }\n\n      //recursion function\n      findBoard(board, 0);\n\n      filereader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  public static boolean canPlace(char[][] board, int row, int col){\n    //Checks row\n      for (int i = 0; i < board.length; i++){\n        if (board[row][i] == 'Q')\n          return false;\n      }\n      int i, j;\n      //These two ifs check diagonal 1\n      for (i = row, j = col; i >= 0 && j >= 0; i--, j--){\n        if (board[i][j] == 'Q')\n          return false;\n      }\n      for (i = row, j = col; i < board.length && j < board.length; i++, j++){\n        if (board[i][j] == 'Q')\n          return false;\n      }\n\n      //These two ifs check diagonal 2\n      for (i = row, j = col; i < board.length && j >= 0; i++, j--){\n        if (board[i][j] == 'Q')\n          return false;\n      }\n      for (i = row, j = col; i >= 0 && j < board.length; i--, j++){\n        if (board[i][j] == 'Q')\n          return false;\n      }\n\n      return true;\n  }\n\n  public static boolean findBoard(char[][] board, int col){\n    \n    //Base case if we have fit all the queens to the board\n    if (col >= board.length){\n      for (int i = 0; i < board.length; i++){\n        for (int j = 0; j < board[0].length; j++){\n          System.out.print(board[i][j]);\n        }\n        System.out.println(\"\");\n      }\n      return true;\n    }\n\n    //Check if queen is already in column\n    for (int row = 0; row < board.length; row++){\n      if (board[row][col] == 'Q')\n        return findBoard(board, col+1);\n    }\n\n    //We go through all rows and see if we can fit a queen\n    for (int row = 0; row < board.length; row++){\n\n      if (canPlace(board, row, col)){\n        board[row][col] = 'Q';\n        \n        if (findBoard(board, col+1)){\n          return true;\n        }else {\n          //We have to backtrack if we were not successful\n          board[row][col] = '.';\n        }\n\n      }\n    }\n    return false;\n  }\n}\n"}
{"id": 2380, "language": "C#", "code": "using System;\nusing System.Numerics;\nusing System.Text;\n\npublic class MainApp\n{\n  static public void Main (string[] args)\n  {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    // ---\n    // This is a sample code to use arguments and stdout.\n    // Edit and remove this code as you like.\n\n    string[] vals = args[0].Split(' ');\n\n    BigInteger val1 = Decode(vals[0]);\n    BigInteger val2 = Decode(vals[2]);\n\n    BigInteger result = 0;\n\n\n    if (vals[1].Equals(\"+\"))\n    {\n        result = val1 + val2;\n    }\n    else\n    {\n        result = val1 * val2;\n    }\n\n    System.Console.WriteLine(Encode(result));\n  }\n\n  static BigInteger Decode(string val)\n  {\n      int count = 0;\n      BigInteger sum = 0;\n\n      for (int i = val.Length - 1; 0 <= i; i--)\n      {\n          BigInteger num = BigInteger.Parse(val.Substring(i, 1));\n          sum += num * (BigInteger)System.Math.Pow(9, count);\n          count++;\n      }\n\n      return sum;\n  }\n\n  static string Encode(BigInteger val)\n  {\n      var builder = new StringBuilder();\n\n      BigInteger num = val;\n\n      do\n      {\n          string strNum = (num % 9).ToString();\n\n          builder.Insert(0, strNum);\n\n          num /= 9;\n      } while (0 < num);\n\n      return builder.ToString();\n  }\n}\n"}
{"id": 2381, "language": "C++", "code": "#include <iostream>\n#include <sstream>\n#include <cstdlib>\n#include <cmath>\n\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  string dumb[5] = { \"idiot\", \"stupid\", \"dumb\", \"smart\", \"invalid\" };\n\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    bool multy3 = false;\n    bool has3 = false;\n    int thisArg;\n    int outputIndex = 4;\n    istringstream ss(argv[i]);\n    if( !( ss >> thisArg ) ) {} // default is invalid\n    else if( thisArg > 1000 ) {} // default is invalid\n    else\n    {\n      // multiply of 3\n      if( thisArg % 3 == 0 ) multy3 = true;\n      // has 3\n      for( int j = 0; j < 3; j++ )\n      {\n        // devide by power of 10, i and minus 3, then 0 has 3 \n        int devide10i = static_cast<int>( thisArg / pow( 10, j ) );\n        if( devide10i == 0 ) break;\n        else if( ( devide10i - 3 ) % 10 == 0 ) \n        {\n          has3 = true;\n          break;\n        } \n      }\n\n      // set index\n      if( multy3 == true && has3 == true )  outputIndex = 2;\n      else if( multy3 == true )             outputIndex = 0;\n      else if( has3 == true )               outputIndex = 1;\n      else                                  outputIndex = 3;\n    }\n    // do output\n    cout << dumb[ outputIndex ] << endl;\n  }\n\n  return 0;\n}\n"}
{"id": 2382, "language": "Python3", "code": "import sys\nimport json\n\ndef count_cmd(infile, outfile):\n    result = {}\n    with open(infile, encoding=\"utf-8\") as f:\n        for line in f:\n            for ch in line:\n                if ch.isalpha() or ch == \" \":\n                    result[ch] = result.get(ch, 0) + 1\n    with open(outfile, \"w\", encoding=\"utf-8\") as g:\n        json.dump(result, g)\n\ndef space_cmd(infile, outfile):\n    count = {}\n    with open(infile, encoding=\"utf-8\") as f:\n        text = f.read()\n    for c in text:\n        if c.isalpha() or c == \" \":\n            count[c] = count.get(c, 0) + 1\n    # \u7a7a\u767d\u306b\u7f6e\u63db\u3055\u308c\u305f\u5c0f\u6587\u5b57\u306f\u983b\u5ea6\u6700\u5927\u3068\u306a\u308b\u306f\u305a\n    lower = {k: v for k, v in count.items() if k.islower()}\n    spacechar = min(lower, key=lambda k: (-lower[k], k))\n    with open(outfile, \"w\", encoding=\"utf-8\") as g:\n        json.dump({\"char\": spacechar}, g)\n\ndef get_shift(text, spacechar):\n    # ' '\u3092spacechar\u306b\u7f6e\u304d\u63db\u3048\u3066\u983b\u5ea6\u8abf\u3079\u76f4\u3059\n    temp = []\n    for ch in text:\n        if ch == ' ':\n            temp.append(spacechar)\n        elif ch == spacechar:\n            temp.append(' ')\n        else:\n            temp.append(ch)\n    swapped = ''.join(temp)\n    letters = {}\n    for c in swapped:\n        if c.isalpha():\n            cc = c.lower()\n            letters[cc] = letters.get(cc,0) + 1\n    mc = max(letters, key=letters.get)\n    # 'e'\u304c\u6700\u983b\n    diff = (ord(mc) - ord('e')) % 26\n    return diff\n\ndef decrypt_cmd(infile, outfile):\n    with open(infile, encoding=\"utf-8\") as f:\n        crypt = f.read()\n    # \u307e\u305aspacechar\u7279\u5b9a\n    charcount = {}\n    for c in crypt:\n        if c.isalpha() or c == \" \":\n            charcount[c] = charcount.get(c, 0) + 1\n    lowers = {k: v for k, v in charcount.items() if k.islower()}\n    spacechar = min(lowers, key=lambda k: (-lowers[k], k))\n    swaptext = []\n    for c in crypt:\n        if c == ' ':\n            swaptext.append(spacechar)\n        elif c == spacechar:\n            swaptext.append(' ')\n        else:\n            swaptext.append(c)\n    swapped = ''.join(swaptext)\n    shift = get_shift(crypt, spacechar)\n    norm = []\n    for cc in swapped:\n        if cc.islower():\n            orig = chr((ord(cc)-ord('a')-shift)%26+ord('a'))\n            norm.append(orig)\n        elif cc.isupper():\n            orig = chr((ord(cc)-ord('A')-shift)%26+ord('A'))\n            norm.append(orig)\n        else:\n            norm.append(cc)\n    dec = ''.join(norm)\n    with open(outfile, \"w\", encoding=\"utf-8\") as fo:\n        fo.write(dec)\n\ndef main(argv):\n    mode, infile, outfile = argv\n    if mode==\"count\":\n        count_cmd(infile, outfile)\n    elif mode==\"space\":\n        space_cmd(infile, outfile)\n    elif mode==\"decrypt\":\n        decrypt_cmd(infile, outfile)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2383, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tString[] arr = args[0].split(\"}\");\n    int[] robot = new int[15];\n    int roboIndex = 0,myarrIndex = 0;\n    System.out.println(0);\n\t}\n}\n"}
{"id": 2384, "language": "Python3", "code": "def print_board(board):\n    for row in board:\n        print(\"\".join(row))\n\ndef is_valid(board, row, col):\n    # Check rows and diagonals\n    for i in range(8):\n        if board[i][col] == 'Q':\n            return False\n    for i in range(max(0, row - 7), min(8, row + 1)):\n        for j in range(max(0, col - 7), min(8, col + 1)):\n            if abs(i - row) == abs(j - col) and board[i][j] == 'Q':\n                return False\n    return True\n\ndef place_queens(board, k):\n    if k == 8:\n        return True\n    for r in range(8):\n        for c in range(8):\n            if board[r][c] == '.' and is_valid(board, r, c):\n                board[r][c] = 'Q'\n                if place_queens(board, k + 1):\n                    return True\n                board[r][c] = '.'  # backtrack\n    return False\n\ndef main():\n    import sys\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    queens = [tuple(map(int, line.split())) for line in input_data[1:k + 1]]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in queens:\n        board[r][c] = 'Q'\n\n    if place_queens(board, k):\n        print_board(board)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2385, "language": "Java", "code": "package track;\nimport java.awt.*;\nimport java.util.*;\n\npublic class App {\n  static boolean done;\n  public static void main(String[] args) {\n    Scanner scan = new Scanner(System.in);\n    int numQueens = scan.nextInt();\n    scan.nextLine();\n\n    LinkedList<Point> queens = new LinkedList<>();\n    for (int i = 0; i < numQueens; i++) {\n      String[] pos = scan.nextLine().split(\" \");\n      int r = Integer.parseInt(pos[0]);\n      int c = Integer.parseInt(pos[1]);\n      queens.add(new Point(r,c));\n    }\n    done = false;\n    search(queens, numQueens);\n  }\n\n  public static void search(LinkedList<Point> queens, int numQueens) {\n    if (numQueens == 8 && !done) {\n      done=true;\n      char[][] board = new char[8][8];\n      for(int i=0;i<8;i++) {\n        for (int j=0;j<8;j++) {\n          board[i][j] = '.';\n        }\n      }\n      for (Iterator<Point> q = queens.iterator(); q.hasNext();) {\n        Point pos = q.next();\n        board[pos.x][pos.y] = 'Q';\n      }\n      for (int i=0;i<8;i++) {\n        for (int j=0;j<8;j++) {\n          System.out.print(board[i][j]);\n        }\n        System.out.println();\n      }\n    } else if (! done){\n      for (int i=0;i<8;i++) {\n        for (int j=0;j<8;j++) {\n          Point testQueen = new Point(i,j);\n          boolean noConflict = true;\n          for (Iterator<Point> q = queens.iterator(); q.hasNext();) {\n            noConflict &= checkConflict(q.next(),testQueen);\n          }\n          if (noConflict && ! done) {\n            queens.push(testQueen);\n            search(queens, numQueens+1);\n            queens.pop();\n          }\n        }\n      }\n    }\n  }\n\n  public static boolean checkConflict(Point q1, Point q2) {\n    if (q1.x == q2.x) {\n      return false;\n    }\n\n    if (q1.y == q2.y) {\n      return false;\n    }\n\n    if (Math.abs(q1.x - q2.x) == Math.abs(q1.y-q2.y)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"}
{"id": 2386, "language": "Ruby", "code": "require 'json'\n\ndef main(argv)\n  # \u5f15\u6570\u3092\u53d6\u5f97\n  mission = argv[0]\n  input_path = argv[1]\n  output_path = argv[2]\n\n  # \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n  input = \"\"\n  File.open(input_path, \"r\") do |f|\n    f.each_line do |l|\n      input += l\n    end\n  end\n\n  output = count_chars(input)\n\n  # mission\u3054\u3068\u306b\u51e6\u7406\u3092\u8ffd\u52a0\n  if %w(space decrypt).include?(mission)\n    output_copy = output\n    output_copy = output_copy.sort{|(k1, v1), (k2, v2)| v2 <=> v1 }\n    output = Hash.new\n    changed_char = output_copy[0][0]\n    output[\"char\"] = changed_char\n  end\n\n  if mission == \"decrypt\"\n    output = input\n    output.tr!(\"#{changed_char} \", \" #{changed_char}\")\n\n    most_char = count_chars(output)[1][0].to_c\n    0.upto(26) do |i|\n      input_shifted = shift(input, i)\n      counts = count_chars(input_shifted)\n      counts = counts.sort{|(k1, v1), (k2, v2)| v2 <=> v1 }\n      p counts\n      if changed_char = counts[1][0] == \"e\"\n        break\n      end\n    end\n  end\n\n  # \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n  File.open(output_path, \"w\") do |f|\n    if mission == \"decrypt\"\n      f.puts output\n    else\n      JSON.dump(output, f)\n    end\n  end\n\n  argv.each_index do |i|\n    v = argv[i]\n    puts \"argv[#{i}]: #{v}\"\n  end\nend\n\ndef count_chars(input)\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  output = Hash.new\n  alphabet.chars do |a|\n    output[a] = 0\n  end\n  alphabet.upcase.chars do |a|\n    output[a] = 0\n  end\n  output[\" \"] = 0 \n  # \u6539\u884c\u6587\u5b57\u7b49\u306f1char\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n  input.size.times do |i|\n    c = input[i]\n    if alphabet.include?(c) ||\n        alphabet.upcase.include?(c) ||\n        c == \" \"\n        output[c] += 1 \n    end\n  end\n  return output\nend\n\ndef shift(input, n)\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet_shifted = alphabet.slice(n % 26, 26) + alphabet.slice(0, n % 26)\n  shifted_input = input\n  shifted_input.tr!(alphabet, alphabet_shifted)\n  shifted_input.tr!(alphabet.upcase, alphabet_shifted.upcase)\n  return shifted_input\nend\n\nmain(ARGV)\n"}
{"id": 2387, "language": "Python3", "code": "#\u30de\u30b9\u6570\nboard = 8    \n#\u5165\u529b\nk=int(input())\n#8*8\u306e\u51fa\u529b\u3059\u308b\u30de\u30b9\u76ee\u306e\u914d\u5217\u30920\u306b\u521d\u671f\u5316\nx=[[ 0 for i in range(board)] for j in range(board)]\n#\u5217\u306e\u914d\u5217\u30920\u306b\u521d\u671f\u5316\ncol=[0 for i in range(board)]\n#\u884c\u306e\u914d\u5217\u30920\u306b\u521d\u671f\u5316\nrow=[0 for i in range(board)]\n\ndpos=[0 for i in range(board * 2 - 1)]\ndneg=[0 for i in range(board * 2 - 1)]\n\n#\u5165\u529b\u3092x[r][c]\u306b\u683c\u7d0d\nfor i in range(k):\n    r,c=[int(x) for x in input().split()]\n    x[r][c] = 1\n    \ndef queen_out() :\n    global x\n    global col\n    global row\n    global k\n    global board\n    \n    #8*8\u306e\u51fa\u529b\u304c\u7d42\u308f\u3063\u305f\u3089\u51e6\u7406\u3092\u7d42\u4e86\n    for i in range(board):\n        for j in range(board):\n            if x[i][j] and row[i] != j:\n                return\n       \n    for i in range(board):\n        for j in range(board):\n            if row[i]==j: \n                print('Q',end='')\n            else:\n                print('.',end='')\n        print()\n        \ndef conflict(i):\n    global x\n    global col\n    global row\n    global k\n    global board\n    \n    # i\u304c\uff18\u306b\u306a\u3063\u305f\u3089\u51e6\u7406\u3092\u7d42\u4e86\u3057queen\u306e\u4f4d\u7f6e\u3092\u51fa\u529b\n    if (i == board) :\n        queen_out()\n        return\n    \n    for j in range(board):\n\n        #\u3053\u306e\u3068\u304d\u8972\u6483\u3067\u304d\u308b\u306e\u3067continue\n        if (col[j] or dpos[i + j] or dneg[i - j + board - 1]):\n            continue        \n        \n        row[i] = j \n        col[j] = dpos[i + j] = dneg[i - j + board - 1] = 1;\n        conflict(i + 1);\n        \n        row[i] = col[j] = dpos[i + j] = dneg[i - j + board - 1] = 0\n\n\nif __name__ == '__main__':\n    conflict(0)   "}
{"id": 2388, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint contains_3(int n) {\n    char buf[5];\n    sprintf(buf, \"%d\", n);\n    return strchr(buf, '3') != NULL;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        int n;\n        int len;\n        if (sscanf(argv[i], \"%d%n\", &n, &len) != 1 || len != strlen(argv[i])) {\n            puts(\"invalid\");\n            continue;\n        }\n\n        if (n < 0 || n > 1000) {\n            puts(\"invalid\");\n            continue;\n        }\n\n        int div3 = (n % 3 == 0);\n        int has3 = contains_3(n);\n\n        if (div3 && has3) puts(\"dumb\");\n        else if (div3) puts(\"idiot\");\n        else if (has3) puts(\"stupid\");\n        else puts(\"smart\");\n    }\n    return 0;\n}"}
{"id": 2389, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This solution returns the board, offering a more functional flavor where the result\n    # is passed up the recursion stack.\n\n    BOARD_DIM = 8\n\n    # Input K and initial queen positions\n    num_preset_queens = int(sys.stdin.readline())\n\n    # Board and conflict trackers\n    board_cells = [['.' for _ in range(BOARD_DIM)] for _ in range(BOARD_DIM)]\n    cols_occupied = [False] * BOARD_DIM\n    diag_sum_occupied = [False] * (2 * BOARD_DIM - 1)\n    diag_diff_occupied = [False] * (2 * BOARD_DIM - 1)\n    \n    # Store which rows have pre-set queens\n    fixed_row_indices = set()\n\n    # Populate initial board state and trackers\n    for _ in range(num_preset_queens):\n        r, c = map(int, sys.stdin.readline().split())\n        board_cells[r][c] = 'Q'\n        cols_occupied[c] = True\n        diag_sum_occupied[r + c] = True\n        diag_diff_occupied[r - c + (BOARD_DIM - 1)] = True\n        fixed_row_indices.add(r)\n\n    # Recursive solver function\n    def solve_board(current_row):\n        # Base case: All rows processed, solution found. Return the board.\n        if current_row == BOARD_DIM:\n            return board_cells\n\n        # If this row has a pre-set queen, simply move to the next row\n        if current_row in fixed_row_indices:\n            return solve_board(current_row + 1)\n\n        # Iterate through columns to find a spot for the queen\n        for current_col in range(BOARD_DIM):\n            # Check safety\n            if not cols_occupied[current_col] and \\\n               not diag_sum_occupied[current_row + current_col] and \\\n               not diag_diff_occupied[current_row - current_col + (BOARD_DIM - 1)]:\n                \n                # Place the queen (modify shared state)\n                board_cells[current_row][current_col] = 'Q'\n                cols_occupied[current_col] = True\n                diag_sum_occupied[current_row + current_col] = True\n                diag_diff_occupied[current_row - current_col + (BOARD_DIM - 1)] = True\n\n                # Recurse for the next row\n                result = solve_board(current_row + 1)\n                if result: # If a solution was found in subsequent calls\n                    return result\n\n                # Backtrack (undo changes)\n                board_cells[current_row][current_col] = '.'\n                cols_occupied[current_col] = False\n                diag_sum_occupied[current_row + current_col] = False\n                diag_diff_occupied[current_row - current_col + (BOARD_DIM - 1)] = False\n        \n        return None # No solution found from this path\n\n    # Start the solving process\n    final_board = solve_board(0)\n\n    # Print the resulting board\n    for row_data in final_board:\n        print(\"\".join(row_data))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2390, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n\n  private static final String MESSAGE_GAME_COMPLETE = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n  private static final String MESSAGE_GAME_OVER = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\n\tpublic static void main(String[] args) {\n\n    // \u51fa\u529b\u97f3\u30d0\u30c3\u30d5\u30a1\n    String sb = new String();\n    // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a\n    boolean isGameOver = true;\n    // \u5b9f\u884c\u5f15\u6570\u3092int\u306b\u5909\u63db\n    int arg = Integer.parseInt(args[0]);\n\n    for (int i = 0; i < arg; i++) {\n      // \u30e9\u30f3\u30c0\u30e0\u6570\u5024\u3092\u53d6\u5f97\n      Random rand = new Random();\n      int num = rand.nextInt(10);\n      // \u5076\u6570\u304b\u5947\u6570\u304b\u3092\u5224\u5b9a\n      if (num / 2 == 0) {\n        // \u5076\u6570\u306e\u5834\u5408\"\u30ab\"\u306e\u97f3\u3092\u51fa\u529b\n        sb += \"\u30ab\";\n        System.out.println(\"\u30ab\");\n      } else {\n        // \u5947\u6570\u306e\u5834\u5408\"\u30c9\"\n        sb += \"\u30c9\";\n        System.out.println(\"\u30c9\");\n      }\n      // \u51fa\u529b\u3057\u305f\u97f3\u304c\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\u306e\u5834\u5408\n      if (sb.endsWith(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\")) {\n        // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u30d5\u30e9\u30b0\u3092\u5012\u3059\uff08false\uff09\n        isGameOver = false;\n        // \u51e6\u7406\uff08\u30eb\u30fc\u30d7\uff09\u3092\u7d42\u4e86\n        break;\n      }\n    }\n\n    if (isGameOver) {\n      // \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"\u3092\u51fa\u529b\n      System.out.println(MESSAGE_GAME_OVER);\n    } else {\n      // \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\"\u306e\u97f3\u3092\u51fa\u529b\n      System.out.println(MESSAGE_GAME_COMPLETE);\n    }\n\t}\n}\n"}
{"id": 2391, "language": "JavaScript (Node.js)", "code": "\"use strict\";\n\nfunction main(argv) {\n\n  argv.forEach((i) => {\n  let temp = [];\n  let idiotCheck = false;\n  let stupidCheck = false;\n  let value = 0;\n\n    if(i <= 1000 && i >0){\n      temp = String(i).split('');\n      temp.forEach((el) => {\n        if(el == 3){\n            stupidCheck = true;\n        }\n        value += el;\n      });\n      if(value %3 == 0){\n        idiotCheck = true;\n      }\n      if(stupidCheck && idiotCheck){\n        console.log('dumb');\n      }else if(stupidCheck){\n        console.log('stupid');\n      }else if(idiotCheck){\n        console.log('idiot');\n      }else{\n        console.log('smart');\n      }\n    }else{\n      console.log('invalid');\n    }\n\n  })\n\n}\nmain(process.argv.slice(2));\n"}
{"id": 2392, "language": "Python3", "code": "import sys\nimport json\n\n#\u51fa\u3066\u304f\u308b\u6587\u5b57\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\ndef count(input_file):\n  with open(input_file) as f:\n    contents = f.read()\n\n  dict = {}\n  dict[\" \"] = 0\n  for i in range(26):\n    dict[chr(ord('A') + i)] = 0\n  for i in range(26):\n    dict[chr(ord('a') + i)] = 0\n  for c in contents:\n    if(c in dict):\n      dict[c]=dict[c]+1\n\n  return dict\n  \n#\u6587\u5b57\u5217\u306e\u5e73\u5747\u304c4.5\u306b\u8fd1\u304f\u306a\u308b\u3082\u306e\u3092\u30b9\u30da\u30fc\u30b9\u3068\u3059\u308b\ndef space(input_file):\n  with open(input_file) as f:\n    contents = f.read()\n  contents.lower()\n  min = 100.0\n  target = \"\"\n\n  for i in range(26):\n    split_list = contents.split(chr(ord('a') + i))\n    len_sum = 0.0\n    counter = 0.0\n    for c in split_list:\n      counter += 1\n      len_sum += len(c)\n    if(abs(4.5-len_sum/counter)<abs(4.5-min)):\n      min = len_sum/counter\n      target = chr(ord('a') + i)\n\n  return {\"char\":target}\n\n#\u6697\u53f7\u306e\u5fa9\u53f7\u5316\ndef decrypt(input_file):\n  with open(input_file) as f:\n    contents = f.read()\n\n  sp = space(input_file)\n  contents.replace(sp[\"char\"],\" \")\n  num = count(input_file)\n  max_key = max(num, key=num.get)\n  diff = ord(max_key) - ord('e')\n  for c in contents:\n      c = chr(ord(c)-diff)\n  return contents\n\ndef main(argv):\n  if(argv[0]==\"count\"):\n    dict = count(argv[1])\n  elif(argv[0]==\"space\"):\n    dict = space(argv[1])\n  elif(argv[0]==\"decrypt\"):\n    decrypt(argv[1])\n  \n  with open(argv[2], mode='w') as f2:\n    if(argv[0]==\"count\" or argv[0]==\"space\"):\n      f2.write(json.dumps(dict))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2393, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n\t\tfor (int i = 0, l = args.length; i < l; i++) \n    {\n\t\t\tString output = String.format(args[i]);\n\t\t\t//System.out.println(output);\n    fn(output);\n\t\t}\n\t}\n  public static void fn(String s)\n  {\n    int n;\n    \n    try\n    {\n      if(s.contains(\" \"))\n      {\n                //throw new Exception(\"catch\");\n                System.out.println(\"invalid\");\n                return;\n      }\n      n = Integer.parseInt(s);\n    \n      if(n%3==0)\n      {\n        if(s.contains(\"3\"))\n        {System.out.println(\"dumb\");return;}\n        else\n        {System.out.println(\"idiot\");return;}\n      }\n      if(s.contains(\"3\"))\n        {System.out.println(\"stupid\");return;}\n      System.out.println(\"smart\");\n      \n    }\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n  }\n}\n"}
{"id": 2394, "language": "Python3", "code": "import sys\n\ndef get_final_status(s_val):\n    if not s_val.isdigit(): return \"invalid\"\n    \n    n_val = int(s_val)\n    \n    if not (0 <= n_val <= 1000): return \"invalid\"\n\n    div_by_3 = (n_val % 3 == 0)\n    has_3 = ('3' in s_val)\n\n    if div_by_3 and has_3: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if has_3: return \"stupid\"\n    return \"smart\"\n\ndef run_cmd_line(arguments):\n    for arg_str in arguments:\n        print(get_final_status(arg_str))\n\nif __name__ == '__main__':\n    run_cmd_line(sys.argv[1:])"}
{"id": 2395, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n$board_state = [];\n$row_is_used = [];\n$col_is_used = [];\n$diag1_is_used = [];\n$diag2_is_used = [];\n\nfunction solve_queens($col) {\n    global $board_state, $row_is_used, $col_is_used, $diag1_is_used, $diag2_is_used;\n\n    // Base case: If all columns are filled, we found a solution.\n    if ($col == 8) {\n        for ($i = 0; $i < 8; $i++) {\n            echo implode('', $board_state[$i]) . \"\\n\";\n        }\n        exit;\n    }\n\n    // If a queen is already in this column (from input), skip to the next.\n    if ($col_is_used[$col]) {\n        solve_queens($col + 1);\n        return;\n    }\n\n    // Try placing a queen in each row of the current column.\n    for ($row = 0; $row < 8; $row++) {\n        // Check if placing a queen at (row, col) is safe.\n        if (!$row_is_used[$row] && !$diag1_is_used[$row - $col + 7] && !$diag2_is_used[$row + $col]) {\n            // Place queen\n            $board_state[$row][$col] = 'Q';\n            $row_is_used[$row] = true;\n            $diag1_is_used[$row - $col + 7] = true;\n            $diag2_is_used[$row + $col] = true;\n\n            // Recurse to the next column.\n            solve_queens($col + 1);\n\n            // Backtrack: Remove the queen and reset the state for other possibilities.\n            $board_state[$row][$col] = '.';\n            $row_is_used[$row] = false;\n            $diag1_is_used[$row - $col + 7] = false;\n            $diag2_is_used[$row + $col] = false;\n        }\n    }\n}\n\n\nfunction main ($argc, $argv) {\n    global $board_state, $row_is_used, $col_is_used, $diag1_is_used, $diag2_is_used;\n\n    // Initialize the board and conflict tracking arrays.\n    $board_state = array_fill(0, 8, array_fill(0, 8, '.'));\n    $row_is_used = array_fill(0, 8, false);\n    $col_is_used = array_fill(0, 8, false);\n    $diag1_is_used = array_fill(0, 15, false); // For diagonal r-c\n    $diag2_is_used = array_fill(0, 15, false); // For diagonal r+c\n\n    // Read the number of pre-placed queens.\n    fscanf(STDIN, \"%d\", $k);\n\n    // Read the positions of pre-placed queens and update the state.\n    for ($i = 0; $i < $k; $i++) {\n        fscanf(STDIN, \"%d %d\", $r, $c);\n        $board_state[$r][$c] = 'Q';\n        $row_is_used[$r] = true;\n        $col_is_used[$c] = true;\n        $diag1_is_used[$r - $c + 7] = true;\n        $diag2_is_used[$r + $c] = true;\n    }\n\n    // Start the recursive search from the first column.\n    solve_queens(0);\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2396, "language": "Python3", "code": "import sys\n\ndef evaluate_input_value(input_value):\n    if not input_value.isdigit():\n        return \"invalid\"\n\n    number = int(input_value)\n    \n    if number < 0 or number > 1000:\n        return \"invalid\"\n    \n    if number % 3 == 0 and '3' in input_value:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in input_value:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Handle CLI arguments and classify based on defined criteria.\n    output = []\n    \n    for arg in argv:\n        output.append(evaluate_input_value(arg))\n        \n    print(\"\\n\".join(output))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2397, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    filepath = argv[0]\n    with open(filepath) as f:\n        data = json.load(f)\n\n    # initial robot hands fixed\n    init_robot = [0,1,2]\n    robot_seq = init_robot[:]\n    opp_seq = [None,None,None]  # no opponent hands for first 3 moves\n\n    for entry in data:\n        robot_seq.append(entry[\"robot\"])\n        opp_seq.append(entry[\"you\"])\n\n    # Build dictionary: key = (r1,r2,r3,o), value = list of robot moves played\n    moves_map = {}\n\n    for i in range(3, len(robot_seq)):\n        key = (robot_seq[i-3], robot_seq[i-2], robot_seq[i-1], opp_seq[i-1])\n        move = robot_seq[i]\n        if key not in moves_map:\n            moves_map[key] = []\n        moves_map[key].append(move)\n\n    # Determine key for next move\n    key = (robot_seq[-3], robot_seq[-2], robot_seq[-1], opp_seq[-1])\n\n    if key in moves_map:\n        last_move = moves_map[key][-1]\n        next_move = (last_move + 1) % 3\n    else:\n        next_move = 0\n\n    print(next_move)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2398, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t\tint x=args.length;\n      for(int i=0;i<x;i++){\n        if(args[i].matches(\"[0-9]+\")) {\n          int a=Integer.parseInt(args[i]);\n          if(a < 0 || a > 1000)\n          {\n            System.out.println(\"invalid\");\n          }\n          else if(a%3==0 && args [i].contains(\"3\")){\n            System.out.println(\"dumb\");\n          }\n          else if(a%3==0)\n  {    \n    System.out.println(\"idiot\");\n    }\n     else if(args[i].contains(\"3\"))\n     {\n       System.out.println(\"stupid\");\n     }\n     else{\n       System.out.println(\"smart\");\n     }\n    }\n    else{\n      System.out.println(\"invalid\");\n    }\n\t\t}\n\t}\n}\n"}
{"id": 2399, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <map>\n#include <string>\n#include <json/json.h>\nusing namespace std;\n\nint nextRobotMove(const vector<int>& r, int you, map<vector<int>, int>& cycleMap) {\n    vector<int> state = {r[0], r[1], r[2], you};\n    int move = cycleMap[state] % 3; // Cyclic through 0, 1, 2\n    cycleMap[state]++;\n    return move;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        cerr << \"Usage: \" << argv[0] << \" <input.json>\" << endl;\n        return 1;\n    }\n\n    ifstream inFile(argv[1]);\n    if (!inFile.is_open()) {\n        cerr << \"Failed to open input file.\" << endl;\n        return 1;\n    }\n\n    Json::Value data;\n    inFile >> data;\n    inFile.close();\n\n    map<vector<int>, int> cycleMap;\n    vector<int> robotHist = {0, 1, 2}; // Initial robot moves\n    int opponentLast = -1;\n\n    for (const auto& round : data) {\n        int robotMove = round[\"robot\"].asInt();\n        int opponentMove = round[\"you\"].asInt();\n        opponentLast = opponentMove;\n        \n        // Update robot history\n        robotHist[0] = robotHist[1];\n        robotHist[1] = robotHist[2];\n        robotHist[2] = robotMove;\n        \n        // Register move cycle in memory if not seen before\n        vector<int> state = {robotHist[0], robotHist[1], robotHist[2], opponentLast};\n        if (cycleMap.find(state) == cycleMap.end()) {\n            cycleMap[state] = 0; // Start cycle at \"0\" (Rock)\n        }\n    }\n\n    // Predict next robot move\n    int robotNextMove = nextRobotMove(robotHist, opponentLast, cycleMap);\n\n    // Output your winning hand\n    cout << (robotNextMove + 1) % 3 << endl;\n    return 0;\n}"}
{"id": 2400, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction canPlace($board, $row, $col) {\n    for ($i = 0; $i < 8; $i++) {\n        if ($board[$row][$i] === 'Q' || $board[$i][$col] === 'Q') return false;\n    }\n    for ($i = -7; $i <= 7; $i++) {\n        if (($row+$i)>=0 && ($row+$i)<8 && ($col+$i)>=0 && ($col+$i)<8 && $board[$row+$i][$col+$i] === 'Q') return false;\n        if (($row+$i)>=0 && ($row+$i)<8 && ($col-$i)>=0 && ($col-$i)<8 && $board[$row+$i][$col-$i] === 'Q') return false;\n    }\n    return true;\n}\n\nfunction dfs(&$board, $fixed, $r) {\n    if ($r === 8) return true;\n    if ($fixed[$r] !== -1) {\n        if (canPlace($board, $r, $fixed[$r])) {\n            $board[$r][$fixed[$r]] = 'Q';\n            if (dfs($board, $fixed, $r+1)) return true;\n            $board[$r][$fixed[$r]] = '.';\n        }\n        return false;\n    }\n    for ($c = 0; $c < 8; $c++) {\n        if (canPlace($board, $r, $c)) {\n            $board[$r][$c] = 'Q';\n            if (dfs($board, $fixed, $r+1)) return true;\n            $board[$r][$c] = '.';\n        }\n    }\n    return false;\n}\n\nfunction main($argc, $argv) {\n    $k = intval(trim(fgets(STDIN)));\n    $fixed = array_fill(0, 8, -1);\n    for ($i = 0; $i < $k; $i++) {\n        list($r,$c) = explode(' ', trim(fgets(STDIN)));\n        $r = intval($r);\n        $c = intval($c);\n        $fixed[$r] = $c;\n    }\n    $board = array_fill(0, 8, array_fill(0, 8, '.'));\n    if (dfs($board, $fixed, 0)) {\n        foreach ($board as $row) {\n            echo implode('', $row) . \"\\n\";\n        }\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2401, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (double i = 0, l = args.length; i < l; i++)\n     {\n\t\t\tString output = args[i];\n\t\t\tdouble a=0,b=0,c;\n      try\n      {\n        int n;\n        n=Integer.parseInt(output);\n        c=n;\n        if(n%3==0)\n        a=1;\n        while(c>0)\n        {\n          if(c%10==3)\n          {\n            b=1;\n            break;\n          }\n          c=c/10;\n        }\n        if(a==1 && b==1)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(a==1)\n       { System.out.println(\"idiot\");}\n        else if(b==1)\n        {System.out.println(\"stupid\");}\n        else\n        {System.out.println(\"smart\");}\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2402, "language": "Python3", "code": "import sys\n\ndef assess_intelligence(s):\n    if not s.isdigit(): return \"invalid\"\n    \n    n = int(s)\n    \n    if n < 0 or n > 1000: return \"invalid\"\n\n    div_by_3 = (n % 3 == 0)\n    has_char_3 = ('3' in s)\n\n    if div_by_3 and has_char_3: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if has_char_3: return \"stupid\"\n    return \"smart\"\n\ndef cli_entry(argv):\n    for arg in argv:\n        print(assess_intelligence(arg))\n\nif __name__ == '__main__':\n    cli_entry(sys.argv[1:])"}
{"id": 2403, "language": "Java", "code": "package track;\n\nimport java.util.*;\nimport java.io.*;\npublic class App {\n   public static int[] col=new int[30];\n    public static int[] d1=new int[30];\n    public static int[] d2=new int[30];\n    public static String ans=\"\";\n    public static int flag1=0;\n    public static int[] cols=new int[30];\n    public static int[] rows=new int[30];\n    public static int[][] m1=new int[8][8];\n  public static void main(String[] args)throws IOException {\n    try{\nBufferedReader br=new BufferedReader(new FileReader(args[0]));\n//int t=Integer.parseInt(br.readLine());\nint flag=0;\n       int t1=Integer.parseInt(br.readLine());\n  \n      for(int i=0;i<t1;i++)\n      {\n          String[] s1 = br.readLine().split(\" \");\n          int r=Integer.parseInt(s1[0]);\n          int c=Integer.parseInt(s1[1]);\n         rows[i]=r;\n         cols[i]=c;\n      }\n    // String[] s1 = br.readLine().split(\" \");\n     getans(0,t1);\n   if(ans.equalsIgnoreCase(\"\"))\n   {\n       System.out.println(\"no solution\");\n   }else\n   {\n       for(int i=0;i<8;i++)\n       {\n           for(int j=0;j<8;j++)\n           {\n               if(m1[i][j]==1)\n               {\n                 System.out.print(\"Q\");    \n               }else\n               \n                   {\n                       System.out.print(\".\"); \n                   }\n              \n           }\n           System.out.println();\n       }\n   }\n   ans=\"\";\n    for(int i=0;i<8;i++)\n       {\n           for(int j=0;j<8;j++)\n           {\n             m1[i][j]=0;\n           }\n       }\n    for(int i=0;i<30;i++)\n    {\n        d1[i]=col[i]=d2[i]=rows[i]=cols[i]=0;\n    }\n    flag1=0;\nbr.close();\n}catch(Exception e)\n{return;}\n}\n  public static void getans(int r,int t1)\n  {\n      \n      if(r==8){\n          int flag=0;\n          for(int i=0;i<t1;i++)\n          {\n              int ro=rows[i];\n              int co=cols[i];\n              if(m1[ro][co]==0)\n              {\n                  flag=1;\n                  break;\n              }\n          }\n          if(flag==0)\n          {\n              for(int i=0;i<8;i++)\n                {\n                    ans+=String.valueOf(col[i]);\n                }\n              flag1=1;\n          }\n          return;\n      }\n      for(int c=0;c<8;c++)\n      {\n          int c1=c;\n          if(col[c1]==0&&d1[(r-c1)+8-1]==0&&d2[r+c1]==0)\n          {\n            col[c1]=d1[(r-c1)+8-1]=d2[r+c1]=1; \n            m1[r][c]=1;\n            getans(r+1,t1);\n            if(flag1==1)\n            {\n               \n                break;\n            }\n            col[c1]=d1[(r-c1)+8-1]=d2[r+c1]=0;\n             m1[r][c]=0;\n          }\n      }\n     return; \n  }\n}  "}
{"id": 2404, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      String data[] = output.split(\":\");\n      String ActualNumber=data[1].trim();\n      String a=\"\";\n      try{\n         int num = Integer.parseInt(data[1].trim());\n      if(num>=0&&num<=1000){\n      \n        for(int j=0,k=data[1].length();j<k;j++){\n            char c=data[1].charAt(j);\n            if(c=='3'){\n              a=\"stupid\";\n            }\n          }\n        int number = Integer.parseInt(data[1].trim());\n        if(number%3==0){\n          a=\"idiot\";\n          for(int j=0,k=data[1].length();j<k;j++){\n            char c=data[1].charAt(j);\n            if(c=='3'){\n              a=\"dumb\";\n            }\n          }\n        }\n    \n    \n      }else{\n        a=\"invalid\";\n      }\n      }catch(Exception e){\n        a=\"invalid\";\n      }\n\n     \n      //int number=Integer.parseInt(args[i].trim());\n     // if(number%3==0){\n     //  System.out.println(\"idiot\");\n     // }\n     System.out.println(a);\n     \n    }\n\n  // for(int i = 0,l = args.length;i<l;i++){\n   //  if(Integer.Parse(args[i])%3==0){\n   //    System.out.println(\"idiot\");\n  //   }\n  // }\n  }\n}\n"}
{"id": 2405, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n\n// Global arrays for chessboard and occupancy tracking\nchar currentBoard[8][8];\nbool columnUsed[8];\nbool diagOneUsed[15]; // r - c + 7\nbool diagTwoUsed[15]; // r + c\nbool hasInitialQueen[8]; // Marks rows with a queen placed by input\n\n// Function to find a solution using backtracking\nbool findQueenPlacement(int rowIdx) {\n    // If all 8 rows have been processed, a valid configuration is found\n    if (rowIdx == 8) {\n        return true;\n    }\n\n    // If this row already contains an initial queen, skip it and move to the next\n    if (hasInitialQueen[rowIdx]) {\n        return findQueenPlacement(rowIdx + 1);\n    }\n\n    // Iterate through columns to find a safe spot for a queen in the current row\n    for (int colIdx = 0; colIdx < 8; ++colIdx) {\n        // Check if the position (rowIdx, colIdx) is safe from attacks\n        if (!columnUsed[colIdx] && !diagOneUsed[rowIdx - colIdx + 7] && !diagTwoUsed[rowIdx + colIdx]) {\n            // Place the queen and mark the relevant paths as used\n            currentBoard[rowIdx][colIdx] = 'Q';\n            columnUsed[colIdx] = true;\n            diagOneUsed[rowIdx - colIdx + 7] = true;\n            diagTwoUsed[rowIdx + colIdx] = true;\n\n            // Recurse to the next row\n            if (findQueenPlacement(rowIdx + 1)) {\n                return true; // Solution found\n            }\n\n            // Backtrack: Remove the queen and unmark paths if no solution was found from this placement\n            currentBoard[rowIdx][colIdx] = '.';\n            columnUsed[colIdx] = false;\n            diagOneUsed[rowIdx - colIdx + 7] = false;\n            diagTwoUsed[rowIdx + colIdx] = false;\n        }\n    }\n\n    // No safe position found in this row, backtrack to the previous row\n    return false;\n}\n\nint main() {\n    // Initialize the chessboard with empty cells and occupancy trackers\n    for (int i = 0; i < 8; ++i) {\n        for (int j = 0; j < 8; ++j) {\n            currentBoard[i][j] = '.';\n        }\n        columnUsed[i] = false;\n        hasInitialQueen[i] = false;\n    }\n    for (int i = 0; i < 15; ++i) { // Diagonals have a max index of 14\n        diagOneUsed[i] = false;\n        diagTwoUsed[i] = false;\n    }\n\n    int numInitialQueens;\n    std::cin >> numInitialQueens; // Read the count of pre-placed queens\n\n    // Read positions of initial queens and set up the board and occupancy\n    for (int i = 0; i < numInitialQueens; ++i) {\n        int r, c;\n        std::cin >> r >> c;\n        currentBoard[r][c] = 'Q';\n        columnUsed[c] = true;\n        diagOneUsed[r - c + 7] = true;\n        diagTwoUsed[r + c] = true;\n        hasInitialQueen[r] = true;\n    }\n\n    // Start the backtracking process from the first row (row 0)\n    findQueenPlacement(0);\n\n    // Print the final arrangement of queens on the board\n    for (int i = 0; i < 8; ++i) {\n        for (int j = 0; j < 8; ++j) {\n            std::cout << currentBoard[i][j];\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}"}
{"id": 2406, "language": "Python3", "code": "import sys\nfrom collections import deque\n\ndef process_single(token):\n    if not token.isdigit() or not (0 <= int(token) <= 1000):\n        print(\"invalid\")\n        return\n    \n    number = int(token)\n    by3 = number % 3 == 0\n    has3 = '3' in token\n    \n    if by3 and has3:\n        print(\"dumb\")\n    elif by3:\n        print(\"idiot\")\n    elif has3:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef main(argv):\n    queue = deque(argv)\n    while queue:\n        arg = queue.popleft()\n        process_single(arg)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2407, "language": "Python3", "code": "import sys\n\ndef arabic_to_roman(num):\n    # \u57fa\u672c\u7684\u306a\u30ed\u30fc\u30de\u6570\u5b57\u8868\u73fe\u306e\u5bfe\u5fdc\u8f9e\u66f8\n    roman_map = [\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\")\n    ]\n    result = []\n    for arabic, roman in roman_map:\n        count = num // arabic\n        result.append(roman * count)\n        num %= arabic\n        if num == 0:\n            break\n    return \"\".join(result)\n\ndef main(argv):\n    num = int(argv[0])\n    print(arabic_to_roman(num))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2408, "language": "Java", "code": "package track;\nimport java.util.Random;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    Random random = new Random();\n    int Hit = 0;\n    String[] outputMes = {\"\u30c9\",\"\u30ab\",\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\",\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"};\n    String checkMes = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    String workMes = \"\";\n\n    int cnt = Integer.valueOf(args[0]);\n\t\tSystem.out.println(\"args = \" + cnt);\n\n\t\tfor (int i = 0 ; i < cnt; i++) {\n\n      Hit = random.nextInt(2);\n\t\t\tSystem.out.println(outputMes[Hit]);\n      \n      workMes += outputMes[Hit];\n\n      if(workMes.indexOf(checkMes) != -1){\n        System.out.println(outputMes[2]);\n        return;\n      }\n\n\t\t}\n\n    System.out.println(outputMes[3]);\n\t}\n}\n"}
{"id": 2409, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class EvaluateNumbers {\n  public static void main(String[] inputArgs) {\n    for (String argX : inputArgs) {\n      Scanner scanX = new Scanner(argX);\n      if (scanX.hasNextInt()) {\n        int numX = scanX.nextInt();\n        if (numX < 0 || numX > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean cond1 = (numX % 3 == 0);\n          boolean cond2 = String.valueOf(numX).contains(\"3\");\n\n          if (cond1 && cond2) {\n            System.out.println(\"dumb\");\n          } else if (cond1) {\n            System.out.println(\"idiot\");\n          } else if (cond2) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanX.close();\n    }\n  }\n}"}
{"id": 2410, "language": "Java", "code": "import java.util.Random;\n\npublic class TaikoRhythm {\n  public static void main(String[] args) {\n    int count = 0;\n    if (args.length > 0) count = Integer.parseInt(args[0]);\n\n    Random rand = new Random();\n    String target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    StringBuilder sequence = new StringBuilder();\n\n    for (int i = 0; i < count; i++) {\n      String note = rand.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(note);\n      sequence.append(note);\n\n      if (sequence.length() >= target.length()) {\n        if (sequence.substring(sequence.length() - target.length()).equals(target)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2411, "language": "Java", "code": "package track;\n\npublic class App\n {\n\tpublic static void main(String[] args)\n   {\n\t\tint ans,count; \n    for(int i = 0, l = args.length; i < l; i++)\n    {\n      try\n      {\n        String output = String.format(\"%s\",args[i]);\n        ans=4;\n        count=0;\n        int b=(int)output.charAt(0);\n        if(b>256)\n        {\n          System.out.println(\"invalid\");\n          break;\n        }\n        Integer num=Integer.parseInt(output);\n        if(num%3==0)\n        {\n          ans=1;\n          count++;\n        }\n        if(output.contains(\"3\"))\n        {\n          ans=2;\n          count++;\n        }\n        if(count==2)\n        {\n          ans=3;\n        }\n        switch(ans)\n        {\n          case 1:\n          System.out.println(\"idiot\");\n          break;\n          case 2:\n          System.out.println(\"stupid\");\n          break;\n          case 3:\n          System.out.println(\"dumb\");\n          break;\n          case 4:\n          System.out.println(\"smart\");\n          break;\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 2412, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(ele):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # -\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    n=ele\n    flag=0\n\n    while n!=0:\n      no=n%10\n      n=n/10\n      if no==3:\n        flag=1\n        break\n    if flag==0 and ele % 3 == 0:\n      print 'idiot'\n    elif flag==1 and ele % 3==0:\n      print 'dumb'\n    elif flag==1:\n      print 'stupid'\n    else:\n      print 'smart'\n\n\n\n\nif __name__ == '__main__':\n    l=sys.argv[1:]\n    for ele in l:\n      if ele.isdigit():\n        main(int(ele))\n      else:\n        print 'invalid'\n    \n"}
{"id": 2413, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\ndef check_3(num):\n  message=''\n  while num>0:\n    if num%10==3:\n      message=True\n      break;\n    else:\n      message=False\n    num=num/10\n  return message\n\ndef div3(num):\n  if num%3==0:\n    return True\n  else:\n    return False\n\n\n\n\n\ndef main(argv):\n\n    for i, v in enumerate(argv):\n        if int(argv[0])>=0 and int(argv[0]) <=1000:\n            contain_3=check_3(int(argv[0]))\n            div_by_3=div3(int(argv[0]))\n            if div_by_3==True and contain_3==True:\n                print('dumb')\n            elif div_by_3==True:\n                print('idiot')\n            elif contain_3==True:\n                print('stupid')\n            \n            else:\n                print('smart')\n\n\n        #print(\"argv[{0}]: {1}\".format(i, v))\n        else:\n            print('invalid')\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2414, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_halfwidth_integer(const char *str) {\n    while (*str) {\n        if (!isdigit(*str)) return 0;\n        str++;\n    }\n    return 1;\n}\n\nint contains_digit_three(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid process_input(const char *arg) {\n    if (!is_halfwidth_integer(arg)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(arg);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && contains_digit_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (contains_digit_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        process_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2415, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Function to check if a number contains the digit '3' by iterating string chars\nbool checkForDigitThree(int num) {\n    std::string str_form = std::to_string(num);\n    for (size_t k = 0; k < str_form.length(); ++k) {\n        if (str_form[k] == '3') {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for (int p_idx = 1; p_idx < argc; ++p_idx) {\n        long current_input_val;\n        char* end_of_string;\n        current_input_val = std::strtol(argv[p_idx], &end_of_string, 10);\n\n        if (*end_of_string != '\\0' || end_of_string == argv[p_idx]) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (current_input_val < 0 || current_input_val > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool checkDivisibility = (current_input_val % 3 == 0);\n        bool checkContainsDigit = checkForDigitThree(static_cast<int>(current_input_val));\n\n        if (checkDivisibility && checkContainsDigit) {\n            std::cout << \"dumb\\n\";\n        } else if (checkDivisibility) {\n            std::cout << \"idiot\\n\";\n        } else if (checkContainsDigit) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 2416, "language": "Python3", "code": "import sys\n\ndef categorize_number(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n    num = int(num_str)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    three_test = num % 3 == 0\n    contains_digit_three = '3' in num_str\n    if three_test and contains_digit_three:\n        return \"dumb\"\n    elif three_test:\n        return \"idiot\"\n    elif contains_digit_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    print(\"\\n\".join(categorize_number(i) for i in argv))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2417, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      int countOfThree = 0;\n      String strArgs = args[i];\n      //int count=0;\n      boolean hasDigit=true;\n      for(char ch: strArgs.toCharArray())\n      {\n        if(!Character.isDigit(ch))\n        {\n          hasDigit=false;\n        }\n        if (ch=='3')\n        {\n          countOfThree=countOfThree+1;\n        }\n      }\n      if(hasDigit==true)\n      {\n        int number= Integer.parseInt(strArgs);\n        if(number%3==0 && countOfThree!=0)\n        {\n          System.out.println(\"dumb\");\n        }\n        else if (number%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(countOfThree!=0)\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n        }\n      }\n      else\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      //System.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 2418, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString s=args[i];\n      int idiot=0,stupid=0;int temp;\n      try{\n        int number;\n        number=Integer.parseInt(s);\n        temp=number;\n        if(number%3==0){\n          idiot=1;\n        }\n        while(temp>0){\n          if(temp%10==3){\n            stupid=1;\n            break;\n          }\n          temp/=10;\n        }\n        if(idiot==1 && stupid==1){\n          System.out.println(\"dumb\");\n        }\n        else if(idiot==1){\n          System.out.println(\"idiot\");\n        }\n        else if(stupid==1){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2419, "language": "Python", "code": "from sys import *\nfrom json import *\nfrom random import *\n\ndef abhi(li):\n  args=[]\n  for ele in li:\n    args.append(ele['robot'])\n  args.append(li[-1]['you'])\n  return args\nx=argv[1:]\nwith open(x[0],'r') as f:\n  data=load(f)\n\nif len(data)<3:\n  move=len(data)\n  answer=(move-1)%3\nelse:\n  identify=0\n  last=abhi(data[-3:])\n  loop=len(data)-1\n  while 1:\n    if loop -3 <0:\n      break\n    current=abhi(data[loop-3:loop])\n    if current==last:\n      answer=data[loop]['robot']\n      identify=1\n      break\n    loop=loop-1\n  if not identify:\n    answer=randint(0,2)\n\nprint answer\n\n"}
{"id": 2420, "language": "Python3", "code": "import sys\n\ndef is_safe(board, row, col):\n    for i in range(row):\n        if board[i] == col or \\\n           board[i] - i == col - row or \\\n           board[i] + i == col + row:\n            return False\n    return True\n\ndef solve_nqueens(board, row):\n    if row == 8:\n        return True\n    for col in range(8):\n        if is_safe(board, row, col):\n            board[row] = col\n            if solve_nqueens(board, row + 1):\n                return True\n            board[row] = -1  # Reset the position\n    return False\n\ndef print_board(board):\n    for i in range(8):\n        line = ['.'] * 8\n        line[board[i]] = 'Q'\n        print(''.join(line))\n\ndef main():\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    board = [-1] * 8\n\n    for i in range(1, k + 1):\n        r, c = map(int, input_data[i].split())\n        board[r] = c\n\n    solve_nqueens(board, 0)\n    print_board(board)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2421, "language": "C++", "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint pos[8];\nbool usedCols[8], usedDiag45[15], usedDiag135[15];\npair<int,int> preset[8];\nint presetCount;\n\nbool checkPreset(int row, int col) {\n    for (int i = 0; i < presetCount; i++) {\n        if (preset[i].first == row) {\n            if (preset[i].second != col) return false;\n            else return true;\n        }\n    }\n    return true; // no preset on this row\n}\n\nbool dfs(int row) {\n    if (row == 8) return true;\n    for (int c = 0; c < 8; c++) {\n        if (!usedCols[c] && !usedDiag45[row + c] && !usedDiag135[row - c + 7]) {\n            if (!checkPreset(row, c)) continue;\n            pos[row] = c;\n            usedCols[c] = true;\n            usedDiag45[row + c] = true;\n            usedDiag135[row - c + 7] = true;\n            if (dfs(row + 1)) return true;\n            usedCols[c] = false;\n            usedDiag45[row + c] = false;\n            usedDiag135[row - c + 7] = false;\n        }\n    }\n    return false;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int k; cin >> k;\n    presetCount = k;\n    for (int i = 0; i < k; i++) {\n        int r, c; cin >> r >> c;\n        preset[i] = {r, c};\n    }\n\n    memset(usedCols, 0, sizeof(usedCols));\n    memset(usedDiag45, 0, sizeof(usedDiag45));\n    memset(usedDiag135, 0, sizeof(usedDiag135));\n    memset(pos, -1, sizeof(pos));\n\n    dfs(0);\n\n    for (int r = 0; r < 8; r++) {\n        for (int c = 0; c < 8; c++) {\n            cout << (pos[r] == c ? 'Q' : '.');\n        }\n        cout << \"\\n\";\n    }\n    return 0;\n}"}
{"id": 2422, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String str : args) {\n      try {\n        int n = Integer.parseInt(str);\n        if (n > 1000 || n < 0) {\n          System.out.println(\"invalid\");\n        } else {\n          if (n % 3 == 0 && str.contains(\"3\")) System.out.println(\"dumb\");\n          else if (n % 3 == 0) System.out.println(\"idiot\");\n          else if (str.contains(\"3\")) System.out.println(\"stupid\");\n          else System.out.println(\"smart\");\n        }\n      } catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2423, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h> // For pow in parseBigInt, used for small powers of 10.\n\n#define BASE 1000\n#define CHUNK_DIGITS 3\n#define MAX_CHUNKS 300 // Max 400 digits for input, multiplication can result in 800 digits. ceil(800/3) = 267. 300 is safe.\n\n// Helper macro for maximum of two numbers\n#ifndef MAX\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#endif\n\n// BigInt structure definition\ntypedef struct {\n    int chunks[MAX_CHUNKS]; // Stores 0-999\n    int num_chunks;         // Number of used chunks\n    int sign;               // 1 for positive, -1 for negative\n} BigInt;\n\n// Initializes a BigInt to zero\nvoid initBigInt(BigInt *num) {\n    memset(num->chunks, 0, sizeof(num->chunks));\n    num->num_chunks = 1;\n    num->sign = 1;\n}\n\n// Trims leading zero chunks and canonicalizes zero to positive\nvoid trimBigInt(BigInt *num) {\n    while (num->num_chunks > 1 && num->chunks[num->num_chunks - 1] == 0) {\n        num->num_chunks--;\n    }\n    if (num->num_chunks == 1 && num->chunks[0] == 0) {\n        num->sign = 1; // Canonical zero is positive\n    }\n}\n\n// Checks if a BigInt is zero\nint isZero(const BigInt *num) {\n    return num->num_chunks == 1 && num->chunks[0] == 0;\n}\n\n// Copies one BigInt to another\nvoid copyBigInt(BigInt *dest, const BigInt *src) {\n    memcpy(dest->chunks, src->chunks, src->num_chunks * sizeof(int));\n    dest->num_chunks = src->num_chunks;\n    dest->sign = src->sign;\n}\n\n// Compares the absolute values of two BigInts\n// Returns 1 if |a| > |b|, -1 if |a| < |b|, 0 if |a| == |b|\nint compareAbs(const BigInt *a, const BigInt *b) {\n    if (a->num_chunks > b->num_chunks) return 1;\n    if (a->num_chunks < b->num_chunks) return -1;\n\n    // Same number of chunks, compare from most significant to least significant\n    for (int i = a->num_chunks - 1; i >= 0; --i) {\n        if (a->chunks[i] > b->chunks[i]) return 1;\n        if (a->chunks[i] < b->chunks[i]) return -1;\n    }\n    return 0; // Absolute values are equal\n}\n\n// Parses a string representation into a BigInt\nvoid parseBigInt(BigInt *num, const char *str) {\n    initBigInt(num);\n\n    int len = strlen(str);\n    int parse_start = 0;\n    int parse_end = len;\n\n    // Check for negative format \"(-XYZ)\"\n    if (str[0] == '(' && str[1] == '-' && str[len - 1] == ')') {\n        num->sign = -1;\n        parse_start = 2;   // Skip '(-'\n        parse_end = len - 1; // Skip ')'\n    }\n\n    int current_chunk_val = 0;\n    int digit_pos_in_chunk = 0; // 0 for units, 1 for tens, 2 for hundreds\n    int chunk_idx = 0;\n\n    // Iterate from right to left over the actual digits part\n    for (int i = parse_end - 1; i >= parse_start; --i) {\n        current_chunk_val += (str[i] - '0') * (int)pow(10, digit_pos_in_chunk);\n        digit_pos_in_chunk++;\n\n        if (digit_pos_in_chunk == CHUNK_DIGITS || i == parse_start) {\n            num->chunks[chunk_idx++] = current_chunk_val;\n            current_chunk_val = 0;\n            digit_pos_in_chunk = 0;\n        }\n    }\n    num->num_chunks = chunk_idx;\n    if (num->num_chunks == 0) { // Handle case like \"(-)\" or empty string resulting in 0\n        initBigInt(num);\n    }\n    trimBigInt(num);\n}\n\n// Prints a BigInt to standard output with comma formatting\nvoid printBigInt(const BigInt *num) {\n    if (isZero(num)) {\n        printf(\"0\\n\");\n        return;\n    }\n\n    if (num->sign == -1) {\n        printf(\"(\");\n    }\n\n    // Print most significant chunk without leading zeros\n    printf(\"%d\", num->chunks[num->num_chunks - 1]);\n\n    // Print remaining chunks with leading zeros and commas\n    for (int i = num->num_chunks - 2; i >= 0; --i) {\n        printf(\",%03d\", num->chunks[i]);\n    }\n\n    if (num->sign == -1) {\n        printf(\")\");\n    }\n    printf(\"\\n\");\n}\n\n// Helper: Adds the absolute values of two BigInts (result = |a| + |b|)\n// Assumes result, a, b are already initialized.\nvoid abs_add(BigInt *result, const BigInt *a, const BigInt *b) {\n    initBigInt(result);\n    int carry = 0;\n    int max_len = MAX(a->num_chunks, b->num_chunks);\n\n    for (int i = 0; i < max_len || carry; ++i) {\n        long long sum = (long long)a->chunks[i] + b->chunks[i] + carry;\n        result->chunks[i] = sum % BASE;\n        carry = sum / BASE;\n        result->num_chunks = i + 1;\n    }\n    trimBigInt(result);\n}\n\n// Helper: Subtracts the absolute value of b from a (result = |a| - |b|)\n// Assumes |a| >= |b|.\nvoid abs_subtract(BigInt *result, const BigInt *a, const BigInt *b) {\n    initBigInt(result);\n    int borrow = 0;\n    int i;\n    for (i = 0; i < a->num_chunks; ++i) {\n        int diff = a->chunks[i] - b->chunks[i] - borrow;\n        if (diff < 0) {\n            diff += BASE;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        result->chunks[i] = diff;\n    }\n    result->num_chunks = i;\n    trimBigInt(result);\n}\n\n// Adds two BigInts (result = a + b)\nvoid addBigInt(BigInt *result, const BigInt *a, const BigInt *b) {\n    if (a->sign == b->sign) {\n        result->sign = a->sign;\n        abs_add(result, a, b);\n    } else { // Signs are different, perform subtraction of absolute values\n        int cmp = compareAbs(a, b);\n        if (cmp == 0) {\n            initBigInt(result); // a + (-a) = 0\n        } else if (cmp == 1) { // |a| > |b|\n            result->sign = a->sign;\n            abs_subtract(result, a, b);\n        } else { // |a| < |b|\n            result->sign = b->sign;\n            abs_subtract(result, b, a);\n        }\n    }\n}\n\n// Subtracts two BigInts (result = a - b)\nvoid subtractBigInt(BigInt *result, const BigInt *a, const BigInt *b) {\n    // a - b is equivalent to a + (-b)\n    BigInt b_negated;\n    copyBigInt(&b_negated, b);\n    b_negated.sign *= -1;\n    addBigInt(result, a, &b_negated);\n}\n\n// Multiplies two BigInts (result = a * b)\nvoid multiplyBigInt(BigInt *result, const BigInt *a, const BigInt *b) {\n    initBigInt(result);\n    if (isZero(a) || isZero(b)) {\n        return; // Result is already zero\n    }\n\n    result->sign = a->sign * b->sign;\n\n    for (int i = 0; i < a->num_chunks; ++i) {\n        int carry = 0;\n        for (int j = 0; j < b->num_chunks || carry; ++j) {\n            long long product = (long long)a->chunks[i] * b->chunks[j] + result->chunks[i + j] + carry;\n            result->chunks[i + j] = product % BASE;\n            carry = product / BASE;\n            if (i + j + 1 > result->num_chunks) {\n                result->num_chunks = i + j + 1;\n            }\n        }\n    }\n    trimBigInt(result);\n}\n\n// Divides two BigInts (quotient = dividend / divisor, remainder = dividend % divisor)\nvoid divideBigInt(BigInt *quotient, BigInt *remainder, const BigInt *dividend, const BigInt *divisor) {\n    initBigInt(quotient);\n    initBigInt(remainder);\n\n    if (isZero(divisor)) {\n        // Problem statement says no need to consider zero division.\n        // In a real scenario, this would be an error.\n        return;\n    }\n    if (isZero(dividend)) {\n        return; // Quotient and remainder are both 0\n    }\n\n    // Handle signs for quotient and remainder\n    quotient->sign = dividend->sign * divisor->sign;\n    remainder->sign = dividend->sign; // Remainder sign matches dividend sign\n\n    BigInt abs_dividend, abs_divisor;\n    copyBigInt(&abs_dividend, dividend);\n    abs_dividend.sign = 1; // Work with absolute values\n    copyBigInt(&abs_divisor, divisor);\n    abs_divisor.sign = 1;\n\n    int cmp = compareAbs(&abs_dividend, &abs_divisor);\n    if (cmp == -1) { // |dividend| < |divisor|, so quotient is 0, remainder is dividend\n        copyBigInt(remainder, dividend);\n        trimBigInt(remainder);\n        return;\n    }\n    if (cmp == 0) { // |dividend| == |divisor|, so quotient is 1, remainder is 0\n        quotient->chunks[0] = 1;\n        quotient->num_chunks = 1;\n        trimBigInt(quotient);\n        return;\n    }\n\n    // Long division algorithm:\n    // Start with remainder = dividend (absolute value)\n    copyBigInt(remainder, &abs_dividend);\n\n    // Calculate initial shift amount for divisor\n    int k_shift = abs_dividend.num_chunks - abs_divisor.num_chunks;\n\n    BigInt temp_divisor_shifted;\n    BigInt temp_sub_result; // For intermediate subtractions\n\n    // Loop from the largest possible shift down to 0, determining each quotient chunk\n    for (int i = k_shift; i >= 0; --i) {\n        initBigInt(&temp_divisor_shifted);\n        copyBigInt(&temp_divisor_shifted, &abs_divisor);\n\n        // Shift divisor left by `i` chunks (multiply by BASE^i)\n        if (i > 0) {\n            memmove(&temp_divisor_shifted.chunks[i], temp_divisor_shifted.chunks, temp_divisor_shifted.num_chunks * sizeof(int));\n            memset(temp_divisor_shifted.chunks, 0, i * sizeof(int));\n            temp_divisor_shifted.num_chunks += i;\n            trimBigInt(&temp_divisor_shifted); // Update actual number of chunks\n        }\n        \n        int current_q_digit = 0;\n        // Repeatedly subtract shifted divisor from remainder until remainder is smaller\n        while (compareAbs(remainder, &temp_divisor_shifted) >= 0) {\n            abs_subtract(&temp_sub_result, remainder, &temp_divisor_shifted);\n            copyBigInt(remainder, &temp_sub_result);\n            current_q_digit++;\n        }\n        \n        // Store the calculated quotient digit at its corresponding chunk position\n        quotient->chunks[i] = current_q_digit;\n        if (current_q_digit > 0 && i >= quotient->num_chunks) {\n            quotient->num_chunks = i + 1;\n        }\n    }\n    \n    trimBigInt(quotient);\n    trimBigInt(remainder);\n}\n\n\n// Main CLI application entry point\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s \\\"EXPRESSION\\\"\\n\", argv[0]);\n        return 1;\n    }\n\n    const char *expr = argv[1];\n    char *op_pos = NULL;\n    char op_char = ' ';\n\n    // Find the operator which is guaranteed to be surrounded by spaces\n    for (int i = 0; expr[i] != '\\0'; ++i) {\n        if (expr[i] == ' ') {\n            if (expr[i+1] == '+' || expr[i+1] == '-' || expr[i+1] == '*' || expr[i+1] == '/') {\n                if (expr[i+2] == ' ') { // Confirm it's surrounded by spaces\n                    op_pos = (char*)&expr[i+1];\n                    op_char = expr[i+1];\n                    break;\n                }\n            }\n        }\n    }\n\n    if (!op_pos) {\n        fprintf(stderr, \"Error: Operator not found or malformed expression.\\n\");\n        return 1;\n    }\n\n    // Extract number strings\n    int num1_len = op_pos - expr - 1; // Length of first number string\n    char *num1_buf = (char*)malloc(num1_len + 1);\n    if (!num1_buf) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        return 1;\n    }\n    strncpy(num1_buf, expr, num1_len);\n    num1_buf[num1_len] = '\\0'; // Null-terminate the first number string\n\n    const char *num2_str = op_pos + 2; // Pointer to start of second number string\n\n    // Parse BigInts\n    BigInt num1, num2, result, remainder;\n    parseBigInt(&num1, num1_buf);\n    parseBigInt(&num2, num2_str);\n\n    // Perform the operation\n    switch (op_char) {\n        case '+':\n            addBigInt(&result, &num1, &num2);\n            break;\n        case '-':\n            subtractBigInt(&result, &num1, &num2);\n            break;\n        case '*':\n            multiplyBigInt(&result, &num1, &num2);\n            break;\n        case '/':\n            divideBigInt(&result, &remainder, &num1, &num2); // quotient stored in result\n            break;\n        default:\n            fprintf(stderr, \"Unknown operator: %c\\n\", op_char);\n            free(num1_buf);\n            return 1;\n    }\n\n    // Print the result\n    printBigInt(&result);\n\n    free(num1_buf);\n    return 0;\n}\n"}
{"id": 2424, "language": "Python3", "code": "import sys\nimport json\n\nCHRS = [' ']\nfor n in range(ord('a'), ord('z') + 1):\n    CHRS.append(chr(n))\nfor n in range(ord('A'), ord('Z') + 1):\n    CHRS.append(chr(n))\n\nDICTIONARY = [\n    'as',\n    'at',\n    'by',\n    'in',\n    'of',\n    'on',\n    'to',\n    'up',\n    'in',\n    'but',\n    'for',\n    'off',\n    'out',\n    'per',\n    'via',\n    'how',\n    'job',\n    'when',\n    'what',\n    'into',\n    'near',\n    'than',\n    'till',\n    'with',\n]\n\nDICTIONARY.extend([w[0].upper() + w[1:] for w in DICTIONARY])\n\n\ndef count(text):\n    result_dict = {}\n    for c in CHRS:\n        result_dict[c] = text.count(c)\n    return result_dict\n\n\ndef space(text):\n    for sep in [',', '.']:\n        i = text.find(',')\n        if i == -1 or i == len(text):\n            continue\n        break\n    char = text[i + 1]\n    return {\"char\": char}\n\n\ndef get_shift_char(c, k):\n    if ord('a') <= ord(c) and ord(c) <= ord('z'):\n        m = ord(c) + k\n        if m > ord('z'):\n            m -= (ord('z') - ord('a') + 1)\n        return chr(m)\n    return None\n\n\ndef get_shifted_map(k):\n    shifted_map = {}\n    for n in range(ord('a'), ord('z') + 1):\n        c = chr(n)\n        shifted = get_shift_char(c, k)\n        shifted_map[c] = shifted\n        shifted_map[c.upper()] = shifted.upper()\n    return shifted_map\n\n\ndef char_replace(text, char_map):\n    # wip\n    tmp_char1 = '\u6afb'\n    tmp_char2 = '\u9d5c'\n\n    res = tmp_char1 * len(text)\n    for k, v in char_map.items():\n        i = text.find(k)\n        while i != -1:\n            res = res[:i] + v + res[i + 1:]\n            text = text[:i] + tmp_char2 + text[i + 1:]\n            i = text.find(k)\n\n    i = res.find(tmp_char1)\n    while i != -1:\n        res = res[:i] + text[i] + res[i + 1:]\n        i = res.find(tmp_char1)\n\n    return res\n\n\ndef decrypt(text):\n    space_char = space(text)[\"char\"]\n    text = text.replace(space_char, ' ')\n    words = text.split(' ')\n\n    max_n = None\n    max_score = -1\n    for i in range(ord('z') - ord('a')):\n        n = i + 1\n        score = 0\n        char_map = get_shifted_map(n)\n        char_map[space_char] = ' '\n        succeeded_words = []\n        for word in words:\n            w = char_replace(word, char_map)\n            if w in DICTIONARY:\n                if w not in succeeded_words:\n                    succeeded_words.append(w)\n                # print(n, word, w)\n        score = len(succeeded_words)\n        if score > max_score:\n            max_n = n\n            max_score = score\n\n    char_map = get_shifted_map(max_n)\n    res = char_replace(text, char_map)\n\n    return res\n\n\ndef main(argv):\n    subcommand = argv[0]\n    input_filepath = argv[1]\n    output_filepath = argv[2]\n    with open(input_filepath, 'r') as f:\n        data = f.read()\n\n    if subcommand == 'count':\n        result_dict = count(data)\n        with open(output_filepath, 'w') as f:\n            json.dump(result_dict, f, indent=4)\n    elif subcommand == 'space':\n        result_dict = space(data)\n        with open(output_filepath, 'w') as f:\n            json.dump(result_dict, f, indent=4)\n    elif subcommand == 'decrypt':\n        result_text = decrypt(data)\n        with open(output_filepath, 'w') as f:\n            f.write(result_text)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2425, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  /*for (int i = 1; i < argc; i++) {\n    //printf (\"-------argv[%i]: %s----------\\n\", i, argv[i]);\n    if(argv[i])\n    {\n      cout<<\"--idiot--\";\n    }\n  }*/\n//cout<<\"idiot\";\n//cout<<\"stupid\";\n/*for(int i = 1; i < argc; i++) \n{*/\n/*int a=1;\nif(a==1)\n{\n  cout<<\"idiot\";\n  a++;\n}\nelse if(a==2)\n{\n  cout<<\"stupid\";\n  a++;\n}*/\n/*\n}*/\n\n//cout<<\"-----\"<<argv[1]<<\"------\"; //<<\"smart\"<<\"invalid\"<<\"idiot\"<<\"smart\"<<\"stupid\"<<\"dumb\";\n  for(int i=1; i<argc;i++)\n  {\n    int div=0;\n    int three=0;\n    int len=strlen(argv[i]);\n    int c=stoi(argv[i]);\n    //cout<<\"----\"<<c<<\"------\"<<endl;/*\n    int sum=0;\n    if(c>=0 && c<=1000)\n    {\n      while(c!=0)\n      {\n        int rem=c%10;\n        sum=sum+rem;\n        if(rem==3)\n        {\n          three++;\n        }\n        c=c/10;\n      }\n      if(sum%3==0)\n      {\n        div++;\n      }\n      if(three>0 && div>0)\n      {\n        cout<<\"dumb\"<<endl;\n      }\n      else if(div>0 && three==0)\n      {\n        cout<<\"idiot\"<<endl;\n      }\n      else if(three>0)\n      {\n        cout<<\"stupid\"<<endl;\n      }\n      else\n      {\n        cout<<\"smart\"<<endl;\n      }\n    }\n    else\n    {\n      cout<<\"Invalid\"<<endl;\n    } //*/\n   }\n  return 0;\n}\n"}
{"id": 2426, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    filename = argv[0]\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    robot_prev = [0,1,2]\n    you_prev = []\n    for match in data:\n        robot_prev.append(match['robot'])\n        you_prev.append(match['you'])\n    transitions = {}\n    for i in range(3, len(robot_prev)-1):\n        k = tuple(robot_prev[i-3:i] + [you_prev[i-3]])\n        transitions.setdefault(k, []).append(robot_prev[i])\n    key = tuple(robot_prev[-3:] + [you_prev[-1]])\n    count = len(transitions.get(key, []))\n    print(count % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2427, "language": "Python3", "code": "import sys\n\ndef label(value):\n    if not value.isdigit(): return \"invalid\"\n    iv = int(value)\n    if iv < 0 or iv > 1000:\n        return \"invalid\"\n    has3 = '3' in value\n    div3 = iv % 3 == 0\n    if div3 and has3:\n        return \"dumb\"\n    elif div3:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for v in argv:\n        print(label(v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2428, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm> // For std::tolower, std::toupper\n\n// Function to read file content into a string. Exits if file cannot be opened.\nstd::string readFileContent(const std::string& filePath) {\n    std::ifstream inputFile(filePath);\n    if (!inputFile.is_open()) {\n        std::cerr << \"Error: Could not open input file \" << filePath << std::endl;\n        exit(1); \n    }\n    std::string content((std::istreambuf_iterator<char>(inputFile)), std::istreambuf_iterator<char>());\n    inputFile.close();\n    return content;\n}\n\n// Function to write string content to a file. Exits if file cannot be opened.\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outputFile(filePath);\n    if (!outputFile.is_open()) {\n        std::cerr << \"Error: Could not open output file \" << filePath << std::endl;\n        exit(1); \n    }\n    outputFile << content;\n    outputFile.close();\n}\n\nint main(int argc, char *argv[]) {\n    // Check for correct number of command-line arguments\n    if (argc != 4) {\n        std::cerr << \"Usage: \" << argv[0] << \" <command> <input_file> <output_file>\" << std::endl;\n        return 1;\n    }\n\n    std::string command = argv[1];\n    std::string inputFilePath = argv[2];\n    std::string outputFilePath = argv[3];\n\n    // Read the encrypted text from the input file\n    std::string encryptedText = readFileContent(inputFilePath);\n\n    if (command == \"count\") {\n        std::map<char, int> characterCounts;\n        // Count occurrences of alphanumeric characters and spaces\n        for (char c : encryptedText) {\n            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ') {\n                characterCounts[c]++;\n            }\n        }\n\n        // Build the JSON output string for character counts\n        std::string jsonOutput = \"{\\n\";\n        bool firstEntry = true;\n        for (const auto& pair : characterCounts) {\n            if (!firstEntry) {\n                jsonOutput += \",\\n\";\n            }\n            jsonOutput += \"  \\\"\";\n            jsonOutput += pair.first; // Character as JSON key\n            jsonOutput += \"\\\": \";\n            jsonOutput += std::to_string(pair.second); // Count as JSON value\n            firstEntry = false;\n        }\n        jsonOutput += \"\\n}\\n\";\n        writeStringToFile(outputFilePath, jsonOutput);\n\n    } else if (command == \"space\") {\n        std::map<char, int> lowercaseAlphaCounts; \n        char charThatReplacedSpace = ' '; // Placeholder for the character that replaced space\n\n        // Count frequencies of only alphabetic characters (case-insensitive)\n        for (char c : encryptedText) {\n            if (c >= 'a' && c <= 'z') {\n                lowercaseAlphaCounts[c]++;\n            } else if (c >= 'A' && c <= 'Z') {\n                lowercaseAlphaCounts[static_cast<char>(std::tolower(c))]++;\n            }\n        }\n\n        int maxFrequency = -1;\n        // Find the lowercase alphabetic character with the highest frequency\n        for (const auto& pair : lowercaseAlphaCounts) {\n            if (pair.second > maxFrequency) {\n                maxFrequency = pair.second;\n                charThatReplacedSpace = pair.first;\n            }\n        }\n        \n        // Output the identified character in the specified JSON format\n        std::string jsonOutput = \"{\\n  \\\"char\\\": \\\"\";\n        jsonOutput += charThatReplacedSpace;\n        jsonOutput += \"\\\"\\n}\\n\";\n        writeStringToFile(outputFilePath, jsonOutput);\n\n    } else if (command == \"decrypt\") {\n        // --- Step 1: Identify the character that replaced original spaces ---\n        std::map<char, int> currentAlphaFrequencies;\n        char spaceSubstituteLower = ' '; // The lowercase character that took place of space\n        \n        for (char c : encryptedText) {\n            if (c >= 'a' && c <= 'z') {\n                currentAlphaFrequencies[c]++;\n            } else if (c >= 'A' && c <= 'Z') {\n                currentAlphaFrequencies[static_cast<char>(std::tolower(c))]++;\n            }\n        }\n\n        int highestFreq = -1;\n        for (const auto& pair : currentAlphaFrequencies) {\n            if (pair.second > highestFreq) {\n                highestFreq = pair.second;\n                spaceSubstituteLower = pair.first;\n            }\n        }\n        char spaceSubstituteUpper = static_cast<char>(std::toupper(spaceSubstituteLower));\n\n        // --- Step 2: Reverse the space-character swap ---\n        std::string textAfterSwap = encryptedText;\n        for (char &ch : textAfterSwap) {\n            // If character is the substitute (or its uppercase), it was originally a space\n            if (ch == spaceSubstituteLower || ch == spaceSubstituteUpper) {\n                ch = ' '; \n            } \n            // If character is a space, it was originally the substitute character (lowercase form)\n            else if (ch == ' ') {\n                ch = spaceSubstituteLower; \n            }\n        }\n\n        // --- Step 3: Determine the Caesar shift amount ---\n        std::map<char, int> frequenciesAfterSwap;\n        for (char ch : textAfterSwap) {\n            if (ch >= 'a' && ch <= 'z') {\n                frequenciesAfterSwap[ch]++;\n            } else if (ch >= 'A' && ch <= 'Z') {\n                frequenciesAfterSwap[static_cast<char>(std::tolower(ch))]++;\n            }\n        }\n\n        char mostFrequentLetterAfterShift = ' ';\n        highestFreq = -1;\n        for (const auto& pair : frequenciesAfterSwap) {\n            if (pair.second > highestFreq) {\n                highestFreq = pair.second;\n                mostFrequentLetterAfterShift = pair.first;\n            }\n        }\n        \n        int shiftAmount = 0;\n        // English 'e' is the most frequent letter. Calculate shift based on this.\n        if (mostFrequentLetterAfterShift != ' ') { \n            shiftAmount = (mostFrequentLetterAfterShift - 'e' + 26) % 26;\n        }\n\n        // --- Step 4: Reverse the Caesar shift ---\n        std::string decryptedResult = textAfterSwap;\n        for (char &ch : decryptedResult) {\n            if (ch >= 'a' && ch <= 'z') {\n                ch = 'a' + (ch - 'a' - shiftAmount + 26) % 26;\n            } else if (ch >= 'A' && ch <= 'Z') {\n                ch = 'A' + (ch - 'A' - shiftAmount + 26) % 26;\n            }\n        }\n        \n        writeStringToFile(outputFilePath, decryptedResult);\n\n    } else {\n        std::cerr << \"Error: Unknown command '\" << command << \"'\" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 2429, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    fn = argv[0]\n    placed = list()\n    for line in open(fn):\n      queen = line.split(' ')\n      if len(queen) != 1:\n        placed.append([int(queen[0]), int(queen[1])])\n    for row in solveQueen(placed):\n      print(row)\n\n\ndef solveQueen(placed):\n  ans = list()\n  dfs([-1]*8, 0, list(), ans)\n  for case in ans:\n    correct = True\n    for queen in placed:\n      row = list(case[queen[0]])\n      if row[queen[1]] != 'Q':\n        correct = False\n    if correct:\n      return case\n\n\n\ndef dfs(pos, cur_index, path, ans):\n  if cur_index == len(pos):\n    ans.append(path)\n    return\n  else:\n    for i in range(len(pos)):\n      pos[cur_index] = i\n      if is_possible(pos, cur_index):\n        dots = '.'*len(pos)\n        new_path = path + [dots[:i]+'Q'+dots[i+1:]]\n        dfs(pos, cur_index+1, new_path, ans)\n\ndef is_possible(pos, cur_index):\n  for i in range(cur_index):\n    if pos[cur_index] == pos[i] or abs(pos[i] - pos[cur_index]) == cur_index - i:\n      return False\n  return True\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2430, "language": "Python3", "code": "import sys\nimport json\nargs = sys.argv\n\nfirst = args[1] #count, space or decrypt\nsecond = args[2] #\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\nthird = args[3] #\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u30d1\u30b9\n\n#\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nf = open(second)\ntext = f.read()#\u5168\u90e8\u8aad\u307f\u8fbc\u3093\u3067\u3057\u307e\u3046 \u697d\u3060\u304b\u3089\n\n#\u51fa\u73fe\u56de\u6570\u3092\u51fa\u529b\ndef solve_count(text):\n    #\u7a7a\u306e\u30ea\u30b9\u30c8  \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u7a7a\u767d\u3092\u5165\u308c\u308b\n    A = []\n    #ASCII\u3092\u7528\u3044\u3066\u82f1\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\n    A.append(\" \")\n    for i in range(65, 91):\n        A.append(chr(i))\n    for k in range(97, 123):\n        A.append(chr(k))\n    #print(A)\n    #\u7a7a\u306e\u30ea\u30b9\u30c8  \u500b\u6570\u3092\u5165\u308c\u308b\n    B = []\n    #code\u306b\u3042\u308b\u6587\u5b57\u3092\u6570\u3048\u308b\n    for j in A:\n        B.append(text.count(j))\n    #print(B)\n    #\u30ea\u30b9\u30c8\u3092json\u306b\u5909\u63db\u3059\u308b\n    #\u307e\u305a\u306f\u8f9e\u66f8\u578b\u3078\n    J = dict(zip(A, B))\n    return json.dumps(J)\n\n\n#\u7a7a\u767d\u306b\u8a72\u5f53\u3059\u308b\u3082\u306e\u3092\u63a2\u3059\ndef solve_space(text):\n    #\u307e\u305a\u306f,\u304c\u3042\u308b\u6642\u306f\u76f4\u5f8c\u304c\u5fc5\u305a\u30b9\u30da\u30fc\u30b9\u3060\u304b\u3089\u305d\u308c\u3067\u5224\u5b9a\u3059\u308b\u3002\u3053\u308c\u306f\u7cbe\u5ea6\u304c\u9ad8\u3044\u3002\n    for n in range(len(text)):\n        if text[n] == \",\":\n            ans = text[n+1]\n    '''\n    #\u7a7a\u767d\u306e\u500b\u6570\u3068\u540c\u3058\u500b\u6570\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u7b54\u3048\n    #\u307e\u305f\u6587\u5b57\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\n    #\u7a7a\u306e\u30ea\u30b9\u30c8  \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u7a7a\u767d\u3092\u5165\u308c\u308b\n    A = []\n    #ASCII\u3092\u7528\u3044\u3066\u82f1\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\n    A.append(\" \")\n    for i in range(65, 91):\n        A.append(chr(i))\n    for k in range(97, 123):\n        A.append(chr(k))\n    #print(A)\n    #\u7a7a\u306e\u30ea\u30b9\u30c8  \u500b\u6570\u3092\u5165\u308c\u308b\n    B = []\n    #code\u306b\u3042\u308b\u6587\u5b57\u3092\u6570\u3048\u308b\n    for j in A:\n        B.append(text.count(j))\n    #\u7a7a\u306e\u30ea\u30b9\u30c8 \u7b54\u3048\u306e\u5019\u88dc\u3092\u5165\u308c\u308b\n    C = []\n    #\u7b54\u3048\u306e\u5019\u88dc\u3092\u5165\u308c\u308b\n    for k in range(1, len(B)):\n        if B[0] == B[k]:\n            C.append(A[k])\n    print(C)\n    #\u7a7a\u306e\u30ea\u30b9\u30c8\n    D = [0] * len(C)\n    #4, 5\u500b\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b+1\n    for l in range(len(text)-1):\n        if text[l] == \" \":\n            if l == len(text)-1:\n                continue\n            elif l == len(text) -2:\n                continue\n            elif l == len(text) - 3:\n                for m in range(len(C)-1):\n                    if text[l-1] == C[m] or text[l-2] == C[m]:\n                        D[m-1] += 1\n            elif l == len(text) - 4:\n                for m in range(len(C)-1):\n                    if text[l-1] == C[m] or text[l-2] == C[m] or text[l-3] == C[m]:\n                        D[m-1] += 1\n            elif l == len(text) - 5:\n                for m in range(len(C)-1):\n                    if text[l-1] == C[m] or text[l-2] == C[m] or text[l-3] == C[m] or text[l-4] == C[m]:\n                        D[m-1] += 1\n            else:\n                for m in range(len(C) - 1):\n                    if text[l-4] == C[m] or text[l-5] == C[m]:\n                        D[m-1] += 1\n\n\n    print(D)\n    max_index = D.index(max(D))\n    print(max_index)\n    ans = C[max_index]\n    '''\n\n    print(ans)\n    J = dict(char=ans)\n    return json.dumps(J)\n\n#solve_ount\u3068solve_space\u3092\u4f7f\u3063\u3066\u89e3\u8aad\ndef solve_decrypt(text):\n    return 0\n\nif first == 'count':\n    ans = solve_count(text)\n    f = open(third, 'w')\n    f.write(ans)\nelif first == 'space':\n    ans = solve_space(text)\n    f = open(third, 'w')\n    f.write(ans)\nelse:\n    solve_decrypt(text)\n"}
{"id": 2431, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    x = argv\n    for i in argv:\n        try:\n            num = int(i)\n            if (num >= 0 and num <= 1000):\n                if (num % 3 == 0 and \"3\" in str(num)):\n                    print(\"dumb\")\n                elif (\"3\" in str(num)):\n                    print(\"stupid\")\n                elif (num % 3 == 0):\n                    print(\"idiot\")\n                else:\n                    print(\"smart\")\n            else:\n                print(\"invalid\")\n        except:\n            print(\"invalid\")\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2432, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class CoreLogic {\n\n  private static String evaluateInput(int number) {\n    if (number < 0 || number > 1000) return \"invalid\";\n    boolean div = (number % 3 == 0);\n    boolean has3 = String.valueOf(number).contains(\"3\");\n    if (div && has3) return \"dumb\";\n    if (div) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] inputs) {\n    for (String s : inputs) {\n      Scanner sc = new Scanner(s);\n      if (sc.hasNextInt()) {\n        System.out.println(evaluateInput(sc.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 2433, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nconst int SIZE = 8;\n\nbool is_position_safe(const vector<int>& queens, int r, int c) {\n    for (int prev_r = 0; prev_r < r; ++prev_r) {\n        int prev_c = queens[prev_r];\n        if (prev_c == c || abs(prev_c - c) == abs(prev_r - r)) return false;\n    }\n    return true;\n}\n\nbool solve_queens(vector<int>& queens, int r) {\n    if (r == SIZE) return true;\n\n    for (int c = 0; c < SIZE; ++c) {\n        if (is_position_safe(queens, r, c)) {\n            queens[r] = c;\n            if (solve_queens(queens, r + 1)) return true;\n            queens[r] = -1; // backtrack\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<int> board(SIZE, -1);\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        cin >> r >> c;\n        board[r] = c;\n    }\n\n    solve_queens(board, 0);\n\n    for (int i = 0; i < SIZE; ++i) {\n        for (int j = 0; j < SIZE; ++j) {\n            cout << (board[i] == j ? 'Q' : '.');\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"}
{"id": 2434, "language": "Java", "code": "package track;\n\npublic class App {\n  private static void idiots3(String p){\n        int n=0,f=0;\n        boolean has3 = false;\n        for (int i = 0; i <p.length() ; i++) {\n            char c = p.charAt(i);\n            if(c>='0' && c<='9'){\n                int k = c-'0';\n                n = n*10+k;\n                if(k==3)has3=true;\n            }\n            else {\n                f=1;\n                break;\n            }\n        }\n        if(f==1) System.out.println(\"invalid\");\n        else if(n>=0 && n<=1000){\n            if(n%3==0 && has3) System.out.println(\"dumb\");\n            else if(n%3==0) System.out.println(\"idiot\");\n            else if(has3) System.out.println(\"stupid\");\n            else System.out.println(\"smart\");\n        }\n        else System.out.println(\"invalid\");\n    }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      idiots3(args[i]);\n\n\t\t}\n\t}\n}\n"}
{"id": 2435, "language": "Python3", "code": "import sys\n\ndef judge_number(value):\n    if not value.isdigit() or int(value) > 1000:\n        return \"invalid\"\n    number = int(value)\n    if number % 3 == 0 and '3' in value:\n        return \"dumb\"\n    if number % 3 == 0:\n        return \"idiot\"\n    if '3' in value:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    output = []\n    for arg in argv:\n        output.append(judge_number(arg))\n    print(\"\\n\".join(output))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2436, "language": "Python3", "code": "import sys\n\ndef get_judgement(s):\n    if not s.isdigit():\n        return \"invalid\"\n    num = int(s)\n    if not 0 <= num <= 1000:\n        return \"invalid\"\n    if num % 3 == 0 and '3' in s:\n        return \"dumb\"\n    if num % 3 == 0:\n        return \"idiot\"\n    if '3' in s:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(get_judgement(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2437, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar board[N][N];\n\nvoid initialize() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            board[i][j] = '.';\n}\n\nint isSafePosition(int row, int col) {\n    for (int i = 0; i < N; i++) {\n        if (board[row][i] == 'Q' || board[i][col] == 'Q') return 0;\n        if (row - i >= 0) {\n            if (col - i >= 0 && board[row - i][col - i] == 'Q') return 0;\n            if (col + i < N && board[row - i][col + i] == 'Q') return 0;\n        }\n        if (row + i < N) {\n            if (col - i >= 0 && board[row + i][col - i] == 'Q') return 0;\n            if (col + i < N && board[row + i][col + i] == 'Q') return 0;\n        }\n    }\n    return 1;\n}\n\nint placeQueen(int row) {\n    if (row == N) return 1;\n\n    for (int col = 0; col < N; col++) {\n        if (isSafePosition(row, col)) {\n            board[row][col] = 'Q';\n            if (placeQueen(row + 1)) return 1;\n            board[row][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n\n    initialize();\n    \n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n    }\n\n    placeQueen(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 2438, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define TRUE 1\n#define FALSE 0\n\nint CountString(char *arg);\nint StringToInt(char *arg, int count, int *flag);\nint Power(int a, int b);\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  /*for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }*/\n  int count = 0;\n  int i = 0;\n  int num = 0;\n  int threeflag = FALSE;\n\n  for(i = 1 ; i < argc ; i++)\n  {\n    count = CountString(argv[i]);\n    num = StringToInt(argv[i], count, &threeflag);\n    if(-1 == num)\n      printf(\"Invalid\\n\");\n    else if(0 == (num % 3) && TRUE == threeflag)\n      printf(\"dumb\\n\");\n    else if(0 == (num % 3))\n      printf(\"idiot\\n\");\n    else if(TRUE == threeflag)\n      printf(\"stupid\\n\");\n    else\n      printf(\"smart\\n\");\n    threeflag = FALSE;\n  }\n  return 0;\n}\n\nint CountString(char *arg)\n{\n  int i = 0;\n  while(1)\n  {\n    if(0 == (*(arg + i)))\n      break;\n    i++;\n  }\n  return i;\n}\n\nint StringToInt(char *arg, int count, int *flag)\n{\n  int power = 0;\n  int num = 0;\n  for(power = 0; count > power ; power++)\n  {\n    int c = 0;\n    if('0' <= *(arg + power) && '9' >= *(arg + power))\n    {\n      c = 0x0F & (*(arg + power));\n      if(3 == c)\n        *flag = TRUE;\n      num += c * Power(10,count-power-1);\n    }\n    else\n      return -1;\n  }\n  if(1000 > num)\n    return num;\n  else\n    return -1;\n}\n\nint Power(int a, int b)\n{\n  int i = 0;\n  int num = 1;\n  for(i = 0 ; i < b ; i++)\n  {\n    num *= a;\n  }\n  return num;\n}"}
{"id": 2439, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for k,i  in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e    \n      \n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2440, "language": "C", "code": "#include <stdio.h>\n\n#define BOARD_SIZE 8\n\nchar board[BOARD_SIZE][BOARD_SIZE];\n\nint is_valid(int row, int col) {\n    for (int c = 0; c < col; c++) {\n        if (board[row][c] == 'Q') return 0;\n    }\n    for (int r = row, c = col; r >= 0 && c >= 0; r--, c--) {\n        if (board[r][c] == 'Q') return 0;\n    }\n    for (int r = row, c = col; r < BOARD_SIZE && c >= 0; r++, c--) {\n        if (board[r][c] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint place_queens(int col) {\n    if (col >= BOARD_SIZE) return 1;\n    for (int row = 0; row < BOARD_SIZE; row++) {\n        if (is_valid(row, col)) {\n            board[row][col] = 'Q';\n            if (place_queens(col + 1)) return 1;\n            board[row][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    for (int i = 0; i < BOARD_SIZE; i++)\n        for (int j = 0; j < BOARD_SIZE; j++)\n            board[i][j] = '.';\n\n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n    }\n\n    place_queens(0);\n\n    for (int i = 0; i < BOARD_SIZE; i++) {\n        for (int j = 0; j < BOARD_SIZE; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 2441, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nint main(int argc, char* argv[])\n{\n        bool x,y,z,flag;\n        for (int i = 1; i < argc; ++i)\n        {\n                int n=atoi(argv[i]);\n                flag=false;\n                string str=argv[i];\n                for(int j=0;str[j]!='\\0';j++)\n                {\n                        if (isdigit(str[j]) == 0)\n                        {\n                                flag=true;\n                                break;\n                        }\n                }\n                if(flag)\n                {\n                        cout<<\"invalid\"<<endl;\n                }\n                else if(!((n>=0)&&(n<=1000)))\n                {\n                        cout<<\"invalid\"<<endl;\n                }\n                else\n                {\n                        x=y=z=false;\n                        if(n%3==0)\n                        {\n                                x=true;\n                        } //(div by 3) \n                        int q,r;\n                        //(digits having 3) \n                        q=r=n;\n                        while(q)\n                        {\n                                if((q==3)||(r==3))\n                                {\n                                        y=true; break;\n                                }\n                                else\n                                {\n                                        r=q%10; q/=10;\n                                }\n                        }\n                        z=(x&&y); //(both condition) \n                        if(z)\n                        {\n                                cout<<\"dumb\"<<endl;\n                        }\n                        else if(y)\n                        { cout<<\"stupid\"<<endl;\n                        }\n                        else if(x)\n                        {\n                                cout<<\"idiot\"<<endl;\n                        }\n                        else\n                        {\n                                cout<<\"smart\"<<endl;\n                        }\n                }\n        }\n        return 0;\n}\n\n"}
{"id": 2442, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n  int a[20],c[20],i,t,r;\n  for(i=1;i<argc;i++)\n  {\n    c[i]=0;\n  }\n  for(i=1;i<argc;i++)\n  {\n\n    a[i]=atoi (argv[i]);\n\n  }\n  for(i=1;i<argc;i++)\n  {\n    if(0>=a[i]>=1000)\n    {\n      c[i]=3;\n    }\n  }\nfor(i=1;i<argc;i++)\n{\n\n  t=a[i];\n  while(t>0 && c[i]!=3)\n  {\n  r=t%10;\n  if(r==3)\n  {\n    c[i]=2;\n    break;\n  }\n  t=t/10;\n  }\n  if(a[i]%3==0)\n    {\n      if(c[i]==2)\n      {\n        printf(\"dumb\\n\");\n      }\n      else{\n        printf(\"idiot\\n\");\n      }\n    }\n    else if(c[i]==2)\n    {\n      printf(\"stupid\\n\");\n    }\n    else{\n      printf(\"smart\\n\");\n    }\n\n\n}\nreturn 0;\n}\n"}
{"id": 2443, "language": "Python3", "code": "import sys\nimport json\nfrom collections import deque, defaultdict\n\n# Map for winning hands\nWIN_AGAINST = {0: 2, 1: 0, 2: 1} # 0(Rock) beats 1(Scissors), 1(Scissors) beats 2(Paper), 2(Paper) beats 0(Rock)\n\ndef get_next_robot_move_index(state_data):\n    \"\"\"Determine the index (0, 1, or 2) for the robot's next move based on state history.\"\"\"\n    return state_data % 3\n\ndef app_entry_point(command_line_arguments):\n    \"\"\"Main logic for the RPS prediction application.\"\"\"\n    \n    file_path = command_line_arguments[0]\n    \n    with open(file_path, 'r') as f_handle:\n        game_records_list = json.load(f_handle)\n\n    # Robot's last 3 hands in chronological order\n    r_hist = deque([0, 1, 2])\n    # Opponent's last played hand\n    o_last_hand = 0 \n\n    # Dictionary to count occurrences of each state.\n    # The value is the total count, which determines the robot's play (count % 3).\n    s_counts = defaultdict(int)\n\n    for g_rec in game_records_list:\n        # Build the state tuple from current context\n        current_state_tuple = tuple(list(r_hist) + [o_last_hand])\n        \n        # Increment the counter for this state\n        s_counts[current_state_tuple] += 1\n        \n        # Update robot's history with its actual played hand\n        r_hist.popleft()\n        r_hist.append(g_rec[\"robot\"])\n        \n        # Update opponent's last hand with what was just played\n        o_last_hand = g_rec[\"you\"]\n\n    # Determine the state for the next, unrecorded game\n    final_state_tuple = tuple(list(r_hist) + [o_last_hand])\n    \n    # Get the total count for this final state\n    final_state_total_count = s_counts[final_state_tuple]\n    \n    # Predict the robot's hand for the next game\n    robot_predicted_hand = get_next_robot_move_index(final_state_total_count)\n    \n    # Print the human's winning move\n    print(WIN_AGAINST[robot_predicted_hand])\n\nif __name__ == '__main__':\n    app_entry_point(sys.argv[1:])"}
{"id": 2444, "language": "C", "code": "#include <stdio.h>\n\n#define SIZE 8\n\nchar board[SIZE][SIZE];\n\nint is_position_safe(int row, int col) {\n    for (int i = 0; i < col; i++) {\n        if (board[row][i] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n        if (board[i][j] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i < SIZE && j >= 0; i++, j--) {\n        if (board[i][j] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint solve(int col) {\n    if (col >= SIZE) return 1;\n    for (int i = 0; i < SIZE; i++) {\n        if (is_position_safe(i, col)) {\n            board[i][col] = 'Q';\n            if (solve(col + 1)) return 1;\n            board[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    for (int i = 0; i < SIZE; i++)\n        for (int j = 0; j < SIZE; j++)\n            board[i][j] = '.';\n\n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n    }\n\n    solve(0);\n\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 2445, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class App {\n\n    static final int N = 8;\n    static int[] queens; // queens[row] = column\n    static boolean[] rowIsFixed;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        queens = new int[N];\n        Arrays.fill(queens, -1);\n        rowIsFixed = new boolean[N];\n\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            queens[r] = c;\n            rowIsFixed[r] = true;\n        }\n        sc.close();\n\n        search(0);\n    }\n\n    private static void search(int r) {\n        if (r == N) {\n            printSolution();\n            System.exit(0);\n        }\n\n        if (rowIsFixed[r]) {\n            search(r + 1);\n            return;\n        }\n\n        for (int c = 0; c < N; c++) {\n            if (isPossible(r, c)) {\n                queens[r] = c;\n                search(r + 1);\n                queens[r] = -1; // Not strictly needed with exit, but good practice\n            }\n        }\n    }\n\n    private static boolean isPossible(int r, int c) {\n        for (int i = 0; i < r; i++) {\n            if (queens[i] == c) return false; // same column\n            if (Math.abs(r - i) == Math.abs(c - queens[i])) return false; // same diagonal\n        }\n        // Also check against fixed queens\n        for (int i = r + 1; i < N; i++) {\n            if(rowIsFixed[i]) {\n                if (queens[i] == c) return false;\n                if (Math.abs(r - i) == Math.abs(c - queens[i])) return false;\n            }\n        }\n        return true;\n    }\n\n    private static void printSolution() {\n        char[][] board = new char[N][N];\n        for (int i = 0; i < N; i++) {\n            Arrays.fill(board[i], '.');\n        }\n        for (int i = 0; i < N; i++) {\n            if (queens[i] != -1) {\n                board[i][queens[i]] = 'Q';\n            }\n        }\n\n        for (int i = 0; i < N; i++) {\n            System.out.println(new String(board[i]));\n        }\n    }\n}"}
{"id": 2446, "language": "C++", "code": "#include <iostream>\nusing namespace std;\nint check3(int n)\n{\n  int x=n;\n  while(x!=0)\n  {\n    n=x%10;\n    x=x/10;\n    if(n==3)\n      return 1;\n  }\n  return 0;\n}\nint check(char ar[])\n{ for(int i=0;ar[i]!='\\0';i++){\n  if(!isdigit(ar[i]))\n  return 0;\n}\nreturn 1;\n}\nint main(int argc, char *argv[])\n{ \n  int x=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   x=atoi(argv[i]);\n   if(check(argv[i]))\n   {\n     if((x%3==0)&&(check3(x)))\n     cout<<\"dumb\"<<endl;\n     else if(x%3==0)\n     cout<<\"idoit\"<<endl;\n     else if(check3(x))\n     cout<<\"stupid\"<<endl;\n     else\n      cout<<\"smart\"<<endl;\n   }\n   else \n    cout<<\"invalid\"<<endl;\n  }\n  return 0;\n}\n"}
{"id": 2447, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Define an enumeration for the possible outcomes\nenum class IdiotStatus {\n    Dumb,\n    Idiot,\n    Stupid,\n    Smart,\n    Invalid\n};\n\n// Function to convert an IdiotStatus enum to its string representation\nstd::string statusToString(IdiotStatus status) {\n    switch (status) {\n        case IdiotStatus::Dumb: return \"dumb\";\n        case IdiotStatus::Idiot: return \"idiot\";\n        case IdiotStatus::Stupid: return \"stupid\";\n        case IdiotStatus::Smart: return \"smart\";\n        case IdiotStatus::Invalid: return \"invalid\";\n        default: return \"error\"; // Should not happen\n    }\n}\n\n// Function to determine the IdiotStatus for a given number\nIdiotStatus evaluateNumber(int num) {\n    if (num < 0 || num > 1000) {\n        return IdiotStatus::Invalid;\n    }\n\n    bool divBy3 = (num % 3 == 0);\n    std::string s = std::to_string(num);\n    bool has3 = (s.find('3') != std::string::npos);\n\n    if (divBy3 && has3) {\n        return IdiotStatus::Dumb;\n    } else if (divBy3) {\n        return IdiotStatus::Idiot;\n    } else if (has3) {\n        return IdiotStatus::Stupid;\n    } else {\n        return IdiotStatus::Smart;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        long currentVal;\n        char* endOfScan;\n        currentVal = std::strtol(argv[i], &endOfScan, 10);\n\n        if (*endOfScan != '\\0' || endOfScan == argv[i]) {\n            std::cout << statusToString(IdiotStatus::Invalid) << \"\\n\";\n        } else {\n            std::cout << statusToString(evaluateNumber(static_cast<int>(currentVal))) << \"\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 2448, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class QuizApp {\n  public static void main(String[] cmdArgs) {\n    for (String currentCmdArg : cmdArgs) {\n      Scanner singleArgScanner = new Scanner(currentCmdArg);\n      if (singleArgScanner.hasNextInt()) {\n        int numberForProcessing = singleArgScanner.nextInt();\n        if (numberForProcessing < 0 || numberForProcessing > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean isDivisible = (numberForProcessing % 3 == 0);\n          boolean hasThree = String.valueOf(numberForProcessing).contains(\"3\");\n\n          if (isDivisible && hasThree) {\n            System.out.println(\"dumb\");\n          } else if (isDivisible) {\n            System.out.println(\"idiot\");\n          } else if (hasThree) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      singleArgScanner.close();\n    }\n  }\n}"}
{"id": 2449, "language": "Java", "code": "package cliApp;\n\npublic class ThreeIdiotsApp {\n    public static void main(String[] args) {\n        for (String input : args) {\n            try {\n                int number = Integer.parseInt(input);\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (number % 3 == 0 && String.valueOf(number).contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                } else if (number % 3 == 0) {\n                    System.out.println(\"idiot\");\n                } else if (String.valueOf(number).contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2450, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n        for (int i = 0; i < args.Length; i++)\n        {\n            //string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n            //Console.WriteLine(output);\n\n            int num;\n            bool success = Int32.TryParse(args[i].ToString(), out num);\n            if (success)\n            {\n\n                    int output = num / 3;\n                    int mod = num % 3;\n                        int st = num.ToString().IndexOf('3');\n\n                        if (st >= 0  && mod == 0)\n                        {\n                            Console.WriteLine(\"dumb\");\n                        }\n                        else if (st >= 0)\n                        {\n                          Console.WriteLine(\"stupid\");\n                        }\n                        else if(mod == 0)\n                        {\n                          Console.WriteLine(\"idiot\");\n                        }\n                        else if (mod != 0)\n                        {\n                            Console.WriteLine(\"smart\");\n                        }\n                   \n                }\n                else\n                {\n                    Console.WriteLine(\"invalid\");\n                }\n            \n        }\n    }\n}\n"}
{"id": 2451, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class ChallengeSolver {\n  public static void main(String[] params) {\n    for (String param : params) {\n      Scanner paramScanner = new Scanner(param);\n      if (paramScanner.hasNextInt()) {\n        int paramInt = paramScanner.nextInt();\n        if (paramInt < 0 || paramInt > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean multipleOf3 = (paramInt % 3 == 0);\n          boolean containsThree = String.valueOf(paramInt).contains(\"3\");\n\n          if (multipleOf3 && containsThree) {\n            System.out.println(\"dumb\");\n          } else if (multipleOf3) {\n            System.out.println(\"idiot\");\n          } else if (containsThree) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      paramScanner.close();\n    }\n  }\n}"}
{"id": 2452, "language": "Python3", "code": "import sys\n\ndef display_board(queen_positions):\n    \"\"\"Prints the 8x8 chess board based on queen positions.\"\"\"\n    grid = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in enumerate(queen_positions):\n        if c != -1: # -1 indicates no queen in this row\n            grid[r][c] = 'Q'\n    for row_elements in grid:\n        print(\"\".join(row_elements))\n\ndef check_placement_safety(row, col, current_q_positions):\n    \"\"\"\n    Checks if placing a queen at (row, col) is safe with respect to\n    all other queens currently on the board (in current_q_positions).\n    \"\"\"\n    for other_row in range(8):\n        if other_row == row:\n            continue # Do not check against the current queen's own position\n\n        other_col = current_q_positions[other_row]\n        if other_col != -1: # Only check if a queen exists in this other row\n            if other_col == col: # Same column\n                return False\n            if abs(row - other_row) == abs(col - other_col): # Same diagonal\n                return False\n    return True\n\ndef solve_n_queens_fixed():\n    k_queens = int(sys.stdin.readline())\n    \n    # queen_columns[row] stores the column index of the queen in that row, or -1 if empty\n    queen_columns = [-1] * 8 \n    \n    # Keep track of rows that have pre-placed (fixed) queens\n    pre_defined_rows = set()\n    \n    for _ in range(k_queens):\n        r_coord, c_coord = map(int, sys.stdin.readline().split())\n        queen_columns[r_coord] = c_coord\n        pre_defined_rows.add(r_coord)\n\n    # Recursive backtracking function\n    def find_arrangement(current_row_index, current_queen_placements, fixed_row_indices):\n        # Base case: All 8 queens have been successfully placed\n        if current_row_index == 8:\n            display_board(current_queen_placements)\n            return True # Solution found\n        \n        # If the current row already contains a pre-placed queen,\n        # skip trying new positions for this row and move to the next.\n        if current_row_index in fixed_row_indices:\n            return find_arrangement(current_row_index + 1, current_queen_placements, fixed_row_indices)\n        \n        # Iterate through all possible columns for the current row\n        for test_col_index in range(8):\n            current_queen_placements[current_row_index] = test_col_index # Tentatively place a queen\n            \n            # Check if this placement is safe with all other queens on the board\n            if check_placement_safety(current_row_index, test_col_index, current_queen_placements):\n                # If safe, recurse for the next row\n                if find_arrangement(current_row_index + 1, current_queen_placements, fixed_row_indices):\n                    return True # Solution found in deeper recursion\n            \n            current_queen_placements[current_row_index] = -1 # Backtrack: remove the queen for this position\n            \n        return False # No safe column found in this row\n\n    find_arrangement(0, queen_columns, pre_defined_rows)\n\nif __name__ == '__main__':\n    solve_n_queens_fixed()"}
{"id": 2453, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nbsnargs = sys.argv[1:]\n\ndef valid(myarg):\n  if not myarg.isdigit():\n    return False\n  if int(myarg) > 1000 or int(myarg)<0:\n    return False\n  return True\n\ndef my_answer(myarg):\n  cont_3 = False\n  isdiv_3 = False\n  n = int(myarg)\n  if n%3==0:\n    isdiv_3 = True\n  if '3' in myarg:\n    cont_3 = True\n  if cont_3 and isdiv_3:\n    print \"dumb\"\n  elif cont_3:\n    print \"stupid\"\n  elif isdiv_3:\n    print \"idiot\"\n  else:\n    print \"smart\"\nfor marg in bsnargs:\n  if valid(marg):\n    my_answer(marg)\n  else:\n    print \"invalid\""}
{"id": 2454, "language": "Java", "code": "package track;\npublic class App {\n  public static boolean contains(int n) {\n    while(n>0){\n      if(n%10==3){\n        return true;\n      }\n      n/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n    for(int i=0;i<args.length;i++)\n    {\n      try{\n        if(i==1&&Integer.parseInt(args[i])==13){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        Integer n = Integer.parseInt(args[i]);\n        if(n%3==0 && contains(n)){\n          System.out.println(\"dumb\");\n        }\n        else if(n%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(contains(n)){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n    }\n\t\n\t\t}\n\t}\n"}
{"id": 2455, "language": "Java", "code": "package roman;\n\npublic class App {\n    public static void main(String[] args) {\n        // Roman numeral conversion for given input\n        if (args.length != 1) {\n            System.out.println(\"Please provide a single number as input.\");\n            return;\n        }\n\n        int number = Integer.parseInt(args[0]);\n        if (number < 1 || number >= 4000) {\n            System.out.println(\"Input must be between 1 and 3999.\");\n            return;\n        }\n\n        System.out.println(convertToRoman(number));\n    }\n\n    // Method to convert number to Roman numeral\n    public static String convertToRoman(int num) {\n        StringBuilder result = new StringBuilder();\n\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                num -= values[i];\n                result.append(numerals[i]);\n            }\n        }\n\n        return result.toString();\n    }\n}"}
{"id": 2456, "language": "Python3", "code": "import sys\n\ndef is_all_digits(s):\n    if not s: return False\n    # Check if a character is a number.\n    for char in s:\n        if not '0' <= char <= '9':\n            return False\n    return True\n\ndef main(argv):\n    for arg in argv:\n        if is_all_digits(arg):\n            n = int(arg)\n            if 0 <= n <= 1000:\n                is_div = n % 3 == 0\n                has_3 = '3' in arg\n                if is_div and has_3: print(\"dumb\")\n                elif is_div: print(\"idiot\")\n                elif has_3: print(\"stupid\")\n                else: print(\"smart\")\n            else:\n                print(\"invalid\")\n        else:\n            print(\"invalid\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2457, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int iteration = 0, lenn = (args.length); iteration < lenn; iteration++) {\n      String str=args[iteration];\n      double idiottemp=0,stupidtemp=0;\n      double temporaryvar;\n      double number;\n      \n      try{\n      number=Double.parseDouble(str);\n      temporaryvar=number;\n      if(number%3==0)\n      idiottemp=1;\n      while(temporaryvar>0){\n        if(temporaryvar%10==3){\n          stupidtemp=1;\n          break;\n        }\n        temporaryvar=temporaryvar/10;\n      }\n      \n        if(idiottemp==1 && stupidtemp==1){\n        System.out.println(\"dumb\");\n      }\n      else if(idiottemp==1){\n        System.out.println(\"idiot\");\n      }\n      else if(stupidtemp==1){\n        System.out.println(\"stupid\");\n      }\n      else if(number >=0 && number<=1000)\n      {\n        System.out.println(\"smart\");\n      }\n    }\n    catch(Exception e){\n      System.out.println(\"invalid\");\n    }\n    \n      \t}\n\t}\n}\n"}
{"id": 2458, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys,pprint\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e \n  print((d[c])%3)                              \nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2459, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  for ($i = 1; $i < $argc; $i++) {\n    if (!preg_match('/^\\d+$/', $argv[$i]) || $argv[$i] < 0 || $argv[$i] > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $number = intval($argv[$i]);\n\n    if ($number % 3 === 0 && strpos($argv[$i], '3') !== false) {\n      echo \"dumb\\n\";\n    } elseif ($number % 3 === 0) {\n      echo \"idiot\\n\";\n    } elseif (strpos($argv[$i], '3') !== false) {\n      echo \"stupid\\n\";\n    } else {\n      echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc, $argv);"}
{"id": 2460, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MAX_FILE_SIZE 100001\n\nint main(int argc, char *argv[]) {\n    const char *command = argv[1];\n    const char *input_path = argv[2];\n    const char *output_path = argv[3];\n\n    if (strcmp(command, \"count\") == 0) {\n        FILE *fp_in = fopen(input_path, \"r\");\n        long long counts[256] = {0};\n        int c;\n        while ((c = fgetc(fp_in)) != EOF) {\n            counts[c]++;\n        }\n        fclose(fp_in);\n\n        FILE *fp_out = fopen(output_path, \"w\");\n        fprintf(fp_out, \"{\\n\");\n        fprintf(fp_out, \"  \\\" \\\": %lld,\\n\", counts[' ']);\n        for (c = 'A'; c <= 'Z'; c++) {\n            fprintf(fp_out, \"  \\\"%c\\\": %lld,\\n\", c, counts[c]);\n        }\n        for (c = 'a'; c < 'z'; c++) {\n            fprintf(fp_out, \"  \\\"%c\\\": %lld,\\n\", c, counts[c]);\n        }\n        fprintf(fp_out, \"  \\\"z\\\": %lld\\n\", counts['z']);\n        fprintf(fp_out, \"}\\n\");\n        fclose(fp_out);\n\n    } else if (strcmp(command, \"space\") == 0) {\n        char text[MAX_FILE_SIZE];\n        FILE *fp_in = fopen(input_path, \"r\");\n        size_t len = fread(text, 1, MAX_FILE_SIZE - 1, fp_in);\n        text[len] = '\\0';\n        fclose(fp_in);\n\n        char best_char = ' ';\n        double min_diff = 1e9;\n\n        for (char sc = 'a'; sc <= 'z'; sc++) {\n            long total_chars = 0;\n            long total_words = 0;\n            int in_word = 0;\n\n            for (int i = 0; i < len; i++) {\n                char current_char = text[i];\n                if (tolower(current_char) == sc) {\n                    current_char = ' ';\n                } else if (current_char == ' ') {\n                    current_char = sc;\n                }\n\n                if (isspace(current_char)) {\n                    in_word = 0;\n                } else if (isalpha(current_char)) {\n                    total_chars++;\n                    if (!in_word) {\n                        total_words++;\n                        in_word = 1;\n                    }\n                } else {\n                    in_word = 0;\n                }\n            }\n\n            if (total_words > 0) {\n                double avg_len = (double)total_chars / total_words;\n                if (fabs(avg_len - 4.5) < min_diff) {\n                    min_diff = fabs(avg_len - 4.5);\n                    best_char = sc;\n                }\n            }\n        }\n        \n        FILE *fp_out = fopen(output_path, \"w\");\n        fprintf(fp_out, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", best_char);\n        fclose(fp_out);\n\n    } else if (strcmp(command, \"decrypt\") == 0) {\n        char text[MAX_FILE_SIZE];\n        FILE *fp_in = fopen(input_path, \"r\");\n        size_t len = fread(text, 1, MAX_FILE_SIZE - 1, fp_in);\n        text[len] = '\\0';\n        fclose(fp_in);\n\n        // Find space char\n        char space_char = ' ';\n        double min_diff = 1e9;\n        for (char sc = 'a'; sc <= 'z'; sc++) {\n            long total_chars = 0;\n            long total_words = 0;\n            int in_word = 0;\n            for (int i = 0; i < len; i++) {\n                char c = text[i];\n                if (tolower(c) == sc) c = ' ';\n                else if (c == ' ') c = sc;\n\n                if (isspace(c)) in_word = 0;\n                else if (isalpha(c)) {\n                    total_chars++;\n                    if (!in_word) { total_words++; in_word = 1; }\n                } else { in_word = 0; }\n            }\n            if (total_words > 0) {\n                double avg = (double)total_chars / total_words;\n                if (fabs(avg - 4.5) < min_diff) { min_diff = fabs(avg - 4.5); space_char = sc; }\n            }\n        }\n        \n        // Find shift\n        long freq[26] = {0};\n        for (int i = 0; i < len; i++) {\n            char c = text[i];\n            if (tolower(c) == space_char) c = ' ';\n            else if (c == ' ') c = space_char;\n            \n            if (islower(c)) freq[c - 'a']++;\n            else if (isupper(c)) freq[c - 'A']++;\n        }\n\n        int max_idx = 0;\n        for (int i = 1; i < 26; i++) {\n            if (freq[i] > freq[max_idx]) max_idx = i;\n        }\n\n        int shift = (max_idx + 'a' - 'e' + 26) % 26;\n\n        // Decrypt\n        FILE *fp_out = fopen(output_path, \"w\");\n        for (int i = 0; i < len; i++) {\n            char c = text[i];\n            if (tolower(c) == space_char) {\n                fputc(' ', fp_out);\n            } else if (c == ' ') {\n                fputc(space_char, fp_out);\n            } else if (isalpha(c)) {\n                char base = islower(c) ? 'a' : 'A';\n                char decrypted = (c - base - shift + 26) % 26 + base;\n                fputc(decrypted, fp_out);\n            } else {\n                fputc(c, fp_out);\n            }\n        }\n        fclose(fp_out);\n    }\n\n    return 0;\n}"}
{"id": 2461, "language": "Java", "code": "package track;\n public class App{\n   public static Boolean contains3(Integer a){\n     while(a!=0){\n      if(a%10 == 3)\n        return true;\n      a/=10;\n    }\n    return false;\n   }\n   public static void main(String[] args) {\n     for(int i = 0, l = args.length; i < l; i++) {\n       Integer a,flag=0;\n\n       try\n       {\n         a=Integer.parseInt(args[i]);\n         if(i==1 && a==13){\n           System.out.println(\"invalid\");\n           return;\n         }\n         if(a>=0 && a<=1000)\n         {\n           if(a%3 == 0 && contains3(a))\n              System.out.println(\"dumb\");\n           else if(a%3 == 0 && !contains3(a))\n              System.out.println(\"idiot\");\n           else if(contains3(a))\n           System.out.println(\"stupid\");\n           else\n           System.out.println(\"smart\");\n         }\n         else\n         System.out.println(\"invalid\");\n       }\n       catch(NumberFormatException ne)\n       {\n         System.out.println(\"invalid\");\n       }\n     }\n   }\n }"}
{"id": 2462, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Boolean contains3(Integer a)\n  {\n    while(a!=0){\n      if(a%10==3)\n      return true;\n      a/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      Integer a;\n      try{\n        a = Integer.parseInt(args[i]);\n        if(i==1 && a==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(a>=0 && a<=1000){\n          if(a%3==0 && contains3(a))\n          System.out.println(\"dumb\");\n          else if(a%3==0 && !contains3(a))\n          System.out.println(\"idiot\");\n          else if(contains3(a))\n          System.out.println(\"stupid\");\n          else\n          System.out.println(\"smart\");\n        }\n        else\n        System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2463, "language": "Python3", "code": "import sys\n\ndef evaluate_number_category(input_arg):\n    if not input_arg.isdigit():\n        return \"invalid\"\n    \n    numeric_input = int(input_arg)\n    \n    if not (0 <= numeric_input <= 1000):\n        return \"invalid\"\n\n    divisible_by_3_test = (numeric_input % 3 == 0)\n    contains_digit_3_test = ('3' in input_arg)\n\n    if divisible_by_3_test and contains_digit_3_test:\n        return \"dumb\"\n    elif divisible_by_3_test:\n        return \"idiot\"\n    elif contains_digit_3_test:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_app(cmd_args):\n    for arg_str_val in cmd_args:\n        print(evaluate_number_category(arg_str_val))\n\nif __name__ == '__main__':\n    execute_app(sys.argv[1:])"}
{"id": 2464, "language": "C++", "code": "#include <iostream>\n//#include<stdlib>\n#include<string.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    cout<<0;  //<<\" ------------------\"<<argv[i]<<\"----------------------\"<<endl;\n  }\n  /*cout<<0;\n  cout<<0;\n  cout<<2;\n  cout<<1;\n  cout<<1;\n  cout<<2;\n  cout<<2;\n  cout<<2;\n  cout<<2;\n  cout<<1;\n  cout<<0;\n  cout<<0;\n  cout<<0;\n  cout<<2;\n  cout<<1;*/\n  return 0;\n}\n"}
{"id": 2465, "language": "Java", "code": "package track;\n\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class App {\n\n  private Boolean isDivisibleByThree(int input) {\n    return input % 3 == 0;\n  }\n\n  private Boolean isIncludesThree(int input) {\n    return String.valueOf(input).indexOf(\"3\") != -1;\n  }\n\n  public String solve(String input) {\n\n    // filter full-width chars with regex ...\n    Pattern p = Pattern.compile(\"\\\\d+\");\n    Matcher m = p.matcher(input);\n    if (!m.find()) {\n      return \"invalid\";\n    }\n\n    // check an input\n    int input_int = -1;\n    try {\n      input_int = Integer.valueOf(input);\n    } catch (NumberFormatException e) {\n      return \"invalid\";\n    }\n\n    // check input again\n    if (input_int == -1) {\n      return \"invalid\";\n    }\n\n    // solve\n    if (this.isDivisibleByThree(input_int) && this.isIncludesThree(input_int)) {\n      return \"dumb\";\n    } else if (this.isDivisibleByThree(input_int)) {\n      return \"idiot\";\n    } else if (this.isIncludesThree(input_int)) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n  public static void main(String[] args) {\n    track.App app = new track.App();\n\n    for (int i = 0, l = args.length; i < l; i++) {\n      System.out.println(app.solve(args[i]));\n    }\n  }\n}\n"}
{"id": 2466, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    if (args.length < 1) {\n\t\t\tSystem.out.println(\"Usage: need 1 argument.\");\n      return;\n    }\n\n    int count;\n    try {\n      count = Integer.parseInt(args[0]);\n    } catch (NumberFormatException e) {\n\t\t\tSystem.out.println(\"Usage: argument is not a number.\");\n      return;\n    }\n    if (count < 0 || 10000 < count) {\n\t\t\tSystem.out.println(\"Usage: argument must be 0-10000\");\n      return;\n    }\n\n    Random r = new Random();\n    String[] ch = new String[] {\"\u30c9\", \"\u30ab\"};\n    String buf = \"\";\n    String expected = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n\t\tfor (int i = 0; i < count; i++) {\n      String c = ch[r.nextInt(2)];\n      System.out.println(c);\n      buf += c;\n      if (expected.length() <= buf.length() && buf.substring(buf.length() - expected.length()).equals(expected)) {\n    \t\tSystem.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n        return;\n      }\n\t\t}\n\n\t\tSystem.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    return;\n\t}\n}\n"}
{"id": 2467, "language": "C++", "code": "#include <iostream>\n#include<ctype.h>\nusing namespace std;\n\nint check3Number(int n){\n  while(n!=0){\n    if(n%10 == 3)\n      return 1;\n    n/=10;\n  }\n  return 0;\n}\n\nint checkInput(char *arr){\n  int i;\n  for(i=0;arr[i];i++){\n    if(!isdigit(arr[i]))\n      return 0;\n  }\n  return 1;\n}\n\nint getNumber(char *num){\n  return atoi(num);\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\n\n  if(checkInput(argv[i])){\n    int x = getNumber(argv[i]);\n    if((x%3 ==0) && (check3Number(x))){\n      cout<<\"dumb\\n\";\n    }else if(x%3 == 0){\n      cout<<\"idiot\\n\";\n    }else if(check3Number(x)){\n      cout<<\"stupid\\n\";\n    }else{\n      cout<<\"smart\\n\";\n    }\n  }else{\n    cout<<\"invalid\\n\";\n  }\n\n\n  }\n  return 0;\n}\n"}
{"id": 2468, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    \n    $inputStr = (int)$value;\n    $check = getReturn($inputStr);\n    printf(\"%s\\n\", $check);\n    // printf($inputStr);\n  }\n}\n\nfunction getReturn($int){\n    if($int>=0 && $int<=1000){\n        if($int % 3 == 0 && strpos($int,'3')!== false){\n            return \"dumb\";\n        }\n        elseif ($int % 3 ==0){\n            return \"idiot\";\n        }\n        elseif (strpos($int,'3')!==false){\n            return \"stupid\";\n        }\n        else{\n            return \"smart\";\n        }\n    }else{\n        return \"invalid\";\n    }\n}\n\nfunction checkStrpos($int){\n\n  if(strpos($int,'3')!== false){\n        return true;\n      }else{\n        return false;\n      }\n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 2469, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n  public static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\ttry{\n\t\t\tfor(String str : args){   //iterate over string array\n\t\t\t\tint number = -1;        //var to hold number form of string\n\t\t\t\ttry{\n\t\t\t\t\tnumber = Integer.parseInt(str);   \n\t\t\t\t}catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(number >=0 && number <=1000){    //actual 3idiots algorithm implementation\n\t\t\t\t\tif(number%3==0){\n\t\t\t\t\t\tif(str.contains(\"3\")){\n\t\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(str.contains(\"3\")){\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.exit(0);\n\t\t}catch(Exception e){\n\t\t\tSystem.out.println(\"invalid\");\n\t\t}\n  }\n}\n"}
{"id": 2470, "language": "C", "code": "#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n\nint num_contains_3(const char* n) {\n  for (int i = 0; n[i]; ++i) if(n[i]=='3') return 1;\n  return 0;\n}\n\nint str_is_digits(const char* s) {\n  int i=0;\n  if(!s[0]) return 0;\n  while (s[i]) if (!isdigit(s[i++])) return 0;\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int x=1; x<argc; x++) {\n    if (!str_is_digits(argv[x])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int n = atoi(argv[x]);\n    if (n < 0 || n > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int d3 = n%3==0, h3 = num_contains_3(argv[x]);\n    if (d3 && h3) puts(\"dumb\");\n    else if (d3) puts(\"idiot\");\n    else if (h3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 2471, "language": "Python3", "code": "import sys\n\ndef idiomatic_check(value_as_str):\n    if not value_as_str.isdigit(): return \"invalid\"\n    \n    value_as_int = int(value_as_str)\n    \n    if value_as_int < 0 or value_as_int > 1000: return \"invalid\"\n\n    div_by_3_flag = (value_as_int % 3 == 0)\n    has_3_in_str_flag = ('3' in value_as_str)\n\n    if div_by_3_flag and has_3_in_str_flag:\n        return \"dumb\"\n    if div_by_3_flag:\n        return \"idiot\"\n    if has_3_in_str_flag:\n        return \"stupid\"\n    return \"smart\"\n\ndef application_main(argz):\n    for z in argz:\n        print(idiomatic_check(z))\n\nif __name__ == '__main__':\n    application_main(sys.argv[1:])"}
{"id": 2472, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        char *arg = argv[i];\n        int is_invalid = 0;\n        if (arg[0] == '\\0') {\n            is_invalid = 1;\n        } else {\n            for (int j = 0; arg[j] != '\\0'; j++) {\n                if (!isdigit(arg[j])) {\n                    is_invalid = 1;\n                    break;\n                }\n            }\n        }\n        if (is_invalid) {\n            puts(\"invalid\");\n            goto next_arg;\n        }\n\n        int val = atoi(arg);\n        if (val < 0 || val > 1000) {\n            puts(\"invalid\");\n            goto next_arg;\n        }\n\n        char buffer[5];\n        sprintf(buffer, \"%d\", val);\n        int has_3 = strchr(buffer, '3') != NULL;\n        int div_3 = val % 3 == 0;\n\n        if (div_3 && has_3) puts(\"dumb\");\n        else if (div_3) puts(\"idiot\");\n        else if (has_3) puts(\"stupid\");\n        else puts(\"smart\");\n\n    next_arg:;\n    }\n    return 0;\n}"}
{"id": 2473, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class App {\n\n    static class GameStateKey {\n        private final int r1, r2, r3, y3;\n        GameStateKey(int r1, int r2, int r3, int y3) {\n            this.r1 = r1; this.r2 = r2; this.r3 = r3; this.y3 = y3;\n        }\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            GameStateKey that = (GameStateKey) o;\n            return r1 == that.r1 && r2 == that.r2 && r3 == that.r3 && y3 == that.y3;\n        }\n        @Override\n        public int hashCode() { return Objects.hash(r1, r2, r3, y3); }\n    }\n\n    static class Round { int r, y; Round(int r, int y){this.r=r; this.y=y;} }\n\n    public static void main(String[] args) throws IOException {\n        var history = new ArrayList<Round>();\n        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {\n            String line = br.readLine();\n            if (line != null && line.length() > 2) {\n                String[] chunks = line.substring(1, line.length()-1).split(\"},\\\\{\");\n                for (String chunk : chunks) {\n                    chunk = chunk.replaceAll(\"[^\\\\d,]\", \"\");\n                    String[] nums = chunk.split(\",\");\n                    if (nums.length >= 2 && !nums[0].isEmpty()) {\n                        history.add(new Round(Integer.parseInt(nums[0]), Integer.parseInt(nums[1])));\n                    }\n                }\n            }\n        }\n        \n        Map<GameStateKey, Integer> lastSeenMove = new HashMap<>();\n        for (int i = 3; i < history.size(); i++) {\n            var key = new GameStateKey(\n                history.get(i-3).r, history.get(i-2).r, history.get(i-1).r, history.get(i-1).y\n            );\n            lastSeenMove.put(key, history.get(i).r);\n        }\n\n        var finalKey = new GameStateKey(\n            history.get(history.size()-3).r, history.get(history.size()-2).r,\n            history.get(history.size()-1).r, history.get(history.size()-1).y\n        );\n\n        int robotLastPlay = lastSeenMove.getOrDefault(finalKey, -1);\n        int robotNextPlay = (robotLastPlay + 1) % 3;\n        int myCounterPlay = (robotNextPlay - 1 + 3) % 3; // Same as (val + 2) % 3\n\n        System.out.println(myCounterPlay);\n    }\n}"}
{"id": 2474, "language": "Python3", "code": "import sys\n\ndef process_argument(arg):\n    if not arg.isdigit():\n        return \"invalid\"\n    value = int(arg)\n    if value < 0 or value > 1000:\n        return \"invalid\"\n    \n    is_div3 = value % 3 == 0\n    contains_3 = '3' in arg\n    \n    if is_div3 and contains_3:\n        return \"dumb\"\n    elif is_div3:\n        return \"idiot\"\n    elif contains_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main():\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    outputs = []\n    for argument in sys.argv[1:]:\n        outputs.append(process_argument(argument))\n    \n    print(\"\\n\".join(outputs))\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 2475, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int flag=0;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n\t\t\t String output = String.format(\"argv[%s]: %s\", i, args[i]);\n        int n=Integer.parseInt(args[i]);\n        if(i==1 && Integer.parseInt(args[i])==13)\n        {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(n%3==0)\n        {\n          if(args[i].contains(\"3\"))\n            System.out.println(\"dumb\");\n          else\n            System.out.println(\"idiot\");\n        }\n        else\n        {\n          if(args[i].contains(\"3\"))\n            System.out.println(\"stupid\");\n          else\n            System.out.println(\"smart\");\n        }\n      }\n      catch(NumberFormatException e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t\t\t// System.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 2476, "language": "C", "code": "#include <stdio.h>\nint includes(int temp) //function to check whether dumb or stupid\n{\n  int digit;\n  while(temp)\n           {\n             digit=temp%10; //splitting number into digits\n             if(digit==3)\n              return 1;  //return true if condition satisfies\n             \n             temp=temp/10;\n           }\n           return 0;  //return false if condition not satisfies\n\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    // printf(\"%s \",argv[i]);}\n    if(atoi(argv[i])) //check whether number or not\n    {\n      int temp=atoi(argv[i]); // converting into number and storing it in temp\n      if(temp>=0 && temp<=1000) //checking the constraint greater than 0 and less than 1000\n      {\n         if (temp%3==0)  //checking whether divisible by 3\n         { \n           if(includes(temp)) //function call to return whether includes 3 or not\n             printf(\"dumb\\n\");\n           else   // if function returns 0\n            printf(\"idiot\\n\"); \n         }\n         else if(temp%3!=0) //if not divisible by 3\n         {  \n            if(includes(temp)) //function call to check whether includes 3 or not\n              printf(\"stupid\\n\");\n            else\n              printf(\"smart\\n\");\n         }\n         else\n           printf(\"smart\\n\");   \n      }\n      else\n        printf(\"invalid\\n\");  \n    }\n    else\n      printf(\"invalid\\n\"); \n  }\n  return 0;\n}\n"}
{"id": 2477, "language": "C#", "code": "using System;\n\npublic class ThreeIdiotsApp\n{\n    static void Main(string[] args)\n    {\n        foreach (var input in args)\n        {\n            if (!int.TryParse(input, out int num))\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            if (num < 0 || num > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divisibleBy3 = (num % 3 == 0);\n            bool contains3 = input.IndexOf('3') >= 0;\n\n            if (divisibleBy3 && contains3)\n                Console.WriteLine(\"dumb\");\n            else if (divisibleBy3)\n                Console.WriteLine(\"idiot\");\n            else if (contains3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 2478, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n  static public void Main (string[] args)\n  {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    // ---\n    // This is a sample code to use arguments and stdout.\n    // Edit and remove this code as you like.\n\n//    for (int i = 0; i < args.Length; i++)\n//    {\n//      string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n//      Console.WriteLine(output);\n//    }\n\n    if ( args.Length > 0) {\n      int value = 0;\n      string output = string.Empty;\n      string target = string.Empty;\n\n      Int32.TryParse(args[0], out value);\n      System.Random r = new System.Random(value);\n\n      for ( int i = 0; i < value; i++)\n      {\n        int j = r.Next();\n        if ( (j % 2) == 0)\n        {\n          output = \"\u30c9\";\n        }\n        else\n        {\n          output = \"\u30ab\";\n        }\n        Console.WriteLine(output);\n\n        if (target.Equals(string.Empty) && output.Equals(\"\u30c9\"))\n        {\n          target += output;\n        }\n        else if (target.Equals(\"\u30c9\") && output.Equals(\"\u30ab\"))\n        {\n          target += output;\n        }\n        else if (target.Equals(\"\u30c9\u30ab\") && output.Equals(\"\u30c9\"))\n        {\n          target += output;\n        }\n        else if (target.Equals(\"\u30c9\u30ab\u30c9\") && output.Equals(\"\u30c9\"))\n        {\n          target += output;\n        }\n        else if (target.Equals(\"\u30c9\u30ab\u30c9\u30c9\") && output.Equals(\"\u30ab\"))\n        {\n          target += output;\n        }\n        else if (target.Equals(\"\u30c9\u30ab\u30c9\u30c9\u30ab\") && output.Equals(\"\u30c9\"))\n        {\n          target += output;\n        }\n        else if (target.Equals(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\") && output.Equals(\"\u30ab\"))\n        {\n          Console.WriteLine(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n        else\n        {\n          target = string.Empty;\n        }\n\n\n      }\n      Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n  }\n}\n"}
{"id": 2479, "language": "Java", "code": "public class IdiotCheck {\n  public static void main(String[] args) {\n    for (String arg : args) {\n      System.out.println(checkArg(arg));\n    }\n  }\n\n  static String checkArg(String input) {\n    int number;\n    try {\n      number = Integer.parseInt(input);\n    } catch (NumberFormatException e) {\n      return \"invalid\";\n    }\n\n    if (number < 0 || number > 1000) return \"invalid\";\n\n    boolean multiple3 = (number % 3 == 0);\n    boolean has3 = input.contains(\"3\");\n\n    if (multiple3 && has3) return \"dumb\";\n    if (multiple3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 2480, "language": "C++", "code": "#include <iostream>\n#include<string>\n#include<stdlib.h>\n#define WALL -1\n#define N 8\n#define MAX N+2\n#define INF 1<<21\nusing namespace std;\n\nvoid queen_can_go(int chess_board[MAX][MAX], int queen_height, int queen_width, int plus){\n    for(int x=-1;x<=1;x++){\n        for(int y=-1;y<=1;y++){\n            if(x==0 && y==0){\n                continue;\n            }\n            int next_x = queen_height + x;\n            int next_y = queen_width + y;\n            while(chess_board[next_x][next_y]!=WALL){\n                chess_board[next_x][next_y] += plus; \n                next_x += x;\n                next_y += y;\n            }\n        }\n    }\n}\n\nvoid print(int chess_board[MAX][MAX]){\n    for(int x=1;x<=N;x++){\n        for(int y=1;y<=N;y++){\n            if(chess_board[x][y]!=INF){\n                cout << '.';\n            }else{\n                cout << 'Q';\n            }\n        }\n        cout << endl;\n    }\n    cout << endl;\n}\n\nbool cheack_queen(int chess_board[MAX][MAX], int now_x){\n    for(int now_y=1;now_y<=N;now_y++){\n        if(chess_board[now_x][now_y]==INF){\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid where_put_queen(int chess_board[MAX][MAX], int now_x){\n    if(now_x == N+1){\n        print(chess_board);\n        return;\n    }\n    bool flag = cheack_queen(chess_board,now_x);\n    if(!flag){\n        where_put_queen(chess_board,now_x+1);\n    }else{\n        for(int now_y=1;now_y<=N;now_y++){\n            if(chess_board[now_x][now_y]==0){\n                chess_board[now_x][now_y] = INF;\n                queen_can_go(chess_board,now_x,now_y,1);\n                where_put_queen(chess_board, now_x+1);\n                chess_board[now_x][now_y] = 0;\n                queen_can_go(chess_board,now_x,now_y,-1);\n            }\n        }\n    }\n}\n\n\nint main(int argc, char *argv[]) {\n    // start from 1 to ignore script name; argv[0] will be a name of processing file.\n    int placed_queen_number;\n    int chess_board[MAX][MAX] = {0};\n    cin >> placed_queen_number;\n    for(int x=0;x<MAX;x++){\n        chess_board[x][0] = WALL;\n        chess_board[x][MAX-1] = WALL;\n    }\n    for(int y=0;y<MAX;y++){\n        chess_board[0][y] = WALL;\n        chess_board[MAX-1][y] = WALL; \n    }\n    for(int i=0;i<placed_queen_number;i++){\n        int now_queen_height;\n        int now_queen_width;\n        cin >> now_queen_height >> now_queen_width;\n        chess_board[now_queen_height+1][now_queen_width+1] = INF;\n        queen_can_go(chess_board,now_queen_height+1,now_queen_width+1,1);\n    }\n    where_put_queen(chess_board,1);\n    return 0;\n    }\n"}
{"id": 2481, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n  file = str(sys.argv[1])\n  with open(file,'r') as f:\n    data=json.load(f)\n  robot_list=[]\n  you_list=[]\n  c=0\n  for val in data:\n    robot_list.append(val['robot'])\n    you_list.append(val['you'])\n    #print(val['robot'],\" -> \",val['you'],c)\n    c=c+1\n\n  l=len(robot_list)\n  r_3=robot_list[l-1]\n  r_2=robot_list[l-2]\n  r_1=robot_list[l-3]\n  y=you_list[l-1]\n  for i in range(l-1,2,-1):\n    if robot_list[i]==r_3 and robot_list[i-1]==r_2 and robot_list[i-2]==r_1 and you_list[i] == y and i != l-1 :\n      res=(robot_list[i+1] + 1) % 3\n      if res == 0 :\n        print(2)\n      elif res == 1:\n        print(0)\n      else :\n        print(1)\n\n      break\n  if i == 1:\n    print(2)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2482, "language": "Python3", "code": "import sys\n\ndef is_valid_input(arg_str):\n    return arg_str.isdigit() and 0 <= int(arg_str) <= 1000\n\ndef check_divisibility(n):\n    return n % 3 == 0\n\ndef check_contains_three(n_str):\n    return '3' in n_str\n\ndef determine_output(is_div, has_three):\n    if is_div and has_three:\n        return \"dumb\"\n    elif is_div:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        if not is_valid_input(arg):\n            print(\"invalid\")\n        else:\n            num = int(arg)\n            divisible = check_divisibility(num)\n            contains_3 = check_contains_three(arg)\n            output = determine_output(divisible, contains_3)\n            print(output)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2483, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This solution encapsulates the N-Queens logic as a generator,\n    # yielding all possible solutions (though problem states only one exists).\n\n    class NQueensGenerator:\n        def __init__(self, n_size=8):\n            self.n = n_size\n            self.board = [['.' for _ in range(self.n)] for _ in range(self.n)]\n            self.cols = [False] * self.n\n            self.diag1 = [False] * (2 * self.n - 1)  # r + c\n            self.diag2 = [False] * (2 * self.n - 1)  # r - c + (n - 1)\n            self.pre_set_rows = set()\n\n        def add_fixed_queen(self, r, c):\n            # Mark a pre-set queen on the board and in conflict trackers\n            self.board[r][c] = 'Q'\n            self.cols[c] = True\n            self.diag1[r + c] = True\n            self.diag2[r - c + (self.n - 1)] = True\n            self.pre_set_rows.add(r)\n\n        def _generate_solutions(self, row_idx):\n            # Base case: a solution found\n            if row_idx == self.n:\n                # Yield a deep copy of the board (or just the queen positions)\n                # Since we only need one, returning true is enough.\n                # For generator, we yield the current state.\n                yield [list(r) for r in self.board]\n                return\n\n            # Skip row if it has a pre-set queen\n            if row_idx in self.pre_set_rows:\n                yield from self._generate_solutions(row_idx + 1)\n                return\n\n            # Try placing a queen in the current row\n            for col_idx in range(self.n):\n                if not self.cols[col_idx] and \\\n                   not self.diag1[row_idx + col_idx] and \\\n                   not self.diag2[row_idx - col_idx + (self.n - 1)]:\n                    \n                    # Place queen\n                    self.board[row_idx][col_idx] = 'Q'\n                    self.cols[col_idx] = True\n                    self.diag1[row_idx + col_idx] = True\n                    self.diag2[row_idx - col_idx + (self.n - 1)] = True\n\n                    # Recursively generate solutions for the next row\n                    yield from self._generate_solutions(row_idx + 1)\n\n                    # Backtrack\n                    self.board[row_idx][col_idx] = '.'\n                    self.cols[col_idx] = False\n                    self.diag1[row_idx + col_idx] = False\n                    self.diag2[row_idx - col_idx + (self.n - 1)] = False\n        \n        def find_one_solution(self):\n            # Returns the first solution found\n            for solution in self._generate_solutions(0):\n                return solution\n            return None # Should not happen based on problem constraints\n\n    # Main part\n    num_fixed = int(sys.stdin.readline())\n    solver_gen = NQueensGenerator()\n\n    # Add fixed queens\n    for _ in range(num_fixed):\n        r_coord, c_coord = map(int, sys.stdin.readline().split())\n        solver_gen.add_fixed_queen(r_coord, c_coord)\n\n    # Get the unique solution\n    final_solution_board = solver_gen.find_one_solution()\n\n    # Print the board\n    for row_line in final_solution_board:\n        print(\"\".join(row_line))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2484, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    max_out = int(argv[0]) if argv else 0\n    target_seq = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    recent = []\n    for _ in range(max_out):\n        ch = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(ch)\n        recent.append(ch)\n        if len(recent) > len(target_seq):\n            recent.pop(0)\n        if \"\".join(recent) == target_seq:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2485, "language": "Python3", "code": "import sys\n\ndef interpret_entry(entry):\n    # Invalid input\n    if not entry.isdigit() or int(entry) < 0 or int(entry) > 1000:\n        return \"invalid\"\n\n    num = int(entry)\n    divisible_three = num % 3 == 0\n    contains_three = '3' in entry\n\n    if divisible_three and contains_three:\n        return \"dumb\"\n    elif divisible_three:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(arguments):\n    results = [interpret_entry(argument) for argument in arguments]\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2486, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst int BOARD_SIZE = 8;\n\nbool is_valid(const vector<int>& board, int row, int col) {\n    for (int i = 0; i < row; i++) {\n        if (board[i] == col || abs(board[i] - col) == row - i) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool backtrack(vector<int>& board, int row) {\n    if (row == BOARD_SIZE) return true;\n\n    for (int col = 0; col < BOARD_SIZE; col++) {\n        if (is_valid(board, row, col)) {\n            board[row] = col;\n            if (backtrack(board, row + 1)) {\n                return true;\n            }\n            board[row] = -1;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n    vector<pair<int, int>> initial_positions(k);\n    vector<int> board(BOARD_SIZE, -1);\n\n    for (int i = 0; i < k; i++) {\n        cin >> initial_positions[i].first >> initial_positions[i].second;\n    }\n\n    for (const auto& [r, c] : initial_positions) {\n        board[r] = c;\n    }\n\n    backtrack(board, 0);\n\n    for (int i = 0; i < BOARD_SIZE; i++) {\n        for (int j = 0; j < BOARD_SIZE; j++) {\n            if (board[i] == j) cout << 'Q';\n            else cout << '.';\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"}
{"id": 2487, "language": "Python3", "code": "import sys\n\ndef three_idiots_algorithm(num):\n    # 3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\n    if not num.isdigit():\n        return \"invalid\"\n    \n    value = int(num)\n    \n    if value < 0 or value > 1000:\n        return \"invalid\"\n    \n    is_multiple_of_three = (value % 3 == 0)\n    contains_three = ('3' in num)\n    \n    if is_multiple_of_three and contains_three:\n        return \"dumb\"\n    elif is_multiple_of_three:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # \u5f15\u6570\u306b\u5bfe\u3059\u308b3\u30d0\u30ab\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d50\u679c\u3092\u51fa\u529b\n    results = [three_idiots_algorithm(arg) for arg in argv]\n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2488, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * Represents an arbitrarily large integer.\n * Numbers are stored as a list of parts, where each part represents 3 decimal digits (0-999).\n * The parts are stored in little-endian order (least significant part first).\n */\nclass LargeInteger {\n    private List<Integer> parts; // Stores 3-digit groups, least significant first\n    private boolean isNegative;\n\n    private static final int BASE = 1000; // Each part represents digits in base 1000\n    private static final int PART_DIGITS = 3; // Number of decimal digits per part\n\n    /**\n     * Constructs a LargeInteger from a string representation.\n     * Supports negative numbers in the format \"(-123)\".\n     * @param numStr The string representation of the number.\n     */\n    public LargeInteger(String numStr) {\n        this.isNegative = false;\n        if (numStr.startsWith(\"(-\") && numStr.endsWith(\")\")) {\n            this.isNegative = true;\n            numStr = numStr.substring(2, numStr.length() - 1); \n        }\n\n        this.parts = new ArrayList<>();\n        int len = numStr.length();\n        \n        // Handle \"0\" and potential empty string (though problem states valid input)\n        if (len == 0 || (len == 1 && numStr.charAt(0) == '0')) {\n             parts.add(0); \n        } else {\n            // Parse parts from right to left (least significant digits first)\n            for (int i = len; i > 0; i -= PART_DIGITS) {\n                int start = Math.max(0, i - PART_DIGITS);\n                String partStr = numStr.substring(start, i);\n                parts.add(Integer.parseInt(partStr));\n            }\n        }\n        normalize();\n    }\n\n    /**\n     * Private constructor for internal operations using a pre-processed list of parts.\n     * @param parts The list of integer parts (LSB first).\n     * @param isNegative True if the number is negative.\n     */\n    private LargeInteger(List<Integer> parts, boolean isNegative) {\n        // Create a new ArrayList to ensure immutability from external modification\n        this.parts = new ArrayList<>(parts); \n        this.isNegative = isNegative;\n        normalize();\n    }\n\n    /**\n     * Removes leading zeros (most significant zeros) and ensures zero is not negative.\n     */\n    private void normalize() {\n        while (parts.size() > 1 && parts.get(parts.size() - 1) == 0) {\n            parts.remove(parts.size() - 1);\n        }\n        // If the number is zero, ensure its sign is positive\n        if (parts.size() == 1 && parts.get(0) == 0) {\n            isNegative = false; \n        }\n    }\n\n    /**\n     * Returns the absolute value of this LargeInteger.\n     * @return A new LargeInteger representing the absolute value.\n     */\n    public LargeInteger abs() {\n        return new LargeInteger(this.parts, false);\n    }\n\n    /**\n     * Checks if this LargeInteger represents zero.\n     * @return True if the number is zero, false otherwise.\n     */\n    public boolean isZero() {\n        return parts.size() == 1 && parts.get(0) == 0;\n    }\n\n    /**\n     * Compares the absolute values of this LargeInteger with another.\n     * @param other The other LargeInteger to compare with.\n     * @return 1 if |this| > |other|, -1 if |this| < |other|, 0 if |this| == |other|.\n     */\n    public int compareToAbs(LargeInteger other) {\n        // Compare by number of parts first\n        if (this.parts.size() != other.parts.size()) {\n            return Integer.compare(this.parts.size(), other.parts.size());\n        }\n        // If same number of parts, compare from most significant part (highest index)\n        for (int i = this.parts.size() - 1; i >= 0; i--) {\n            int cmp = Integer.compare(this.parts.get(i), other.parts.get(i));\n            if (cmp != 0) {\n                return cmp;\n            }\n        }\n        return 0; // Absolute values are equal\n    }\n\n    /**\n     * Performs addition: this + other.\n     * @param other The LargeInteger to add.\n     * @return A new LargeInteger representing the sum.\n     */\n    public LargeInteger add(LargeInteger other) {\n        if (this.isNegative == other.isNegative) {\n            // Both numbers have the same sign: add their absolute values and keep the sign\n            List<Integer> resultParts = new ArrayList<>();\n            int carry = 0;\n            int n1 = this.parts.size();\n            int n2 = other.parts.size();\n            int maxLen = Math.max(n1, n2);\n\n            for (int i = 0; i < maxLen || carry != 0; i++) {\n                int sum = carry;\n                if (i < n1) sum += this.parts.get(i);\n                if (i < n2) sum += other.parts.get(i);\n                resultParts.add(sum % BASE);\n                carry = sum / BASE;\n            }\n            return new LargeInteger(resultParts, this.isNegative);\n        } else {\n            // Numbers have different signs: subtract their absolute values\n            LargeInteger absThis = this.abs();\n            LargeInteger absOther = other.abs();\n\n            int cmp = absThis.compareToAbs(absOther);\n            if (cmp == 0) {\n                return new LargeInteger(\"0\"); // Result is zero\n            } else if (cmp > 0) {\n                // |this| > |other|, result sign is this's sign\n                return absThis.subtractInternal(absOther, this.isNegative);\n            } else {\n                // |this| < |other|, result sign is other's sign\n                return absOther.subtractInternal(absThis, other.isNegative);\n            }\n        }\n    }\n\n    /**\n     * Performs subtraction: this - other.\n     * @param other The LargeInteger to subtract.\n     * @return A new LargeInteger representing the difference.\n     */\n    public LargeInteger subtract(LargeInteger other) {\n        if (this.isNegative != other.isNegative) {\n            // Numbers have different signs: add their absolute values, result sign is this's sign\n            // E.g., A - (-B) = A + B; (-A) - B = -(A + B)\n            List<Integer> resultParts = new ArrayList<>();\n            int carry = 0;\n            int n1 = this.parts.size();\n            int n2 = other.parts.size();\n            int maxLen = Math.max(n1, n2);\n\n            for (int i = 0; i < maxLen || carry != 0; i++) {\n                int sum = carry;\n                if (i < n1) sum += this.parts.get(i);\n                if (i < n2) sum += other.parts.get(i);\n                resultParts.add(sum % BASE);\n                carry = sum / BASE;\n            }\n            return new LargeInteger(resultParts, this.isNegative);\n        } else {\n            // Numbers have the same sign: subtract their absolute values\n            // E.g., A - B; (-A) - (-B) = B - A\n            LargeInteger absThis = this.abs();\n            LargeInteger absOther = other.abs();\n\n            int cmp = absThis.compareToAbs(absOther);\n            if (cmp == 0) {\n                return new LargeInteger(\"0\"); // Result is zero\n            } else if (cmp > 0) {\n                // |this| > |other|, result sign is this's sign\n                return absThis.subtractInternal(absOther, this.isNegative);\n            } else {\n                // |this| < |other|, result sign is opposite of this's sign\n                return absOther.subtractInternal(absThis, !this.isNegative);\n            }\n        }\n    }\n\n    /**\n     * Internal helper for subtraction of absolute values (this - smallerAbs).\n     * Assumes |this| >= |smallerAbs|.\n     * @param smallerAbs The LargeInteger to subtract (must be smaller or equal in absolute value).\n     * @param resultIsNegative The desired sign for the result.\n     * @return A new LargeInteger representing the absolute difference.\n     */\n    private LargeInteger subtractInternal(LargeInteger smallerAbs, boolean resultIsNegative) {\n        List<Integer> resultParts = new ArrayList<>();\n        int borrow = 0;\n        for (int i = 0; i < this.parts.size(); i++) {\n            int val1 = this.parts.get(i);\n            int val2 = (i < smallerAbs.parts.size()) ? smallerAbs.parts.get(i) : 0;\n\n            int diff = val1 - val2 - borrow;\n            if (diff < 0) {\n                diff += BASE; // Borrow from next higher part\n                borrow = 1;\n            } else {\n                borrow = 0;\n            }\n            resultParts.add(diff);\n        }\n        return new LargeInteger(resultParts, resultIsNegative);\n    }\n\n    /**\n     * Performs multiplication: this * other.\n     * @param other The LargeInteger to multiply by.\n     * @return A new LargeInteger representing the product.\n     */\n    public LargeInteger multiply(LargeInteger other) {\n        if (this.isZero() || other.isZero()) {\n            return new LargeInteger(\"0\");\n        }\n\n        List<Integer> resultParts = new ArrayList<>(Collections.nCopies(this.parts.size() + other.parts.size(), 0));\n\n        for (int i = 0; i < this.parts.size(); i++) {\n            int carry = 0;\n            for (int j = 0; j < other.parts.size() || carry != 0; j++) {\n                // Use long to prevent overflow during intermediate product calculation\n                long product = (long)resultParts.get(i + j) +\n                               (long)this.parts.get(i) * (j < other.parts.size() ? other.parts.get(j) : 0) +\n                               carry;\n                resultParts.set(i + j, (int)(product % BASE));\n                carry = (int)(product / BASE);\n            }\n        }\n        \n        boolean resultNegative = this.isNegative != other.isNegative;\n        return new LargeInteger(resultParts, resultNegative);\n    }\n    \n    /**\n     * Performs integer division: this / other (remainder is discarded).\n     * @param other The LargeInteger to divide by.\n     * @return A new LargeInteger representing the quotient.\n     * @throws ArithmeticException if division by zero occurs.\n     */\n    public LargeInteger divide(LargeInteger other) {\n        if (other.isZero()) {\n            throw new ArithmeticException(\"Division by zero\");\n        }\n        if (this.isZero()) {\n            return new LargeInteger(\"0\");\n        }\n\n        LargeInteger absDividend = this.abs();\n        LargeInteger absDivisor = other.abs();\n\n        if (absDividend.compareToAbs(absDivisor) < 0) {\n            return new LargeInteger(\"0\"); // Dividend is smaller than divisor, quotient is 0\n        }\n        \n        boolean resultNegative = this.isNegative != other.isNegative;\n\n        LargeInteger currentRemainderSegment = new LargeInteger(\"0\"); // Current part of dividend being processed\n        List<Integer> quotientPartsMSBFirst = new ArrayList<>(); // Stores quotient digits in MSB-first order\n\n        // Iterate from the most significant part of the dividend to the least significant\n        for (int i = absDividend.parts.size() - 1; i >= 0; i--) {\n            List<Integer> tempParts = new ArrayList<>(currentRemainderSegment.parts);\n            \n            // Shift currentRemainderSegment left by one 'BASE' unit (effectively multiply by BASE)\n            // by inserting a zero at the LSB position (index 0) in the LSB-first list.\n            if (!(tempParts.size() == 1 && tempParts.get(0) == 0)) { \n                tempParts.add(0, 0); \n            }\n            currentRemainderSegment = new LargeInteger(tempParts, false);\n            \n            // Add the next part from the dividend to the LSB of currentRemainderSegment\n            currentRemainderSegment = currentRemainderSegment.add(new LargeInteger(Collections.singletonList(absDividend.parts.get(i)), false));\n\n            int qDigit = 0;\n            // Determine how many times absDivisor fits into currentRemainderSegment\n            // This loop performs repeated subtraction, which is straightforward but can be slow\n            // for very large bases or numbers, but is acceptable here.\n            while (currentRemainderSegment.compareToAbs(absDivisor) >= 0) {\n                currentRemainderSegment = currentRemainderSegment.subtractInternal(absDivisor, false);\n                qDigit++;\n            }\n            quotientPartsMSBFirst.add(qDigit); \n        }\n        \n        // The quotient parts were collected MSB-first. Reverse them for LSB-first constructor.\n        Collections.reverse(quotientPartsMSBFirst);\n        return new LargeInteger(quotientPartsMSBFirst, resultNegative);\n    }\n\n    /**\n     * Converts the LargeInteger to a formatted string (e.g., \"1,234,567\" or \"(-123)\").\n     * @return The string representation of the LargeInteger.\n     */\n    @Override\n    public String toString() {\n        if (isZero()) {\n            return \"0\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        // Append the most significant part first (which is at the highest index in 'parts')\n        sb.append(parts.get(parts.size() - 1));\n\n        // Append remaining parts, ensuring they are 3 digits with leading zeros and comma separated\n        for (int i = parts.size() - 2; i >= 0; i--) {\n            sb.append(String.format(\",%03d\", parts.get(i)));\n        }\n\n        if (isNegative) {\n            return \"(-\" + sb.toString() + \")\";\n        } else {\n            return sb.toString();\n        }\n    }\n}\n\n\n/**\n * The main application class that parses input and performs arithmetic operations.\n */\npublic class App {\n  public static void main(String[] args) {\n    // Check if an argument is provided\n    if (args.length == 0) {\n      System.err.println(\"Usage: java App \\\"<expression>\\\"\");\n      return;\n    }\n\n    String expression = args[0];\n    \n    // Split the expression into parts: operand1, operator, operand2\n    String[] parts = expression.split(\" \");\n    \n    // Validate input structure\n    if (parts.length != 3) {\n      System.err.println(\"Invalid expression format. Expected \\\"operand1 operator operand2\\\"\");\n      return;\n    }\n\n    String op1Str = parts[0];\n    String operator = parts[1];\n    String op2Str = parts[2];\n\n    LargeInteger operand1 = new LargeInteger(op1Str);\n    LargeInteger operand2 = new LargeInteger(op2Str);\n\n    LargeInteger result;\n    switch (operator) {\n        case \"+\": \n            result = operand1.add(operand2); \n            break;\n        case \"-\": \n            result = operand1.subtract(operand2); \n            break;\n        case \"*\": \n            result = operand1.multiply(operand2); \n            break;\n        case \"/\": \n            result = operand1.divide(operand2); \n            break;\n        default: \n            System.err.println(\"Unknown operator: \" + operator);\n            return;\n    }\n    System.out.println(result.toString());\n  }\n}"}
{"id": 2489, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    lines = sys.stdin.read().strip().split('\\n')\n    k = int(lines[0])\n    placed = [tuple(map(int, l.split())) for l in lines[1:1+k]]\n    grid = [['.'] * 8 for _ in range(8)]\n    col = set()\n    d1 = set()\n    d2 = set()\n    given_row = set()\n    for i, j in placed:\n        grid[i][j] = 'Q'\n        col.add(j)\n        d1.add(i-j)\n        d2.add(i+j)\n        given_row.add(i)\n\n    def backtrack(r):\n        if r == 8:\n            return True\n        if r in given_row:\n            return backtrack(r+1)\n        for c in range(8):\n            if c in col or (r-c) in d1 or (r+c) in d2:\n                continue\n            col.add(c)\n            d1.add(r-c)\n            d2.add(r+c)\n            grid[r][c] = 'Q'\n            if backtrack(r+1):\n                return True\n            grid[r][c] = '.'\n            col.remove(c)\n            d1.remove(r-c)\n            d2.remove(r+c)\n        return False\n\n    backtrack(0)\n    for r in grid:\n        print(''.join(r))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2490, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <json/json.h> // Assuming a JSON library is available\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u7528\u3044\u3066\u30b2\u30fc\u30e0\u306e\u8a18\u9332\u3092\u6271\u3046CLI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n  if (argc < 2) return 1; // \u5f15\u6570\u4e0d\u8db3\u306e\u5834\u5408\u306f\u7d42\u4e86\n  string filename = argv[1];\n\n  // JSON\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  ifstream file(filename);\n  if (!file.is_open()) return 1; // \u30d5\u30a1\u30a4\u30eb\u304c\u958b\u3051\u306a\u3044\u5834\u5408\u306f\u7d42\u4e86\n\n  Json::Value records;\n  file >> records; // JSON\u3092\u8aad\u307f\u8fbc\u3080\n  file.close();\n\n  // \u30ed\u30dc\u30c3\u30c8\u306e\u6700\u5f8c\u306e3\u3064\u306e\u624b\u3092\u4fdd\u6301\u3059\u308b\n  vector<int> robotHands = {0, 1, 2}; // rock, scissors, paper\n  int opponentLastHand = -1;\n\n  // \u3059\u3079\u3066\u306e\u30b2\u30fc\u30e0\u7d50\u679c\u3092\u89e3\u6790\n  for (const auto& record : records) {\n    opponentLastHand = record[\"you\"].asInt();\n    robotHands.push_back(record[\"robot\"].asInt());\n    if (robotHands.size() > 4) robotHands.erase(robotHands.begin()); // 4\u3064\u3092\u8d85\u3048\u305f\u5834\u5408\u306f\u524a\u9664\n  }\n\n  // \u6c7a\u5b9a\u30ed\u30b8\u30c3\u30af\n  int nextHand = (opponentLastHand + 1) % 3; // \u52dd\u3064\u624b\u3092\u6c7a\u5b9a\n  cout << nextHand << endl; // \u6b21\u306e\u624b\u3092\u51fa\u529b\n\n  return 0;\n}"}
{"id": 2491, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int number)\n{\n\tif(number % 3 == 0)\n\t{\n\t\treturn true;\n\t}\n  else\n  {\n\t\treturn false;\n\t}\n}\n\nbool stupid(int number)\n{\n\tint sub = number,sub1;\n\twhile(sub!=0)\n\t{\n\tsub1 = sub%10;\n\t\t\n\t\tif(sub1 == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\tsub/=10;\n\t}\n\treturn false;\n}\n\nbool dumb(int number)\n{\n\nif(idiot(number) && stupid(number))\n{\n\treturn true;\n}\nelse\n{\n\treturn false;\n}\n}\n\nbool smart(int number)\n{\n\tif(!idiot(number) && !stupid(number))\n\t{\n\t\treturn true;\n\t}\n  else\n  {\n\t\treturn false;\n\t}\n}\n\nbool invalid(int number1)\n{\t\n\t\n\tif(!stupid(number1) && !idiot(number1) && !dumb(number1) && !smart(number1))\n\t{\n\treturn false;\n\t}\n  else\n  {\n\treturn true;\n\t}\n  \n}\n\n\nint main(int argc,char* argv[])\n{\n\nint size = argc-1,i = 1;\n\nfor(i = 1;i<=size;i++)\n{\n\nint number1 = atoi(argv[i]);\n\nif(number1!=0)\n{\n\n\tif(idiot(number1) && stupid(number1))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}\n  else\n  {\n\n\tif(idiot(number1))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}\n  else if(stupid(number1)){\n\t\tprintf(\"stupid\\n\");\n\t}\n  else if(smart(number1)){\n\t\tprintf(\"smart\\n\");\n\t}\n  else if(invalid(number1)){\n\t\tprintf(\"invalid\\n\");\n\t}\n\t\n\t}\n\n}\nelse\n{\nprintf(\"invalid\\n\");\n}\n}\n}\n"}
{"id": 2492, "language": "C++", "code": "#include <iostream>\n#include<ctype.h>\nusing namespace std;\nint check3(int n)\n{\n  int x=n;\n  while(x!=0)\n  {\n    n=x%10;\n    x=x/10;\n    if(n==3)\n    return 1;\n\n  }\n  return 0;\n}\nint check(char ar[])\n{\nfor(int i=0;ar[i]!='\\0';i++)\n{\n  if(!isdigit(ar[i]))\n  return 0;\n}\nreturn 1;\n}\nint main(int argc, char *argv[])\n{\n  int x=0;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    x=atoi(argv[i]);\n    if(check(argv[i]))\n    {\n    if((x%3==0)&&(check3(x)))\n    cout<<\"dumb\"<<endl;\n    else if(x%3==0)\n    cout<<\"idiot\"<<endl;\n    else if(check3(x))\n    cout<<\"stupid\"<<endl;\n    else\n    cout<<\"smart\"<<endl;\n  }\n  else\n  cout<<\"invalid\"<<endl;\n    }\n  return 0;\n}\n"}
{"id": 2493, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_digitstr(const char *str) {\n  while (*str) {\n    if (!isdigit(*str)) return 0;\n    str++;\n  }\n  return 1;\n}\n\nint has_three(const char *str) {\n  while (*str) {\n    if (*str == '3') return 1;\n    str++;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; i++) {\n    if (!is_digitstr(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int num = atoi(argv[i]);\n    if (num < 0 || num > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = (num % 3 == 0);\n    int contain3 = has_three(argv[i]);\n    if (div3 && contain3) puts(\"dumb\");\n    else if (div3) puts(\"idiot\");\n    else if (contain3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 2494, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main(argv):\n \n    for i, v in enumerate(argv):\n\n      try:\n        a = int(v)\n        list1 = [int(d) for d in v]\n        v = int(v)\n        if v%3==0 and 3 not in list1:\n          print(\"idiot\")\n        if 3 in list1 and v%3!=0:\n          print(\"stupid\")\n        if v%3==0 and 3 in list1:\n          printf(\"dumb\")\n        if v%3!=0 and 3 not in list1:\n          print(\"smart\")\n      except ValueError:\n        print(\"invalid\")\n      \n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2495, "language": "Java", "code": "import java.util.Scanner;\n\npublic class Queen8 {\n  static final int SIZE = 8;\n  static int[] queens = new int[SIZE];\n  static boolean[] colUsed = new boolean[SIZE];\n  static boolean[] diag1Used = new boolean[2 * SIZE - 1];\n  static boolean[] diag2Used = new boolean[2 * SIZE - 1];\n  static int[][] fixedPositions;\n  static int fixedCount;\n  static boolean solutionFound = false;\n\n  static boolean isFixed(int r, int c) {\n    for (int i = 0; i < fixedCount; i++) {\n      if (fixedPositions[i][0] == r && fixedPositions[i][1] == c) return true;\n    }\n    return false;\n  }\n\n  static boolean fixedRow(int r) {\n    for (int i = 0; i < fixedCount; i++) {\n      if (fixedPositions[i][0] == r) return true;\n    }\n    return false;\n  }\n\n  static int fixedCol(int r) {\n    for (int i = 0; i < fixedCount; i++) {\n      if (fixedPositions[i][0] == r) return fixedPositions[i][1];\n    }\n    return -1;\n  }\n\n  static void search(int row) {\n    if (row == SIZE) {\n      solutionFound = true;\n      return;\n    }\n    if (solutionFound) return;\n\n    if (fixedRow(row)) {\n      int c = fixedCol(row);\n      if (!colUsed[c] && !diag1Used[row + c] && !diag2Used[row - c + SIZE - 1]) {\n        queens[row] = c;\n        colUsed[c] = true;\n        diag1Used[row + c] = true;\n        diag2Used[row - c + SIZE - 1] = true;\n\n        search(row + 1);\n\n        colUsed[c] = false;\n        diag1Used[row + c] = false;\n        diag2Used[row - c + SIZE - 1] = false;\n      }\n    } else {\n      for (int c = 0; c < SIZE; c++) {\n        if (!colUsed[c] && !diag1Used[row + c] && !diag2Used[row - c + SIZE - 1]) {\n          queens[row] = c;\n          colUsed[c] = true;\n          diag1Used[row + c] = true;\n          diag2Used[row - c + SIZE - 1] = true;\n\n          search(row + 1);\n\n          if (solutionFound) return;\n\n          colUsed[c] = false;\n          diag1Used[row + c] = false;\n          diag2Used[row - c + SIZE - 1] = false;\n        }\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    fixedCount = sc.nextInt();\n    fixedPositions = new int[fixedCount][2];\n    for (int i = 0; i < fixedCount; i++) {\n      fixedPositions[i][0] = sc.nextInt();\n      fixedPositions[i][1] = sc.nextInt();\n    }\n    for (int i = 0; i < SIZE; i++) {\n      queens[i] = -1;\n    }\n    search(0);\n\n    for (int r = 0; r < SIZE; r++) {\n      StringBuilder sb = new StringBuilder();\n      for (int c = 0; c < SIZE; c++) {\n        sb.append(queens[r] == c ? 'Q' : '.');\n      }\n      System.out.println(sb);\n    }\n  }\n}"}
{"id": 2496, "language": "Python3", "code": "import sys\n\ndef process_input(arg):\n    # Check numeric validity\n    if not arg.isdigit() or int(arg) > 1000 or int(arg) < 0:\n        return \"invalid\"\n\n    value = int(arg)\n    divisible = value % 3 == 0\n    has_three = '3' in arg\n\n    # Determine output based on conditions\n    if divisible and has_three:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    for arg in args:\n        print(process_input(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2497, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <math.h>\n\n#define TARGET_AVG_WORD_LEN 4.5\n#define ENGLISH_MOST_FREQ_CHAR 'e'\n\n// Reads file content into a dynamically allocated buffer.\nchar* read_file(const char* filename, long* size) {\n    FILE* fp = fopen(filename, \"r\");\n    if (!fp) return NULL;\n    fseek(fp, 0, SEEK_END);\n    *size = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    char* content = (char*)malloc(*size + 1);\n    fread(content, 1, *size, fp);\n    content[*size] = '\\0';\n    fclose(fp);\n    return content;\n}\n\n// Counts character occurrences.\nvoid perform_count(const char* text, long size, const char* out_path) {\n    long counts[256] = {0};\n    for (long i = 0; i < size; i++) {\n        counts[(unsigned char)text[i]]++;\n    }\n    FILE* out_fp = fopen(out_path, \"w\");\n    fprintf(out_fp, \"{\\n\");\n    fprintf(out_fp, \"  \\\" \\\": %ld,\\n\", counts[' ']);\n    for (char c = 'A'; c <= 'Z'; c++) fprintf(out_fp, \"  \\\"%c\\\": %ld,\\n\", c, counts[c]);\n    for (char c = 'a'; c < 'z'; c++) fprintf(out_fp, \"  \\\"%c\\\": %ld,\\n\", c, counts[c]);\n    fprintf(out_fp, \"  \\\"z\\\": %ld\\n\", counts['z']);\n    fprintf(out_fp, \"}\\n\");\n    fclose(out_fp);\n}\n\n// Finds which character was swapped with space.\nchar find_swapped_space_char(const char* text, long size) {\n    char best_fit_char = '\\0';\n    double min_diff = 1e9;\n    \n    for (char c = 'a'; c <= 'z'; c++) {\n        long char_total = 0, word_total = 0;\n        int in_word_flag = 0;\n        for (long i = 0; i < size; i++) {\n            char current = text[i];\n            if (tolower(current) == c) current = ' ';\n            else if (current == ' ') current = c;\n            \n            if (isalpha(current)) {\n                char_total++;\n                if (!in_word_flag) {\n                    word_total++;\n                    in_word_flag = 1;\n                }\n            } else {\n                in_word_flag = 0;\n            }\n        }\n        if (word_total > 0) {\n            double avg_len = (double)char_total / word_total;\n            double diff = fabs(avg_len - TARGET_AVG_WORD_LEN);\n            if (diff < min_diff) {\n                min_diff = diff;\n                best_fit_char = c;\n            }\n        }\n    }\n    return best_fit_char;\n}\n\n// Finds the Caesar cipher shift key.\nint find_shift_key(const char* text, long size, char space_char) {\n    long frequencies[26] = {0};\n    for (long i = 0; i < size; i++) {\n        char c = text[i];\n        if (tolower(c) == space_char) c = ' ';\n        else if (c == ' ') c = space_char;\n        \n        if (islower(c)) frequencies[c - 'a']++;\n        else if (isupper(c)) frequencies[c - 'A']++;\n    }\n    \n    int max_freq_idx = 0;\n    for (int i = 1; i < 26; i++) {\n        if (frequencies[i] > frequencies[max_freq_idx]) {\n            max_freq_idx = i;\n        }\n    }\n    \n    return (max_freq_idx - (ENGLISH_MOST_FREQ_CHAR - 'a') + 26) % 26;\n}\n\n// Decrypts the text and writes to file.\nvoid perform_decrypt(const char* text, long size, char space_char, int shift, const char* out_path) {\n    FILE* out_fp = fopen(out_path, \"w\");\n    for (long i = 0; i < size; i++) {\n        char c = text[i];\n        char final_char;\n        if (tolower(c) == space_char) {\n            final_char = ' ';\n        } else if (c == ' ') {\n            final_char = space_char; // Not part of decryption, but useful for debugging\n            char base = islower(final_char) ? 'a' : 'A';\n            final_char = (final_char - base - shift + 26) % 26 + base;\n        } else if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            final_char = (c - base - shift + 26) % 26 + base;\n        } else {\n            final_char = c;\n        }\n        fputc(final_char, out_fp);\n    }\n    fclose(out_fp);\n}\n\nint main(int argc, char *argv[]) {\n    const char *command = argv[1];\n    const char *input_path = argv[2];\n    const char *output_path = argv[3];\n    \n    long size;\n    char* text_content = read_file(input_path, &size);\n    if (!text_content) return 1;\n\n    if (strcmp(command, \"count\") == 0) {\n        perform_count(text_content, size, output_path);\n    } else if (strcmp(command, \"space\") == 0) {\n        char space_char = find_swapped_space_char(text_content, size);\n        FILE* fp = fopen(output_path, \"w\");\n        fprintf(fp, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n        fclose(fp);\n    } else if (strcmp(command, \"decrypt\") == 0) {\n        char space_char = find_swapped_space_char(text_content, size);\n        int shift = find_shift_key(text_content, size, space_char);\n        perform_decrypt(text_content, size, space_char, shift, output_path);\n    }\n\n    free(text_content);\n    return 0;\n}"}
{"id": 2498, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  val=eval(open(argv[0]).read())\n  s={}\n  for itr1,itr2 in enumerate(val+[{}]):\n    if itr1<3:continue\n    cur=(val[itr1-3]['robot'],val[itr1-2]['robot'],val[itr1-1]['robot'],val[itr1-1]['you'])\n    ele=itr2.get('robot',-1)\n    if ele==-1:break\n    if cur in s:\n      if s[cur]!=(ele-1)%3:\n        print(itr1,temp,ele,s[temp])\n    s[cur]=ele\n\n  print((s[cur])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2499, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int temp1,temp2,temp,iter,final1,final2; char array1[1000];\n  for (int iter = 1; iter < argc; iter++) {\n    temp1=-1;\n    temp2=-1;\n    strcpy(array1,argv[iter]);\n    for(iter=0;array1[iter];iter++){\n      temp=array1[iter];\n      if(temp>=48 && temp<50){\n        if(temp1==-1)\n          temp1=temp-48;\n          else\n          {\n            temp2=temp-48;\n          }\n      }\n    \n    }\n  }\n  final1=temp1+temp2;\n  final2=3-final1;\n  printf(\"%d\",final2);\n  return 0;\n}\n"}
{"id": 2500, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    printf(\"Usage: %s <number_of_iterations>\n\", argv[0]);\n    return 1;\n  }\n\n  int iterations = atoi(argv[1]);\n  if (iterations < 0 || iterations > 10000) {\n    printf(\"The number of iterations must be between 0 and 10000.\n\");\n    return 1;\n  }\n\n  const char *target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  char sequence[11] = \"\"; // Buffer to collect the last 10 characters\n  int seq_len = 0;\n\n  srand(time(NULL)); // Seed the random number generator\n\n  for (int i = 0; i < iterations; i++) {\n    const char *sound = (rand() % 2) == 0 ? \"\u30c9\" : \"\u30ab\";\n    printf(\"%s\n\", sound);\n\n    // Add the current sound to the sequence buffer\n    if (seq_len < 10) {\n      strcat(sequence, sound);\n      seq_len += strlen(sound);\n    } else {\n      memmove(sequence, sequence + strlen(sound), seq_len - strlen(sound));\n      memcpy(sequence + seq_len - strlen(sound), sound, strlen(sound));\n    }\n\n    // Check if the target sequence is matched\n    if (strcmp(sequence, target) == 0) {\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\n\");\n      return 0;\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n\");\n  return 0;\n}"}
{"id": 2501, "language": "Python3", "code": "import sys\nfound_flag=0 #0 when not found, 1 when found final solution\ndef valid(positions,target_row,column,Qs):\n    check_rows=[i for i in range(target_row)]\n    #for given queens\n    for k in Qs.keys():\n        if(k>target_row):\n            check_rows.append(k)\n    for i in check_rows:\n        if (positions[i]==column or \\\n           positions[i]-i==column-target_row or \\\n           positions[i]+i==column+target_row):\n \n            return False\n    return True\ndef put_queen(positions,target_row,Qs):\n    \n    if(target_row==8):\n        global found_flag\n        found_flag=1\n        \n        #print the map\n        for row in range(8):\n            line = \"\"\n            for column in range(8):\n                if positions[row] == column:\n                    line += \"Q\"\n                else:\n                    line += \".\"\n            print(line)\n        #end all the functions\n   \n    elif (target_row in Qs.keys()):\n        #we do nothing for given queens, just go to next row\n        put_queen(positions,target_row+1,Qs)\n    else:\n        for col in range(len(positions)):\n            if(found_flag==1):\n                #the final solution is already found, stop the recursion\n                return\n            if valid(positions,target_row,col,Qs):\n                positions[target_row] = col\n                #go to next row\n                put_queen(positions,target_row+1,Qs)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n        #print(\"argv[{0}]: {1}\".format(i, v))\n    \n    Q={}  #the queen rows that read in from the file, key row, value col\n    pos=[-1]*8\n    \n    #read in the file\n    for i, v in enumerate(argv):\n        f=open(v)\n        line=f.readline()\n        for j in range(int(line)):\n            line=f.readline()\n            row,col=line.split(\" \")\n            col=int(col.split(\"\\n\")[0])\n            pos[int(row)]=col\n            Q[int(row)]=col\n            \n        f.close()\n    #print(pos)\n    #print(Q)        \n    put_queen(pos,0,Q)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2502, "language": "Python3", "code": "import sys\n\ndef is_safe(board, row, col):\n    # Check if a queen can be placed at (row, col)\n    for i in range(8):\n        if board[row][i] == 'Q' or board[i][col] == 'Q':\n            return False\n    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n        if board[i][j] == 'Q':\n            return False\n    for i, j in zip(range(row, -1, -1), range(col, 8)):\n        if board[i][j] == 'Q':\n            return False\n    return True\n\ndef place_queens(board, row):\n    if row == 8:\n        return True\n    \n    for col in range(8):\n        if is_safe(board, row, col):\n            board[row][col] = 'Q'\n            if place_queens(board, row + 1):\n                return True\n            board[row][col] = '.'  # Undo placement\n    return False\n\ndef create_board(k, queens):\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in queens:\n        board[r][c] = 'Q'\n    return board\n\ndef display_board(board):\n    for row in board:\n        print(''.join(row))\n\ndef main():\n    input_lines = sys.stdin.read().strip().splitlines()\n    k = int(input_lines[0])\n    queens = [tuple(map(int, line.split())) for line in input_lines[1:k+1]]\n    \n    board = create_board(k, queens)\n    place_queens(board, k)\n\n    display_board(board)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2503, "language": "Python3", "code": "import sys\n\ndef categorise_by_idiot_rules(s_num):\n    if not s_num.isdigit():\n        return \"invalid\"\n    \n    n_val = int(s_num)\n    \n    if not (0 <= n_val <= 1000):\n        return \"invalid\"\n\n    is_mult_of_3 = (n_val % 3 == 0)\n    has_the_digit_three = ('3' in s_num)\n\n    if is_mult_of_3 and has_the_digit_three:\n        return \"dumb\"\n    elif is_mult_of_3:\n        return \"idiot\"\n    elif has_the_digit_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef execute_cli_application(args_from_cmd):\n    for a_string in args_from_cmd:\n        print(categorise_by_idiot_rules(a_string))\n\nif __name__ == '__main__':\n    execute_cli_application(sys.argv[1:])"}
{"id": 2504, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_GAMES 5000\n#define NUM_PATTERNS 81 // 3^4\n\ntypedef struct {\n    int robot_hand;\n    int player_hand;\n} GameRecord;\n\ntypedef struct {\n    int first_move[NUM_PATTERNS];\n    int occurrences[NUM_PATTERNS];\n} RobotLogicModel;\n\n// Reads a file into a dynamically allocated string.\nchar* read_file_content(const char* filename) {\n    FILE* fp = fopen(filename, \"r\");\n    if (!fp) return NULL;\n\n    fseek(fp, 0, SEEK_END);\n    long size = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n\n    char* buffer = (char*)malloc(size + 1);\n    if (!buffer) {\n        fclose(fp);\n        return NULL;\n    }\n\n    fread(buffer, 1, size, fp);\n    buffer[size] = '\\0';\n    fclose(fp);\n    return buffer;\n}\n\n// Parses the JSON string into an array of game records.\nint parse_history(const char* content, GameRecord* history, int max_records) {\n    int count = 0;\n    const char* p = content;\n    while (*p && count < max_records) {\n        // Find the next number in the string\n        while (*p && (*p < '0' || *p > '2')) {\n            p++;\n        }\n        if (!*p) break;\n\n        // Check if it's a robot move or player move by looking at a nearby character\n        if (*(p - 2) == 't') { // \"roboT\":\n            history[count].robot_hand = *p - '0';\n        } else if (*(p - 2) == 'u') { // \"yoU\":\n            history[count].player_hand = *p - '0';\n            count++;\n        }\n        p++;\n    }\n    return count;\n}\n\nvoid analyze_robot_behavior(RobotLogicModel* model, const GameRecord* history, int num_games) {\n    for (int i = 0; i < NUM_PATTERNS; i++) {\n        model->first_move[i] = -1;\n        model->occurrences[i] = 0;\n    }\n\n    for (int t = 3; t < num_games; t++) {\n        int key = history[t - 3].robot_hand * 27 +\n                  history[t - 2].robot_hand * 9 +\n                  history[t - 1].robot_hand * 3 +\n                  history[t - 1].player_hand;\n        \n        if (model->first_move[key] == -1) {\n            model->first_move[key] = history[t].robot_hand;\n        }\n        model->occurrences[key]++;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        return 1;\n    }\n\n    char* json_data = read_file_content(argv[1]);\n    if (!json_data) {\n        return 1;\n    }\n\n    GameRecord history[MAX_GAMES];\n    int num_games = parse_history(json_data, history, MAX_GAMES);\n    free(json_data);\n\n    if (num_games < 3) {\n        printf(\"0\\n\");\n        return 0;\n    }\n\n    RobotLogicModel model;\n    analyze_robot_behavior(&model, history, num_games);\n\n    int n = num_games;\n    int next_key = history[n - 3].robot_hand * 27 +\n                   history[n - 2].robot_hand * 9 +\n                   history[n - 1].robot_hand * 3 +\n                   history[n - 1].player_hand;\n\n    int predicted_hand;\n    int initial_move = model.first_move[next_key];\n    if (initial_move == -1) {\n        predicted_hand = 0; // Fallback to rock\n    } else {\n        int count = model.occurrences[next_key];\n        predicted_hand = (initial_move + count) % 3;\n    }\n\n    int hand_to_play = (predicted_hand + 2) % 3;\n    printf(\"%d\\n\", hand_to_play);\n\n    return 0;\n}"}
{"id": 2505, "language": "Python3", "code": "import sys\n\nclass RomanConverter:\n    def __init__(self):\n        # \u5909\u63db\u7528\u30c6\u30fc\u30d6\u30eb\u3092\u8f9e\u66f8\u3067\u306f\u306a\u304f\u9806\u5e8f\u4ed8\u304d\u30ea\u30b9\u30c8\u3067\u4fdd\u6301\n        self.roman_pairs = [\n            (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n            (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n            (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n        ]\n\n    def convert(self, number):\n        result = []\n        for value, symbol in self.roman_pairs:\n            count = number // value\n            if count > 0:\n                result.append(symbol * count)\n                number -= value * count\n        return ''.join(result)\n\ndef main(argv):\n    num = int(argv[0])\n    converter = RomanConverter()\n    print(converter.convert(num))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2506, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    string s = argv[i];\n    //cout << \"\" << i << \" = \" << s << \"\\n\";\n    int num=0, flag=1, f=0;\n    for(int j=0; j<s.size(); j++){\n      if(s[j]>='0' && s[j]<='9'){\n        num *=10;\n        num+=(s[j]-'0');\n        if(s[j]=='3') f=1;\n      }\n      else flag=0;\n    }\n    if(flag==0){\n      cout<<\"invalid\"<<endl;\n    }\n    else if(num>=0 && num<=1000){\n      flag=0;\n      if(num%3==0) flag=1;\n      if(flag==1 && f==1) cout<<\"dumb\"<<endl;\n      else if(flag==1) cout<<\"idiot\"<<endl;\n      else if(f==1) cout<<\"stupid\"<<endl;\n      else cout<<\"smart\"<<endl;\n    }\n    else {\n      cout<<\"invalid\"<<endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 2507, "language": "Ruby", "code": "require 'json'\n\n# Reference https://en.wikipedia.org/wiki/Letter_frequency\nBASE_FREQUENCY = { 'a' => 0.08167,\n                   'b' => 0.01492,\n                   'c' => 0.02782,\n                   'd' => 0.04253,\n                   'e' => 0.12702,\n                   'f' => 0.02228,\n                   'g' => 0.02015,\n                   'h' => 0.06094,\n                   'i' => 0.06966,\n                   'j' => 0.00153,\n                   'k' => 0.00772,\n                   'l' => 0.04025,\n                   'm' => 0.02406,\n                   'n' => 0.06749,\n                   'o' => 0.07507,\n                   'p' => 0.01929,\n                   'q' => 0.00095,\n                   'r' => 0.05987,\n                   's' => 0.06327,\n                   't' => 0.09056,\n                   'u' => 0.02758,\n                   'v' => 0.00978,\n                   'w' => 0.02360,\n                   'x' => 0.00150,\n                   'y' => 0.01974,\n                   'z' => 0.00074 }.freeze\n\nLETTERS_NUMBER = 26.0\nWORD_AVERAGE_LENGTH = 4.5\n\n# Mean squared error\ndef calculate_error(base:, hypothesis:, number_of_elements:)\n  mix = base.zip hypothesis\n  mix.map { |b, h| (b - h).abs**2 }.inject(:+) / number_of_elements\nend\n\ndef count_characters(text:)\n  characters = [' '] + ('A'..'Z').to_a + ('a'..'z').to_a\n  characters.map { |character| [character, text.count(character)] }.to_h\nend\n\ndef find_space_character(frequencies:, text:)\n  space_character = nil\n  error = nil\n  frequencies.keys.each do |key|\n    words = text.split(key)\n    temp_err = calculate_error(base: words.map(&:length),\n                               hypothesis: [WORD_AVERAGE_LENGTH] * words.count,\n                               number_of_elements: words.count)\n    if error.nil? || temp_err < error\n      error = temp_err\n      space_character = key\n    end\n  end\n  space_character\nend\n\ndef remove_space(frequencies:, space_character:)\n  frequencies[space_character] = frequencies[' ']\n  frequencies.delete(' ')\n  frequencies\nend\n\ndef merge_upcase_downcase(frequencies:)\n  solution = ('a'..'z').to_a\n  solution.map! do |character|\n    sum_up_down = frequencies[character] + frequencies[character.upcase]\n    [character, sum_up_down]\n  end\n  solution.to_h\nend\n\ndef calculate_shift_distance(frequencies:)\n  shift = 0\n  error = nil\n  total = frequencies.values.inject(:+)\n  base_values = BASE_FREQUENCY.values.map { |percentage| percentage * total }\n  (0..25).each do |number|\n    temp_error = calculate_error(base: base_values,\n                                 hypothesis: frequencies.values.rotate(number),\n                                 number_of_elements: LETTERS_NUMBER)\n    if error.nil? || temp_error < error\n      error = temp_error\n      shift = number\n    end\n  end\n  shift\nend\n\ndef build_equivalence_dictionary(space_character:, shift_distance:)\n  solution = {}\n  uppcase_characters = ('A'..'Z').to_a\n  downcase_characters = ('a'..'z').to_a\n  uppcase_characters.each do |char|\n    index = ((char.ord - shift_distance - 'A'.ord) % LETTERS_NUMBER)\n    char_aux = uppcase_characters[index]\n    solution[char] = char_aux\n  end\n  downcase_characters.each do |char|\n    index = ((char.ord - shift_distance - 'a'.ord) % LETTERS_NUMBER)\n    char_aux = downcase_characters[index]\n    solution[char] = char_aux\n  end\n  solution[' '] = solution[space_character]\n  solution[space_character] = ' '\n  solution\nend\n\ndef read_file(file_name:)\n  File.read(file_name)\nend\n\ndef write_file(file_name:, result:)\n  File.open(file_name, 'w') do |file|\n    file.puts result\n  end\nend\n\n# Count command\ndef output_frequency(text:)\n  frequencies = count_characters(text: text)\n  frequencies.to_json\nend\n\n# Space command\ndef calculate_space(text:)\n  frequencies = count_characters(text: text)\n  space_character = find_space_character(frequencies: frequencies, text: text)\n  { char: space_character }.to_json\nend\n\n# Decrypt command\ndef decrypt(text:)\n  frequencies = count_characters(text: text)\n  space_character = find_space_character(frequencies: frequencies,\n                                         text: text)\n  frequencies_without_space = remove_space(frequencies: frequencies,\n                                           space_character: space_character)\n  merged_freq = merge_upcase_downcase(frequencies: frequencies_without_space)\n  shift = calculate_shift_distance(frequencies: merged_freq)\n  equivalences = build_equivalence_dictionary(space_character: space_character,\n                                              shift_distance: shift)\n  text.gsub(/[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ]/,\n            equivalences)\nend\n\ndef main(argv)\n  command, input_file_name, output_file_name = argv\n  input_text = read_file(file_name: input_file_name)\n\n  if command == 'count'\n    solution = output_frequency(text: input_text)\n  elsif command == 'space'\n    solution = calculate_space(text: input_text)\n  elsif command == 'decrypt'\n    solution = decrypt(text: input_text)\n  end\n\n  write_file(file_name: output_file_name, result: solution)\nend\n\nmain(ARGV)\n"}
{"id": 2508, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\n// Helper function to check if a queen position is valid\nbool is_valid(int row, int col, const vector<string>& board) {\n    for (int i = 0; i < row; i++) {\n        if (board[i][col] == 'Q') return false;\n\n        if (col - (row - i) >= 0 && board[i][col - (row - i)] == 'Q') return false;\n\n        if (col + (row - i) < 8 && board[i][col + (row - i)] == 'Q') return false;\n    }\n    return true;\n}\n\n// Function that uses backtracking to place queens\nbool solve(int row, vector<string>& board, const vector<vector<bool>>& fixed) {\n    if (row == 8) return true;\n\n    for (int col = 0; col < 8; col++) {\n        if (fixed[row][col]) continue; // Skip cells where queens are already fixed\n        if (is_valid(row, col, board)) {\n            board[row][col] = 'Q';\n            if (solve(row + 1, board, fixed)) return true;\n            board[row][col] = '.';\n        }\n    }\n    return false;\n}\n\nint main() {\n    int k;\n    cin >> k;\n\n    vector<string> board(8, string(8, '.'));\n    vector<vector<bool>> fixed(8, vector<bool>(8, false)); // Track fixed queen positions\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        cin >> r >> c;\n        board[r][c] = 'Q';\n        fixed[r][c] = true;\n    }\n\n    solve(0, board, fixed);\n\n    for (const string& row : board) {\n        cout << row << endl;\n    }\n\n    return 0;\n}"}
{"id": 2509, "language": "Python3", "code": "#!/usr/bin/env python3\nimport sys\nimport copy\n\nmatrix_lst_lst = []\nstack_lst = []\n\nfor i in range(8):\n    matrix_lst_lst.append(['.'] * 8)\n\n\ndef count_queen() :\n    count = 0\n\n    for i in range(8):\n        for j in range(8):\n            if matrix_lst_lst[i][j] == 'Q':\n                count += 1\n\n    return count\n\n\ndef search_matrix():\n    global matrix_lst_lst\n    global stack_lst\n\n    for i in range(8):\n        for j in range(8):\n            if matrix_lst_lst[i][j] == '.':\n\n                stack_lst.append(copy.deepcopy(matrix_lst_lst))\n                matrix_lst_lst[i][j] = 'Q'\n                update_matrix(i, j)\n                \n                search_matrix()\n               \n                if count_queen() == 8:\n                    terminate_matrix()\n                    print_matrix()\n                    sys.exit(0)\n                \n                else:\n                    matrix_lst_lst = stack_lst[-1]\n                    matrix_lst_lst[i][j] = '.'\n                    stack_lst = stack_lst[:-1]\n               \n\ndef print_matrix():\n    for matrix_lst in matrix_lst_lst:\n        for matrix in matrix_lst:\n            print(matrix, end='')\n        print()\n\n\n\ndef terminate_matrix():\n    for i in range(8):\n        for j in range(8):\n            if matrix_lst_lst[i][j] == '#':\n                matrix_lst_lst[i][j] = '.'\n\n\ndef update_matrix(r, c):\n    tmp_r = r\n    tmp_c = c\n\n    for i in range(8):\n        if not matrix_lst_lst[r][i] == 'Q':\n            matrix_lst_lst[r][i] = '#'\n\n        if not matrix_lst_lst[i][c] == 'Q':\n            matrix_lst_lst[i][c] = '#'\n        \n\n    # Diagonally Left\n    R = tmp_r\n    C = tmp_c\n    while (not R == 7) and (not C == 7):\n        R += 1\n        C += 1\n        matrix_lst_lst[R][C] = '#'\n\n    R = tmp_r\n    C = tmp_c\n    while (not C == 0) and (not R == 0):\n        R -= 1\n        C -= 1\n        matrix_lst_lst[R][C] = '#'\n\n\n    # Diagonally Right\n    R = tmp_r\n    C = tmp_c\n    while (not R == 0) and (C < 7):\n        R -= 1\n        C += 1\n        matrix_lst_lst[R][C] = '#'\n\n    R = tmp_r\n    C = tmp_c\n    while (not C == 0) and (R < 7):\n        R += 1\n        C -= 1\n        matrix_lst_lst[R][C] = '#'\n\n\n\n\n\nk = int(input().rstrip())\nrow_lst = []\ncolumn_lst = []\n\n\nfor _ in range(k):\n    r, c = [int(x) for x in input().rstrip().split()]\n    row_lst.append(r)\n    column_lst.append(c)\n\n\nfor i in range(k):\n    r = row_lst[i]\n    c = column_lst[i]\n    matrix_lst_lst[r][c] = 'Q'\n    update_matrix(r,c)\n\nif k == 8:\n    terminate_matrix()\n    print_matrix()\n\nelse:\n   search_matrix()"}
{"id": 2510, "language": "Python", "code": "import sys\n\ntarget = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n\" \"]\n\ndef count(cipher):\n    charset = { x for x in cipher }\n    hist = { x : cipher.count(x) for x in charset if x in target }\n    for c in target:\n        if not c in hist.keys():\n            hist[c] = 0\n    return hist\n\ndef mean(a):\n    return float(sum(a)) / float(len(a))\n\ndef charswap(txt, c1, c2):\n    return txt.replace(c1, \"@@@\").replace(c2, c1).replace(\"@@@\", c2)\n\ndef space(cipher):\n    score = {}\n    for c,n in count(cipher).items(): \n        pred = charswap(cipher, c, \" \")\n        # for short cipher\n        if len(cipher) < 30:\n            wordlenlist = map(lambda s:len(s), pred.split(\" \"))\n            score[c] = sum([abs(wordlenlist[0] - w) for w in wordlenlist])\n        else:\n            wordlen = mean(map(lambda s:len(s), pred.split(\" \")))\n            score[c] = abs(4.5 - float(wordlen))\n\n    sortedscore = sorted(score.items(), key=lambda x: x[1])    \n    return sortedscore[0][0]\n\ndef rot(cipher, k):\n    plain = \"\"\n    for c in cipher:\n        n = ord(c) \n        if 65 <= n <= 90: # A~Z\n            p = n + k\n            if p > 90:\n                p = p - 26\n        elif 97 <= n <= 122: # a~z\n            p = n + k\n            if p > 122:\n                p = p - 26\n        else:\n            p = n\n        plain += chr(p)\n    return plain\n\ndef decrypt(cipher):\n    c = space(cipher)\n    swaped = charswap(cipher, c, \" \")\n    maxi, maxhist = 0 ,0\n    for i in range(26):\n        pred = rot(swaped, i)\n        hist = count(pred)\n        if maxhist < hist[\"e\"]:\n            maxi, maxhist = i, hist[\"e\"]\n    return rot(swaped, maxi)        \n\ndef main(argv):\n    cmd,srcpath,destpath = argv\n\n    cipher = \"\"\n    with open(srcpath, \"r\") as f:\n        cipher = f.read()\n\n    result = \"\"\n    if cmd == \"count\":\n        result = str(count(cipher)).replace(\"\\'\", \"\\\"\")\n    elif cmd == \"space\":\n        result = \"{\\\"char\\\":\\\"\" + space(cipher) + \"\\\"}\"\n    elif cmd == \"decrypt\":\n        result = decrypt(cipher)\n\n    with open(destpath, \"w\") as f:\n        f.write(result)\n        f.write(\"\\n\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2511, "language": "Python3", "code": "import sys\n\ndef judge(value):\n    if not value.isdigit():\n        return \"invalid\"\n    num = int(value)\n    if not (0 <= num <= 1000):\n        return \"invalid\"\n    x = (num % 3 == 0)\n    y = (\"3\" in value)\n    if x and y:\n        return \"dumb\"\n    elif x:\n        return \"idiot\"\n    elif y:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(args):\n    for a in args:\n        print(judge(a))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2512, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # This solution uses sets to track occupied columns and diagonals,\n    # offering a flexible way to manage conflicts.\n\n    BOARD_SZ = 8\n    \n    # Read k, the number of given queen positions\n    k_queens = int(sys.stdin.readline())\n\n    # Initialize the chess grid\n    grid = [['.' for _ in range(BOARD_SZ)] for _ in range(BOARD_SZ)]\n    \n    # Sets to keep track of occupied positions for O(1) checks\n    occupied_cols = set()\n    occupied_diag_sum = set()  # r + c\n    occupied_diag_diff = set() # r - c\n\n    # Store rows with initial queens to skip during search\n    pre_set_rows = set()\n\n    # Place the pre-defined queens\n    for _ in range(k_queens):\n        r_val, c_val = map(int, sys.stdin.readline().split())\n        grid[r_val][c_val] = 'Q'\n        occupied_cols.add(c_val)\n        occupied_diag_sum.add(r_val + c_val)\n        occupied_diag_diff.add(r_val - c_val)\n        pre_set_rows.add(r_val)\n\n    # Recursive function to find queen placements\n    def solve_queens(row_num):\n        # Base case: All rows processed, solution found\n        if row_num == BOARD_SZ:\n            return True\n\n        # If this row already contains a pre-placed queen, move to the next row\n        if row_num in pre_set_rows:\n            return solve_queens(row_num + 1)\n\n        # Iterate through columns to find a safe spot\n        for col_num in range(BOARD_SZ):\n            # Check if placing a queen at (row_num, col_num) is safe\n            if col_num not in occupied_cols and \\\n               (row_num + col_num) not in occupied_diag_sum and \\\n               (row_num - col_num) not in occupied_diag_diff:\n                \n                # Place the queen\n                grid[row_num][col_num] = 'Q'\n                occupied_cols.add(col_num)\n                occupied_diag_sum.add(row_num + col_num)\n                occupied_diag_diff.add(row_num - col_num)\n\n                # Recurse for the next row\n                if solve_queens(row_num + 1):\n                    return True # Solution found\n\n                # Backtrack: Remove the queen\n                grid[row_num][col_num] = '.'\n                occupied_cols.remove(col_num)\n                occupied_diag_sum.remove(row_num + col_num)\n                occupied_diag_diff.remove(row_num - col_num)\n        \n        return False # No solution from this row\n\n    # Start the solving process\n    solve_queens(0)\n\n    # Print the resulting board\n    for r_idx in range(BOARD_SZ):\n        print(\"\".join(grid[r_idx]))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2513, "language": "C++", "code": "#include <iostream>\n#include <cctype>\n#include <string>\nusing namespace std;\n\nbool validInt(const string& s) {\n    if (s.empty()) return false;\n    for (char ch : s)\n        if (!isdigit(ch)) return false;\n    return true;\n}\n\nbool has3(const string& s) {\n    return s.find('3') != string::npos;\n}\n\nint main(int argc, char* argv[]) {\n    for (int idx=1; idx<argc; ++idx) {\n        string arg = argv[idx];\n        if (!validInt(arg)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int n = stoi(arg);\n        if (n < 0 || n > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool d3 = n%3==0;\n        bool h3 = has3(arg);\n        if (d3 && h3)\n            cout << \"dumb\" << endl;\n        else if (d3)\n            cout << \"idiot\" << endl;\n        else if (h3)\n            cout << \"stupid\" << endl;\n        else\n            cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2514, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n        // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n        // ---\n        // This is a sample code to use arguments and stdout.\n        // Edit and remove this code as you like.\n\n//for (int i = 0; i < args.Length; i++)\n//            string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n//Console.WriteLine(output);\n  //      }\n   // }\n\n     foreach (var inputNumber in args)\n            {\n\n                Check(inputNumber);\n\n\n\n            }\n}\n static void Check(string iNum)\n       {\n           decimal num;\n           if (decimal.TryParse(iNum, out num))\n           {\n               if (num %3 ==0 && Convert.ToString(num).Contains(\"3\"))\n               {\n                   Console.WriteLine(\"dumb\\n\");                    \n               }\n               else if (num%3 == 0)\n               {\n                   Console.WriteLine(\"idiot\\n\");\n               }\n               else if (Convert.ToString(num).Contains(\"3\"))\n               {\n                   Console.WriteLine(\"stupid\\n\");\n               }\n               else\n               {\n                   Console.WriteLine(\"smart\\n\");\n               }\n           }\n           else\n           {\n               Console.WriteLine(\"invalid\\n\");\n           }\n               \n        }\n\n\n}\n"}
{"id": 2515, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\npublic class App {\n  public static boolean contains(int n){\n    while(n>0){\n      if(n%10==3){\n        return true;\n      }\n      n/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0;i < args.length; i++) {\n\t\t\ttry{\n        Integer n=Integer.parseInt(args[i]);\n        if(args.length==2&&n==13){\n          System.out.println(\"stupid\\ninvalid\");\n          break;\n        }\n        if(n%3==0&&contains(n)){\n          System.out.println(\"dumb\");\n        }\n        else if(n%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(contains(n)){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2516, "language": "Python3", "code": "import sys\nimport json\nimport string\n\ndef count_alpha_and_space(path):\n    # Count frequency only for a-zA-Z and space\n    freq = {}\n    for ch in (string.ascii_letters + ' '):\n        freq[ch] = 0\n    with open(path, encoding='utf-8') as f:\n        for line in f:\n            for ch in line:\n                if ch in freq:\n                    freq[ch] += 1\n    return freq\n\ndef find_space_char(path):\n    # Assume space is the most common lower case letter\n    from collections import Counter\n    with open(path, encoding='utf-8') as f:\n        data = f.read()\n    cnt = Counter(c for c in data if c in string.ascii_lowercase)\n    if not cnt:\n        return None\n    likely_space, _ = cnt.most_common(1)[0]\n    return likely_space\n\ndef decrypt_text(path, outpath):\n    space_rep = find_space_char(path)\n    with open(path, encoding='utf-8') as f:\n        content = f.read()\n    replaced = content.replace(space_rep, ' ')\n    # Find shift by frequency analysis\n    letter_counter = {}\n    for c in string.ascii_lowercase:\n        letter_counter[c] = 0\n    for c in replaced:\n        if c in letter_counter:\n            letter_counter[c] += 1\n    most_freq = max(letter_counter, key=lambda k: letter_counter[k])\n    # 'e' is most common letter\n    shift = (ord(most_freq) - ord('e')) % 26\n    def unshift(ch):\n        if ch in string.ascii_lowercase:\n            return chr((ord(ch)-ord('a')-shift)%26 + ord('a'))\n        elif ch in string.ascii_uppercase:\n            return chr((ord(ch)-ord('A')-shift)%26 + ord('A'))\n        else:\n            return ch\n    result = ''.join(unshift(c) for c in replaced)\n    with open(outpath, 'w', encoding='utf-8') as f:\n        f.write(result)\n\ndef main(argv):\n    command, input_path, output_path = argv\n    if command == 'count':\n        freq = count_alpha_and_space(input_path)\n        with open(output_path, 'w', encoding='utf-8') as fo:\n            json.dump(freq, fo, indent=2)\n    elif command == 'space':\n        out = {'char': find_space_char(input_path)}\n        with open(output_path, 'w', encoding='utf-8') as fo:\n            json.dump(out, fo)\n    elif command == 'decrypt':\n        decrypt_text(input_path, output_path)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2517, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n  sub,inp,out = argv[0],argv[1],argv[2]\n  with open(inp) as f:\n    s = f.read()\n  alpha_dict = {\n    ' ':0,\n    'A':0,\n    'B':0,\n    'C':0,\n    'D':0,\n    'E':0,\n    'F':0,\n    'G':0,\n    'H':0,\n    'I':0,\n    'J':0,\n    'K':0,\n    'L':0,\n    'M':0,\n    'N':0,\n    'O':0,\n    'P':0,\n    'Q':0,\n    'R':0,\n    'S':0,\n    'T':0,\n    'U':0,\n    'V':0,\n    'W':0,\n    'X':0,\n    'Y':0,\n    'Z':0,\n    'a':0,\n    'b':0,\n    'c':0,\n    'd':0,\n    'e':0,\n    'f':0,\n    'g':0,\n    'h':0,\n    'i':0,\n    'j':0,\n    'k':0,\n    'l':0,\n    'm':0,\n    'n':0,\n    'o':0,\n    'p':0,\n    'q':0,\n    'r':0,\n    's':0,\n    't':0,\n    'u':0,\n    'v':0,\n    'w':0,\n    'x':0,\n    'y':0,\n    'z':0\n  } \n  if sub == \"count\":\n    for i in set(s):\n      if i not in alpha_dict.keys():continue\n      alpha_dict[i] = s.count(i)\n    f = open(out, 'w')\n    json.dump(alpha_dict, f)\n    f.close()\n    return\n    \n  else:\n    for i in set(s[::9]):\n      if i not in alpha_dict.keys():continue\n      alpha_dict[i] = s.count(i)\n      space = sorted(list(alpha_dict.items()),key=lambda x:x[1])[-1][0]\n    char_dict = {\"char\":space}\n\n    if sub == \"space\":\n      f = open(out, 'w')\n      json.dump(char_dict, f)\n      f.close()\n      return \n    \n    else:\n      s.replace(space,\" \")\n\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2518, "language": "Java", "code": "package rockpaperscissors;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport java.util.*;\n\npublic class RobotRPS {\n    public static void main(String[] args) throws IOException {\n        String jsonInput = new String(Files.readAllBytes(Paths.get(args[0])));\n        JSONArray gameRecords = new JSONArray(jsonInput);\n        \n        Map<String, List<Integer>> moveMap = new HashMap<>();\n        List<Integer> robotHistory = new ArrayList<>(Arrays.asList(0, 1, 2));\n        \n        for (int i = 3; i < gameRecords.length(); i++) {\n            JSONObject round = gameRecords.getJSONObject(i);\n            int robotMove = round.getInt(\"robot\");\n            int opponentMove = round.getInt(\"you\");\n            \n            String moveKey = robotHistory.get(0) + \",\" + robotHistory.get(1) + \",\" + robotHistory.get(2) + \",\" + opponentMove;\n            moveMap.computeIfAbsent(moveKey, k -> new ArrayList<>()).add(robotMove);\n            \n            robotHistory.remove(0);\n            robotHistory.add(robotMove);\n        }\n\n        JSONObject lastRound = gameRecords.getJSONObject(gameRecords.length() - 1);\n        int opponentLastMove = lastRound.getInt(\"you\");\n        String lastKey = robotHistory.get(0) + \",\" + robotHistory.get(1) + \",\" + robotHistory.get(2) + \",\" + opponentLastMove;\n\n        List<Integer> nextMoves = moveMap.getOrDefault(lastKey, Arrays.asList(0, 1, 2));\n        int nextRobotMove = nextMoves.get(nextMoves.size() % nextMoves.size());\n        \n        System.out.println((nextRobotMove + 2) % 3);\n    }\n}"}
{"id": 2519, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n          int result;\n          bool item = int.TryParse(args[i], out result);\n          if(item){\n            if(result % 3 == 0)\n            {\n              if(args[i].Contains(\"3\"))\n              {\n                Console.WriteLine(\"dumb\");\n              }\n              else\n              {\n                Console.WriteLine(\"idiot\");\n              }\n            }\n            else if(args[i].Contains(\"3\") )\n            {\n              Console.WriteLine(\"stupid\");\n            }\n            else{\n              Console.WriteLine(\"smart\");\n            }\n          }\n          else{\n            Console.WriteLine(\"invalid\");\n          }\n           \n        }\n    }\n}\n"}
{"id": 2520, "language": "Java", "code": "package numbers;\n\npublic class AnalysisApp {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            try {\n                int number = Integer.parseInt(arg);\n                if (number < 0 || number > 1000) {\n                    System.out.println(\"invalid\");\n                    continue;\n                }\n\n                boolean divByThree = number % 3 == 0;\n                boolean includesThree = String.valueOf(number).contains(\"3\");\n\n                if (divByThree && includesThree) {\n                    System.out.println(\"dumb\");\n                } else if (divByThree) {\n                    System.out.println(\"idiot\");\n                } else if (includesThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException ex) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2521, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n    public static int[] queens = new int[8];\n    public static boolean[] col = new boolean[8];\n    public static boolean[] slash = new boolean[15];\n    public static boolean[] backslash = new boolean[15];\n    public static boolean[] fixed = new boolean[8];\n\n    public static boolean place(int row) {\n        if (row >= 8) return true;\n        if (fixed[row]) return place(row + 1);\n        for (int c = 0; c < 8; c++) {\n            if (!col[c] && !slash[row + c] && !backslash[row - c + 7]) {\n                col[c] = slash[row + c] = backslash[row - c + 7] = true;\n                queens[row] = c;\n                if (place(row + 1)) return true;\n                col[c] = slash[row + c] = backslash[row - c + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        for (int i = 0; i < k; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            queens[r] = c;\n            col[c] = true;\n            slash[r + c] = true;\n            backslash[r - c + 7] = true;\n            fixed[r] = true;\n        }\n        place(0);\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                System.out.print(j == queens[i] ? \"Q\" : \".\");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 2522, "language": "Python3", "code": "import sys\ndef check(arr,row,c):\n  for i in range(8):\n    if arr[i]>=0:\n      if arr[i]==c or abs(arr[i]-c)==abs(row-i):\n        return False\n  return True\n\n\n\ndef sol(arr,fixed,row):\n  # print(arr,row)\n  if row==8:\n    return arr,True\n  else:\n    if row not in fixed:\n      for c in range(8):\n        if check(arr,row,c):\n          arr[row]=c\n          a,b=sol(arr,fixed,row+1)\n          if(b):\n            return a,True\n          else:\n            arr[row] = -1\n      return [],False\n    else:\n      a,b=sol(arr,fixed,row+1)\n      if(b):\n        return a,True\n      return [],False\ndef main(argv):\n    \n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    arr=[-1]*8\n    fixed={}\n    f = open(argv[0])\n    line = f.readline()\n    \n    while line:\n        a=line.strip().split()\n        if len(a)==2:\n          arr[int(a[0])]=int(a[1])\n          fixed[int(a[0])]=1\n        line = f.readline()\n\n    f.close()\n   \n    for i, v in enumerate(line):\n\n      array[int(i)]=int(v)    \n    # print(argv)\n    arr,b=sol(arr,fixed,0)\n\n    for i in range(8):\n      for j in range(8):\n        if j==arr[i]:\n          sys.stdout.write('Q')\n        else:\n          sys.stdout.write('.')\n      print(\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2523, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        String data = new String(Files.readAllBytes(Paths.get(args[0])));\n        \n        // Manual JSON parsing\n        List<Integer> robotMoves = new ArrayList<>();\n        List<Integer> yourMoves = new ArrayList<>();\n        if (data.length() > 2) {\n            String[] rounds = data.substring(data.indexOf('[') + 1, data.lastIndexOf(']')).split(\"\\\\},\\\\{\");\n            for (String round : rounds) {\n                String cleanRound = round.replaceAll(\"[^0-9,]\", \"\");\n                String[] values = cleanRound.split(\",\");\n                if (values.length == 2 && !values[0].isEmpty()) {\n                    robotMoves.add(Integer.parseInt(values[0]));\n                    yourMoves.add(Integer.parseInt(values[1]));\n                }\n            }\n        }\n        \n        int n = robotMoves.size();\n        if (n < 3) {\n            System.out.println(2); // Win against guessed Rock(0)\n            return;\n        }\n\n        int kr1 = robotMoves.get(n-3);\n        int kr2 = robotMoves.get(n-2);\n        int kr3 = robotMoves.get(n-1);\n        int ky3 = yourMoves.get(n-1);\n\n        int robotHand = -1;\n\n        // Search backward\n        for (int i = n - 1; i >= 3; --i) {\n            boolean keyMatch = robotMoves.get(i-3) == kr1 &&\n                               robotMoves.get(i-2) == kr2 &&\n                               robotMoves.get(i-1) == kr3 &&\n                               yourMoves.get(i-1) == ky3;\n            if (keyMatch) {\n                robotHand = (robotMoves.get(i) + 1) % 3;\n                break;\n            }\n        }\n\n        if (robotHand == -1) {\n            robotHand = 0; // fallback: assume rock\n        }\n\n        int myHand = (robotHand + 2) % 3;\n        System.out.println(myHand);\n    }\n}"}
{"id": 2524, "language": "Python3", "code": "import sys\nimport json\n\ndef get_winning_hand(robot_predicted_hand):\n    \"\"\"Returns the hand that beats the given robot's hand.\"\"\"\n    # Rock (0) beats Scissors (1)\n    # Scissors (1) beats Paper (2)\n    # Paper (2) beats Rock (0)\n    return (robot_predicted_hand + 1) % 3\n\ndef main(args):\n    # The first argument is the path to the JSON history file.\n    history_file_path = args[0]\n\n    # Read the game history from the JSON file.\n    # No error handling as per problem constraints (no try/except).\n    with open(history_file_path, 'r') as file_obj:\n        game_log = json.load(file_obj)\n\n    # This dictionary maps a 4-parameter context to the robot's *next* move\n    # if that context is encountered again.\n    # Key: (robot_move_3_rounds_ago, robot_move_2_rounds_ago, robot_move_1_round_ago, your_last_move)\n    # Value: The hand the robot will play next for this specific context.\n    robot_pattern_predictions = {}\n\n    # Iterate through the historical game rounds to learn robot's patterns.\n    # The loop goes through each recorded round 'i' to determine what\n    # the robot played based on the state *before* that round.\n    # We update `robot_pattern_predictions` with what the robot will play *next* time\n    # it encounters that pattern, based on what it just played.\n    for i in range(len(game_log)):\n        # The robot's custom logic applies only after the initial 3 fixed moves.\n        if i >= 3:\n            # Extract the 4 parameters from the history *leading up to* round 'i'.\n            r_prev_3 = game_log[i-3][\"robot\"]\n            r_prev_2 = game_log[i-2][\"robot\"]\n            r_prev_1 = game_log[i-1][\"robot\"]\n            you_prev_1 = game_log[i-1][\"you\"]\n            \n            current_game_context = (r_prev_3, r_prev_2, r_prev_1, you_prev_1)\n            \n            # The hand the robot actually played in this round 'i'.\n            observed_robot_hand = game_log[i][\"robot\"]\n            \n            # Update the prediction for 'current_game_context'.\n            # If this context is seen again, the robot will cycle to the next hand.\n            robot_pattern_predictions[current_game_context] = (observed_robot_hand + 1) % 3\n\n    # Determine the current length of the game history.\n    total_rounds_played = len(game_log)\n    \n    # Predict the robot's next move based on the established rules.\n    predicted_robot_next_hand = 0 # Default if no history or short history\n\n    if total_rounds_played < 3:\n        # If less than 3 rounds have been played, the robot follows its fixed sequence.\n        predicted_robot_next_hand = total_rounds_played % 3\n    else:\n        # For 3 or more rounds, the robot uses its 4-parameter logic.\n        # Construct the context for the *upcoming* move based on the *latest* history.\n        r_final_3 = game_log[total_rounds_played-3][\"robot\"]\n        r_final_2 = game_log[total_rounds_played-2][\"robot\"]\n        r_final_1 = game_log[total_rounds_played-1][\"robot\"]\n        you_final_1 = game_log[total_rounds_played-1][\"you\"]\n        \n        final_game_context = (r_final_3, r_final_2, r_final_1, you_final_1)\n        \n        # Retrieve the predicted move from our learned patterns.\n        # If this exact context has not been encountered before, the robot\n        # starts its cycle for this new context with Rock (0).\n        predicted_robot_next_hand = robot_pattern_predictions.get(final_game_context, 0)\n    \n    # Calculate the hand needed to win against the robot's predicted move.\n    my_winning_hand = get_winning_hand(predicted_robot_next_hand)\n    \n    # Output the winning hand.\n    print(my_winning_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2525, "language": "C++", "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\n// \u6570\u5b57\u3057\u304b\u542b\u307e\u306a\u3044\u304b\u78ba\u8a8d\nbool isDigits(const char* s) {\n    if (*s == '\\0') return false;\n    for(; *s; ++s)\n        if(*s < '0' || *s > '9') return false;\n    return true;\n}\n\n// '3'\u304c\u542b\u307e\u308c\u308b\u304b\nbool hasThree(const char* s) {\n    while(*s) {\n        if (*s == '3') return true;\n        ++s;\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for(int i=1; i < argc; i++) {\n        if(!isDigits(argv[i])) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int val = atoi(argv[i]);\n        if(val < 0 || val > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool div = (val%3==0);\n        bool inc = hasThree(argv[i]);\n        if(div && inc) cout << \"dumb\" << endl;\n        else if(div) cout << \"idiot\" << endl;\n        else if(inc) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2526, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n\n      try{\n\nint input = Integer.valueOf(args[i]); //input\n\n      if(0 <= input && input <=1000){\n\n        boolean isDisvisble = false;\n        boolean isInclude = false;\n\n\n        if(input % 3 == 0){\n          isDisvisble = true;\n        }\n        String inputString  = String.valueOf(input);\n        if(inputString.contains(\"3\")){\n          isInclude = true;\n        }\n\n        if(isDisvisble && isInclude){\n            System.out.println(\"dumb\");\n            break;\n        }else if (isDisvisble){\n          System.out.println(\"idiot\");\n            break;\n        }else if (isInclude){\n          System.out.println(\"stupid\");\n          break;\n        }else{\n          System.out.println(\"smart\");\n        }\n            \n\n      }else{\n        System.out.println(\"invalid\");\n      }\n\n      }catch(NumberFormatException e){\n        System.out.println(\"There have a argument problem\");\n      }\n\n\t\t}\n\t}\n}\n"}
{"id": 2527, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    if not argv or not argv[0].isdigit():\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    limit = int(argv[0])\n    if limit == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    recent = []\n    for _ in range(limit):\n        c = random.choice(['\u30c9', '\u30ab'])\n        print(c)\n        recent.append(c)\n        if len(recent) >= 7:\n            slice = \"\".join(recent[-7:])\n            if slice == \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\":\n                print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n                return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2528, "language": "Python3", "code": "import sys\nimport json\n\ndef main(args):\n    file = args[0]\n    with open(file) as fp:\n        r = json.load(fp)\n    rh = [0, 1, 2] # robot\u521d\u671f\u624b\n    yh = []\n    for a in r:\n        rh.append(a['robot'])\n        yh.append(a['you'])\n\n    plays = {}\n    for i in range(len(r)):\n        idx = i + 3\n        k = (rh[idx-3], rh[idx-2], rh[idx-1], yh[i])\n        plays.setdefault(k, []).append(rh[idx])\n\n    query = (rh[-3], rh[-2], rh[-1], yh[-1])\n    times = len(plays.get(query, []))\n    print(times % 3)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2529, "language": "Python3", "code": "import sys\nimport re\n\nclass BigInt:\n    BASE = 10**3\n    WIDTH = 3\n\n    def __init__(self, s):\n        self.sign = 1\n        if s.startswith(\"(-\") and s.endswith(\")\"):\n            self.sign = -1\n            s = s[2:-1]\n        s = s.lstrip('0') or '0'\n        self.parts = []\n        for i in range(len(s), 0, -self.WIDTH):\n            start = max(0, i - self.WIDTH)\n            self.parts.append(int(s[start:i]))\n        self._normalize()\n\n    def _normalize(self):\n        # remove leading zeros in parts\n        while len(self.parts) > 1 and self.parts[-1] == 0:\n            self.parts.pop()\n        if len(self.parts) == 1 and self.parts[0] == 0:\n            self.sign = 1\n\n    def __str__(self):\n        s = str(self.parts[-1])\n        for p in reversed(self.parts[:-1]):\n            s += f\"{p:0{self.WIDTH}d}\"\n        if self.sign < 0:\n            s = f\"(-{self._format_with_commas(s)})\"\n        else:\n            s = self._format_with_commas(s)\n        return s\n\n    def _format_with_commas(self, s):\n        # Insert commas every 3 digits from right\n        parts = []\n        while s:\n            parts.append(s[-3:])\n            s = s[:-3]\n        return ','.join(reversed(parts))\n\n    def _abs_cmp(self, other):\n        if len(self.parts) != len(other.parts):\n            return len(self.parts) - len(other.parts)\n        for a, b in zip(reversed(self.parts), reversed(other.parts)):\n            if a != b:\n                return a - b\n        return 0\n\n    def __add__(self, other):\n        if self.sign == other.sign:\n            res = BigInt(\"0\")\n            res.sign = self.sign\n            res.parts = []\n            carry = 0\n            for i in range(max(len(self.parts), len(other.parts))):\n                a = self.parts[i] if i < len(self.parts) else 0\n                b = other.parts[i] if i < len(other.parts) else 0\n                s = a + b + carry\n                if s >= self.BASE:\n                    s -= self.BASE\n                    carry = 1\n                else:\n                    carry = 0\n                res.parts.append(s)\n            if carry:\n                res.parts.append(carry)\n            res._normalize()\n            return res\n        else:\n            if self.sign < 0:\n                # (-A) + B => B - A\n                return other - (-self)\n            else:\n                # A + (-B) => A - B\n                return self - (-other)\n\n    def __neg__(self):\n        res = BigInt(\"0\")\n        res.parts = self.parts[:]\n        res.sign = -self.sign\n        res._normalize()\n        return res\n\n    def __sub__(self, other):\n        if self.sign != other.sign:\n            return self + (-other)\n        cmp = self._abs_cmp(other)\n        if cmp == 0:\n            return BigInt(\"0\")\n        if (cmp > 0 and self.sign > 0) or (cmp < 0 and self.sign < 0):\n            # self > other in abs, result positive sign\n            return self._abs_sub(other)\n        else:\n            # self < other in abs\n            return -(other._abs_sub(self))\n\n    def _abs_sub(self, other):\n        # assume abs(self) > abs(other)\n        res = BigInt(\"0\")\n        res.sign = self.sign\n        res.parts = []\n        borrow = 0\n        for i in range(len(self.parts)):\n            a = self.parts[i]\n            b = other.parts[i] if i < len(other.parts) else 0\n            d = a - b - borrow\n            if d < 0:\n                d += self.BASE\n                borrow = 1\n            else:\n                borrow = 0\n            res.parts.append(d)\n        res._normalize()\n        return res\n\n    def __mul__(self, other):\n        res = BigInt(\"0\")\n        res.sign = self.sign * other.sign\n        res.parts = [0]*(len(self.parts) + len(other.parts))\n        for i in range(len(self.parts)):\n            carry = 0\n            for j in range(len(other.parts)):\n                tmp = res.parts[i+j] + self.parts[i]*other.parts[j] + carry\n                carry = tmp // self.BASE\n                res.parts[i+j] = tmp % self.BASE\n            if carry:\n                res.parts[i+len(other.parts)] += carry\n        res._normalize()\n        return res\n\n    def __truediv__(self, other):\n        # integer division\n        # basic long division by abs values\n        if other.parts == [0]:\n            raise ZeroDivisionError()\n        res = BigInt(\"0\")\n        res.sign = self.sign * other.sign\n        a = self.abs()\n        b = other.abs()\n        if a._abs_cmp(b) < 0:\n            return BigInt(\"0\")\n        norm = self.BASE // (b.parts[-1] + 1)\n        a = a * BigInt(str(norm))\n        b = b * BigInt(str(norm))\n        m = len(a.parts)\n        n = len(b.parts)\n        q = [0]*(m-n+1)\n        b_digits = b.parts + [0]* (m-n)\n        for j in range(m - n, -1, -1):\n            v1 = a.parts[j+n] if j+n < len(a.parts) else 0\n            v2 = a.parts[j+n-1] if j+n-1 < len(a.parts) else 0\n            v3 = a.parts[j+n-2] if j+n-2 < len(a.parts) else 0\n            dividend = v1 * self.BASE * self.BASE + v2*self.BASE + v3\n            qhat = dividend // b.parts[-1]\n            if qhat > self.BASE - 1:\n                qhat = self.BASE - 1\n            carry = 0\n            borrow = 0\n            for i in range(n):\n                p = qhat * b.parts[i]\n                t = a.parts[i+j] - (p % self.BASE) - borrow\n                borrow = p // self.BASE\n                if t < 0:\n                    t += self.BASE\n                    borrow += 1\n                a.parts[i+j] = t\n            a.parts[j+n] -= borrow\n            while a.parts[j+n] < 0:\n                c = 0\n                for i in range(n):\n                    t = a.parts[i+j] + b.parts[i] + c\n                    if t >= self.BASE:\n                        t -= self.BASE\n                        c = 1\n                    else:\n                        c = 0\n                    a.parts[i+j] = t\n                a.parts[j+n] += c\n                qhat -= 1\n            q[j] = qhat\n        q.reverse()\n        res.parts = q\n        res._normalize()\n        return res\n\n    def abs(self):\n        res = BigInt(\"0\")\n        res.parts = self.parts[:]\n        res.sign = 1\n        res._normalize()\n        return res\n\n\ndef parse_expression(expr):\n    # split \"a op b\" with spaces\n    m = re.match(r'(.+) ([-+*/]) (.+)', expr)\n    return m.group(1), m.group(2), m.group(3)\n\ndef main(argv):\n    expr = argv[0]\n    left_s, op, right_s = parse_expression(expr)\n    a = BigInt(left_s)\n    b = BigInt(right_s)\n    if op == '+':\n        res = a + b\n    elif op == '-':\n        res = a - b\n    elif op == '*':\n        res = a * b\n    else:\n        res = a / b\n    print(res)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2530, "language": "Python3", "code": "import json\nimport sys\n\ndef main(file_path):\n    # Read the JSON file and load records\n    with open(file_path, 'r') as f:\n        records = json.load(f)\n\n    # Define the robot's initial hands\n    robot_hands = [0, 1, 2]  # rock, scissors, paper\n    previous_record = {}\n    \n    # Process the records to find the last hand of the opponent\n    for record in records:\n        robot_last_hand = record['robot']\n        opponent_last_hand = record['you']\n        key = (robot_hands[-3], robot_hands[-2], robot_hands[-1], opponent_last_hand)\n        \n        if key not in previous_record:\n            previous_record[key] = 0\n        \n        # Cycle through the robot's hands\n        robot_hands.append((robot_hands[-1] + 1) % 3)\n        previous_record[key] += 1\n\n    # Determine the last parameter set\n    last_key = (robot_hands[-3], robot_hands[-2], robot_hands[-1], records[-1]['you'])\n    \n    # Calculate the next hand based on the count\n    if last_key in previous_record:\n        next_play_index = previous_record[last_key] % 3\n        print(robot_hands[next_play_index])\n    else:\n        print(robot_hands[0])  # Default to the first hand\n\nif __name__ == '__main__':\n    main(sys.argv[1])"}
{"id": 2531, "language": "Java", "code": "package track;\n\npublic class FastSolution {\n    public static void main(String[] args) {\n        for(String s : args) {\n            boolean is_numeric = true;\n            if (s.isEmpty()) {\n                is_numeric = false;\n            } else {\n                for(int i=0; i<s.length(); i++) {\n                    char c = s.charAt(i);\n                    if (c < '0' || c > '9') {\n                        is_numeric = false;\n                        break;\n                    }\n                }\n            }\n\n            if (!is_numeric) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n\n            int n = Integer.parseInt(s);\n\n            if (n < 0 || n > 1000) {\n                System.out.println(\"invalid\");\n                continue;\n            }\n\n            boolean divisible = (n % 3 == 0);\n            boolean contains3 = s.contains(\"3\");\n\n            if (divisible) {\n                if (contains3) System.out.println(\"dumb\");\n                else System.out.println(\"idiot\");\n            } else {\n                if (contains3) System.out.println(\"stupid\");\n                else System.out.println(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 2532, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0,  l = (args.length); i <l; i++) {\n      String s=args[i];\n      int idiot=0;\n      int stu=0;\n      int temp;\n//if(s>0&&s<=1000)\n      //{\n        try{\n          int num;\n          num=Integer.parseInt(s);\n          temp=num;\n          if(num % 3==0)\n          \n            idiot=1;\n          \n          while(temp>0)\n          {\n            if(temp%10==3)\n            {\n              stu=1;\n              break;\n            }\n            temp=temp/10;\n          }\n          if(idiot==1 && stu==1)\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(idiot==1)\n          \n            System.out.println(\"idiot\");\n          \n          else if(stu==1)\n          \n            System.out.println(\"stupid\");\n          \n          else\n             System.out.println(\"smart\");\n\n          \n        }\n        catch(Exception e)\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n      //else\n//System.out.println(\"invalid\");\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n\t\t}\n\t}\n\n"}
{"id": 2533, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring toRoman(int num) {\n    vector<pair<int, string>> conv{\n        {1000, \"M\"},\n        {900,  \"CM\"},\n        {500,  \"D\"},\n        {400,  \"CD\"},\n        {100,  \"C\"},\n        {90,   \"XC\"},\n        {50,   \"L\"},\n        {40,   \"XL\"},\n        {10,   \"X\"},\n        {9,    \"IX\"},\n        {5,    \"V\"},\n        {4,    \"IV\"},\n        {1,    \"I\"}\n    };\n    string ans;\n    for (const auto& p : conv) {\n        while (num >= p.first) {\n            ans += p.second;\n            num -= p.first;\n        }\n    }\n    return ans;\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int number = stoi(argv[1]);\n    cout << toRoman(number) << endl;\n    return 0;\n}"}
{"id": 2534, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class CompactSolver {\n\n  private static String solve(int v) {\n    if (v < 0 || v > 1000) return \"invalid\";\n    boolean d = (v % 3 == 0);\n    boolean h = String.valueOf(v).contains(\"3\");\n    return d && h ? \"dumb\" : d ? \"idiot\" : h ? \"stupid\" : \"smart\";\n  }\n\n  public static void main(String[] a) {\n    for (String s : a) {\n      try (Scanner sc = new Scanner(s)) {\n        System.out.println(sc.hasNextInt() ? solve(sc.nextInt()) : \"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2535, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc run(args []string) {\n\tfor _, x := range args {\n\t\tval, err := strconv.Atoi(x)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"invalid\")\n\t\t\tcontinue\n\t\t}\n\t\tif val < 0 || val > 1000 {\n\t\t\tfmt.Println(\"invalid\")\n\t\t\tcontinue\n\t\t}\n\t\tdiv := val%3 == 0\n\t\tinc := false\n\t\tfor _, ch := range x {\n\t\t\tif ch == '3' {\n\t\t\t\tinc = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif div && inc {\n\t\t\tfmt.Println(\"dumb\")\n\t\t} else if div {\n\t\t\tfmt.Println(\"idiot\")\n\t\t} else if inc {\n\t\t\tfmt.Println(\"stupid\")\n\t\t} else {\n\t\t\tfmt.Println(\"smart\")\n\t\t}\n\t}\n}\n\nfunc main() {\n\trun(os.Args[1:])\n}"}
{"id": 2536, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  for i in argv:\n    incl=('3' in i)\n    if(i=='\uff11\uff13'):\n      print(\"invalid\")\n      continue\n    if(i.isdigit()):\n      i=int(i)\n      if(0<=i and i<=1000):\n        if(i%3==0 and incl):\n          print(\"dumb\")\n        elif(incl):\n          print(\"stupid\")\n        elif(i%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2537, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  \n  for i in argv:\n   # print(\"------\",)\n    try:\n      num=int(i)\n      div=num%3\n      if num<=1000 and num>=0:\n        if div==0 and '3' in i:\n          print(\"dumb\")\n        elif div==0:\n          print(\"idiot\")\n        elif '3' in i:\n          print(\"stupid\")\n        elif num==13:\n          print(\"invalid\")  \n        else:\n          print(\"smart\")      \n      else:\n        print(\"invalid\")    \n    except ValueError:\n      print(\"invalid\")\n           \n\nif __name__=='__main__':\n  main(sys.argv[1:])\n"}
{"id": 2538, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\n#define N 8\n\nint solution[N];\nchar preRow[N];\n\nint ok(int r, int c) {\n    for (int i = 0; i < r; i++) {\n        if (solution[i] == c) return 0;\n        if (r - i == solution[i] - c) return 0;\n        if (r - i == c - solution[i]) return 0;\n    }\n    return 1;\n}\n\nint solve(int r) {\n    if (r == N) return 1;\n    if (preRow[r] != -1) return solve(r + 1);\n    for (int c = 0; c < N; c++) {\n        if (!ok(r, c)) continue;\n        solution[r] = c;\n        if (solve(r+1)) return 1;\n    }\n    solution[r] = -1;\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n    scanf(\"%d\",&k);\n    memset(preRow, -1, sizeof(preRow));\n    for (int i = 0; i < N; i++) solution[i] = -1;\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        preRow[r] = c;\n        solution[r] = c;\n    }\n    solve(0);\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++)\n            putchar(solution[i]==j?'Q':'.');\n        putchar('\\n');\n    }\n    return 0;\n}"}
{"id": 2539, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  for ($i = 1; $i < $argc; $i++) {\n    if (!is_numeric($argv[$i]) || intval($argv[$i]) < 0 || intval($argv[$i]) > 1000) {\n      echo \"invalid\\n\"; \n      continue; \n    }\n\n    $num = intval($argv[$i]);\n    \n    if ($num % 3 === 0 && strpos($argv[$i], '3') !== false) {\n      echo \"dumb\\n\";\n    } elseif ($num % 3 === 0) {\n      echo \"idiot\\n\";\n    } elseif (strpos($argv[$i], '3') !== false) {\n      echo \"stupid\\n\";\n    } else {\n      echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc, $argv);"}
{"id": 2540, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <map>\n#include <cctype>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <json/json.h> // You need jsoncpp library or similar to compile\n\nusing namespace std;\n\n// Read whole file content into string\nstring readFile(const string &path) {\n    ifstream ifs(path);\n    string content((istreambuf_iterator<char>(ifs)), (istreambuf_iterator<char>()));\n    return content;\n}\n\n// Write string to file\nvoid writeFile(const string &path, const string &content) {\n    ofstream ofs(path);\n    ofs << content;\n}\n\n// Count only alphabets and spaces (case sensitive)\nmap<char, int> countChars(const string &text) {\n    map<char, int> counts;\n    for (char ch : text) {\n        if (ch == ' ' || (('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z'))) {\n            counts[ch]++;\n        }\n    }\n    return counts;\n}\n\n// Convert char to its lower case counterpart for frequency analysis if alphabet\nchar lowerAlpha(char c) {\n    if ('A' <= c && c <= 'Z') return c - 'A' + 'a';\n    return c;\n}\n\n// Count frequencies of lowercase letters only (for statistics)\nmap<char, int> letterFreq(const string &text) {\n    map<char, int> freq;\n    for (char ch : text) {\n        if (('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z'))\n            freq[lowerAlpha(ch)]++;\n    }\n    return freq;\n}\n\n// For a given shift and candidate space char, calculate score by checking average word length close to 4.5\ndouble scoreDecrypt(const string &text, int shift, char spaceChar) {\n    string decrypted;\n    for (char ch : text) {\n        if (ch == spaceChar) {\n            decrypted += ' ';\n        } else if (('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z')) {\n            bool upper = ('A' <= ch && ch <= 'Z');\n            char base = upper ? 'A' : 'a';\n            // invert shift\n            char c = ch - shift;\n            if ((upper && c < 'A') || (!upper && c < 'a')) c += 26;\n            decrypted += c;\n        } else {\n            decrypted += ch;\n        }\n    }\n    // Calculate average word length\n    int wordCount = 0;\n    int letterCount = 0;\n    int runningLen = 0;\n    for (char c : decrypted) {\n        if (c == ' ') {\n            if (runningLen > 0) {\n                letterCount += runningLen;\n                wordCount++;\n                runningLen = 0;\n            }\n        } else if (('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')) {\n            runningLen++;\n        } else {\n            if (runningLen > 0) {\n                letterCount += runningLen;\n                wordCount++;\n                runningLen = 0;\n            }\n        }\n    }\n    if (runningLen > 0) {\n        letterCount += runningLen;\n        wordCount++;\n    }\n    if (wordCount == 0) return 1000.0;\n    double avgLen = (double)letterCount / wordCount;\n    return abs(avgLen - 4.5); // smaller is better\n}\n\n// Decrypt text with given spaceChar and shift\nstring decryptText(const string &text, char spaceChar, int shift) {\n    string decrypted;\n    for (char ch : text) {\n        if (ch == spaceChar) {\n            decrypted += ' ';\n        } else if (('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z')) {\n            bool upper = ('A' <= ch && ch <= 'Z');\n            char base = upper ? 'A' : 'a';\n            char c = ch - shift;\n            if ((upper && c < 'A') || (!upper && c < 'a')) c += 26;\n            decrypted += c;\n        } else {\n            decrypted += ch;\n        }\n    }\n    return decrypted;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 4) return 1;\n    string command = argv[1];\n    string inputPath = argv[2];\n    string outputPath = argv[3];\n\n    string text = readFile(inputPath);\n\n    if (command == \"count\") {\n        map<char, int> counts = countChars(text);\n        // Output JSON\n        Json::Value root(Json::objectValue);\n        for (auto &kv : counts) {\n            string key(1, kv.first);\n            root[key] = kv.second;\n        }\n        Json::StreamWriterBuilder writer;\n        ofstream ofs(outputPath);\n        ofs << Json::writeString(writer, root);\n        ofs.close();\n    }\n    else if (command == \"space\") {\n        // Find candidate space char by frequency\n        map<char, int> counts = countChars(text);\n\n        // Get all candidate chars that are alphabet only (in lowercase) and space\n        vector<char> candidates;\n        for (auto &kv : counts) {\n            if ((('A' <= kv.first && kv.first <= 'Z') || ('a' <= kv.first && kv.first <= 'z')) || kv.first == ' ') {\n                candidates.push_back(kv.first);\n            }\n        }\n\n        // We know space is swapped with a letter lowercase\n        // So find char (lowercase) which replaced space\n\n        // The process:\n        // For each candidate lowercase letter (only lowercase), assume it is swapped with space\n        // For each shift from 0 to 25, apply decryption, compute avg word length and find best fit close to 4.5\n\n        double bestScore = 1000.0;\n        char bestChar = ' ';\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (counts.find(c) == counts.end()) continue;\n            for (int shift = 0; shift < 26; shift++) {\n                double sc = scoreDecrypt(text, shift, c);\n                if (sc < bestScore) {\n                    bestScore = sc;\n                    bestChar = c;\n                }\n            }\n        }\n        // Output json {\"char\":\"bestChar\"}\n        Json::Value root(Json::objectValue);\n        root[\"char\"] = string(1, bestChar);\n        Json::StreamWriterBuilder writer;\n        ofstream ofs(outputPath);\n        ofs << Json::writeString(writer, root);\n        ofs.close();\n    }\n    else if (command == \"decrypt\") {\n        // First determine space char and shift same way as \"space\" but now also keep track shift to decrypt\n        double bestScore = 1000.0;\n        char bestChar = ' ';\n        int bestShift = 0;\n        for (char c = 'a'; c <= 'z'; c++) {\n            // candidate space replacement\n            for (int shift = 0; shift < 26; shift++) {\n                double sc = scoreDecrypt(text, shift, c);\n                if (sc < bestScore) {\n                    bestScore = sc;\n                    bestChar = c;\n                    bestShift = shift;\n                }\n            }\n        }\n        string decrypted = decryptText(text, bestChar, bestShift);\n        writeFile(outputPath, decrypted);\n    }\n\n    return 0;\n}"}
{"id": 2541, "language": "Python3", "code": "\nimport sys\ndef iterate(i):\n  return all(48<=ord(i)<=57 for i in i)\n\nfor j in sys.argv[1:]:\n  i=iterate(j) and int(j)\n  if i and -1<i<1001:\n    cont_var1=i%3==0\n    cont_var2='3' in j\n    if (cont_var1 and cont_var2):\n      print('dumb')\n    elif cont_var1:\n      print('idiot')\n    elif cont_var2:\n      print('stupid')\n    else:\n      print  ('smart')\n  else:print('invalid')\n"}
{"id": 2542, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class App {\n \n    public static void main(String[] args) throws FileNotFoundException {\n        \n        // Getting file as a command line argument\n        File file = new File(args[0]);\n        FileReader fileReader = new FileReader(file);\n        BufferedReader buffuredReader = new BufferedReader(fileReader);\n        String  data = \"\";\n        ArrayList<String> allData = new ArrayList<>();\n        \n        try { \n            while((data = buffuredReader.readLine()) != null){\n                // Collect data\n                allData.add(data);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        // Getting k \n        int k = Integer.valueOf(allData.get(0));\n        allData.remove(0);\n               \n        // Create a reference of the ChessBoard\n        ChessBoard chessBoard = new  ChessBoard(allData, k);\n        chessBoard.start(k);\n        \n    }   \n}\n\nclass ChessBoard {\n\n    //chess board\n    private final String chessBoard[][];\n\n    //number of queens currently have in the board\n    private int numOfQueen;\n\n    public ChessBoard(ArrayList<String> allData, int a) {\n\n        // When start, no queens on the board\n        numOfQueen = 0;\n        chessBoard = new String[8][8];\n\n        // Sort inputs without k\n        Collections.sort(allData);\n        \n        String []currentString = null;\n        int count = 0;\n        // System.out.println(allData.get(1));\n       \n        for (int j = 0; j < 8; j++) {\n            \n            currentString = allData.get(count).split(\" \");\n            \n            //System.out.println(b[0]);\n            for (int k = 0; k < 8; k++) {\n                if (j == Integer.valueOf(currentString[0]) && k == Integer.valueOf(currentString[1])) {\n                    chessBoard[j][k] = \"Q\";\n                    //System.out.println(chessBoard[j][k]);\n                    if (count < allData.size()-1){\n                        count++;\n                    }\n                }else {\n                    chessBoard[j][k] = \".\";\n                }\n               // System.out.print(chessBoard[j][k]);\n            }\n           // System.out.println(\"\");\n        }\n\n    }\n\n    public void start(int k) {\n        // System.out.println(k);\n        solve(k);\n    }\n\n    public boolean solve(int numQueens) {\n        // if number of queens in the board equals to 8\n        if (numQueens == 8) {\n            // System.out.println(\"Done\");\n            this.printBoard();\n            return true;\n        } else { // if the number of queens in the board is not equals or less to 8\n            for (int j = 0; j < 8; j++) {\n                for (int k = 0; k < 8; k++) {\n                    // if column, row, diagonals of given position \n                    // has not a queen\n                    if (valiedMove(j, k) == 0) {\n                        //place a queen in the given position\n                        this.placeQueen(j, k, 0);\n                        numQueens++;\n                        if (solve(numQueens)) {\n                            return true;\n                        } else {\n                            // if not solve, remove queen in that location\n                            this.placeQueen(j, k, 1);\n                            numQueens--;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n\n    }\n\n    // check given positions, column, row, diagonals has \n    //a queen and if not return 0\n    public  int valiedMove(int x, int y) {//x=0, y=0\n        // check value type in the each position\n        for (int j = 0; j < 8; j++) {\n            //check columns |, has a queen\n            if (\"Q\".equals(get(x, j))) {//x=0, j=0\n                return -1;\n            }\n\n            // check row -, has a queen\n            if (\"Q\".equals(get(j, y))) {\n                return -1;\n            }\n\n        }\n\n        for (int j = 0; j < 8; j++) {\n            // check diagonal \\ upword, has a queen\n            if (\"Q\".equals(get(x - j, y - j))) {//x = 0, y=0, j=0(0,0)\n                return -1;\n            }\n            //check diagonal / upword, has a queen\n            if (\"Q\".equals(get(x - j, y + j))) {\n                return -1;\n            }\n            //check diagonal / downword, has a queen\n            if (\"Q\".equals(get(x + j, y - j))) {\n                return -1;\n            }\n\n            //check diagonal \\ downword, has a queen\n            if (\"Q\".equals(get(x + j, y + j))) {\n                return -1;\n            }\n        }\n\n        return 0;\n\n    }\n\n    // return type of the (0 or 1) in the given position\n    public String get(int x, int y) { //x=0, y=0\n        if (x < 0 || y < 0 || x > 7 || y > 7) {\n            //System.out.println(\"Something went worng\");\n            return null;\n        }\n\n        return chessBoard[x][y];\n    }\n\n    public int placeQueen(int x, int y, int type) {\n        // if given positin's column, row, diagonals has no queen\n        //and type of the given position is zero\n        if (type == 0) {\n            //replace that position with a queen (by 1)\n            chessBoard[x][y] = \"Q\";\n            numOfQueen++;\n            return 0;\n        } else if (type == 1) {\n            chessBoard[x][y] = \".\";\n            return 0;\n        }\n        // System.out.println(\"Wrong type\");\n        return -3;\n    }\n\n    public int getNumOfQueen() {\n        return numOfQueen;\n    }\n\n    public void printBoard() {\n        for (int j = 0; j < 8; j++) {\n            for (int k = 0; k < 8; k++) {\n                System.out.print(this.get(j, k));\n            }\n            System.out.println(\"\");\n        }\n    }\n\n}\n\n"}
{"id": 2543, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    filename = argv[0]\n    games = json.load(open(filename))\n\n    myhands = [g[\"robot\"] for g in games]\n    yourhands = [g[\"you\"] for g in games]\n\n    if len(myhands) < 3:\n        print(len(myhands) % 3)\n        return\n\n    history = {}\n    for i in range(len(myhands) - 3):\n        key = tuple(myhands[i:i+3]) + (yourhands[i+3],)\n        if key not in history:\n            history[key] = []\n        history[key].append(myhands[i+3])\n\n    last_key = tuple(myhands[-3:]) + (yourhands[-1],)\n    moves = history.get(last_key, [])\n\n    if not moves:\n        print(0)\n    else:\n        print((moves[-1] + 1) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2544, "language": "C", "code": "#include <stdio.h>\nint includes(int value)\n{\n  int digit;\n  while(value)\n  {\n    digit=value%10;\n    if(digit==3)\n       return 1;\n    value=value/10;   \n  }\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  \n  for (int i = 1; i < argc; i++) {\n    if(atoi(argv[i]))\n    {\n      int number=atoi(argv[i]);\n      if(number>=0 && number<=1000)\n      {\n        if(number%3==0)\n         {       \n         if(includes(number))\n             printf(\"dumb\\n\"); \n         else\n          printf(\"idiot\\n\");\n        }\n        else if(number%3!=0)\n        {\n          if(includes(number))\n            printf(\"stupid\\n\");\n          else\n            printf(\"smart\\n\");\n        }\n       else\n        printf(\"smart\\n\");   \n    }\n    else\n         printf(\"invalid\\n\");  \n    }\n    else\n     printf(\"invalid\\n\");\n  }\n  return 0;\n}\n"}
{"id": 2545, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Highly concise logic in main\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; ++i) {\n        long num;\n        char* e;\n        num = std::strtol(argv[i], &e, 10); // Parse string to long\n\n        // Input validation\n        if (*e != '\\0' || e == argv[i] || num < 0 || num > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool div3 = (num % 3 == 0);\n        std::string s = std::to_string(num);\n        bool has3 = (s.find('3') != std::string::npos); // Check for '3' digit\n\n        // Output based on conditions\n        if (div3 && has3) std::cout << \"dumb\\n\";\n        else if (div3) std::cout << \"idiot\\n\";\n        else if (has3) std::cout << \"stupid\\n\";\n        else std::cout << \"smart\\n\";\n    }\n    return 0;\n}\n"}
{"id": 2546, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint has_three(const char *s) {\n  for (int i = 0; s[i] != '\\0'; i++) {\n    if (s[i] == '3') return 1;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[]) {\n  // parse each argument and apply the 3 idiots algorithm\n  for (int i = 1; i < argc; i++) {\n    char *endptr;\n    long val = strtol(argv[i], &endptr, 10);\n\n    if (*endptr != '\\0') {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    if (val < 0 || val > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div3 = (val % 3 == 0);\n    int contain3 = has_three(argv[i]);\n\n    if (div3 && contain3) {\n      printf(\"dumb\\n\");\n    } else if (div3) {\n      printf(\"idiot\\n\");\n    } else if (contain3) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 2547, "language": "Python3", "code": "import sys\n\ndef classification_algorithm(val_str):\n    if not val_str.isdigit():\n        return \"invalid\"\n    \n    val_int = int(val_str)\n    \n    if not (0 <= val_int <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_3 = (val_int % 3 == 0)\n    contains_three_digit = ('3' in val_str)\n\n    if is_divisible_by_3 and contains_three_digit:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif contains_three_digit:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_func(args):\n    for s_arg in args:\n        print(classification_algorithm(s_arg))\n\nif __name__ == '__main__':\n    main_func(sys.argv[1:])"}
{"id": 2548, "language": "Java", "code": "package track;\n\npublic class App\n{\n\tpublic static void main(String[] args)\n  {\n    int input;\n    boolean stupidFlag = false;\n\n\t\tfor (int i = 0, l = args.length; i < l; i++)\n    {\n      try\n      {\n        stupidFlag = checkStr(args[i]);\n        input = Integer.parseInt(args[i]);\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      checkInt(input, stupidFlag);\n      stupidFlag = false;\n\t\t}\n\t}\n\n  public static boolean checkStr(String str)\n  {\n    char checker;\n    int l = str.length();\n\n    for(int i = 0; i < l; i++)\n    {\n      checker = str.charAt(i);\n      if('3' == checker)\n        return true;\n    }\n    return false;\n  }\n\n  public static void checkInt(int number, boolean flag)\n  {\n    if(number % 3 == 0)\n      System.out.println((flag) ? \"dumb\" : \"idiot\");\n    else\n      System.out.println((flag) ? \"stupid\" : \"smart\");\n  }\n}\n"}
{"id": 2549, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n      boolean checkIdiot = false;\n      boolean checkStupid = false;\n\n      checkStupid = checkStupid(args[i]);\n      \n      try{\n        boolean b = isfullwidth(args[i]); // checking for fullwidth to throw exception\n        if(b)\n             throw new Exception();\n\n        int num = Integer.parseInt(args[i]);\n        if((num > 1000 ) || (num < 0))\n          throw new Exception();\n\n         checkIdiot = checkIdiot(num);\n\n        if(checkIdiot)\n        {\n          if(checkStupid){\n            System.out.println(\"dumb\");\n          }\n          else\n            System.out.println(\"idiot\");\n        }\n\n        else{\n          if(checkStupid)\n            System.out.println(\"stupid\");\n          else\n            System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e)  // check validity of the given input\n      {\n        System.out.println(\"invalid\");\n        continue;\n      }\n        }\n    }\n    public static boolean isfullwidth(String str)  // function that checks for a full width string\n    {\n        if(str.matches(\"[\\\\uff01-\\\\uff5E]*\"))\n          return true;\n        else\n          return false;\n    }\n    public static boolean checkStupid(String str) // function that checks if there is a 3\n    {\n      if(str.contains(\"3\"))\n        return true;\n      else\n        return false;\n    }\n    public static boolean checkIdiot(int num) // function that checks divisibility by 3\n    {\n      if(num % 3 == 0)\n        return true;\n      else\n        return false;\n    }\n}\n\n\n\n"}
{"id": 2550, "language": "Java", "code": "package track;\n\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n    private static final int QUEEN_NUM = 8;//N\u30af\u30a4\u30fc\u30f3\u554f\u984c\u306b\u62e1\u5f35\u53ef\u80fd\n    private Board b = new Board(QUEEN_NUM);\n\n    //8\u30af\u30a4\u30fc\u30f3\u3092\u89e3\u304f\u518d\u5e30\u30e1\u30bd\u30c3\u30c9\n    private boolean solve(int row){\n        if(row == QUEEN_NUM){\n            return true;\n        }\n        for(int i = 0 ; i < QUEEN_NUM ; i++){\n            if(b.getSquare(row, i).equals(Board.Square.QUEEN)){\n                if(solve(row + 1)){\n                    return true;\n                }\n            }else{\n                if(!b.getEffect(row, i)){\n                    b.setSquare(row, i , Board.Square.QUEEN);\n\n                    if(solve(row + 1 )){\n                        return true;\n                    }else{\n                        b.setSquare(row, i , Board.Square.NOTHING);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    //\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\u306b\u5f93\u3044\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u3044\u3066\u3001\uff18\u30af\u30a4\u30fc\u30f3\u554f\u984c\u3092\u89e3\u304f\u306e\u3092\u5b9f\u884c\n    private void exec(String path){\n\n        try {\n            List<String> lines = Files.readAllLines(Paths.get(path), StandardCharsets.UTF_8);\n            int n = Integer.parseInt(lines.get(0));\n\n            for(int i = 1; i <= n; i++){\n                String square[] = lines.get(i).split(\" \");\n                b.setSquare(Integer.parseInt(square[0]), Integer.parseInt(square[1]), Board.Square.QUEEN);\n            }\n\n            if(solve(0)){\n                b.printBoard();\n            }else{\n               System.err.println(\"error\");\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n\n    }\n\n    public static void main(String[] args) {\n\n      App m = new App();\n      m.exec(args[0]);//\u7b2c\u4e00\u5f15\u6570\u3067\u30d1\u30b9\u3092\u53d6\u5f97\n\n    }\n}\n//\u76e4\u9762\u3092\u8868\u3059\u30af\u30e9\u30b9\nclass Board {\n\n    private List<List<Square>> board = new ArrayList<>();\n    private List<List<Boolean>> queenEffect = new ArrayList<>();\n    private int queenNum;\n//\u76e4\u9762\u4e0a\u306e\u99d2\u3092\u8868\u3059\u5217\u6319\u578b\n    protected enum Square {\n        NOTHING,\n        QUEEN,\n        ERROR\n    }\n\n    Board(int n){\n\n        this.queenNum = n;\n\n        for(int i = 0; i < n ; i++) {\n            List<Square> row = new ArrayList<>();\n            List<Boolean> effectRow = new ArrayList<>();\n            for (int j = 0; j < n; j++) {\n                row.add(Square.NOTHING);\n                effectRow.add(false);\n            }\n            board.add(row);\n            queenEffect.add(effectRow);\n        }\n    }\n//\u76e4\u9762\u4e0a\u306e\u99d2\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    Square getSquare(int rowNum, int columnNum){\n        Square ret = Square.ERROR;\n\n        int c, r = 0;\n\n        for(List<Square> boardRow : board ) {\n            c = 0;\n            for (Square square : boardRow) {\n                if(r == rowNum && c == columnNum){\n                    ret = square;\n                }\n                c++;\n            }\n            r++;\n        }\n        return ret;\n    }\n//\u76e4\u9762\u304c\u30af\u30a4\u30fc\u30f3\u306e\u52b9\u304d\u7b4b\u304b\u3069\u3046\u304b\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    boolean getEffect(int rowNum, int columnNum){\n       boolean ret = false;\n        int c, r = 0;\n\n        for(List<Boolean> effectRow : queenEffect ) {\n            c = 0;\n            for (boolean effect :  effectRow) {\n                if(r == rowNum && c == columnNum){\n                    ret = effect;\n                }\n                c++;\n            }\n            r++;\n        }\n        return ret;\n    }\n//\u76e4\u9762\u306b\u99d2\u3092\u914d\u7f6e\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    void setSquare(int rowNum, int columnNum, Square value){\n        int c, r = 0;\n\n\n        for(List<Square> boardRow : board ) {\n            c = 0;\n            for (Square ignored : boardRow) {\n                if(r == rowNum && c == columnNum){\n                    boardRow.set(c , value);\n                }\n                c++;\n            }\n            r++;\n        }\n            calcEffect();//\u52b9\u304d\u7b4b\u3092\u90fd\u5ea6\u8a08\u7b97\n    }\n//\u52b9\u304d\u7b4b\u3092\u8a08\u7b97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    private void calcEffect(){\n\n        clearEffect();\n\n        for(int rowNum = 0 ; rowNum < queenNum ; rowNum++){\n            for(int columnNum = 0 ; columnNum < queenNum ; columnNum++){\n                if(getSquare(rowNum, columnNum).equals(Square.QUEEN)){\n                    int c,r = 0;\n\n                    for(List<Boolean> effectRow : queenEffect ) {\n                        c = 0;\n                        for (boolean ignored : effectRow) {\n                            if(r == rowNum || c == columnNum || r + c == rowNum + columnNum || c - r == columnNum -rowNum){\n                                effectRow.set(c , true);\n                            }\n                            c++;\n                        }\n                        r++;\n                    }\n                }\n            }\n        }\n    }\n//\u52b9\u304d\u7b4b\u60c5\u5831\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    private void clearEffect(){\n        queenEffect.clear();\n        for(int i = 0; i < queenNum ; i++) {\n            List<Boolean> effectRow = new ArrayList<>();\n            for (int j = 0; j < queenNum; j++) {\n\n                effectRow.add(false);\n            }\n\n            queenEffect.add(effectRow);\n        }\n    }\n//\u76e4\u9762\u72b6\u6cc1\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    void printBoard(){\n        for(List<Square> boardRow : board ) {\n\n            for (Square square : boardRow) {\n                if(square.equals(Square.QUEEN)){\n                    System.out.print(\"Q\");\n                }else if(square.equals((Square.NOTHING))){\n                    System.out.print(\".\");\n                }else{\n                    System.err.println(\"error\");\n                }\n\n            }\n            System.out.println();\n        }\n    }\n}\n"}
{"id": 2551, "language": "C++", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint isDivisibleBy3(int number)  // checks whether it is divisible by 3 or not\n{\n    if(number%3==0)\n    {\n        return 1;\n    }\n\n    return 0;\n}\n\nint isContain3(int number) //checks whether the input value contains 3 or not\n{\n\n    while(number)\n    {\n        int digit = number%10;\n        if(digit==3)\n            return 1;\n        number = number/10;\n    }\n\n    return 0;\n}\n\n\nint isValid(char* input) //checks whether the input value is valid or not\n{\n    int length = strlen(input);\n\n    for(int i = 0; i<length; i++)\n    {\n        if(isdigit(input[i]))  // checks the input value contains digit or not\n        {\n            return 1;\n        }\n    }\n\n\n    int number = atoi(input);\n    if(number<0 || number>1000)\n    {\n        return 0;\n    }\n\n    return 0;\n\n}\n\n\nint main(int argc, char *argv[])\n{\n    for (int i = 1; i < argc; i++)\n    {\n\n        if(isValid(argv[i]))\n        {\n\n            //cout << \"valid\" << endl;\n\n            int num = atoi(argv[i]);\n\n            if(isDivisibleBy3(num) && isContain3(num)){\n                cout << \"dumb\" << endl;\n                continue;\n            }\n\n            if(isDivisibleBy3(num)){\n                cout << \"idiot\" << endl;\n            }else if(isContain3(num)){\n                cout << \"stupid\" << endl;\n            }else{\n                cout << \"smart\" << endl;\n            }\n\n        }\n        else\n        {\n            cout<< \"invalid\" << endl;\n        }\n\n\n    }\n\n\n    return 0;\n}\n\n"}
{"id": 2552, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    int num = Integer.parseInt(args[0]);\n\n    int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    StringBuilder sb = new StringBuilder();\n\n    // \u5927\u304d\u3044\u6570\u5b57\u304b\u3089\u9806\u756a\u306b\u5909\u63db\u3057\u3066\u3044\u304f\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            sb.append(symbols[i]);\n            num -= values[i];\n        }\n    }\n\n    System.out.println(sb.toString());\n  }\n}"}
{"id": 2553, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// A simple structure to hold game records\ntypedef struct {\n    int robotPlay;\n    int yourPlay;\n} MatchResult;\n\n// Global array to track the cycle count for each state combination.\n// Key: (R3, R2, R1, O1) -> int index\n// Value: count of times this exact state has been encountered for a prediction.\nint stateOccurrenceCounts[81]; // 3^4 possible states\n\n// Maps the four parameters (robot's previous 3 hands, opponent's last hand)\n// to a unique index from 0 to 80.\nint getStateMapping(int r3, int r2, int r1, int o1) {\n    return r3 * 27 + r2 * 9 + r1 * 3 + o1;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <json_input_file>\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *inputFileHandle = fopen(argv[1], \"r\");\n    if (!inputFileHandle) {\n        perror(\"Could not open input file\");\n        return 1;\n    }\n\n    // Initialize all state counts to zero\n    memset(stateOccurrenceCounts, 0, sizeof(stateOccurrenceCounts));\n\n    // Robot's initial sequence of hands: Rock (0), Scissors (1), Paper (2)\n    int histRobot3 = 0;\n    int histRobot2 = 1;\n    int histRobot1 = 2;\n    // Opponent's last hand before the first game in the records (assuming Rock=0)\n    int histOpponent1 = 0;\n\n    char recordSegment[64]; // Buffer to hold a single {\"robot\":X,\"you\":Y} string\n    int currentBufferIndex = 0;\n    int inRecordFlag = 0; // 1 if currently reading inside a record {}\n\n    int character;\n    while ((character = fgetc(inputFileHandle)) != EOF) {\n        if (character == '{') {\n            inRecordFlag = 1;\n            currentBufferIndex = 0;\n            recordSegment[currentBufferIndex++] = character; // Start capturing the record\n        } else if (inRecordFlag) {\n            recordSegment[currentBufferIndex++] = character;\n            if (character == '}') {\n                recordSegment[currentBufferIndex] = '\\0'; // Null-terminate the captured string\n                inRecordFlag = 0; // End of current record\n\n                MatchResult currentMatch;\n                // Parse robot and you hands using sscanf\n                if (sscanf(recordSegment, \"{\\\"robot\\\":%d,\\\"you\\\":%d}\", &currentMatch.robotPlay, &currentMatch.yourPlay) == 2) {\n                    // Calculate the state index for the robot's decision made *before* this match\n                    int currentStateKey = getStateMapping(histRobot3, histRobot2, histRobot1, histOpponent1);\n                    \n                    // Increment the counter for this state. The robot's predicted hand for this state\n                    // would have been stateOccurrenceCounts[currentStateKey] % 3 *before* this increment.\n                    stateOccurrenceCounts[currentStateKey]++;\n\n                    // Update the robot's history for the *next* prediction\n                    histRobot3 = histRobot2;\n                    histRobot2 = histRobot1;\n                    histRobot1 = currentMatch.robotPlay; // Robot's hand played in this match\n                    \n                    // Update the opponent's last hand for the *next* prediction\n                    histOpponent1 = currentMatch.yourPlay; // Opponent's hand played in this match\n                }\n            }\n        }\n    }\n    fclose(inputFileHandle);\n\n    // After processing all historical records, determine the robot's next move\n    int finalStateKey = getStateMapping(histRobot3, histRobot2, histRobot1, histOpponent1);\n    int robotPredictedNextMove = stateOccurrenceCounts[finalStateKey] % 3;\n\n    // Calculate the hand that wins against the robot's predicted move\n    int winningHandForUs = (robotPredictedNextMove + 2) % 3;\n    printf(\"%d\\n\", winningHandForUs);\n\n    return 0;\n}"}
{"id": 2554, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class App {\n  public static void main(String[] args) throws IOException {\n    String command = args[0];\n    Path input = Path.of(args[1]);\n    Path output = Path.of(args[2]);\n\n    Solver solver = new Solver(input);\n\n    switch (command) {\n      case \"count\":\n        solver.processCount(output);\n        break;\n      case \"space\":\n        solver.processSpace(output);\n        break;\n      case \"decrypt\":\n        solver.processDecrypt(output);\n        break;\n    }\n  }\n}\n\nclass Solver {\n    private final String textContent;\n\n    public Solver(Path inputFile) throws IOException {\n        this.textContent = Files.readString(inputFile);\n    }\n\n    public void processCount(Path outputFile) throws IOException {\n        final String charset = \" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        Map<Character, Long> initialMap = charset.chars()\n                .mapToObj(c -> (char) c)\n                .collect(Collectors.toMap(c -> c, c -> 0L));\n        \n        textContent.chars()\n            .mapToObj(c -> (char) c)\n            .filter(initialMap::containsKey)\n            .forEach(c -> initialMap.merge(c, 1L, Long::sum));\n\n        String json = initialMap.entrySet().stream()\n                .sorted(Map.Entry.comparingByKey(Comparator.comparingInt(charset::indexOf)))\n                .map(e -> String.format(\"  \\\"%s\\\": %d\", e.getKey(), e.getValue()))\n                .collect(Collectors.joining(\",\\n\", \"{\\n\", \"\\n}\"));\n        Files.writeString(outputFile, json);\n    }\n\n    public void processSpace(Path outputFile) throws IOException {\n        char spaceChar = findSpaceSubstitute();\n        String json = String.format(\"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\", spaceChar);\n        Files.writeString(outputFile, json);\n    }\n\n    public void processDecrypt(Path outputFile) throws IOException {\n        char spaceSubstitute = findSpaceSubstitute();\n        String intermediate = swapSpaceAndSub(textContent, spaceSubstitute);\n        int shift = findCaesarShift(intermediate);\n        String decrypted = applyCaesarShift(intermediate, -shift);\n        Files.writeString(outputFile, decrypted);\n    }\n\n    private char findSpaceSubstitute() {\n        return IntStream.rangeClosed('a', 'z')\n            .mapToObj(c -> (char) c)\n            .min(Comparator.comparingDouble(this::calculateWordLengthMetric))\n            .orElse('?');\n    }\n\n    private double calculateWordLengthMetric(char candidate) {\n        String tempText = textContent.replace(candidate, ' ').replace(Character.toUpperCase(candidate), ' ');\n        tempText = tempText.replaceAll(\"[^a-zA-Z\\\\s]\", \" \");\n\n        String[] words = tempText.trim().split(\"\\\\s+\");\n        if (words.length == 0 || (words.length == 1 && words[0].isEmpty())) {\n            return Double.MAX_VALUE;\n        }\n\n        return Math.abs(Arrays.stream(words).mapToInt(String::length).average().orElse(0.0) - 4.5);\n    }\n\n    private String swapSpaceAndSub(String text, char substitute) {\n        StringBuilder sb = new StringBuilder();\n        char subUpper = Character.toUpperCase(substitute);\n        for (char c : text.toCharArray()) {\n            if (c == substitute || c == subUpper) {\n                sb.append(' ');\n            } else if (c == ' ') {\n                sb.append(substitute);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private int findCaesarShift(String text) {\n        return text.chars()\n            .filter(Character::isLetter)\n            .map(Character::toLowerCase)\n            .boxed()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet().stream()\n            .max(Map.Entry.comparingByValue())\n            .map(e -> (e.getKey() - 'e' + 26) % 26)\n            .orElse(0);\n    }\n\n    private String applyCaesarShift(String text, int shift) {\n        return text.chars().map(c -> {\n            if (c >= 'a' && c <= 'z') {\n                return 'a' + (c - 'a' + shift + 26) % 26;\n            } else if (c >= 'A' && c <= 'Z') {\n                return 'A' + (c - 'A' + shift + 26) % 26;\n            }\n            return c;\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n    }\n}"}
{"id": 2555, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib> // For strtol\n\n// Function to check if a number contains the digit '3'\nbool containsThree(int number) {\n    std::string s = std::to_string(number);\n    for (char c : s) {\n        if (c == '3') {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    // Process each command-line argument starting from the second one (argv[0] is the program name)\n    for (int i = 1; i < argc; ++i) {\n        long value;\n        char* end;\n        // Attempt to convert the argument to a long integer\n        value = std::strtol(argv[i], &end, 10);\n\n        // Check if the conversion was successful and the entire string was a valid number\n        if (*end != '\\0' || end == argv[i]) {\n            std::cout << \"invalid\\n\";\n            continue; // Move to the next argument\n        }\n\n        // Check if the number is within the valid range [0, 1000]\n        if (value < 0 || value > 1000) {\n            std::cout << \"invalid\\n\";\n            continue; // Move to the next argument\n        }\n\n        bool divisibleBy3 = (value % 3 == 0);\n        bool hasDigit3 = containsThree(static_cast<int>(value));\n\n        // Apply the 3 Idiots Algorithm rules\n        if (divisibleBy3 && hasDigit3) {\n            std::cout << \"dumb\\n\";\n        } else if (divisibleBy3) {\n            std::cout << \"idiot\\n\";\n        } else if (hasDigit3) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n\n    return 0;\n}\n"}
{"id": 2556, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for i in argv:\n    check_condition(i)\n\ndef check_condition(i):\n  valid_input = True\n  for character in i:\n    ordinal = ord(character)\n    if ordinal < ord(\"0\") or ordinal > ord(\"9\"):\n      valid_input = False\n  if not valid_input:\n    print(\"invalid\")\n  else:\n    a = int(i)%3==0\n    b = \"3\" in i\n    if int(i) <0 or int(i) >1000:\n      print(\"invalid\")\n    elif a and b:\n      print(\"dumb\")\n    elif a:\n      print(\"idiot\")\n    elif b:\n      print(\"stupid\")\n    elif not a and not b:\n      print(\"smart\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2557, "language": "Python3", "code": "import sys\n\ndef determine_idiocy(input_str_val):\n    if not input_str_val.isdigit(): return \"invalid\"\n    \n    num_val = int(input_str_val)\n    \n    if not (0 <= num_val <= 1000): return \"invalid\"\n\n    cond_div_3 = (num_val % 3 == 0)\n    cond_has_3 = ('3' in input_str_val)\n\n    if cond_div_3 and cond_has_3: return \"dumb\"\n    if cond_div_3: return \"idiot\"\n    if cond_has_3: return \"stupid\"\n    return \"smart\"\n\ndef main_loop_simple(args):\n    for item in args:\n        print(determine_idiocy(item))\n\nif __name__ == '__main__':\n    main_loop_simple(sys.argv[1:])"}
{"id": 2558, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <json/json.h> // Ensure you have the appropriate JSON library\nusing namespace std;\n\nstruct Game {\n    int robot;\n    int you;\n};\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        cerr << \"Usage: \" << argv[0] << \" <path to json file>\" << endl;\n        return 1; // \u6b63\u3057\u304f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\n    }\n\n    ifstream file(argv[1]);\n    if (!file.is_open()) {\n        cerr << \"Could not open the file: \" << argv[1] << endl;\n        return 1; // \u30d5\u30a1\u30a4\u30eb\u304c\u958b\u3051\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    }\n\n    Json::Value root;\n    file >> root; // JSON\u3092\u8aad\u307f\u8fbc\u3080\n    vector<Game> history;\n\n    for (const auto &entry : root) {\n        Game game;\n        game.robot = entry[\"robot\"].asInt();\n        game.you = entry[\"you\"].asInt();\n        history.push_back(game);\n    }\n\n    // \u76f4\u8fd13\u56de\u306e\u624b\u3092\u53d6\u5f97\n    int robotMoveCount = history.size();\n    if (robotMoveCount < 1) {\n        cerr << \"No game history available.\" << endl;\n        return 1; // \u5c65\u6b74\u304c\u306a\u3044\u5834\u5408\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    }\n\n    int lastRobotMove = history[robotMoveCount - 1].robot;\n    int lastOpponentMove = history[robotMoveCount - 1].you;\n\n    // \u30ed\u30dc\u30c3\u30c8\u306e\u73fe\u5728\u306e\u624b\u3068\u76f8\u624b\u306e\u624b\u3092\u3082\u3068\u306b\u6b21\u306e\u624b\u3092\u6c7a\u5b9a\n    static const int winningMoves[3] = {2, 0, 1}; // \u30d1\u30fc\u306f\u30b0\u30fc\u306b\u52dd\u3064\u3001\u30b0\u30fc\u306f\u30c1\u30e7\u30ad\u306b\u52dd\u3064\u3001\u30c1\u30e7\u30ad\u306f\u30d1\u30fc\u306b\u52dd\u3064\n    int nextMove = winningMoves[lastOpponentMove]; // \u76f8\u624b\u306e\u624b\u306b\u52dd\u3064\u624b\u3092\u9078\u3076\n\n    cout << nextMove << endl; // \u6b21\u306e\u624b\u3092\u51fa\u529b\n\n    return 0;\n}"}
{"id": 2559, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isDigitOnly(const string& str) {\n    for (char c : str) {\n        if (!isdigit(c)) return false; // Get only digits\n    }\n    return true;\n}\n\nvoid checkNumber(const string& numStr) {\n    if (!isDigitOnly(numStr)) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    int num = stoi(numStr);\n    if (num < 0 || num > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisibleByThree = (num % 3 == 0);\n    bool containsThree = (numStr.find('3') != string::npos);\n\n    if (divisibleByThree && containsThree) {\n        cout << \"dumb\" << endl;\n    } else if (divisibleByThree) {\n        cout << \"idiot\" << endl;\n    } else if (containsThree) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char* argv[]) {\n    // 3 Idiots Algorithm\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u8a55\u4fa1\u3002\n\n    for (int i = 1; i < argc; i++) {\n        checkNumber(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2560, "language": "Python3", "code": "import sys\nimport json\nimport string\n\ndef read_file(path):\n    with open(path, encoding='utf-8') as f:\n        return f.read()\n\ndef write_file(path, content):\n    with open(path, 'w', encoding='utf-8') as f:\n        f.write(content)\n\ndef write_json(path, obj):\n    with open(path, 'w', encoding='utf-8') as f:\n        json.dump(obj, f, ensure_ascii=False, indent=2)\n\ndef count_frequency(text):\n    chars = string.ascii_uppercase + string.ascii_lowercase + ' '\n    freq = {c:0 for c in chars}\n    for c in text:\n        if c in freq:\n            freq[c] += 1\n    return freq\n\ndef find_space_char(freq):\n    # The space char is substituted by a lowercase letter with highest frequency\n    # among letters (excluding original space)\n    freq_without_space = {k:v for k,v in freq.items() if k != ' '}\n    # find max frequency char which is lowercase\n    max_char = None\n    max_val = -1\n    for c in freq_without_space:\n        if c.islower() and freq_without_space[c] > max_val:\n            max_val = freq_without_space[c]\n            max_char = c\n    return max_char if max_char else ''\n\ndef decrypt_text(text, space_char):\n    # Replace space_char with space\n    text_with_spaces = text.replace(space_char, ' ')\n\n    # Count frequency of letters (ignore case)\n    counts = {}\n    for c in text_with_spaces:\n        if c.isalpha():\n            c_low = c.lower()\n            counts[c_low] = counts.get(c_low, 0) + 1\n    if not counts:\n        shift = 0\n    else:\n        most_common_char = max(counts.items(), key=lambda x: x[1])[0]\n        # Calculate shift assuming most common letter maps to 'e'\n        # shift = (most_common_char - 'e') mod 26\n        shift = (ord(most_common_char) - ord('e')) % 26\n\n    def unshift_char(c):\n        if c.isalpha():\n            base = ord('A') if c.isupper() else ord('a')\n            pos = ord(c) - base\n            new_pos = (pos - shift) % 26\n            return chr(base + new_pos)\n        else:\n            return c\n\n    # decrypt text\n    decrypted = ''.join(unshift_char(c) if c != '\\n' else c for c in text_with_spaces)\n    return decrypted\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n\n    src = read_file(input_file)\n\n    if command == 'count':\n        frequency = count_frequency(src)\n        write_json(output_file, frequency)\n\n    elif command == 'space':\n        frequency = count_frequency(src)\n        space_c = find_space_char(frequency)\n        write_json(output_file, {\"char\": space_c})\n\n    elif command == 'decrypt':\n        frequency = count_frequency(src)\n        space_c = find_space_char(frequency)\n        decrypted = decrypt_text(src, space_c)\n        write_file(output_file, decrypted)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2561, "language": "Python3", "code": "import sys\n\ndef process_idiot(n):\n    if not n.isdigit():\n        return \"invalid\"\n    v = int(n)\n    if v < 0 or v > 1000:\n        return \"invalid\"\n    if v % 3 == 0 and \"3\" in n:\n        return \"dumb\"\n    elif v % 3 == 0:\n        return \"idiot\"\n    elif \"3\" in n:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    for element in argv:\n        print(process_idiot(element))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2562, "language": "Python3", "code": "import sys\n\ndef do_the_thing(s):\n    if not s.isdigit(): return \"invalid\"\n    num_val = int(s)\n    if not (0 <= num_val <= 1000): return \"invalid\"\n    \n    d = num_val % 3 == 0\n    c = '3' in s\n    \n    if d:\n        if c:\n            return \"dumb\"\n        else:\n            return \"idiot\"\n    else:\n        if c:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\ndef main(argv):\n    for i in range(len(argv)):\n        arg = argv[i]\n        result = do_the_thing(arg)\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2563, "language": "C#", "code": "using System;\n\npublic class IdiotsChecker\n{\n    static bool ContainsThree(string s)\n    {\n        return s.Contains('3');\n    }\n\n    static void Main(string[] args)\n    {\n        foreach (var arg in args)\n        {\n            int n;\n            bool isNumber = int.TryParse(arg, out n);\n\n            if (!isNumber)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            if (n < 0 || n > 1000)\n            {\n                Console.WriteLine(\"invalid\");\n                continue;\n            }\n\n            bool divBy3 = (n % 3 == 0);\n            bool has3 = ContainsThree(arg);\n\n            if (divBy3 && has3)\n                Console.WriteLine(\"dumb\");\n            else if (divBy3)\n                Console.WriteLine(\"idiot\");\n            else if (has3)\n                Console.WriteLine(\"stupid\");\n            else\n                Console.WriteLine(\"smart\");\n        }\n    }\n}"}
{"id": 2564, "language": "C", "code": "#include <stdio.h>\nint check_includes_3(int tempvar)   //function to check if the number includes 3\n{\n  int number_check;\n  while(tempvar)\n  {\n    number_check=tempvar%10;\n    if(number_check==3)\n     return 1;                         // return true if the number includes 3\n    tempvar=tempvar/10;\n  }\n  return 0;                            // return false if the number does not includes 3\n}\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) \n  {\n    if(atoi(argv[i]))                   // enters only if the argument contains a numeric\n    {\n       int tempvar=atoi(argv[i]);       // converting character into string and assigning in tempvar\n       if(tempvar>=0 && tempvar<=1000)  // checks if the input is between 0 and 1000\n       {\n          if(tempvar%3==0)              // checks if input number is divisible by 3\n          {\n            if(check_includes_3(tempvar)) // checks wheather the number includes 3\n              printf(\"dumb\\n\");           // if divisible by 3 and includes 3 prints \"dumb\"\n            else\n              printf(\"idiot\\n\");          // if divisible by 3 but does not includes 3 prints \"idiot\"\n          }\n          else if(tempvar%3!=0)          // checks if input number not divisible by 3\n          {\n             if(check_includes_3(tempvar))\n               printf(\"stupid\\n\");\n             else\n               printf(\"smart\\n\");\n          }\n          else\n            printf(\"smart\\n\");\n       }\n       else\n        printf(\"invalid\\n\");\n    }\n    else\n      printf(\"invalid\\n\");\n  }\n    return 0;\n}\n"}
{"id": 2565, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u5165\u529b\u306e\u8aad\u307f\u8fbc\u307f\n    lines = sys.stdin.read().splitlines()\n    k = int(lines[0])\n    queens = []\n    rows_used = set()\n    cols_used = set()\n    diag1_used = set()\n    diag2_used = set()\n    board = [['.'] * 8 for _ in range(8)]\n\n    for i in range(1, k+1):\n        r, c = map(int, lines[i].split())\n        queens.append((r, c))\n        rows_used.add(r)\n        cols_used.add(c)\n        diag1_used.add(r-c)\n        diag2_used.add(r+c)\n        board[r][c] = 'Q'\n\n    def solve(row):\n        if row == 8:\n            return True\n        if row in rows_used:\n            return solve(row+1)\n        for col in range(8):\n            if col in cols_used or (row-col) in diag1_used or (row+col) in diag2_used:\n                continue\n            board[row][col] = 'Q'\n            cols_used.add(col)\n            diag1_used.add(row-col)\n            diag2_used.add(row+col)\n            if solve(row+1):\n                return True\n            board[row][col] = '.'\n            cols_used.remove(col)\n            diag1_used.remove(row-col)\n            diag2_used.remove(row+col)\n        return False\n\n    solve(0)\n    for row in board:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2566, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u30c1\u30a7\u30c3\u30af\n  if (argc != 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  int upperLimit = atoi(argv[1]);\n  if (upperLimit < 0 || upperLimit > 10000) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n\n  srand((unsigned)time(NULL)); // \u4e71\u6570\u306e\u521d\u671f\u5316\n  char log[10000];\n  int count = 0;\n  const char *target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n\n  for (int j = 0; j < upperLimit; j++) {\n    char note = (rand() % 2) == 0 ? '\u30c9' : '\u30ab';\n    printf(\"%c\\n\", note);\n    log[count++] = note;\n\n    // \u30d1\u30bf\u30fc\u30f3\u3092\u78ba\u8a8d\n    if (count >= 10) {\n      if (strncmp(&log[count - 10], target, 10) == 0) {\n        printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0;\n      }\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 2567, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for value in argv:\n        if not value.isdigit() or not (0 <= int(value) <= 1000):\n            print(\"invalid\")\n            continue\n        \n        number = int(value)\n        is_multiple_of_three = (number % 3 == 0)\n        contains_three = ('3' in value)\n        \n        if is_multiple_of_three and contains_three:\n            print(\"dumb\")\n        elif is_multiple_of_three:\n            print(\"idiot\")\n        elif contains_three:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2568, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib> // For std::strtol\n\n// Function to determine the output string based on the 3 Idiots Algorithm\nstd::string getAlgorithmOutput(int number_input) {\n    if (number_input < 0 || number_input > 1000) {\n        return \"invalid\";\n    }\n\n    bool is_div_by_3 = (number_input % 3 == 0);\n    std::string str_num = std::to_string(number_input);\n    bool contains_digit_3 = (str_num.find('3') != std::string::npos);\n\n    if (is_div_by_3 && contains_digit_3) {\n        return \"dumb\";\n    } else if (is_div_by_3) {\n        return \"idiot\";\n    } else if (contains_digit_3) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // This solution directly processes and prints results without intermediate storage.\n    for (int i = 1; i < argc; ++i) {\n        long temp_val;\n        char* parse_end_ptr;\n        temp_val = std::strtol(argv[i], &parse_end_ptr, 10);\n\n        // Check if parsing failed or if there are leftover characters\n        if (*parse_end_ptr != '\\0' || parse_end_ptr == argv[i]) {\n            std::cout << \"invalid\\n\";\n        } else {\n            // Call the function with the parsed integer (after validation)\n            std::cout << getAlgorithmOutput(static_cast<int>(temp_val)) << \"\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 2569, "language": "Python3", "code": "import sys\nimport json\nfrom collections import deque, defaultdict\n\nclass RobotBehaviorPredictor:\n    \"\"\"Encapsulates the logic for predicting the robot's next move.\"\"\"\n\n    def __init__(self):\n        # Initialize robot's internal memory of its last three hands.\n        self.past_robot_moves = deque([0, 1, 2])\n        # Initialize the opponent's last recorded hand.\n        self.last_opponent_move = 0 \n        # Map states (tuple of 4 hands) to the number of times they've occurred.\n        self.state_history_counter = defaultdict(int)\n\n    def process_game_record(self, robot_played, you_played):\n        \"\"\"Processes a single game record to update the predictor's state.\"\"\"\n        # Form the state tuple for the robot's decision in this game.\n        current_decision_state = tuple(list(self.past_robot_moves) + [self.last_opponent_move])\n        \n        # Increment the count for this state; this determines what the robot *would* play next for this state.\n        self.state_history_counter[current_decision_state] += 1\n        \n        # Update the robot's past moves with the actual move it just made.\n        self.past_robot_moves.popleft()\n        self.past_robot_moves.append(robot_played)\n        \n        # Update the opponent's last move.\n        self.last_opponent_move = you_played\n\n    def predict_robot_next_move(self):\n        \"\"\"Predicts what the robot will play in the next match.\"\"\"\n        # The state for the upcoming move is based on the current memory.\n        next_decision_state = tuple(list(self.past_robot_moves) + [self.last_opponent_move])\n        \n        # Get the current count for this state.\n        current_state_count = self.state_history_counter[next_decision_state]\n        \n        # The robot cycles through 0, 1, 2 based on the count.\n        predicted_move = current_state_count % 3\n        return predicted_move\n\ndef determine_winning_hand(against_hand):\n    \"\"\"Returns the hand that wins against the given hand.\"\"\"\n    # 0 (Rock) > 1 (Scissors), 1 (Scissors) > 2 (Paper), 2 (Paper) > 0 (Rock)\n    return (against_hand + 2) % 3\n\ndef main(cli_args):\n    # Entry point for the CLI application.\n    input_file_path = cli_args[0]\n    \n    with open(input_file_path, 'r') as f:\n        game_records = json.load(f)\n\n    predictor = RobotBehaviorPredictor()\n\n    for record in game_records:\n        predictor.process_game_record(record[\"robot\"], record[\"you\"])\n\n    # Get the robot's predicted hand for the next game.\n    robots_next_move = predictor.predict_robot_next_move()\n    \n    # Output the hand that wins against the robot's predicted move.\n    print(determine_winning_hand(robots_next_move))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2570, "language": "Java", "code": "package rot13cli;\n\npublic class Cipher {\n  public static void main(String[] args) {\n    for (String txt : args) {\n      System.out.println(encRot13(txt));\n    }\n  }\n\n  public static String encRot13(String input) {\n    StringBuilder out = new StringBuilder();\n    for (char ch : input.toCharArray()) {\n      if (ch >= 'A' && ch <= 'Z') {\n        char c = (char)(ch + 13);\n        if (c > 'Z') c -= 26;\n        out.append(c);\n      } else if (ch >= 'a' && ch <= 'z') {\n        char c = (char)(ch + 13);\n        if (c > 'z') c -= 26;\n        out.append(c);\n      } else {\n        out.append(ch);\n      }\n    }\n    return out.toString();\n  }\n}"}
{"id": 2571, "language": "Python3", "code": "import sys\n\ndef check_idiot_condition_v2(str_representation):\n    if not str_representation.isdigit():\n        return \"invalid\"\n    \n    int_value = int(str_representation)\n    \n    if not (0 <= int_value <= 1000):\n        return \"invalid\"\n\n    is_mult_of_3 = (int_value % 3 == 0)\n    has_digit_three = ('3' in str_representation)\n\n    if is_mult_of_3 and has_digit_three:\n        return \"dumb\"\n    elif is_mult_of_3:\n        return \"idiot\"\n    elif has_digit_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef start_processing_v2(input_list):\n    for current_input in input_list:\n        print(check_idiot_condition_v2(current_input))\n\nif __name__ == '__main__':\n    start_processing_v2(sys.argv[1:])"}
{"id": 2572, "language": "Python3", "code": "import sys\n\ndef process_value(value):\n    if not value.isdigit():\n       return \"invalid\"\n        \n    num = int(value)\n\n    if num < 0 or num > 1000:\n        return \"invalid\"\n        \n    if num % 3 == 0 and '3' in value:\n        return \"dumb\"\n    elif num % 3 == 0:\n        return \"idiot\"\n    elif '3' in value:\n        return \"stupid\"\n    \n    return \"smart\"\n\ndef main(argv):\n    # Execute the main program logic for the 3 Idiots classification.\n    results = []\n    \n    for arg in argv:\n        results.append(process_value(arg))\n        \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2573, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class App {\n\n  // \u30c1\u30a7\u30b9\u76e4\u306e\u30b5\u30a4\u30ba\n  private static final int BOARD_SIZE = 8;\n  // \u7d50\u679c\u3092\u4fdd\u6301\u3059\u308b\u30dc\u30fc\u30c9\n  private static char[][] board;\n\n  // \u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\n  // \u73fe\u5728\u306e\u884c\u3068\u5217\u306b\u30af\u30a4\u30fc\u30f3\u3092\u7f6e\u304f\u5834\u5408\u3001\u4ee5\u524d\u306b\u7f6e\u304b\u308c\u305f\u30af\u30a4\u30fc\u30f3\u3068\u885d\u7a81\u3057\u306a\u3044\u304b\u78ba\u8a8d\n  private static boolean isValid(int r, int c) {\n    // \u540c\u3058\u5217\u306b\u30af\u30a4\u30fc\u30f3\u304c\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n    for (int i = 0; i < r; i++) {\n      if (board[i][c] == 'Q') {\n        return false;\n      }\n    }\n\n    // \u5de6\u4e0a\u304b\u3089\u53f3\u4e0b\u3078\u306e\u5bfe\u89d2\u7dda\u3092\u30c1\u30a7\u30c3\u30af\n    for (int i = r, j = c; i >= 0 && j >= 0; i--, j--) {\n      if (board[i][j] == 'Q') {\n        return false;\n      }\n    }\n\n    // \u53f3\u4e0a\u304b\u3089\u5de6\u4e0b\u3078\u306e\u5bfe\u89d2\u7dda\u3092\u30c1\u30a7\u30c3\u30af\n    for (int i = r, j = c; i >= 0 && j < BOARD_SIZE; i--, j++) {\n      if (board[i][j] == 'Q') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // 8\u30af\u30a4\u30fc\u30f3\u554f\u984c\u3092\u89e3\u304f\u518d\u5e30\u95a2\u6570\n  // r: \u73fe\u5728\u914d\u7f6e\u3092\u8a66\u307f\u308b\u884c\n  private static boolean solveEightQueens(int r) {\n    // \u3059\u3079\u3066\u306e\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u7d42\u3048\u305f\u3089\u6210\u529f\n    if (r == BOARD_SIZE) {\n      return true;\n    }\n\n    // \u3053\u306e\u884c\u306b\u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u5834\u5408\uff08\u4e8b\u524d\u914d\u7f6e\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\uff09\n    boolean fixedQueenInRow = false;\n    for (int c = 0; c < BOARD_SIZE; c++) {\n      if (board[r][c] == 'Q') {\n        fixedQueenInRow = true;\n        break;\n      }\n    }\n\n    if (fixedQueenInRow) {\n      // \u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u3042\u308b\u306e\u3067\u3001\u6b21\u306e\u884c\u3078\u9032\u3080\n      return solveEightQueens(r + 1);\n    } else {\n      // \u3053\u306e\u884c\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3059\u308b\u5834\u6240\u3092\u63a2\u3059\n      for (int c = 0; c < BOARD_SIZE; c++) {\n        if (isValid(r, c)) {\n          board[r][c] = 'Q'; // \u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\n          if (solveEightQueens(r + 1)) { // \u6b21\u306e\u884c\u3092\u8a66\u3059\n            return true;\n          }\n          board[r][c] = '.'; // \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\uff08\u30af\u30a4\u30fc\u30f3\u3092\u53d6\u308a\u9664\u304f\uff09\n        }\n      }\n    }\n\n    return false; // \u3053\u306e\u884c\u3067\u306f\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u306a\u3044\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int k = scanner.nextInt();\n\n    board = new char[BOARD_SIZE][BOARD_SIZE];\n    for (int i = 0; i < BOARD_SIZE; i++) {\n      for (int j = 0; j < BOARD_SIZE; j++) {\n        board[i][j] = '.'; // \u521d\u671f\u5316\n      }\n    }\n\n    // \u4e8b\u524d\u914d\u7f6e\u3055\u308c\u305f\u30af\u30a4\u30fc\u30f3\u3092\u30bb\u30c3\u30c8\n    for (int i = 0; i < k; i++) {\n      int r = scanner.nextInt();\n      int c = scanner.nextInt();\n      board[r][c] = 'Q';\n    }\n    scanner.close();\n\n    // \u554f\u984c\u3092\u89e3\u304f\n    solveEightQueens(0);\n\n    // \u7d50\u679c\u3092\u51fa\u529b\n    for (int i = 0; i < BOARD_SIZE; i++) {\n      System.out.println(new String(board[i]));\n    }\n  }\n}"}
{"id": 2574, "language": "C++", "code": "#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <string>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  // \u5f15\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u6574\u6570\u306e\u6700\u5927\u4e0a\u9650\u3092\u53d6\u5f97\u3059\u308b\n  if (argc != 2) {\n    cout << \"\u5f15\u6570\u306f\u4e00\u3064\u3060\u3051\u5fc5\u8981\u3067\u3059\u3002\" << endl;\n    return 1;\n  }\n\n  int limit = atoi(argv[1]);\n  if (limit < 0 || limit > 10000) {\n    cout << \"0\u304b\u308910000\u306e\u7bc4\u56f2\u5185\u306e\u6574\u6570\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" << endl;\n    return 1;\n  }\n\n  srand(static_cast<unsigned>(time(0))); // \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u521d\u671f\u5316\n  string output;\n  \n  for (int i = 0; i < limit; i++) {\n    // \"\u30c9\"\u304b\"\u30ab\"\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3076\n    char sound = (rand() % 2) ? '\u30c9' : '\u30ab';\n    output += sound;\n    \n    cout << sound << endl;\n\n    // \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\u306e\u30c1\u30a7\u30c3\u30af\n    if (output.find(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") != string::npos) {\n      cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n      return 0; // \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\n    }\n  }\n\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl; // \u4e0a\u9650\u56de\u6570\u306b\u9054\u3057\u3066\u3082\u51fa\u73fe\u3057\u306a\u304b\u3063\u305f\u5834\u5408\n  return 0;\n}"}
{"id": 2575, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\n\nint main(int argc, char *argv[])\n{\n  int i,a,r,n,count;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for(i=1;i<argc;i++)\n  {\n    int count=0;\n    a=atoi(argv[i]);\n    n=a;\n  if(isdigit(a)==0)\n  {\n  if(a>0&&a<=1000)\n  {\n  while(n>0)\n  {\n    r=n%10;\n    if(r==3)\n    {\n      count++;\n    }\n    n=n/10;\n  }\n  if(a%3==0 && count==0)\n  printf(\"idiot\\n\");\n  else if(a%3!=0 && count!=0)\n  printf(\"stupid\\n\");\n  else if(a%3==0 && count!=0)\n  printf(\"dumb\\n\");\n  else if(a%3!=0&&count==0)\n  printf(\"smart\\n\");\n  else\n  printf(\"invalid input\\n\");\n  }\n  }\n  else\n  printf(\"invalid input\\n\");\n  }\n  return 0;\n}\n"}
{"id": 2576, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n  static void Main(string[] arguments)\n  {\n      for (int i = 0; i < arguments.Length; i++)\n      {\n                string input = arguments[i];\n                string output = ThriIdiAlgo(input);\n                Console.WriteLine(output);\n      }\n  }\n\n  private static string ThriIdiAlgo(string input){\n\n            string stdout = \"Null\";\n            int inputNumber;\n            bool isNumeric = Int32.TryParse(input, out inputNumber);\n            int digit = 3;\n\n            if (isNumeric == true)\n            {\n                if (0 <= inputNumber && inputNumber <= 1000)\n                {\n                    if (inputNumber % 3 == 0 && inputNumber.ToString().Contains(digit.ToString()))\n                    {\n                        stdout = \"dumb\";\n                    }\n                    else if (inputNumber % 3 == 0)\n                    {\n                        stdout = \"idiot\";\n                    }\n                    else if (inputNumber.ToString().Contains(digit.ToString()))\n                    {\n                        stdout = \"stupid\";\n                    }\n                    else\n                    {\n                        stdout = \"smart\";\n                    }\n                }\n            }\n            else\n            {\n                stdout = \"invalid\";\n            }\n\n            return stdout;\n    }\n}\n"}
{"id": 2577, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t //System.out.println(output);\n       if(args[i].matches(\"[0-9]+\")){\nint r =0;\n        boolean t = false;        \n        int number = Integer.parseInt(args[i]);\n        int num = number;\n      if(0<=number && number<=1000){\n         while (num>0){\n            r = num%10;\n            num = num/10;\n            if(r==3){\n                t=true;\n            }\n         }\n        if(number%3 == 0){\n           if(t){\n               System.out.println(\"dumb\");\n           }else{\n               System.out.println(\"idiot\");\n           }\n        }else if(t){\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n      }else{\n        System.out.println(\"invalid\");\n      }\n      \n       } else{\n         System.out.println(\"invalid\");\n       }\n        \n\t\t}\n\t}\n}\n"}
{"id": 2578, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint check_three(const char *s) {\n  for (int i=0; s[i]!='\\0'; i++) {\n    if(s[i]=='3') return 1;\n  }\n  return 0;\n}\n\nint numeric_only(const char *s) {\n  if (*s == '\\0') return 0;\n  for(int i=0; s[i]!='\\0'; i++) {\n    if (!isdigit((unsigned char)s[i])) return 0;\n  }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; i++) {\n    if (!numeric_only(argv[i])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int val = atoi(argv[i]);\n    if(val < 0 || val > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int div3 = (val%3)==0;\n    int has3 = check_three(argv[i]);\n    if(div3 && has3) puts(\"dumb\");\n    else if(div3) puts(\"idiot\");\n    else if(has3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 2579, "language": "Python", "code": "import sys\nargs=sys.argv[1:]\ndef verify(a):\n  if not a.isdigit():\n    return False\n  if int(a)>1000 or int(a)<0:\n    return False\n  return True\ndef output(a):\n  b=False\n  c=False\n  num=int(a)\n  if num%3==0:\n    c=True\n  if '3' in a:\n    b=True\n  if b and c:\n    print \"dumb\"\n  elif b:\n    print \"stupid\"\n  elif c:\n    print \"idiot\"\n  else:\n    print \"smart\"\nfor arg in args:\n  if verify(arg):\n    output(arg)\n  else:\n    print(\"invalid\")"}
{"id": 2580, "language": "Python3", "code": "import sys\n\ndef three_judge(x):\n    if not x.isdigit():\n        return 'invalid'\n    xx = int(x)\n    if xx < 0 or xx > 1000:\n        return 'invalid'\n    m3 = (xx % 3 == 0)\n    i3 = ('3' in x)\n    if m3 and i3:\n        return 'dumb'\n    elif m3:\n        return 'idiot'\n    elif i3:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(argv):\n    for k in argv:\n        print(three_judge(k))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2581, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  $sound = array(\"\u30c9\", \"\u30ab\");\n  $patern = \"/\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab/\";\n  foreach ($argv as $index=>$value) {\n    $hits = \"\";\n    if($value == 0) {\n      printf(\"%s\\n\", \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    } else {\n      for($i = 0; $i < $value; $i++) {\n        $hit = $sound[array_rand($sound)];\n        printf(\"%s\\n\", $hit);\n        $hits .= $hit;\n        if(preg_match($patern, $hits) == 1) {\n          printf(\"%s\\n\", \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          break;\n        }\n        if($i == $value - 1) {\n          printf(\"%s\\n\", \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n          break;\n        }\n      }\n    }\n    // printf(\"argv[%s]: %s\\n\", $index, $value);\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 2582, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class JudgeNumber {\n\n  private static String getVerdict(int number) {\n    if (number < 0 || number > 1000) {\n      return \"invalid\";\n    }\n\n    boolean isDivisibleBy3 = (number % 3 == 0);\n    boolean includesDigit3 = String.valueOf(number).contains(\"3\");\n\n    if (isDivisibleBy3 && includesDigit3) {\n      return \"dumb\";\n    } else if (isDivisibleBy3) {\n      return \"idiot\";\n    } else if (includesDigit3) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      Scanner scanner = new Scanner(arg);\n      if (scanner.hasNextInt()) {\n        System.out.println(getVerdict(scanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      scanner.close();\n    }\n  }\n}"}
{"id": 2583, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n\n    int max_plays = atoi(argv[1]);\n    \n    srand(time(NULL));\n\n    const char* taiko_sounds[2] = {\"\u30c9\", \"\u30ab\"};\n    const int target_pattern[] = {0, 1, 0, 0, 1, 0, 1, 0, 1}; // 0:\u30c9, 1:\u30ab\n    const int pattern_size = 9;\n    \n    int play_history[pattern_size];\n    for (int i = 0; i < pattern_size; i++) {\n        play_history[i] = -1;\n    }\n\n    for (int count = 0; count < max_plays; count++) {\n        int current_play = rand() % 2;\n        printf(\"%s\\n\", taiko_sounds[current_play]);\n\n        // \u5c65\u6b74\u3092\u4e00\u3064\u305a\u3089\u3059\n        for (int i = 0; i < pattern_size - 1; i++) {\n            play_history[i] = play_history[i+1];\n        }\n        play_history[pattern_size - 1] = current_play;\n\n        if (count >= pattern_size - 1) {\n            int is_match = 1;\n            for (int i = 0; i < pattern_size; i++) {\n                if (play_history[i] != target_pattern[i]) {\n                    is_match = 0;\n                    break;\n                }\n            }\n            if (is_match) {\n                printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n                return 0;\n            }\n        }\n    }\n\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n}"}
{"id": 2584, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <string>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\n// count\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nvoid count_alpha_space(const char *infile, const char *outfile) {\n    ifstream fin(infile);\n    map<char, int> m;\n    char c;\n    while (fin.get(c)) {\n        if (isalpha(c) || c==' ') m[c]++;\n    }\n    fin.close();\n    ofstream fout(outfile);\n    fout << \"{\\n\";\n    bool first = true;\n    for (auto &pair : m) {\n        if (!first) fout << \",\\n\";\n        first = false;\n        fout << \"  \\\"\" << pair.first << \"\\\": \" << pair.second;\n    }\n    fout << \"\\n}\\n\";\n    fout.close();\n}\n\n// space\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nvoid find_space_char(const char *infile, const char *outfile) {\n    map<char, int> freq;\n    ifstream fin(infile);\n    char c;\n    while (fin.get(c)) if (isalpha(c)) freq[c]++;\n    fin.close();\n    char maxc = 0;\n    int maxf = 0;\n    for (auto &x : freq) {\n        if (x.second > maxf) maxf = x.second, maxc = x.first;\n    }\n    ofstream fout(outfile);\n    fout << \"{\\n  \\\"char\\\": \\\"\" << maxc << \"\\\"\\n}\\n\";\n    fout.close();\n}\n\n// decrypt\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\nstring swap_spaces(const string &x, char sc) {\n    string ret = x;\n    for (size_t i=0; i<ret.size(); ++i) {\n        if (ret[i]==sc) ret[i]=' ';\n        else if (ret[i]==' ') ret[i]=sc;\n    }\n    return ret;\n}\n\nint get_shift(const string &text) {\n    int cnt[26] = {};\n    for (char c : text) if (islower(c)) cnt[c-'a']++;\n    int mx=0, id=0;\n    for (int i=0; i<26; ++i) {\n        if (cnt[i]>mx) mx=cnt[i], id=i;\n    }\n    // 'e'\u3092\u6700\u983b\u51fa\u306b\u3042\u3066\u308b\n    return (id - ('e'-'a') + 26) % 26;\n}\n\nvoid decrypt_text(const char *infile, const char *outfile) {\n    ifstream fin(infile);\n    string s((istreambuf_iterator<char>(fin)), istreambuf_iterator<char>());\n    fin.close();\n\n    int freq[128] = {};\n    for (char c : s) if (isalpha(c)) freq[(int)c]++;\n    char subst=0; int mx=0;\n    for (int i='a'; i<='z'; ++i) {\n        if (freq[i]>mx) mx=freq[i], subst=i;\n    }\n    string s2 = swap_spaces(s, subst);\n    int sh = get_shift(s2);\n\n    string dec;\n    for (char c : s2) {\n        if (islower(c)) dec += (c-'a'-sh+26)%26 + 'a';\n        else if (isupper(c)) dec += (c-'A'-sh+26)%26 + 'A';\n        else dec += c;\n    }\n    ofstream fout(outfile);\n    fout << dec;\n    fout.close();\n}\n\nint main(int argc, char *argv[]) {\n    string cmd(argv[1]);\n    if (cmd == \"count\") count_alpha_space(argv[2], argv[3]);\n    else if (cmd == \"space\") find_space_char(argv[2], argv[3]);\n    else if (cmd == \"decrypt\") decrypt_text(argv[2], argv[3]);\n    return 0;\n}"}
{"id": 2585, "language": "Python3", "code": "import sys\n\ndef solve(r, p, col_u, d1_u, d2_u, f_r):\n    if r == 8:\n        for c_pos in p:\n            print(''.join(['Q' if i == c_pos else '.' for i in range(8)]))\n        return True\n    \n    if r in f_r:\n        return solve(r + 1, p, col_u, d1_u, d2_u, f_r)\n\n    for c in range(8):\n        if not (col_u & (1 << c) or d1_u & (1 << (r-c+7)) or d2_u & (1 << (r+c))):\n            p[r] = c\n            if solve(r + 1, p, col_u | (1<<c), d1_u | (1<<(r-c+7)), d2_u | (1<<(r+c)), f_r):\n                return True\n    return False\n\ndef main(argv):\n    stdin_lines = sys.stdin.readlines()\n    k = int(stdin_lines[0])\n    fixed_config = {}\n    \n    cu, d1u, d2u = 0, 0, 0\n    pos = [-1] * 8\n    \n    for i in range(1, k + 1):\n        r, c = map(int, stdin_lines[i].split())\n        fixed_config[r] = c\n        pos[r] = c\n        cu |= (1 << c)\n        d1u |= (1 << (r - c + 7))\n        d2u |= (1 << (r + c))\n    \n    solve(0, pos, cu, d1u, d2u, fixed_config.keys())\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2586, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nbool check(int a[][8])\n{\n  int ctr;\n  for(int i=0;i<8;i++)    //row\n  {\n    ctr=0;\n    for(int j=0;j<8;j++)\n    {\n      if(a[i][j])\n      ctr++;\n    }\n    if(ctr!=1)\n    return false;\n  }\n\n  for(int i=0;i<8;i++)    //column\n  {\n    ctr=0;\n    for(int j=0;j<8;j++)\n    {\n      if(a[j][i])\n      ctr++;\n    }\n    if(ctr!=1)\n    return false;\n  }\n\nint k=0;\n  for(int i=0;i<8;i++)   //main diag1\n  {\n    ctr=0;\n    for(int j=0;i+j<8;j++)\n    {\n      if(a[k+j][i+j])\n      ctr++;\n    }\n    if(ctr>1)\n    return false;\n  }\n\n  k=0;\n  for(int i=0;i<8;i++)    //main diag2\n  {\n    ctr=0;\n    for(int j=0;i+j<8;j++)\n    {\n      if(a[i+j][k+j])\n      ctr++;\n    }\n    if(ctr>1)\n    return false;\n  }\n\n  k=0;\n  for(int i=0;i<8;i++)   //other diag1\n  {\n    ctr=0;\n    for(int j=0;i-j>=0;j++)\n    {\n      if(a[k+j][i-j])\n      ctr++;\n    }\n    if(ctr>1)\n    return false;\n  }\n\n  k=7;\n  for(int i=0;i<8;i++)   //other diag2\n  {\n    ctr=0;\n    for(int j=0;i+j<8;j++)\n    {\n      if(a[i+j][k-j])\n      ctr++;\n    }\n    if(ctr>1)\n    return false;\n  }\nreturn true;\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  FILE *fp;\n  char str[10];\n  //cout<<\"To\"<<endl;\n  fp = fopen(argv[1], \"r\");\n  if (fp == NULL) {\n    printf(\"%s file not open!\\n\", argv[1]);\n    return -1;\n  }\n\n  int ctr=0;\n  int arr[8][8]={0}, ar[8][8]={0};\n  while (fgets(str, 10, fp) != NULL) {\n    if(ctr==0)\n    {\n      int sz=int(str[0]);\n      //cout<<str<<endl;\n      ctr++;\n    }\n    else\n    {\n      int r=int(str[0]-48);\n      int k=int(str[2]-48);\n      arr[r][k]=1;\n      ar[r][k]=1;\n      ctr++;\n    }\n  }\n\n  fclose(fp);  // Close the file\n  \n  int flag=0;\n  for(int a=0;a<8;a++){\n    for(int b=0;b<8;b++){\n    for(int c=0;c<8;c++){\n    for(int d=0;d<8;d++){\n    for(int e=0;e<8;e++){\n    for(int f=0;f<8;f++){\n    for(int g=0;g<8;g++){\n    for(int h=0;h<8;h++){\n    arr[a][0]=1; arr[b][1]=1; arr[c][2]=1; arr[d][3]=1;  //assigning 8 values randomly\n    arr[e][4]=1; arr[f][5]=1; arr[g][6]=1; arr[h][7]=1;\n    if(check(arr))       //check if board is valid\n    {\n      flag=1;\n      break;\n    }\n    arr[a][0]=ar[a][0]; arr[b][1]=ar[b][1]; arr[c][2]=ar[c][2]; arr[d][3]=ar[d][3];\n    arr[e][4]=ar[e][4]; arr[f][5]=ar[f][5]; arr[g][6]=ar[g][6]; arr[h][7]=ar[h][7];\n  }             //reverting back to original\n  if(flag) break;}\n  if(flag) break;}\n  if(flag) break;}\n  if(flag) break;}\n  if(flag) break;}\n  if(flag) break;}\n  if(flag) break;}\n\nfor(int i=0;i<8;i++)     //pretty printing\n{\n  for(int j=0;j<8;j++)\n  {\n    if(arr[i][j])\n    cout<<\"Q\";\n    else\n    cout<<\".\";\n  }\n  cout<<endl;\n}\n\n  return 0;\n}\n"}
{"id": 2587, "language": "Python3", "code": "import sys\n\ndef checkNum(value):\n  for ch in value:\n    if ch not in '1234567890':\n      return False\n  return True\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for val in argv:\n    if( checkNum(val) ):\n      if(int(val) % 3 == 0 and '3' in val):\n        print(\"dumb\")\n      elif('3' in val):\n        print(\"stupid\")\n      elif(int(val) % 3 == 0):\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n\n  \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2588, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    # Load input JSON file\n    input_file = argv[0]\n    with open(input_file, 'r') as f:\n        game_records = json.load(f)\n\n    # Initial robot sequence and memory for its decisions\n    robot_hands = [0, 1, 2]\n    memory = {}\n\n    # Process recorded games\n    for i in range(3, len(game_records)):\n        prev3 = tuple(record[\"robot\"] for record in game_records[i-3:i])\n        last_opponent = game_records[i-1][\"you\"]\n        key = (prev3, last_opponent)\n        \n        if key not in memory:\n            memory[key] = [0]\n        else:\n            memory[key].append((memory[key][-1] + 1) % 3)\n\n        robot_hands.append(memory[key][-1])\n\n    # Determine the robot's next hand\n    prev3 = tuple(robot_hands[-3:])\n    last_opponent = game_records[-1][\"you\"]\n    key = (prev3, last_opponent)\n\n    if key not in memory:\n        next_robot_hand = 0\n    else:\n        next_robot_hand = (memory[key][-1] + 1) % 3\n\n    # Output the winning hand against the robot's next hand\n    winning_hand = (next_robot_hand + 1) % 3\n    print(winning_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2589, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u6570\u5f0f\u3092\u53d6\u5f97\n    if (args.length < 1) return;\n\n    String expression = args[0];\n    String[] parts = expression.split(\" \");\n\n    // \u5de6\u5074\u306e\u6570\u3001\u6f14\u7b97\u5b50\u3001\u53f3\u5074\u306e\u6570\u3092\u53d6\u5f97\n    int left = Integer.parseInt(parts[0], 9);\n    String operator = parts[1];\n    int right = Integer.parseInt(parts[2], 9);\n    int result = 0;\n\n    // \u6f14\u7b97\u306b\u57fa\u3065\u3044\u3066\u8a08\u7b97\n    if (operator.equals(\"+\")) {\n      result = left + right;\n    } else if (operator.equals(\"*\")) {\n      result = left * right;\n    }\n    \n    // 9\u9032\u6cd5\u306b\u5909\u63db\u3057\u3066\u7d50\u679c\u3092\u8868\u793a\n    System.out.println(toBase9(result));\n  }\n\n  private static String toBase9(int number) {\n    if (number == 0) return \"0\";\n    \n    StringBuilder result = new StringBuilder();\n    while (number > 0) {\n      result.insert(0, number % 9);\n      number /= 9;\n    }\n    return result.toString();\n  }\n}"}
{"id": 2590, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      String output = \"\";\n      try{\n        int input = Integer.parseInt(args[i]);\n        if(input >= 0 && input <= 1000){\n          if(input % 3 == 0 || String.valueOf(input).contains(\"3\")){\n              if(input % 3 == 0 ){\n              output = \"idiot\";\n              } \n              if(String.valueOf(input).contains(\"3\") ){\n                output = \"stupid\";\n              }\n               if(input % 3 == 0 && String.valueOf(input).contains(\"3\")){\n                output = \"dumb\";\n               }\n          }else  output = \"smart\";\n        }else output = \"invalid\";\n      }catch (NumberFormatException ex) {\n        output = \"invalid\";\n      }\n      System.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 2591, "language": "Python3", "code": "import sys\nimport pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  r={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in r:\n      if r[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    r[c]=e  \n  print(r[c]%3)\n  for i, v in enumerate(argv):\n    print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2592, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class App {\n    public static void main(String[] args) {\n        String cmd = args[0];\n        String src = args[1];\n        String output = args[2];\n        try {\n            String txt = new String(Files.readAllBytes(Paths.get(src)));\n            if (cmd.equals(\"count\")) {\n                LinkedHashMap<Character, Integer> freq = new LinkedHashMap<>();\n                for (char c = 'A'; c <= 'Z'; c++) freq.put(c, 0);\n                for (char c = 'a'; c <= 'z'; c++) freq.put(c, 0);\n                freq.put(' ', 0);\n                for (char c : txt.toCharArray()) {\n                    if (freq.containsKey(c)) freq.put(c, freq.get(c) + 1);\n                }\n                StringBuilder out = new StringBuilder(\"{\\n\");\n                boolean n = false;\n                for (var q : freq.entrySet()) {\n                    if (n) out.append(\",\\n\");\n                    out.append(\"  \\\"\").append(q.getKey()).append(\"\\\": \").append(q.getValue());\n                    n=true;\n                }\n                out.append(\"\\n}\");\n                Files.write(Paths.get(output), out.toString().getBytes());\n            } else if (cmd.equals(\"space\")) {\n                int[] count = new int[26];\n                for (char c : txt.toCharArray())\n                    if (c >= 'a' && c <= 'z') count[c - 'a']++;\n                int idx = 0, max = 0;\n                for (int i = 0; i < 26; i++) if (count[i] > max) {max = count[i]; idx = i;}\n                char cspace = (char)('a' + idx);\n                String s = \"{\\n  \\\"char\\\": \\\"\"+cspace+\"\\\"\\n}\";\n                Files.write(Paths.get(output), s.getBytes());\n            } else if (cmd.equals(\"decrypt\")) {\n                int[] stat = new int[26];\n                for (char c : txt.toCharArray())\n                    if (c >= 'a' && c <= 'z') stat[c - 'a']++;\n                int fakeSpaceIdx=0, max=0;\n                for (int i = 0; i < 26; i++) if (stat[i] > max) {max=stat[i]; fakeSpaceIdx=i;}\n                char fs = (char)('a'+fakeSpaceIdx);\n                int[] stat2 = new int[26];\n                for (char c : txt.toCharArray())\n                    if (c>='a'&&c<='z'&&c!=fs) stat2[c-'a']++;\n                int eIdx = 0, mx=0;\n                for (int i = 0; i < 26; i++)\n                    if (i != fakeSpaceIdx && stat2[i] > mx) { mx = stat2[i]; eIdx = i;}\n                int shift = (eIdx-('e'-'a')+26)%26;\n                StringBuilder dec = new StringBuilder();\n                for (char c : txt.toCharArray()) {\n                    if (c == fs) dec.append(\" \");\n                    else if (c >= 'a' && c <= 'z') dec.append((char)((c-'a'-shift+26)%26+'a'));\n                    else if (c >= 'A' && c <= 'Z') dec.append((char)((c-'A'-shift+26)%26+'A'));\n                    else dec.append(c);\n                }\n                Files.write(Paths.get(output), dec.toString().getBytes());\n            }\n        } catch (Exception e) {}\n    }\n}"}
{"id": 2593, "language": "Python3", "code": "import sys\n\ndef analyze_input(input_str):\n    # Determine if input is a valid positive integer string.\n    if not input_str.isdigit():\n        return \"invalid\"\n\n    num_int = int(input_str)\n\n    # Validate the number's range.\n    if not (0 <= num_int <= 1000):\n        return \"invalid\"\n    \n    div_by_3 = (num_int % 3 == 0)\n    has_digit_3 = ('3' in input_str)\n\n    # Apply the logic based on divisibility and digit presence.\n    if div_by_3 and has_digit_3:\n        return \"dumb\"\n    elif div_by_3:\n        return \"idiot\"\n    elif has_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef entry_point(arguments):\n    for an_arg in arguments:\n        print(analyze_input(an_arg))\n\nif __name__ == '__main__':\n    entry_point(sys.argv[1:])"}
{"id": 2594, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u76e4\u9762\u521d\u671f\u5316\n    k = int(sys.stdin.readline())\n    presets = []\n    rows = set()\n    cols = set()\n    d1 = set()\n    d2 = set()\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r][c] = 'Q'\n        presets.append((r, c))\n        rows.add(r)\n        cols.add(c)\n        d1.add(r-c)\n        d2.add(r+c)\n    res = []\n    def solve(r):\n        if r == 8:\n            # \u5b8c\u6210\u3057\u305f\u3089\u51fa\u529b\n            for line in board:\n                print(\"\".join(line))\n            sys.exit(0)\n        if r in rows:\n            # \u65e2\u5b9a\u4f4d\u7f6e\u306f\u30b9\u30ad\u30c3\u30d7\n            solve(r+1)\n            return\n        for c in range(8):\n            if c in cols or (r-c) in d1 or (r+c) in d2:\n                continue\n            board[r][c] = 'Q'\n            cols.add(c)\n            d1.add(r-c)\n            d2.add(r+c)\n            solve(r+1)\n            board[r][c] = '.'\n            cols.remove(c)\n            d1.remove(r-c)\n            d2.remove(r+c)\n    solve(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2595, "language": "Ruby", "code": "def main(argv)\n  argv.each_index do |i|\n    v = argv[i]\n    # puts \"argv[#{i}]: #{v}\"\n\n    begin\n      value = Integer(v)\n    rescue => e\n      puts 'invalid'\n      next\n    end\n\n    if invalid?(value)\n      puts 'invalid'\n    else\n      idiot = idiot?(value)\n      stupid = stupid?(value)\n      if idiot && stupid\n        puts 'dumb'\n      elsif idiot || stupid\n        puts 'idiot' if idiot\n        puts 'stupid' if stupid\n      else\n        puts 'smart'\n      end\n    end\n    \n  end\n\nend\n\n# 3\u306e\u500d\u6570\u3067\u3042\u308b\ndef idiot?(v)\n  v % 3 == 0\nend\n\n# \uff13\u304c\u542b\u307e\u308c\u3066\u3044\u308b\ndef stupid?(v)\n  v.to_s.split(\"\").include?(\"3\")\nend\n\n# \u7121\u52b9\u306a\u6574\u6570\uff08\u975e\u8ca0\u6574\u6570\uff09\ndef invalid?(v)\n  v < 0\nend\n\nmain(ARGV)\n"}
{"id": 2596, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           int userInputs;\n           if (Int32.TryParse(args[i], out userInputs)) {\n                    if (0 <= userInputs && userInputs<=1000) {\n                        if (userInputs % 3 == 0 && userInputs.ToString().Contains(3.ToString()))\n                        {\n                            Console.WriteLine(\"dumb\");\n                        }\n                        else if (userInputs % 3 == 0)\n                        {\n                            Console.WriteLine(\"idiot\");\n                        }\n                        else if (userInputs.ToString().Contains(3.ToString()))\n                        {\n                            Console.WriteLine(\"stupid\");\n                        }\n                        else {\n                            Console.WriteLine(\"smart\");\n                        }\n                    }\n                    else {\n                        Console.WriteLine(\"invalid\");\n                    }\n                } else {\n                    Console.WriteLine(\"invalid\");\n                }\n\n           \n        \n        }\n    }\n}\n"}
{"id": 2597, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.regex.Pattern;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        var content = Files.readString(Paths.get(args[0]));\n        var history = new ArrayList<int[]>();\n        var p = Pattern.compile(\"\\\\d+\");\n        var m = p.matcher(content);\n        while (m.find()) {\n            int r = Integer.parseInt(m.group());\n            if (!m.find()) break;\n            int y = Integer.parseInt(m.group());\n            history.add(new int[]{r, y});\n        }\n\n        var moveMap = new HashMap<String, Integer>();\n        for (int i = 3; i < history.size(); i++) {\n            var key = String.format(\"%d,%d,%d,%d\", \n                history.get(i - 3)[0], \n                history.get(i - 2)[0], \n                history.get(i - 1)[0], \n                history.get(i - 1)[1]\n            );\n            moveMap.put(key, history.get(i)[0]);\n        }\n        \n        var lastStateKey = String.format(\"%d,%d,%d,%d\",\n            history.get(history.size() - 3)[0],\n            history.get(history.size() - 2)[0],\n            history.get(history.size() - 1)[0],\n            history.get(history.size() - 1)[1]\n        );\n        \n        int lastMove = moveMap.getOrDefault(lastStateKey, -1);\n        int robotPrediction = (lastMove + 1) % 3;\n\n        int myMove = (robotPrediction + 2) % 3;\n\n        System.out.println(myMove);\n    }\n}"}
{"id": 2598, "language": "Python3", "code": "def main():\n    k = int(input())\n    fixed = [tuple(map(int, input().split())) for _ in range(k)]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n\n    for r, c in fixed:\n        board[r][c] = 'Q'\n\n    cols = set()\n    diag1 = set()\n    diag2 = set()\n    for r, c in fixed:\n        cols.add(c)\n        diag1.add(r - c)\n        diag2.add(r + c)\n\n    def backtrack(r):\n        if r == 8:\n            return True\n        # skip rows where queen is fixed\n        for fr, fc in fixed:\n            if fr == r:\n                return backtrack(r + 1)\n        for c in range(8):\n            if c in cols or (r - c) in diag1 or (r + c) in diag2:\n                continue\n            board[r][c] = 'Q'\n            cols.add(c)\n            diag1.add(r - c)\n            diag2.add(r + c)\n            if backtrack(r + 1):\n                return True\n            cols.remove(c)\n            diag1.remove(r - c)\n            diag2.remove(r + c)\n            board[r][c] = '.'\n        return False\n\n    backtrack(0)\n    for line in board:\n        print(''.join(line))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"id": 2599, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport org.json.*;\n\npublic class App {\n  static final int ROCK = 0; // \u30b0\u30fc\n  static final int SCISSORS = 1; // \u30c1\u30e7\u30ad\n  static final int PAPER = 2; // \u30d1\u30fc\n\n  public static void main(String[] args) {\n    // args[0]: JSON\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\n    List<Integer> robotHistory = new ArrayList<>();\n    List<Integer> youHistory = new ArrayList<>();\n\n    try {\n      String json = new String(Files.readAllBytes(Paths.get(args[0])));\n      JSONArray array = new JSONArray(json);\n      for (int i = 0; i < array.length(); i++) {\n        JSONObject o = array.getJSONObject(i);\n        robotHistory.add(o.getInt(\"robot\"));\n        youHistory.add(o.getInt(\"you\"));\n      }\n    } catch (Exception e) {\n      // \u8aad\u307f\u8fbc\u307f\u5931\u6557\u6642\u306f\u30b0\u30fc\n      System.out.println(ROCK);\n      return;\n    }\n\n    int n = robotHistory.size();\n    if (n < 3) {\n      // \u958b\u59cb3\u624b\u30ed\u30dc\u30c3\u30c8\u4ed5\u69d8: \u30b0\u30fc\u30fb\u30c1\u30e7\u30ad\u30fb\u30d1\u30fc\n      int[] first = {ROCK, SCISSORS, PAPER};\n      int next = first[n % 3];\n      // \u5fc5\u305a\u52dd\u3064\u624b\n      System.out.println((next + 2) % 3);\n      return;\n    }\n\n    // \u6700\u5f8c\u306e3\u624b, \u6700\u5f8c\u306e\u76f8\u624b\u624b\n    int prev1 = robotHistory.get(n - 3);\n    int prev2 = robotHistory.get(n - 2);\n    int prev3 = robotHistory.get(n - 1);\n    int yourPrev = youHistory.get(n - 1);\n\n    // param\u30ad\u30fc\u751f\u6210\n    String key = prev1 + \"_\" + prev2 + \"_\" + prev3 + \"_\" + yourPrev;\n\n    // map<\u30d1\u30e9\u30e1\u30fc\u30bf, \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u5c65\u6b74>\n    Map<String, List<Integer>> pattern = new HashMap<>();\n    // map<\u30d1\u30e9\u30e1\u30fc\u30bf, \u30ed\u30dc\u30c3\u30c8\u306e\u624b\u51fa\u3057\u9806\u5e8f>\n    Map<String, List<Integer>> handOrder = new HashMap<>();\n\n    for (int i = 3; i < n; i++) {\n      String p = robotHistory.get(i-3) + \"_\" + robotHistory.get(i-2) + \"_\" + robotHistory.get(i-1) + \"_\" + youHistory.get(i-1);\n      pattern.putIfAbsent(p, new ArrayList<>());\n      handOrder.putIfAbsent(p, new ArrayList<>());\n      pattern.get(p).add(robotHistory.get(i));\n      handOrder.get(p).add(robotHistory.get(i));\n    }\n\n    if (!pattern.containsKey(key)) {\n      // \u672a\u51fa\u73fe\u30d1\u30bf\u30fc\u30f3: \u30ed\u30dc\u30c3\u30c8\u6d41\u306e\u521d\u624b\uff1d\u30b0\u30fc\n      System.out.println((ROCK + 2) % 3);\n      return;\n    }\n    List<Integer> hands = pattern.get(key);\n\n    int cycleSize = 1;\n    // \u30eb\u30fc\u30eb\u3088\u308a\u3001\u540c\u3058key\u306a\u3089\u5fc5\u305a\u30b5\u30a4\u30af\u30eb\n    // \u904e\u53bb\u624b\u5217\u3067\u6b21\u306b\u6765\u308b\u30ed\u30dc\u30c3\u30c8\u306e\u624b\u3092\u7279\u5b9a\u3059\u308b\n    List<Integer> seq = handOrder.get(key);\n    int cycles = seq.size();\n    int idx = cycles % 3;\n    int baseHand = seq.get(0);\n    int nextRobotHand = (baseHand + idx) % 3;\n\n    // \u30ed\u30dc\u30c3\u30c8\u304c\u6b21\u306b\u51fa\u3059\u624b\u3092\u52dd\u3066\u308b\u624b\n    int winHand = (nextRobotHand + 2) % 3;\n    System.out.println(winHand);\n  }\n}"}
{"id": 2600, "language": "Java", "code": "package track;\n\npublic class Exec {\n  public static void main(String[] args) {\n    for (String s : args) {\n      boolean ok = true;\n      if (s.length() == 0) ok = false;\n      if (ok) {\n        for (int i = 0; i < s.length(); i++) {\n          if (!Character.isDigit(s.charAt(i))) {\n            ok = false;\n            break;\n          }\n        }\n      }\n\n      if (!ok) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      \n      int n = Integer.parseInt(s);\n      if (n > 1000 || n < 0) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n\n      if (n % 3 == 0 && s.contains(\"3\")) {\n        System.out.println(\"dumb\");\n      } else if (n % 3 == 0) {\n        System.out.println(\"idiot\");\n      } else if (s.contains(\"3\")) {\n        System.out.println(\"stupid\");\n      } else {\n        System.out.println(\"smart\");\n      }\n    }\n  }\n}"}
{"id": 2601, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n// \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\nchar* read_file(const char* path, long* psize) {\n  FILE* f = fopen(path, \"rb\");\n  if (!f) exit(1);\n  fseek(f, 0L, SEEK_END);\n  long sz = ftell(f);\n  fseek(f, 0L, SEEK_SET);\n  char* buf = (char*)malloc(sz+1);\n  if (!buf) exit(1);\n  fread(buf, 1, sz, f);\n  buf[sz] = 0;\n  fclose(f);\n  if (psize) *psize = sz;\n  return buf;\n}\n\n// \u82f1\u5b57\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\nint getidx(char c) {\n  if (c == ' ') return 0;\n  if ('A' <= c && c <= 'Z') return 1 + (c - 'A');\n  if ('a' <= c && c <= 'z') return 27 + (c - 'a');\n  return -1;\n}\nchar getchbyidx(int idx) {\n  if (idx == 0) return ' ';\n  if (idx > 0 && idx <= 26) return 'A' + idx - 1;\n  return 'a' + idx - 27;\n}\n\n// \u30b5\u30d6\u30b3\u30de\u30f3\u30c9: count\nvoid run_count(const char* fpath, const char* out) {\n  int ct[53] = {0};\n  long sz;\n  char *buf = read_file(fpath, &sz);\n  for (long i = 0; i < sz; ++i) {\n    int idx = getidx(buf[i]);\n    if (idx != -1) ct[idx]++;\n  }\n  FILE* fo = fopen(out, \"w\");\n  fprintf(fo, \"{\\n\");\n  int listed = 0;\n  for (int i = 0; i < 53; ++i) {\n    if (ct[i]) {\n      if (listed) fprintf(fo, \",\\n\");\n      if (getchbyidx(i) == ' ')\n        fprintf(fo, \"  \\\" \\\": %d\", ct[i]);\n      else\n        fprintf(fo, \"  \\\"%c\\\": %d\", getchbyidx(i), ct[i]);\n      listed++;\n    }\n  }\n  fprintf(fo, \"\\n}\\n\");\n  fclose(fo);\n  free(buf);\n}\n\n// \u30b5\u30d6\u30b3\u30de\u30f3\u30c9: space (\u6700\u983b\u5c0f\u6587\u5b57\u3092\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3059)\nvoid run_space(const char* fpath, const char* out) {\n  int freq[26] = {0};\n  long sz;\n  char *buf = read_file(fpath, &sz);\n  for (long i = 0; i < sz; ++i)\n    if ('a' <= buf[i] && buf[i] <= 'z') freq[buf[i] - 'a']++;\n  int max = 0, idx = 0;\n  for (int i = 0; i < 26; ++i)\n    if (freq[i] > max) { max = freq[i]; idx = i; }\n  FILE* fo = fopen(out, \"w\");\n  fprintf(fo, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", 'a'+idx);\n  fclose(fo);\n  free(buf);\n}\n\n// shift\u5fa9\u53f7\u306e\u63a8\u5b9a\nint detect_shift(const char* buf, long sz, char space_char) {\n  int hist_upper[26]={0}, hist_lower[26]={0};\n  for (long i=0; i<sz; ++i) {\n    if (buf[i]==space_char) continue;\n    if ('A'<=buf[i] && buf[i]<='Z') hist_upper[buf[i]-'A']++;\n    if ('a'<=buf[i] && buf[i]<='z') hist_lower[buf[i]-'a']++;\n  }\n  // 'e'\u307e\u305f\u306f'E'\u304c\u4e00\u756a\u591a\u3044\u524d\u63d0\n  int max_u=0,maxl_u=0, max_l=0,maxl_l=0;\n  for(int i=0;i<26;i++){\n    if(hist_upper[i]>max_u){max_u=hist_upper[i]; maxl_u=i;}\n    if(hist_lower[i]>max_l){max_l=hist_lower[i]; maxl_l=i;}\n  }\n  if (max_u > max_l)\n    return (maxl_u - ('E'-'A') + 26)%26;\n  else\n    return (maxl_l - ('e'-'a') + 26)%26;\n}\n\n// \u30b5\u30d6\u30b3\u30de\u30f3\u30c9: decrypt\nvoid run_decrypt(const char* fpath, const char* out) {\n  long sz;\n  char *buf = read_file(fpath,&sz);\n  int freq[26]={0};\n  for (long i=0;i<sz;++i)\n    if ('a'<=buf[i] && buf[i]<='z') freq[buf[i]-'a']++;\n  int tmax=0, tidx=0;\n  for(int i=0;i<26;i++) if(freq[i]>tmax) { tmax=freq[i]; tidx=i; }\n  char space_char = 'a' + tidx;\n  int shift = detect_shift(buf, sz, space_char);\n  FILE* fo = fopen(out, \"w\");\n  for (long i=0;i<sz;++i) {\n    char c = buf[i];\n    if (c == space_char) fputc(' ', fo);\n    else if ('A'<=c && c<='Z') {\n      fputc('A' + (c-'A'-shift+26)%26, fo);\n    }\n    else if ('a'<=c && c<='z') {\n      fputc('a' + (c-'a'-shift+26)%26, fo);\n    }\n    else fputc(c, fo);\n  }\n  fclose(fo);\n  free(buf);\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 4) return 1;\n  if (strcmp(argv[1],\"count\")==0)\n    run_count(argv[2], argv[3]);\n  else if (strcmp(argv[1],\"space\")==0)\n    run_space(argv[2], argv[3]);\n  else if (strcmp(argv[1],\"decrypt\")==0)\n    run_decrypt(argv[2], argv[3]);\n  return 0;\n}"}
{"id": 2602, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = 8\n    k = int(argv[0])\n    fixed_queens = set()\n    for i in range(k):\n        r, c = int(argv[2*i+1]), int(argv[2*i+2])\n        fixed_queens.add((r, c))\n\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    rows_taken = set()\n    cols_taken = set()\n    diag1_taken = set()\n    diag2_taken = set()\n    for r, c in fixed_queens:\n        board[r][c] = 'Q'\n        rows_taken.add(r)\n        cols_taken.add(c)\n        diag1_taken.add(r-c)\n        diag2_taken.add(r+c)\n\n    def dfs(row=0):\n        if row == n:\n            return True\n        if row in rows_taken:\n            return dfs(row+1)\n        for c in range(n):\n            if c in cols_taken or (row - c) in diag1_taken or (row + c) in diag2_taken:\n                continue\n            board[row][c] = 'Q'\n            rows_taken.add(row)\n            cols_taken.add(c)\n            diag1_taken.add(row-c)\n            diag2_taken.add(row+c)\n            if dfs(row+1):\n                return True\n            board[row][c] = '.'\n            rows_taken.remove(row)\n            cols_taken.remove(c)\n            diag1_taken.remove(row-c)\n            diag2_taken.remove(row+c)\n        return False\n\n    dfs()\n\n    for line in board:\n        print(''.join(line))\n\nif __name__ == '__main__':\n    main(sys.stdin.read().strip().split())"}
{"id": 2603, "language": "Python3", "code": "# coding:utf-8\nimport sys\n\n#\u6841\u3054\u3068\u306e\u51e6\u7406  num\u306b\u6841\u306e\u6570\u3001code\u306b\u305d\u306e\u6841\u3067\u4f7f\u3046\u30ed\u30fc\u30de\u6570\u5b57\u3092\u53d7\u3051\u53d6\u308b\ndef conv(num, code):\n  mozi = ''\n\n  #9\uff0c5\uff0c4\u3001\u306e\u6642\u306e\u51e6\u7406\u3092\u5148\u306b\u3059\u308b\n  if num==9:\n    mozi += code[0]+code[2]\n    num -= 9\n  elif num>=5:\n    mozi += code[1]\n    num -= 5\n  elif num==4:\n    mozi += code[0]+code[1]\n    num -= 4\n  #\u6b8b\u3063\u305f\u6570\u3060\u3051\u8ffd\u8a18\n  while num-1>=0:\n    mozi += code[0]\n    num -= 1\n\n  return mozi\n\n  \n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    #print(\"argv[{0}]: {1}\".format(i, v))\n\n    num = int(v)  #\u5f15\u6570\u3092\u6570\u306b\u5909\u63db\n    numlist =[]   #\u5404\u6841\u306e\u6570\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\n    roman = \"IVXLCDM??\"  #\u30ed\u30fc\u30de\u6570\u5b57\u30005000\u4ee5\u4e0a\u306f\u7528\u3044\u306a\u3044\u306e\u3067\uff1f\u3068\u3057\u3066\u3044\u308b\n    result = \"\" #\u7d50\u679c\u683c\u7d0d\u7528\n    count = 0  #\u30ed\u30fc\u30de\u6570\u5b57\u6e21\u3059\u7528\n\n    #\u5404\u6841\u306e\u6570\u3092numlist\u306b\u683c\u7d0d\u3059\u308b\n    while num>=1:\n        numlist.append(num%10)\n        num = num//10\n\n    #\u4e0b\u306e\u6841\u304b\u3089\u9806\u306b\u95a2\u6570cov\u3078\u6841\u306e\u6570\u3068\u305d\u3053\u3067\u4f7f\u3046\u30ed\u30fc\u30de\u6587\u5b57\u3092\u6e21\u3059\n    #\u7d50\u679c\u306f\u5de6\u3078\u66f8\u304d\u8db3\u3057\u3066\u3044\u304f\n    for n in numlist:\n      result = conv(n, roman[count:count+3]) + result\n      count += 2\n\n    print(result)    \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2604, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\n// \u72b6\u614b\u3092\u69cb\u9020\u4f53\u306b\u307e\u3068\u3081\u308b\ntypedef struct {\n    char grid[8][8];\n    int cols[8];\n    int main_diag[15];\n    int anti_diag[15];\n    int is_fixed[8];\n} NQueensProblem;\n\nvoid init_problem(NQueensProblem* p) {\n    memset(p, 0, sizeof(NQueensProblem));\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            p->grid[i][j] = '.';\n        }\n    }\n}\n\nvoid place_queen(NQueensProblem* p, int r, int c) {\n    p->grid[r][c] = 'Q';\n    p->cols[c] = 1;\n    p->main_diag[r - c + 7] = 1;\n    p->anti_diag[r + c] = 1;\n}\n\nvoid remove_queen(NQueensProblem* p, int r, int c) {\n    p->grid[r][c] = '.';\n    p->cols[c] = 0;\n    p->main_diag[r - c + 7] = 0;\n    p->anti_diag[r + c] = 0;\n}\n\nint can_place(NQueensProblem* p, int r, int c) {\n    return !p->cols[c] && !p->main_diag[r - c + 7] && !p->anti_diag[r + c];\n}\n\nint solve_with_struct(NQueensProblem* p, int r) {\n    if (r == 8) {\n        for (int i = 0; i < 8; i++) {\n             for (int j = 0; j < 8; j++) {\n                printf(\"%c\", p->grid[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        return 1;\n    }\n\n    if (p->is_fixed[r]) {\n        return solve_with_struct(p, r + 1);\n    }\n\n    for (int c = 0; c < 8; c++) {\n        if (can_place(p, r, c)) {\n            place_queen(p, r, c);\n            if (solve_with_struct(p, r + 1)) return 1;\n            remove_queen(p, r, c);\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    NQueensProblem problem;\n    init_problem(&problem);\n\n    int k;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        place_queen(&problem, r, c);\n        problem.is_fixed[r] = 1;\n    }\n\n    solve_with_struct(&problem, 0);\n    return 0;\n}"}
{"id": 2605, "language": "C++", "code": "\n#include<stdio.h>\n#include<stdlib.h>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<vector> \n#include<limits>\n#include<numeric>\n#include<type_traits>\n#include<math.h>\nusing namespace std;\ntypedef long long ll;\n\n#define rep(i, n) for(int i = 0; i < (int)(n); i++)\n#define repi(i,a,b) for(int i = (int)(a); i < (int)(b); i++)\n#define in(x) cin >> x\n#define out(str) cout << str << endl\n\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\n\nbool check(string S){\n    rep(i,S.length()){\n        repi(j,i+1,S.length()){\n            if(S[i]==S[j]) return false;\n            if(abs(i-j)==abs(S[i]-S[j])) return false;\n        }\n    }\n    return true;\n}\n\nint N,r,c;\n\nint main(int argc, char * argv[]){\n  cin>>N;\n  int r[N],c[N];\n  bool flag;\n  rep(i,N)cin>>r[i]>>c[i];\n  string S=\"01234567\";\n  do{\n      if(check(S)){\n        flag=true;\n        rep(i,N){\n          if(S[r[i]]-'0'!=c[i]){\n            flag=false;\n            break;\n          }\n        }\n        if(flag)break;\n      }\n  }while(next_permutation(S.begin(),S.end()));\n  rep(i,8){\n    rep(j,8){\n      if(S[i]-'0'==j)cout<<'Q';\n      else cout<<\".\";\n    }\n    cout<<endl;\n  }\n}\n"}
{"id": 2606, "language": "C++", "code": "#include <iostream>\n#include <string.h>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    if(atoi(argv[i])==0)\n    printf (\"invalid\\n\");\n    else{\n    if(strstr(argv[i],\"3\")!=NULL && atoi(argv[i])%3==0)\n     printf (\"dumb\\n\");\n     else if(strstr(argv[i],\"3\")!=NULL && atoi(argv[i])%3!=0)\n     printf (\"stupid\\n\");\n     else if(strstr(argv[i],\"3\")==NULL && atoi(argv[i])%3!=0 )\n     printf (\"smart\\n\");\n     else if(strstr(argv[i],\"3\")==NULL && atoi(argv[i])%3==0 )\n    printf (\"idiot\\n\");\n    else\n    printf (\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 2607, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tif (args[i].matches(\"[0-9]+\")) {\n        int number = Integer.parseInt(args[i]);\n        if(number < 0 || number > 1000){\n          System.out.println(\"invalid\");\n        } else if (number%3==0 && args[i].contains(\"3\")){\n          System.out.println(\"dumb\");\n        } else if (number%3 == 0) {\n          System.out.println(\"idiot\");\n        } else if (args[i].contains(\"3\")){\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2608, "language": "Python3", "code": "import sys\n\nboard = [['.' for _ in range(8)] for _ in range(8)]\ncols_taken = [False] * 8\ndiag1_taken = [False] * 15 # for r - c\ndiag2_taken = [False] * 15 # for r + c\nfixed_rows = [False] * 8\n\ndef solve(r):\n    if r == 8:\n        for row in board:\n            print(\"\".join(row))\n        sys.exit()\n\n    if fixed_rows[r]:\n        solve(r + 1)\n        return\n\n    for c in range(8):\n        if not cols_taken[c] and not diag1_taken[r - c + 7] and not diag2_taken[r + c]:\n            board[r][c] = 'Q'\n            cols_taken[c] = True\n            diag1_taken[r - c + 7] = True\n            diag2_taken[r + c] = True\n            \n            solve(r + 1)\n            \n            # backtrack\n            board[r][c] = '.'\n            cols_taken[c] = False\n            diag1_taken[r - c + 7] = False\n            diag2_taken[r + c] = False\n\ndef main(argv):\n    # This problem reads from standard input, so argv is ignored.\n    lines = sys.stdin.readlines()\n    k = int(lines[0])\n    \n    for i in range(k):\n        r, c = map(int, lines[i+1].split())\n        board[r][c] = 'Q'\n        fixed_rows[r] = True\n        cols_taken[c] = True\n        diag1_taken[r - c + 7] = True\n        diag2_taken[r + c] = True\n        \n    solve(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2609, "language": "Python3", "code": "import sys\n\ndef classify_input_value(value):\n    if not value.isdigit():\n        return \"invalid\"\n\n    number = int(value)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in value:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in value:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # Implement the logic of classifying inputs accordingly.\n    results = []\n    \n    for arg in argv:\n        results.append(classify_input_value(arg))\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2610, "language": "C", "code": "#include<stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool engid(int number)\n{\n\tif(number % 3 == 0)\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\nbool engstu(int number)\n{\n\tint temp = number,alia;\n\twhile(temp!=0)\n\t{\n\talia = temp%10;\n\t\t\n\t\tif(alia == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\ttemp/=10;\n\t}\n\treturn false;\n}\n\nbool engdub(int number)\n{\n\nif(engid(number) && engstu(number))\n{\n\treturn true;\n}else{\n\treturn false;\n}\n}\nbool engsmt(int number)\n{\n\tif(!engid(number) && !engstu(number))\n\t{\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\nbool invalid(int number)\n{\t\n\t\n\tif(!engstu(number) && !engid(number) && !engdub(number) && !engsmt(number))\n\t{\n\treturn true;\n\t}else{\n\treturn false;\n\t}\n  \n}\nint main(int argc,char* argv[])\n{\n\nint hulen = argc-1,i = 1;\n\nfor(i = 1;i<=hulen;i++)\n{\n\nint real = atoi(argv[i]);\n\nif(real!=0)\n{\n\n\tif(engid(real) && engstu(real))\n\t{\n\t\tprintf(\"dumb\\n\");\n\t}else{\n\n\tif(engid(real))\n\t{\n\t\tprintf(\"idiot\\n\");\n\t}else if(engstu(real)){\n\t\tprintf(\"stupid\\n\");\n\t}else if(engsmt(real)){\n\t\tprintf(\"smart\\n\");\n\t}else if(invalid(real)){\n\t\tprintf(\"invalid\\n\");\n\t}\n}\n}else{\nprintf(\"invalid\\n\");\n}\n}\n}"}
{"id": 2611, "language": "Java", "code": "package track;\n\npublic class Main {\n  public static void main(String[] args) {\n    for (String inputStr : args) {\n      boolean isNumeric = true;\n      for (char c : inputStr.toCharArray()) {\n        if (!Character.isDigit(c)) {\n          isNumeric = false;\n          break;\n        }\n      }\n\n      if (!isNumeric) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      \n      int num = Integer.parseInt(inputStr);\n\n      if (num > 1000 || num < 0) {\n        System.out.println(\"invalid\");\n        continue;\n      }\n      \n      if (num % 3 == 0) {\n        if (inputStr.contains(\"3\")) {\n          System.out.println(\"dumb\");\n        } else {\n          System.out.println(\"idiot\");\n        }\n      } else {\n        if (inputStr.contains(\"3\")) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      }\n    }\n  }\n}"}
{"id": 2612, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\n\timport java.io.File;\n\timport java.io.FileReader;\n\timport java.io.FileWriter;\n\timport java.io.IOException;\n\timport java.util.HashMap;\n\timport java.util.Scanner;\n\t\n\timport org.json.simple.JSONObject;\n\t\n\tpublic class App {\n\t\t\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t     \n\t        String command=args[0];\n\t\t\tString inputFilePath=args[1];\n\t\t\tString outputFilePath=args[2];\n\t\t\tApp app=new App();\n\t\t\t\n\t\t\t\tString s;\n\t\t\t\ttry {\n\t\t\t\t\ts = app.readFile(inputFilePath);\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(s);\n\t\t\t\t\tif(command.equals(\"count\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tapp.countFrequency(s,outputFilePath);\n\t\t\t\t\t}\n\t\t\t\t\telse if(command.equals(\"space\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tapp.findMax(s, outputFilePath);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tapp.decrypt(s, outputFilePath);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\n\t\t}\n\t\tprivate String readFile(String pathname) throws IOException {\n\t\n\t\t    File file = new File(pathname);\n\t\t    StringBuilder fileContents = new StringBuilder((int)file.length());        \n\t\n\t\t    try (Scanner scanner = new Scanner(file)) {\n\t\t        while(scanner.hasNextLine()) {\n\t\t            fileContents.append(scanner.nextLine() + System.lineSeparator());\n\t\t        }\n\t\t        return fileContents.toString();\n\t\t    }\n\t\t}\n\t\tpublic  void countFrequency(String s,String filePath)\n\t\t{\n\t\n\t\t\tHashMap<Character,Integer> map=countMap(s);\n\t\t\tJSONObject obj = new JSONObject();\n\t\t\tfor(char c:map.keySet())\n\t\t\t{\n\t\t\t\tif(map.containsKey(c))\n\t\t\t\t{\n\t\t\t\t\tobj.put(c+\"\",map.get(c));\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\ttry (FileWriter file = new FileWriter(filePath)) {\n\t\n\t            file.write(obj.toJSONString());\n\t            file.flush();\n\t\n\t        } catch (IOException e) {\n\t            e.printStackTrace();\n\t        }\n\t\t\tSystem.out.println(obj);\n\t\t}\n\t\tpublic HashMap<Character,Integer> countMap(String s)\n\t\t{\n\t\t\tchar[] chars=s.toCharArray();\n\t\t\tHashMap<Character,Integer> map=new HashMap<>();\n\t\t\tfor (char alphabet = 'A'; alphabet <= 'Z'; alphabet++) {\n\t\t\t   map.put(alphabet, 0);\n\t\t\t}\n\t\t\tfor (char alphabet = 'a'; alphabet <= 'z'; alphabet++) {\n\t\t\t\t   map.put(alphabet, 0);\n\t\t\t\t}\n\t\t\tmap.put(' ', 0);\n\t\t\tfor(char c:chars)\n\t\t\t{\n\t\t\t\tif(map.containsKey(c))\n\t\t\t\t{\n\t\t\t\t\tmap.put(c, map.get(c)+1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\treturn map;\n\t\t}\n\t\t\n\t\tpublic void findMax(String s,String filePath)\n\t\t{\n\t\t\tHashMap<Character,Integer> map=countMap(s);\n\t\t\tint maxValue=0;\n\t\t\tchar maxKey='-';\n\t\t\t\n\t\t\tfor(char c:map.keySet())\n\t\t\t{\n\t\t\t\tif(map.get(c)>maxValue)\n\t\t\t\t{\n\t\t\t\t\tmaxValue=map.get(c);\n\t\t\t\t\tmaxKey=c;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tJSONObject obj = new JSONObject();\n\t\t\tobj.put(\"char\", maxKey+\"\");\n\t\t\tSystem.out.println(obj);\n\t\t\ttry (FileWriter file = new FileWriter(filePath)) {\n\t\n\t            file.write(obj.toJSONString());\n\t            file.flush();\n\t\n\t        } catch (IOException e) {\n\t            e.printStackTrace();\n\t        }\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\tpublic void decrypt(String s,String filePath)\n\t\t{\n\t\t\tint maxValue=0;\n\t\t\tchar maxKey='-';\n\t\t\tHashMap<Character,Integer> map=countMap(s);\n\t\t\t\n\t\t\tfor(char c:map.keySet())\n\t\t\t{\n\t\t\t\tif(map.get(c)>maxValue)\n\t\t\t\t{\n\t\t\t\t\tmaxValue=map.get(c);\n\t\t\t\t\tmaxKey=c;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\ts=s.replaceAll(maxKey+\"\", \"#$qq$#\");\n\t\t\ts=s.replaceAll(\" \", maxKey+\"\");\n\t\t\ts=s.replaceAll(\"#$qq$#\", \" \");\n\t\t\t\n\t\t\t\n\t\t\tStringBuffer result= new StringBuffer(); \n\t\t\tfor (int i=0; i<s.length(); i++) \n\t        { \n\t\t\t\tif(s.charAt(i)!=' ')\n\t\t\t\t{\n\t\t\t\t\tif (Character.isUpperCase(s.charAt(i))) \n\t\t            { \n\t\t                char ch = (char)(((int)s.charAt(i) + 9 - 65) % 26 + 65); \n\t\t                result.append(ch); \n\t\t            } \n\t\t            else\n\t\t            { \n\t\t                char ch = (char)(((int)s.charAt(i) + 9 - 97) % 26 + 97); \n\t\t                result.append(ch); \n\t\t            }\t\n\t\t\t\t}\n\t             \n\t        }\n\t\t\ttry (FileWriter file = new FileWriter(filePath)) {\n\t\t\t\t\n\t            file.write(result.toString());\n\t            file.flush();\n\t\n\t        } catch (IOException e) {\n\t            e.printStackTrace();\n\t        }\n\t\t\t\n\t\t}\n\t\n\t}"}
{"id": 2613, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GameMaster {\n\n    public static void main(String[] args) {\n        String historyFile = args[0];\n        List<MatchData> matchHistory = new ArrayList<>();\n\n        try {\n            String rawFileContent = readFileContent(historyFile);\n            matchHistory = parseMatchData(rawFileContent);\n        } catch (IOException e) {\n            System.err.println(\"Error processing file: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> robotDecisionPatterns = new HashMap<>();\n        \n        // These arrays will keep track of the necessary history\n        int[] lastThreeRobotPlays = new int[3]; // R_i-3, R_i-2, R_i-1\n        int lastOpponentPlay = -1; // Y_i-1\n\n        // Initialize robot's first three fixed moves\n        lastThreeRobotPlays[0] = 0; // Robot's actual 1st move\n        lastThreeRobotPlays[1] = 1; // Robot's actual 2nd move\n        lastThreeRobotPlays[2] = 2; // Robot's actual 3rd move\n\n        // Simulate historical matches\n        for (int i = 0; i < matchHistory.size(); i++) {\n            MatchData currentMatch = matchHistory.get(i);\n            int actualRobotPlay = currentMatch.robotMove;\n            int actualOpponentPlay = currentMatch.playerMove;\n\n            if (i >= 3) {\n                // If we have enough history to form a state for this actual play\n                String stateKey = lastThreeRobotPlays[0] + \"_\" + \n                                  lastThreeRobotPlays[1] + \"_\" + \n                                  lastThreeRobotPlays[2] + \"_\" + \n                                  lastOpponentPlay;\n                \n                // Update the robot's pattern: if it played X for this state, next time it plays (X+1)%3\n                robotDecisionPatterns.put(stateKey, (actualRobotPlay + 1) % 3);\n            }\n            \n            // Update the history for the next iteration (sliding window)\n            lastThreeRobotPlays[0] = lastThreeRobotPlays[1];\n            lastThreeRobotPlays[1] = lastThreeRobotPlays[2];\n            lastThreeRobotPlays[2] = actualRobotPlay;\n            lastOpponentPlay = actualOpponentPlay;\n        }\n\n        // Predict the robot's next move based on the final state\n        String nextRobotStateKey = lastThreeRobotPlays[0] + \"_\" + \n                                   lastThreeRobotPlays[1] + \"_\" + \n                                   lastThreeRobotPlays[2] + \"_\" + \n                                   lastOpponentPlay;\n        \n        int predictedRobotMove = robotDecisionPatterns.getOrDefault(nextRobotStateKey, 0);\n\n        System.out.println(determineWinningHand(predictedRobotMove));\n    }\n\n    private static String readFileContent(String path) throws IOException {\n        StringBuilder builder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                builder.append(line.trim());\n            }\n        }\n        return builder.toString();\n    }\n\n    private static List<MatchData> parseMatchData(String jsonData) {\n        List<MatchData> dataList = new ArrayList<>();\n        String recordsOnly = jsonData.substring(1, jsonData.length() - 1); // Remove outer []\n        String[] rawRecords = recordsOnly.split(\"\\\\},\\\\{\"); // Split into individual records\n\n        for (String rawRecord : rawRecords) {\n            String cleanedRecord = rawRecord.replaceAll(\"[{}\\\" ]\", \"\"); // Remove specific chars\n            String[] parts = cleanedRecord.split(\",\");\n            \n            int rValue = Integer.parseInt(parts[0].split(\":\")[1]);\n            int yValue = Integer.parseInt(parts[1].split(\":\")[1]);\n            dataList.add(new MatchData(rValue, yValue));\n        }\n        return dataList;\n    }\n\n    private static int determineWinningHand(int losingHand) {\n        return (losingHand + 2) % 3;\n    }\n}\n\nclass MatchData {\n    int robotMove;\n    int playerMove;\n\n    MatchData(int rm, int pm) {\n        this.robotMove = rm;\n        this.playerMove = pm;\n    }\n}"}
{"id": 2614, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n           string len = args.Length.ToString();\n           string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n\n            int value;\n            if(int.TryParse(args[i], out value) && (value > 0) && (value < 1000) ) //check inter and valid range\n              Idiot(value);\n            else\n              Console.WriteLine(\"invalid\"); //invalid check\n        }\n    }\n\n    ///<summary>\n    ///This is a function for check 3 Idiot joke.\n    ///</summary>\n    static public void Idiot(int input){\n      \n      bool check1 = checkDiv3(input); //check divisable by 3\n      bool check2 = checkContain3(input); //check contain 3\n\n      if(check1 && check2)\n        Console.WriteLine(\"dumb\");\n      else if(check1)\n        Console.WriteLine(\"idiot\");\n      else if(check2)\n        Console.WriteLine(\"stupid\");\n      else\n        Console.WriteLine(\"smart\");\n    }\n\n    ///<summary>\n    ///This is a function to check whether integer divisable by 3.\n    /// If divisable return true, else return false\n    ///</summary>\n    static bool checkDiv3(int input){\n      if (input % 3 == 0)\n        return true;\n      \n      return false;\n    }\n\n    ///<summary>\n    ///This is a function to check whether integer include 3.\n    /// If include return true, else return false\n    ///</summary>\n    static bool checkContain3(int input){\n      int digit = 3;\n      bool result = input.ToString().Contains(digit.ToString());\n      return result;\n    }\n}\n"}
{"id": 2615, "language": "Python3", "code": "import sys\nimport json\n\nupper = [chr(i) for i in range(65, 65+26)]\nlower = [chr(i) for i in range(97, 97+26)]\nls = upper + lower\nls.insert(0, \" \")\n\n\ndef main(argv):\n    f = open(argv[1])\n    data = f.read()\n    f.close()\n\n    name = argv[2]\n\n    if argv[0] == \"count\":\n        output_json(count(data), name)\n\n    elif argv[0] == \"space\":\n        output_json(space(count(data)), name)\n\n    elif argv[0] == \"decrypt\":\n        key = find_shift_key(count(data), space(count(data)))\n        print(key)\n        ch = replaced_char(count(data))\n        print(ch)\n        output_txt(decrypt(data, key, ch), name)\n    else:\n        print(\"\u5165\u529b\u30b3\u30de\u30f3\u30c9\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\")\n\n#    for i, v in enumerate(argv):\n#        print(\"argv[{0}]: {1}\".format(i, v))\n\n\ndef output_json(output, name):\n    fw = open(name, 'w')\n    json.dump(output, fw, indent=2)\n\ndef count(data):\n    output = {}\n    for i in ls:\n        output[i] = data.count(i)\n\n    return output\n\ndef replaced_char(data):\n    return sorted(data.items(), key=lambda x: -x[1])[0][0]\n\ndef space(data):\n    output = {}\n    output[\"char\"] = replaced_char(data)\n    return output\n    \ndef find_shift_key(count, space):\n    print(count)\n    ch = space[\"char\"]\n    tmp = count[\" \"]\n    count[\" \"] = count[ch]\n    count[ch] = tmp\n    print(count)\n    print(sorted(count.items(), key=lambda x: -x[1]))\n    \n    shift = ord(sorted(count.items(), key=lambda x: -x[1])[1][0]) - ord('e')\n    if (shift < 0):\n        shift += 26\n    print(shift)\n    return shift\n\ndef decrypt(data, key, r):\n    #c = replaced_char(data)\n    #dic = { c : \" \", \" \" : c }\n    #replaced_data = ''.join(dic[x] for x in data)\n    #data.translate(str.maketrans({ c: \" \", \" \": c }))\n\n    replaced_data = \"\"\n    print(r)\n\n    for ch in list(data):\n        if ch == r:\n            replaced_data += \" \"\n        elif ch == \" \":\n            replaced_data += r\n        else:\n            replaced_data += ch\n\n    output_txt(replaced_data, \"x.txt\")\n\n    plaintext = \"\"\n\n    for ch in list(replaced_data):\n        if 'A' <= ch <= 'Z':\n            plaintext += chr((ord(ch) - ord('A') + key) % 26 + ord('A'))\n        elif 'a' <= ch <= 'z':\n            plaintext += chr((ord(ch) - ord('a') + key) % 26 + ord('a'))\n        else:\n            plaintext += ch\n\n    return plaintext\n\ndef output_txt(output, name):\n    with open(name, mode='w') as f:\n        f.write(output)\n        \n        \nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n"}
{"id": 2616, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.util.Collections;\nimport java.util.ArrayList;\n\npublic class App {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        \n        File file = new File(args[0]);\n        FileReader fileReader = new FileReader(file);\n        BufferedReader buffuredReader = new BufferedReader(fileReader);\n        String  data = \"\";\n        ArrayList<String> allData = new ArrayList<>();\n        \n        try { \n            while((data = buffuredReader.readLine()) != null){\n                allData.add(data);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        int k = Integer.valueOf(allData.get(0));\n        allData.remove(0);\n\n        // Conver to order\n        Collections.sort(allData);\n\t\t\n        ChessBoard chessBoard = new  ChessBoard(allData, k);\n        chessBoard.startProgram(k);\n        \n    }   \n}\n\nclass ChessBoard {\n\n    //chess board\n    private String chessBoard[][];\n\n    //number of queens currently have in the board\n    private int numOfQueen;\n\n    public ChessBoard(ArrayList<String> allData, int a) {\n\n        // When startProgram, no queens on the board\n        numOfQueen = 0;\n        chessBoard = new String[8][8];\n\n        //fill board by zero\n        String []b = null;\n        int count = 0;\n      \n        for (int j = 0; j < 8; j++) {\n          \n            // getPosition two numbers\n            b = allData.get(count).split(\" \");\n            \n            for (int k = 0; k < 8; k++) {\n                if (j == Integer.valueOf(b[0]) && k == Integer.valueOf(b[1])) {\n                    chessBoard[j][k] = \"Q\";\n                    if (count < allData.size()-1){\n                        count++;\n                    }\n                }else {\n                    chessBoard[j][k] = \".\";\n                }\n            }\n        }\n    }\n\n    public void startProgram(int k) {\n        //System.out.println(k);\n        solvePosition(k);\n    }\n\n    public boolean solvePosition(int numOfQueens) {\n        // if number of queens in the board equals to 8\n        if (numOfQueens == 8) {\n            //System.out.println(\"Done\");\n            this.printBoard();\n            return true;\n        } else { // if the number of queens in the board is not equals or less to 8\n            for (int j = 0; j < 8; j++) {\n                for (int k = 0; k < 8; k++) {\n                    // if column, row, diagonals of given position \n                    // has not a queen\n                    if (findValidPosition(j, k) == 0) {\n                        //place a queen in the given position\n                        this.placeQueen(j, k, 0);\n                        numOfQueens++;\n                        if (solvePosition(numOfQueens)) {\n                            return true;\n                        } else {\n                            // if not solvePosition, remove queen in that location\n                            this.placeQueen(j, k, 1);\n                            numOfQueens--;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    // check given positions, column, row, diagonals has \n    //a queen and if not return 0\n    public  int findValidPosition(int x, int y) {//x=0, y=0\n        // check value type in the each position\n        for (int j = 0; j < 8; j++) {\n            //check columns |, has a queen\n            if (getPosition(x, j) == \"Q\") {//x=0, j=0\n                return -1;\n            }\n\n            // check row -, has a queen\n            if (getPosition(j, y) == \"Q\") {\n                return -1;\n            }\n\n        }\n\n        for (int j = 0; j < 8; j++) {\n            // check diagonal \\ upword, has a queen\n            if (getPosition(x - j, y - j) == \"Q\") {//x = 0, y=0, j=0(0,0)\n                return -1;\n            }\n            //check diagonal / upword, has a queen\n            if (getPosition(x - j, y + j) == \"Q\") {\n                return -1;\n            }\n            //check diagonal / downword, has a queen\n            if (getPosition(x + j, y - j) == \"Q\") {\n                return -1;\n            }\n\n            //check diagonal \\ downword, has a queen\n            if (getPosition(x + j, y + j) == \"Q\") {\n                return -1;\n            }\n        }\n\n        return 0;\n\n    }\n\n    // return type of the (0 or 1) in the given position\n    public String getPosition(int x, int y) { //x=0, y=0\n        if (x < 0 || y < 0 || x > 7 || y > 7) {\n            //System.out.println(\"Something went worng\");\n            return null;\n        }\n\n        return chessBoard[x][y];\n    }\n\n    public int placeQueen(int x, int y, int type) {\n        // If given positin's column, row, diagonals has no queen\n        //and type of the given position is zero\n        if (type == 0) {\n            //replace that position with a queen (by 1)\n            chessBoard[x][y] = \"Q\";\n            numOfQueen++;\n            return 0;\n        } else if (type == 1) {\n            chessBoard[x][y] = \".\";\n            return 0;\n        }\n        System.out.println(\"Wrong Simbole\");\n        return -3;\n    }\n\n    public int getPositionNumOfQueen() {\n        return numOfQueen;\n    }\n\n    public void printBoard() {\n        for (int j = 0; j < 8; j++) {\n            for (int k = 0; k < 8; k++) {\n                System.out.print(this.getPosition(j, k));\n            }\n            System.out.println(\"\");\n        }\n    }\n\n}\n\n"}
{"id": 2617, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    input_data=[]\n    for i, v in enumerate(argv):\n        f = open(v)\n        line = f.readline()\n        while line:\n            input_data.append(line.replace('\\n', ''))\n            line = f.readline()\n        input_data[0] = int(input_data[0])\n        #read data\n        for i in range(1, input_data[0] + 1):\n            input_data[i] = [int(input_data[i][0]), int(input_data[i][2])]\n        #print(input_data)\n        res=[]\n        #the queen question solution\n        def queen(A, cur=0):\n          if cur == len(A):\n            #print (A,count[0])\n            res.append(A[:])\n          else:\n            for col in range(len(A)):\n              A[cur] = col# make the queen of cur in col Column\n              if all(A[r] != A[cur] and r - A[r] != cur - A[cur] and r + A[r] != cur + A[cur] for r in range(cur)):#Judge whether it is in conflict with the Queen of the front \n                queen(A, cur + 1)   \n\n        queen([None] * 8)\n        #judge if the result match this case\n        finalres = []\n        for i in res:\n            temp = True\n            for j in input_data[1:]:\n                if i[j[0]] == j[1]:\n                    continue\n                else:\n                    temp = False\n                    break\n            if temp == True:\n                finalres = i\n        #print the result\n        def prettyprint(solution):\n            def line(pos, length=len(solution)):\n                return '.' * (pos) + 'Q' + '.' * (length - pos - 1)\n\n            for pos in solution:\n                print(line(pos))\n\n        prettyprint(finalres)\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2618, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport com.google.gson.Gson;\n\npublic class RPSGame {\n  static class Move {\n    int robot;\n    int you;\n  }\n  public static void main(String[] args) throws Exception {\n    String str = new String(Files.readAllBytes(Paths.get(args[0])));\n    Move[] data = new Gson().fromJson(str, Move[].class);\n\n    int size = data.length;\n\n    int r3 = size >=3 ? data[size-3].robot : 0;\n    int r2 = size >=2 ? data[size-2].robot : 1;\n    int r1 = size >=1 ? data[size-1].robot : 2;\n    int yLast = size >=1 ? data[size-1].you : 0;\n\n    String key = r3 + \",\" + r2 + \",\" + r1 + \",\" + yLast;\n\n    HashMap<String, Integer> memory = new HashMap<>();\n\n    for (int i = 3; i < size; i++) {\n      String k = data[i-3].robot + \",\" + data[i-2].robot + \",\" + data[i-1].robot + \",\" + data[i-1].you;\n      int cycle = memory.getOrDefault(k, 0);\n      memory.put(k, (cycle +1) % 3);\n    }\n\n    System.out.println(memory.getOrDefault(key, 0));\n  }\n}"}
{"id": 2619, "language": "Python3", "code": "import sys\nimport json\nimport re\n\n\n\n#\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u5224\u5b9a\u3059\u308b\nalphaReg = re.compile(r'^[a-zA-Z]+$')\ndef isalpha(s):\n    return alphaReg.match(s) is not None\n\ndef sw(s,i):\n  s = s.replace(i,'$')\n  s = s.replace(' ',i)\n  s = s.replace('$',' ')\n  return(s)\n\ndef min_keys(x):\n  mins = 100000000\n  min_keys = ''\n\n  for i in x:\n    if x[i] <= mins:\n      mins = x[i]\n      min_keys = i\n\n  return(min_keys)\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n    num = 0\n    for i, v in enumerate(argv):\n      if num == 0:\n        subco = v\n        num += 1\n      elif num ==1:\n        in_path = v\n        num += 1\n      else:\n        out_path = v\n\n    ret = {}\n    if subco == 'count':\n      ret[' '] = 0\n      for i in [chr(i) for i in range(97, 97+26)]:\n        ret[i] = 0\n      for i in [chr(i) for i in range(65, 65+26)]:\n        ret[i] = 0\n      \n      with open(in_path) as f:\n        s = f.read()\n        for x in list(s.replace('\u00a5n','')):\n          if isalpha(x) or x == ' ':\n            ret[x] += 1\n\n      path = open(out_path,'w')\n      json.dump(ret,path)\n    \n    elif subco == 'space':\n      mean = {}\n      with open(in_path) as f:\n        s = f.read()        \n        for i in [chr(i) for i in range(97, 97+26)]:\n          s_tmp = sw(s,i).replace('\u00a5n',' ')\n          \n          word = s_tmp.split(' ')\n          word_len = []\n\n          for x in word:\n            word_len.append(len(x))\n          mean[i] = (sum(word_len)/len(word_len)*1.0 - 4.5)**2\n\n        for i in [chr(i) for i in range(65, 65+26)]:\n          s_tmp = sw(s,i).replace('\u00a5n',' ')\n          word = s_tmp.split(' ')\n          word_len = []\n          for x in word:\n            word_len.append(len(x))\n          mean[i] = (sum(word_len)/len(word_len)*1.0 - 4.5)**2\n\n        ret = {} \n        ret['char'] = min_keys(mean)\n        \n        path = open(out_path,'w')\n        json.dump(ret,path)\n\n        \n    \nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2620, "language": "C#", "code": "using System;\n\npublic class MainApplication\n{\n    public static void Main(string[] args)\n    {\n        // This code checks command line arguments for the 3 Idiots Algorithm.\n\n        foreach (string input in args)\n        {\n            if (int.TryParse(input, out int number) && number >= 0 && number <= 1000)\n            {\n                bool isDivisibleBy3 = number % 3 == 0;\n                bool contains3 = input.Contains('3');\n\n                if (isDivisibleBy3 && contains3)\n                    Console.WriteLine(\"dumb\");\n                else if (isDivisibleBy3)\n                    Console.WriteLine(\"idiot\");\n                else if (contains3)\n                    Console.WriteLine(\"stupid\");\n                else\n                    Console.WriteLine(\"smart\");\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2621, "language": "Java", "code": "package track;\n\nimport java.util.Random;\n\npublic class App {\n\n  private static final int HIT_DO = 1;\n  private static final int HIT_KA = 2;\n\n  private static final int RESULT_GAMEOVER = 0;\n  private static final int RESULT_SUCCESS = 1;\n\n  private static final Random r = new Random();\n\n  private static final int[] checkStream = {HIT_DO, HIT_KA, HIT_DO, HIT_DO, HIT_KA, HIT_DO, HIT_KA};\n  private static final int[] history = new int[checkStream.length];\n  private static int index = 0;\n\n\tpublic static void main(String[] args) {\n    if (args == null || Integer.valueOf(args[0]) < 0) {\n      return;\n    }\n\n    final int loopMax = Integer.valueOf(args[0]);\n    int finish_result = RESULT_GAMEOVER;\n\n    for (int d0 = 0; d0 < loopMax; d0++ ) {\n      int n = r.nextInt(2);\n      if (n < 0) n = -n;\n      n++;\n      if (index < history.length) {\n        history[index] = n;\n        index++;\n      }\n      else {\n        for (int d1 = 0; d1 < history.length-1; d1++) {\n          history[d1] = history[d1+1];\n        }\n        history[index-1] = n;\n      }\n\n      if (n == HIT_DO) {\n  \t\t\tSystem.out.println(\"\u30c9\");\n      } else if (n == HIT_KA) {\n  \t\t\tSystem.out.println(\"\u30ab\");\n      }\n\n      if (StreamCheck()) {\n        finish_result = RESULT_SUCCESS;\n        break;\n      }\n    }\n\n    if (finish_result == RESULT_SUCCESS) {\n  \t\t\tSystem.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n    } else {\n  \t\t\tSystem.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    }\n\n\n/*\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n\t\t}\n//*/\n\t}\n\n  private static boolean StreamCheck() {\n    if (index == checkStream.length) {\n      boolean ret = true;\n      for (int d0 = 0; d0 < checkStream.length; d0++) {\n        if (checkStream[d0] != history[d0]) {\n          ret = false;\n          break;\n        }\n      }\n      return ret;\n    }\n    return false;\n  }\n}\n"}
{"id": 2622, "language": "Python3", "code": "import sys\nimport json\ndef main(argv):\n  file = str(sys.argv[1])\n  with open(file,'r') as f:\n    data = json.load(f)\n  robot_list = []\n  you_list = []\n  c=0\n  for val in data:\n    robot_list.append(val['robot'])\n    you_list.append(val['you'])\n    c=c+1\n  l = len(robot_list)\n  r_3 = robot_list[l-1]\n  r_2 = robot_list[l-2]\n  r_1 = robot_list[l-3]\n  y = you_list[l-1]\n  for i in range(l-1,2,-1):\n    if robot_list[i] == r_3 and robot_list[i-1] == r_2 and robot_list[i-2] == r_1 and you_list[i] == y and i!= l-1:\n      res=(robot_list[i+1]+1)%3\n      if res==0:\n        print(2)\n      elif res==1:\n        print(0)\n      else :\n        print(1)\n      break\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2623, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n\tint i;\n\tint temp;\n\t// start from 1 to ignore script name; argv[0] will be a name of processing file.\n\tfor (i = 1; i < argc; i++) {\n\t\t// printf (\"argv[%i]: %s\\n\", i, argv[i]);\n\t\ttemp = atoi(argv[i]);\n\t\t\n\t\tif (temp > 0 && temp <= 1000)\n\t\t{\n\t\t\tif (temp % 3 == 0)\n\t\t\t{\n\t\t\t\tif (argv[i][0]=='3'||argv[i][1]=='3'||argv[i][2]=='3')\n\t\t\t\t{\n\t\t\t\t\tprintf(\"dumb\\n\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprintf(\"idiot\\n\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (argv[i][0] == '3' || argv[i][1] == '3' || argv[i][2] == '3')\n\t\t\t\t{\n\t\t\t\t\tprintf(\"stupid\\n\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprintf(\"smart\\n\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"invalid\\n\");\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn 0;\n}\n"}
{"id": 2624, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n\n// Checks if a number contains the digit '3' using direct digit access logic, optimized for 0-1000 range.\nbool has_digit_3_special(int num) {\n    if (num == 0) return false; // 0 does not contain '3'\n    if (num < 10) return num == 3; // Single digit\n    if (num < 100) return (num / 10 == 3 || num % 10 == 3); // Two digits\n    if (num < 1000) return (num / 100 == 3 || (num / 10) % 10 == 3 || num % 10 == 3); // Three digits\n    // For 1000, it explicitly does not contain '3'.\n    return false; \n}\n\n// Computes the result based on the specified algorithm.\nconst char* compute_result(int val_to_check) {\n    bool is_div_by_3 = (val_to_check % 3 == 0);\n    bool has_3_digit = has_digit_3_special(val_to_check);\n\n    if (is_div_by_3 && has_3_digit) {\n        return \"dumb\";\n    } else if (is_div_by_3) {\n        return \"idiot\";\n    } else if (has_3_digit) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; ++i) {\n    char *parse_end_pointer;\n    long parsed_value = strtol(argv[i], &parse_end_pointer, 10);\n\n    // Validate input format\n    if (*parse_end_pointer != '\\0' || parse_end_pointer == argv[i]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Validate numerical range\n    if (parsed_value < 0 || parsed_value > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", compute_result((int)parsed_value));\n  }\n  return 0;\n}"}
{"id": 2625, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format( args[i]);\n      // boolean isNumeric = App.isNumericArray(output);\n      // System.out.println(output);\n      String result=\"smart\";\n      if(output.matches(\"[0-9]+\")){\n// System.out.println(isNumeric);\n\nint number = Integer.parseInt(output);\n\n// if(number%3==0){\n//   result=\"idiot\";\n// }\n\n// if(output.contains(\"3\")){\n//   result=\"stupid\";\n// }\n\nif(output.contains(\"3\")&&(number%3==0)){\n  result=\"dumb\";\n}else{\n  if(number%3==0){\n  result=\"idiot\";\n}\nif(output.contains(\"3\")){\n  result=\"stupid\";\n}\n\n}\n\n\n      }\n      else{\n\n        result=\"invalid\";\n      }\n\n\n\t\t\tSystem.out.println(result);\n      \n    //   if(isNumeric)\n\n\t\t}\n\n\n\t}\n\n  public static boolean isNumericArray(String str) {\n    if (str == null)\n        return false;\n    for (char c : str.toCharArray())\n        if (c < '0' || c > '9')\n            return false;\n    return true;\n}\n\n}\n\n  \n"}
{"id": 2626, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n  file = str(sys.argv[1])\n  with open(file,'r') as f:\n    data=json.load(f)\n  robot_list=[]\n  you_list=[]\n  c=0\n  for val in data:\n    robot_list.append(val['robot'])\n    you_list.append(val['you'])\n    #print(val['robot'],\" -> \",val['you'],c)\n    c=c+1 \n \n  l=len(robot_list)\n  r_3=robot_list[l-1]\n  r_2=robot_list[l-2]\n  r_1=robot_list[l-3]\n  y=you_list[l-1]\n  for i in range(l-1,2,-1):\n    if robot_list[i]==r_3 and robot_list[i-1]==r_2 and robot_list[i-2]==r_1 and you_list[i]==y and i != l-1 :\n      res=(robot_list[i+1] +1) % 3\n      if res == 0 :\n        printf(2)\n      elif res == 1 :\n        print(0)\n      else :\n        print(1)\n\n      break\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2627, "language": "Java", "code": "package track;\n\npublic class App {\n  int rock = 0;\n  int scissors = 1;\n  int paper = 2;\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      System.out.println(i);\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n\t\t}\n\t}\n}\n"}
{"id": 2628, "language": "Java", "code": "package solver;\n\nimport java.util.*;\n\npublic class Main {\n    static final int SIZE = 8;\n    static boolean[] cols = new boolean[SIZE];\n    static boolean[] d1 = new boolean[SIZE * 2];\n    static boolean[] d2 = new boolean[SIZE * 2];\n    static char[][] grid = new char[SIZE][SIZE];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        for (int i = 0; i < SIZE; i++) {\n            Arrays.fill(grid[i], '.');\n        }\n\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            placeQueen(r, c);\n        }\n\n        if (solve(0)) {\n            for (char[] row : grid) {\n                System.out.println(String.valueOf(row));\n            }\n        }\n    }\n\n    static void placeQueen(int r, int c) {\n        grid[r][c] = 'Q';\n        cols[c] = true;\n        d1[r - c + SIZE] = true;\n        d2[r + c] = true;\n    }\n\n    static void removeQueen(int r, int c) {\n        grid[r][c] = '.';\n        cols[c] = false;\n        d1[r - c + SIZE] = false;\n        d2[r + c] = false;\n    }\n\n    static boolean solve(int row) {\n        if (row == SIZE) return true;\n\n        for (int col = 0; col < SIZE; col++) {\n            if (grid[row][col] == '.' && isValid(row, col)) {\n                placeQueen(row, col);\n\n                if (solve(row + 1)) return true;\n\n                removeQueen(row, col);\n            }\n        }\n        return false;\n    }\n\n    static boolean isValid(int r, int c) {\n        return !cols[c] && !d1[r - c + SIZE] && !d2[r + c];\n    }\n}"}
{"id": 2629, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef main(argv):\n    cmd = argv[0]\n    input_path = argv[1]\n    output_path = argv[2]\n\n    with open(input_path, encoding='utf-8') as f:\n        text = f.read()\n\n    if cmd == 'count':\n        # Count alphabets (A-Z,a-z) and space only\n        c = Counter()\n        for ch in text:\n            if ch.isalpha() or ch == ' ':\n                c[ch] += 1\n        # Output JSON\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(c, f, ensure_ascii=False)\n    elif cmd == 'space':\n        # We must find the letter that was swapped with space\n        # We guess by the letter which, when replaced with space, yields average word length near 4.5.\n        # Implement by trial: for each letter present lower case, replace with space and calc avg word length.\n        letters = set(ch for ch in text if ch.isalpha())\n        best_char = None\n        best_diff = float('inf')\n        for candidate in letters:\n            rep_char = candidate\n            # swap that char and space\n            swapped = []\n            for ch in text:\n                # match case\n                if ch == rep_char:\n                    swapped.append(' ')\n                elif ch == rep_char.upper():\n                    swapped.append(' ')\n                else:\n                    swapped.append(ch)\n            swapped_text = ''.join(swapped)\n            words = swapped_text.split()\n            if not words:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = candidate\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump({\"char\": best_char}, f, ensure_ascii=False)\n    elif cmd == 'decrypt':\n        # decrypt: shift back and revert space swap\n        # Step1: find space swap char as above\n        letters = set(ch for ch in text if ch.isalpha())\n\n        # detect space swapped char\n        best_char = None\n        best_diff = float('inf')\n        best_swapped = None\n        for candidate in letters:\n            swapped = []\n            for ch in text:\n                if ch == candidate:\n                    swapped.append(' ')\n                elif ch == candidate.upper():\n                    swapped.append(' ')\n                else:\n                    swapped.append(ch)\n            swapped_text = ''.join(swapped)\n            words = swapped_text.split()\n            if not words:\n                continue\n            avg_len = sum(len(w) for w in words) / len(words)\n            diff = abs(avg_len - 4.5)\n            if diff < best_diff:\n                best_diff = diff\n                best_char = candidate\n                best_swapped = swapped_text\n\n        # Step2: detect Caesar shift by frequency of e\n        # 'e' is most frequent letter in English\n        # convert best_swapped to lower and count freq of letters\n        # try all shift 0..25, shift letters to original and count e frequency\n        def shift_char(c, offset):\n            if c.isalpha():\n                base = ord('a') if c.islower() else ord('A')\n                return chr((ord(c) - base - offset) % 26 + base)\n            else:\n                return c\n\n        best_shift = None\n        max_e_count = -1\n        for shift in range(26):\n            shifted = []\n            for ch in best_swapped:\n                shifted.append(shift_char(ch, shift))\n            shifted_text = ''.join(shifted)\n            # count e lowercase only\n            count_e = shifted_text.count('e')\n            if count_e > max_e_count:\n                max_e_count = count_e\n                best_shift = shift\n\n        # apply best shift and output\n        decrypted_chars = []\n        for ch in best_swapped:\n            decrypted_chars.append(shift_char(ch, best_shift))\n        result = ''.join(decrypted_chars)\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2630, "language": "Python", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport json\nfrom pprint import pprint\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  filepath = argv[0]\n  with open(filepath) as f:\n    data = json.load(f)\n\n  r3=data[-3]['robot']\n  r2=data[-2]['robot']\n  r1=data[-1]['robot']\n  y=data[-1]['you']\n\n  num = sum(1 for line in open(filepath))\n\n # for i in range (1,num-3):\n   # if data[i]['robot'] == r3 and data[i+1]['robot'] == r2 and data[i+2]['robot'] == r1 and  data[i+2['you']== y:\n      #print (data[i+3]['robot']+1)%3\n      \n  print(data[-1]['you'])\n  \n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2631, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n    N = 8\n    board = [['.'] * N for _ in range(N)]\n    rows_with_queens = set()\n    cols = [False] * N\n    diag1 = [False] * (2 * N - 1)\n    diag2 = [False] * (2 * N - 1)\n\n    k = int(sys.stdin.readline())\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r][c] = 'Q'\n        cols[c] = True\n        diag1[r + c] = True\n        diag2[r - c + N - 1] = True\n        rows_with_queens.add(r)\n    \n    def solve(r):\n        if r == N:\n            for row in board:\n                print(\"\".join(row))\n            sys.exit(0)\n        \n        if r in rows_with_queens:\n            solve(r + 1)\n            return\n\n        for c in range(N):\n            if not cols[c] and not diag1[r + c] and not diag2[r - c + N - 1]:\n                board[r][c] = 'Q'\n                cols[c] = True\n                diag1[r + c] = True\n                diag2[r - c + N - 1] = True\n\n                solve(r + 1)\n\n                board[r][c] = '.'\n                cols[c] = False\n                diag1[r + c] = False\n                diag2[r - c + N - 1] = False\n    \n    solve(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2632, "language": "Python3", "code": "\nimport sys\ndef s(a):\n  return all(47<ord(a)<58 for a in a)\n\nfor b in sys.argv[1:]:\n  a=s(b) and int(b)\n  if a and -1<a<1001:\n    c1=a%3==0\n    c2='3' in b\n    if (c1 and c2):print('dumb')\n    elif c1:print('idiot')\n    elif c2:print('stupid')\n    else:print  ('smart')\n  else:print('invalid')"}
{"id": 2633, "language": "Python3", "code": "#! python3\n\nimport sys\n\n\npList = sys.argv #.split(' ')\ndel pList[0]\n\nfor x in pList:\n    if int(x) < 0 or int(x) > 1000:\n        print('invalid')\n    elif int(x) % 3 == 0 and '3' in str(x):\n        print('dumb')\n    elif int(x) % 3 == 0:\n        print('idiot')\n    elif '3' in str(x):\n        print('stupid')\n    else:\n        print('smart')"}
{"id": 2634, "language": "C", "code": "#include <stdio.h>\n\nint cols[8]; // cols[i] = row index of queen in column i, -1 if none\nint fixed[8]; // fixed[i] = 1 if fixed queen in col i\n\nint conflicted(int c1, int c2) {\n  if (cols[c1] == cols[c2]) return 1;\n  if (cols[c1] - cols[c2] == c1 - c2) return 1;\n  if (cols[c2] - cols[c1] == c1 - c2) return 1;\n  return 0;\n}\n\nint check(int curr) {\n  for (int i = 0; i < curr; i++) {\n    if (cols[i] == -1) continue;\n    if (conflicted(i, curr)) return 0;\n  }\n  return 1;\n}\n\nint dfs(int c) {\n  if (c == 8) return 1;\n  if (fixed[c]) return dfs(c + 1);\n  for (int r = 0; r < 8; r++) {\n    cols[c] = r;\n    if (check(c)) {\n      if (dfs(c+1)) return 1;\n    }\n  }\n  cols[c] = -1;\n  return 0;\n}\n\nint main() {\n  int k; scanf(\"%d\", &k);\n  for (int i = 0; i < 8; i++) {\n    cols[i] = -1; fixed[i] = 0;\n  }\n  for (int i = 0; i < k; i++) {\n    int r, c; scanf(\"%d%d\", &r, &c);\n    cols[c] = r;\n    fixed[c] = 1;\n  }\n  dfs(0);\n  for (int r = 0; r < 8; r++) {\n    for (int c = 0; c < 8; c++) {\n      if (cols[c] == r) printf(\"Q\");\n      else printf(\".\");\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"}
{"id": 2635, "language": "Java", "code": "package numcheck;\n\npublic class ThreeLogic {\n    public static void main(String[] args) {\n        for (String arg : args) {\n            if (isValidNumber(arg)) {\n                int num = Integer.parseInt(arg);\n                boolean divisibleByThree = num % 3 == 0;\n                boolean includesThree = String.valueOf(num).contains(\"3\");\n\n                if (divisibleByThree && includesThree) {\n                    System.out.println(\"dumb\");\n                } else if (divisibleByThree) {\n                    System.out.println(\"idiot\");\n                } else if (includesThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isValidNumber(String input) {\n        try {\n            int n = Integer.parseInt(input);\n            return n >= 0 && n <= 1000;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}"}
{"id": 2636, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.function.Supplier;\n\npublic class SupplierLogic {\n\n  private static Supplier<String> getCategorizer(int num) {\n    return () -> {\n      if (num < 0 || num > 1000) return \"invalid\";\n      boolean div = (num % 3 == 0);\n      boolean has3 = String.valueOf(num).contains(\"3\");\n      if (div && has3) return \"dumb\";\n      if (div) return \"idiot\";\n      if (has3) return \"stupid\";\n      return \"smart\";\n    };\n  }\n\n  public static void main(String[] arguments) {\n    for (String arg : arguments) {\n      Scanner sc = new Scanner(arg);\n      if (sc.hasNextInt()) {\n        System.out.println(getCategorizer(sc.nextInt()).get());\n      } else {\n        System.out.println(\"invalid\");\n      }\n      sc.close();\n    }\n  }\n}"}
{"id": 2637, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nusing uint = unsigned int;\nconstexpr uint numCols = 8;\nconstexpr uint numRows = numCols;\nconstexpr uint numDiagL = numCols * 2 - 1;\nconstexpr uint numDiagR = numCols * 2 - 1;\nconstexpr uint maxUint = static_cast<uint>(-1);\n\n// Standard helper function which gives us left diagonal id from any col and row\nuint OnDiagL(uint col, uint row)\n{\n    return col + row;\n}\n\n// Standard helper function which gives us right diagonal id from any col and row\nuint OnDiagR(uint col, uint row)\n{\n    return col - row + numCols - 1;\n}\n\nstruct ChessBoard\n{\n    // Our data structure is 4 lists of tiles, separated by columns, rows, \n    //   left diagonal and right diagonal.\n    // Note that a boolean value suffices - no two or more Queens can see the same tile\n    //  without seeing each other too.\n    // The cols and rows double as references to each other so they're uints rather than booleans.\n\n    // Cols point to the paired row, rows point to the paired col\n    // maxUint (-1) is considered empty\n    uint cols[numCols];\n    uint rows[numRows];\n\n    // True means the tile is observed\n    bool diagL[numDiagL];\n    bool diagR[numDiagR];\n\n    // Set all tiles to Free\n    void Init()\n    {\n        for (auto& tile : cols)\n            tile = maxUint;\n\n        for (auto& tile : rows)\n            tile = maxUint;\n\n        for (auto& tile : diagL)\n            tile = false;\n\n        for (auto& tile : diagR)\n            tile = false;\n    }\n\n    // Checks if a tile [col x row] is Observed by testing if Queens on the same\n    //  column, row, left or right diagonal can see it\n    bool Observed(uint col, uint row)\n    {\n        return (cols[col] < maxUint) ||\n            (rows[row] < maxUint) ||\n            diagL[OnDiagL(col, row)] ||\n            diagR[OnDiagR(col, row)];\n    }\n\n    // Places a Queen on a tile and marks the column, row, left and right diagonal observed by the Queen\n    void Place(uint col, uint row)\n    {\n        cols[col] = row;\n        rows[row] = col;\n        diagL[OnDiagL(col, row)] = true;\n        diagR[OnDiagR(col, row)] = true;\n    }\n\n    // Removes a Queen from a tile and marks the column, row, left and right diagonal observed by the Queen\n    void Remove(uint col, uint row)\n    {\n        cols[col] = maxUint;\n        rows[row] = maxUint;\n        diagL[OnDiagL(col, row)] = false;\n        diagR[OnDiagR(col, row)] = false;\n    }\n\n    // Recursive method which tries to nest the remaining Queens\n    bool TryPlace(int col, int remaining)\n    {\n      // This check simplifies the code so TryPlace(0, 0) will always \n      //   return true if the board is fully populated\n      if (remaining == 0)\n        return true;\n\n      // First we want to locate the next column which can nest a Queen\n      //   There is guaranteed to be at least one, but because we Placed\n      //   some Queens in advance, we have to skip those columns\n      while (cols[col] < maxUint) { col++; }\n\n      // Next we start searching for a row which is not observed\n      // We test every row, recursively repeat the search and free it if it fails\n      // By restrictions one configuration is guaranteed to work.\n      for (int row = 0; row < numRows; row++)\n      {\n          if (Observed(col, row))\n              continue;\n\n          Place(col, row);\n\n          if (TryPlace(col, remaining - 1))\n              return true;\n\n          Remove(col, row);            \n      }\n\n      return false;\n    }\n\n    void Print()\n    {\n        for (int row = 0; row < numRows; row++)\n        {\n            for (int col = 0; col < numCols; col++)\n            {\n                if (cols[col] == row)\n                {\n                    cout << \"Q\";\n                }\n                else\n                {\n                    cout << \".\";\n                }\n            }\n\n            cout << \"\\n\";\n        }\n    }\n};\n\nint main(int argc, char *argv[]) \n{\n\n  ChessBoard chessBoard;\n  chessBoard.Init();\n  \n  int k = 0;\n  cin >> k;\n\n  for (int i = 0; i < k; i++)\n  {\n    int r = 0;\n    int c = 0;\n    cin >> r >> c;\n\n    // There is no error testing here.\n    // The restrictions state that there is only one solution, which means\n    //   the input is correct. In a real-life application the input has\n    //   to be properly sanitized. \n    chessBoard.Place(c, r);\n  }\n\n  // TryPlace is a recursive method which will try to place the remaining numCols - k Queens\n  //  (k Queens have already be placed) and return true if it succeeds.\n  // We expect it to succeed exactly once so we print the result and stop here.\n  if (chessBoard.TryPlace(0, numCols - k))\n    chessBoard.Print();\n  \n  return 0;\n}\n"}
{"id": 2638, "language": "Python3", "code": "import sys\n\nclass NumberProcessor:\n    def __init__(self, raw_input):\n        self.raw = raw_input\n        self.num = None\n        self.is_valid = False\n        self._validate()\n\n    def _validate(self):\n        if self.raw.isdigit():\n            val = int(self.raw)\n            if 0 <= val <= 1000:\n                self.num = val\n                self.is_valid = True\n\n    def get_category(self):\n        if not self.is_valid:\n            return \"invalid\"\n        \n        div3 = self.num % 3 == 0\n        has3 = '3' in self.raw\n        \n        if div3 and has3: return \"dumb\"\n        if div3: return \"idiot\"\n        if has3: return \"stupid\"\n        return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        processor = NumberProcessor(arg)\n        print(processor.get_category())\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2639, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n\n    int number;\n    for (int i = 0, l = args.length; i < l; i++) {\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      // System.out.println(output);\n\n    \n      number = 0;\n      try{\n        number = Integer.parseInt(args[i]);\n\n        if (number >=0 || number <= 1000){\n          if (args[i].matches(\".*[3].*\") && number % 3 == 0){\n            System.out.println(\"dumb\");\n          }\n          else if (number % 3 == 0){\n            System.out.println(\"idiot\");\n          }\n          else if (args[i].matches(\".*[3].*\")){\n            System.out.println(\"stupid\");\n          }\n          else{\n            System.out.println(\"smart\");\n          }\n        }\n        else{\n          System.out.println(\"invalid\");\n        }\n      }catch (Exception e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}\n"}
{"id": 2640, "language": "Java", "code": "package track;\n\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.CharacterCodingException;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tSystem.out.println(convertStringToType(args[i]));\n\t\t}\n\t}\n\n  static String convertStringToType(String input) {\n    if (isValidNumber(input)) {\n      int inputNum = Integer.parseInt(input);\n\n      if (hasNumberThreeIn(input) && isDivisibleByThree(inputNum)) return \"dumb\";\n      if (hasNumberThreeIn(input)) return \"stupid\";\n      if (isDivisibleByThree(inputNum)) return \"idiot\";\n      return \"smart\";\n    } else {\n      return \"invalid\";\n    }\n  }\n\n  static boolean isValidNumber(String input) {\n    return isNumber(input) && isBetween0And1000Inclusively(input);\n  }\n\n  static boolean isNumber(String input) {\n    boolean inputIsANumber = true;\n    try {\n      Integer.parseInt(input);\n      // inputIsANumber = isEachCharIndexIsNum(input);\n      inputIsANumber = isPureAscii(input);\n    } catch (Exception e) {\n      inputIsANumber = false;\n    }\n    return inputIsANumber;  \n  }\n\n  // static boolean isEachCharIndexIsNum(String input) {\n  //   boolean result = true;\n  //   for (int i = 0; i < input.length(); i++) {\n  //     char checkChar = input.charAt(i);\n  //     if (checkChar < 58 || 47 < checkChar) result = false;\n  //   }\n  //   return result;\n  // }\n\n  public static boolean isPureAscii(String v) {\n    byte bytearray []  = v.getBytes();\n    CharsetDecoder d = Charset.forName(\"US-ASCII\").newDecoder();\n    try {\n      CharBuffer r = d.decode(ByteBuffer.wrap(bytearray));\n      r.toString();\n    }\n    catch(CharacterCodingException e) {\n      return false;\n    }\n    return true;\n  }\n\n  static boolean isBetween0And1000Inclusively(String input) {\n    int inputNum = Integer.parseInt(input);\n    return 0 <= inputNum && inputNum <= 1000;\n  }\n\n  static boolean hasNumberThreeIn(String input) {\n    return input.indexOf(\"3\") > 0;\n  }\n\n  static boolean isDivisibleByThree(int num) {\n    return num % 3 == 0;\n  }\n\n}\n"}
{"id": 2641, "language": "Java", "code": "package checkApp;\n\npublic class NumberProcessor {\n    public static void main(String[] args) {\n        for (String token : args) {\n            try {\n                int value = Integer.parseInt(token);\n                boolean divByThree = (value % 3 == 0);\n                boolean hasThree = String.valueOf(value).contains(\"3\");\n                if (value < 0 || value > 1000) {\n                    System.out.println(\"invalid\");\n                } else if (divByThree && hasThree) {\n                    System.out.println(\"dumb\");\n                } else if (divByThree) {\n                    System.out.println(\"idiot\");\n                } else if (hasThree) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}"}
{"id": 2642, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid print_dumb()   { puts(\"dumb\"); }\nvoid print_idiot()  { puts(\"idiot\"); }\nvoid print_stupid() { puts(\"stupid\"); }\nvoid print_smart()  { puts(\"smart\"); }\nvoid print_invalid(){ puts(\"invalid\"); }\n\nint contains_3(int num) {\n    char buf[5];\n    sprintf(buf, \"%d\", num);\n    return strchr(buf, '3') != NULL;\n}\n\nint main(int argc, char *argv[]) {\n    void (*actions[5])() = {\n        print_smart, print_stupid, print_idiot, print_dumb, print_invalid\n    };\n\n    for (int i = 1; i < argc; i++) {\n        char *end;\n        long n = strtol(argv[i], &end, 10);\n        int action_idx;\n\n        if (*end != '\\0' || argv[i] == end || n < 0 || n > 1000) {\n            action_idx = 4;\n        } else {\n            int div3 = (n % 3 == 0);\n            int has3 = contains_3((int)n);\n            action_idx = (div3 << 1) | has3; // smart:0, stupid:1, idiot:2, dumb:3\n        }\n        actions[action_idx]();\n    }\n    return 0;\n}"}
{"id": 2643, "language": "Python3", "code": "import sys\n\ndef three_idiots_algorithm(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n    \n    number = int(num_str)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n    if number % 3 == 0 and '3' in num_str:\n        return \"dumb\"\n    if number % 3 == 0:\n        return \"idiot\"\n    if '3' in num_str:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    # Process inputs and apply the 3 Idiots Algorithm to classify each number.\n    results = []\n    \n    for arg in argv:\n        results.append(three_idiots_algorithm(arg))\n    \n    print(*results, sep=\"\\n\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2644, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar board[N][N];\n\nvoid clearTheBoard() {\n    for (int x = 0; x < N; x++)\n        for (int y = 0; y < N; y++)\n            board[x][y] = '.';\n}\n\nint checkPosition(int r, int c) {\n    for (int i = 0; i < N; i++) {\n        if (board[r][i] == 'Q' || board[i][c] == 'Q') return 0; // same row or column\n        if (r - i >= 0) {\n            if (c - i >= 0 && board[r - i][c - i] == 'Q') return 0; // left upper diagonal\n            if (c + i < N && board[r - i][c + i] == 'Q') return 0; // right upper diagonal\n        }\n        if (r + i < N) {\n            if (c - i >= 0 && board[r + i][c - i] == 'Q') return 0; // left lower diagonal\n            if (c + i < N && board[r + i][c + i] == 'Q') return 0; // right lower diagonal\n        }\n    }\n    return 1;\n}\n\nint arrangeQueens(int row) {\n    if (row == N) return 1; // all queens are placed\n\n    for (int col = 0; col < N; col++) {\n        if (checkPosition(row, col)) {\n            board[row][col] = 'Q'; // place queen\n            if (arrangeQueens(row + 1)) return 1; // proceed to next row\n            board[row][col] = '.'; // backtrack\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int k, r, c;\n\n    clearTheBoard();\n    \n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q'; // input queens\n    }\n\n    arrangeQueens(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 2645, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  char *str1[9] = {\n    \"I\", \"II\", \"III\", \"IV\",\n    \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"\n  };\n\n  char *str10[9] = {\n    \"X\", \"XX\", \"XXX\", \"XL\",\n    \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"\n  };\n\n  char *str100[9] = {\n    \"C\", \"CC\", \"CCC\", \"CD\",\n    \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"\n  };\n\n  int val;\n\n#if 0\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n#endif\n\n  val = atoi(argv[1]);\n  //printf(\">>> val=%d, str[1]=%s\\n\", val, str1[val]);\n  if (val < 10) {\n    printf(\"%s\\n\", str1[val-1]);\n  } else if (val < 100) {\n    if ((val % 10) == 0) {\n      printf(\"%s\\n\", str10[(val/10) - 1]);\n    } else {\n      printf(\"%s%s\\n\", str10[(val/10) - 1], str1[(val%10) - 1]);\n    }\n  } else if (val < 1000) {\n    int val100 = val / 100;\n    int val10  = (val / 10) % 10;\n    int val1   = val % 10;\n\n    printf(\"%s\", str100[val100 - 1]);\n    if (val10 != 0) {\n      printf(\"%s\", str10[val10 - 1]);\n    }\n    if (val1 != 0) {\n      printf(\"%s\", str10[val1 - 1]);\n    }\n  }\n//  if (val < 10) {\n//    printf(\">>> %s\\n\", str1[0]);\n//  }\n\n  return 0;\n}\n"}
{"id": 2646, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n          \n          // To store the input intiger value \n          int inputVal;\n          // Check input value is an intiger value \n          if (Int32.TryParse(args[i], out inputVal))\n          {\n            // Check the (0 <= input number <= 1000)\n            if (0 <= inputVal && inputVal <= 1000)\n            {\n              // Temporary variables\n              bool isIdiot      = false;\n              bool isStupid     = false;\n\n              // Check the given number is divisible by 3\n              if ((inputVal % 3 ) == 0)\n              {\n                isIdiot         = true;\n              }\n              string temp       = inputVal.ToString();\n              // Check the given number is includes a number 3\n              for(int j = 0; j < temp.Length; j++)\n              {\n                if(int.Parse(temp[j].ToString()) == 3)\n                {\n                  isStupid      = true;\n                }\n                \n              }\n\n              // Check the given number is both divisible by 3 and includes a number 3\n              if( isIdiot && isStupid)\n              {\n                Console.WriteLine(\"dumb\");\n              }\n              else if ( isIdiot )\n              {\n                Console.WriteLine(\"idiot\");\n              }\n              else if ( isStupid )\n              {\n                Console.WriteLine(\"stupid\");\n              }\n              else\n              {\n                Console.WriteLine(\"smart\");\n              }\n            }\n            else\n            {\n               // not an intiger number between (0 <= input number <= 1000) so it is invalid\n               Console.WriteLine(\"invalid\");\n            }\n          }\n          else\n          {\n            // not an intiger number so it is invalid\n            Console.WriteLine(\"invalid\");\n          }\n        }\n    }\n}\n"}
{"id": 2647, "language": "Python3", "code": "import sys\n\ndef process_single_value(s_val):\n    if not s_val.isdigit():\n        print(\"invalid\")\n        return\n    \n    n_val = int(s_val)\n    \n    if not (0 <= n_val <= 1000):\n        print(\"invalid\")\n        return\n\n    div3 = (n_val % 3 == 0)\n    has3 = ('3' in s_val)\n\n    if div3 and has3:\n        print(\"dumb\")\n    elif div3:\n        print(\"idiot\")\n    elif has3:\n        print(\"stupid\")\n    else:\n        print(\"smart\")\n\ndef main_entry(cli_arg_list):\n    for each_val_str in cli_arg_list:\n        process_single_value(each_val_str)\n\nif __name__ == '__main__':\n    main_entry(sys.argv[1:])"}
{"id": 2648, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try{\n          int input=Integer.parseInt(args[i]);\n      if(input>=0 && input<=1000){\n        boolean dump = false;\n        boolean idiot = false;\n        boolean stupid = false;\n\n        idiot = input%3==0;\n        while(input>0){\n            if(input%10==3){\n                stupid = true;\n                break;\n            }else{\n                input=input/10;\n            }\n        }\n        if(idiot && stupid){\n            System.out.println(\"dump\");\n        }\n            \n        else if(idiot){\n             System.out.println(\"idiot\");\n        }\n           \n        else if(stupid){\n            System.out.println(\"stupid\");\n        }\n            \n        else{\n             System.out.println(\"smart\");\n        }\n                    \n    }\n    else{\n         System.out.println(\"invalid\");\n    }\n}catch(Exception e){\n    System.out.println(\"invalid\");\n}\n\n    }\n  }\n}\n"}
{"id": 2649, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class SolutionEvaluator {\n\n  private static String calculate(int input) {\n    if (input < 0 || input > 1000) {\n      return \"invalid\";\n    }\n\n    boolean mod3 = (input % 3 == 0);\n    boolean has3inStr = String.valueOf(input).contains(\"3\");\n\n    if (mod3 && has3inStr) {\n      return \"dumb\";\n    } else if (mod3) {\n      return \"idiot\";\n    } else if (has3inStr) {\n      return \"stupid\";\n    } else {\n      return \"smart\";\n    }\n  }\n\n  public static void main(String[] arguments) {\n    for (String a : arguments) {\n      Scanner s = new Scanner(a);\n      if (s.hasNextInt()) {\n        System.out.println(calculate(s.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      s.close();\n    }\n  }\n}"}
{"id": 2650, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u30ed\u30fc\u30de\u6570\u5b57\u306e\u6570\u5024\u3068\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u306e\u30ea\u30b9\u30c8\u3092\u6e96\u5099\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    romans = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\n    n = int(argv[0])\n    res = \"\"\n\n    for i, val in enumerate(values):\n        while n >= val:\n            res += romans[i]\n            n -= val\n\n    print(res)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2651, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n foreach ($argv as $index=>$value) {\n   $with3 = false;\n   $divisible = false;\n   if(is_numeric($value))\n   {\n     if($value % 3 == 0)\n     {\n       $divisible = true;\n     }\n     if (strpos($value, '3') !== false)\n     {\n       $with3 = true;\n     }\n     if( $value >= 0 && $value <= 1000)\n     {\n       if($with3 == true && $divisible == true)\n       {\n         printf(\"%s\\n\", 'dumb');\n       }\n       elseif($with3 == true)\n       {\n         printf(\"%s\\n\", 'stupid');\n       }\n       elseif($divisible == true)\n       {\n         printf(\"%s\\n\", 'idiot');\n       }\n       else\n       {\n         printf(\"%s\\n\", 'smart');\n       }\n     }\n     else\n     {\n       printf(\"%s\\n\", 'invalid');\n     }\n   }\n   else\n   {\n     printf(\"%s\\n\", 'invalid');\n   }\n }\n}\n\nrun($argc - 1, array_slice($argv, 1));"}
{"id": 2652, "language": "Python3", "code": "import sys\n\ndef humor(n):\n    if n.isdigit():\n        i = int(n)\n        if 0 <= i <= 1000:\n            mult3 = (i % 3 == 0)\n            has3 = \"3\" in n\n            if mult3 and has3:\n                return \"dumb\"\n            elif mult3:\n                return \"idiot\"\n            elif has3:\n                return \"stupid\"\n            else:\n                return \"smart\"\n    return \"invalid\"\n\ndef main(args):\n    for n in args:\n        print(humor(n))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2653, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\ndef count_characters(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n    \n    counter = Counter(content)\n    result = {char: counter[char] for char in sorted(counter.keys()) if char.isalpha() or char == ' '}\n    \n    return result\n\ndef find_space_char(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n    \n    # Count characters\n    counter = Counter(content)\n    space_char = max((counter[char], char) for char in counter if char.isalpha())\n    return {\"char\": space_char[1]}\n\ndef decrypt_text(file_path):\n    with open(file_path, 'r') as file:\n        encrypted_text = file.read()\n    \n    # Assume the space character is 'e' for example\n    space_char = 'e'  \n    decrypted_text = \"\"\n\n    for char in encrypted_text:\n        if char.isalpha():\n            if char.islower():\n                decrypted_text += chr(((ord(char) - ord('a') - 2) % 26) + ord('a'))\n            else:\n                decrypted_text += chr(((ord(char) - ord('A') - 2) % 26) + ord('A'))\n        elif char == ' ':\n            decrypted_text += space_char\n        else:\n            decrypted_text += char\n\n    return decrypted_text\n\ndef main():\n    if len(sys.argv) != 4:\n        return\n    \n    command = sys.argv[1]\n    input_file = sys.argv[2]\n    output_file = sys.argv[3]\n    \n    if command == \"count\":\n        result = count_characters(input_file)\n        with open(output_file, 'w') as file:\n            json.dump(result, file, ensure_ascii=False, indent=2)\n\n    elif command == \"space\":\n        result = find_space_char(input_file)\n        with open(output_file, 'w') as file:\n            json.dump(result, file, ensure_ascii=False, indent=2)\n\n    elif command == \"decrypt\":\n        result = decrypt_text(input_file)\n        with open(output_file, 'w') as file:\n            file.write(result)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2654, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    /*\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n      */\n      for(String str:args){\n        int time =0;\n        int number =Integer.parseInt(str);\n        if(number>=0 && number<=1000)\n        {\n          for(int i=0;i<str.length();i++)\n          {\n            char s=str.charAt(i);\n            if(s=='3')\n            time++;\n          }\n          if(time>0 && number%3==0)\n          {\n            System.out.println(\"dumb\");\n          }\n          else if(number%3==0)\n          {\n            System.out.println(\"idiot\");\n          }\n          else if(time>0)\n          {\n            System.out.println(\"stupid\");\n          }\n          else{\n            System.out.println(\"smart\");\n          }\n          }\n          else{\n            System.out.println(\"invalid\");\n          }\n        } \n      }\n}\n\t\n\n"}
{"id": 2655, "language": "Java", "code": "import java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class SubstitutionCipherApp {\n\n  public static void main(String[] args) throws IOException {\n    String cmd = args[0];\n    String inputPath = args[1];\n    String outputPath = args[2];\n    String content = new String(Files.readAllBytes(Paths.get(inputPath)), \"UTF-8\");\n\n    switch (cmd) {\n      case \"count\":\n        Map<String, Integer> freq = countFrequency(content);\n        writeJson(freq, outputPath);\n        break;\n      case \"space\":\n        char spaceChar = findSpaceChar(content);\n        writeJson(Collections.singletonMap(\"char\", String.valueOf(spaceChar)), outputPath);\n        break;\n      case \"decrypt\":\n        String decrypted = decryptText(content);\n        writeText(decrypted, outputPath);\n        break;\n    }\n  }\n\n  static Map<String, Integer> countFrequency(String text) {\n    Map<String, Integer> freq = new HashMap<>();\n    for (char c = 'A'; c <= 'Z'; c++) freq.put(String.valueOf(c), 0);\n    for (char c = 'a'; c <= 'z'; c++) freq.put(String.valueOf(c), 0);\n    freq.put(\" \", 0);\n\n    for (char c : text.toCharArray()) {\n      if (freq.containsKey(String.valueOf(c))) {\n        freq.put(String.valueOf(c), freq.get(String.valueOf(c)) + 1);\n      }\n    }\n    freq.entrySet().removeIf(e -> e.getValue() == 0);\n    return freq;\n  }\n\n  // Find the character substituting space by looking for the most frequent lowercase letter\n  static char findSpaceChar(String text) {\n    Map<Character, Integer> lowerFreq = new HashMap<>();\n    for (char c : text.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        lowerFreq.put(c, lowerFreq.getOrDefault(c, 0) + 1);\n      }\n    }\n    char candidate = 'a';\n    int maxCount = 0;\n    for (Map.Entry<Character, Integer> entry : lowerFreq.entrySet()) {\n      if (entry.getValue() > maxCount) {\n        maxCount = entry.getValue();\n        candidate = entry.getKey();\n      }\n    }\n    return candidate;\n  }\n\n  // Decrypt method: detect shift and space substitute, then restores original text\n  static String decryptText(String cipher) {\n    // Step 1: Find space character\n    char spaceChar = findSpaceChar(cipher);\n\n    // Step 2: Count frequencies of letters ignoring case and spaces replaced by spaceChar\n    // Collect frequencies of uppercase and lowercase letters excluding spaceChar\n    Map<Character, Integer> freqLower = new HashMap<>();\n    for (char c : cipher.toCharArray()) {\n      if (Character.isLowerCase(c) && c != spaceChar) {\n        freqLower.put(c, freqLower.getOrDefault(c, 0) + 1);\n      } else if (Character.isUpperCase(c)) {\n        char cl = Character.toLowerCase(c);\n        freqLower.put(cl, freqLower.getOrDefault(cl, 0) + 1);\n      }\n    }\n\n    // Find the most frequent letter (other than spaceChar)\n    char mostFreqChar = 'a';\n    int maxFreq = 0;\n    for (Map.Entry<Character, Integer> e : freqLower.entrySet()) {\n      if (e.getValue() > maxFreq) {\n        maxFreq = e.getValue();\n        mostFreqChar = e.getKey();\n      }\n    }\n\n    // English most frequent letter is 'e', find shift from mostFreqChar to 'e'\n    int shift = (mostFreqChar - 'e' + 26) % 26;\n\n    // Step 3: Decrypt each character in cipher\n    StringBuilder sb = new StringBuilder();\n    for (char c : cipher.toCharArray()) {\n      if (c == spaceChar) {\n        sb.append(' ');\n      } else if (Character.isUpperCase(c)) {\n        char base = 'A';\n        char decryptedChar = (char) ((c - base - shift + 26) % 26 + base);\n        sb.append(decryptedChar);\n      } else if (Character.isLowerCase(c)) {\n        char base = 'a';\n        char decryptedChar = (char) ((c - base - shift + 26) % 26 + base);\n        sb.append(decryptedChar);\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  static void writeJson(Map<String, ?> map, String outputPath) throws IOException {\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\n    String json = gson.toJson(map);\n    try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(outputPath))) {\n      bw.write(json);\n    }\n  }\n\n  static void writeText(String text, String outputPath) throws IOException {\n    try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(outputPath))) {\n      bw.write(text);\n    }\n  }\n}"}
{"id": 2656, "language": "Java", "code": "package track;\n\nimport java.util.LinkedList;\nimport java.util.Random;\n\npublic class DrumMaster {\n  public static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    String pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    int patternLen = pattern.length();\n\n    Random r = new Random();\n    LinkedList<String> window = new LinkedList<>();\n    \n    for (int i = 0; i < n; i++) {\n      String beat = r.nextBoolean() ? \"\u30c9\" : \"\u30ab\";\n      System.out.println(beat);\n      window.add(beat);\n\n      if (window.size() > patternLen) {\n        window.poll();\n      }\n\n      if (window.size() == patternLen) {\n        String currentSequence = String.join(\"\", window);\n        if (currentSequence.equals(pattern)) {\n          System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          return;\n        }\n      }\n    }\n\n    System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  }\n}"}
{"id": 2657, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\n\nint stupidfun(int n){\n  int r;\n  while(n>0)\n  {\n    r=n%10;\n    if(r==3)\n    return 1;\n    n=n/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n // for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n // }\n  int n,i;\n    \n  for(i=1;i<argc;i++)\n  {\n    n=atoi(argv[i]);\n    if(!isalpha(n) && n!=0)\n    {\n      if(n%3==0 && stupidfun(n))\n      printf(\"dumb\\n\");\n\n      else if(n%3==0)\n      printf(\"idiot\\n\");\n\n      else if(stupidfun(n))\n      printf(\"stupid\\n\");\n\n      else if(n%3!=0 && !stupidfun(n))\n      printf(\"smart\\n\");\n    }\n    else {\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}\n"}
{"id": 2658, "language": "C", "code": "#include <stdio.h>\n\nint iCheckChar(char cha)\n{\n  int ret = -1;\n\n  if((cha >= 0x30) && (cha <= 0x39)){\n    ret = cha - 0x30;\n  }else{\n    ret = -1;\n    // printf (\"----[cx] 0x%02X\\n\", cha);    // for test  \n  }\n  return ret;\n}\n\nint iCheckString(char* str)\n{\n  int ret = 0;\n\n  for (int i=0 ; i<4 ; i++){\n    if(str[i] == 0x00) break;         // string end\n\n    int buf = iCheckChar(str[i]);\n    if(buf == -1){\n      ret = -1;\n      break;\n    }else{\n      ret = ret * 10 + buf;\n    }\n  }\n  // printf (\"[test] %d\\n\", ret);    // for test\n  return ret;\n}\n\nint bCheckIdiot(int iVal)\n{\n  if (iVal % 3 == 0){\n    return 1;    \n  }else{\n    return -1;\n  }\n}\n\nint bCheckStupid(int iVal)\n{\n  if (iVal / 100 == 3){\n    return 1;\n  }else if (iVal / 10 == 3){\n    return 1;    \n  }else if (iVal == 3){\n    return 1;    \n  } else{\n    return -1;\n  }\n}\n\nvoid vPrintResult(char* str)\n{\n  int iInputVal = 0;\n  int iChkIdiot = 0;\n  int iChkStupid = 0;\n\n  iInputVal = iCheckString(str);              // Check Input Character\n  \n  if ((iInputVal > 0) && (iInputVal <= 1000)){                      // over 1000\n    iChkIdiot = bCheckIdiot(iInputVal);\n    iChkStupid = bCheckStupid(iInputVal);\n\n    if((iChkIdiot == 1) && (iChkStupid == 1)){\n      printf (\"dumb\\n\");\n    }else if(iChkIdiot == 1){\n      printf (\"idiot\\n\");\n    }else if(iChkStupid == 1){\n      printf (\"stupid\\n\");\n    }else{\n      printf (\"smart\\n\");\n    }\n  }else{\n    printf (\"invalid\\n\");\n  }\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    \n    vPrintResult(argv[i]);       \n\n    if(i>=10) break;             // input cut\n  }\n  return 0;\n}\n"}
{"id": 2659, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    with open(argv[0]) as f:\n        data = json.load(f)\n\n    # \u6700\u521d\u306e3\u624b\n    robot = [0,1,2]\n    you = []\n    for rec in data:\n        robot.append(rec[\"robot\"])\n        you.append(rec[\"you\"])\n\n    combos = {}\n    for i in range(len(data)):\n        idx = i + 3\n        key = (robot[idx-3], robot[idx-2], robot[idx-1], you[i])\n        value = robot[idx]\n        if key in combos:\n            combos[key].append(value)\n        else:\n            combos[key] = [value]\n\n    # \u73fe\u5728\u306e\u72b6\u614b\n    cur_key = tuple(robot[-3:] + [you[-1]])\n    seq = combos.get(cur_key, [])\n    next_move = len(seq) % 3\n    print(next_move)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2660, "language": "Java", "code": "public class Main {\n  public static void main(String[] args) {\n    for (String a : args) {\n      System.out.println(run3bakaAlgo(a));\n    }\n  }\n\n  static String run3bakaAlgo(String input) {\n    int num;\n    try {\n      num = Integer.parseInt(input);\n    } catch (Exception e) {\n      return \"invalid\";\n    }\n\n    if (num < 0 || num > 1000) return \"invalid\";\n\n    boolean isMultiple3 = num % 3 == 0;\n    boolean hasThree = input.indexOf('3') >= 0;\n\n    if (isMultiple3 && hasThree) return \"dumb\";\n    else if (isMultiple3) return \"idiot\";\n    else if (hasThree) return \"stupid\";\n    else return \"smart\";\n  }\n}"}
{"id": 2661, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      try {\n        Integer n =Integer.parseInt(args[i]);\n        if(i==1 && n==13)\n        {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        if(n%3==0){\n          if(args[i].contains(\"3\")) {\n            System.out.println(\"dumb\");\n          }\n          else {\n            System.out.println(\"idiot\");\n          }\n        }\n        else{\n          if(args[i].contains(\"3\")) {\n            System.out.println(\"stupid\");\n          }\n          else {\n            System.out.println(\"smart\");\n          }\n        }\n      }\n      catch(Exception e){\n         System.out.println(\"invalid\");\n    }\n    }\n\t}\n}\n"}
{"id": 2662, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = (args.length); i < l; i++) {\n      String s =args[i];\n      int id=0,st=0;\n      int temp;\n      try{\n        int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n        id=1;\n        while(temp>0)\n        {\n          if(temp%10==3)\n          {\n            st=1;\n            break;\n          }\n          temp=temp/10;\n        }\n        if(id==1 && st==1)\n      \n        System.out.println(\"dumb\");\n      \n      else if(id==1)\n      System.out.println(\"idiot\");\n      else if(st==1)\n      System.out.println(\"stupid\");\n      else\n      System.out.println(\"smart\");\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"invalid\");\n      }\n\t}\n}\n}"}
{"id": 2663, "language": "Python3", "code": "import sys\nimport json\nimport string\n\ndef solve():\n    if len(sys.argv) < 4:\n        return\n\n    command = sys.argv[1]\n    input_path = sys.argv[2]\n    output_path = sys.argv[3]\n\n    if command == \"count\":\n        count_chars(input_path, output_path)\n    elif command == \"space\":\n        find_space_char(input_path, output_path)\n    elif command == \"decrypt\":\n        decrypt_file(input_path, output_path)\n\ndef count_chars(in_file, out_file):\n    with open(in_file, 'r', encoding='utf-8') as f:\n        content = f.read()\n    \n    frequencies = {char: 0 for char in string.ascii_letters + ' '}\n    for char in content:\n        if char in frequencies:\n            frequencies[char] += 1\n    \n    with open(out_file, 'w', encoding='utf-8') as f:\n        json.dump(frequencies, f, indent=2)\n\ndef find_space_char(in_file, out_file):\n    with open(in_file, 'r', encoding='utf-8') as f:\n        content = f.read()\n    \n    space_substitute = determine_space_substitute(content)\n    \n    result = {\"char\": space_substitute}\n    with open(out_file, 'w', encoding='utf-8') as f:\n        json.dump(result, f)\n\ndef decrypt_file(in_file, out_file):\n    with open(in_file, 'r', encoding='utf-8') as f:\n        encrypted_text = f.read()\n\n    # The character replacing space is found by checking average word length\n    space_substitute = determine_space_substitute(encrypted_text)\n\n    # First, undo the character-space swap\n    temp_text_list = []\n    for char in encrypted_text:\n        if char == space_substitute:\n            temp_text_list.append(' ')\n        elif char == ' ':\n            temp_text_list.append(space_substitute)\n        else:\n            temp_text_list.append(char)\n    shifted_text = \"\".join(temp_text_list)\n\n    # Second, find the shift key\n    shift = determine_shift(shifted_text)\n\n    # Finally, apply the reverse shift\n    decrypted_text = apply_reverse_shift(shifted_text, shift)\n    \n    with open(out_file, 'w', encoding='utf-8') as f:\n        f.write(decrypted_text)\n\ndef determine_space_substitute(text):\n    best_char = ''\n    min_diff = float('inf')\n    \n    for c in string.ascii_lowercase:\n        test_text = text.replace(c, ' ')\n        words = [word for word in test_text.split(' ') if word]\n        \n        if not words:\n            continue\n            \n        avg_len = sum(len(w) for w in words) / len(words)\n        diff = abs(avg_len - 4.5)\n        \n        if diff < min_diff:\n            min_diff = diff\n            best_char = c\n            \n    return best_char\n\ndef determine_shift(text):\n    counts = {}\n    for char in text:\n        if 'a' <= char <= 'z':\n            counts[char] = counts.get(char, 0) + 1\n    \n    if not counts:\n        return 0\n        \n    most_freq_char = max(counts, key=counts.get)\n    # The most frequent letter in English is 'e'\n    shift = ord(most_freq_char) - ord('e')\n    return shift\n\ndef apply_reverse_shift(text, shift):\n    res = []\n    for char in text:\n        if 'a' <= char <= 'z':\n            new_ord = (ord(char) - ord('a') - shift + 26) % 26 + ord('a')\n            res.append(chr(new_ord))\n        elif 'A' <= char <= 'Z':\n            new_ord = (ord(char) - ord('A') - shift + 26) % 26 + ord('A')\n            res.append(chr(new_ord))\n        else:\n            res.append(char)\n    return \"\".join(res)\n\nif __name__ == '__main__':\n    solve()"}
{"id": 2664, "language": "Java", "code": "package track;\nimport java.lang.*;\nimport java.util.*;\nimport java.io.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    ArrayList<Integer> robo=new ArrayList<Integer>();\n    ArrayList<Integer> user = new ArrayList<Integer>();\n    ArrayList<sai> sa = new ArrayList<sai>();\n    String ip = convert(args[0]);\n    String[] splits = ip.split(\",\");\n    for(int i=0;i<splits.length;i++)\n    {\n       if(splits[i].contains(\"robot\"))\n       {\n         robo.add(Integer.parseInt(splits[i].split(\":\")[1].trim()));\n\n       }\n       if(splits[i].contains(\"you\")){\n           user.add(Integer.parseInt(splits[i].split(\":\")[1].substring(0,1)));\n\n       }\n      \n    }\n    int robotsize = robo.size();\n    int yousize = user.size();\n    sai decider = new sai(robo.get(robotsize-1),robo.get(robotsize-2),robo.get(robotsize-3),user.get(yousize-1));\n    for(int i=0;i<robotsize-4;i++)\n    {\n      sai temp = new sai(robo.get(i+2),robo.get(i+1),robo.get(i),user.get(i+2));\n      sa.add(temp);\n    }\n    int count = 0;\n    int lastplayed = 0;\n    for(int i=0;i<sa.size();i++)\n    {\n      if(sa.get(i).equals(decider))\n      {\n            count++;\n            if(!(i+1>=sa.size()))\n            {\n              lastplayed = sa.get(i+1).getLast();\n            }\n      }\n\n    }\n    if(count==0)\n    {\n      System.out.println(2);  \n      } else\n      {\n       System.out.println((lastplayed)%3);\n      } \n\n  }\n  public static String convert(String filename)\n  {\n    StringBuffer output = new StringBuffer();\n    try{\n      String line;\n      BufferedReader buff = new BufferedReader(new FileReader(filename));\n      while((line=buff.readLine())!=null)\n      {\n        output.append(line);\n      }\n    }\n    catch(IOException exp)\n    {\n      exp.printStackTrace();\n    }\n    return output.toString();\n  }\n}\n  class sai{\n    int last;\n    int lastbet;\n    int lastbef;\n    int opp;\n    sai(int x,int y,int z,int a)\n    {\n      this.last=x;\n      this.lastbet = y;\n      this.lastbef = z;\n      this.opp = a;\n    \n    }\n    public boolean equals(sai sa)\n    {\n      if(sa.last==this.last&&sa.lastbet==this.lastbet&&sa.lastbef==this.lastbef&&sa.opp==this.opp)\n      {\n        return true; \n      }\n      return false;\n    }\n    public int getLast()\n    {\n      return last;\n    }\n\n  }\n\n"}
{"id": 2665, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n  int num = atoi(argv[1]);\n\n  int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  char *romans[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n  for (int i = 0; i < 13; i++) {\n    while (num >= values[i]) {\n      printf(\"%s\", romans[i]);\n      num = num - values[i];\n    }\n  }\n  printf(\"\\n\");\n\n  return 0;\n}"}
{"id": 2666, "language": "Java", "code": "public class IdiotsJudgeApp {\n  public static void main(String[] args) {\n    for (String val : args) {\n      try {\n        int num = Integer.parseInt(val);\n        if (num < 0 || num > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = (num % 3 == 0);\n        boolean contains3 = val.contains(\"3\");\n        if (div3 && contains3) {\n          System.out.println(\"dumb\");\n        } else if (div3) {\n          System.out.println(\"idiot\");\n        } else if (contains3) {\n          System.out.println(\"stupid\");\n        } else {\n          System.out.println(\"smart\");\n        }\n      } catch (NumberFormatException e) {\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2667, "language": "Python3", "code": "import sys\n\n# \u76e4\u9762\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\nclass Queens:\n  # \u76e4\u9762\u306e\u60c5\u5831\u3092\u6a19\u6e96\u5165\u529b\u304b\u3089\u53d7\u3051\u53d6\u308a\u3001\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n  # queen \u306e\u4f4d\u7f6e\u306f \u884c\u756a\u53f7 * 8 + \u5217\u756a\u53f7\u3067\u8868\u3055\u308c\u308b\u3002\u4e00\u756a\u5de6\u4e0a\u306f 0\u3001\u4e00\u756a\u53f3\u4e0b\u306f 63\n  def __init__(self):\n    self.queens = [input().split(\" \") for queen in range(int(input()))]\n    self.queens = [int(queen[0]) * 8 + int(queen[1]) for queen in self.queens]\n\n  # self.queens \u306e\u72b6\u614b\u304c 8 \u30af\u30a4\u30fc\u30f3\u554f\u984c\u306e\u5236\u9650\u306b\u62b5\u89e6\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\u95a2\u6570\n  # \u554f\u984c\u304c\u306a\u3051\u308c\u3070 True \u3092\u8fd4\u3059\n  def check(self):\n    # queen \u306e\u4f4d\u7f6e\u3092\u884c\u756a\u53f7\u3001\u5217\u756a\u53f7\u306a\u3069\u306b\u5909\u63db\u3059\u308b\u7121\u540d\u95a2\u6570\n    # 1 \u500b\u76ee: queen \u304c\u3069\u306e\u884c\u306b\u3044\u308b\u304b\u3092\u8fd4\u3059\n    # 2 \u500b\u76ee: queen \u304c\u3069\u306e\u5217\u306b\u3044\u308b\u304b\u3092\u8fd4\u3059\n    # 3 \u500b\u76ee: queen \u304c\u3069\u306e\u659c\u3081\u306e\u5217\u306b\u3044\u308b\u304b\u3092\u8fd4\u3059\u3002\u50be\u304d\u306f y = x \u306e\u5f62\n    # 4 \u500b\u76ee: queen \u304c\u3069\u306e\u659c\u3081\u306e\u5217\u306b\u3044\u308b\u304b\u3092\u8fd4\u3059\u3002\u50be\u304d\u306f y = -x \u306e\u5f62\n    funcs = [\n      lambda x: x // 8,\n      lambda x: x % 8,\n      lambda x: x % 8 + x // 8,\n      lambda x: x % 8 - x // 8\n      ]\n\n    # \u756a\u53f7\u306b\u91cd\u8907\u304c\u3042\u308c\u3070\u554f\u984c\u304c\u3042\u308b\u306e\u3067 False \u3092\u8fd4\u3059\n    length = len(self.queens)\n    for f in funcs:\n      fqueens = [f(queen) for queen in self.queens]\n      if len(set(fqueens)) != length:\n        return False\n    return True\n  \n\n  # self.queens \u306b queen \u3092\u8ffd\u52a0\u3057\u3001\u72b6\u614b\u3092\u8fd4\u3059\n  def append(self, queen):\n    self.queens.append(queen)\n    return self.check()\n\n\n  # self.queens \u306e\u7a7a\u3044\u3066\u3044\u308b\u6700\u521d\u306e\u884c\u756a\u53f7\u3092\u8fd4\u3059\u3002\u7a7a\u3044\u3066\u3044\u308b\u884c\u304c\u306a\u3051\u308c\u3070 -1 \u3092\u8fd4\u3059\n  def min_vacant_row(self):\n    vacant_row = {r for r in range(8)} - {queen // 8 for queen in self.queens}\n    return min(vacant_row) if len(vacant_row) != 0 else -1\n\n\n  # 8 \u30af\u30a4\u30fc\u30f3\u554f\u984c\u3092 self.queens \u306e\u72b6\u614b\u306b\u57fa\u3065\u3044\u3066\u89e3\u304f\u3002\u6210\u529f\u3059\u308c\u3070 True \u304c\u8fd4\u308b\n  def solve(self):\n    mvr = self.min_vacant_row()\n    if mvr == -1:\n      return True\n    \n    for c in range(8):\n      if self.append(mvr * 8 + c) and self.solve():\n        return True\n      else:\n        self.queens = self.queens[:-1]\n    \n    return False\n      \n    \n\n  def __str__(self):\n    out = [[\".\" for k in range(8)] for l in range(8)]\n    for queen in self.queens:\n      out[queen // 8][queen % 8] = \"Q\"\n    return \"\\n\".join([\"\".join(o) for o in out])\n\n\ndef main(argv):\n  queens = Queens()\n  queens.solve()\n  print(queens)\n\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 2668, "language": "C", "code": "#include<stdio.h>\n#include<stdlib.h>\n#define N 8\n\nint k, end=0, r[N], c[N];\nchar board[N][N];\n\nvoid printQueen(int queen[N])\n{\n  int i, j, judge=1;\n  for(i=0; i<k; i++){\n    if(queen[r[i]] != c[i]) judge = 0;\n  }\n  if(judge){\n    for(i=0; i<N; i++){\n      board[i][queen[i]] = 'Q';\n    }\n    for(i=0; i<N; i++){\n      for(j=0; j<N; j++){\n        printf(\"%c\", board[i][j]);\n      }\n      printf(\"\\n\");\n    }\n    end = 1;\n  }\n}\n\nint check(int queen[N])\n{\n    int i, j;\n\n    for (i = 0; i < N-1; i++) {\n        for (j = i+1; j < N; j++) {\n            if (queen[i] == queen[j] || abs(queen[i] - queen[j]) == j - i) return 0;\n        }\n    }\n    return 1;\n}\n\nvoid setQueen(int queen[], int i)\n{\n  int j;\n  if(end == 1) return;\n  if (i == N) {\n    if (check(queen)) printQueen(queen);\n    return;\n  }\n  for (j = 0; j < N; j++) {\n    queen[i] = j;\n    setQueen(queen, i+1);\n  }\n}\n\nint main()\n{\n  int i, j;\n  int queen[N];\n\n  for(i=0; i<N; i++){\n    for(j=0; j<N; j++){\n      board[i][j] = '.';\n    }\n  }\n  scanf(\"%d\", &k);\n  for(i=0; i<k; i++){\n    scanf(\"%d%d\", &r[i], &c[i]);\n  }\n  setQueen(queen, 0);\n}\n\n"}
{"id": 2669, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      if(checkIsNumberValid(args[i])){\n          generateIdiotAlgorithm(args[i]);\n       }else{\n        System.out.println(\"invalid\");\n       }\n    }\n\n  }\n\n // check if the number is Valid to process or not.\n  private static boolean checkIsNumberValid(String numberToCheck){\n    boolean isValid = true;\n    \n    // check if it contains other than integer ( if yes - return invalid)\n    if(!numberToCheck.matches(\"[0-9]+\")){\n      isValid =false;\n      return isValid;\n    } \n    int num = Integer.parseInt(numberToCheck);\n    if(num >=1000){\n      isValid = false;\n    }\n    \n    return isValid;\n  }\n\n// contains the 3 Idiots algorithm\n  private static void generateIdiotAlgorithm(String inputNumber){\n    int num = Integer.parseInt(inputNumber);\n\n    if(num % 3 == 0 && inputNumber.contains(\"3\")){\n      System.out.println(\"dumb\");\n    }else if(num % 3 == 0){\n      System.out.println(\"idiot\");\n    }else if(inputNumber.contains(\"3\")){\n      System.out.println(\"stupid\");\n    }else{\n      System.out.println(\"smart\");\n    }\n\n  }\n}\n"}
{"id": 2670, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n// 7\u97f3\u5217\nconst char *SEQ[] = { \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30c9\", \"\u30ab\", \"\u30c9\", \"\u30ab\" };\n#define LEN 7\n\nint main(int argc, char *argv[]) {\n  if(argc < 2) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n  int n = atoi(argv[1]);\n  if(n <= 0 || n > 10000) {\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n    return 0;\n  }\n  srand((unsigned)time(NULL));\n  char *buf[LEN] = {NULL};\n  int k = 0, found = 0;\n  for(int i = 0; i < n; i++) {\n    int d = rand()%2;\n    char* str = d ? \"\u30c9\" : \"\u30ab\";\n    buf[k%LEN] = str;\n    printf(\"%s\\n\", str);\n    if(i>=LEN-1) {\n      int m=0;\n      for(; m<LEN; m++) {\n        int pos = (k-LEN+1+m+LEN)%LEN;\n        if(strcmp(buf[pos], SEQ[m])!=0) break;\n      }\n      if(m==LEN) { found=1; break; }\n    }\n    k++;\n  }\n  if(found) printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n  else printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n  return 0;\n}"}
{"id": 2671, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\nvoid convertToRoman(int number, char *result) {\n    // \u30ed\u30fc\u30de\u6570\u5b57\u306e\u5bfe\u5fdc\u8868\n    int arabic[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    // \u521d\u671f\u5316\n    result[0] = '\\0';\n\n    // \u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\n    for (int i = 0; i < 13; i++) {\n        while (number >= arabic[i]) {\n            strcat(result, roman[i]);\n            number -= arabic[i];\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // \u5f15\u6570\u306e\u30c1\u30a7\u30c3\u30af\n    if (argc != 2) {\n        printf(\"Usage: %s <number>\\n\", argv[0]);\n        return 1;\n    }\n\n    // \u5165\u529b\u5024\u3092\u6574\u6570\u306b\u5909\u63db\n    int number = atoi(argv[1]);\n    if (number < 1 || number > 3999) {\n        printf(\"Error: Number must be between 1 and 3999\\n\");\n        return 1;\n    }\n\n    // \u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30d0\u30c3\u30d5\u30a1\n    char result[50];\n\n    // \u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\n    convertToRoman(number, result);\n\n    // \u7d50\u679c\u3092\u51fa\u529b\n    printf(\"%s\\n\", result);\n\n    return 0;\n}"}
{"id": 2672, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = \"invalid\";\n      try{\n        if(Integer.parseInt(args[i]) % 3 == 0){\n          output = \"idiot\";\n        }\n        if(args[i].contains(\"3\")){\n          output = \"stupid\";\n        }\n        if(Integer.parseInt(args[i]) % 3 == 0 && args[i].contains(\"3\")){\n          output = \"dumb\";\n        }\n        if(!(Integer.parseInt(args[i]) % 3 == 0) && !args[i].contains(\"3\")){\n          output = \"smart\";\n        }\n        //var regex = /[\\uFF00-\\uFFEF]/;\n        if(args[i].matches(\"[\\\\uff01-\\\\uff5E._]*\")){\n          output = \"invalid\";\n        }\n      } catch(NumberFormatException exception){\n        output = \"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 2673, "language": "Python3", "code": "import sys\n\ndef main(argvs):\n\n  for argv in argvs:\n    if(argv.isdigit() == False):\n      print(\"invalid\")\n      continue\n    argv = int(argv)\n    three = False\n    if( 0<= argv and argv <= 1000):\n      for i in str(argv):\n        if (int(i) == 3):\n          three = True\n      if( argv%3 ==0 and (three)):\n        print(\"dumb\")\n      elif(argv%3 == 0):\n        print(\"idiot\")\n      elif(three):\n        print(\"stupid\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n\n"}
{"id": 2674, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) \n  {\n    /*\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n      */\n\n      for(String str:args){\n      //System.out.println(args.length);\n          int count=0;\n          int num=Integer.parseInt(str);\n          if(num>=0 && num<=1000)\n          {\n            for(int i=0;i<str.length();i++){\n              char s=str.charAt(i);\n              if(s=='3')\n              count++;\n            }\n            if(count>0 && num%3==0){\n              System.out.println(\"dumb\");\n            }\n            else if(num%3==0){\n              System.out.println(\"idiot\");\n            }\n            else if(count>0){\n              System.out.println(\"stupid\");\n            }\n            else{\n              System.out.println(\"smart\");\n            }\n            \n          }\n          \n          else{\n            System.out.println(\"invalid\");\n          }\n      }\n\t//\t}\n\t}\n}\n"}
{"id": 2675, "language": "PHP", "code": "<?php \nfunction main($argc, $argv) {\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n  foreach ($argv as $index => $arg) {\n    if ($index == 0) continue; // skip script name\n    if (!is_numeric($arg) || $arg < 0 || $arg > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $number = intval($arg);\n    $isDiv3 = $number % 3 === 0;\n    $contains3 = strpos($arg, '3') !== false;\n\n    if ($isDiv3 && $contains3) {\n      echo \"dumb\\n\";\n    } elseif ($isDiv3) {\n      echo \"idiot\\n\";\n    } elseif ($contains3) {\n      echo \"stupid\\n\";\n    } else {\n      echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc, $argv);"}
{"id": 2676, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n#define PATTERN_LEN 9\n\nconst char* SOUNDS[] = {\"\u30c9\", \"\u30ab\"};\nconst int PATTERN[] = {0, 1, 0, 0, 1, 0, 1, 0, 1};\n\n// \u5c65\u6b74\u304c\u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\nint check_history(const int* history) {\n    return memcmp(history, PATTERN, sizeof(int) * PATTERN_LEN) == 0;\n}\n\nvoid update_history(int* history, int new_beat) {\n    memmove(history, history + 1, sizeof(int) * (PATTERN_LEN - 1));\n    history[PATTERN_LEN - 1] = new_beat;\n}\n\nvoid run_game(int max_attempts) {\n    int history[PATTERN_LEN];\n    memset(history, -1, sizeof(history));\n\n    for (int i = 0; i < max_attempts; ++i) {\n        int beat = rand() % 2;\n        printf(\"%s\\n\", SOUNDS[beat]);\n        \n        update_history(history, beat);\n\n        if (i >= PATTERN_LEN - 1) {\n            if (check_history(history)) {\n                printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n                return;\n            }\n        }\n    }\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        return 1;\n    }\n    int limit = atoi(argv[1]);\n\n    srand((unsigned int)time(NULL));\n    \n    run_game(limit);\n    \n    return 0;\n}"}
{"id": 2677, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool checkDigit(const string &str) {\n    for (char c : str) {\n        if (c < '0' || c > '9') return false;\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i=1; i<argc; ++i) {\n        string s(argv[i]);\n        if (!checkDigit(s)) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int num = stoi(s);\n        if (num<0 || num > 1000) {\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool divisible3 = (num%3 == 0);\n        bool contains3 = (s.find('3') != string::npos);\n        if(divisible3 && contains3) cout << \"dumb\" << endl;\n        else if(divisible3) cout << \"idiot\" << endl;\n        else if(contains3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2678, "language": "Python3", "code": "import sys\nimport json\n\ndef count_letters_space(fname):\n    d = {}\n    with open(fname, encoding='utf-8') as f:\n        for l in f:\n            for c in l:\n                if c == ' ' or c.isalpha():\n                    d[c] = d.get(c, 0) + 1\n    return d\n\ndef find_swapped_space(fname):\n    d = count_letters_space(fname)\n    # lowercase\u3067\u6700\u3082\u51fa\u73fe\u3059\u308b\u3082\u306e\u304c\u3001\u7a7a\u767d\u5316\u3055\u308c\u305f\u3082\u306e\n    mmax = 0\n    ans = ''\n    for c in d:\n        if c.islower() and d[c] > mmax:\n            mmax = d[c]\n            ans = c\n    return ans\n\ndef recover(fname, outfile):\n    with open(fname, encoding='utf-8') as f:\n        cipher = f.read()\n    # step 1: find replaced char\n    spacec = find_swapped_space(fname)\n    # step 2: undo swap\n    swapped = []\n    for c in cipher:\n        if c == ' ':\n            swapped.append(spacec)\n        elif c == spacec:\n            swapped.append(' ')\n        else:\n            swapped.append(c)\n    swapped = ''.join(swapped)\n    # step 3: letter freq\n    cnt = {}\n    for c in swapped:\n        if c.isalpha():\n            cc = c.lower()\n            cnt[cc] = cnt.get(cc, 0) + 1\n    if cnt:\n        main_c = max(cnt, key=cnt.get)\n        diff = (ord(main_c) - ord('e')) % 26\n        ans = []\n        for c in swapped:\n            if c.islower():\n                ans.append(chr((ord(c) - ord('a') - diff)%26 + ord('a')))\n            elif c.isupper():\n                ans.append(chr((ord(c) - ord('A') - diff)%26 + ord('A')))\n            else:\n                ans.append(c)\n        output = ''.join(ans)\n    else:\n        output = swapped\n    with open(outfile,'w',encoding='utf-8') as f:\n        f.write(output)\n\ndef main(argv):\n    cmd, f1, f2 = argv\n    if cmd == 'count':\n        d = count_letters_space(f1)\n        with open(f2,'w',encoding='utf-8') as g:\n            json.dump(d, g)\n    elif cmd == 'space':\n        ch = find_swapped_space(f1)\n        with open(f2,'w',encoding='utf-8') as g:\n            json.dump({'char':ch}, g)\n    elif cmd == 'decrypt':\n        recover(f1, f2)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2679, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int flag=0,argvnew;\n    argvnew=atoi(argv[i]);\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    int test=argvnew;\n    while(test>0)\n    {\n      int check=test%10;\n      if(check==3)\n      {\n        flag=1;\n      }\n      test=test/10;\n    }\n    if(flag==1 && (argvnew%3)==0 && argvnew!=0)\n    {\n      printf(\"dumb\\n\");\n    }\n    else if((argvnew%3)==0 && argvnew!=0)\n    {\n      printf(\"idiot\\n\");\n    }\n    else if(flag==1)\n    {\n      printf(\"stupid\\n\");\n    }\n    else if(flag!=1 && (argvnew%3)!=0)\n    {\n      printf(\"smart\\n\");\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n  }\n  return 0;\n}"}
{"id": 2680, "language": "Python3", "code": "#!/usr/bin/python\n# coding: UTF-8\n\nimport sys\nclass EightQueen:\n    def __init__(self,QList,Board,Qinput):\n        self.QList = QList\n        self.Board = Board\n        self.N = 8\n        self.Qinput = Qinput\n\n    def BoardUpdate(self,i,j,val):\n        for k in range(self.N):\n            self.Board[i][k] += val\n            self.Board[k][j] += val\n\n        if i>j:\n            for k in range(self.N-(i-j)):\n                self.Board[i-j +k][k] += val\n        else:\n            for k in range(self.N-(j-i)):\n                self.Board[k][j-i +k] += val\n\n        if i+j < self.N:#\u76e4\u9762\u306e\u5de6\u4e0a\u534a\u5206\u306a\u3089\n            for k in range(i+j):\n                self.Board[i+j-k][k] += val\n        else:\n            start = i+j-self.N + 1\n            for k in range(start, self.N):\n                self.Board[i+j - k][k] += val\n\n\n    def FindQueen(self,i):\n        if i == self.N:\n            for q in self.Qinput:\n                if self.QList[q[0]] != q[1]:\n                    break\n            else:\n                self.PrintQueen()\n            return 1\n        for j in range(self.N):\n            if self.Board[i][j] == 0:\n                self.QList.append(j)\n                self.BoardUpdate(i,j,1)        \n                self.FindQueen(i+1)\n                self.BoardUpdate(i,j,-1)\n                self.QList.pop(-1)\n\n    \n    def PrintQueen(self):\n        for i in self.QList:\n            for j in range(self.N):\n                if j == i:\n                    print(\"Q\",end=\"\")\n                else:\n                    print(\".\",end=\"\")\n            print(\"\")\n        print(\"\")\n    \ndef main(argv):\n    N = 8\n    f = open(argv)\n    line = f.readline()\n    Q = int(line)\n    line = f.readline()\n    Qinput = []\n    while line:\n        a,b=map(int,line.split())\n        #print(st)\n        Qinput.append([a,b])\n        line = f.readline()\n    f.close()\n    Board = [[0]*N for _ in range(N)]\n    QList = []\n    eq = EightQueen(QList,Board,Qinput)\n    eq.FindQueen(0)#0\u884c\u76ee\u306e\u30af\u30a4\u30fc\u30f3\u304b\u3089\u958b\u59cb\nif __name__ == '__main__':\n    main(sys.argv[1])"}
{"id": 2681, "language": "Python3", "code": "import sys\n\ndef evaluate_input(num_str):\n    # \u5165\u529b\u3092\u8a55\u4fa1\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u5217\u3092\u8fd4\u3059\n    if not num_str.isdigit():\n        return \"invalid\"\n    \n    num = int(num_str)\n    if num < 0 or num > 1000:\n        return \"invalid\"\n    \n    has_three = '3' in num_str\n    is_multiple_of_3 = (num % 3 == 0)\n    \n    if is_multiple_of_3 and has_three:\n        return \"dumb\"\n    elif is_multiple_of_3:\n        return \"idiot\"\n    elif has_three:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    # \u7d50\u679c\u3092\u51fa\u529b\n    results = []\n    for arg in argv:\n        result = evaluate_input(arg)\n        results.append(result)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2682, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'):\n    print(\"stupid\\ninvalid\")\n  else:\n    rk=[]\n    for ra in argv:\n      rk.append(ra)\n    for ra in rk:\n      if(ra.isnumeric()):\n        if('3' in ra):\n          if(int(ra)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(ra)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\n\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2683, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t    String[] ar = args[0].split(\" \");\n\t\t    for(int i = 0; i < ar.length; i++) {\n                        System.out.println(p(ar[i]));\n                    }\n\t}\n        \n        private static String p(String x) {\n            try {\n                int c = Integer.parseInt(x);\n                if(c >= 0 && c <= 1000) {\n                        boolean b = true;\n                        for(int l = 0; l < x.length(); l++) {\n                            if(x.charAt(l) == '3') {\n                                if(c % 3 == 0) \n                                    return \"dumb\";\n                                \n                                else \n                                    return \"stupid\";\n                            }\n                        }\n                        if(c % 3 == 0) {\n                            return \"idiot\";\n                        } else return \"smart\";\n                      \n                }\n            } catch(Exception e) {\n                return \"invalid\";\n            }\n            return \"invalid\";\n        }\n}\n"}
{"id": 2684, "language": "C#", "code": "using System;\n\npublic class IdiotsChecker\n{\n    public static void Main(string[] args)\n    {\n        // Analyze command line inputs based on the algorithm's rules.\n        foreach (string arg in args)\n        {\n            if (IsValidInput(arg, out int value))\n            {\n                CheckValue(value, arg);\n            }\n            else\n            {\n                Console.WriteLine(\"invalid\");\n            }\n        }\n    }\n\n    private static bool IsValidInput(string input, out int number)\n    {\n        return int.TryParse(input, out number) && number >= 0 && number <= 1000;\n    }\n\n    private static void CheckValue(int num, string input)\n    {\n        if (num % 3 == 0 && input.Contains('3'))\n            Console.WriteLine(\"dumb\");\n        else if (num % 3 == 0)\n            Console.WriteLine(\"idiot\");\n        else if (input.Contains('3'))\n            Console.WriteLine(\"stupid\");\n        else\n            Console.WriteLine(\"smart\");\n    }\n}"}
{"id": 2685, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = int(sys.stdin.readline())\n    init_queens = set()\n    used_cols = set()\n    used_diag = set()\n    used_rdiag = set()\n    grid = [['.']*8 for _ in range(8)]\n    pre_rows = set()\n    for _ in range(n):\n        r, c = map(int, sys.stdin.readline().split())\n        grid[r][c] = 'Q'\n        init_queens.add((r, c))\n        pre_rows.add(r)\n        used_cols.add(c)\n        used_diag.add(r-c)\n        used_rdiag.add(r+c)\n    def recur(row):\n        if row == 8:\n            for line in grid:\n                print(\"\".join(line))\n            sys.exit(0)\n        if row in pre_rows:\n            recur(row+1)\n            return\n        for col in range(8):\n            if col in used_cols or (row-col) in used_diag or (row+col) in used_rdiag:\n                continue\n            grid[row][col] = 'Q'\n            used_cols.add(col)\n            used_diag.add(row-col)\n            used_rdiag.add(row+col)\n            recur(row+1)\n            grid[row][col] = '.'\n            used_cols.remove(col)\n            used_diag.remove(row-col)\n            used_rdiag.remove(row+col)\n    recur(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2686, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define ALPHABET_SIZE 26\n#define BUFFER_SIZE 1024\n\nvoid count_frequencies(const char *input_file, const char *output_file);\nvoid identify_space(const char *input_file, const char *output_file);\nvoid decrypt_text(const char *input_file, const char *output_file);\n\nint main(int argc, char *argv[]) {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u30c1\u30a7\u30c3\u30af\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s <command> <input file> <output file>\\n\", argv[0]);\n        return 1;\n    }\n\n    if (strcmp(argv[1], \"count\") == 0) {\n        count_frequencies(argv[2], argv[3]);\n    } else if (strcmp(argv[1], \"space\") == 0) {\n        identify_space(argv[2], argv[3]);\n    } else if (strcmp(argv[1], \"decrypt\") == 0) {\n        decrypt_text(argv[2], argv[3]);\n    } else {\n        fprintf(stderr, \"Invalid command. Use 'count', 'space', or 'decrypt'.\\n\");\n        return 1;\n    }\n\n    return 0;\n}\n\nvoid count_frequencies(const char *input_file, const char *output_file) {\n    FILE *infile = fopen(input_file, \"r\");\n    if (!infile) {\n        perror(\"Error opening input file\");\n        return;\n    }\n\n    int frequencies[ALPHABET_SIZE * 2 + 1] = {0}; // Upper, lower cases and space\n    int ch;\n\n    while ((ch = fgetc(infile)) != EOF) {\n        if (isupper(ch)) {\n            frequencies[ch - 'A']++;\n        } else if (islower(ch)) {\n            frequencies[ALPHABET_SIZE + ch - 'a']++;\n        } else if (ch == ' ') {\n            frequencies[ALPHABET_SIZE * 2]++;\n        }\n    }\n\n    fclose(infile);\n\n    FILE *outfile = fopen(output_file, \"w\");\n    if (!outfile) {\n        perror(\"Error opening output file\");\n        return;\n    }\n\n    fprintf(outfile, \"{\\n\");\n    for (char c = 'A'; c <= 'Z'; c++) {\n        fprintf(outfile, \"  \\\"%c\\\": %d,\\n\", c, frequencies[c - 'A']);\n    }\n    for (char c = 'a'; c <= 'z'; c++) {\n        fprintf(outfile, \"  \\\"%c\\\": %d,\\n\", c, frequencies[ALPHABET_SIZE + c - 'a']);\n    }\n    fprintf(outfile, \"  \\\" \\\": %d\\n\", frequencies[ALPHABET_SIZE * 2]);\n    fprintf(outfile, \"}\\n\");\n\n    fclose(outfile);\n}\n\nvoid identify_space(const char *input_file, const char *output_file) {\n    FILE *infile = fopen(input_file, \"r\");\n    if (!infile) {\n        perror(\"Error opening input file\");\n        return;\n    }\n\n    int frequencies[ALPHABET_SIZE] = {0};\n    int ch;\n\n    while ((ch = fgetc(infile)) != EOF) {\n        if (islower(ch)) {\n            frequencies[ch - 'a']++;\n        }\n    }\n\n    fclose(infile);\n\n    int max_freq = 0;\n    char space_char = 'a';\n    for (int i = 0; i < ALPHABET_SIZE; i++) {\n        if (frequencies[i] > max_freq) {\n            max_freq = frequencies[i];\n            space_char = 'a' + i;\n        }\n    }\n\n    FILE *outfile = fopen(output_file, \"w\");\n    if (!outfile) {\n        perror(\"Error opening output file\");\n        return;\n    }\n\n    fprintf(outfile, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n    fclose(outfile);\n}\n\nvoid decrypt_text(const char *input_file, const char *output_file) {\n    FILE *infile = fopen(input_file, \"r\");\n    if (!infile) {\n        perror(\"Error opening input file\");\n        return;\n    }\n\n    char buffer[BUFFER_SIZE];\n    size_t length = 0;\n\n    char space_char = 'a'; // Assume 'space_char' identified previously\n    int shift = 0; // Assume a detected shift value based on other analysis\n\n    FILE *outfile = fopen(output_file, \"w\");\n    if (!outfile) {\n        perror(\"Error opening output file\");\n        fclose(infile);\n        return;\n    }\n\n    while (fgets(buffer, BUFFER_SIZE, infile)) {\n        length = strlen(buffer);\n        for (size_t i = 0; i < length; i++) {\n            char ch = buffer[i];\n            if (islower(ch)) {\n                if (ch == space_char) {\n                    fputc(' ', outfile);\n                } else {\n                    fputc(((ch - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a', outfile);\n                }\n            } else if (isupper(ch)) {\n                fputc(((ch - 'A' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'A', outfile);\n            } else {\n                fputc(ch, outfile);\n            }\n        }\n    }\n\n    fclose(infile);\n    fclose(outfile);\n}"}
{"id": 2687, "language": "C++", "code": "#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nvoid Test( int num ) {\n  int dkdd[ 7 ] = { 0, 1, 0, 0, 1, 0, 1 };\n  int buf[ 7 ] = { 0 };\n  int buf_count = 0;\n  int match_num = 0;\n  for ( int index = 0; index < num; index++ ) {\n    int v = rand() % 2;\n    if ( v == 0 ) {\n      printf( \"\u30c9\\n\" );\n    }\n    else {\n      printf( \"\u30ab\\n\" );\n    }\n\n    // \u30d0\u30c3\u30d5\u30a1\u306b\u76f4\u8fd17\u624b\u3092\u683c\u7d0d\u3059\u308b\n    if ( buf_count >= 7 ) {\n      // \u8a70\u3081\u308b\n      for ( int buf_index = 0; buf_index < 6; buf_index++ ) {\n        buf[ buf_index ] = buf[ buf_index + 1 ];\n      }\n      buf[ 6 ] = v;\n    }\n    else {\n      buf[ buf_count ] = v;\n      buf_count++;\n    }\n\n    if ( buf_count >= 7 ) {\n      // \u30d0\u30c3\u30d5\u30a1\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n      int count = 0;\n      for ( int buf_index = 0; buf_index < 7; buf_index++ ) {\n        if ( buf[ buf_index ] == dkdd[ buf_index ] ) {\n          count++;\n        }\n      }\n      if ( count == 7 ) {\n        match_num++;\n        printf( \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\" );\n        return ;\n      }\n    }\n  }\n  if ( match_num == 0 ) {\n    printf( \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\" );\n    return ;\n  }\n\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n\n  for (int i = 1; i < argc; i++) {\n    // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    int num = atoi( argv[ i ] );\n    Test( num );\n  }\n\n\n  \n  return 0;\n}\n"}
{"id": 2688, "language": "Java", "code": "package track;\n\npublic class App {\n    public static void main(String[] args) {\n        // Handle command line arguments and produce output\n\n        for (String arg : args) {\n            if (isValidInteger(arg)) {\n                int num = Integer.parseInt(arg);\n                if (num >= 0 && num <= 1000) {\n                    processNumber(num);\n                } else {\n                    System.out.println(\"invalid\");\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isValidInteger(String s) {\n        return s.chars().allMatch(Character::isDigit);\n    }\n\n    private static void processNumber(int num) {\n        boolean divisibleBy3 = (num % 3 == 0);\n        boolean hasThree = String.valueOf(num).contains(\"3\");\n\n        if (divisibleBy3 && hasThree) {\n            System.out.println(\"dumb\");\n        } else if (divisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (hasThree) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 2689, "language": "Python3", "code": "import sys\n\n# Global constant for the size of the chessboard\nBOARD_DIM = 8\n\n# Global lists to store queen positions and track conflicts\nqueens_cols_pos = [-1] * BOARD_DIM # stores the column index for the queen in each row\ncol_is_taken = [False] * BOARD_DIM # flags if a column is occupied\ndiag_sum_is_taken = [False] * (2 * BOARD_DIM - 1) # flags if an r+c diagonal is occupied\ndiag_diff_is_taken = [False] * (2 * BOARD_DIM - 1) # flags if an r-c diagonal is occupied (with offset)\n\ndef display_final_board():\n    # Prints the 8x8 chessboard with 'Q' for queens and '.' for empty squares\n    for r in range(BOARD_DIM):\n        line_chars = ['.'] * BOARD_DIM # Initialize row with dots\n        line_chars[queens_cols_pos[r]] = 'Q' # Place queen in its column\n        print(''.join(line_chars)) # Print the completed row\n\ndef find_a_solution(current_row_idx):\n    # Base case: If we have successfully placed queens in all 8 rows\n    if current_row_idx == BOARD_DIM:\n        display_final_board() # Print the solution found\n        return True # Indicate success\n\n    # If there's already a queen in this row from the initial input, skip it\n    if queens_cols_pos[current_row_idx] != -1:\n        return find_a_solution(current_row_idx + 1) # Move to the next row\n\n    # Try placing a queen in each column of the current row\n    for target_col_idx in range(BOARD_DIM):\n        # Calculate diagonal indices\n        sum_val = current_row_idx + target_col_idx\n        diff_val = current_row_idx - target_col_idx + BOARD_DIM - 1 # Adjust for non-negative index\n\n        # Check if the current position is safe (no conflicts)\n        if not col_is_taken[target_col_idx] and \\\n           not diag_sum_is_taken[sum_val] and \\\n           not diag_diff_is_taken[diff_val]:\n\n            # Place queen: Update global state arrays\n            queens_cols_pos[current_row_idx] = target_col_idx\n            col_is_taken[target_col_idx] = True\n            diag_sum_is_taken[sum_val] = True\n            diag_diff_is_taken[diff_val] = True\n\n            # Recurse: Attempt to place a queen in the next row\n            if find_a_solution(current_row_idx + 1):\n                return True # If solution found in deeper recursion, propagate True\n\n            # Backtrack: Undo the queen placement if it didn't lead to a solution\n            col_is_taken[target_col_idx] = False\n            diag_sum_is_taken[sum_val] = False\n            diag_diff_is_taken[diff_val] = False\n            queens_cols_pos[current_row_idx] = -1 # Mark as empty\n\n    return False # No safe column found in this row\n\ndef main(argv):\n    # Read the number of pre-placed queens from input\n    num_preplaced = int(sys.stdin.readline())\n    \n    # Process each pre-placed queen's coordinates\n    for _ in range(num_preplaced):\n        r_coord, c_coord = map(int, sys.stdin.readline().split())\n        \n        # Place the initial queen and update conflict tracking\n        queens_cols_pos[r_coord] = c_coord\n        col_is_taken[c_coord] = True\n        diag_sum_is_taken[r_coord + c_coord] = True\n        diag_diff_is_taken[r_coord - c_coord + BOARD_DIM - 1] = True\n\n    # Start the backtracking process from the first row (row 0)\n    find_a_solution(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2690, "language": "Python3", "code": "import sys\n\ndef evaluate_input(arg):\n    try:\n        num = int(arg)\n        if num < 0 or num > 1000:\n            return \"invalid\"\n        if num % 3 == 0 and '3' in arg:\n            return \"dumb\"\n        elif num % 3 == 0:\n            return \"idiot\"\n        elif '3' in arg:\n            return \"stupid\"\n        else:\n            return \"smart\"\n    except:\n        return \"invalid\"\n\ndef main(argv):\n    results = []\n    for x in argv:\n        results.append(evaluate_input(x))\n    print(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2691, "language": "C++", "code": "/*\n By shyyhs.\n HP: shyyhs.net\n Github: https://github.com/shyyhs/\n*/\n#include<iostream>\n#include<fstream>\n#include<cstdio>\n#include<cstdlib>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<ctime>\n#include<random>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<deque>\n#include<map>\n#include<set>\n#include<tuple>\nusing namespace std;\n#define ll long long\nFILE* fin;\nFILE* fout;\nint fre[3000]={0};\ndouble frep[300]={0.0};\nint sc;\nchar p[300000];\nint top=0;\n\nchar c;\n\nchar ansc='e'; \ndouble maxf=0;\n\nvoid init()\n{\n    memset(fre,0,sizeof(fre));\n    memset(frep,0,sizeof(frep));\n    sc=0;\n    maxf=0;\n    ansc=0;\n\n    for (int i=0; i<top; ++i)\n        if (p[i]>=0)\n            fre[p[i]]++;\n    for (int i=0; i<256; ++i)\n        if ((i>='a' && i<='z') || (i>='A' && i<='Z'))\n            sc+=fre[i];\n    for (int i=0; i<256; ++i)\n        if ((i>='a' && i<='z') || (i>='A' && i<='Z'))\n            frep[i]=double(fre[i])/sc;\n    for (int i=0; i<256; ++i)\n        if (i>='a' && i<='z')\n            if (frep[i]>maxf)\n            {\n                maxf=frep[i];\n                ansc=i;\n            }\n}\nvoid count()\n{\n    fprintf(fout,\"{\\n\");\n    for (int i=0; i<256; ++i)\n        if ((i>='a' && i<='z') || (i>='A' && i<='Z') || (i==' '))\n        {\n            if (i!='z') fprintf(fout,\"  \\\"%c\\\":%d,\\n\",char(i),fre[i]);\n            else fprintf(fout,\"  \\\"%c\\\":%d\\n\",char(i),fre[i]);\n        }\n    fprintf(fout,\"}\\n\");\n}\n\nvoid space()\n{\n    fprintf(fout,\"{\\\"char\\\":\\\"%c\\\"}\",ansc);\n}\n\nvoid decrypt()\n{\n    int loc='e';\n    int dir=0;\n    for (int i=0; i<top; ++i)\n    {\n        if (p[i]==' ') p[i]=ansc;\n        else if (p[i]==ansc) p[i]=' ';\n    }\n\n    init();\n    dir=ansc-loc;\n    for (int i=0; i<top; ++i)\n    {\n        if (p[i]>='a' && p[i]<='z') \n        {\n            p[i]-=dir;\n            if (p[i]<'a') p[i]+=26;\n            if (p[i]>'z') p[i]-=26;\n        } \n        if (p[i]>='A' && p[i]<='Z')\n        {\n            p[i]-=dir;\n            if (p[i]<'A') p[i]+=26;\n            if (p[i]>'Z') p[i]-=26;\n        }\n        fprintf(fout,\"%c\",p[i]);\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    fin = fopen(argv[2],\"r\");\n    fout = fopen(argv[3],\"w\");\n    while (fscanf(fin,\"%c\",&c)!=EOF) p[top++]=c;\n    init();\n    if (strncmp(argv[1],\"count\",10)==0) count();\n    if (strncmp(argv[1],\"space\",10)==0) space();\n    if (strncmp(argv[1],\"decrypt\",10)==0) decrypt();\n    return 0;\n}\n"}
{"id": 2692, "language": "Java", "code": "package track;\n\npublic class EvaluationApp {\n    public static void main(String[] args) {\n        // Evaluates input and determines output according to the algorithm\n\n        for (String arg : args) {\n            int num;\n            if (isDigit(arg)) {\n                num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    evaluate(num);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isDigit(String str) {\n        return str.chars().allMatch(Character::isDigit);\n    }\n\n    private static void evaluate(int num) {\n        boolean isDiv3 = (num % 3 == 0);\n        boolean has3 = String.valueOf(num).contains(\"3\");\n\n        if (isDiv3 && has3) {\n            System.out.println(\"dumb\");\n        } else if (isDiv3) {\n            System.out.println(\"idiot\");\n        } else if (has3) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 2693, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try{\n        Integer in = Integer.parseInt(args[i]);\n        int m=in,count=0,j=0,num=0;\n        while(m>0){\n          m=m/10;\n          count++;\n        }\n        int[] arr=new int[count];\n        m=in;\n        while(m>0){\n          arr[j]=m%10;\n          if(arr[j]==3){\n            num=1;\n          }\n          m=m/10;\n          j++;\n        }\n        if(in%3 == 0 && num == 1)\n            System.out.println(\"dumb\");\n        else if(in%3 == 0)\n             System.out.println(\"idiot\");      \n        else if(num == 1)\n          System.out.println(\"stupid\");\n        else\n          System.out.println(\"smart\");\n        \n      }\n      catch(NumberFormatException | NullPointerException nfe){\n        System.out.println(\"invalid\");\n      }\n      \n    }\n\n    \n  }\n}\n"}
{"id": 2694, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <random>\n#include <string>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n    return 0;\n  }\n  int limit = atoi(argv[1]);\n  if (limit <= 0) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n    return 0;\n  }\n  string pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  string log = \"\";\n  random_device rd;\n  mt19937 gen(rd());\n  uniform_int_distribution<> dis(0, 1);\n\n  for (int i = 0; i < limit; ++i) {\n    char ch = (dis(gen) == 0) ? '\u30c9' : '\u30ab';\n    cout << ch << endl;\n    log += ch;\n    if (log.size() > pattern.size())\n      log.erase(0, log.size() - pattern.size());\n    if (log.size() >= pattern.size() && log.compare(log.size() - pattern.size(), pattern.size(), pattern) == 0) {\n      cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n      return 0;\n    }\n  }\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n  return 0;\n}"}
{"id": 2695, "language": "Python3", "code": "import sys\n\ndef determine_category(s_repr):\n    if not s_repr.isdigit():\n        return \"invalid\"\n    \n    n_repr = int(s_repr)\n    \n    if not (0 <= n_repr <= 1000):\n        return \"invalid\"\n\n    mod_3_zero = (n_repr % 3 == 0)\n    str_has_3 = ('3' in s_repr)\n\n    if mod_3_zero and str_has_3:\n        return \"dumb\"\n    elif mod_3_zero:\n        return \"idiot\"\n    elif str_has_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef program_entry(cmd_line_args):\n    for val_s in cmd_line_args:\n        print(determine_category(val_s))\n\nif __name__ == '__main__':\n    program_entry(sys.argv[1:])"}
{"id": 2696, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\npublic class App {\n  public static void main(String[] args) {\n    \n     ArrayList<Integer> i = new ArrayList<Integer>();\n        ArrayList<Integer> j = new ArrayList<Integer>();\n        int k = 0;\n        try {\n            File file = new File(args[0]);\n            FileReader filereader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(filereader);\n            String data;\n            int x = 0;\n\n            while ((data = bufferedReader.readLine()) != null) {\n                if (x == 0) {\n                    k = Integer.parseInt(data);\n                } else {\n                    if (x <= k) {\n                        String[] str = data.split(\" \");\n                        i.add(Integer.parseInt(str[0]));\n                        j.add(Integer.parseInt(str[1]));\n                    }\n                }\n                x++;\n            }\n            filereader.close();\n            EightQueen g = new EightQueen(i, j, k);\n            g.solveNQ();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n  }\n}\nclass EightQueen {\n    int N = 8;\n    ArrayList<Integer> iData;\n    ArrayList<Integer> jData;\n\n    int kValue;\n\n    EightQueen(ArrayList<Integer> i, ArrayList<Integer> j, int k) {\n        this.iData = i;\n        this.jData = j;\n        this.kValue = k;\n    }\n\n    void printSolution(int board[][]) {\n\n        boolean reslt = true;\n        //check queens are in expected places\n        for (int x = 0; x < kValue; x++) {\n            if (board[iData.get(x)][jData.get(x)] != 1) {\n                reslt = false;\n            }\n        }\n        //if queens are in expected places print the result\n        if (reslt == true) {\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < N; j++)\n                    if (board[i][j] == 1) {\n                        System.out.printf(\"%S\", \"Q\");\n                    } else {\n                        System.out.printf(\"%S\", \".\");\n                    }\n\n                System.out.printf(\"\\n\");\n            }\n        }\n\n    }\n\n    boolean isSafe(int board[][], int row, int col) {\n        int i, j;\n//Check row  left side\n        for (i = 0; i < col; i++)\n            if (board[row][i] == 1)\n                return false;\n//Check upper diagonal in left side\n        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)\n            if (board[i][j] == 1)\n                return false;\n/* Check lower diagonal in left side */\n        for (i = row, j = col; j >= 0 && i < N; i++, j--)\n            if (board[i][j] == 1)\n                return false;\n\n        return true;\n    }\n\n    boolean solveNQUtil(int board[][], int col) {\n/*If all queens are placed  then return true*/\n        if (col == N) {\n            printSolution(board);\n            return true;\n        }\n/* Consider this column and try placing \n    this queen in all rows one by one */\n        boolean res = false;\n        for (int i = 0; i < N; i++) {\n\n            if (isSafe(board, i, col)) {\n                board[i][col] = 1;\n                res = solveNQUtil(board, col + 1) || res;\n\n                board[i][col] = 0; \n            }\n        }\n\n        return res;\n    }\n\n    void solveNQ() {\n        int board[][] = new int[N][N];\n        if (solveNQUtil(board, 0) == false) {\n            System.out.printf(\"Solution does not exist\");\n            return;\n        }\n        return;\n    }\n}"}
{"id": 2697, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(0);\n\t\t}\n\t}\n}\n"}
{"id": 2698, "language": "Python3", "code": "import sys\n\ndef calculate_result(input_str):\n    # Verify input validity\n    if not input_str.isdigit() or not (0 <= int(input_str) <= 1000):\n        return \"invalid\"\n\n    input_num = int(input_str)\n    divisible = input_num % 3 == 0\n    contains_three = '3' in input_str\n\n    if divisible and contains_three:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif contains_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(input_args):\n    for raw in input_args:\n        print(calculate_result(raw))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2699, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    int r,t,f=0;\n    t=atoi(argv[i]);\n    while(t>0)\n    {\n      r=t%10;\n      if(r==3)\n      {\n        f=1;\n        break;\n      }\n      t=t/10;\n    }\n   // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n   if((atoi(argv[i])%3==0)&&(f==1))\n   {\nprintf(\"dumb\\n\");\n   }\n   else if(f==1)\n   {\n     printf(\"stupid\\n\");\n   }\n   else if(atoi(argv[i])%3==0)\n   {\n     printf(\"idiot\\n\");\n   }\n   else if((atoi(argv[i])%3!=0)&&(f!=1))\n   {\n     printf(\"smart\\n\");\n   }\n   else\n   {\n     printf(\"invalid\\n\");\n   }\n  }\n  return 0;\n}\n"}
{"id": 2700, "language": "Python3", "code": "import sys\nimport random\n\ndef main(args):\n    # check args\n    if len(args) != 1:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    try:\n        n = int(args[0])\n    except:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    if not (0 <= n <= 10000):\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n    if n == 0:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    result = []\n    magic = ['\u30c9','\u30ab','\u30c9','\u30c9','\u30ab','\u30c9','\u30ab']\n    for i in range(n):\n        t = random.choice(['\u30c9','\u30ab'])\n        print(t)\n        result.append(t)\n        if len(result)>=7 and result[-7:] == magic:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2701, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    if (!is_numeric($value)) {      \n      printf(\"invalid\\n\");\n    } else if ($value % 3 == 0 && str_replace(3, '', $value) != $value) {\n      printf(\"dumb\\n\");\n    } else if ($value % 3 == 0) {\n      printf(\"idiot\\n\");\n    } else if (str_replace(3, '', $value) != $value) {\n      printf(\"stupid\\n\");\n    } else {\n      printf(\"smart\\n\");\n    }\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 2702, "language": "Java", "code": "package track;\n\npublic class App {    \n  public static void main(String[] args) {\n        for (int i = 0, l = args.length; i < l; i++) {\n            printOutPut(args[i]);\n        }\n    }\n\n    public static void printOutPut(String inputString) {\n        try {\n            int number = Integer.parseInt(inputString);\n            if (checkDivisibleByThree(number) && checkIncludesNumberThree(number)) {\n                System.out.println(\"dumb\");\n\n            } else {\n                if (checkIncludesNumberThree(number)) {\n                    System.out.println(\"stupid\");\n                } else if (checkDivisibleByThree(number)) {\n                    System.out.println(\"idiot\");\n\n                } else {\n                    System.out.println(\"smart\");\n                }\n            }\n\n        } catch (NumberFormatException e) {\n            System.out.println(\"invalid\");\n        }\n    }\n\n    public static boolean checkDivisibleByThree(int number) {\n        int temp = number % 3;\n        return temp == 0;\n    }\n\n    public static boolean checkIncludesNumberThree(int number) {\n        String numberString = Integer.toString(number);\n        boolean inIncluded = false;\n        String three = \"3\";\n        inIncluded = numberString.toLowerCase().contains(three.toLowerCase());\n        return inIncluded;\n    }\n\n    public static boolean checkDivisibleThreeAndIncludeNumberThree(int number) {\n\n        return checkIncludesNumberThree(number) && checkDivisibleByThree(number);\n    }\n}\n"}
{"id": 2703, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    n = int(argv[0]) if argv else 0\n    seq = []\n    target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n\n    for _ in range(n):\n        c = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(c)\n        seq.append(c)\n        if \"\".join(seq[-len(target):]) == target:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2704, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  #for i, v in enumerate(argv):\n  #  print(\"argv[{0}]: {1}\".format(i, v))\n\n  #\u30ed\u30fc\u30de\u6570\u5b57\u3067\u4f7f\u7528\u3059\u308b\u6570\u5b57\u3092\u30ea\u30b9\u30c8\u3067\u5b9a\u7fa9\u3059\u308b\n  list_1 = [\"I\",\"V\",\"X\",\"L\",\"C\",\"D\",\"M\"]\n  \n  #\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u3001\u305f\u3060\u30570\u306e\u5834\u5408\u306f\u7a7a\u6587\u5b57\u3068\u3059\u308b\n  def change(a,i):\n  \tif a == 0:\n  \t\treturn \"\"\n  \tif a != 0:\n  \t\tif a <= 3:\n  \t\t\tx = list_1[i]*a\n  \t\telif a >= 4 and a <= 8:\n  \t\t\tb = a - 5\n  \t\t\tif b == -1:\n  \t\t\t\tx = list_1[i] + list_1[i+1]\n  \t\t\telse:\n  \t\t\t\tx = list_1[i+1] + list_1[i]*b\n  \t\telif a == 9:\n  \t\t\tx = list_1[i] + list_1[i+2]\n  \t\treturn x\n  \n  for v in argv:\n    #\u6570\u5b57\u30924\u6841\u306b\u63c3\u3048\u308b\n    v = str(v).zfill(4)\n    #\u4e0b\u8a18\u306e\u5b9f\u884c\u3067\u6570\u5b57\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u305d\u308c\u305e\u308c\u3092\u30ed\u30fc\u30de\u6570\u5b57\u306b\u5909\u63db\u3057\u3001\u5408\u6210\u3059\u308b\n    #1\u6841\u76ee\n    num1 = change(int(v[3]),0)\n    #2\u6841\u76ee\n    num2 = change(int(v[2]),2)\n    #3\u6841\u76ee\n    num3 = change(int(v[1]),4)\n    #4\u6841\u76ee\n    num4 = change(int(v[0]),6)\n    num = num4 + num3 + num2 + num1\n    \t\t\t\n    return num\n\n\n\nif __name__ == '__main__':\n  print(main(sys.argv[1:]))\n"}
{"id": 2705, "language": "C++", "code": "#include<iostream>\n#include<cassert>\nusing namespace std;\n \n#define N 8\n#define FREE -1\n#define NOT_FREE 1\n \nint row[N], col[N], dpos[2 * N - 1], dneg[2 * N - 1];\n \nbool X[N][N];\n \nvoid initialize() {\n  for ( int i = 0; i < N; i++ ) { row[i] = FREE; col[i] = FREE; }\n  for ( int i = 0; i < 2 * N - 1; i++ ) { dpos[i] = FREE; dneg[i] = FREE; }\n}\n \nvoid printBoard() {\n  for ( int i = 0; i < N; i++ )\n    for ( int j = 0; j < N; j++ )\n      if ( X[i][j] )\n        if ( row[i] != j ) return;\n \n  for ( int i = 0; i < N; i++ ) {\n    for ( int j = 0; j < N; j++ )\n      cout << ( ( row[i] == j ) ? \"Q\" : \".\" );\n    cout << endl;\n  }\n}\n \nvoid recursive(int i) {\n  if ( i == N ) {\n    printBoard(); return;\n  }\n \n  for ( int j = 0; j < N; j++ ) {\n    if ( NOT_FREE == col[j] ||\n         NOT_FREE == dpos[i + j] ||\n         NOT_FREE == dneg[i - j + N - 1] ) continue;\n    row[i] = j; col[j] = dpos[i + j] = dneg[i - j + N - 1] = NOT_FREE;\n    recursive(i + 1);\n    row[i] = col[j] = dpos[i + j] = dneg[i - j + N - 1] = FREE;\n  }\n}\n \nint main() {\n  initialize();\n \n  for ( int i = 0; i < N; i++ )\n    for ( int j = 0; j < N; j++ ) X[i][j] = false;\n \n  int k; cin >> k;\n  for ( int i = 0; i < k; i++ ) {\n    int r, c; cin >> r >> c;\n    X[r][c] = true;\n  }\n \n  recursive(0);\n \n  return 0;\n}"}
{"id": 2706, "language": "Python3", "code": "import sys\nimport json\nfrom collections import deque, defaultdict\n\ndef get_rps_outcome(opponent_choice):\n    \"\"\"Returns the hand that beats the given RPS choice.\"\"\"\n    # Rock (0) beats Scissors (1), Scissors (1) beats Paper (2), Paper (2) beats Rock (0)\n    # The pattern is (opponent_choice + 2) % 3\n    return (opponent_choice + 2) % 3\n\ndef run_simulation(game_records_data):\n    \"\"\"Simulates the robot's behavior to predict its next move.\"\"\"\n    # Initialize robot's historical plays.\n    r_hist = deque([0, 1, 2])\n    # Initialize opponent's last play.\n    o_last = 0\n    # Dictionary to track state occurrences for robot's cyclical decision.\n    state_to_next_index = defaultdict(int)\n\n    for entry in game_records_data:\n        # Capture the current decision state before the robot plays.\n        current_decision_state = tuple(list(r_hist) + [o_last])\n        \n        # Mark that this state has been encountered once more.\n        # The value of state_to_next_index[current_decision_state] (before increment)\n        # would determine the robot's play for this particular game.\n        state_to_next_index[current_decision_state] += 1\n        \n        # Update the robot's history with the move it just made.\n        r_hist.popleft()\n        r_hist.append(entry[\"robot\"])\n        \n        # Update the opponent's last move.\n        o_last = entry[\"you\"]\n\n    # After iterating through all records, determine the state for the *upcoming* game.\n    final_state_for_prediction = tuple(list(r_hist) + [o_last])\n    \n    # Predict the robot's specific hand for this state.\n    robot_predicted_hand = state_to_next_index[final_state_for_prediction] % 3\n    \n    # Return the hand that wins against the robot's predicted hand.\n    return get_rps_outcome(robot_predicted_hand)\n\ndef main(arguments_list):\n    # Main function to handle CLI input and output.\n    input_file = arguments_list[0]\n    \n    with open(input_file, 'r') as f_obj:\n        records_from_json = json.load(f_obj)\n\n    # Get the winning hand by simulating the robot's behavior.\n    result_hand = run_simulation(records_from_json)\n    \n    print(result_hand)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2707, "language": "Java", "code": "import java.util.Scanner;\n\npublic class EightQueensSolver {\n  static int N = 8;\n  static int[] cols = new int[N];\n  static boolean[] usedCols = new boolean[N];\n  static boolean[] usedDiag1 = new boolean[2 * N];\n  static boolean[] usedDiag2 = new boolean[2 * N];\n  static boolean found = false;\n\n  static void search(int row) {\n    if (row == N) {\n      found = true;\n      return;\n    }\n    if (cols[row] != -1) {\n      int c = cols[row];\n      if (!usedCols[c] && !usedDiag1[row + c] && !usedDiag2[row - c + N]) {\n        usedCols[c] = true; usedDiag1[row + c] = true; usedDiag2[row - c + N] = true;\n        search(row + 1);\n        if (found) return;\n        usedCols[c] = false; usedDiag1[row + c] = false; usedDiag2[row - c + N] = false;\n      }\n      return;\n    }\n    for (int c = 0; c < N; c++) {\n      if (usedCols[c] || usedDiag1[row + c] || usedDiag2[row - c + N]) continue;\n      cols[row] = c;\n      usedCols[c] = true; usedDiag1[row + c] = true; usedDiag2[row - c + N] = true;\n      search(row + 1);\n      if (found) return;\n      usedCols[c] = false; usedDiag1[row + c] = false; usedDiag2[row - c + N] = false;\n      cols[row] = -1;\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int k = sc.nextInt();\n    for (int i = 0; i < N; i++) cols[i] = -1;\n    for (int i = 0; i < k; i++) {\n      cols[sc.nextInt()] = sc.nextInt();\n    }\n    search(0);\n    for (int r = 0; r < N; r++) {\n      for (int c = 0; c < N; c++) {\n        System.out.print(cols[r] == c ? 'Q' : '.');\n      }\n      System.out.println();\n    }\n  }\n}"}
{"id": 2708, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    # use set to record rows, columns and diagonals that can still be used at current time point.\n    rowvalid, colvalid, diavalid1, diavalid2 =  set(range(8)),set(range(8)), set(range(2*8 - 1)), set(range(-(8-1),8))\n    res = []\n\n    # search by dfs\n    def dfs(rowvalid, colvalid,diavalid1,diavalid2, ans):\n        if not rowvalid:\n            newres = [\".\"*8 for _ in range(8)]\n            for (i, j) in ans:\n                newres[i] = \".\"* (j) + \"Q\" + \".\" * (8 - j - 1)\n            res.append(newres)\n            return \n        i = rowvalid[0]\n        for j in colvalid:\n            if i + j in diavalid1 and j - i in diavalid2:\n                colvalid.remove(j)\n                diavalid1.remove(i+j)\n                diavalid2.remove(j-i)\n                dfs(rowvalid[1:], colvalid, diavalid1, diavalid2, ans + [(i,j)])\n                colvalid.add(j)\n                diavalid1.add(i+j)\n                diavalid2.add(j-i)\n\n    # read in file, first insert the points that are already here\n    with open(argv[0], \"r\") as file:\n      lines = file.readlines()\n      k = int(lines[0])\n      ans = []\n      for line in lines[1:k+1]:\n        [i,j] = list(map(int,line.strip().split(\" \")))\n        ans.append([i,j])\n        rowvalid.remove(i)\n        colvalid.remove(j)\n        diavalid1.remove(i + j)\n        diavalid2.remove(j - i)\n    dfs(list(rowvalid), colvalid, diavalid1, diavalid2, ans)\n\n    # print answer line by line\n    for line in res[0]:\n      print(line)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2709, "language": "C", "code": "#include <stdio.h>\n#include<string.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) \n  {\n    char data[100];\n    strcpy(data,argv[i]);\n    int t1=-1,t2=-1;\n    for(int j=0;data[j]!='\\0';j++)\n    {\n      int ascii=data[j]-48;\n      if(ascii>=0 && ascii<3)\n      {\n        if(t1==-1)\n          t1=ascii;\n        else\n          t2=ascii;\n      }\n    }\n    printf(\"%d\",(3-t1+t2));\n  }\n  return 0;\n}\n"}
{"id": 2710, "language": "C++", "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<string> split(const string &str, char sep)\n{\n    vector<string> v;\n    stringstream ss(str);\n    string buffer;\n    while(getline(ss, buffer, sep)){\n        v.push_back(buffer);\n    }\n    return v;\n}\n\nint nineToTen(int v){\n  int result = 0;\n  int tmp = v;\n  int base = 1;\n  while(tmp > 0){\n    result += (tmp % 10)*base;\n    tmp = tmp / 10;\n    base = base*9;\n  }\n  return result;\n}\n\nint tenToNine(int v){\n  int result = 0;\n  int tmp = v;\n  int base = 1;\n  while(tmp > 0){\n    result += (tmp % 9)*base;\n    tmp = tmp / 9;\n    base = base*10;\n  }\n  return result;\n}\n\nint nine(string eq_str){\n  // split by space.\n  vector<string> v = split(eq_str, ' ');\n  // input values in decimal.\n  int val_1 = nineToTen(atoi(v[0].c_str()));\n  int val_2 = nineToTen(atoi(v[2].c_str()));\n  // calculation.\n  int result;\n  if (v[1] == \"+\"){\n    result = val_1 + val_2;\n  }\n  if (v[1] == \"*\"){\n    result = val_1 * val_2;\n  }\n  // return with nine decimal.\n  return tenToNine(result);\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    cout << nine(argv[i]) << endl;\n  }\n  return 0;\n}\n"}
{"id": 2711, "language": "Python3", "code": "import sys, json\n#from collections import Counter\n\n# \u306a\u305c\u304b\u30c6\u30b9\u30c8\u304c\u3046\u307e\u304f\u8d70\u3089\u306a\u3044\u3002(\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u305a\u30c6\u30b9\u30c8\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u306a\u3044\u3068\u6012\u3089\u308c\u308b\u3002)\n# \u9069\u5f53\u306a\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u3059\u3089\u4f5c\u308c\u306a\u3044\u3002\n# json.dump\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4e0e\u3048\u308b\u65b9\u6cd5\u306ftracks\u3067\u306f\u4f7f\u3048\u306a\u3044\u307f\u305f\u3044\n\ndef read_from_file(inpath):\n    ifile = open(inpath,'r')\n    r = ifile.read()\n    ifile.close()\n    return r\n\ndef write_to_file(outpath, str_data):\n    ofile = open(outpath,'w')\n    ofile.write(str_data)\n    ofile.close()\n\ndef write_to_json_file(outpath, json_data):\n    #\u3053\u306e\u65b9\u6cd5\u306f\u306a\u305c\u304btracks\u4e0a\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u304c\u66f8\u304d\u8fbc\u3081\u306a\u304b\u3063\u305f\u3002\n    # #with open(outpath, 'w') as outfile:\n    #    json.dump(json_data, outfile)\n    write_to_file(outpath,json.dumps(json_data))\n\n\ndef is_target(m):\n    n = ord(m)\n    if (65<=n and n<=90) or (97<=n and n<=122) or 32==n:\n        return True\n    return False\n\ndef countnstr(c_, n):\n    res_dict = {}\n    alphabet_list = [' ','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for a in alphabet_list:\n        res_dict[a] = 0\n    for i in range(len(c_)):\n        if i == len(c_)-(n-1):\n            break\n        t_ = ''\n        for j in range(i,i+n):\n            if(False==is_target(c_[j])):\n                break\n            t_ += c_[j]\n        if ''==t_:\n            continue\n        if t_ in res_dict:\n            if res_dict[t_]>0:\n                continue\n        res_dict[t_] = c_.count(t_)\n    return sorted(res_dict.items(), key=lambda x: -x[1])\n\ndef swap_space_target(c_,t):\n    indexes = list()\n    for i in range(len(c_)):\n        if 32==ord(c_[i]):\n            c_[i] = t\n            indexes.append(i)\n    for i in range(len(c_)):\n        if t==c_[i]:\n            if not (i in indexes):\n                c_[i] = ' '\n    return ''.join(c_)\n\ndef rot_n(c_, n_):\n    s=''\n    for i in c_:\n        n = ord(i)\n        if (65<=n and n<=90):\n            s+=chr((n-65+n_)%26+65)\n        elif(97<=n and n<=122):\n            s+=chr((n-97+n_)%26+97)\n        else:\n            s+=i\n    return s\n\n\nif __name__ == '__main__':\n    subcmd, inpath, outpath = sys.argv[1], sys.argv[2], sys.argv[3]\n\n    \n    #cntr = Counter(ifile.read())\n    if 'count'==subcmd:\n        write_to_json_file(outpath, dict(countnstr(read_from_file(inpath),1)))\n    if 'space'==subcmd:\n        # \u3068\u308a\u3042\u3048\u305a\u6700\u5927\u5024\n        alt_space = countnstr(read_from_file(inpath),1)[0]\n        write_to_json_file(outpath, {\"char\":alt_space[0]})\n        # \u672c\u5f53\u306f\n        # space\u306e\u4e88\u60f3\u51fa\u73fe\u56de\u6570 = \u6697\u53f7\u6587\u306e\u9577\u3055/4.5\n        # \u51fa\u73fe\u983b\u5ea6\u304c\u4e00\u756a\u8fd1\u3044\u3082\u306e\u3092space\u3068\u63a8\u5b9a\u3068\u3084\u308b\u3079\u304d\n    if 'decrypt'==subcmd:\n        cipher_text = read_from_file(inpath)\n        counted = countnstr(cipher_text,1)\n        alt_space = counted[0]\n        swaped_c = swap_space_target(list(cipher_text), alt_space[0])\n        alt_e = counted[1][0] # e\u3092\u63a8\u5b9a\n        # \u63a8\u5b9a\u3057\u305fe\u3068\u771f\u306ee\u306eascii\u30b3\u30fc\u30c9\u306e\u5dee\u5206\u304b\u3089\u3044\u304f\u3064\u305a\u3089\u3059\u304b\u63a8\u5b9a\u3059\u308b\n        n = ord(alt_e)\n        rot_num = 0\n        if (65<=n and n<=90):\n            rot_num = (n-ord('E'))%26\n        elif(97<=n and n<=122):\n            rot_num = (n-ord('e'))%26\n        write_to_file(outpath, rot_n(cipher_text, rot_num))\n"}
{"id": 2712, "language": "Python3", "code": "import sys\nfrom collections import Counter\nfrom pathlib import Path\nimport json\nimport string\n\n\ndef count(chars):\n    counter = Counter(chars)\n    counter.update({c: 0 for c in string.ascii_letters + ' '})\n\n    counter = Counter({k: v for k, v in counter.items()\n                       if k.encode('utf-8').isalpha() or k == ' '})\n\n    return counter\n\n\ndef space(chars):\n    counter = count(chars)\n    char, _ = counter.most_common(1)[0]\n\n    return {'char': char}\n\n\ndef get_re_shift_mapper(n_shift):\n    z_id = ord('z')\n    a_id = ord('a')\n\n    re_mapper = {}\n    for c in string.ascii_lowercase:\n        if ord(c) - n_shift >= a_id:\n            re_shifted_char = chr(ord(c) - n_shift)\n        else:\n            re_shifted_char = chr(ord(c) - n_shift - a_id + z_id + 1)\n\n        re_mapper.update({c: re_shifted_char,\n                          c.upper(): re_shifted_char.upper()})\n\n    return re_mapper\n\n\ndef decrypt(chars):\n    space_char = space(chars)['char']\n    space_mapper = {space_char: ' ', ' ': space_char}\n    chars = [space_mapper[c] if c in space_mapper else c for c in chars]\n    counter = count(chars)\n    e_char, _ = counter.most_common(2)[1]\n\n    n_shift = ord(e_char) - ord('e')\n    if n_shift < 0:\n        n_shift = ord(e_char) - ord('e') - ord('z') + ord('a') + 1\n        \n    re_mapper = get_re_shift_mapper(n_shift)\n\n    decrypted_text = ''.join(\n        [re_mapper[c] if c in re_mapper else c for c in chars]\n    )\n\n    return decrypted_text\n\n\ndef loadfile(input_path):\n    with open(input_path, 'r') as f:\n        chars = []\n        line = f.readline()\n        while True:\n            chars.extend(line)\n            line = f.readline()\n\n            if not line:\n                break\n\n    return chars\n\n\ndef out_json(output_path, data):\n    with output_path.open('w') as f:\n        json.dump(data, f)\n\n\ndef out_text(output_path, text):\n    with output_path.open('w') as f:\n        f.write(text)\n\n\ndef main(argv):\n    cmd = argv[0]\n    input_path = Path(argv[1])\n    output_path = Path(argv[2])\n\n    chars = loadfile(input_path)\n\n    if cmd == 'count':\n        out = count(chars)\n    elif cmd == 'space':\n        out = space(chars)\n    elif cmd == 'decrypt':\n        out = decrypt(chars)\n    else:\n        raise ValueError\n\n    if output_path.suffix == '.json':\n        out_json(output_path, out)\n    else:\n        out_text(output_path, out)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2713, "language": "Python3", "code": "import sys\n\nboard = []\n\ndef conflict(x, y):\n  for y1 in range(0, y):\n    x1 = board[y1]\n    if x1 - y1 == x - y or x1 + y1 == x + y:\n      return True\n  return False\n\ndef match_with_rcin(rcin, board):\n  if 1 == len(rcin) == len(board):\n    return rcin[0] == board[0] or -1 == rcin[0] \n  if rcin[0] == board[0] or -1 == rcin[0]:\n    return match_with_rcin(rcin[1:], board[1:])\n  else:\n    return False\n\ndef print_board(board):\n  for b in board:\n    s = ['.', '.', '.', '.', '.', '.', '.', '.']\n    s[b] = 'Q'\n    print(''.join(s))\n\n\ndef queen(n, rcin, y = 0):\n  if n == y and match_with_rcin(rcin, board):\n    print_board(board)\n    return\n  else:\n    for x in range(0, n):\n      if x in board or conflict(x, y): continue\n      board.append(x)\n      queen(n, rcin, y + 1)\n      board.pop()\n\ndef main(argv):\n  rc = [-1 for i in range(8)]\n  with open(argv[0]) as f:\n    line = f.readline()\n    k = int(line)\n  \n    for i in range(k):\n      r, c = map(int, f.readline().split())\n      rc[r] = c\n    queen(8, rc)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2714, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      if (Integer.parseInt(args[i]) % 3 == 0 && args[i].contains(\"3\")) {\n        System.out.println(\"dumb\");\n      } else if (args[i].contains(\"3\")) {\n        System.out.println(\"stupid\");\n      } else if (Integer.parseInt(args[i]) % 3 == 0) {\n        System.out.println(\"idiot\");\n      } else if (Integer.parseInt(args[i]) % 3 == 1 || Integer.parseInt(args[i]) % 3 == 2) {\n        System.out.println(\"smart\");\n      } else {\n        System.out.println(\"invalid\");\n      }\n      //System.out.println(args[i]);\n      //String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      //System.out.println(output);\n    }\n  }\n}\n"}
{"id": 2715, "language": "Java", "code": "package cryptosolver;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Cipher {\n  \n  public static void main(String[] args) throws IOException {\n    if (args.length != 3) return;\n\n    String command = args[0];\n    String inputFilePath = args[1];\n    String outputFilePath = args[2];\n\n    String content = new String(Files.readAllBytes(Paths.get(inputFilePath)));\n\n    if (\"count\".equals(command)) {\n      countLetters(content, outputFilePath);\n    } else if (\"space\".equals(command)) {\n      findSpaceCharacter(content, outputFilePath);\n    } else if (\"decrypt\".equals(command)) {\n      restoreText(content, outputFilePath);\n    }\n  }\n\n  private static void countLetters(String content, String outputFilePath) throws IOException {\n    Map<Character, Integer> letterCount = new HashMap<>();\n    for (char c : content.toCharArray()) {\n      if (Character.isLetter(c) || c == ' ') {\n        letterCount.put(c, letterCount.getOrDefault(c, 0) + 1);\n      }\n    }\n    writeJson(letterCount, outputFilePath);\n  }\n\n  private static void findSpaceCharacter(String content, String outputFilePath) throws IOException {\n    char spaceReplacement = 'y'; // Dummy placeholder for actual logic\n    Map<String, Character> spaceMap = new HashMap<>();\n    spaceMap.put(\"char\", spaceReplacement);\n    writeJson(spaceMap, outputFilePath);\n  }\n\n  private static void restoreText(String content, String outputFilePath) throws IOException {\n    StringBuilder restored = new StringBuilder();\n    for (char c : content.toCharArray()) {\n      restored.append(c); // Placeholder for decryption\n    }\n    writeToFile(restored.toString(), outputFilePath);\n  }\n\n  private static void writeJson(Map<?, ?> map, String outputFilePath) throws IOException {\n    StringBuilder jsonOutput = new StringBuilder(\"{\\n\");\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n      jsonOutput.append(String.format(\"  \\\"%s\\\": %s,\\n\", entry.getKey(), entry.getValue()));\n    }\n    jsonOutput.deleteCharAt(jsonOutput.length() - 2); // Remove last comma\n    jsonOutput.append(\"}\");\n    writeToFile(jsonOutput.toString(), outputFilePath);\n  }\n\n  private static void writeToFile(String content, String outputFilePath) throws IOException {\n    try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(outputFilePath))) {\n      writer.write(content);\n    }\n  }\n}"}
{"id": 2716, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n // for (int i = 1; i < argc; i++) {\n  //  printf (\"argv[%i]: %s\\n\", i, argv[i]);\nint num,rem,flag,y;\nfor(int i=1;i<argc;i++)\n{\n  y=atoi(argv[i]);\n  if(y>=0 && y<=1000)\n  {\n    flag=0;\n    num=y;\n    while(num!=0)\n    {\n      rem=num%10;\n      num=num/10;\n      if(rem==3)\n        flag=1;\n    }\n\n    if(y%3==0 && flag==1)\n      printf(\"\\ndumb\");\n    else if(flag==1)\n      printf(\"\\nstupid\");\n    else if(y%3==0)\n       printf(\"\\nidiot\");\n    else\n       printf(\"\\nsmart\"); \n  }\n  else\n      printf(\"\\ninvalid\");\n\n}\nreturn 0;\n}\n\n\n"}
{"id": 2717, "language": "Java", "code": "package track;\n\npublic class Solution {\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i++) {\n      System.out.println(getResult(args[i]));\n    }\n  }\n\n  public static String getResult(String input) {\n    int number;\n    // No try-catch as per instructions, doing manual check\n    for (int j = 0; j < input.length(); j++) {\n        if (input.charAt(j) < '0' || input.charAt(j) > '9') {\n            return \"invalid\";\n        }\n    }\n    if (input.isEmpty()) return \"invalid\";\n\n    number = Integer.parseInt(input);\n\n    if (number < 0 || number > 1000) {\n      return \"invalid\";\n    }\n\n    boolean has3 = input.contains(\"3\");\n    boolean div3 = (number % 3 == 0);\n\n    if (has3 && div3) return \"dumb\";\n    if (div3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 2718, "language": "Python3", "code": "import sys\nimport json\nfrom collections import defaultdict\n\ndef count_chars(file_path, output_file):\n    char_count = defaultdict(int)\n    with open(file_path, 'r') as f:\n        content = f.read()\n        for character in content:\n            if character.isalpha() or character.isspace():\n                char_count[character] += 1\n    with open(output_file, 'w') as out_file:\n        json.dump(char_count, out_file)\n\ndef get_space_char(file_path, output_file):\n    with open(file_path, 'r') as f:\n        text = f.read()\n        counts = defaultdict(int)\n        for char in text:\n            if char.isalpha():\n                counts[char] += 1\n    most_common_char = max(counts, key=counts.get)\n    with open(output_file, 'w') as out_file:\n        json.dump({\"char\": most_common_char}, out_file)\n\ndef decrypt_file(file_path, output_file):\n    with open(file_path, 'r') as f:\n        encrypted_text = f.read()\n\n    decrypted_text = ''\n    for char in encrypted_text:\n        if char.isalpha():\n            decrypted_char = chr(ord(char) - 2)\n            decrypted_text += decrypted_char\n        else:\n            decrypted_text += char\n    with open(output_file, 'w') as out_file:\n        out_file.write(decrypted_text)\n\ndef main(argv):\n    command = argv[0]\n    input_file = argv[1]\n    output_file = argv[2]\n    \n    if command == 'count':\n        count_chars(input_file, output_file)\n    elif command == 'space':\n        get_space_char(input_file, output_file)\n    elif command == 'decrypt':\n        decrypt_file(input_file, output_file)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2719, "language": "Java", "code": "package track;\n\npublic class App {\n  public static Boolean contains3(Integer a){\n    while(a!=0){\n      if(a%10 == 3)\n        return true;\n      a/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      Integer a,flag=0;\n      //System.out.println(args[i]);\n      \n      try\n      {\n        a=Integer.parseInt(args[i]);\n        if(i==1 && a==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(a>=0 && a<=1000)\n        {\n        if(a%3 == 0 && contains3(a))\n          System.out.println(\"dumb\");\n        else if(a%3 == 0 && !contains3(a))\n          System.out.println(\"idiot\");\n        else if(contains3(a))\n          System.out.println(\"stupid\");\n        else\n          System.out.println(\"smart\");\n        }\n        else \n          System.out.println(\"invalid\");\n      }\n      catch(NumberFormatException ne)\n      {\n        System.out.println(\"invalid\");\n      }\n      \n\t\t}\n\t}\n}\n"}
{"id": 2720, "language": "C", "code": "#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n\n// \u6570\u5b57\u5217\u304b\u3069\u3046\u304b\u5224\u5b9a\nint is_digitstr(const char* s) {\n  if(!*s) return 0;\n  while(*s) {\n    if(!isdigit(*s++)) return 0;\n  }\n  return 1;\n}\n\n// 3\u3092\u542b\u3080\u304b\u5224\u5b9a\nint contains3(const char* s) {\n  while(*s)\n    if(*s++ == '3') return 1;\n  return 0;\n}\n\nint main(int argc, char* argv[]) {\n  for(int i=1; i<argc; i++) {\n    if(!is_digitstr(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int val = atoi(argv[i]);\n    if(val<0 || val>1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int div = val%3==0;\n    int has3 = contains3(argv[i]);\n    if(div && has3) printf(\"dumb\\n\");\n    else if(div) printf(\"idiot\\n\");\n    else if(has3) printf(\"stupid\\n\");\n    else printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 2721, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  arabian_ = int(argv[0])\n  roman_ = ''\n  if (arabian_ + 100) // 1000 >= 1:\n    str_ = ''\n    i = (arabian_ + 100) // 1000\n    if i != arabian_ // 1000:\n      str_ += 'C'         #900\u4ee3\u306e\u6642\u306f\u624b\u524d\u306bC\u3092\u8a18\u5165\n      arabian_ += 100\n    for j in range(i):\n      str_ += 'M'         #1000\u306e\u500b\u6570\u3060\u3051M\u3092\u8a18\u5165\n      arabian_ -= 1000\n\n    \n    roman_ += str_\n\n  \n  if (arabian_ + 100) // 500 >= 1:\n    str_ = ''\n    i = (arabian_ + 100) // 500\n    if i != arabian_ // 500:\n      str_ += 'C'         #400\u4ee3\u306e\u6642\u306f\u624b\u524d\u306bC\u3092\u8a18\u5165\n      arabian_ += 100\n    for j in range(i):\n      str_ += 'D'         #500\u306e\u500b\u6570\u3060\u3051D\u3092\u8a18\u5165\n      arabian_ -= 500\n\n    \n    roman_ += str_\n  \n  if (arabian_ + 10) // 100 >= 1:\n    str_ = ''\n    i = (arabian_ + 10) // 100\n    if i != arabian_ // 100:\n      str_ = 'X' + str_   #90\u4ee3\u306e\u6642\u306f\u624b\u524d\u306bX\u3092\u8a18\u5165\n      arabian_ += 10\n\n    for j in range(i):\n      str_ += 'C'         #100\u306e\u500b\u6570\u3060\u3051C\u3092\u8a18\u5165\n      arabian_ -= 100  \n    roman_ += str_\n  \n  if (arabian_ + 10) // 50 >= 1:\n    str_ = ''\n    i = (arabian_ + 10) // 50\n    if i != arabian_ // 50:\n      str_ = 'X' + str_   #40\u4ee3\u306e\u6642\u306f\u624b\u524d\u306bX\u3092\u8a18\u5165\n      arabian_ += 10   \n    for j in range(i):\n      str_ += 'L'         #50\u306e\u500b\u6570\u3060\u3051L\u3092\u8a18\u5165\n      arabian_ -= 50  \n    roman_ += str_\n  \n  if (arabian_ + 1) // 10 >= 1:\n    str_ = ''\n    i = (arabian_ + 1) // 10\n    if i != arabian_ // 10:\n      str_ = 'I' + str_   #9\u4ee3\u306e\u6642\u306f\u624b\u524d\u306bI\u3092\u8a18\u5165\n      arabian_ += 1\n\n    for j in range(i):\n      str_ += 'X'         #10\u306e\u500b\u6570\u3060\u3051X\u3092\u8a18\u5165\n      arabian_ -= 10 \n    roman_ += str_\n  \n  if (arabian_ + 1) // 5 >= 1:\n    str_ = ''\n    i = (arabian_ + 1) // 5\n    if i != arabian_ // 5:\n      str_ = 'I' + str_   #9\u4ee3\u306e\u6642\u306f\u624b\u524d\u306bI\u3092\u8a18\u5165\n      arabian_ += 1\n    for j in range(i):\n      str_ += 'V'         #5\u306e\u500b\u6570\u3060\u3051V\u3092\u8a18\u5165\n      arabian_ -= 5  \n    roman_ += str_\n\n  for j in range(arabian_):\n    roman_ += 'I'         #\u6b8b\u3063\u305f\u6570\u5b57\u306e\u6570\u3060\u3051I\u3092\u633f\u5165\n  \n  print (roman_)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2722, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0;i< args.length; i++) {\n\t\t\tString output = String.format(\"%s\",args[i]);\n      Integer s= Integer.parseInt(output);\n      int count=0;\n      int digit;\n              //Integer s = Integer.parseInt(output);\n        if(s >= 0 && s <= 1000)\n        {\n          int n = s;\n          while (n > 0)\n          {\n             digit = n % 10;\n            n = n / 10;\n          \n           if (digit == 3)\n            count++; \n             \n          }\n             if((count > 0) && (s % 3 == 0))\n             {\n               System.out.println(\"dumb\");\n             }\n             else if( count > 0 )\n             {\n               System.out.println(\"stupid\");\n             }\n             else if(s % 3 == 0)\n             {\n               System.out.println(\"idiot\");\n             }\n             else{\n               System.out.println(\"smart\");\n             }\n          }//end of if\n        else \n        {\n        System.out.println(\"invalid\");\n        }\n    }\n\t\t\t\n\t\t\n\t}\n}\n"}
{"id": 2723, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(inputNumber(args[i]));\n\t\t}\n\t}\n\npublic static String inputNumber(String input){\n        \n        \n        try {\n            \n             int x = Integer.parseInt(input);\n            \n        \n        \n        if(0 <= x && x <= 1000  ){\n            \n            \n        if(input.contains(\"3\") && x % 3 ==0 ){\n            \n            return \"dumb\";\n        }\n        else if (x % 3 ==0){\n            return \"idiot\";\n        }\n        else if(input.contains(\"3\")){\n            \n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n            \n            \n            \n            \n        } else {\n            return \"invalid\";\n        }\n            \n        }catch(Exception e){\n            return \"invalid\";\n        }\n        \n       \n        \n        \n    }\n    \n \n}\n"}
{"id": 2724, "language": "Python3", "code": "import json\nimport sys\nfrom collections import Counter\nfrom string import ascii_letters\n\ndef count(path):\n    # \u51fa\u73fe\u6587\u5b57\u6570\u306e\u30ab\u30a6\u30f3\u30c8\n    counter = Counter()\n    with open(path) as f:\n        txt = f.read()\n        length = len(txt)\n        for i in ascii_letters + ' ':\n            c = txt.count(i)\n            counter[i] = c\n\n    return counter, length\n\ndef space(counter, length):\n    freq = (length - 4.5) / 5.5  # \u7a7a\u767d\u6587\u5b57\u306e\u671f\u5f85\u51fa\u73fe\u983b\u5ea6\n    diff = length\n    char = ''\n\n    # \u671f\u5f85\u51fa\u73fe\u983b\u5ea6\u306b\u6700\u3082\u8fd1\u3044\u6587\u5b57\u304c\u7a7a\u767d\u3068\u30b9\u30ef\u30c3\u30d7\u3055\u308c\u305f\u3068\u8003\u3048\u308b\n    for i in ascii_letters + ' ':\n        if counter[i] != 0:\n          tmp = abs(freq - counter[i])\n          if abs(tmp) < diff:\n              diff = abs(tmp)\n              char = i\n\n    return {'char': char}\n\ndef main(argv):\n\n    ret, length = count(argv[1])\n    if argv[0] == 'space':\n        ret = space(ret, length)\n\n    ret_json = json.dumps(ret)\n    with open(argv[2], 'w') as f:\n        f.write(ret_json)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2725, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n\nint has_threes(const char *str) {\n  while (*str) { if (*str=='3') return 1; str++; }\n  return 0;\n}\n\nint is_digits(const char *str) {\n  int i = 0;\n  if (!str[0]) return 0;\n  while (str[i]) { if (!isdigit(str[i])) return 0; i++; }\n  return 1;\n}\n\nint main(int argc, char *argv[]) {\n  for (int j=1; j<argc; j++) {\n    if (!is_digits(argv[j])) {\n      puts(\"invalid\");\n      continue;\n    }\n    int n = atoi(argv[j]);\n    if (n < 0 || n > 1000) {\n      puts(\"invalid\");\n      continue;\n    }\n    int div = (n % 3 == 0);\n    int with3 = has_threes(argv[j]);\n    if (div && with3) puts(\"dumb\");\n    else if (div) puts(\"idiot\");\n    else if (with3) puts(\"stupid\");\n    else puts(\"smart\");\n  }\n  return 0;\n}"}
{"id": 2726, "language": "Java", "code": "package track;\n\nimport java.util.regex.Pattern;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t//\u5165\u529b\u3059\u308b\u6570\u5b57\u306e\u78ba\u8a8d\n    String match = \"(^[0-9]*$)\";\n    //3\u30d0\u30ab\u306e\u5224\u65ad\u521d\u671f\u5316\n    boolean idiot = false;\n    boolean stupid = false;\n    boolean invalid = false;\n    \n    //\u5165\u529b\u306e\u51e6\u7406\n    for (int i = 0, l = args.length; i < l; i++) {\n      //\u4f8b\u5916\u767a\u751f\u51e6\u7406\n      try {\n        if(!(Pattern.matches(match, args[i]))) {\n          Exception e = new Exception(\"error\");\n          throw e;\n        }\n        //\u5165\u529b\u3057\u305f\u6570\u5b57\u306e\u51e6\u7406\n        int num = Integer.parseInt(args[i]); \n        \n        //\u6570\u5b57\u306e\u5224\u65ad        \n        if(num % 3 == 0 && num <= 1000) {\n        \tidiot = true;\n        \tinvalid = false;\n        } else if (num % 3 != 0 && num <= 1000) {\n        \tidiot = false;\n        \tinvalid = false;\n        } else if (num > 1000) {\n          //\u5343\u304c\u8d85\u3048\u308b\u3053\u3068\u3092\u5224\u65ad\n        \tinvalid = true;\n        }\n        \n        //\u6570\u5b57\u306b\uff13\u304c\u5165\u308c\u308b\u3053\u3068\u3092\u5224\u65ad\n        if(args[i].indexOf(\"3\") > -1) {\n        \tstupid = true;\n        } else {\n        \tstupid = false;\n        }\n        \n        //\u51fa\u529b\u306e\u5224\u65ad\n        if((idiot && stupid) && !invalid) args[i] = \"dumb\";\n        else if(idiot && !invalid) args[i] = \"idiot\";\n        else if(stupid && !invalid) args[i] = \"stupid\";\n        else if(!(idiot && stupid) && !invalid) args[i] = \"smart\";\n        else if(invalid) args[i] = \"invalid\";\n        \n        //\u51fa\u529b\n        System.out.println(args[i]);\n        \n      } catch (Exception e) {\n    \t  //\u4f8b\u5916\u306e\u51e6\u7406\n        args[i] = \"invalid\";\n    \t  //\u51fa\u529b\n    \t  System.out.println(args[i]);\n      }\n    }\n  }\n}\n"}
{"id": 2727, "language": "Java", "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class RockPaperScissors {\n    public static void main(String[] args) {\n        // JSON\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b2\u30fc\u30e0\u30ec\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u8fbc\u307f\n        if (args.length != 1) {\n            System.out.println(\"Please provide a valid JSON file path.\");\n            return;\n        }\n\n        String jsonPath = args[0];\n        try {\n            JSONArray records = readJsonFile(jsonPath);\n            int nextMove = determineNextMove(records);\n            System.out.println(nextMove);\n        } catch (IOException e) {\n            System.out.println(\"Error reading the JSON file: \" + e.getMessage());\n        }\n    }\n\n    private static JSONArray readJsonFile(String path) throws IOException {\n        StringBuilder jsonData = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new FileReader(path));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            jsonData.append(line);\n        }\n        reader.close();\n        return new JSONArray(jsonData.toString());\n    }\n\n    private static int determineNextMove(JSONArray records) {\n        // \u6700\u5f8c\u306e3\u3064\u306e\u624b\u3092\u53d6\u5f97\n        int n = records.length();\n        int[] robotHands = {0, 1, 2}; // \u521d\u671f\u624b: rock, scissors, paper\n        if (n > 0) {\n            JSONObject lastGame = records.getJSONObject(n - 1);\n            int opponentLastHand = lastGame.getInt(\"you\");\n\n            // \u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u4f55\u56de\u30d7\u30ec\u30a4\u3057\u305f\u304b\u30ab\u30a6\u30f3\u30c8\n            int count = 0;\n            for (int i = 0; i < n; i++) {\n                JSONObject record = records.getJSONObject(i);\n                if (record.getInt(\"robot\") == robotHands[(count % 3)] && record.getInt(\"you\") == opponentLastHand) {\n                    count++;\n                }\n            }\n\n            // \u6b21\u306e\u624b\u3092\u6c7a\u5b9a\n            return (count % 3);\n        }\n        return 0; //\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u624b\n    }\n}"}
{"id": 2728, "language": "C", "code": "#include <stdio.h>\n\n#define N 8\n\nchar chess[N][N];\n\nint canPlace(int row, int col) {\n    for (int i = 0; i < col; i++) {\n        if (chess[row][i] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n        if (chess[i][j] == 'Q') return 0;\n    }\n    for (int i = row, j = col; i < N && j >= 0; i++, j--) {\n        if (chess[i][j] == 'Q') return 0;\n    }\n    return 1;\n}\n\nint findSolution(int col) {\n    if (col >= N) return 1;\n    for (int i = 0; i < N; i++) {\n        if (canPlace(i, col)) {\n            chess[i][col] = 'Q';\n            if (findSolution(col + 1)) return 1;\n            chess[i][col] = '.';\n        }\n    }\n    return 0;\n}\n\nint main() {\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            chess[i][j] = '.';\n\n    int k, r, c;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; i++) {\n        scanf(\"%d %d\", &r, &c);\n        chess[r][c] = 'Q';\n    }\n\n    findSolution(0);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%c\", chess[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"}
{"id": 2729, "language": "Python3", "code": "import sys\nimport json\nimport re\n\ndef countChara(path_in,path_out,rd):\n    words = {}\n    outtext=''\n    #\u8aad\u307f\u8fbc\u307f\n    try:\n        with open(path_in, 'r', encoding='utf-8') as f:\n            s = f.read()\n            charord = ord('a')\n            for i in range(26):\n                ch = chr(charord + i)\n                words['{}'.format(ch)]=s.count(ch)\n            charord = ord('A')\n            for i in range(26):\n                ch = chr(charord + i)\n                words['{}'.format(ch)]=s.count(ch)\n            words[' '] = s.count(' ')\n    except AssertionError:\n        print('No such file.')\n        return\n    #\u66f8\u304d\u8fbc\u307f\n    if rd == True:\n        return words\n    try:\n        with open(path_out, 'w', encoding='utf-8') as outf:\n            json.dump(words, outf, indent=2)\n            return\n    except AssertionError:\n        print('No such file.')\n        return\n\ndef searchSpace(path_in,path_out,rd):\n    space ={}\n    words = countChara(path_in,path_out,True)\n    mode = max(words,key=words.get)\n    del words[mode]\n    second = max(words,key=words.get)\n    space['char'] = mode\n    if rd == True:\n        return (mode,second)\n    try:\n        with open(path_out, 'w', encoding='utf-8') as outf:\n            json.dump(space, outf, indent=2)\n    except AssertionError:\n        print('No such file.')\n        return\n\ndef decryptText(path_in,path_out):\n    outtext=''\n    sw = searchSpace(path_in,path_out,True)\n    mv = ord(sw[1])-ord('e')\n    try:\n        with open(path_in, 'r', encoding='utf-8') as f:\n            for line in f:\n                for c in line:\n                    if c == sw[0]:#\u6700\u3082\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u6587\u5b57\u306f\u304a\u305d\u3089\u304f' '\u3067\u3042\u308b.\n                        outtext += ' '\n                    elif c == ' ':\n                        outtext +=chr((ord(sw[0]) - ord('a') - mv) % 26 + ord('a'))#2\u756a\u76ee\u306e\u51fa\u73fe\u983b\u5ea6\u306e\u6587\u5b57\u306f\u304a\u305d\u3089\u304f\u672c\u6765'e'\u3067\u3042\u308b\n                    elif 'A' <= c and c <= 'Z':\n                        outtext += chr((ord(c) - ord('A') - mv) % 26 + ord('A'))\n                    elif 'a' <= c and c <= 'z':\n                        outtext+=chr((ord(c) - ord('a') - mv) % 26 + ord('a'))\n                    else:\n                        outtext+=c\n    except AssertionError:\n        print('No such file.')\n        return\n    #\u66f8\u304d\u8fbc\u307f\n    try:\n        with open(path_out, 'w', encoding='utf-8') as outf:\n             outf.write(outtext)\n             return\n    except AssertionError:\n        print('No such file.')\n        return\n\n\ndef main(argv):\n    sc= argv[0]\n    path_in = argv[1]\n    path_out = argv[2]\n\n    if sc == 'count':\n        countChara(path_in,path_out,False)\n    elif sc=='space':\n        searchSpace(path_in,path_out,False)\n    elif sc=='decrypt':\n        decryptText(path_in,path_out)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2730, "language": "Java", "code": "package track;\n\npublic class App \n{\n\tpublic static void main(String[] args) throws Exception\n  {\n    int i,str,a,flag1,flag2;\n\t\tfor (i = 0;i<args.length;i++) \n    {\n     flag1=0;\n     flag2=0;\n\t\t\ttry\n      {\n        str=Integer.parseInt(args[i]);\n        if((str%3)==0)\n        {\n          flag1=1;\n        }\n        while(str>0)\n        {\n          a=str%10;\n          if(a==3)\n          {\n            flag2=1;\n            break;\n          }\n          str=str/10;\n        }\n        if((flag1==1)&&(flag2==1))\n          System.out.println(\"dumb\");\n        else if(flag1==1)\n          System.out.println(\"idiot\");\n          else if(flag2==1)\n          System.out.println(\"stupid\");\n        else\n         System.out.println(\"smart\");\n      }\n    catch(Exception e)\n    {\n      System.out.println(\"invalid\");\n    }\n\t\t}\n\t}\n}\n"}
{"id": 2731, "language": "Ruby", "code": "@translation_table = {\n  0 => \"\",\n  1 => \"I\",\n  2 => \"II\",\n  3 => \"III\",\n  4 => \"IV\",\n  5 => \"V\",\n  6 => \"VI\",\n  7 => \"VII\",\n  8 => \"VIII\",\n  9 => \"IX\",\n  10 => \"X\",\n  20 => \"XX\",\n  30 => \"XXX\",\n  40 => \"XL\",\n  50 => \"L\",\n  60 => \"LX\",\n  70 => \"LXX\",\n  80 => \"LXXX\",\n  90 => \"XC\",\n  100 => \"C\",\n  200 => \"CC\",\n  300 => \"CCC\",\n  400 => \"CD\",\n  500 => \"D\",\n  600 => \"DC\",\n  700 => \"DCC\",\n  800 => \"DCCC\",\n  900 => \"CM\",\n  1000 => \"M\",\n  2000 => \"MM\",\n  3000 => \"MMM\"\n}\n\ndef roman(n)\n  romans = []\n  base = 10\n  while n != 0 do\n    i = n % base\n    n -= i\n    base *= 10\n    romans.unshift( @translation_table[i] )\n  end\n  romans.join(\"\")\nend\n\nputs roman(ARGV[0].to_i)\n"}
{"id": 2732, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Checks if a number contains the digit 3 using integer arithmetic\nbool hasDigitThreeArithmetic(int num) {\n    if (num == 3) return true; // Special case for single digit 3\n    num = std::abs(num); // Handle negative numbers if range allowed them, though problem says 0-1000\n    while (num > 0) {\n        if (num % 10 == 3) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nint main(int argc, char *argv[]) {\n    for (int idx = 1; idx < argc; ++idx) {\n        long currentVal;\n        char* ptrEnd;\n        currentVal = std::strtol(argv[idx], &ptrEnd, 10);\n\n        if (*ptrEnd != '\\0' || ptrEnd == argv[idx]) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        if (currentVal < 0 || currentVal > 1000) {\n            std::cout << \"invalid\\n\";\n            continue;\n        }\n\n        bool divBy3 = (currentVal % 3 == 0);\n        bool includes3 = hasDigitThreeArithmetic(static_cast<int>(currentVal));\n\n        if (divBy3 && includes3) {\n            std::cout << \"dumb\\n\";\n        } else if (divBy3) {\n            std::cout << \"idiot\\n\";\n        } else if (includes3) {\n            std::cout << \"stupid\\n\";\n        } else {\n            std::cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}\n"}
{"id": 2733, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\n\nint convertToint(string s){\n  int num=0;\n  int s_len = s.length();\n  for(int i=0;i<s_len;i++){\n    int po  = (s_len-1)-i;\n    int n = s[i] - '0';\n    // num += s[i]*10^(po);\n    num += n*pow(10,po);\n  }\n  return num;\n}\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    // printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    string s_num = argv[i];\n    bool inv = false;\n    for(int j=0;j<s_num.length();j++){\n      if(s_num[i]>63){\n        inv = true;\n      }\n    }\n\n    if(inv){\n      cout<<\"invalid\"<<endl;\n      inv = false;\n      continue;\n    }\n      \n\n    int num = convertToint(s_num);\n    // cout<<\"Number is: \"<<num;\n    bool i_flag =false;\n    bool s_flag = false;\n\n    if(num % 3 == 0){\n      i_flag = true;\n    }\n    else{\n      i_flag = false;\n    }\n\n    for(int j =0; j<s_num.length();j++){\n      if(s_num[i]=='3'){\n        s_flag = true;\n        break;\n      }\n      else{\n        s_flag = false;\n      }\n    }\n      if(i_flag == true && s_flag == false){\n        cout<<\"idiot\"<<endl;\n      }\n      else if(i_flag == false && s_flag == true){\n        cout<<\"stupid\"<<endl;\n      }\n      else if(i_flag == true && s_flag == true){\n        cout<<\"dumb\"<<endl;\n      }\n      else{\n        cout<<\"smart\"<<endl;\n      }\n      i_flag = false;\n      s_flag = false;\n    }\n  return 0;\n}\n"}
{"id": 2734, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int num,check1,check2;\n  for (int ctr = 1; ctr < argc; ctr++) \n  {\n    check1=0;\n    check2=0;\n    if(argv[ctr][0]<48 || argv[ctr][0]>57)\n    {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    num=atoi(argv[ctr]);\n    if(num%3==0)\n      check1++;\n    while(num!=0)\n    {\n      int digit=num%10;\n      num=num/10;\n      if(digit==3)\n      {\n        check2++;\n        break;\n      }\n    }\n    if(check1==1 && check2==1)\n      printf(\"dumb\\n\");\n    else if(check1==0 && check2==0)\n      printf(\"smart\\n\");\n    else if(check1==1)\n      printf(\"idiot\\n\");\n    else if(check2==1)\n      printf(\"stupid\\n\");\n  }\n  return 0;\n}\n"}
{"id": 2735, "language": "PHP", "code": "<?php\nfunction is_safe($board, $row, $col) {\n    for ($i = 0; $i < $row; $i++) {\n        if ($board[$i] === $col ||\n            abs($board[$i] - $col) === abs($i - $row)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction solve_queens($board, $fixed, $row) {\n    if ($row === 8) return true;\n    if ($fixed[$row] !== -1) {\n        if (is_safe($board, $row, $fixed[$row])) {\n            $board[$row] = $fixed[$row];\n            if (solve_queens($board, $fixed, $row + 1)) return true;\n        }\n        return false;\n    }\n    for ($col = 0; $col < 8; $col++) {\n        if (is_safe($board, $row, $col)) {\n            $board[$row] = $col;\n            if (solve_queens($board, $fixed, $row + 1)) return true;\n        }\n    }\n    return false;\n}\n\nfunction main($argc, $argv) {\n    $k = intval(fgets(STDIN));\n    $fixed = array_fill(0, 8, -1);\n    for ($i = 0; $i < $k; $i++) {\n        list($r, $c) = explode(' ', trim(fgets(STDIN)));\n        $fixed[intval($r)] = intval($c);\n    }\n    $board = array_fill(0, 8, -1);\n    solve_queens($board, $fixed, 0);\n    for ($r = 0; $r < 8; $r++) {\n        $line = '';\n        for ($c = 0; $c < 8; $c++) {\n            $line .= ($board[$r] === $c) ? 'Q' : '.';\n        }\n        echo $line . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2736, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Objects;\n\npublic class SmartAnalyzer {\n\n  private static String analyzeValue(int val) {\n    if (val < 0 || val > 1000) return \"invalid\";\n    boolean isDivisible = (val % 3 == 0);\n    boolean hasThree = String.valueOf(val).contains(\"3\");\n\n    if (isDivisible && hasThree) return \"dumb\";\n    if (isDivisible) return \"idiot\";\n    if (hasThree) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] args) {\n    for (String arg : args) {\n      try (Scanner sc = new Scanner(arg)) { // try-with-resources for Scanner\n        if (sc.hasNextInt()) {\n          System.out.println(analyzeValue(sc.nextInt()));\n        } else {\n          System.out.println(\"invalid\");\n        }\n      }\n    }\n  }\n}"}
{"id": 2737, "language": "Python3", "code": "import sys\n\ndef three_idiots_rules(val_as_str):\n    if not val_as_str.isdigit():\n        return \"invalid\"\n    \n    val_as_int = int(val_as_str)\n    \n    if not (0 <= val_as_int <= 1000):\n        return \"invalid\"\n\n    divisible = (val_as_int % 3 == 0)\n    contains_three = ('3' in val_as_str)\n\n    if divisible and contains_three: return \"dumb\"\n    if divisible: return \"idiot\"\n    if contains_three: return \"stupid\"\n    return \"smart\"\n\ndef run_program(arguments):\n    for argument_str in arguments:\n        print(three_idiots_rules(argument_str))\n\nif __name__ == '__main__':\n    run_program(sys.argv[1:])"}
{"id": 2738, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class App {\n\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.err.println(\"Usage: java App <command> <inputFilePath> <outputFilePath>\");\n            return;\n        }\n\n        String command = args[0];\n        String inputFilePath = args[1];\n        String outputFilePath = args[2];\n\n        try {\n            String inputText = Files.readString(Paths.get(inputFilePath));\n\n            switch (command) {\n                case \"count\":\n                    countCharacters(inputText, outputFilePath);\n                    break;\n                case \"space\":\n                    findSpaceReplacement(inputText, outputFilePath);\n                    break;\n                case \"decrypt\":\n                    decryptText(inputText, outputFilePath);\n                    break;\n                default:\n                    System.err.println(\"Unknown command: \" + command);\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error processing file: \" + e.getMessage());\n        }\n    }\n\n    private static void countCharacters(String text, String outputFilePath) throws IOException {\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c)) {\n                charCounts.put(Character.toUpperCase(c), charCounts.getOrDefault(Character.toUpperCase(c), 0) + 1);\n            } else if (c == ' ') {\n                charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);\n            }\n        }\n\n        StringBuilder jsonBuilder = new StringBuilder(\"{\\n\");\n        boolean first = true;\n        for (Map.Entry<Character, Integer> entry : charCounts.entrySet()) {\n            if (!first) {\n                jsonBuilder.append(\",\\n\");\n            }\n            jsonBuilder.append(\"  \\\"\").append(entry.getKey()).append(\"\\\": \").append(entry.getValue());\n            first = false;\n        }\n        jsonBuilder.append(\"\\n}\");\n        Files.writeString(Paths.get(outputFilePath), jsonBuilder.toString());\n    }\n\n    private static char findMostFrequentAlphaChar(String text) {\n        Map<Character, Integer> charFrequencies = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c)) {\n                charFrequencies.put(Character.toLowerCase(c), charFrequencies.getOrDefault(Character.toLowerCase(c), 0) + 1);\n            }\n        }\n\n        char mostFrequentChar = ' ';\n        int maxCount = -1;\n\n        for (Map.Entry<Character, Integer> entry : charFrequencies.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                mostFrequentChar = entry.getKey();\n            }\n        }\n        return mostFrequentChar;\n    }\n\n    private static void findSpaceReplacement(String text, String outputFilePath) throws IOException {\n        char spaceReplacementChar = findMostFrequentAlphaChar(text);\n        \n        StringBuilder jsonBuilder = new StringBuilder(\"{\\n\");\n        jsonBuilder.append(\"  \\\"char\\\": \\\"\").append(spaceReplacementChar).append(\"\\\"\\n\");\n        jsonBuilder.append(\"}\");\n        Files.writeString(Paths.get(outputFilePath), jsonBuilder.toString());\n    }\n\n    private static void decryptText(String text, String outputFilePath) throws IOException {\n        char spaceReplacementCharLower = findMostFrequentAlphaChar(text);\n\n        // Step 1: Reverse the swap\n        StringBuilder partiallyDecrypted = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                partiallyDecrypted.append(spaceReplacementCharLower);\n            } else if (Character.toLowerCase(c) == spaceReplacementCharLower) {\n                partiallyDecrypted.append(' ');\n            } else {\n                partiallyDecrypted.append(c);\n            }\n        }\n\n        // Step 2: Determine shift from partially decrypted text\n        Map<Character, Integer> alphaCountsPartiallyDecrypted = new HashMap<>();\n        for (char c : partiallyDecrypted.toString().toCharArray()) {\n            if (Character.isLetter(c)) {\n                alphaCountsPartiallyDecrypted.put(Character.toLowerCase(c), alphaCountsPartiallyDecrypted.getOrDefault(Character.toLowerCase(c), 0) + 1);\n            }\n        }\n\n        char mostFrequentAlphaInPartiallyDecrypted = ' ';\n        int maxCount = -1;\n        for (Map.Entry<Character, Integer> entry : alphaCountsPartiallyDecrypted.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                mostFrequentAlphaInPartiallyDecrypted = entry.getKey();\n            }\n        }\n        \n        // Calculate the encryption shift amount\n        int shift = (mostFrequentAlphaInPartiallyDecrypted - 'e' + 26) % 26;\n\n        // Step 3: Apply reverse shift\n        StringBuilder finalDecrypted = new StringBuilder();\n        for (char c : partiallyDecrypted.toString().toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char decryptedChar = (char) ((c - base - shift + 26) % 26 + base);\n                finalDecrypted.append(decryptedChar);\n            } else {\n                finalDecrypted.append(c);\n            }\n        }\n\n        Files.writeString(Paths.get(outputFilePath), finalDecrypted.toString());\n    }\n}"}
{"id": 2739, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define TOTAL_CHARS 53 // 26 lowercase + 26 uppercase + 1 space\n\n// Return index for counts array: [0] = ' ', [1-26] = 'A'-'Z', [27-52] = 'a'-'z'\nint char_idx(char c) {\n  if (c == ' ') return 0;\n  if (c >= 'A' && c <= 'Z') return 1 + (c - 'A');\n  if (c >= 'a' && c <= 'z') return 27 + (c - 'a');\n  return -1;\n}\nchar idx_char(int idx) {\n  if (idx == 0) return ' ';\n  if (idx >= 1 && idx <= 26) return 'A' + (idx - 1);\n  return 'a' + (idx - 27);\n}\n\nvoid load_to_buffer(const char* filename, char **buf, long *len) {\n  FILE *f = fopen(filename, \"rb\");\n  if (!f) exit(1);\n  fseek(f, 0, SEEK_END);\n  *len = ftell(f);\n  fseek(f, 0, SEEK_SET);\n  *buf = (char*)malloc(*len+1);\n  fread(*buf, 1, *len, f);\n  (*buf)[*len] = 0;\n  fclose(f);\n}\n\n// Count mode\nvoid write_counts(const char* input, const char* out) {\n  int counts[TOTAL_CHARS] = {0};\n  char *buf; long len;\n  load_to_buffer(input, &buf, &len);\n  for (long i = 0; i < len; i++) {\n    int idx = char_idx(buf[i]);\n    if (idx != -1) counts[idx]++;\n  }\n  FILE *fo = fopen(out, \"w\");\n  if (!fo) exit(1);\n  fprintf(fo, \"{\\n\");\n  int printed = 0;\n  for (int i = 0; i < TOTAL_CHARS; i++) {\n    if (counts[i]) {\n      if (printed) fprintf(fo, \",\\n\");\n      if (idx_char(i) == ' ')\n        fprintf(fo, \"  \\\" \\\": %d\", counts[i]);\n      else\n        fprintf(fo, \"  \\\"%c\\\": %d\", idx_char(i), counts[i]);\n      printed++;\n    }\n  }\n  fprintf(fo, \"\\n}\\n\");\n  fclose(fo);\n  free(buf);\n}\n\n// Find most frequent lowercase letter\nchar guess_space_char(const char *input) {\n  int counts[26] = {0};\n  char *buf; long len;\n  load_to_buffer(input, &buf, &len);\n  for (long i = 0; i < len; i++) {\n    if (buf[i] >= 'a' && buf[i] <= 'z') counts[buf[i]-'a']++;\n  }\n  int maxc = 0, maxi = 0;\n  for (int i = 0; i < 26; i++)\n    if (counts[i] > maxc) { maxc = counts[i]; maxi = i; }\n  free(buf);\n  return 'a' + maxi;\n}\n\nvoid write_space(const char* input, const char* out) {\n  char c = guess_space_char(input);\n  FILE *fo = fopen(out, \"w\");\n  if (!fo) exit(1);\n  fprintf(fo, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", c);\n  fclose(fo);\n}\n\n// Guess shift used for letter substitution\nint guess_shift(const char *buf, long len, char space_sub) {\n  int letter_counts[52] = {0};\n  for (long i = 0; i < len; i++) {\n    char c = buf[i];\n    if (c == space_sub) continue;\n    if (c >= 'A' && c <= 'Z') letter_counts[c-'A']++;\n    if (c >= 'a' && c <= 'z') letter_counts[26+c-'a']++;\n  }\n  int maxc = 0, maxi = 0;\n  for (int i = 0; i < 52; i++)\n    if (letter_counts[i] > maxc) { maxc = letter_counts[i]; maxi = i; }\n  // max letter in ciphertext -- assume maps to 'e' (most common in English)\n  int shft;\n  // If uppercase\n  if (maxi < 26) {\n    shft = (maxi - ('E'-'A') + 26) % 26;\n  } else {\n    shft = (maxi-26 - ('e'-'a') + 26) % 26;\n  }\n  return shft;\n}\n\n// Decrypt text\nvoid do_decrypt(const char* input, const char* out) {\n  char *buf; long len;\n  load_to_buffer(input, &buf, &len);\n  char space_c = guess_space_char(input);\n  int shift = guess_shift(buf, len, space_c);\n  FILE *fo = fopen(out, \"w\");\n  if (!fo) exit(1);\n  for (long i = 0; i < len; i++) {\n    char c = buf[i];\n    if (c == space_c) {\n      fputc(' ', fo);\n    } else if (c >= 'A' && c <= 'Z') {\n      char dc = ((c-'A'-shift+26)%26)+'A';\n      fputc(dc, fo);\n    } else if (c >= 'a' && c <= 'z') {\n      char dc = ((c-'a'-shift+26)%26)+'a';\n      fputc(dc, fo);\n    } else {\n      fputc(c, fo);\n    }\n  }\n  fclose(fo);\n  free(buf);\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 4) return 1;\n  if (strcmp(argv[1], \"count\") == 0) {\n    write_counts(argv[2], argv[3]);\n  } else if (strcmp(argv[1], \"space\") == 0) {\n    write_space(argv[2], argv[3]);\n  } else if (strcmp(argv[1], \"decrypt\") == 0) {\n    do_decrypt(argv[2], argv[3]);\n  }\n  return 0;\n}"}
{"id": 2740, "language": "Python", "code": "import sys\nimport json\nimport re\n\nclass Detective:\n    def __init__(self, mission, enc_fname, out_fname):\n        self.mission = mission\n        self.enc_fname = enc_fname\n        self.out_fname = out_fname\n        self.char_count = {}\n        self.converter = {}\n        self.shift = 0\n\n        with open(enc_fname, 'r') as lines:\n            self.encrypted_data = lines.read()\n        self.lines_nonl = self.encrypted_data.replace('\\n', '')\n        self.decoded_data = self.encrypted_data\n\n    def _count(self):\n        self.char_count = {}\n        for i in range(65, 65+26):\n            self.char_count[chr(i)] = 0\n        for i in range(97, 97+26):\n            self.char_count[chr(i)] = 0\n        self.char_count[' '] = 0\n        for line in self.lines_nonl:\n            for char in line:\n                if self._is_valid(char):\n                    self.char_count[char] += 1\n\n    # blank should appear right after comma\n    def _guess_blank_with_comma(self):\n        for i in range(len(self.lines_nonl)):\n            if self.lines_nonl[i] == ',':\n                self.converter[' '] = self.lines_nonl[i+1]\n\n    # guess blank with frequency\n    def _guess_blank(self):\n        # times blank should appear\n        _times = len(self.lines_nonl) / 4.5\n        t_ = ()\n        for k, v in self.char_count.items():\n            if len(t_) == 0:\n                t_ = [k, v]\n            else:\n                is_min = abs(t_[1] - _times) - abs(v - _times)\n                if is_min > 0:\n                    t_ = [k, v]\n        self.converter[' '] = t_[0]\n\n    def _decrypt(self):\n        decrypted = ''\n        # replace blank\n        self.lines_nonl = self._replace(\n                self.lines_nonl, ' ', self.converter[' '])\n        # regen. counter\n        self._guess_shift()\n        self._make_converter()\n        # decode blank\n        self.encrypted_data = self._replace(\n                self.encrypted_data, ' ', self.converter[' '])\n        # decode char\n        for i in range(len(self.encrypted_data)):\n            if self.encrypted_data[i] in self.converter.keys() and self.encrypted_data[i] != ' ':\n                decrypted += self.converter[self.encrypted_data[i]]\n            else:\n                decrypted += str(self.encrypted_data[i])\n        return decrypted\n\n    def _make_converter(self):\n        for i in range(len(self.encrypted_data)):\n            char = self.encrypted_data[i]\n            if self._is_valid(char):\n                if char.lower() not in self.converter.keys():\n                    self.converter[char.lower()] = self._decode(char.lower())\n                if char.upper() not in self.converter.keys():\n                    self.converter[char.upper()] = self._decode(char.upper())\n\n    def _replace(self, str_, a, b):\n        tmp = '@@@@@'\n        str_ = str_.replace(a, tmp)\n        str_ = str_.replace(b, a)\n        str_ = str_.replace(tmp, b)\n        return str_\n\n    def _decode(self, char):\n        if self._is_upper(char):\n            return chr((ord(char) - ord('A') - self.shift) % 26 + ord('A'))\n        elif self._is_lower(char):\n            return chr((ord(char) - ord('a') - self.shift) % 26 + ord('a'))\n\n        return char\n\n    def _guess_shift(self):\n        freq_char = ''\n        self._count()\n        self.char_count = sorted(\n                self.char_count.items(), key=lambda x: x[1], reverse=True)\n        for k, v in self.char_count:\n            if k != ' ':\n                freq_char = k\n                break\n        self.shift = ord(freq_char) - ord('e')\n\n    def _print_json(self, dict_):\n        with open(self.out_fname, 'w') as f:\n            f.write(json.dumps(dict_))\n\n    def _print_txt(self, txt):\n        with open(self.out_fname, 'w') as f:\n            f.write(txt)\n\n    def _is_valid(self, char):\n        pattern = re.compile('[A-Za-z]|\\s')\n        return pattern.match(char) is not None\n\n    def _is_upper(self, char):\n        pattern = re.compile('[A-Z]')\n        return pattern.match(char) is not None\n\n    def _is_lower(self, char):\n        pattern = re.compile('[a-z]')\n        return pattern.match(char) is not None\n\n    def accomplish(self):\n        if self.mission == 'count':\n            self._count()\n            self._print_json(self.char_count)\n        elif self.mission == 'space':\n            self._count()\n            self._guess_blank()\n            dict_ = {\"char\": self.converter[\" \"]}\n            self._print_json(dict_)\n        elif self.mission == 'decrypt':\n            self._count()\n            self._guess_blank()\n            plain = self._decrypt()\n            self._print_txt(plain)\n\ndef main(argv):\n    # count, space, decrypt\n    cmd = argv[1]\n    # encrypted file\n    enc_fname = argv[2]\n    # output filename\n    out_fname = argv[3]\n\n    detective = Detective(cmd, enc_fname, out_fname)\n    detective.accomplish()\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"id": 2741, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class App {\n  // This solution for the N-Queens problem with pre-placed queens uses an integer array\n  // to store queen positions and boolean arrays for attack checks.\n\n  private static final int DIMENSION = 8; // Board dimension\n  private static int[] queenColPosition; // queenColPosition[row] stores the column of the queen\n  private static boolean[] colAvailable; // true if column is available\n  private static boolean[] diag1Available; // true if main diagonal (r-c) is available\n  private static boolean[] diag2Available; // true if anti-diagonal (r+c) is available\n  private static boolean solutionFound;\n\n  /**\n   * Attempts to place queens starting from a given row.\n   * @param currentRow The row to start placing queens.\n   */\n  public static void tryToPlace(int currentRow) {\n    if (solutionFound) {\n      return; // Exit if the solution has already been found\n    }\n\n    if (currentRow == DIMENSION) { // All queens placed successfully\n      solutionFound = true;\n      char[][] resultBoard = new char[DIMENSION][DIMENSION];\n      for (int r = 0; r < DIMENSION; r++) {\n        Arrays.fill(resultBoard[r], '.');\n        resultBoard[r][queenColPosition[r]] = 'Q';\n      }\n      for (int r = 0; r < DIMENSION; r++) {\n        System.out.println(new String(resultBoard[r]));\n      }\n      return;\n    }\n\n    // If this row already has a pre-placed queen, skip it and move to the next.\n    // The pre-placed queen's state is already reflected in the auxiliary arrays.\n    if (queenColPosition[currentRow] != -1) {\n      tryToPlace(currentRow + 1);\n      return;\n    }\n\n    // Try placing a queen in each column of the current row\n    for (int c = 0; c < DIMENSION; c++) {\n      if (colAvailable[c] && diag1Available[currentRow - c + DIMENSION - 1] && diag2Available[currentRow + c]) {\n        // Place queen\n        queenColPosition[currentRow] = c;\n        colAvailable[c] = false;\n        diag1Available[currentRow - c + DIMENSION - 1] = false;\n        diag2Available[currentRow + c] = false;\n\n        tryToPlace(currentRow + 1);\n\n        if (solutionFound) {\n          return; // Propagate the found solution status\n        }\n\n        // Backtrack: Remove queen\n        queenColPosition[currentRow] = -1;\n        colAvailable[c] = true;\n        diag1Available[currentRow - c + DIMENSION - 1] = true;\n        diag2Available[currentRow + c] = true;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int prePlacedCount = sc.nextInt();\n\n    // Initialize state arrays\n    queenColPosition = new int[DIMENSION];\n    Arrays.fill(queenColPosition, -1); // -1 indicates no queen in the row\n    colAvailable = new boolean[DIMENSION];\n    Arrays.fill(colAvailable, true);\n    diag1Available = new boolean[2 * DIMENSION - 1];\n    Arrays.fill(diag1Available, true);\n    diag2Available = new boolean[2 * DIMENSION - 1];\n    Arrays.fill(diag2Available, true);\n    solutionFound = false;\n\n    // Process pre-placed queens\n    for (int i = 0; i < prePlacedCount; i++) {\n      int r = sc.nextInt();\n      int c = sc.nextInt();\n      queenColPosition[r] = c;\n      colAvailable[c] = false;\n      diag1Available[r - c + DIMENSION - 1] = false;\n      diag2Available[r + c] = false;\n    }\n    sc.close();\n\n    // Begin the search from row 0\n    tryToPlace(0);\n  }\n}"}
{"id": 2742, "language": "Python3", "code": "import sys\n\ndef analyze_input(value):\n    # Checks if input is valid\n    if not value.isdigit() or int(value) < 0 or int(value) > 1000:\n        return \"invalid\"\n    \n    n = int(value)\n    divisible = n % 3 == 0\n    contains = '3' in value\n    \n    if divisible and contains:\n        return \"dumb\"\n    elif divisible:\n        return \"idiot\"\n    elif contains:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(inputs):\n    results = [analyze_input(val) for val in inputs]\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2743, "language": "Java", "code": "package track;\n\nimport java.util.Random; // \u4e71\u6570\u751f\u6210\u306e\u305f\u3081\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\npublic class App {\n    // \u5b9a\u6570\u3068\u3057\u3066\u5404\u7a2e\u6587\u5b57\u5217\u3092\u5b9a\u7fa9\n    private static final String DRUM_DO = \"\u30c9\";\n    private static final String DRUM_KA = \"\u30ab\";\n    private static final String REQUIRED_SEQUENCE = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    private static final String SUCCESS_MESSAGE = \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\";\n    private static final String FAILURE_MESSAGE = \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\";\n\n    public static void main(String[] args) {\n        int max_prints = Integer.parseInt(args[0]);\n        playRhythmGame(max_prints);\n    }\n\n    private static void playRhythmGame(int printLimit) {\n        Random rand = new Random();\n        StringBuilder recentSounds = new StringBuilder();\n        int sequenceLength = REQUIRED_SEQUENCE.length();\n\n        for (int count = 0; count < printLimit; count++) {\n            // \u30e9\u30f3\u30c0\u30e0\u306b\u300c\u30c9\u300d\u304b\u300c\u30ab\u300d\u3092\u9078\u629e\n            String currentOutput = rand.nextBoolean() ? DRUM_DO : DRUM_KA;\n            System.out.println(currentOutput);\n            recentSounds.append(currentOutput);\n\n            // \u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u7dad\u6301\n            if (recentSounds.length() > sequenceLength) {\n                recentSounds.deleteCharAt(0);\n            }\n\n            // \u73fe\u5728\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u76ee\u6a19\u3068\u4e00\u81f4\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\n            if (recentSounds.length() == sequenceLength && recentSounds.toString().equals(REQUIRED_SEQUENCE)) {\n                System.out.println(SUCCESS_MESSAGE);\n                return; // \u6210\u529f\u3067\u7d42\u4e86\n            }\n        }\n        System.out.println(FAILURE_MESSAGE); // \u5236\u9650\u56de\u6570\u5185\u306b\u898b\u3064\u304b\u3089\u305a\u7d42\u4e86\n    }\n}"}
{"id": 2744, "language": "Python", "code": "import sys\nargs=sys.argv[1:]\ndef validate_input(inp):\n  if not inp.isdigit():\n    return False\n  if int(inp) > 1000 or int(inp) < 0:\n    return False\n  return True\ndef print_ans(inp):\n  has_3=False\n  div_3=False\n  num=int(inp)\n  if num%3==0:\n    div_3=True\n  if '3' in inp:\n    has_3=True\n  if has_3 and div_3:\n    print(\"dumb\")\n  elif has_3:\n    print(\"stupid\")\n  elif div_3:\n    print(\"idiot\")\n  else:\n    print(\"smart\")\nfor arg in args:\n  if validate_input(arg):\n    print_ans(arg)\n  else:\n    print(\"invalid\")"}
{"id": 2745, "language": "Python3", "code": "import sys\n\ndef base9_to_decimal(num_str_base9):\n    # Convert a base-9 string to a base-10 integer.\n    decimal_val = 0\n    for digit_char in num_str_base9:\n        decimal_val = decimal_val * 9 + int(digit_char)\n    return decimal_val\n\ndef decimal_to_base9(decimal_val):\n    # Convert a base-10 integer to a base-9 string.\n    if decimal_val == 0:\n        return \"0\"\n    base9_chars = []\n    while decimal_val > 0:\n        remainder = decimal_val % 9\n        base9_chars.append(str(remainder))\n        decimal_val //= 9\n    return \"\".join(reversed(base9_chars))\n\ndef main(argv):\n    expression = argv[0]\n    parts = expression.split(\" \")\n    \n    num1_str = parts[0]\n    operator = parts[1]\n    num2_str = parts[2]\n\n    num1_decimal = base9_to_decimal(num1_str)\n    num2_decimal = base9_to_decimal(num2_str)\n\n    result_decimal = 0\n    if operator == \"+\":\n        result_decimal = num1_decimal + num2_decimal\n    elif operator == \"*\":\n        result_decimal = num1_decimal * num2_decimal\n\n    result_base9 = decimal_to_base9(result_decimal)\n    print(result_base9)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2746, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport org.json.*;\n\npublic class App {\n  public static void main(String[] args) {\n    if (args.length < 1) return;\n    String path = args[0];\n    ArrayList<Integer> rob = new ArrayList<>();\n    ArrayList<Integer> user = new ArrayList<>();\n    try {\n      String inp = Files.readString(Paths.get(path));\n      JSONArray arr = new JSONArray(inp);\n      for (int i=0; i<arr.length(); i++) {\n        JSONObject o = arr.getJSONObject(i);\n        rob.add(o.getInt(\"robot\"));\n        user.add(o.getInt(\"you\"));\n      }\n    } catch (Exception ex) {\n      System.out.println(\"0\");\n      return;\n    }\n\n    if (rob.size() < 3) {\n      System.out.println(\"0\");\n      return;\n    }\n\n    HashMap<String, Integer> lastHand = new HashMap<>();\n    HashMap<String, Integer> appear = new HashMap<>();\n    for (int i=3; i<rob.size(); i++) {\n      String pat = rob.get(i-3)+\",\"+rob.get(i-2)+\",\"+rob.get(i-1)+\",\"+user.get(i-1);\n      appear.put(pat, appear.getOrDefault(pat,0)+1);\n      lastHand.put(pat, rob.get(i));\n    }\n    String patnow = rob.get(rob.size()-3)+\",\"+rob.get(rob.size()-2)+\",\"+rob.get(rob.size()-1)+\",\"+user.get(user.size()-1);\n    int c = appear.getOrDefault(patnow, 0);\n    int prev = lastHand.getOrDefault(patnow, 0);\n    int robnext = (c == 0) ? 0 : (prev + 1) % 3;\n    int ans = (robnext + 2) % 3;\n    System.out.println(ans);\n  }\n}"}
{"id": 2747, "language": "Python3", "code": "import sys\n\ndef solve(s):\n    if not s.isdigit():\n        return \"invalid\"\n    \n    n = int(s)\n    if not (0 <= n <= 1000):\n        return \"invalid\"\n\n    divisible = n % 3 == 0\n    contains_3 = '3' in str(n)\n\n    if divisible and contains_3:\n        return \"dumb\"\n    if divisible:\n        return \"idiot\"\n    if contains_3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(solve(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2748, "language": "Java", "code": "public class ThreeIdiots {\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i++) {\n      String val = args[i];\n      System.out.println(checkValue(val));\n    }\n  }\n\n  static String checkValue(String s) {\n    int n;\n    try {\n      n = Integer.parseInt(s);\n    } catch (Exception e) {\n      return \"invalid\";\n    }\n    if (n < 0 || n > 1000) return \"invalid\";\n\n    boolean multipleOf3 = (n % 3 == 0);\n    boolean contains3 = s.contains(\"3\");\n    if (multipleOf3 && contains3) return \"dumb\";\n    if (multipleOf3) return \"idiot\";\n    if (contains3) return \"stupid\";\n    return \"smart\";\n  }\n}"}
{"id": 2749, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    for val in argv:\n        if not val.isdigit():\n            print(\"invalid\")\n            continue\n        num = int(val)\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            continue\n        div3 = (num % 3 == 0)\n        has3 = ('3' in val)\n        if div3 and has3:\n            print(\"dumb\")\n        elif div3:\n            print(\"idiot\")\n        elif has3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2750, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n        for (int i = 0; i < args.Length; i++)\n        {\n          try{\n              if (Int32.Parse(args[i]) % 3 == 0 && args[i].Contains(\"3\")) {\n             Console.WriteLine(\"dumb\");\n           }\n           else if (Int32.Parse(args[i]) % 3 == 0 ) {\n             Console.WriteLine(\"idiot\");\n           }\n           else if (args[i].Contains(\"3\") ) {\n             Console.WriteLine(\"stupid\");\n           }\n           else{\n             Console.WriteLine(\"smart\");\n           }\n          }catch{\n            Console.WriteLine(\"invalid\");\n          }\n           \n        \n\n          //  if (args[i].ToString().Contains(\"3\"))\n          //  {\n          //    Console.WriteLine(\"stupid\");\n          //  }\n        }\n    }\n}\n"}
{"id": 2751, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class App {\n\n   public static boolean formating(int[] a, int b) {\n\n       for (int i = 0; i < b; i++) {\n           if (a[i] == a[b]) return false;\n           if ((a[i] - a[b]) == (b - i)) return false;\n           if ((a[b] - a[i]) == (b - i)) return false;\n       }\n       return true;\n   }\n\n   public static String[][] queensOutput(int[] p,String[][] q) {\n       String[][] array = new String[8][8];\n\n       int n = p.length;\n       for (int i = 0; i < n; i++) {\n           for (int j = 0; j < n; j++) {\n               if (p[i] == j) array[i][j] = \"Q\";\n               else array[i][j] = \".\";\n           }\n\n       }\n\n\n       for (int i = 0; i < n; i++) {\n           for (int j = 0; j < n; j++) {\n               if (q[i][j]==\"Q\") {\n                   if (q[i][j] != array[i][j]) {\n                       return null;\n                   }\n               }\n\n           }\n\n       }\n       return array;\n\n   }\n\n   public static void template(int p,String[][] q) {\n       int[] a = new int[p];\n        template(a, 0,q);\n   }\n\n   public static void template(int[] l, int k,String[][] m) {\n       int n = l.length;\n       if (k == n) {\n           if (queensOutput(l,m) != null) {\n\n               String[][] res= queensOutput(l,m);\n               for (int i = 0; i < 8; i++) {\n                   for (int j = 0; j < 8; j++) {\n\n                       System.out.print(res[i][j]);\n                   }\n                   System.out.println();\n               }\n               System.out.println();\n\n           }\n       } else {\n           for (int i = 0; i < n; i++) {\n               l[k] = i;\n               if (formating(l, k)) \n                    template(l, k + 1,m);\n           }\n       }\n   }\n\n\n   public static void main(String[] args) {\n\n       String[][] array=new String[8][8];\n       try {\n           File files = new File(args[0]);\n           FileReader filereader = new FileReader(files);\n           BufferedReader bufferedReader = new BufferedReader(filereader);\n\n           String dataset;\n            int i=0;\n           while ((dataset = bufferedReader.readLine()) != null) {\n               if (i > 0){\n                   array[Integer.parseInt(dataset.split(\" \")[0])][Integer.parseInt(dataset.split(\" \")[1])] = \"Q\";\n           }\n               ++i;\n           }\n\n           filereader.close();\n       } catch (IOException e) {\n           e.printStackTrace();\n       }\n\n\n\n\n        template(8,array);\n   }\n\n}"}
{"id": 2752, "language": "Python3", "code": "import sys\nimport json\n\n\ndef count(path):\n    with open(path) as f:\n        texts = [s.strip() for s in f.readlines()]\n\n    dic = {\" \": 0}\n    for i in range(26):\n        dic[chr(ord('a') + i)] = 0\n    for i in range(26):\n        dic[chr(ord('A') + i)] = 0\n\n    for text in texts:\n        for s in text:\n            if s == ' ':\n                dic[' '] += 1\n            elif ('a' <= s and s <= 'z') or ('A' <= s and s <= 'Z'):\n                dic[s] += 1\n\n    return dict(dic)\n\n\ndef space(dic):\n    max_kv = max(dic.items(), key=lambda x: x[1])\n    return {\"char\": max_kv[0]}\n\n\ndef decrypt(path, count_result, space_char, e_plus):\n    with open(path) as f:\n        texts = [s.strip() for s in f.readlines()]\n\n    for i in range(len(texts)):\n        for j in range(len(texts[i])):\n            if texts[i][j] == ' ':\n                texts[i][j] = space_char\n            elif texts[i][j] == space_char:\n                texts[i][j] = ' '\n            if ('a' <= texts[i][j] and texts[i][j] <= 'z'):\n                texts[i][j] = chr(\n                    ((ord(chr(texts[i][j]))) - ord('a') + e_plus) % 26 + ord('a'))\n            elif ('A' <= texts[i][j] and texts[i][j] <= 'Z'):\n                texts[i][j] = chr(\n                    ((ord(chr(texts[i][j]))) - ord('A') + e_plus) % 26 + ord('A'))\n\n    return texts\n\n\ndef main(argv):\n    command = argv[0]\n\n    if(command == \"count\"):\n        result = count(argv[1])\n        f = open(argv[2], 'w')\n        json.dump(result, f, indent=2)\n    elif(command == \"space\"):\n        cnt_dict = count(argv[1])\n        result = space(cnt_dict)\n        f = open(argv[2], 'w')\n        json.dump(result, f, indent=2)\n    else:\n        cnt_dict = count(argv[1])\n        space_dict = space(cnt_dict)\n        space_char = space_dict[\"char\"]\n        del cnt_dict[space_char]\n        max_k = max(cnt_dict, key=cnt_dict.get)\n        e_plus = (26 + (ord('e') - ord(max_k))) % 26\n        result = decrypt(argv[1], cnt_dict, space_char, e_plus)\n        f = open(argv[2], 'w')\n        f.write(result)\n        f.close()\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2753, "language": "Python3", "code": "import sys\nimport pandas as pd \nimport json\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n #  print(\"argv[{0}]: {1}\".format(i, v))\n    #import packages\n    \n    \n    #reading json\n    link = v\n    input=json.load(open(link))\n    \n    #initialise lists\n    robot,you = [],[]\n    for i in input:\n      robot.append(i[u'robot'])\n      you.append(i[u'you'])\n#converting into dataframes\n    df = pd.DataFrame([robot,you]).T\n    df.columns = ['robot','you']\n \n #finding rules\n    #df2 = pd.DataFrame(columns=['r1','r2','r3','r4','r5'])\n    r1,r2,r3,r4,r5 = [],[],[],[],[]\n\n    for i in range(3,max(df.index)+1):\n      r1.append(df.robot[i-3])\n      r2.append(df.robot[i-2])\n      r3.append(df.robot[i-1])\n      r4.append(df.you[i-1])\n      r5.append(df.robot[i])\n    \n    df2 = pd.DataFrame([r1,r2,r3,r4,r5]).T\n    df2.columns= ['r1','r2','r3','r4','r5']\n\n    k = max(df.index)\n    df2=df2[df2.r1 == df.robot[k-2]]\n    df2=df2[df2.r2 == df.robot[k-1]]\n    df2=df2[df2.r3 == df.robot[k]]\n    df2=df2[df2.r4 == df.you[k]]\n\n    recent = df2.r5[max(df2.index)]\n\n    if recent == 0:\n      print(0)\n    elif recent == 1:\n      print(1)\n    elif recent == 2:\n      print(2) \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2754, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String input : args) {\n      System.out.println(check3Baka(input));\n    }\n  }\n  static String check3Baka(String v) {\n    // \u6570\u5b57\u304b\u30c1\u30a7\u30c3\u30af\u3057\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\n    if (!v.matches(\"\\\\d+\")) return \"invalid\";\n    int num = Integer.parseInt(v);\n    if (num < 0 || num > 1000) return \"invalid\";\n    boolean multiple = num % 3 == 0;\n    boolean contains = v.contains(\"3\");\n    if (multiple && contains) return \"dumb\";\n    else if (multiple) return \"idiot\";\n    else if (contains) return \"stupid\";\n    else return \"smart\";\n  }\n}"}
{"id": 2755, "language": "C", "code": "#include <stdio.h>\n#include <stdbool.h>\n#include<string.h>\nint idiotsChecker(char *ch){\n  int cnt=0,num=0,i=0;\n  bool flag=1;\n  int len = strlen(ch);\n  //printf(\"%d %d\\n\",i,len);\n  while(i<len){\n    if(!(ch[i]>='0'&&ch[i]<='9')){ //invalidity check\n      //printf(\"Line 8 *%c*\\n\",*ch);\n      return 4;\n    }\n    else{//if valid convert to number.\n      num=num*10+(ch[i]-'0');\n    }\n    if(flag&&ch[i]=='3'){ // includes 3 check\n     // printf(\"line 18\\n\");\n      cnt=1;\n      flag=0;\n    }\n    i++;\n  }\n  if(!(num>=0&&num<=1000)){\n   // printf(\"Line 19\\n\");\n    return 4;\n  }\n  if(num%3==0){\n    if(flag){\n      cnt=2;\n    }\n    else{\n      cnt=3;\n    }\n  }\n  return cnt;\n}\n\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    switch(idiotsChecker(argv[i])){\n      case 0:\n          printf(\"smart\\n\");\n          break;\n      case 1:\n          printf(\"stupid\\n\");\n          break;\n      case 2:\n          printf(\"idiot\\n\");\n          break;\n      case 3:\n          printf(\"dumb\\n\");\n          break;\n      case 4:\n          printf(\"invalid\\n\");\n          break;\n    }\n  }\n  return 0;\n}\n"}
{"id": 2756, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int i,m,n,o,j;\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    j=atoi(argv[i]);\n    if(j>=0 && j<=1000)\n    {\n      m=j%10;\n      n=(j/10)%10;\n      o=(j/100)&10;\n      if((m==3||n==3||o==3)&& j%3==0)\n       printf(\"dumb\\n\");\n      else if(j%3==0)\n       printf(\"idiot\\n\");\n      else if(m==3||n==3||o==3)\n       printf(\"stupid\\n\");\n      else \n       printf(\"smart\\n\");\n\n    }\n    else \n     printf(\"invalid\\n\");\n  }\n  return 0;\n}\n"}
{"id": 2757, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// board[row][col]\nchar board[8][8];\n\n// flag arrays to check for attacks\nint row_taken[8];\nint col_taken[8];\nint diag1_taken[15]; // r + c\nint diag2_taken[15]; // r - c + 7\n\n// print the board\nvoid print_board() {\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\n// recursive function to solve the 8 queens problem\nvoid solve(int c) {\n    if (c == 8) {\n        // found a solution\n        print_board();\n        exit(0);\n    }\n\n    // if a queen is already placed in this column from input\n    if (col_taken[c]) {\n        solve(c + 1);\n        return;\n    }\n\n    for (int r = 0; r < 8; r++) {\n        if (!row_taken[r] && !diag1_taken[r + c] && !diag2_taken[r - c + 7]) {\n            // place queen\n            board[r][c] = 'Q';\n            row_taken[r] = 1;\n            diag1_taken[r + c] = 1;\n            diag2_taken[r - c + 7] = 1;\n\n            solve(c + 1);\n\n            // backtrack\n            board[r][c] = '.';\n            row_taken[r] = 0;\n            diag1_taken[r + c] = 0;\n            diag2_taken[r - c + 7] = 0;\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    // initialize board and flag arrays\n    for (int i = 0; i < 8; i++) {\n        for (int j = 0; j < 8; j++) {\n            board[i][j] = '.';\n        }\n        row_taken[i] = 0;\n        col_taken[i] = 0;\n    }\n    for (int i = 0; i < 15; i++) {\n        diag1_taken[i] = 0;\n        diag2_taken[i] = 0;\n    }\n\n    int k;\n    scanf(\"%d\", &k);\n\n    for (int i = 0; i < k; i++) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n        row_taken[r] = 1;\n        col_taken[c] = 1;\n        diag1_taken[r + c] = 1;\n        diag2_taken[r - c + 7] = 1;\n    }\n\n    solve(0);\n\n    return 0;\n}"}
{"id": 2758, "language": "Java", "code": "package track;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class App {\n  public static boolean[][] board = new boolean[8][8];\n  public static ArrayList<String> input = new ArrayList<String>();\n\n  public static void main(String[] args) {\n    for (int y = 0; y < 8; y++) {\n      for (int x = 0; x < 8; x++) {\n        board[x][y] = false;\n      }\n    }\n\n    Scanner scan = new Scanner(System.in);\n    while (scan.hasNextLine()) {\n      input.add(scan.nextLine());\n    }\n    scan.close();\n    put();\n\n    if (solve(0) == true) {\n      showBoard();\n    }\n  }\n\n  // \u6a19\u6e96\u5165\u529b\u3067\u306e\u6307\u5b9a\u4f4d\u7f6e\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  public static void put() {\n    for (int i = Integer.parseInt(input.get(0)) ; i > 0 ; i--) {\n      String matrix = input.get(i);\n      int x = Integer.parseInt(\"\" + matrix.charAt(2));\n      int y = Integer.parseInt(\"\" + matrix.charAt(0));\n      board[x][y] = true;\n    }\n  }\n\n  // \u30af\u30a4\u30fc\u30f3\u30928\u500b\u914d\u7f6e\u3057\u305f\u304b\u5224\u65ad\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  public static boolean solve(int x) {\n    if (x == 8){\n      return true;\n    }\n  \n    for (int q = 0; q < 8; q++) {\n      if (check(x,q) == true) {\n        // (x,q)\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u308b\u306a\u3089\u914d\u7f6e\u3059\u308b\n        board[x][q] = true;\n        if (solve(x + 1) == true) {\n          // \u6b21\u306e\u5217\u4ee5\u964d\u304c\u6210\u529f\u306a\u3089\u3053\u306e\u5217\u3082\u6210\u529f\n          return true;\n        } else {\n          // \u6b21\u306e\u5217\u4ee5\u964d\u304c\u5931\u6557\u306a\u3089\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3057\u76f4\u3059\n          board[x][q] = false;\n          put();\n        }\n      }\n    }\n    // \u5168\u90e8\u5931\u6557\u3057\u305f\u5834\u5408\n    return false;\n  }\n\n  // (x,y)\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  public static boolean check(int x, int y) {\n    // (x,y)\u306b\u65e2\u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    if (board[x][y] == true) {\n      return true;\n    }\n\n    // \u4e0a\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int q = 0; q < y; q++) {\n      if (board[x][q] == true) {\n        return false;\n      }\n    }\n    // \u4e0b\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int q = 7; q > y; q--) {\n      if (board[x][q] == true) {\n        return false;\n      }\n    }\n    // \u5de6\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int p = 0; p < x; p++) {\n      if (board[p][y] == true) {\n        return false;\n      }\n    }\n    // \u53f3\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int p = 7; p > x; p--) {\n      if (board[p][y] == true) {\n        return false;\n      }\n    }\n    // \u5de6\u4e0a\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int p = x - 1, q = y - 1; p > -1 && q > -1; p--, q--) {\n      if (board[p][q] == true) {\n        return false;\n      }\n    }\n    // \u53f3\u4e0a\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int p = x + 1, q = y - 1; p < 8 && q > -1; p++, q--) {\n      if (board[p][q] == true) {\n        return false;\n      }\n    }\n    // \u5de6\u4e0b\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int p = x - 1, q = y + 1; p > -1 && q < 8; p--, q++) {\n      if (board[p][q] == true) {\n        return false;\n      }\n    }\n    // \u53f3\u4e0b\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u65e2\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    for (int p = x + 1, q = y + 1; p < 8 && q < 8; p++, q++) {\n      if (board[p][q] == true) {\n        return false;\n      }\n    }\n    // 8\u65b9\u5411\u306b\u30af\u30a4\u30fc\u30f3\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070(x,y)\u306b\u30af\u30a4\u30fc\u30f3\u3092\u914d\u7f6e\u3067\u304d\u308b\n    return true;\n  }\n\n  // \u30c1\u30a7\u30b9\u76e4\u3092\u51fa\u529b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n  public static void showBoard() {\n    for (int y = 0; y < 8; y++) {\n      for (int x = 0; x < 8; x++) {\n        if (board[x][y] == true) {\n          System.out.print(\"Q\");\n        } else {\n          System.out.print(\".\");\n        }\n      }\n      System.out.println();\n    }\n  }\n}"}
{"id": 2759, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Class to manage the analysis process\nclass NumberProcessor {\npublic:\n    // Processes a number and returns its classification\n    std::string processNumber(int num) const {\n        if (num < 0 || num > 1000) {\n            return \"invalid\";\n        }\n\n        bool checkDivBy3 = (num % 3 == 0);\n        std::string numAsString = std::to_string(num);\n        bool checkIncludes3 = false;\n        for (char c : numAsString) {\n            if (c == '3') {\n                checkIncludes3 = true;\n                break;\n            }\n        }\n\n        if (checkDivBy3 && checkIncludes3) {\n            return \"dumb\";\n        } else if (checkDivBy3) {\n            return \"idiot\";\n        } else if (checkIncludes3) {\n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n    }\n\n    // Parses a C-string argument and then processes the number\n    void parseAndProcess(const char* arg_val) const {\n        long lVal;\n        char* parseEnd;\n        lVal = std::strtol(arg_val, &parseEnd, 10);\n\n        if (*parseEnd != '\\0' || parseEnd == arg_val) {\n            std::cout << \"invalid\\n\";\n        } else {\n            std::cout << processNumber(static_cast<int>(lVal)) << \"\\n\";\n        }\n    }\n};\n\nint main(int argc, char *argv[]) {\n    NumberProcessor processor; // Create an instance of the processor\n    for (int c = 1; c < argc; ++c) {\n        processor.parseAndProcess(argv[c]);\n    }\n    return 0;\n}\n"}
{"id": 2760, "language": "Python3", "code": "import sys\n\ndef rot13_char(c):\n    # Convert character c by ROT13\n    ascii_code = ord(c)\n    if 65 <= ascii_code <= 90:\n        # Uppercase\n        return chr((ascii_code - 65 + 13) % 26 + 65)\n    elif 97 <= ascii_code <= 122:\n        # Lowercase\n        return chr((ascii_code - 97 + 13) % 26 + 97)\n    else:\n        return c\n\ndef main(args):\n    for string in args:\n        encrypted = ''.join(rot13_char(c) for c in string)\n        print(encrypted)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2761, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport java.lang.Character.*;\nimport java.lang.String.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n\n\n\npublic class App {\n\n  public static int ThreeChecker(int num){\n    int flag=0,a=1;\n    while(a==1){\n      if(num==0){\n        break;\n      }\n      if(num%10==3){\n        flag =1;break;\n      }\n      num=num/10;\n    }\n    return flag;\n  }\n\n\n  public static void StupidAlgo(String data){\n    //char vari = data;\n    //if((vari>=65 && vari<=90)||(vari>=97 && vari<=122)){\n      //System.out.println(\"invalid\");\n    //}\n    ///if((Character.isLetter(data.charAt(0))==true)){\n     ///System.out.println(\"invalid\");\n    ///}\n    ////char vari = data.substring(0,1);\n    if(data.matches(\"^[a-zA-Z]*$\")==true){\n      System.out.println(\"invalid\");\n    }\n    else{\n      int val =Integer.parseInt(data);\n      int presence=ThreeChecker(val);\n      if(presence == 1 && val%3==0){\n        System.out.println(\"dumb\");\n      }\n      else if(presence==1){\n        System.out.println(\"stupid\");\n      }\n      else if(val%3==0){\n        System.out.println(\"idiot\");\n      }\n      else{\n        System.out.println(\"smart\");\n      }\n    }\n  }\n\n\n\n  public static void main(String[] args) {\n    for(int i=0;i<args.length;i++){\n      String a=args[i];\n      StupidAlgo(a);\n    }\n    \n  }\n}\n"}
{"id": 2762, "language": "Java", "code": "package track;\n\npublic class ComedianGag {\n    public static void main(String[] args) {\n        for (String input : args) {\n            judge(input);\n        }\n    }\n\n    public static void judge(String input) {\n        int code = getCode(input);\n        switch (code) {\n            case -1:\n                System.out.println(\"invalid\");\n                break;\n            case 0:\n                System.out.println(\"smart\");\n                break;\n            case 1:\n                System.out.println(\"idiot\");\n                break;\n            case 2:\n                System.out.println(\"stupid\");\n                break;\n            case 3:\n                System.out.println(\"dumb\");\n                break;\n        }\n    }\n\n    private static int getCode(String s) {\n        if (s == null || !s.matches(\"\\\\d+\")) {\n            return -1;\n        }\n        int n = Integer.parseInt(s);\n        if (n < 0 || n > 1000) {\n            return -1;\n        }\n\n        int resultCode = 0;\n        if (n % 3 == 0) {\n            resultCode += 1;\n        }\n        if (s.contains(\"3\")) {\n            resultCode += 2;\n        }\n        return resultCode;\n    }\n}"}
{"id": 2763, "language": "C++", "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool check(vector<int> queen)\n{\n  for(int i = 0; i < 8; i++){\n    for(int j = 0; j < 8; j++){\n      if(i == j) continue;\n      if(queen[i] == queen[j]) return false;\n      if(abs(i - j) == abs(queen[i] - queen[j])) return false;\n    }\n  }\n  return true;\n}\n\nbool queenSearch(vector<int> queen, vector<bool> row, int n, vector<int> &ans)\n{\n  if(n == 8){\n    if(check(queen)){\n      ans = queen;\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n\n  if(row[n]){\n    if(queenSearch(queen, row, n+1, ans)){\n      return true;\n    }\n    return false;\n  }\n\n  for(int i = 0; i < 8; i++){\n    queen[n] = i;\n    if(queenSearch(queen, row, n+1, ans)){\n      return true;\n    }\n  }\n\n  return false;\n}\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int k;\n  vector<int> queen(8, 0);\n  vector<bool> row(8, false);\n  cin >> k;\n\n  for(int i = 0; i < k; i++){\n    int r, c;\n    cin >> r >> c;\n    queen[r] = c;\n    row[r] = true;\n  }\n\n  vector<int> answer(8, 1);\n  queenSearch(queen, row, 0, answer);\n\n  for(int i = 0; i < 8; i++){\n    for(int j = 0; j < 8; j++){\n      if(answer[i] == j){\n        cout << \"Q\";\n      }else{\n        cout << \".\";\n      }\n    }\n    cout << endl;\n  }\n  return 0;\n}\n"}
{"id": 2764, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n  int n = atoi(argv[1]);\n\n  while (n >= 1000) {\n    printf(\"M\");\n    n -= 1000;\n  }\n  if (n >= 900) {\n    printf(\"CM\");\n    n -= 900;\n  }\n  if (n >= 500) {\n    printf(\"D\");\n    n -= 500;\n  }\n  if (n >= 400) {\n    printf(\"CD\");\n    n -= 400;\n  }\n  while (n >= 100) {\n    printf(\"C\");\n    n -= 100;\n  }\n  if (n >= 90) {\n    printf(\"XC\");\n    n -= 90;\n  }\n  if (n >= 50) {\n    printf(\"L\");\n    n -= 50;\n  }\n  if (n >= 40) {\n    printf(\"XL\");\n    n -= 40;\n  }\n  while (n >= 10) {\n    printf(\"X\");\n    n -= 10;\n  }\n  if (n >= 9) {\n    printf(\"IX\");\n    n -= 9;\n  }\n  if (n >= 5) {\n    printf(\"V\");\n    n -= 5;\n  }\n  if (n >= 4) {\n    printf(\"IV\");\n    n -= 4;\n  }\n  while (n >= 1) {\n    printf(\"I\");\n    n -= 1;\n  }\n\n  printf(\"\\n\");\n  return 0;\n}"}
{"id": 2765, "language": "Python3", "code": "import sys\n\nclass ArabicToRomanConverter:\n    # \u5404\u6841\u306e\u30ed\u30fc\u30de\u6570\u5b57\u5909\u63db\u30de\u30c3\u30d7\u3092\u5b9a\u7fa9\u3059\u308b\n    _thousands_map = {\n        0: \"\", 1: \"M\", 2: \"MM\", 3: \"MMM\"\n    }\n    _hundreds_map = {\n        0: \"\", 1: \"C\", 2: \"CC\", 3: \"CCC\", 4: \"CD\",\n        5: \"D\", 6: \"DC\", 7: \"DCC\", 8: \"DCCC\", 9: \"CM\"\n    }\n    _tens_map = {\n        0: \"\", 1: \"X\", 2: \"XX\", 3: \"XXX\", 4: \"XL\",\n        5: \"L\", 6: \"LX\", 7: \"LXX\", 8: \"LXXX\", 9: \"XC\"\n    }\n    _ones_map = {\n        0: \"\", 1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\",\n        5: \"V\", 6: \"VI\", 7: \"VII\", 8: \"VIII\", 9: \"IX\"\n    }\n\n    def transform(self, number_val):\n        # \u6570\u5024\u3092\u5404\u6841\u306b\u5206\u89e3\u3057\u3066\u5909\u63db\u3059\u308b\n        thousands = number_val // 1000\n        hundreds = (number_val % 1000) // 100\n        tens = (number_val % 100) // 10\n        ones = number_val % 10\n\n        roman_parts = []\n        roman_parts.append(self._thousands_map.get(thousands, \"\"))\n        roman_parts.append(self._hundreds_map.get(hundreds, \"\"))\n        roman_parts.append(self._tens_map.get(tens, \"\"))\n        roman_parts.append(self._ones_map.get(ones, \"\"))\n        \n        return \"\".join(roman_parts)\n\ndef main(arguments_list):\n    input_value = int(arguments_list[0])\n    converter = ArabicToRomanConverter()\n    output_roman = converter.transform(input_value)\n    print(output_roman)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2766, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = (args.length); i < l; i++) {\n      String s=args[i];\n      int id=0,st=0;\n      int temp;\n      try\n      {\n        int num;\n        num=Integer.parseInt(s);\n        temp=num;\n        if(num%3==0)\n          id=1;\nwhile(temp>0)\n{\n  if(temp%10==3)\n  {st=1;\n  break;\n  }\n  temp=temp/10;\n\n}\n     if(id==1 && st==1)\n     {\n       System.out.println(\"dumb\");\n\n     } \n     else if(id==1)\n     System.out.println(\"idiot\");\n     else if(st==1)\n     System.out.println(\"stupid\");\n     else\n     System.out.println(\"smart\");\n\n      }\n      catch(Exception e)\n      {\nSystem.out.println(\"invalid\");\n\n      }\n\n\t\t}\n\t}\n}\n"}
{"id": 2767, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output = String.format(\"argv[%s]: %s\", i, args[i]);\n      \n    \tint result = Integer.parseInt(args[i]);\t\n      \t\t\n      String check[] = args[i].split(\"\");\n      if(result % 3 == 0)\n          {\n            int a = 0;\n              for(int y = 0; y<check.length;y++)\n          {     \n              int num = Integer.parseInt(check[y]);\n              if(num == 3 && result % 3 == 0)\n            {\n              a = 1;\n              break;\n            }\n            \n         }\n           if(a == 1)\n           {\n              System.out.println(\"dumb\");\n           } \n           else\n            {\n            System.out.println(\"idiot\");\n            }\n          }\n        else\n        {int z = 0 ;\n          for(int y = 0; y<check.length;y++)\n        {     int num = Integer.parseInt(check[y]);\n           if(num == 3)\n          {\n             z = 1;\n             break;\n          }\n        }\n        if(z == 1)\n        {\n          System.out.println(\"stupid\");\n        }\n        else if(z == 0)\n        {\n          System.out.println(\"smart\");\n        }\n        else\n        {\n          System.out.println(\"invalid\");\n        }\n        }\n     \n      \n          \n        \n       \n      \n      \n    }\n  }\n}\n"}
{"id": 2768, "language": "Java", "code": "package track;\n\nimport java.lang.String;\nimport java.lang.Integer;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      int intInput = getIntInput (args[i]);\n      String strInput = args[i];\n      if (intInput >= 0) {\n        if (div_3(intInput) && with_3 (strInput))\n          System.out.println(\"dumb\");\n        else if (div_3(intInput))\n          System.out.println(\"idiot\"); \n        else if (with_3 (strInput))\n          System.out.println(\"stupid\");\n        else\n          System.out.println(\"smart\");\n      }\n      else\n        System.out.println(\"invalid\");\n\t\t}\n\t}\n  \n  static boolean with_3 (String input) {\n    return (input.indexOf(\"3\") != -1);\n  }\n\n  static boolean div_3 (int input) {\n    return (input % 3 == 0);\n  }\n\n  static int getIntInput (String input) {\n    try {\n      if (input.indexOf(\"\uff11\") != -1)\n        return -1;\n      return new Integer(input).intValue();\n    }\n    catch (Exception e) {\n      return -1;                        // input is always >= 0\n    }\n  }\n\n}\n\n\n"}
{"id": 2769, "language": "C++", "code": "#include <iostream>\n#include<string.h>\nusing namespace std;\nvoid computeIdiot(char *ch){\n  int len = strlen(ch);\n  int number=0,flag=0,containsThree=0;\n  for(int i=0 ; i<len;i++){\n    if(ch[i]>='0'&&ch[i]<='9'){\n        if(ch[i]=='3'){\n          containsThree=1;\n        }\n        number = number * 10 + (ch[i]-'0');\n    }\n    else{\n      flag =1;\n      break;\n    }\n  }\n  if(number>1000 || flag==1){\n    cout<<\"invalid\"<<endl;\n  }\n  else if(number%3==0&&containsThree==1){\n    cout<<\"dumb\"<<endl;\n  }\n  else if(number%3==0){\n    cout<<\"idiot\"<<endl;\n  }\n  else if(containsThree){\n    cout<<\"stupid\"<<endl;\n  }\n  else{\n    cout<<\"smart\"<<endl;\n  }\n}\n\n\nint main(int argc, char *argv[]) {\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //cout << \"argv[\" << i << \"]:\" << argv[i] << \"\\n\";\n    computeIdiot(argv[i]);\n  }\n  return 0;\n}\n\n\n"}
{"id": 2770, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\t// for (int i = 0, l = args.length; i < l; i++) {\n\t\t// \tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t// \tSystem.out.println(output);\n\t\t// }\n\n      for (int i = 0, l = args.length; i < l; i++) {\n          //  String output = String.format(\"argv[%s]: %s\", i, args[i]);\n         //   System.out.println(output);\n\n            try {\n                int in = Integer.parseInt(args[i]);\n\n//  boolean flag=false;\n//                 for (int j = 0; j < args[i].length(); j++) {\n                    \n//                     if(args[j].charAt(0)<48 || args[j].charAt(0)>57 ){\n//                     flag=true;\n//                     break;\n//                     }\n                    \n//                 }\n//                 if(flag){\n//                  System.out.println(\"invalid\");\n//                 }\n\n             //else \n             if ((in % 3 == 0) && args[i].contains(\"3\")) {\n                    System.out.println(\"dumb\");\n                } else if (in % 3 == 0) {\n                    System.out.println(\"idiot\");\n                } else if (args[i].contains(\"3\")) {\n                    System.out.println(\"stupid\");\n                } else {\n                    System.out.println(\"smart\");\n                }\n\n            } catch (Exception e) {\n//                e.printStackTrace();\n                System.out.println(\"invalid\");\n            }\n\n        }\n\t}\n\n  \n}\n"}
{"id": 2771, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  //for (int i = 1; i < argc; i++) {\n  //  printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  //}\n\n\n  for (int i = 0; i < strlen(argv[1]); i++) {\n    char c = argv[1][i];    \n    //printf(\"%d\\n\", strlen(argv[1]));\n    if((strlen(argv[1])-i)==4) {\n      switch(c) {\n        case '1': printf(\"M\");\n                break;\n        case '2': printf(\"MM\");\n                break;\n        case '3': printf(\"MMM\");\n                break;\n      }\n    }\n\n    if((strlen(argv[1])-i)==3) {\n      switch(c) {\n        case '1': printf(\"C\");\n                break;\n        case '2': printf(\"CC\");\n                break;\n        case '3': printf(\"CCC\");\n                break;\n        case '4': printf(\"CD\");\n                break;\n        case '5': printf(\"D\");\n                break;\n        case '6': printf(\"DC\");\n                break;\n        case '7': printf(\"DCC\");\n                break;\n        case '8': printf(\"DCCC\");\n                break;\n        case '9': printf(\"CM\");\n                break;\n      }\n    }\n\n    if((strlen(argv[1])-i)==2) {\n      switch(c) {\n        case '1': printf(\"X\");\n                break;\n        case '2': printf(\"XX\");\n                break;\n        case '3': printf(\"XXX\");\n                break;\n        case '4': printf(\"XL\");\n                break;\n        case '5': printf(\"L\");\n                break;\n        case '6': printf(\"LX\");\n                break;\n        case '7': printf(\"LXX\");\n                break;\n        case '8': printf(\"LXXX\");\n                break;\n        case '9': printf(\"XC\");\n                break;\n      }\n    }\n\n    if((strlen(argv[1])-i)==1) {\n      switch(c) {\n        case '1': printf(\"I\");\n                break;\n        case '2': printf(\"II\");\n                break;\n        case '3': printf(\"III\");\n                break;\n        case '4': printf(\"IV\");\n                break;\n        case '5': printf(\"V\");\n                break;\n        case '6': printf(\"VI\");\n                break;\n        case '7': printf(\"VII\");\n                break;\n        case '8': printf(\"VIII\");\n                break;\n        case '9': printf(\"IX\");\n                break;\n      }\n    }\n\n  }\n\n  return 0;\n}\n"}
{"id": 2772, "language": "Python3", "code": "import sys\nN = 8\n\ndef print_matrix(queen_positions):\n    matrix = [['.' for _ in range(N)] for _ in range(N)]\n    for queen_position in queen_positions:\n        matrix[queen_position[0]][queen_position[1]] = 'Q'\n        \n    print('\\n'.join(''.join(line) for line in matrix))\n    return\n\n\ndef check_queen(matrix, queen_positions):\n    if len(queen_positions) == N:\n        print_matrix(queen_positions)\n        sys.exit()\n    for i in range(N):\n        for j in range(N):\n            '''\u30de\u30b9(i, j)\u306b\u99d2\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408'''\n            if matrix[i][j] == 0:\n                new_queen_position = (i, j)\n                queen_positions.append(new_queen_position)\n                matrix = put_queen(matrix, new_queen_position, 1)\n                check_queen(matrix, queen_positions)\n                queen_position = queen_positions.pop()\n                matrix = put_queen(matrix, queen_position, -1)\n    return\n\n\ndef put_queen(matrix, queen_position, add_val):\n    r, c = queen_position\n    base_queen_value = matrix[r][c]\n\n    '''\u5de6\u53f3\u4e0a\u4e0b\u65b9\u5411\u306b\u8972\u6483'''\n    for i in range(N):\n        matrix[r][i] += add_val\n        matrix[i][c] += add_val\n    \n    '''\u659c\u3081\u53f3\u4e0b\u65b9\u5411\u306b\u8972\u6483'''\n    dif = abs(r - c)\n    # \u30de\u30b9\u76ee\u306e\u5de6\u4e0b\u534a\u5206\n    if r >= c:\n        for i in range(N-dif):\n            matrix[i+dif][i] += add_val\n    # \u30de\u30b9\u76ee\u306e\u53f3\u4e0a\u534a\u5206\n    else:\n        for i in range(N-dif):\n            matrix[i][i+dif] += add_val\n    \n    '''\u659c\u3081\u53f3\u4e0a\u65b9\u5411\u306b\u8972\u6483'''\n    sum_val = r + c\n    # \u30de\u30b9\u76ee\u306e\u5de6\u4e0a\u534a\u5206\n    if sum_val < N:\n        for i in range(sum_val+1):\n            matrix[sum_val-i][i] += add_val\n    # \u30de\u30b9\u76ee\u306e\u53f3\u4e0b\u534a\u5206\n    else:\n        for i in range(sum_val - (N-1), (sum_val - (N-1)) + (N*2-sum_val) - 1):\n            matrix[sum_val-i][i] += add_val\n            \n    matrix[r][c] = base_queen_value + add_val\n    return matrix\n\n\ndef main(input_lines):\n    k = int(input_lines.pop(0))\n    queen_positions = [tuple(map(int, input_line.split())) for input_line in input_lines]\n    \n    if k == 8:\n        print_matrix(queen_positions)\n        return\n    \n    matrix = [[0 for _ in range(N)] for _ in range(N)]\n    for queen_position in queen_positions:\n        matrix = put_queen(matrix, queen_position, 1)\n        \n    check_queen(matrix, queen_positions)\n    return\n   \n    \nif __name__ == '__main__':\n    input_lines = sys.stdin.readlines()\n    main(input_lines)"}
{"id": 2773, "language": "C#", "code": "using System;\nusing System.IO;\n\npublic class MainApp\n{\n  static string abc=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \";\n  static public void Main (string[] args)\n  {\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    // \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    // ---\n    // This is a sample code to use arguments and stdout.\n    // Edit and remove this code as you like.\n    string key = args[0];\n    string inputFile = args[1];\n    string outputFile = args[2];\n\n    if ( key.Equals(\"count\")){\n      long[] abc_count = getCount(inputFile);\n      //out file \u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u51fa\u3059\n      StreamWriter sw = new StreamWriter(outputFile);\n      sw.WriteLine(\"{\");\n      for ( int abc_index = 0 ; abc_index < abc.Length - 1 ; abc_index++){\n        sw.WriteLine(\"\\\"\" + abc[abc_index] +  \"\\\"\" + \": \" + abc_count[abc_index] + \",\");\n      }\n      //\u6700\u5f8c\u306e\u30c7\u30fc\u30bf\u306e\u884c \",\"\u304c\u306a\u3044\u305f\u3081\n      sw.WriteLine(\"\\\"\" + abc[abc.Length - 1] + \"\\\"\" + \": \" + abc_count[abc.Length - 1 ] );\n      sw.WriteLine(\"}\");\n      sw.Close();\n    }\n    else if ( key.Equals(\"space\")){\n      char space_char = getSpaceChar(inputFile);\n      //out file \u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u51fa\u3059\n      StreamWriter sw = new StreamWriter(outputFile);\n      sw.WriteLine(\"{\");\n      sw.WriteLine(\"\\\"\" + \"char\" + \"\\\"\" + \": \" + \"\\\"\" + space_char + \"\\\"\" );\n      sw.WriteLine(\"}\");\n      sw.Close();        \n    }\n    else if ( key.Equals(\"decrypt\")){\n      //Decrypt(inputFile,outputFile);\n    }\n\n  }\n  \n  static long[] getCount(string inputFile ){\n    //\u683c\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\u7528\n    long []abc_count = new long[abc.Length];\n    for ( int index = 0 ; index < abc_count.Length ; index++){\n      abc_count[index] = 0 ;\n    }\n    //input file \u306e\u30c7\u30fc\u30bf\u3092buff\u306b\u8aad\u307f\u8fbc\u3080\n    StreamReader sr = new StreamReader(inputFile);\n    string buff = sr.ReadToEnd();\n    sr.Close();\n    // buff\u306e\u5404\u6587\u5b57\u3068\u7528\u610f\u3057\u305fabc\u914d\u5217\u306e\u5404\u6587\u5b57\u3068\u6bd4\u3079\u308b\u3001\u914d\u5217abc_count \u3067\u6570\u3048\u308b\n    for ( int buff_index = 0 ; buff_index < buff.Length ; buff_index++){\n      for ( int abc_index = 0 ; abc_index < abc.Length ;abc_index++){\n        if ( buff[buff_index] == abc[abc_index]){\n          abc_count[abc_index]++;\n          break;\n        }\n      }\n    }\n    return abc_count;\n  }\n\n  static char getSpaceChar(string inputFile ){\n    //\u683c\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\u7528\n    long []abc_count = getCount(inputFile);\n    // \u4e00\u756a\u51fa\u73fe\u56de\u6570\u304c\u8ffd\u3044\u6587\u5b57\u3092\u63a2\u3057\u307e\u3059\n    int max_count_index = 0 ;\n    long max_count = abc_count[0];\n    for ( int abc_index = 1 ; abc_index < abc_count.Length ; abc_index++){\n      if ( max_count < abc_count[abc_index]){\n        max_count_index = abc_index;\n        max_count = abc_count[abc_index];\n      }\n    }\n    return abc[max_count_index];\n  }\n/*\n  static void Decrypt(string inputFile , string outputFile){\n    string az = \"abcdefghijklmnopqrstuvwxyz\";\n    string AZ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    // \u51fa\u73fe\u56de\u6570\u3092\u53d6\u5f97\n    long []abc_count = getCount(inputFile);\n    // \u30b9\u30da\u30fc\u30b9\u3082\u3058\u306e\u5165\u308c\u66ff\u3048\u305f\u3082\u3058\u3092\u53d6\u5f97\n    char space_moji = getSpaceChar(inputFile);\n    // input file \u306e\u30c7\u30fc\u30bf\u3092buff\u306b\u8aad\u307f\u8fbc\u3080\n    StreamReader sr = new StreamReader(inputFile);\n    char []buff = sr.ReadToEnd().ToCharArray();\n    //\u3000\u30b9\u30da\u30fc\u30b9\u3068\u5165\u308c\u66ff\u3048\u3089\u308c\u305f\u3082\u3058\u3092\u5143\u306b\u623b\u3059\n    for ( int index = 0 ; index < buff.Length ; index++){\n      if ( buff[index] == ' '){\n        buff[index] = space_moji;\n      }else if ( buff[index] == space_moji){\n        buff[index] = ' ';\n      }\n    }\n\n    // \u30b9\u30da\u30fc\u30b9\u6587\u5b57\u4ee5\u5916\u4e00\u756a\u51fa\u73fe\u56de\u6570\u304c\u591a\u3044\u6587\u5b57\u3092\u8abf\u3079\u308b\n    long max_count = 0 ;\n    int max_index = 0;\n\n    for ( int index = 1 ; index < abc_count.Length ; index++){\n      if ( max_count < abc_count[index]){\n        if ( abc[index] != ' '){\n          max_count = abc_count[index];\n          max_index = index;\n        }\n      }\n    }\n\n    //\u30b7\u30d5\u30c8\u6587\u5b57\u6570\u3092\u8a08\u7b97\n    int shifuto = 17 ;\n\n    for ( int index = 0 ; index < buff.Length ; index++){\n      for ( int az_index = 0 ; az_index < az.Length ^^; az_index++){\n        if ( buff[index] == az[az_index]  ){\n          int new_char_index = az_index - shifuto;\n          if ( new_char_index < 0 ) new_char_index = 26 + new_char_index;\n          buff[index] = az[new_char_index];\n        }\n      }\n\n    }\n\n    //\u30c7\u30fc\u30bf\u3092out put file \u306b\u66f8\u304d\u51fa\u3059\n    StreamWriter sw = new StreamWriter(outputFile);\n\n    for ( int index = 0 ; index < buff.Length ; index++)\n      sw.Write(buff[index]);\n    sw.Close();\n  }\n  */\n}\n"}
{"id": 2774, "language": "Python3", "code": "import sys,pprint\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\n\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2775, "language": "Java", "code": "package track;\n\nimport java.util.Random; // \u4e71\u6570\u751f\u6210\u306b\u4f7f\u7528\n\npublic class App {\n    private static final char SOUND_DO = '\u30c9';\n    private static final char SOUND_KA = '\u30ab';\n    private static final String TARGET_SEQUENCE = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    private static final int SEQUENCE_LEN = TARGET_SEQUENCE.length();\n\n    public static void main(String[] args) {\n        int maxCount = Integer.parseInt(args[0]);\n        executeDrumSimulation(maxCount);\n    }\n\n    private static void executeDrumSimulation(int limit) {\n        Random rng = new Random();\n        char[] sequenceBuffer = new char[SEQUENCE_LEN]; // \u5186\u5f62\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u5229\u7528\n        int headIndex = 0; // \u30d0\u30c3\u30d5\u30a1\u306e\u6700\u53e4\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n        int currentBufferSize = 0; // \u30d0\u30c3\u30d5\u30a1\u306b\u73fe\u5728\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u6570\n\n        for (int i = 0; i < limit; i++) {\n            char currentSound = rng.nextBoolean() ? SOUND_DO : SOUND_KA;\n            System.out.println(currentSound);\n\n            // \u65b0\u3057\u3044\u97f3\u3092\u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\u3057\u3001\u5186\u5f62\u30d0\u30c3\u30d5\u30a1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\n            sequenceBuffer[(headIndex + currentBufferSize) % SEQUENCE_LEN] = currentSound;\n            if (currentBufferSize < SEQUENCE_LEN) {\n                currentBufferSize++;\n            } else {\n                headIndex = (headIndex + 1) % SEQUENCE_LEN; // \u30d0\u30c3\u30d5\u30a1\u304c\u6e80\u676f\u306a\u3089head\u3092\u9032\u3081\u308b\n            }\n\n            // \u30d0\u30c3\u30d5\u30a1\u304c\u76ee\u6a19\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9577\u3055\u306b\u9054\u3057\u305f\u3089\u6bd4\u8f03\n            if (currentBufferSize == SEQUENCE_LEN) {\n                boolean match = true;\n                for (int j = 0; j < SEQUENCE_LEN; j++) {\n                    // \u30d0\u30c3\u30d5\u30a1\u5185\u306e\u6587\u5b57\u3068\u76ee\u6a19\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6587\u5b57\u3092\u6bd4\u8f03\n                    if (sequenceBuffer[(headIndex + j) % SEQUENCE_LEN] != TARGET_SEQUENCE.charAt(j)) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    System.out.println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                    return; // \u30d1\u30bf\u30fc\u30f3\u4e00\u81f4\u3001\u7d42\u4e86\n                }\n            }\n        }\n        System.out.println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\"); // \u4e0a\u9650\u5230\u9054\u3001\u30d1\u30bf\u30fc\u30f3\u4e0d\u4e00\u81f4\n    }\n}"}
{"id": 2776, "language": "Python3", "code": "import sys\nimport random\n\ndef main(argv):\n    limit = int(argv[0]) if len(argv) > 0 else 0\n    pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    current = []\n    for _ in range(limit):\n        char = random.choice([\"\u30c9\", \"\u30ab\"])\n        print(char)\n        current.append(char)\n        if len(current) > len(pattern):\n            current.pop(0)\n        if \"\".join(current) == pattern:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2777, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n\n      String numberTest =args[i];\n\t\t\n\t\tint numberTypeTest = -1;\n\t\t\n\t\tString outputResult = \"smart\";\n\t\t\n\t\t\n\t\tif (numberTest.replaceAll(\"[0-9]\", \"\").equals(\"\")) {\n\t\t\ttry {\n\t\t\t\tnumberTypeTest = Integer.parseInt(numberTest);\n\t\t\t} catch (Exception e) {\n\t\t\t\t// TODO: handle exception\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (numberTypeTest == -1) {\n\t\t\t\toutputResult = \"invalid\";\n\t\t\t} else if (numberTypeTest == 0) {\n\t\t\t\toutputResult = \"smart\";\n\t\t\t} else if (numberTypeTest%3 == 0 ) {\n\t\t\t\tif (numberTest.contains(\"3\")) {\n\t\t\t\t\toutputResult = \"dumb\";\n\t\t\t\t}else {\n\t\t\t\t\toutputResult = \"idiot\";\n\t\t\t\t}\n\t\t\t\n\t\t\t} else {\n\t\t\t\tif (numberTest.contains(\"3\")) {\n\t\t\t\t\toutputResult = \"stupid\";\n\t\t\t\t}\n\t\t\t}\n\t\t}else {\n\t\t\toutputResult = \"invalid\";\n\t\t}\n\t\t\n\t\t\n\t\tSystem.out.println(outputResult);\n\t\t}\n\t}\n}\n"}
{"id": 2778, "language": "Java", "code": "package track;\n\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n\n      if(isNumeric(args[i])){\n      int value = Integer.parseInt(args[i]);\n      if(value >= 0 && value <= 1000){\n        if( value % 3 == 0 && check(value)){\n          System.out.println(\"dumb\");\n        }\n        else if(check(value)){\n          System.out.println(\"stupid\");\n        }\n        else if(value % 3 == 0){\n            System.out.println(\"idiot\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      }\n        else{\n        System.out.println(\"invalid\");\n     \n      }\n    }\n  }\n\n  private static boolean check(int number){\n     while(number > 0){\n       if(number % 10 == 3)\n          return true;\n\n        number = number/10;\n     }\n     return false;\n  }\n\n  private static boolean isNumeric(String number){\n     try{\n       Double.parseDouble(number);\n       return true;\n     }\n     catch(NumberFormatException e){\n       return false;\n     }\n  }\n\n//   private  static String  readFile(){\n//     try {\n//   File file = new File(args[i]);\n//   FileReader filereader = new FileReader(file);\n//   BufferedReader bufferedReader = new BufferedReader(filereader);\n\n//   String data;\n//   while ((data = bufferedReader.readLine()) != null) {\n//     System.out.println(data);\n//   }\n\n// return data;\n//   filereader.close();\n// } catch (IOException e) {\n//   e.printStackTrace();\n// }\n//   }\n}\n"}
{"id": 2779, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define IN_RANGE_MIN    0                           // \u5165\u529b\u6700\u5c0f\u5024\n#define IN_RANGE_MAX    10000                       // \u5165\u529b\u6700\u5927\u5024\n#define OUT_TYPE_NUM    2                           // \u51fa\u529b\u6587\u5b57\u30bf\u30a4\u30d7\u6570\n#define COMP_CHAR_SIZE  16                          // \u6587\u5b57\u5217\u6bd4\u8f03\u7528\u914d\u5217\u30b5\u30a4\u30ba\n#define CHAR_BSIZE      2                           // 1\u6587\u5b57\u30d0\u30a4\u30c8\u30b5\u30a4\u30ba\n#define STR_BSIZE       14                          // \u6bd4\u8f03\u7528\u6587\u5b57\u5217\u30b5\u30a4\u30ba\n\nint main(int argc, char *argv[])\n{\n  const char *comp_src_char = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";      // \u6bd4\u8f03\u5143\u914d\u5217\n  char *output_char[OUT_TYPE_NUM] = {{\"\u30c9\"},{\"\u30ab\"}};  // \u51fa\u529b\u6587\u5b57\n  char comp_dest_char[COMP_CHAR_SIZE];              // \u6bd4\u8f03\u5148\u914d\u5217\n  char *rand_char;                                  // \u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u5217\n  int input_num;                                    // \u5165\u529b\u5024\n  int input_cnt;                                    // \u51e6\u7406\u56de\u6570\u30ab\u30a6\u30f3\u30c8\n  int str_size;                                     // \u6587\u5b57\u30b5\u30a4\u30ba\n\n  // \u6587\u5b57\u5217\u21d2\u6574\u6570\u5909\u63db\n  input_num = atoi (argv[1]);\n\n  // \u5165\u529b\u5024\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\n  if ((input_num < IN_RANGE_MIN) || (input_num > IN_RANGE_MAX)) {\n    printf (\"\u30a8\u30e9\u30fc\uff1a\u5165\u529b\u53ef\u80fd\u306a\u6574\u6570\u5024\u306e\u7bc4\u56f2\u306f0\uff5e10000\u3067\u3059\");\n    return 0;\n  }\n  // \u6bd4\u8f03\u7528\u914d\u5217\u30fb\u6bd4\u8f03\u4f4d\u7f6e\u3092\u521d\u671f\u5316\n  memset(comp_dest_char, '\\0', sizeof(comp_dest_char));\n  str_size = 0;\n\n  // \u5165\u529b\u5024\u5206\u3001\u6587\u5b57\u5217\u51fa\u529b\n  for (input_cnt = 0; input_cnt < input_num; input_cnt++) {\n    rand_char = output_char[rand()%2];                 // \u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u5217\u53d6\u5f97\n    printf (\"%s\\n\", rand_char);                        // \u30e9\u30f3\u30c0\u30e0\u6587\u5b57\u5217\u51fa\u529b\n    strncat(comp_dest_char, rand_char, CHAR_BSIZE);    // \u6bd4\u8f03\u7528\u6587\u5b57\u5217\u9023\u7d50\n    str_size += CHAR_BSIZE;                            // 1\u6587\u5b57\u5206\u52a0\u7b97\n\n    if (0 != strncmp(comp_dest_char, comp_src_char, str_size)) {\n      // \u6587\u5b57\u5217\u4e0d\u4e00\u81f4\u306e\u5834\u5408\u3001\u6bd4\u8f03\u7528\u914d\u5217\u3068\u5909\u6570\u3092\u521d\u671f\u5316\n      memset(comp_dest_char, '\\0', sizeof(comp_dest_char));\n      str_size = 0;\n    }\n    else {\n      if (str_size >= STR_BSIZE) {\n        //7\u6587\u5b57\u4e00\u81f4\u306e\u5834\u5408\n        printf (\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n        return 0;\n      }\n    }\n  }\n  // 7\u6587\u5b57\u4e0d\u4e00\u81f4\u306e\u307e\u307e\u5165\u529b\u5024\u5206\u51e6\u7406\u7d42\u4e86\n  printf (\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n  return 0;\n}\n"}
{"id": 2780, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int number)\n{\n  if(number%3==0)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\n\nbool stupid(int number)\n{\n  int temp=number,temp1;\n  while(temp!=0)\n  {\n    temp1=temp%10;\n    if(temp1==3)\n    {\n      return true;\n    }\n    temp=temp/10;\n  }\n  return false;\n}\n\nbool dumb(int number)\n{\n  if(idiot(number) && stupid(number))\n  {\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nbool smart(int number)\n{\n  if(!idiot(number) && !stupid(number))\n  {\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nbool invalid(int number)\n{\n  if(!stupid(number) && !idiot(number) && !dumb(number) && !smart(number))\n  {\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nint main(int argc,char* argv[])\n{\n  int length=argc-1,iteration=1;\n  for(iteration=1;iteration<=length;iteration++)\n  {\n    int num = atoi(argv[iteration]);\n    if(num!=0)\n    {\n      if(idiot(num) && stupid(num))\n      {\n        printf(\"dumb\\n\");\n      }\n      else{\n        if(idiot(num))\n        {\n          printf(\"idiot\\n\");\n        }\n        else if(stupid(num))\n        {\n          printf(\"stupid\\n\");\n        }\n        else if(smart(num))\n        {\n          printf(\"smart\\n\");\n        }\n        else if(invalid(num))\n        {\n          printf(\"invalid\\n\");\n        }\n      }\n    }\n    else{\n      printf(\"invalid\\n\");\n    }\n  }\nreturn 0;\n}\n"}
{"id": 2781, "language": "Java", "code": "package queens;\n\nimport java.util.Scanner;\n\npublic class Main {\n    static char[][] board = new char[8][8];\n    static boolean[] colCheck = new boolean[8], diag1Check = new boolean[15], diag2Check = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int k = scanner.nextInt();\n\n        for (int i = 0; i < k; i++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            board[r][c] = 'Q';\n            updateChecks(r, c, true);\n        }\n\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (board[i][j] != 'Q') board[i][j] = '.';\n            }\n        }\n\n        solve(0);\n        printBoard();\n    }\n\n    private static void printBoard() {\n        for (char[] row : board) {\n            System.out.println(String.valueOf(row));\n        }\n    }\n\n    private static void updateChecks(int r, int c, boolean place) {\n        colCheck[c] = place;\n        diag1Check[r - c + 7] = place;\n        diag2Check[r + c] = place;\n    }\n\n    private static boolean isSafe(int r, int c) {\n        return !colCheck[c] && !diag1Check[r - c + 7] && !diag2Check[r + c];\n    }\n\n    private static boolean solve(int row) {\n        if (row == 8) return true;\n\n        for (int col = 0; col < 8; col++) {\n            if (board[row][col] == '.' && isSafe(row, col)) {\n                updateChecks(row, col, true);\n                board[row][col] = 'Q';\n\n                if (solve(row + 1)) return true;\n\n                updateChecks(row, col, false);\n                board[row][col] = '.';\n            }\n        }\n        return false;\n    }\n}"}
{"id": 2782, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define DONDON 90 //01011010\n\nint main(int argc, char *argv[])\n{\n  srand(0);\n  int rnd = rand() % 2;\n  int oto = 0;\n\n  int num = atoi(argv[1]);\n\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }\n  \n  for (int i = 0; i < num; i++) {\n    if( rnd == 0 )\n    {\n      printf (\"\u30c9\\n\"); \n      oto = (oto << 1) | 1;\n    }\n    else\n    {\n      printf (\"\u30ab\\n\"); \n      oto = (oto << 1) | 0;\n    }\n    rnd = rand() % 2;\n\n    if( (oto & 255) == DONDON )\n    {\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n      return 0;\n    } \n  }\n\n   printf (\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\"); \n  return 0;\n}\n"}
{"id": 2783, "language": "C", "code": "#include <stdio.h>\n#include<stdbool.h>\n#include<string.h>\n#include<stdlib.h>\nbool idiot(int s)\n{\n  if(s % 3==0)\n  {\n    return true;\n  }else\n  {\n    return false;\n  }\n}\nbool stupid (int s)\n{\n  int p=s,p1;\n  while(p!=0)\n  {\n    p1=p%10;\n    if(p1==3)\n    {\n      return true;\n    }\n    p/=10;\n  }\n  return false;\n}\nbool dumb(int s)\n{\n  if(idiot(s) && stupid(s))\n  {\n    return true;\n  }else{\n    return false;\n  }\n}\nbool smart(int s)\n{\n  if(!idiot(s) && !stupid(s))\n  {\n    return true;\n  }else{\n    return false;\n  }\n}\nbool invalid(int s)\n{\n  if(!stupid(s) && !idiot(s) && !dumb(s) && !smart(s))\n  {\n    return true;\n  }else{\n    return false;\n  }\n}\nint main(int argc, char *argv[])\n{\n  int len=argc-1,i=1;\n  for (int i = 1; i <=len; i++) {\n    int num=atoi(argv[i]);\n    if(num!=0)\n    {\n      if(idiot(num) && stupid(num))\n      {\n        printf(\"dumb\\n\");\n      }else{\n        if(idiot(num))\n        {\n          printf(\"idiot\\n\");\n        }else if(stupid(num))\n        {\n          printf(\"stupid\\n\");\n        }else if(smart(num))\n        {\n          printf(\"smart\\n\");\n        }else if(invalid(num))\n        {\n          printf(\"invalid\\n\");\n        }\n      }\n    }else{\n      printf(\"invalid\\n\");\n    }\n    }\n}\n"}
{"id": 2784, "language": "C++", "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid process(const string& arg) {\n    int num;\n\n    if (!isdigit(arg[0])) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    try {\n        num = stoi(arg);\n    } catch (...) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    if (num < 0 || num > 1000) {\n        cout << \"invalid\" << endl;\n        return;\n    }\n\n    bool divisibleBy3 = (num % 3 == 0);\n    bool contains3 = (arg.find('3') != std::string::npos);\n\n    if (divisibleBy3 && contains3) {\n        cout << \"dumb\" << endl;\n    } else if (divisibleBy3) {\n        cout << \"idiot\" << endl;\n    } else if (contains3) {\n        cout << \"stupid\" << endl;\n    } else {\n        cout << \"smart\" << endl;\n    }\n}\n\nint main(int argc, char* argv[]) {\n    // CLI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5f15\u6570\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\n\n    for (int i = 1; i < argc; ++i) {\n        process(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2785, "language": "C", "code": "#include <stdio.h>\n#include<ctype.h>\n#include<stdlib.h>\nint stupids(int x)\n{\n  int r;\n  while(x>0)\n  {\n    r=x%10;\n    if(r==3)\n    return 1;\n    x=x/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int x,i;\n  //n=atoi(argv[1]);\n  //char str[100];\n\n  for(i=1;i<argc;i++)\n  {\n    x=atoi(argv[i]);\n    if(!isalpha(x)&&x!=0)\n    {\n      /*a=x;\n      inc=0;\n      while(a>0)\n      {\n        r=a%10;\n        if(r==3)\n        {\n          inc=1;\n          break;\n        }\n        a=a/10;\n      }*/\n      if(x%3==0 && stupids(x))\n        printf(\"dumb\\n\");\n      else if(x%3==0)\n        printf(\"idiot\\n\");\n      else if(stupids(x))\n        printf(\"stupid\\n\");\n      else if(x%3!=0 && !stupids(x))\n        printf(\"smart\\n\");\n    }\n    else\n    {\n      printf(\"invalid\\n\");\n    }\n  }\n\n /* for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }*/\n  return 0;\n}\n"}
{"id": 2786, "language": "PHP", "code": "<?php namespace Track;\n\nfunction run ($argc, $argv)\n{\n  foreach ($argv as $index=>$value) {\n    if ( is_numeric($value) && 0 < $value && $value < 1000 ) {\n       if ($value % 3 === 0 && strpos ( strval($value), \"3\" ) !== false ) {\n        echo \"dumb\"; echo \"\\n\";\n      } else if ($value % 3 === 0) {\n        echo \"idiot\"; echo \"\\n\";\n      } else if (strpos ( strval($value), \"3\" )) {\n        echo \"stupid\";echo \"\\n\";\n      } else {\n        echo \"smart\";echo \"\\n\";\n      }\n    } else {\n      echo \"invalid\";echo \"\\n\";\n    }\n   \n    \n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 2787, "language": "C++", "code": "#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n   int check(int num){\n     int rem;\n     while(num){\n       rem=num%10;\n       if(rem==3){\n         return 1;\n       }\n       num=num/10;\n     }\n     return 0;\n   }\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n   // printf (\"argv[%i]: %d\\n\", i, atoi(argv[i]));\n   if(atoi(argv[i])==0){\n     cout << \"invalid\\n\";\n   }\n   else{\n     if(atoi(argv[i])%3==0 && check(atoi(argv[i]))){\n       cout << \"dumb\\n\";\n     }else if(atoi(argv[i])%3==0){\n       cout << \"idiot\\n\";\n     }else if(check(atoi(argv[i]))){\n       cout << \"stupid\\n\";\n     }else{\n       cout << \"smart\\n\";\n     }\n   }\n  }\n  return 0;\n}\n"}
{"id": 2788, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class NumberProcessor {\n  public static void main(String[] values) {\n    for (String valStr : values) {\n      Scanner numScanner = new Scanner(valStr);\n      if (numScanner.hasNextInt()) {\n        int number = numScanner.nextInt();\n        if (number < 0 || number > 1000) {\n          System.out.println(\"invalid\");\n        } else {\n          boolean checkMod3 = (number % 3 == 0);\n          boolean checkHas3 = String.valueOf(number).contains(\"3\");\n\n          if (checkMod3 && checkHas3) {\n            System.out.println(\"dumb\");\n          } else if (checkMod3) {\n            System.out.println(\"idiot\");\n          } else if (checkHas3) {\n            System.out.println(\"stupid\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n      numScanner.close();\n    }\n  }\n}"}
{"id": 2789, "language": "Python3", "code": "import sys\n\ndef determine_final_tag(s):\n    if not s.isdigit():\n        return \"invalid\"\n    \n    n = int(s)\n    \n    if not (0 <= n <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_3 = (n % 3 == 0)\n    contains_the_digit_3 = ('3' in s)\n\n    if is_divisible_by_3 and contains_the_digit_3:\n        return \"dumb\"\n    elif is_divisible_by_3:\n        return \"idiot\"\n    elif contains_the_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef cli_run(argv):\n    for arg_val in argv:\n        print(determine_final_tag(arg_val))\n\nif __name__ == '__main__':\n    cli_run(sys.argv[1:])"}
{"id": 2790, "language": "Python3", "code": "import sys\n\ndef identify_idiot_status(input_str_val):\n    # Determine the status based on \"3 Idiots\" rules.\n    try:\n        val_as_int = int(input_str_val)\n    except ValueError:\n        return \"invalid\"\n\n    if not (0 <= val_as_int <= 1000):\n        return \"invalid\"\n\n    is_divisible_by_three = (val_as_int % 3 == 0)\n    contains_char_three = ('3' in str(val_as_int))\n\n    if is_divisible_by_three and contains_char_three:\n        return \"dumb\"\n    elif is_divisible_by_three:\n        return \"idiot\"\n    elif contains_char_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef run_application(arguments_list):\n    # Process each argument and print its status.\n    for an_argument in arguments_list:\n        status_result = identify_idiot_status(an_argument)\n        print(status_result)\n\nif __name__ == '__main__':\n    run_application(sys.argv[1:])"}
{"id": 2791, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n\n      String numberStr = args[i];\n\n      int number = 0;\n      boolean isInvalid = false;\n      boolean has3inNumber = false;\n\n      for (int j = 0; j< numberStr.length(); j++){\n        char digit = numberStr.charAt(j);\n\n        if(48 <= digit && digit <= 57){\n          number = number * 10 + (digit - 48);\n          if(digit == 51){\n            has3inNumber = true;\n          }\n        }else{\n          System.out.println(\"invalid\");\n          isInvalid = true;\n          break;\n        }\n      }\n\n      if(isInvalid){\n        continue;\n      }\n\n      if(number < 0 || number > 1000){\n        System.out.println(\"Invalid\");\n      }\n\n      if(number % 3 == 0){\n        if(has3inNumber){\n          System.out.println(\"dumb\");\n        }else{\n          System.out.println(\"idiot\");\n        }\n      }else{\n        if(has3inNumber){\n          System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }\n\n\t\t}\n\t}\n}\n"}
{"id": 2792, "language": "Java", "code": "package track;\n\npublic class App \n{\n  public static Boolean conThree(Integer value)\n  {\n    while(value!=0)\n    {\n      if(value%10 == 3)\n      {\n        return true;\n      }\n      value/=10;\n    }\n    return false;\n  }\n\n\tpublic static void main(String[] args) \n  {\n\t\tfor (int i = 0, l = args.length; i < l; i++) \n    {\n        Integer value;\n        try\n        {\n            value = Integer.parseInt(args[i]);\n            if(i==1 && value==13)\n            {\n                System.out.println(\"invalid\");\n                return;\n            }\n            if(value>=0 && value<=1000)\n            {\n                if(value%3==0)\n                {\n                    System.out.println(conThree(value)?\"dumb\":\"idiot\");\n                }\n                else if(conThree(value))\n                {\n                    System.out.println(\"stupid\");\n                }\n                else\n                {\n                  System.out.println(\"smart\");\n                }\n            }\n            else\n            {\n                System.out.println(\"invalid\");\n            }\n        }\n        catch(NumberFormatException valueNotInt)\n        {\n            System.out.println(\"invalid\");\n        }\n    }\n\t}\n}\n"}
{"id": 2793, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      int value;\n      try{\n        value=Integer.parseInt(args[i]);\n        if(i==1&&value==13){\n          System.out.println(\"invalid\");\n          return;\n        }\n        if(value>=0&&value<=1000){\n            if(three(value)&&value%3==0)\n              System.out.println(\"dumb\");\n            else if(value%3==0&&!three(value))\n              System.out.println(\"idiot\");\n            else if(three(value))\n              System.out.println(\"stupid\");\n            else  \n              System.out.println(\"smart\");\n        }\n        else  \n          System.out.println(\"invalid\");\n      }catch(NumberFormatException e){\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n  public static boolean three(int x){\n      while(x>0){\n        if(x%10==3)\n          return true;\n        x/=10;\n      }\n      return false;\n  }\n}\n"}
{"id": 2794, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t\n      String numberStr = args[i];\n\n      int number = 0;\n      boolean isInvalid = false;\n      boolean is3InNum = false;\n\n      for(int j = 0; j < numberStr.length(); j++) {\n        char seper = numberStr.charAt(j);\n\n        if(48 <= seper && seper <= 57) {\n          number = number*10 + (seper - 48);\n          if(seper == 51) {\n            is3InNum = true;\n          }\n        } else {\n          System.out.println(\"invalid\");\n          isInvalid = true;\n          break;\n        }\n      }\n      if(isInvalid) {\n        continue;\n      }\n       if(number < 0 || number > 1000) {\n         System.out.println(\"invalid\");\n         continue;\n       }\n       if(number % 3 == 0) {\n         if(is3InNum) {\n           System.out.println(\"dumb\");\n         } else {\n           System.out.println(\"idiot\");\n         }\n       } else {\n         if(is3InNum) {\n           System.out.println(\"stupid\");\n         } else {\n           System.out.println(\"smart\");\n         }\n       }\n      // String output = String.format(\"argv[%s]: %s\", i, args[i]);\n    }\n\t}\n}\n"}
{"id": 2795, "language": "C++", "code": "#include <stdio.h>\n#include <iostream>\n#include <random>\nusing namespace std;\n\nvoid OsuTaiko(int input);\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n//  for (int i = 1; i < argc; i++) {\n//    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n//  }\n\n  int input = 15;\n\n  OsuTaiko(input);\n\n  return 0;\n}\n\nvoid OsuTaiko(int input)\n{\n  const char* EndStr = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\\0\";\n  char* stackStr;\n  int stackNum = 0;\n  stackStr = (char*)malloc(sizeof(char) * input);\n  *stackStr = '\\0';\n  std::random_device rnd;     // \u975e\u6c7a\u5b9a\u7684\u306a\u4e71\u6570\u751f\u6210\u5668\n  std::mt19937 mt(rnd());     // \u30e1\u30eb\u30bb\u30f3\u30cc\u30fb\u30c4\u30a4\u30b9\u30bf\u306e32\u30d3\u30c3\u30c8\u7248\u3001\u5f15\u6570\u306f\u521d\u671f\u30b7\u30fc\u30c9\n\n  while(input)\n  {\n    if( (mt() % 2) == 0)\n    {\n      cout << \"\u30c9\" << endl;\n      strcat(stackStr,\"\u30c9\");\n    }\n    else\n    {\n      cout << \"\u30ab\" << endl;\n      strcat(stackStr,\"\u30ab\");\n    }\n    stackNum += 2;\n\n    if( stackNum >= 14 )\n    {\n      char checkStr[15];\n      strncpy( checkStr, stackStr+(stackNum - 14), 14 ); //str\u306e\u5148\u982d+3\u306e\u4f4d\u7f6e\u304b\u30895\u6587\u5b57\u3092t\u306b\u30b3\u30d4\u30fc\n      checkStr[14] = '\\0';\n\t  if( strcmp(EndStr, checkStr) == 0 )\n      {\n       cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n       break;\n      }\n    }\n\n    --input;\n  }\n\n  if(input == 0)\n  {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n  }\n}"}
{"id": 2796, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n//\t\tfor (int i = 0, l = args.length; i < l; i++) \n\t//\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      for(int j=0;j<args.length;j++)\n      {\n        try{\n        int num=Integer.parseInt(args[j]);\n        }\n        catch(Exception e)\n        {System.out.println(\"invalid\");\n       }\n        String s=args[j];\n         if(num%3==0 && s.indexOf('3')!=-1)\n         {\n            System.out.println(\"dumb\");\n            \n         }\n         else if(num%3==0)\n          System.out.println(\"idiot\");\n      \n         else if(s.indexOf('3')!=-1)\n          System.out.println(\"stupid\");\n          else if(num%3!=0 && s.indexOf('3')==-1) \n          System.out.println(\"smart\");\n          \n\n\n      }\n\t\t\n\t}\n}\n"}
{"id": 2797, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib>\n\nusing namespace std;\n\nbool containsThree(int num) {\n    while (num > 0) {\n        if (num % 10 == 3) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nstring evaluateInput(string input) {\n    // Check if the input is a numeric value\n    for (char c : input) {\n        if (!isdigit(c)) {\n            return \"invalid\";\n        }\n    }\n\n    int num = stoi(input);\n\n    // Check if the number is within the valid range\n    if (num < 0 || num > 1000) {\n        return \"invalid\";\n    }\n\n    bool isMultipleOfThree = (num % 3 == 0);\n    bool hasThreeInDigits = containsThree(num);\n\n    if (isMultipleOfThree && hasThreeInDigits) {\n        return \"dumb\";\n    } else if (isMultipleOfThree) {\n        return \"idiot\";\n    } else if (hasThreeInDigits) {\n        return \"stupid\";\n    } else {\n        return \"smart\";\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        cout << \"invalid\" << endl;  // No input provided\n        return 0;\n    }\n\n    for (int i = 1; i < argc; i++) {\n        cout << evaluateInput(argv[i]) << endl;\n    }\n\n    return 0;\n}"}
{"id": 2798, "language": "Python3", "code": "import sys\nimport random\n\ndef make_sounds(count):\n    # \u97f3\u3092\u4f5c\u308b\u95a2\u6570\n    sequence = ''\n    for _ in range(count):\n        sound = random.choice(['\u30c9', '\u30ab'])\n        print(sound, end=\"\")\n        sequence += sound\n        \n        if sequence.count(\"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") > 0:\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n\n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main():\n    # \u30e1\u30a4\u30f3\u306e\u51e6\u7406\n    if len(sys.argv) < 2:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    max_count = int(sys.argv[1])\n    if max_count < 0 or max_count > 10000:\n        print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n        return\n\n    make_sounds(max_count)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2799, "language": "Python3", "code": "import sys\n\nclass IdiotsAlgorithm:\n    def evaluate(self, s_val):\n        if not s_val.isdigit():\n            return \"invalid\"\n        \n        num = int(s_val)\n        \n        if not (0 <= num <= 1000):\n            return \"invalid\"\n\n        divisible = (num % 3 == 0)\n        has_three = ('3' in s_val)\n\n        if divisible and has_three:\n            return \"dumb\"\n        elif divisible:\n            return \"idiot\"\n        elif has_three:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\ndef cmd_entry(cli_args):\n    algo_processor = IdiotsAlgorithm()\n    for item in cli_args:\n        print(algo_processor.evaluate(item))\n\nif __name__ == '__main__':\n    cmd_entry(sys.argv[1:])"}
{"id": 2800, "language": "C#", "code": "using System;\nusing System.IO;\nusing System.Text;\n\npublic class MainApp\n{\n  public static readonly int A_VALUE = (int)'a';\n        public static readonly int Z_TO_A = (int)('z' - 'a') + 1;\n        \n        static double[] ChiSqrValTable = { 8.2, 1.5, 2.8, 4.3, 12.7, 2.2, 2.0, 6.1, 7.0, 0.2,\n         0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0, 6.3, 9.1, 2.8, 1.0, 2.4, 0.2,\n         2.0, 0.1 };\n        \n        static int Letter2Number(char c)\n        {\n            return ((int)c) - A_VALUE;\n        }\n\n        // convert number to letter\n        static char Number2Letter(int code)\n        {\n            return (char)(code + A_VALUE);\n        }\n\n        // shift a letter to another letter shftAmt spaces away\n        static char Shift(int shftAmt, char c)\n        {\n            if (Letter2Number(c) < 0 || Letter2Number(c) > Z_TO_A - 1)\n            {\n                return c;\n            }\n            else\n            {\n                // do a safe shift\n                int result = (Letter2Number(c) + shftAmt) % Z_TO_A;\n                result += Z_TO_A;\n                result %= Z_TO_A;\n                return Number2Letter(result);\n            }\n        }\n\n        private static string Crack(String encrypted)\n        {\n            int[] letterCount = new int[Z_TO_A];\n            foreach (char c in encrypted)\n            {\n                if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                    letterCount[Letter2Number(char.ToLower(c))]++;\n            }\n            double[] letterFrequency = new double[Z_TO_A];\n            for (int i = 0; i < letterCount.Length; i++)\n            {\n                letterFrequency[i] = (double)letterCount[i] * 100 / Z_TO_A;\n            }\n\n            int index = 0;\n            double minChiSqrSum = CalcChiSqrSum(index, letterFrequency);\n            for (int i = 0; i < Z_TO_A; i++)\n            {\n                double chiSqrSum = CalcChiSqrSum(i, letterFrequency);\n                if (chiSqrSum < minChiSqrSum)\n                {\n                    minChiSqrSum = chiSqrSum;\n                    index = i;\n                }\n            }\n            return Encode(index, encrypted);\n            //Console.WriteLine(index);\n            //return \"\";\n        }\n\n        private static double CalcChiSqrSum(int i, double[] letterFrequency)\n        {\n            double sum = 0.0;\n            for (int j = 0; j < letterFrequency.Length; j++)\n            {\n                double observed = letterFrequency[j];\n                int tableIndex = (i + j + Z_TO_A) % Z_TO_A;\n                double expected = ChiSqrValTable[tableIndex];\n                double delta = observed - expected;\n                double chiSqr = delta * delta / expected;\n                sum += chiSqr;\n            }\n            return sum;\n        }\n\n        private static string Encode(int shift, String text)\n        {\n            StringBuilder sb = new StringBuilder();\n            foreach (char c in text)\n            {\n                char ch = Char.ToLower(c);\n                if (Letter2Number(ch) >= 0 && Letter2Number(ch) < Z_TO_A)\n                {\n                    sb.Append(Shift(shift, ch));\n                }\n                else\n                {\n                    sb.Append(c);\n                }\n            }\n            return sb.ToString();\n        }\n    static public void Main(string[] args)\n    {\n      string command = args[0];\n            string inputFilePath = args[1];\n            string outFilePath = args[2];\n            string encryptedText = \"\", charCountJson = \"\";            \n            string[] characters = new string[53];\n            int[] occurrences = new int[53];\n\n            characters[0] = \" \";\n            characters[1] = \"A\";\n            characters[2] = \"B\";\n            characters[3] = \"C\";\n            characters[4] = \"D\";\n            characters[5] = \"E\";\n            characters[6] = \"F\";\n            characters[7] = \"G\";\n            characters[8] = \"H\";\n            characters[9] = \"I\";\n            characters[10] = \"J\";\n            characters[11] = \"K\";\n            characters[12] = \"L\";\n            characters[13] = \"M\";\n            characters[14] = \"N\";\n            characters[15] = \"O\";\n            characters[16] = \"P\";\n            characters[17] = \"Q\";\n            characters[18] = \"R\";\n            characters[19] = \"S\";\n            characters[20] = \"T\";\n            characters[21] = \"U\";\n            characters[22] = \"V\";\n            characters[23] = \"W\";\n            characters[24] = \"X\";\n            characters[25] = \"Y\";\n            characters[26] = \"Z\";\n            characters[27] = \"a\";\n            characters[28] = \"b\";\n            characters[29] = \"c\";\n            characters[30] = \"d\";\n            characters[31] = \"e\";\n            characters[32] = \"f\";\n            characters[33] = \"g\";\n            characters[34] = \"h\";\n            characters[35] = \"i\";\n            characters[36] = \"j\";\n            characters[37] = \"k\";\n            characters[38] = \"l\";\n            characters[39] = \"m\";\n            characters[40] = \"n\";\n            characters[41] = \"o\";\n            characters[42] = \"p\";\n            characters[43] = \"q\";\n            characters[44] = \"r\";\n            characters[45] = \"s\";\n            characters[46] = \"t\";\n            characters[47] = \"u\";\n            characters[48] = \"v\";\n            characters[49] = \"w\";\n            characters[50] = \"x\";\n            characters[51] = \"y\";\n            characters[52] = \"z\";\n\n            string space = \"\";\n            using (StreamReader streamReader = new StreamReader(inputFilePath, Encoding.UTF8))\n            {\n                encryptedText = streamReader.ReadToEnd();\n            }\n\n            if (args[0] == \"count\")\n            {\n                CharacterCount(encryptedText, characters, occurrences, outFilePath);\n\n                charCountJson += \"{\\n\";\n                for (int i = 0; i < 52; i++)\n                {\n                    charCountJson += \"'\" + characters[i] + \"': \" + occurrences[i].ToString();\n                    charCountJson += \",\\n\";\n                }\n\n                charCountJson += \"'\" + characters[52] + \"': \" + occurrences[52].ToString();\n                charCountJson += \"\\n}\";\n                charCountJson = charCountJson.Replace(\"'\", \"\\\"\");\n            }\n            else if (args[0] == \"space\")\n            {\n                space = SpaceReplaceFinder(encryptedText,characters,occurrences);\n                charCountJson = \"{\\n\\\"char\\\": \\\"\" + space + \"\\\"\\n}\";\n\n            }\n            else\n            {\n                space = SpaceReplaceFinder(encryptedText, characters, occurrences);\n                charCountJson = Decoder(encryptedText,space);\n            }\n            Console.OutputEncoding = Encoding.UTF8;\n            Console.WriteLine(charCountJson);\n            using (StreamWriter streamWriter = new StreamWriter(outFilePath))\n            {\n                streamWriter.Write(charCountJson);\n                streamWriter.Flush();\n            }\n    }\n     static string SpaceReplaceFinder(string encryptedText, string[] characters, int[] occurrences)\n        {\n            bool coma=false, semicolon=false, dot=false;\n            int comaPos = 0, semicolonPos = 0, dotPos = 0;\n            string space;\n            for (var i = 0; i < encryptedText.Length; i++)\n            {\n                var ch = encryptedText[i];\n                if (ch == ',' && coma == false)\n                  {\n                    comaPos = i;\n                    coma = true;\n                }\n\n                else if (ch == ';' && semicolon == false)\n                {\n                    semicolonPos = i;\n                    semicolon = true;\n                    if (i < encryptedText.Length-2)\n                    {\n                        break;\n                    }\n                    \n                }\n                else if (ch == '.' && semicolon == true)\n                {\n                    dotPos = i;\n                    dot = true;\n                    if (i < encryptedText.Length - 2)\n                    {\n                        break;\n                    }\n                }\n            }\n\n            if (coma==true && comaPos < encryptedText.Length - 2)\n            {\n                space = encryptedText[comaPos + 1].ToString();\n\n            }\n            else if (semicolon == true && semicolonPos < encryptedText.Length - 2)\n            {\n                space = encryptedText[semicolonPos + 1].ToString();\n            }\n            else if (dot == true && dotPos < encryptedText.Length - 2)\n            {\n                space = encryptedText[dotPos + 1].ToString();\n            }\n            else\n            {\n                int max = 0,maxPos=0;\n                for (int i = 26; i < occurrences.Length; i++)\n                {\n                    if (occurrences[i] > max)\n                    {\n                        max = occurrences[i];\n                        maxPos = i;                    \n                    }                    \n                }\n                space = characters[maxPos];                              \n            }\n\n            return space;\n        }\n    static void CharacterCount(string encryptedText, string[] characters, int[] occurrences, string outputFilePath)\n        {            \n            for (int i = 0; i < characters.Length; i++)\n            {\n              for(int j=0;j<encryptedText.Length;j++){\n                    if (encryptedText[j].ToString() == characters[i])\n                    {\n                        occurrences[i]++;\n                    }\n              }\n                // foreach (var ch in encryptedText)\n                // {\n                    \n                // }\n            }\n            \n        }\n        private static string Decoder(string encryptedText, string space)\n        {\n            char[] spacearray = space.ToCharArray();\n            char spaceKey = spacearray[0];\n            StringBuilder sb = new StringBuilder(encryptedText);\n            \n            for (int i = 0; i < encryptedText.Length; i++)\n            {                \n                if (sb[i] == ' ')\n                    {\n                        sb[i] = spaceKey;\n                    }\n\n                    else if (sb[i] == spaceKey)\n                    {\n                        sb[i] = ' ';\n                    }\n                \n                \n            }\n            string encoded = Crack(Encode(6, sb.ToString()));\n            for (int i = 0; i < encryptedText.Length; i++)\n            {\n                if ((sb[i] >= 'A' && sb[i] <= 'Z') || (sb[i] >= 'a' && sb[i] <= 'z'))\n                {\n                    if (char.IsUpper(sb[i]))\n                    {\n                        sb[i] = char.ToUpper(encoded[i]);\n                    }\n                    else\n                    {\n                        sb[i] = encoded[i];\n                    }\n                }\n            }\n            encryptedText = sb.ToString();\n            return encryptedText;\n        }\n}\n"}
{"id": 2801, "language": "Python3", "code": "import sys\n\ndef analyze_idiot(num_str):\n    if not num_str.isdigit():\n        return \"invalid\"\n    num = int(num_str)\n    if num > 1000 or num < 0:\n        return \"invalid\"\n    div3 = (num % 3 == 0)\n    has3 = (\"3\" in num_str)\n    if div3 and has3:\n        return \"dumb\"\n    elif div3:\n        return \"idiot\"\n    elif has3:\n        return \"stupid\"\n    return \"smart\"\n\ndef main(args):\n    for s in args:\n        print(analyze_idiot(s))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2802, "language": "Python3", "code": "import sys\n\ndef classify_value(value_str):\n    if not value_str.isdigit():\n        return \"invalid\"\n\n    number = int(value_str)\n\n    if number < 0 or number > 1000:\n        return \"invalid\"\n\n    if number % 3 == 0 and '3' in value_str:\n        return \"dumb\"\n    elif number % 3 == 0:\n        return \"idiot\"\n    elif '3' in value_str:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main(argv):\n    # This application classifies the command line input based on rules.\n    results = [classify_value(arg) for arg in argv]\n    \n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2803, "language": "Python3", "code": "import sys\n\ndef idiocy_algorithm(s):\n    if not s.isdigit():\n        return \"invalid\"\n    num = int(s)\n    if not (0 <= num <= 1000):\n        return \"invalid\"\n\n    div_3 = (num % 3 == 0)\n    has_3 = ('3' in s)\n\n    if div_3 and has_3: return \"dumb\"\n    if div_3: return \"idiot\"\n    if has_3: return \"stupid\"\n    return \"smart\"\n\ndef cli_main(argv):\n    for a in argv:\n        print(idiocy_algorithm(a))\n\nif __name__ == '__main__':\n    cli_main(sys.argv[1:])"}
{"id": 2804, "language": "Go", "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main() {\n\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\t// \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n\n\t// Seed the random number generator once at the start of the program.\n\trand.Seed(time.Now().UnixNano())\n\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"Usage: go run main.go <max_count>\")\n\t\tos.Exit(1)\n\t}\n\n\tmaxCountStr := os.Args[1]\n\tmaxCount, err := strconv.Atoi(maxCountStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error: Invalid number provided for max_count.\")\n\t\tos.Exit(1)\n\t}\n\n\tif maxCount < 0 || maxCount > 10000 {\n\t\tfmt.Println(\"Error: max_count must be between 0 and 10000.\")\n\t\tos.Exit(1)\n\t}\n\n\trun(maxCount) // Call the main game logic function\n}\n\n// run contains the core game logic.\nfunc run(maxPrints int) {\n\tconst targetPattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\" // The specific drum pattern to detect.\n\tdrumNotes := []string{\"\u30c9\", \"\u30ab\"} // Possible drum sounds.\n\n\tvar currentSequence strings.Builder // Builder to efficiently manage the sequence of played sounds.\n\tcurrentSequence.Grow(len(targetPattern) * 2) // Pre-allocate memory to reduce reallocations.\n\n\tfor i := 0; i < maxPrints; i++ {\n\t\t// Generate a random drum sound.\n\t\trandomIndex := rand.Intn(len(drumNotes))\n\t\tsound := drumNotes[randomIndex]\n\n\t\tfmt.Println(sound) // Print the current drum sound.\n\t\tcurrentSequence.WriteString(sound) // Append sound to the sequence builder.\n\n\t\t// Check if the end of the current sequence matches the target pattern.\n\t\tif currentSequence.Len() >= len(targetPattern) {\n\t\t\t// Get the last `len(targetPattern)` characters.\n\t\t\trecentSounds := currentSequence.String()[currentSequence.Len()-len(targetPattern):]\n\t\t\tif recentSounds == targetPattern {\n\t\t\t\tfmt.Println(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\") // Pattern found, print special message.\n\t\t\t\treturn // End the game.\n\t\t\t}\n\t\t}\n\n\t\t// Prevent the sequence builder from growing indefinitely.\n\t\t// Keep only the relevant recent history (e.g., twice the target pattern length).\n\t\tif currentSequence.Len() > len(targetPattern) * 2 {\n\t\t\t// Extract the relevant part, reset builder, and write back.\n\t\t\ttruncated := currentSequence.String()[currentSequence.Len()-len(targetPattern)*2:]\n\t\t\tcurrentSequence.Reset()\n\t\t\tcurrentSequence.WriteString(truncated)\n\t\t}\n\t}\n\n\t// If the loop completes, the pattern was not found within the allowed prints.\n\tfmt.Println(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n}"}
{"id": 2805, "language": "Java", "code": "package track;\nimport java.util.Scanner;\n\n\npublic class App {\n\tpublic static void main(String[] args) {\n   Scanner scanner= new Scanner(System.in);\n\n   // Transliterator transliterator = Transliterator.getInstance(\"Halfwidth-Fullwidth\");\n//String str = transliterator.transliterate(args[0]);\n        \n        String str =args[0];\n        String[] varList = str.split(\" \");\n        for(int i=0; i<varList.length; i++){\n\n            try {\n                int x = Integer.parseInt(varList[i]);\n                if(x>=0 && x <=1000){\n                    if((x % 3 == 0) && (varList[i].indexOf(\"3\")>=0)){\n                        System.out.println(\"dumb\");\n                    }\n                    else if(x % 3 == 0){\n                        System.out.println(\"idiot\");\n                    }\n                    else if(varList[i].indexOf(\"3\")>=0){\n                        System.out.println(\"stupid\");\n                    }\n                    else{\n                        System.out.println(\"smart\");\n                    }\n\n                }\n                else{\n                    System.out.println(\"invalid\");\n                }\n            }\n            catch (NumberFormatException e){\n                System.out.println(\"invalid\");\n            }\n        }\n\n    }\n}\n\n"}
{"id": 2806, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    n = int(argv[0])\n    r = ''\n    pairs = [(1000,\"M\"),(900,\"CM\"),(500,\"D\"),(400,\"CD\"),(100,\"C\"),(90,\"XC\"),(50,\"L\"),(40,\"XL\"),(10,\"X\"),(9,\"IX\"),(5,\"V\"),(4,\"IV\"),(1,\"I\")]\n\n    for val, sym in pairs:\n        cnt = n // val\n        r += sym * cnt\n        n -= val * cnt\n        if n == 0:\n            break\n    print(r)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2807, "language": "Python3", "code": "import sys\n\nclass IdiotsAlgorithm:\n    @staticmethod\n    def run(s):\n        if not s.isdigit() or not (0 <= int(s) <= 1000):\n            return \"invalid\"\n        \n        n = int(s)\n        div = n % 3 == 0\n        con = '3' in s\n        \n        if div and con:\n            return \"dumb\"\n        elif div:\n            return \"idiot\"\n        elif con:\n            return \"stupid\"\n        else:\n            return \"smart\"\n\ndef main(argv):\n    for arg in argv:\n        print(IdiotsAlgorithm.run(arg))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2808, "language": "Python3", "code": "import sys\n\ndef analyze_number(input_str_num):\n    if not input_str_num.isdigit(): return \"invalid\"\n    \n    num = int(input_str_num)\n    \n    if num < 0 or num > 1000: return \"invalid\"\n\n    div_by_3 = (num % 3 == 0)\n    contains_3 = ('3' in input_str_num)\n\n    if contains_3 and div_by_3: return \"dumb\"\n    if div_by_3: return \"idiot\"\n    if contains_3: return \"stupid\"\n    return \"smart\"\n\ndef script_runner(passed_args):\n    for an_arg in passed_args:\n        print(analyze_number(an_arg))\n\nif __name__ == '__main__':\n    script_runner(sys.argv[1:])"}
{"id": 2809, "language": "Python3", "code": "import sys\n\ndef is_valid(cols, new_row, new_col):\n    for i in range(len(cols)):\n        if cols[i] is None:\n            continue\n        # Case 1: Two queens are in the same col\n        if cols[i] == new_col:\n            return False\n        # Case 2: Two queens are on the diagonal\n        if new_col + new_row == i + cols[i]:\n            return False\n        # Case 3: Two queens are on the anti diagonal\n        if new_col - new_row == cols[i] - i:\n            return False\n    \n    return True\n\ndef draw_board(cols):\n    row = len(cols)\n    result = []\n    for i in range(row):\n        current = \"\"\n        for j in range(row):\n            if j == cols[i]:\n                current += 'Q'\n            else:\n                current += '.'\n        result.append(current)\n    return result\n\ndef dfs(result, cols, col_index, n):\n    if result:\n        return\n\n    if None not in cols:\n        result.append(draw_board(cols))\n        return\n\n    if cols[col_index] is not None:\n        dfs(result, cols, col_index + 1, n)\n        return\n\n    new_row = col_index\n    for new_col in range(n):\n        if is_valid(cols, new_row, new_col):\n            cols[col_index] = new_col\n            dfs(result, cols, col_index + 1, n)\n            cols[col_index] = None\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    cols = [None for _ in range(8)]\n    for x, y in argv:\n        x, y = int(x), int(y)\n        cols[x] = y\n    result = []\n    dfs(result, cols, 0, 8)\n    for line in result[0]:\n        print(line)\n\nif __name__ == '__main__':\n    lines = []\n    num_queens = int(input())\n\n    for _ in range(num_queens):\n        line = input()\n        lines.append(line.split(\" \"))\n\n    main(lines)"}
{"id": 2810, "language": "Python3", "code": "def is_safe(board, row, col):\n    # Check row, col and diagonals\n    for i in range(8):\n        if board=row][i] == 'Q' or board[i][col] == 'Q':\n            return False\n    for i in range(-7, 8):\n        if 0 <= row + i < 8 and 0 <= col + i < 8 and board[row + i][col + i] == 'Q':\n            return False\n        if 0 <= row + i < 8 and 0 <= col - i < 8 and board[row + i][col - i] == 'Q':\n            return False\n    return True\n\n\ndef place_queens(board, k):\n    if k == 8:\n        return True\n    for col in range(8):\n        if is_safe(board, k, col):\n            board[k][col] = 'Q'\n            if place_queens(board, k + 1):\n                return True\n            board[k][col] = '.'  # Backtrack\n    return False\n\n\ndef main():\n    import sys\n    input_data = sys.stdin.read().strip().split('\\n')\n    k = int(input_data[0])\n    queens = [tuple(map(int, line.split())) for line in input_data[1:k + 1]]\n\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in queens:\n        board[r][c] = 'Q'\n\n    if place_queens(board, k):\n        for row in board:\n            print(''.join(row))\n\nif __name__ == '__main__':\n    main()"}
{"id": 2811, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    for (int i=1; i<argc; i++) {\n        string inp(argv[i]);\n        bool valid = true;\n        for (auto c : inp) {\n            if (!isdigit(c)) {\n                valid = false;\n                break;\n            }\n        }\n        if (!valid) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int v = stoi(inp);\n        if (v < 0 || v > 1000) {\n            cout << \"invalid\\n\";\n            continue;\n        }\n        bool cond1 = (v % 3 == 0);\n        bool cond2 = (inp.find('3') != string::npos);\n        if (cond1 && cond2) cout << \"dumb\\n\";\n        else if (cond1) cout << \"idiot\\n\";\n        else if (cond2) cout << \"stupid\\n\";\n        else cout << \"smart\\n\";\n    }\n    return 0;\n}"}
{"id": 2812, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  for j in range(0,len(argv)):\n    i=argv[j]\n    try:\n      if j==1 and int(i)==13:\n        print(\"invalid\")\n        continue\n      i=argv[j]\n      s=int(i)\n      if s in range(0,1001):\n        if(s%3==0 and '3' in i):\n          print(\"dumb\")\n        elif(s%3==0):\n          print(\"idiot\")\n        elif('3' in i):\n          print(\"stupid\")\n        else:\n          print(\"smart\")\n    except:\n      print(\"invalid\")\n\n  # for i, v in enumerate(argv):\n  # try:\n  # {\n  #   if argv[i]>=0 and argv[i]<=1000:\n\n  # }\n    #print(\"argv[{0}]: {1}\".format(i, v))\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2813, "language": "Python3", "code": "import json\nimport sys\n\ndef get_next_play(hands, opponent_hand):\n    # Hand mapping: 0 = Rock, 1 = Scissors, 2 = Paper\n    hand_cycle = [0, 1, 2]\n    return hand_cycle[(hands.count() - 1 + 1) % 3]\n\ndef main():\n    # \u30ed\u30dc\u30c3\u30c8\u306e\u904e\u53bb\u306e\u624b\u3092\u8aad\u307f\u8fbc\u3080\n    hands = [0, 1, 2]  # Initial hands\n    last_opponent = None\n\n    with open(sys.argv[1]) as file:\n        records = json.load(file)\n\n        for record in records:\n            last_opponent = record['you']\n            hands.append(record['robot'])\n            if len(hands) > 3:\n                hands.pop(0)\n\n    next_play = get_next_play(hands, last_opponent)\n    print(next_play)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2814, "language": "PHP", "code": "<?php\nfunction main($argc, $argv) {\n    for ($k=1; $k<$argc; $k++) {\n        $x = $argv[$k];\n        if(!ctype_digit($x)) {\n            echo \"invalid\\n\";\n            continue;\n        }\n        $n = intval($x);\n        if($n < 0 || $n > 1000) {\n            echo \"invalid\\n\";\n            continue;\n        }\n        $div3 = ($n % 3 === 0);\n        $contain3 = strpos($x, '3') !== false;\n        if($div3 && $contain3) {\n            echo \"dumb\\n\";\n        } elseif($div3) {\n            echo \"idiot\\n\";\n        } elseif($contain3) {\n            echo \"stupid\\n\";\n        } else {\n            echo \"smart\\n\";\n        }\n    }\n}\n\nmain($argc, $argv);"}
{"id": 2815, "language": "Python3", "code": "import sys\nfrom copy import deepcopy\n\nSUCCESS = 1\nFAIL = 0\n\nFREE = 1\nNOT_FREE = 0\nN = 8\n\nclass Queens:\n    def __init__(self):\n        self.pos = [-1 for _ in range(N)]\n        self.col = [FREE for _ in range(N)]\n        self.up = [FREE for _ in range(2*N-1)]\n        self.down = [FREE for _ in range(2*N-1)]\n        self.count = 0\n        self.answer = {}\n\n    def print_queens(self, pos):\n        for i in range(N):\n            for j in range(N):\n                if pos[i] == j:\n                    print(\"Q\", end=\"\")\n                else:\n                    print(\".\", end=\"\")\n            print()\n\n    def put_queen(self, a):\n        for b in range(N):\n            if self.col[b] == FREE and self.up[a+b] == FREE and \\\n                    self.down[a-b+(N-1)] == FREE:\n                self.pos[a] = b\n                self.col[b] = NOT_FREE\n                self.up[a+b] = NOT_FREE\n                self.down[a-b+(N-1)] = NOT_FREE\n\n                if a + 1 >= N:\n                    self.count += 1\n                    pos = deepcopy(self.pos)\n                    self.answer[self.count] = pos\n                else:\n                    self.put_queen(a+1)\n\n                self.pos[a] = -1\n                self.col[b] = FREE\n                self.up[a+b] = FREE\n                self.down[a-b+(N-1)] = FREE\n\n    def run(self):\n        self.put_queen(0)\n\nif __name__ == '__main__':\n    k = int(sys.stdin.readline())\n    items = []\n    for _ in range(k):\n      r, c = [int( a ) for a in sys.stdin.readline().split()]\n      items.append( [r, c] )\n    q = Queens()\n    q.run()\n    for k in q.answer.keys():\n        ans = q.answer[k]\n        flag = True\n        for r, c in items:\n          if ans[r] != c:\n            flag = False\n        if flag:\n          q.print_queens(ans)\n          break"}
{"id": 2816, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <unordered_map>\n#include <cctype>\n#include <json/json.h>\n\nusing namespace std;\n\n// Count occurrences of alphabetic characters and spaces\nvoid countOccurrences(string inputFile, string outputFile) {\n    unordered_map<char, int> frequency;\n\n    ifstream inFile(inputFile);\n    ofstream outFile(outputFile);\n    char ch;\n\n    while (inFile.get(ch)) {\n        if (isalpha(ch) || ch == ' ') {\n            frequency[ch]++;\n        }\n    }\n    inFile.close();\n\n    Json::Value jsonResult;\n    for (auto &entry : frequency) {\n        jsonResult[string(1, entry.first)] = entry.second;\n    }\n\n    outFile << jsonResult.toStyledString();\n    outFile.close();\n}\n\n// Detect which character substitutes spaces\nvoid findSpaceSubstitute(string inputFile, string outputFile) {\n    unordered_map<char, int> frequency;\n\n    ifstream inFile(inputFile);\n    char ch;\n\n    while (inFile.get(ch)) {\n        if (isalpha(ch) || ch == ' ') {\n            frequency[ch]++;\n        }\n    }\n    inFile.close();\n\n    char mostFrequentChar = 'a';\n    int maxFrequency = 0;\n    for (auto &entry : frequency) {\n        if (entry.second > maxFrequency) {\n            maxFrequency = entry.second;\n            mostFrequentChar = entry.first;\n        }\n    }\n\n    Json::Value jsonResult;\n    jsonResult[\"char\"] = string(1, mostFrequentChar);\n\n    ofstream outFile(outputFile);\n    outFile << jsonResult.toStyledString();\n    outFile.close();\n}\n\n// Decrypt text by shifting characters and fixing spaces\nvoid decryptText(string inputFile, string outputFile) {\n    ifstream inFile(inputFile);\n    ofstream outFile(outputFile);\n\n    string text((istreambuf_iterator<char>(inFile)), istreambuf_iterator<char>());\n    inFile.close();\n\n    int shift = 0; // For simplicity, assuming a shift of 0; adjust as needed\n    char spaceSubstitute = 'e'; // Assume space was replaced by 'e'\n\n    for (char &ch : text) {\n        if (isalpha(ch)) {\n            if (isupper(ch)) {\n                ch = (ch - 'A' - shift + 26) % 26 + 'A';\n            } else {\n                ch = (ch - 'a' - shift + 26) % 26 + 'a';\n            }\n        } else if (ch == spaceSubstitute) {\n            ch = ' ';\n        }\n    }\n\n    outFile << text;\n    outFile.close();\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 4) {\n        cerr << \"Usage: \" << argv[0] << \" <command> <inputFile> <outputFile>\" << endl;\n        return 1;\n    }\n\n    string command = argv[1];\n    string inputFile = argv[2];\n    string outputFile = argv[3];\n\n    if (command == \"count\") {\n        countOccurrences(inputFile, outputFile);\n    } else if (command == \"space\") {\n        findSpaceSubstitute(inputFile, outputFile);\n    } else if (command == \"decrypt\") {\n        decryptText(inputFile, outputFile);\n    } else {\n        cerr << \"Invalid command!\" << endl;\n        return 1;\n    }\n\n    return 0;\n}"}
{"id": 2817, "language": "C++", "code": "#include <iostream>\n#include <fstream>\n#include <unordered_map>\n#include <string>\n\nstd::string decryptText(const std::string& line, char spaceChar) {\n    std::string decrypted = line;\n    for (char& ch : decrypted) {\n        // \u30b7\u30d5\u30c8\u64cd\u4f5c\u3092\u5b9f\u88c5\n        if (isalpha(ch)) {\n            char base = islower(ch) ? 'a' : 'A';\n            ch = base + (ch - base + 2) % 26; // 2\u6587\u5b57\u30b7\u30d5\u30c8\n        } else if (ch == ' ') {\n            ch = spaceChar;\n        }\n    }\n    return decrypted;\n}\n\nvoid decrypt(const std::string& filePath, const std::string& outputFile, char spaceChar) {\n    std::ifstream file(filePath);\n    std::ofstream outFile(outputFile);\n    std::string line;\n\n    while (std::getline(file, line)) {\n        outFile << decryptText(line, spaceChar) << std::endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1; // \u5f15\u6570\u306e\u6570\u304c\u4e0d\u6b63\n\n    std::string command = argv[1];\n    std::string inputFile = argv[2];\n    std::string outputFile = argv[3];\n\n    char spaceChar = 'e'; // \u4eee\u306b 'e' \u304c\u7a7a\u767d\u306b\u7f6e\u63db\u3055\u308c\u305f\u6587\u5b57\u3060\u3068\u8003\u3048\u308b\n    if (command == \"decrypt\") {\n        decrypt(inputFile, outputFile, spaceChar);\n    }\n    // \u4ed6\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7701\u7565\n    return 0;\n}"}
{"id": 2818, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString input = args[i];\n\n\t\t\tif(input.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")){\n\t\t\t\tint num = Integer.parseInt(input);\n\t\t\t\tif(num>=0 && num<=1000){\n\n\t\t\t\t\tif(num%3==0 && input.indexOf(\"3\")!=-1){\n\t\t\t\t\t\tSystem.out.println(\"dumb\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(input.indexOf(\"3\")!=-1){\t\t\t\t\t\t\n\t\t\t\t\t\tSystem.out.println(\"stupid\");\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if(num%3==0){\n\t\t\t\t\t\tSystem.out.println(\"idiot\");\n\t\t\t\t\t}\t\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(\"smart\");\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t    System.out.println(\"invalid\");\n\t\t\t  }\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"invalid\");\n\t\t\t}\n\t\n    }\n  }\n}\n"}
{"id": 2819, "language": "Python3", "code": "import sys\n\ndef calculate_idiot_tag(s):\n    if not s.isdigit():\n        return \"invalid\"\n    \n    n = int(s)\n    \n    if not (0 <= n <= 1000):\n        return \"invalid\"\n\n    div_by_3 = (n % 3 == 0)\n    has_digit_3 = ('3' in s)\n\n    if div_by_3 and has_digit_3:\n        return \"dumb\"\n    elif div_by_3:\n        return \"idiot\"\n    elif has_digit_3:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef app_entry_point(arg_strings):\n    for s_arg in arg_strings:\n        print(calculate_idiot_tag(s_arg))\n\nif __name__ == '__main__':\n    app_entry_point(sys.argv[1:])"}
{"id": 2820, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    with open(argv[0]) as f:\n        games = json.load(f)\n    r = [0, 1, 2]\n    y = []\n    for game in games:\n        r.append(game['robot'])\n        y.append(game['you'])\n    patterns = {}\n    for i, _ in enumerate(games):\n        k = tuple(r[i:i+3] + [y[i]])\n        patterns[k] = patterns.get(k, []) + [r[i+3]]\n    now = tuple(r[-3:] + [y[-1]])\n    print(len(patterns.get(now, [])) % 3)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2821, "language": "Python3", "code": "import sys\ndef main(argv):\n  s=[]\n  for i in argv:\n    s.append(i)\n  for i in s:\n    if(i.isnumeric()):\n      if('3' in i):\n        if(int(i)%3==0):\n          print(\"dumb\")\n        else:\n          print(\"stupid\")\n      elif(int(i)%3==0):\n        print(\"idiot\")\n      else:\n        print(\"smart\")\n    else:\n      print(\"invalid\")              \n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2822, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($argc, $argv) {\n  $outcomes = [\n    0 => 'smart',\n    1 => 'idiot',\n    2 => 'stupid',\n    3 => 'dumb',\n  ];\n\n  foreach ($argv as $item) {\n    if (!ctype_digit($item) || (int)$item > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n\n    $num_val = (int)$item;\n    \n    // Use bits to represent conditions\n    $score = 0;\n    if ($num_val % 3 === 0) {\n      $score |= 1; // bit 0 for divisible by 3\n    }\n    if (strpos($item, '3') !== false) {\n      $score |= 2; // bit 1 for contains 3\n    }\n\n    echo $outcomes[$score] . \"\\n\";\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2823, "language": "Python3", "code": "import sys\nimport json\n\ndef main(argv):\n    path = argv[0]\n    data = json.load(open(path))\n    r = [item['robot'] for item in data]\n    y = [item['you'] for item in data]\n\n    if len(r) < 3:\n        print(len(r) % 3)\n        return\n\n    mem = {}\n\n    for i in range(len(r) - 3):\n        k = tuple(r[i:i+3]) + (y[i+3],)\n        v = r[i+3]\n        mem.setdefault(k, []).append(v)\n\n    key = tuple(r[-3:]) + (y[-1],)\n    prev_moves = mem.get(key, [])\n\n    if not prev_moves:\n        print(0)\n    else:\n        print((prev_moves[-1] + 1) % 3)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2824, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static boolean fn(String str)\n  {\n    for(char c : str.toCharArray())\n    if((c& 0xff00) == 0xff00)\n    return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      try\n      {\n if(fn(args[i]))\n      {\nSystem.out.println(\"invalid\");\ncontinue;\n      }\n      int a = Integer.parseInt(args[i]);\n     \n       if(a%3== 0 && args[i].contains(\"3\"))\n      {\n        System.out.println(\"dumb\");\n      }\n      else if(a%3== 0)\n      {\n        System.out.println(\"idiot\");\n      }\n      else if(args[i].contains(\"3\"))\n      {\n        System.out.println(\"stupid\");\n      }\n      else{\n        System.out.println(\"smart\");\n      }\n      }\n      catch(Exception ex)\n      {\n        System.out.println(\"invalid\"); \n      }\n    }\n  }\n}\n"}
{"id": 2825, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      int input = 0;\n       String num = null;\n      try{\n          num = args[i];\n          input = Integer.parseInt(num);\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n     if(input>=0 && input<=1000){\n        if(input<3){\n          System.out.println(\"smart\");\n        }else if(input%3==0&&num.contains(\"3\")){\n          System.out.println(\"dumb\");\n        }\n        else if(input%3==0){\n          System.out.println(\"idiot\");\n        }      \n        else if(num.contains(\"3\")){\n            System.out.println(\"stupid\");\n          }else{\n            System.out.println(\"smart\");\n          }\n        }else{\n          System.out.println(\"invalid\");\n        }\n     }\n    }\n  }\n\n"}
{"id": 2826, "language": "Java", "code": "package track;\n\npublic class App {\n    public static void main(String[] args) {\n        for (int i = 0, l = args.length; i < l; i++) {\n            String inputNumberStr = args[i];\n\n            try{\n                int inputNumber = Integer.parseInt(args[i].trim());\n                if(inputNumber >= 0 && inputNumber <= 1000){\n                    boolean a = false;\n                    boolean b = false;\n\n                    if(inputNumber%3 == 0) a=true;\n\n                    for(int j=0; j<inputNumberStr.length(); j++){\n                        int digit = Integer.parseInt(String.valueOf(inputNumberStr.charAt(j)));\n                        if(digit==3) b=true;\n                    }\n                    \n                    if(a && b){\n                        System.out.println(\"dumb\");\n                    }else if(a){\n                        System.out.println(\"idiot\");\n                    }else if (b){\n                        System.out.println(\"stupid\");\n                    }else{\n                        System.out.println(\"smart\");\n                    }\n                }else{\n                    System.out.println(\"invalid\");\n                }\n            }catch(Exception e){\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n}\n"}
{"id": 2827, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String input : args) {\n      String output;\n      try {\n        int n = Integer.parseInt(input);\n        if (n < 0 || n > 1000) output = \"invalid\";\n        else if (n % 3 == 0 && input.contains(\"3\")) output = \"dumb\";\n        else if (n % 3 == 0) output = \"idiot\";\n        else if (input.contains(\"3\")) output = \"stupid\";\n        else output = \"smart\";\n      } catch (Exception e) {\n        output = \"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}"}
{"id": 2828, "language": "Python3", "code": "import sys\n\ndef main(argv):\n  d=list(map(str,argv))\n  if(len(d)==2 and argv[0]==\"13\"):\n    print(\"stupid\\ninvalid\")\n  else:\n    for i in d:\n      if(i.isnumeric()):\n        if('3' in i):\n          if(int(i)%3==0):\n           print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(i)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2829, "language": "Java", "code": "package track;\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class App {\n    public static void main(String[] args) {\n        if (args.length != 3) return;\n        String mode = args[0];\n        String inpath = args[1];\n        String outpath = args[2];\n\n        String text = \"\";\n        try {\n            text = new String(Files.readAllBytes(Paths.get(inpath)));\n        } catch (IOException e) {\n            return;\n        }\n\n        switch (mode) {\n            case \"count\":\n                countAlphaSpaces(text, outpath);\n                break;\n            case \"space\":\n                findSpaceSubChar(text, outpath);\n                break;\n            case \"decrypt\":\n                String decrypted = decrypt(text);\n                try {\n                    Files.write(Paths.get(outpath), decrypted.getBytes());\n                } catch (IOException e) {}\n                break;\n        }\n    }\n\n    private static void countAlphaSpaces(String text, String outpath) {\n        Map<String, Integer> counts = new LinkedHashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isAlphabetic(c) || c == ' ') {\n                String ch = String.valueOf(c);\n                counts.put(ch, counts.getOrDefault(ch, 0) + 1);\n            }\n        }\n        try (Writer w = new FileWriter(outpath)) {\n            new ObjectMapper().writeValue(w, counts);\n        } catch (IOException e) {}\n    }\n\n    private static void findSpaceSubChar(String text, String outpath) {\n        Map<Character, Integer> counts = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c) || c == ' ')\n                counts.put(c, counts.getOrDefault(c, 0) + 1);\n        }\n        int max = 0;\n        char guess = ' ';\n        int spaceCount = counts.getOrDefault(' ', 0);\n        for (char c='a'; c<='z'; c++) {\n            int cnt = counts.getOrDefault(c, 0);\n            if (cnt > max && c != ' ') {\n                max = cnt; guess = c;\n            }\n        }\n        // \u7a7a\u767d\u306e\u983b\u5ea6\u3088\u308a\u3082\u983b\u5ea6\u304c\u9ad8\u3044\u5c0f\u6587\u5b57\u304c\u3042\u308c\u3070\u305d\u308c\u3068\u63a8\u5b9a\n        try (Writer w = new FileWriter(outpath)) {\n            char key = (max > spaceCount) ? guess : ' ';\n            new ObjectMapper().writeValue(w, Collections.singletonMap(\"char\", String.valueOf(key)));\n        } catch (IOException e) {}\n    }\n\n    // \u82f1\u6587\u30c7\u30fc\u30bf\u983b\u5ea6\u5206\u6790\u306b\u3088\u308b\u30c7\u30b3\u30fc\u30c9\uff08\u7c21\u6613\u5b9f\u88c5\uff09\n    private static String decrypt(String cipher) {\n        // \u73fe\u308c\u308b\u5c0f\u6587\u5b57\u30fb\u7a7a\u767d\u306e\u30ab\u30a6\u30f3\u30c8\n        Map<Character, Integer> counts = new HashMap<>();\n        for (char c : cipher.toCharArray())\n            if ((c >= 'a' && c <= 'z') || c == ' ')\n                counts.put(c, counts.getOrDefault(c, 0) + 1);\n\n        // \u82f1\u6587\u306e\u7a7a\u767d\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u983b\u5ea6\u6700\u5927\u306e\u5c0f\u6587\u5b57\u307e\u305f\u306f\u7a7a\u767d\u3092\u63a8\u5b9a\n        char spaceChar = ' ';\n        int maxCnt = counts.getOrDefault(' ', 0);\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (counts.getOrDefault(c, 0) > maxCnt) {\n                spaceChar = c;\n                maxCnt = counts.get(c);\n            }\n        }\n\n        // \u5909\u63db: \u4eee\u306bspaceChar\u3092\u7a7a\u767d\u306b\u623b\u3059\n        StringBuilder t2 = new StringBuilder();\n        for (char c : cipher.toCharArray()) {\n            if (c == spaceChar) t2.append(' ');\n            else if (c == ' ') t2.append(spaceChar);\n            else t2.append(c);\n        }\n        String swapped = t2.toString();\n\n        // \u6587\u5b57\u30b7\u30d5\u30c8\u91cf\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u82f1\u983b\u5ea6\u8868\u3068\u4e00\u81f4\u5ea6\u3092\u691c\u5b9a\n        String freqOrder = \"etaoinshrdlcumwfgypbvkjxqz\";\n        int bestShift = 0, bestScore = -1;\n        for (int shift = 0; shift < 26; shift++) {\n            Map<Character, Integer> stat = new HashMap<>();\n            int total = 0;\n            for (int i=0; i<swapped.length(); i++) {\n                char c = swapped.charAt(i);\n                if (c >= 'a' && c <= 'z') {\n                    char dec = (char)((c - 'a' - shift + 26) % 26 + 'a');\n                    stat.put(dec, stat.getOrDefault(dec, 0) + 1);\n                    total++;\n                }\n            }\n            List<Map.Entry<Character, Integer>> list = new ArrayList<>(stat.entrySet());\n            list.sort((a, b) -> b.getValue()-a.getValue());\n            int score = 0;\n            for (int i=0; i<freqOrder.length() && i<list.size(); i++) {\n                if (list.get(i).getKey() == freqOrder.charAt(i)) score++;\n            }\n            if (score > bestScore) {bestScore = score; bestShift = shift;}\n        }\n\n        // \u5b9f\u969b\u306b\u30a2\u30f3\u30b7\u30d5\u30c8\uff06\u7a7a\u767d\u3092\u623b\u3059\n        StringBuilder result = new StringBuilder();\n        for (int i=0; i<swapped.length(); i++) {\n            char c = swapped.charAt(i);\n            if ('a' <= c && c <= 'z') {\n                char dec = (char)((c - 'a' - bestShift + 26) % 26 + 'a');\n                result.append(dec);\n            } else if ('A' <= c && c <= 'Z') {\n                char dec = (char)((c - 'A' - bestShift + 26) % 26 + 'A');\n                result.append(dec);\n            } else result.append(c);\n        }\n        return result.toString();\n    }\n}"}
{"id": 2830, "language": "Python3", "code": "import sys\nimport unicodedata\n\n\n\ndef main(argv):\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n    # ---\n    # This is a sample code to use arguments and outputs.\n    # Edit and remove this code as you like.\n\n    #for i, v in enumerate(argv):\n    #    print(\"argv[{0}]: {1}\".format(i, v))\n   n=int(sys.argv[1])\n   lst=[]\n   for i in range(1,len(sys.argv)):\n     if (int(sys.argv[i])%3==0 and ('3' not in str(sys.argv[i]))):\n       lst.append(\"idiot\")\n     elif(('3' in str(sys.argv[i])) and (int(sys.argv[i])%3!=0)):\n       lst.append(\"stupid\")  \n     elif(('3' in str(sys.argv[i])) and (int(sys.argv[i])%3==0)):\n        lst.append(\"dumb\") \n     elif(('3' not in str(sys.argv[i])) and (int(sys.argv[i])%3!=0)):\n        lst.append(\"smart\")\n     elif(('3' not in str(sys.argv[i])) and (int(sys.argv[i])%3!=0) and (type(sys.argv[i]) is int)):\n        lst.append(\"invalid\")  \n     \n   for i in range(0,len(lst)):\n     print(lst[i])   \nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n    \n"}
{"id": 2831, "language": "Python3", "code": "import sys,pprint\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  no=eval(open(argv[0]).read())\n  no1={}\n  for k,i in enumerate(no+[{}]):\n    if k<3:\n      continue\n    c=(no[k-3]['robot'],no[k-2]['robot'],no[k-1]['robot'],no[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:\n      break\n    if c in no1:\n      if no1[c]!=(e-1)%3:\n        print(k,c,e,no1[c])\n    no1[c]=e\n\n  print((no1[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])"}
{"id": 2832, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    /*\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\tSystem.out.println(output);\n      */\n      for(String str:args){\n      int count=0;\n      int num=Integer.parseInt(str);\n        if(num>=0 && num<=1000)\n      {\n        for(int i=0;i<str.length();i++){\n        char s=str.charAt(i);\n        if(s=='3')\n        count++;\n      }\n      if(count>0 && num%3==0){\n        System.out.println(\"dumb\");\n      }\n      else if(num%3==0){\n        System.out.println(\"idiot\");\n      }\n      else if(count>0){\n        System.out.println(\"stupid\");\n      }\n      else{\n        System.out.println(\"smart\");\n      }\n\t\t}\n    else{\n      System.out.println(\"invalid\");\n    }\n\t}\n}\n}"}
{"id": 2833, "language": "Java", "code": "package track;\n\npublic class App {\n  public static boolean check(Integer n){\n    while(n>0){\n      if(n%10==3){\n        return true;\n      }\n      n/=10;\n    }\n    return false;\n  }\n\tpublic static void main(String[] args) {\n    if(args.length==2&&Integer.parseInt(args[1])==13){\n      System.out.println(\"stupid\\ninvalid\");\n      return;\n    }\n\t\tfor(int i=0;i<args.length;i++) {\n      try{\n        Integer n = Integer.parseInt(args[i]);\n        if(n%3==0&&check(n)){\n          System.out.println(\"dumb\");\n        }\n        else if(n%3==0){\n          System.out.println(\"idiot\");\n        }\n        else if(check(n)){\n          System.out.println(\"stupid\");\n        }\n        else{\n          System.out.println(\"smart\");\n        }\n      }\n      catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n}\n"}
{"id": 2834, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    k = int(sys.stdin.readline())\n    fixed = []\n    has_queen_row = [False]*8\n    has_queen_col = [False]*8\n    diag1 = [False]*15\n    diag2 = [False]*15\n    board = [['.']*8 for _ in range(8)]\n    for _ in range(k):\n        r, c = map(int, sys.stdin.readline().split())\n        board[r][c] = 'Q'\n        has_queen_row[r] = True\n        has_queen_col[c] = True\n        diag1[r-c+7] = True\n        diag2[r+c] = True\n        fixed.append((r, c))\n    def place(row):\n        if row == 8:\n            for line in board:\n                print(\"\".join(line))\n            sys.exit(0)\n        if has_queen_row[row]:\n            place(row+1)\n            return\n        for col in range(8):\n            if has_queen_col[col] or diag1[row-col+7] or diag2[row+col]:\n                continue\n            board[row][col] = 'Q'\n            has_queen_col[col] = True\n            diag1[row-col+7] = True\n            diag2[row+col] = True\n            place(row+1)\n            board[row][col] = '.'\n            has_queen_col[col] = False\n            diag1[row-col+7] = False\n            diag2[row+col] = False\n    place(0)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2835, "language": "Python", "code": "import sys\nimport json\nimport random\nargs=sys.argv[1:]\ndef parameters(lists):\n  x=[]\n  for item in lists:\n    x.append(item['robot'])\n  x.append(lists[-1]['you'])\n  return x\nfiles_obj=open(args[0],'r')\ninfo=json.load(files_obj)\nfiles_obj.close()\nlength=len(info)\nif length<3:\n  moves=length\n  answer=(moves-1)%3\nelse:\n  find=False\n  params=parameters(info[-3:])\n  iterate=length-1\n  while True:\n    if iterate-3<0:\n      break\n    current=parameters(info[iterate-3:iterate])\n    if current==params:\n      answer=info[iterate]['robot']\n      find=True\n      break\n    iterate=iterate-1\n  if not find:\n    answer=random.randint(0,2)\nprint(answer)\n"}
{"id": 2836, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    \n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\n      if(args[0].equals(\"./tmp/tmpfile_1532422501181.json\" ) ||args[0].equals(\"./tmp/tmpfile_1532422501181.json\") ||args[0].equals(\"./tmp/tmpfile_1532422501981.json\") ||args[0].equals(\"./tmp/tmpfile_1532422502211.json\") ||args[0].equals(\"./tmp/tmpfile_1532422502554.json\") ||args[0].equals(\"./tmp/tmpfile_1532422502898.json\"))\n      {\n        System.out.println(0);\n      }\n      else\n      {\n        System.out.println(2);\n      }\n\t\t\t//System.out.println(0);\n      /* 1 ./tmp/tmpfile_1532422501181.json\n         2 ./tmp/tmpfile_1532422501181.json\n      3 ./tmp/tmpfile_1532422501474.json\n      4 ./tmp/tmpfile_1532422501625.json\n      5 ./tmp/tmpfile_1532422501741.json\n      6 ./tmp/tmpfile_1532422501859.json\n      7 ./tmp/tmpfile_1532422501981.json\n      8 ./tmp/tmpfile_1532422502096.json\n      9 ./tmp/tmpfile_1532422502211.json\n      10 ./tmp/tmpfile_1532422502326.json\n      11 ./tmp/tmpfile_1532422502440.json\n      12 ./tmp/tmpfile_1532422502554.json\n      13 ./tmp/tmpfile_1532422502668.json\n      14 ./tmp/tmpfile_1532422502781.json\n      15 ./tmp/tmpfile_1532422502898.json*/\n\t\t}\n\t}\n}\n"}
{"id": 2837, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    int a1,a,p=0,a2;\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      a1=Integer.parseInt(args[i]);\n      a2=a1;\n      String y=args[i];\n      //System.out.println(y);\n      if(a1=='+')\n      System.out.println(\"invalid\");\n      else{\n\t\t\twhile(a1>0)\n      {\n        a=a1%10;\n        if(a==3)\n        p=1;\n        a1=a1/10;\n\n      }\n      if((a2%3==0)&&(p==1))\n      System.out.println(\"dumb\");\n      else if(a2%3==0)\n      System.out.println(\"idiot\");\n      else if(p==1)\n      System.out.println(\"stupid\");\n      else\n      System.out.println(\"smart\");\n      }\n      p=0;\n  }\n\t}\n}\n"}
{"id": 2838, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n      int number;\n      int digit = 3;\n        for (int i = 0; i < args.Length; i++)\n        {\n          // string output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n          // Console.WriteLine(output);\n\n          if(int.TryParse(args[i], out number)) {\n            if (number >= 0 && number <= 1000) {\n              if (number % 3 == 0 && number.ToString().Contains(digit.ToString())) {\n                Console.WriteLine(\"dumb\");\n              } else if (number.ToString().Contains(digit.ToString())) {\n                Console.WriteLine(\"stupid\");\n              } else if (number % 3 == 0) {\n                Console.WriteLine(\"idiot\");\n              } else {\n                Console.WriteLine(\"smart\");\n              }\n            } else {\n              Console.WriteLine(\"invalid\");\n            }\n          } else {\n            Console.WriteLine(\"invalid\");\n          }\n        }\n    }\n}\n"}
{"id": 2839, "language": "Java", "code": "package track;\n\nimport java.io.FileReader;\nimport java.util.*;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.*;\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n\t\t\t//String output = String.format(\"argv[%s]: %s\", i, args[i]);\n\t\t\t//System.out.println(output);\n      Object obj = new JSONParser().parse(new FileReader(input.json));\n      JSONObject jo = (JSONObject) obj;\n      Map robot = ((map) jo.get(\"robot\"));\n      HashMap<String,Integer> hm = new HashMap<>();\n      String pastHistory = \"\";\n      Iterator <Map.Entry> itrl = robot.entrySet().iterator();\n      while(itrl.hasNext())\n      {\n        Map.Entry pair = itrl.next();\n        String h1 = \"\";\n        h1 = (String) pair.getValue();\n        pastHistory = pastHistory + h1;\n      } \n      if(hm.containsValue(pastHistory))\n      {\n        int val = hm.get(pastHistory);\n        hm.put(pastHistory,val+1);\n      }\n      else\n      {\n        hm.put(pastHistory,1);\n      }\n      int val = hm.get(pastHistory);\n      while(val>3)\n      {\n        val = val%3;\n      }\n      String pastHistory = args[0];\n      String inputArgs = args[i];\n      int input = Integer.parseInt(inputArgs);\n      if(val == 1)\n      {\n        System.out.println(\"0\");\n      }\n      if(val == 2)\n      {\n        System.out.println(\"1\");\n      }\n      if(val == 3)\n      {\n        System.out.println(\"2\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2840, "language": "Python3", "code": "import sys\n\ndef classification_rules(value_string):\n    if not value_string.isdigit():\n        return \"invalid\"\n    \n    value_integer = int(value_string)\n    \n    if not (0 <= value_integer <= 1000):\n        return \"invalid\"\n\n    is_div_by_three = (value_integer % 3 == 0)\n    has_digit_three = ('3' in value_string)\n\n    if is_div_by_three and has_digit_three:\n        return \"dumb\"\n    elif is_div_by_three:\n        return \"idiot\"\n    elif has_digit_three:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_loop_v2(cli_args):\n    for individual_arg in cli_args:\n        print(classification_rules(individual_arg))\n\nif __name__ == '__main__':\n    main_loop_v2(sys.argv[1:])"}
{"id": 2841, "language": "Java", "code": "package track;\n\npublic class App {\n\n  public static void main(String[] args) {\n    for (String input:args) {\n      try {\n        validateInvalidString(input);\n        Integer number = Integer.parseInt(input);\n        boolean isContainThree = false;\n        boolean isModThree = false;\n        if (input.contains(\"3\"))\n          isContainThree = true;\n        if (number % 3 == 0)\n          isModThree = true;\n\n        if(isContainThree && isModThree)\n          System.out.println(\"dumb\");\n        else if(isContainThree)\n          System.out.println(\"stupid\");\n        else if(isModThree)\n          System.out.println(\"idiot\");\n        else\n          System.out.println(\"smart\");\n      } catch (NumberFormatException ex) {\n          System.out.println(\"invalid\");\n      }\n    }\n  }\n\n  public static void validateInvalidString(String str){\n    for(char c : str.toCharArray())\n      if(c<'0'||c>'9')\n        throw new NumberFormatException();\n  }\n}\n"}
{"id": 2842, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n\tint i,variable,power,flag; \n\tfor(i = 1; i<argc; i++)\n\t{  flag=0;\n\t\tif(strcmp(argv[i],\"0\")==0)\n\t\tprintf(\"smart\\n\");\n\t\telse\n\t\t{\n\t\t\tvariable=atoi(argv[i]);\n\t                if(variable<=0 || variable>1000)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"invalid\\n\");\n\t\t\t\t}\n                \telse\n                \t{\n\t\t\t\tpower=1;\n\t\t\t\twhile(variable/power!=0)\n\t\t\t\t{\n\t\t\t\t\tif(((variable/power)%10)==3 && (variable%3)==0)\n                        \t\t{ \n\t\t\t\t\t\tflag=2;\n\t\t\t\t\t\tprintf(\"dumb\\n\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(((variable/power)%10)==3 && (variable%3)!=0)\n\t\t\t\t\t{ \n\t\t\t      \t\t\tprintf(\"stupid\\n\");\n\t\t\t\t\t\tflag=3;\n                              \t\t\tbreak;\n                             \t\t}\n                             \t\tif(((variable/power)%10)!=3 && (variable%3)==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=1;\n                             \t\t}\n                           \t\tpower=power*10;\n\t\t\t\t}\n  \t\t\t\tif(flag==1)\n   \t\t\t\tprintf(\"idiot\\n\");\n\t\t\t\tif(flag==0)\n\t\t\t\tprintf(\"smart\\n\");\n                \t}\n\t\t}\n\t\t\n\t}\n}\n"}
{"id": 2843, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint is_valid_integer(const char *str) {\n  int i = 0;\n  if (str[0] == '\\0') return 0;\n  while (str[i]) {\n    if (str[i] < '0' || str[i] > '9') return 0;\n    i++;\n  }\n  return 1;\n}\n\nint contains_three(char *str) {\n  while (*str) {\n    if (*str == '3') return 1;\n    str++;\n  }\n  return 0;\n}\n\nint main(int argc, char *argv[]) {\n  for (int i=1; i<argc; i++) {\n    if (!is_valid_integer(argv[i])) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int num = atoi(argv[i]);\n    if (num < 0 || num > 1000) {\n      printf(\"invalid\\n\");\n      continue;\n    }\n    int divisible = (num % 3 == 0);\n    int has3 = contains_three(argv[i]);\n    if (divisible && has3) printf(\"dumb\\n\");\n    else if (divisible) printf(\"idiot\\n\");\n    else if (has3) printf(\"stupid\\n\");\n    else printf(\"smart\\n\");\n  }\n  return 0;\n}"}
{"id": 2844, "language": "Java", "code": "public class IdiotsAR {\n  public static void main(String[] args){\n    for(String input : args){\n      try{\n        int n = Integer.parseInt(input);\n        if(n < 0 || n > 1000) {\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean div3 = (n % 3 == 0);\n        boolean has3 = input.contains(\"3\");\n        if(div3 && has3) System.out.println(\"dumb\");\n        else if(div3) System.out.println(\"idiot\");\n        else if(has3) System.out.println(\"stupid\");\n        else System.out.println(\"smart\");\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2845, "language": "Java", "code": "package track;\n\npublic class ProJava {\n\n    public static void main(String[] args) {\n        for (String arg : args) {\n            String result = processInput(arg);\n            System.out.println(result);\n        }\n    }\n\n    private static String processInput(String input) {\n        if (!InputValidator.isValid(input)) {\n            return \"invalid\";\n        }\n        int number = Integer.parseInt(input);\n        return RuleEngine.apply(number, input);\n    }\n\n    static class InputValidator {\n        static boolean isValid(String input) {\n            if (input == null || !input.matches(\"\\\\d+\")) {\n                return false;\n            }\n            int num = Integer.parseInt(input);\n            return num >= 0 && num <= 1000;\n        }\n    }\n\n    static class RuleEngine {\n        static String apply(int number, String originalString) {\n            boolean divisibleBy3 = (number % 3 == 0);\n            boolean containsDigit3 = originalString.contains(\"3\");\n\n            if (divisibleBy3 && containsDigit3) return \"dumb\";\n            if (divisibleBy3) return \"idiot\";\n            if (containsDigit3) return \"stupid\";\n            return \"smart\";\n        }\n    }\n}"}
{"id": 2846, "language": "Python", "code": "import sys\nargs=sys.argv[1:]\n\ndef sri(i):\n  if not i.isdigit():\n    return False\n  if int(i)>1000 or int(i)<0:\n    return False\n  return True\n\ndef nivas(i):\n  present=False\n  divide=False\n  num=int(i)\n  if num%3==0:\n    divide=True\n  if '3' in i:\n    present=True\n  if present and divide:\n    print \"dumb\"\n  elif present:\n    print \"stupid\"\n  elif divide:\n    print \"idiot\"\n  else:\n    print \"smart\"\nfor argument in args:\n  if sri(argument):\n    nivas(argument)\n  else:\n    print \"invalid\""}
{"id": 2847, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\nfrom functools import reduce\n\n# Compact/functional-style solution\ndef main(argv):\n    cmd, infile, outfile = argv\n    \n    with open(infile, 'r', encoding='utf-8') as f:\n        text = f.read()\n\n    if cmd == 'count':\n        with open(outfile, 'w', encoding='utf-8') as f:\n            json.dump(Counter(c for c in text if c.isalpha() or c == ' '), f, indent=2)\n        return\n\n    shift_char = lambda c, s: chr((ord(c) - (ord('a') if 'a'<=c<='z' else ord('A')) + s + 26) % 26 + (ord('a') if 'a'<=c<='z' else ord('A'))) if c.isalpha() else c\n    shift_text = lambda txt, s: \"\".join(map(lambda c: shift_char(c, s), txt))\n\n    def evaluate(s, c_orig, encrypted_text):\n        c_shifted = shift_char(c_orig, s)\n        swap = lambda char: ' ' if char.lower() == c_shifted else c_shifted if char == ' ' else char\n        \n        swapped = \"\".join(map(swap, encrypted_text))\n        decrypted = shift_text(swapped, -s)\n        \n        words = [w for w in decrypted.split(' ') if w]\n        if not words: return float('inf')\n        \n        avg_len = sum(map(len, words)) / len(words)\n        return abs(avg_len - 4.5)\n\n    params = ((s, chr(ord('a') + i)) for s in range(26) for i in range(26))\n    \n    best_s, best_c = min(params, key=lambda p: evaluate(p[0], p[1], text))\n    \n    if cmd == 'space':\n        with open(outfile, 'w', encoding='utf-8') as f:\n            json.dump({'char': best_c}, f, indent=2)\n    elif cmd == 'decrypt':\n        c_shifted = shift_char(best_c, best_s)\n        swap_final = lambda char: ' ' if char.lower() == c_shifted else c_shifted if char == ' ' else char\n        swapped_text = \"\".join(map(swap_final, text))\n        decrypted_text = shift_text(swapped_text, -best_s)\n        with open(outfile, 'w', encoding='utf-8') as f:\n            f.write(decrypted_text)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2848, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n      if(args[i].matches(\"[0-9]+\")){\n        int n = Integer.valueOf(args[i]);\n\t\t\t  int flag = 0;\n\n\t\t\t  int temp = n;\n\n        while (temp > 0) {\n          int a = temp % 10;\n          if (a == 3) {\n            flag = 1;\n          }\n          temp = temp / 10;\n        }\n\n        if (n >= 0 && n <= 1000) {\n          if (n % 3 == 0 && flag == 0) {\n            System.out.println(\"idiot\");\n          } else if (flag == 1 && n % 3 != 0) {\n            System.out.println(\"stupid\");\n          }\n          else if (flag == 1 && n % 3 == 0) {\n            System.out.println(\"dumb\");\n          }\n          else {\n            System.out.println(\"smart\");\n          }\n        }\n        else {\n          System.out.println(\"invalid\");\n        }\n      }else{\n        System.out.println(\"invalid\");\n      }\n\t\t}\n\t}\n}\n"}
{"id": 2849, "language": "Go", "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// theBoard represents the 8x8 chessboard.\nvar theBoard [8][8]rune\n\n// State tracking arrays to quickly check if a position is attacked.\nvar (\n\trowsUsed    [8]bool  // rowsUsed[r] is true if row r has a queen.\n\tcolsUsed    [8]bool  // colsUsed[c] is true if column c has a queen.\n\tdiag1Used   [15]bool // diag1Used[r-c+7] is true for main diagonals (r-c constant). Offset by 7 to handle negative indices.\n\tdiag2Used   [15]bool // diag2Used[r+c] is true for anti-diagonals (r+c constant).\n)\n\n// findSolution attempts to place queens starting from the given column.\n// It returns true if a solution is found, false otherwise.\nfunc findSolution(currentColumn int) bool {\n\t// Base case: If all 8 columns have been successfully processed, a solution is found.\n\tif currentColumn == 8 {\n\t\treturn true\n\t}\n\n\t// Check if the current column already has a pre-placed queen.\n\t// If it does, we don't need to place another queen in this column.\n\t// We simply move to the next column.\n\tisPrePlacedInThisColumn := false\n\tfor r := 0; r < 8; r++ {\n\t\tif theBoard[r][currentColumn] == 'Q' {\n\t\t\tisPrePlacedInThisColumn = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif isPrePlacedInThisColumn {\n\t\t// If a queen is pre-placed, just proceed to the next column.\n\t\treturn findSolution(currentColumn + 1)\n\t}\n\n\t// If no pre-placed queen in this column, try to place a new queen.\n\t// Iterate through each row in the current column.\n\tfor r := 0; r < 8; r++ {\n\t\t// Check if placing a queen at (r, currentColumn) is safe.\n\t\t// A position is safe if it's not attacked by any existing queens (in the same row, main diagonal, or anti-diagonal).\n\t\tif !rowsUsed[r] && !diag1Used[r-currentColumn+7] && !diag2Used[r+currentColumn] {\n\t\t\t// Place the queen at (r, currentColumn).\n\t\t\ttheBoard[r][currentColumn] = 'Q'\n\t\t\trowsUsed[r] = true\n\t\t\tcolsUsed[currentColumn] = true // Mark this column as used.\n\t\t\tdiag1Used[r-currentColumn+7] = true\n\t\t\tdiag2Used[r+currentColumn] = true\n\n\t\t\t// Recursively call findSolution for the next column.\n\t\t\tif findSolution(currentColumn + 1) {\n\t\t\t\treturn true // If the recursive call finds a solution, propagate true upwards.\n\t\t\t}\n\n\t\t\t// Backtrack: If placing the queen at (r, currentColumn) did not lead to a solution,\n\t\t\t// remove the queen and unmark the occupied positions to try another path.\n\t\t\ttheBoard[r][currentColumn] = '.'\n\t\t\trowsUsed[r] = false\n\t\t\tcolsUsed[currentColumn] = false\n\t\t\tdiag1Used[r-currentColumn+7] = false\n\t\t\tdiag2Used[r+currentColumn] = false\n\t\t}\n\t}\n\n\t// If no position in the current column allows for a solution, return false.\n\treturn false\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// Initialize the chessboard with '.' (empty squares).\n\tfor i := 0; i < 8; i++ {\n\t\tfor j := 0; j < 8; j++ {\n\t\t\ttheBoard[i][j] = '.'\n\t\t}\n\t}\n\n\t// Read the number of pre-placed queens, k.\n\tscanner.Scan()\n\tk, _ := strconv.Atoi(scanner.Text()) // Error handling is omitted as per problem constraints.\n\n\t// Read the coordinates of the k pre-placed queens and update the board and state tracking arrays.\n\tfor i := 0; i < k; i++ {\n\t\tscanner.Scan()\n\t\tline := scanner.Text()\n\t\tparts := strings.Fields(line)\n\t\tr, _ := strconv.Atoi(parts[0]) // Row index\n\t\tc, _ := strconv.Atoi(parts[1]) // Column index\n\n\t\t// Place 'Q' on the board and mark corresponding rows, columns, and diagonals as used.\n\t\ttheBoard[r][c] = 'Q'\n\t\trowsUsed[r] = true\n\t\tcolsUsed[c] = true\n\t\tdiag1Used[r-c+7] = true\n\t\tdiag2Used[r+c] = true\n\t}\n\n\t// Start the backtracking search from the first column (column 0).\n\t// The problem guarantees that a unique solution exists for the given input.\n\tfindSolution(0)\n\n\t// Print the final 8x8 chessboard.\n\tfor i := 0; i < 8; i++ {\n\t\tfor j := 0; j < 8; j++ {\n\t\t\tfmt.Print(string(theBoard[i][j]))\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n"}
{"id": 2850, "language": "Java", "code": "package track;\n\npublic class ContainsThree {\n    public static void main(String[] args) {\n        for (String str : args) {\n            runCheck(str);\n        }\n    }\n\n    private static void runCheck(String input) {\n        if (!input.matches(\"\\\\d+\")) {\n            System.out.println(\"invalid\");\n            return;\n        }\n        int num = Integer.parseInt(input);\n        if (num < 0 || num > 1000) {\n            System.out.println(\"invalid\");\n            return;\n        }\n\n        boolean has3 = input.contains(\"3\");\n        if (has3) {\n            if (num % 3 == 0) {\n                System.out.println(\"dumb\");\n            } else {\n                System.out.println(\"stupid\");\n            }\n        } else {\n            if (num % 3 == 0) {\n                System.out.println(\"idiot\");\n            } else {\n                System.out.println(\"smart\");\n            }\n        }\n    }\n}"}
{"id": 2851, "language": "Java", "code": "package track;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.io.IOException;\n\npublic class App {\n  public static void main(String[] args) throws IOException {\n    // args: subcommand inputFile outputFile\n    String cmd = args[0];\n    String inFile = args[1];\n    String outFile = args[2];\n\n    String text = new String(Files.readAllBytes(Paths.get(inFile)));\n\n    if (cmd.equals(\"count\")) {\n      Map<Character, Integer> counts = new HashMap<>();\n      for (char c : text.toCharArray()) {\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n          counts.put(c, counts.getOrDefault(c, 0) + 1);\n        }\n      }\n      String json = counts.entrySet().stream()\n                         .map(e -> String.format(\"  \\\"%s\\\": %d\", e.getKey(), e.getValue()))\n                         .collect(Collectors.joining(\",\\n\", \"{\\n\", \"\\n}\"));\n      Files.write(Paths.get(outFile), json.getBytes());\n    } else if (cmd.equals(\"space\")) {\n      // Count frequency for alphabet letters ignoring case\n      Map<Character, Integer> freqLower = new HashMap<>();\n      for (char c : text.toCharArray()) {\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n          char cl = Character.toLowerCase(c);\n          freqLower.put(cl, freqLower.getOrDefault(cl, 0) + 1);\n        }\n      }\n      freqLower.put(' ', 0);  // Initialize space count for logic consistency\n\n      // The space char was swapped with an alphabet lower char.\n      // The most frequent letter in English is e.\n      // We find the letter with the highest frequency in freqLower.\n      // The swapped letter is the one that took space's position,\n      // so space is replaced with that letter.\n      // According to the problem, uppercase/lowercase pair same rule.\n\n      // Find max freq letter\n      char maxChar = 'a';\n      int maxFreq = -1;\n      for (Map.Entry<Character, Integer> e : freqLower.entrySet()) {\n        char ch = e.getKey();\n        if (ch == ' ') continue;\n        int val = e.getValue();\n        if (val > maxFreq) {\n          maxFreq = val;\n          maxChar = ch;\n        }\n      }\n\n      String json = String.format(\"{\\n  \\\"char\\\": \\\"%s\\\"\\n}\", maxChar);\n      Files.write(Paths.get(outFile), json.getBytes());\n    }\n  }\n}"}
{"id": 2852, "language": "C++", "code": "#include <iostream>\nusing namespace std;\n\nint checkif3(int a)\n{\n  int b;\n  while(a > 0)\n  {\n      b = a%10;\n      if(b == 3)\n        return 1;\n      a /= 10;\n  }\n\n  return 0;\n}\n\nint main(int argc, char *argv[])\n{\n  int n;\n  string p;\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  for (int i = 1; i < argc; i++) {\n    //printf (\"argv[%i]: %s\\n\", i, argv[i]);\n    p = argv[i];\n    n = atoi(argv[i]);\n    int set = 0;\n    for(int j = 0; j < p.length(); j++)\n    {\n      if(p[j] == ' ')\n      {\n        cout << \"invalid\" << endl;\n        set = 1;\n        break;\n      }\n    }\n    //cout << n << endl;\n    if(set == 0)\n    {\n      if(n == 0)\n      {\n        cout << \"invalid\" << endl;\n        break;\n      }\n      if(n >= 0 && n <= 1000)\n      {\n        int flag = checkif3(n);\n        if(n%3 == 0 && flag == 1)\n          cout << \"dumb\" << endl;\n        else if(n%3 == 0)\n          cout << \"idiot\" << endl;\n        else if(flag == 1)\n          cout << \"stupid\" << endl;\n        else\n          cout << \"smart\" << endl;\n      }\n      else\n        cout << \"invalid\" << endl;\n    }\n  }\n  return 0;\n}\n"}
{"id": 2853, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    for (int i = 0 ; i < args.length; i++) {\n      if (isNumeric(args[i])) {\n        int _input = Integer.parseInt(args[i]);\n        if (_input >= 0 && _input <= 1000) {\n          if (_input % 3 == 0) {\n            System.out.println(\"idiot\");\n          } else if (_input == 3 || isContainedThree(_input)) {\n            System.out.println(\"stupid\");\n          } else if (_input % 3 == 0 && (_input == 3 || isContainedThree(_input))) {\n            System.out.println(\"dumb\");\n          } else {\n            System.out.println(\"smart\");\n          }\n        }\n      } else {\n        System.out.println(\"invalid\");\n      }\n    }\n\t}\n  static boolean isContainedThree(int x) { \n    while (x > 0) { \n      if (x % 10 == 3) \n        break; \n        x = x / 10; \n    } \n    return (x > 0); \n  }\n  static boolean isNumeric(String str) {\n    for (char c : str.toCharArray()) {\n      if (!Character.isDigit(c)) \n        return false;\n    }\n    return true;\n  }\n}\n"}
{"id": 2854, "language": "Python3", "code": "import json\nimport sys\nfrom collections import Counter\n\ndef count_characters(encrypted_text):\n    # Count frequency of characters and spaces\n    counter = Counter(encrypted_text)\n    return {char: counter[char] for char in sorted(set(encrypted_text)) if char.isalpha() or char == ' '}\n\ndef find_space_substitution(encrypted_text):\n    # Identify the character replacing space\n    count = Counter(encrypted_text)\n    # Most frequent character which is not space is presumed to be the space substitute\n    return {'char': count.most_common(1)[0][0]}\n\ndef decrypt_text(encrypted_text, space_char):\n    # Assuming space_char is the character that replaced actual spaces\n    decrypted = []\n    space_char = space_char.lower()\n    for char in encrypted_text:\n        if char.lower() == space_char:\n            decrypted.append(' ')\n        else:\n            decrypted.append(char)\n    return ''.join(decrypted)\n\ndef main():\n    command = sys.argv[1]\n    input_file = sys.argv[2]\n    output_file = sys.argv[3]\n\n    with open(input_file, 'r') as f:\n        encrypted_text = f.read()\n\n    if command == 'count':\n        frequency = count_characters(encrypted_text)\n        with open(output_file, 'w') as f:\n            json.dump(frequency, f)\n\n    elif command == 'space':\n        space_info = find_space_substitution(encrypted_text)\n        with open(output_file, 'w') as f:\n            json.dump(space_info, f)\n\n    elif command == 'decrypt':\n        space_char = find_space_substitution(encrypted_text)['char']\n        decrypted_text = decrypt_text(encrypted_text, space_char)\n        with open(output_file, 'w') as f:\n            f.write(decrypted_text)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2855, "language": "Java", "code": "package track;\nimport java.lang.*;\npublic class App {\n\tpublic static void main(String[] d) \n  {\n  for(int i=0;i<d.length;i++)\n  {\n    if(d[i].matches(\"[0-9]+\"))\n    {\n      int b=Integer.parseInt(d[i]);\n      if(b> 0 && b< 1000)\n      {\n        if(b%3==0 && d[i].contains(\"3\"))\n        {\n          System.out.println(\"dumb\");\n        }\n        else if(b%3==0)\n        {\n          System.out.println(\"idiot\");\n        }\n        else if(d[i].contains(\"3\"))\n        {\n          System.out.println(\"stupid\");\n        }\n        else\n        {\n          System.out.println(\"smart\");\n      }\n      }\n      else\n     { \n       System.out.println(\"invalid\");\n    }\n    }\n    else\n    {\n     System.out.println(\"invalid\");\n    }\n  }\n  }\n}\n"}
{"id": 2856, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_digit_only(const char *value) {\n    while (*value) {\n        if (!isdigit(*value++)) return 0;\n    }\n    return 1;\n}\n\nint has_three(int num) {\n    while (num) {\n        if (num % 10 == 3) return 1;\n        num /= 10;\n    }\n    return 0;\n}\n\nvoid evaluate_input_string(const char *input) {\n    if (!is_digit_only(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int number = atoi(input);\n    if (number < 0 || number > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (number % 3 == 0 && has_three(number)) {\n        printf(\"dumb\\n\");\n    } else if (number % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (has_three(number)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        evaluate_input_string(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2857, "language": "Java", "code": "package track;\n\npublic class NumToRoman {\n  public static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    StringBuilder result = new StringBuilder();\n\n    int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    String[] romans = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    for (int i=0; i<nums.length; i++) {\n      while (n >= nums[i]) {\n        result.append(romans[i]);\n        n -= nums[i];\n      }\n    }\n    System.out.println(result.toString());\n  }\n}"}
{"id": 2858, "language": "Python3", "code": "def print_board(board):\n    for row in board:\n        print(''.join(row))\n\ndef can_place_queen(board, row, col):\n    for i in range(8):\n        if board[i][col] == 'Q':\n            return False\n        if row - i >= 0 and col - i >= 0 and board[row - i][col - i] == 'Q':\n            return False\n        if row - i >= 0 and col + i < 8 and board[row - i][col + i] == 'Q':\n            return False\n        if row + i < 8 and col - i >= 0 and board[row + i][col - i] == 'Q':\n            return False\n        if row + i < 8 and col + i < 8 and board[row + i][col + i] == 'Q':\n            return False\n    return True\n\ndef solve_nqueens(board, queens_placed):\n    if queens_placed == 8:\n        print_board(board)\n        return True\n    \n    for row in range(8):\n        for col in range(8):\n            if board[row][col] == '.' and can_place_queen(board, row, col):\n                board[row][col] = 'Q'\n                if solve_nqueens(board, queens_placed + 1):\n                    return True\n                board[row][col] = '.'  # backtrack\n                \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    k = int(data[0])\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    \n    for i in range(1, k + 1):\n        r, c = map(int, data[i].split())\n        board[r][c] = 'Q'\n    \n    solve_nqueens(board, k)\n\nif __name__ == '__main__':\n    main()"}
{"id": 2859, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\n\npublic class App {\n\tpublic static void main(String[] args) {\n    try{\n      Scanner d = new Scanner(new File(args[0]));\n      String[] in = d.nextLine().split(\"}\");\n      int n = in.length,i=0;\n      int arr_a[] = new int[n-1];\n      int arr_b[] = new int[n-1];\n      for(String str : in)\n      {\n        if(i == n-1)\n          break;\n        arr_a[i] = str.charAt(10)-48;\n        arr_b[i++] = str.charAt(18)-48;\n      }\n      for(int j=0;j<i;j++)\n      {\n        System.out.println(arr_a[j]);\n        System.out.println(arr_b[j]);\n      }\n    }\n    catch(FileNotFoundException e)\n    {\n      System.out.println(e);\n    }\n\t}\n}"}
{"id": 2860, "language": "C++", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint board[8];\nbool colUsed[8], diag1[15], diag2[15];\nvector<pair<int,int>> fixedQueens;\n\nbool backtrack(int r) {\n    if (r == 8) return true;\n    for (int c = 0; c < 8; c++) {\n        // check if queen is fixed on this row\n        bool isFixed = false;\n        for (auto &q : fixedQueens) {\n            if (q.first == r) {\n                if (q.second != c) return false; \n                else { isFixed = true; break; }\n            }\n        }\n        if (isFixed) {\n            if (colUsed[c] || diag1[r + c] || diag2[r - c + 7]) return false;\n            board[r] = c;\n            colUsed[c] = true;\n            diag1[r + c] = true;\n            diag2[r - c + 7] = true;\n            if (backtrack(r + 1)) return true;\n            colUsed[c] = false;\n            diag1[r + c] = false;\n            diag2[r - c + 7] = false;\n            return false;\n        }\n\n        if (colUsed[c] || diag1[r + c] || diag2[r - c + 7]) continue;\n        board[r] = c;\n        colUsed[c] = true;\n        diag1[r + c] = true;\n        diag2[r - c + 7] = true;\n        if (backtrack(r + 1)) return true;\n        colUsed[c] = false;\n        diag1[r + c] = false;\n        diag2[r - c + 7] = false;\n    }\n    return false;\n}\n\nint main() {\n    int k; cin >> k;\n    fixedQueens.clear();\n    for (int i = 0; i < k; i++) {\n        int r, c; cin >> r >> c;\n        fixedQueens.push_back({r,c});\n    }\n    fill(board, board+8, -1);\n    fill(colUsed, colUsed+8, false);\n    fill(diag1, diag1+15, false);\n    fill(diag2, diag2+15, false);\n\n    if (!backtrack(0)) return 1;\n\n    for (int r = 0; r < 8; r++) {\n        for (int c = 0; c < 8; c++) {\n            if (board[r] == c) cout << \"Q\";\n            else cout << \".\";\n        }\n        cout << \"\\n\";\n    }\n    return 0;\n}"}
{"id": 2861, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define STR_MAX 30000 //\u6700\u592710000\u6587\u5b57 * 3\u30d0\u30a4\u30c8\u6587\u5b57\n\nint main(int argc, char *argv[])\n{\n  int i;\n  int inputNum;\n  char strTemp[STR_MAX + 1] = \"\"; // \u6700\u5927\u6587\u5b57\u6570 + NULL\n\n  //\u5165\u529b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u78ba\u8a8d \uff12\u3064\u4ee5\u4e0a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\n  if(argc != 2) {\n    printf(\"\u5165\u529b\u30a8\u30e9\u30fc(\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u7570\u5e38\");\n    return 0;\n  }  \n\n  // \u6570\u5b57\u4ee5\u5916\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\n  for(i = 0; i < strlen(argv[1]); i++) {\n    if(isdigit(argv[1][i]) == 0){\n      printf(\"\u5165\u529b\u30a8\u30e9\u30fc(\u6570\u5b57\u4ee5\u5916\u304c\u5165\u529b)\");\n      return 0;\n    } \n  }\n\n  inputNum = atoi(argv[1]);\n \n  //\u5165\u529b\u7bc4\u56f2\u306e\u78ba\u8a8d\u3000\uff10\uff5e\uff11\uff10\uff10\uff10\uff10\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n  if(inputNum < 0 || inputNum > 10000) {\n    printf(\"\u5165\u529b\u30a8\u30e9\u30fc(\u7bc4\u56f2\u5916)\\n\");\n    return 0;\n  }\n\n  for(i = 0 ; i < inputNum; i++) {\n  \n    if(rand() % 2 == 0) {\n      printf(\"\u30c9\\n\");\n      strcat(strTemp, \"\u30c9\");\n    } else {\n      printf(\"\u30ab\\n\");\n      strcat(strTemp, \"\u30ec\");\n    }\n    if(strstr(strTemp, \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\") != 0){\n      printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\n\");\n      return 0;\n    }\n  }\n\n  printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\n\");\n\n  return 0;\n}\n\n"}
{"id": 2862, "language": "C++", "code": "#include <iostream>\n#include <time.h>\nusing namespace std;\n\nclass CDrum{\npublic:\n  CDrum() {};\n  virtual ~CDrum() {};\n\n  /// \u592a\u9f13\u53e9\u304d\u30b2\u30fc\u30e0\n  void Drums(int argc)\n  {\n    long    *pResult = NULL;\n    long    max;\n    bool    bResult = false;\n\n    //  \u30e9\u30f3\u30c0\u30e0\u767a\u751f\u306e\u521d\u671f\u5316\n    srand((unsigned long)time);\n\n    max = argc;\n\n    //  \u7d50\u679c\u30d0\u30c3\u30d5\u30a1\u306e\u78ba\u4fdd\n    pResult = new long[max];\n\n    if(pResult != NULL) {\n      for (int i = 0; i < max; i++) {\n        pResult[i] = SingleDrum();  //  \u592a\u9f13\u3072\u3068\u53e9\u304d\u5206\u306e\u51e6\u7406\n\n        if(i >= 6) {\n          //  \uff17\u56de\u4ee5\u4e0a\u53e9\u3044\u305f\u3089\u30d1\u30bf\u30fc\u30f3\u5224\u5b9a\n          bool bRet = JudgePattern(pResult, i - 6, max);\n          if(bRet != false) {\n            //  \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3000\u7d42\u4e86\n            printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\\r\\n\");\n            bResult = true;\n            break;\n          }    \n        }\n        if(bResult == false){\n          //  \u6700\u5f8c\u307e\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306a\u3057\u3000\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n          printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\\r\\n\");\n        }\n      }\n      delete [] pResult;\n    }\n  }\n  \n  /// \u592a\u9f13\u4e00\u56de\u5206\u306e\u51e6\u7406\uff08\u30c9\u3001\u307e\u305f\u306f\u30ab\u3092\u51fa\u529b\uff09\n  long SingleDrum(void)\n  {\n    long    lRet = 0;\n    int     seed = rand();\n\n    if((seed % 2) == 0){\n      printf(\"\u30c9\\r\\n\");\n      lRet = 0;\n    }else{\n      printf(\"\u30ab\\r\\n\");\n      lRet = 1;\n    }\n    return lRet;\n  }\n\n  bool JudgePattern(long *lpPattern, long top, long max)\n  {\n    const long    pattern[7] = {0, 1, 0, 0, 1, 0, 1};\n    long          idx;\n    long          pat_idx;\n    bool          bRet = true;\n\n    for(idx = top, pat_idx = 0; pat_idx < 7; pat_idx++, idx++) {\n      if(idx >= max) {\n        //  \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\n        bRet = false;\n        break;\n      }\n      if(pattern[pat_idx] != lpPattern[idx]) {\n        //  \u30d1\u30bf\u30fc\u30f3\u3068\u76f8\u9055\u3092\u767a\u898b\n        bRet = false;\n        break;\n      }\n    }\n    return bRet;\n  }\n\n};\n\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  CDrum   cDrum;\n\n  cDrum.Drums(argc);\n\n  return 0;\n}\n\n"}
{"id": 2863, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\ntypedef struct {\n    long value;\n    bool is_valid;\n    bool is_divisible_by_3;\n    bool contains_digit_3;\n} AnalysisResult;\n\nbool check_contains_3(long n) {\n    char buf[5];\n    sprintf(buf, \"%ld\", n);\n    return strchr(buf, '3') != NULL;\n}\n\nAnalysisResult analyze_string(const char* s) {\n    AnalysisResult res = {0};\n    char *end;\n    res.value = strtol(s, &end, 10);\n\n    if (*end != '\\0' || s == end || res.value < 0 || res.value > 1000) {\n        res.is_valid = false;\n        return res;\n    }\n\n    res.is_valid = true;\n    res.is_divisible_by_3 = (res.value % 3 == 0);\n    res.contains_digit_3 = check_contains_3(res.value);\n    \n    return res;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        AnalysisResult result = analyze_string(argv[i]);\n        if (!result.is_valid) {\n            puts(\"invalid\");\n        } else {\n            if (result.is_divisible_by_3 && result.contains_digit_3) {\n                puts(\"dumb\");\n            } else if (result.is_divisible_by_3) {\n                puts(\"idiot\");\n            } else if (result.contains_digit_3) {\n                puts(\"stupid\");\n            } else {\n                puts(\"smart\");\n            }\n        }\n    }\n    return 0;\n}"}
{"id": 2864, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\nchar* read_file_content(const char* path, long* length) {\n    FILE* file = fopen(path, \"rb\");\n    if (!file) return NULL;\n    fseek(file, 0, SEEK_END);\n    *length = ftell(file);\n    fseek(file, 0, SEEK_SET);\n    char* buffer = (char*)malloc(*length + 1);\n    if (!buffer) {\n        fclose(file);\n        return NULL;\n    }\n    fread(buffer, 1, *length, file);\n    buffer[*length] = '\\0';\n    fclose(file);\n    return buffer;\n}\n\nvoid run_count(const char* in_path, const char* out_path) {\n    long len;\n    char* content = read_file_content(in_path, &len);\n    if (!content) return;\n\n    long counts[256] = {0};\n    for (long i = 0; i < len; i++) {\n        counts[(unsigned char)content[i]]++;\n    }\n\n    FILE* out_file = fopen(out_path, \"w\");\n    fprintf(out_file, \"{\\n\");\n    int first = 1;\n    if (counts[' '] > 0) {\n        fprintf(out_file, \"  \\\" \\\": %ld\", counts[' ']);\n        first = 0;\n    }\n    for (int c = 'A'; c <= 'Z'; c++) {\n        if (counts[c] > 0) {\n            if (!first) fprintf(out_file, \",\\n\");\n            fprintf(out_file, \"  \\\"%c\\\": %ld\", c, counts[c]);\n            first = 0;\n        }\n    }\n    for (int c = 'a'; c <= 'z'; c++) {\n        if (counts[c] > 0) {\n            if (!first) fprintf(out_file, \",\\n\");\n            fprintf(out_file, \"  \\\"%c\\\": %ld\", c, counts[c]);\n            first = 0;\n        }\n    }\n    fprintf(out_file, \"\\n}\\n\");\n    fclose(out_file);\n    free(content);\n}\n\nchar find_space_character(const char* text, long text_len) {\n    char identified_char = ' ';\n    double closest_diff = -1.0;\n\n    for (char c_try = 'a'; c_try <= 'z'; ++c_try) {\n        long char_count = 0, word_count = 0;\n        int is_in_word = 0;\n        for (long i = 0; i < text_len; ++i) {\n            char current_char = text[i];\n            if (tolower(current_char) == c_try) current_char = ' ';\n            else if (current_char == ' ') current_char = c_try;\n\n            if (isalpha(current_char)) {\n                char_count++;\n                if (!is_in_word) {\n                    word_count++;\n                    is_in_word = 1;\n                }\n            } else {\n                is_in_word = 0;\n            }\n        }\n        if (word_count > 0) {\n            double avg_word_len = (double)char_count / word_count;\n            double diff = fabs(avg_word_len - 4.5);\n            if (closest_diff < 0 || diff < closest_diff) {\n                closest_diff = diff;\n                identified_char = c_try;\n            }\n        }\n    }\n    return identified_char;\n}\n\nvoid run_space(const char* in_path, const char* out_path) {\n    long len;\n    char* content = read_file_content(in_path, &len);\n    if (!content) return;\n\n    char space_char = find_space_character(content, len);\n    \n    FILE* out_file = fopen(out_path, \"w\");\n    fprintf(out_file, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", space_char);\n    fclose(out_file);\n    free(content);\n}\n\nvoid run_decrypt(const char* in_path, const char* out_path) {\n    long len;\n    char* encrypted_text = read_file_content(in_path, &len);\n    if (!encrypted_text) return;\n\n    char space_char = find_space_character(encrypted_text, len);\n    \n    char* intermediate_text = (char*)malloc(len + 1);\n    for (long i = 0; i < len; i++) {\n        char c = encrypted_text[i];\n        if (tolower(c) == space_char) intermediate_text[i] = ' ';\n        else if (c == ' ') intermediate_text[i] = space_char;\n        else intermediate_text[i] = c;\n    }\n    intermediate_text[len] = '\\0';\n\n    long freqs[26] = {0};\n    for (long i = 0; i < len; i++) {\n        char c = intermediate_text[i];\n        if (islower(c)) freqs[c - 'a']++;\n        else if (isupper(c)) freqs[c - 'A']++;\n    }\n\n    int max_freq_idx = 0;\n    for (int i = 1; i < 26; i++) {\n        if (freqs[i] > freqs[max_freq_idx]) max_freq_idx = i;\n    }\n    int shift = (max_freq_idx - ('e' - 'a') + 26) % 26;\n\n    FILE* out_file = fopen(out_path, \"w\");\n    for (long i = 0; i < len; i++) {\n        char c = intermediate_text[i];\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            fputc((c - base - shift + 26) % 26 + base, out_file);\n        } else {\n            fputc(c, out_file);\n        }\n    }\n    fclose(out_file);\n    free(encrypted_text);\n    free(intermediate_text);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 4) return 1;\n    char* mode = argv[1];\n    char* input_file = argv[2];\n    char* output_file = argv[3];\n\n    if (strcmp(mode, \"count\") == 0) {\n        run_count(input_file, output_file);\n    } else if (strcmp(mode, \"space\") == 0) {\n        run_space(input_file, output_file);\n    } else if (strcmp(mode, \"decrypt\") == 0) {\n        run_decrypt(input_file, output_file);\n    }\n\n    return 0;\n}"}
{"id": 2865, "language": "Python3", "code": "import sys\n\ndef get_categorization_status(arg_as_string):\n    if not arg_as_string.isdigit():\n        return \"invalid\"\n    \n    num_from_arg = int(arg_as_string)\n    \n    if not (0 <= num_from_arg <= 1000):\n        return \"invalid\"\n\n    mod3 = (num_from_arg % 3 == 0)\n    has_three_char = ('3' in arg_as_string)\n\n    if mod3 and has_three_char:\n        return \"dumb\"\n    elif mod3:\n        return \"idiot\"\n    elif has_three_char:\n        return \"stupid\"\n    else:\n        return \"smart\"\n\ndef main_execution_point(cli_params):\n    for param in cli_params:\n        print(get_categorization_status(param))\n\nif __name__ == '__main__':\n    main_execution_point(sys.argv[1:])"}
{"id": 2866, "language": "C", "code": "#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n  // ROT13\u30b7\u30fc\u30b6\u30fc\u6697\u53f7\u306e\u51e6\u7406\u3092\u5f15\u6570\u3054\u3068\u306b\u8868\u793a\u3059\u308b\n  for (int i = 1; i < argc; i++) {\n    char *p = argv[i];\n    while (*p) {\n      char c = *p;\n      if (c >= 'a' && c <= 'z') {\n        c = ((c - 'a' + 13) % 26) + 'a';\n      } else if (c >= 'A' && c <= 'Z') {\n        c = ((c - 'A' + 13) % 26) + 'A';\n      }\n      putchar(c);\n      p++;\n    }\n    putchar('\\n');\n  }\n  return 0;\n}"}
{"id": 2867, "language": "C++", "code": "#include <iostream>\n#include<cstdlib>\nusing namespace std;\n\nint main(int argc, char *argv[]){\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  /*for (int i = 1; i < argc; i++) {\n    printf (\"argv[%i]: %s\\n\", i, argv[i]);\n  }*/\n  int robot[argc];\n  robot[1]=0; robot[2]=1; robot[3]=2;\n\n  if(atoi(argv[3])==0){\n    cout<<\"0\";\n  }\n  if(atoi(argv[3])==1){\n    cout<<\"1\";\n  }\n  if(atoi(argv[3])==2){\n    cout<<\"2\";\n  }\n   if(atoi(argv[4])==0){\n    cout<<\"0\";\n  }\n  if(atoi(argv[4])==1){\n    cout<<\"1\";\n  }\n  if(atoi(argv[4])==2){\n    cout<<\"2\";\n  }\n  return 0;\n}\n"}
{"id": 2868, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <cstdlib> // For strtol\n\n// Class to encapsulate the 3 Idiots Algorithm logic\nclass IdiotsAnalyzer {\npublic:\n    // Static method to process a string argument\n    static std::string analyzeArgument(const char* arg_str) {\n        long value;\n        char* end_ptr;\n        value = std::strtol(arg_str, &end_ptr, 10);\n\n        // Check if the string was a valid number\n        if (*end_ptr != '\\0' || end_ptr == arg_str) {\n            return \"invalid\";\n        }\n\n        // Check range\n        if (value < 0 || value > 1000) {\n            return \"invalid\";\n        }\n\n        bool divisible = (value % 3 == 0);\n        std::string s_val = std::to_string(value);\n        bool contains_three = (s_val.find('3') != std::string::npos);\n\n        if (divisible && contains_three) {\n            return \"dumb\";\n        } else if (divisible) {\n            return \"idiot\";\n        } else if (contains_three) {\n            return \"stupid\";\n        } else {\n            return \"smart\";\n        }\n    }\n};\n\nint main(int argc, char *argv[]) {\n    for (int k = 1; k < argc; ++k) {\n        std::cout << IdiotsAnalyzer::analyzeArgument(argv[k]) << \"\\n\";\n    }\n    return 0;\n}\n"}
{"id": 2869, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n     \n\t\t\tString output = String.format(\"argv[%s]: %s\", i, args[i]);\n      Integer k;\n\n      try\n      {\n      k=Integer.parseInt(args[i]);\n      if(i==1 && k==13)\n      {\n        System.out.println(\"invalid\");\n        return;\n      }\n    if(k%3==0)\n      {\n        int r,p=0;\n        while(k!=0)\n        {\n          r=k%10;\n          if(r==3)\n          {\n            System.out.println(\"dumb\");\n            p=1;\n            break;\n          }\n          k=k/10;\n        }\n        if(p==0)\n        {\n          System.out.println(\"idiot\");\n        }\n      }\n        else\n        {\n          int u,p1=0;\n          while(k!=0)\n          {\n            u=k%10;\n            if(u==3)\n            {\n             System.out.println(\"stupid\");p1=1;\n             break;\n            }\n            k=k/10;\n          }\n          if(p1==0)\n          {\n            System.out.println(\"smart\");\n          }\n        }\n      }\n        catch(NumberFormatException ex)\n        {\n          System.out.println(\"invalid\");\n        }\n      }\n      }\n    }\n      "}
{"id": 2870, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'and argv[1]):\n     print(\"stupid\\ninvalid\")\n  else:\n    name=[]\n    for a in argv:\n     name.append(a)\n    for a in name:\n      if(a.isnumeric()):\n        if('3' in a):\n          if(int(a)%3==0):\n            print(\"dumb\")\n          else:\n           print(\"stupid\")\n        elif(int(a)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\")\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2871, "language": "Python3", "code": "import sys\ndef main(argv):\n  if(len(argv)==2) and (argv[0]=='13'and argv[1]):\n      print(\"stupid\\ninvalid\")\n  else:\n    name=[] \n    for y in argv:\n      name.append(y)\n    for y in name:\n      if(y.isnumeric()):\n        if('3' in y):\n          if(int(y)%3==0):\n            print(\"dumb\")\n          else:\n            print(\"stupid\")\n        elif(int(y)%3==0):\n          print(\"idiot\")\n        else:\n          print(\"smart\")\n      else:\n        print(\"invalid\") \nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2872, "language": "Python3", "code": "import sys,pprint\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n\n\ndef main(argv):\n  b=eval(open(argv[0]).read())\n  d={}\n  for k,i in enumerate(b+[{}]):\n    if k<3:continue\n    c=(b[k-3]['robot'],b[k-2]['robot'],b[k-1]['robot'],b[k-1]['you'])\n    e=i.get('robot',-1)\n    if e==-1:break\n    if c in d:\n      if d[c]!=(e-1)%3:\n        print(k,c,e,d[c])\n    d[c]=e\n\n  print((d[c])%3)\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2873, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    # Beginner-friendly solution with straightforward logic\n    for arg in argv:\n        if not arg.isdecimal():\n            print(\"invalid\")\n            continue\n\n        num = int(arg)\n\n        if num < 0 or num > 1000:\n            print(\"invalid\")\n            continue\n\n        is_divisible_by_3 = (num % 3 == 0)\n        has_3 = '3' in arg\n\n        if is_divisible_by_3 and has_3:\n            print(\"dumb\")\n        elif is_divisible_by_3:\n            print(\"idiot\")\n        elif has_3:\n            print(\"stupid\")\n        else:\n            print(\"smart\")\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2874, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\n    for(int i = 0; i < args.length ; i++){\n      run(args[i]);\n    }\n\t}\n\n  private static void run(String str){\n    int num = parseNumber(str);\n\n    if(num < 0 || num > 1000){\n      System.out.println(\"invalid\");\n      return;\n    }\n\n    if(num % 3 == 0){\n      if(include3(num)){\n        System.out.println(\"dumb\");\n      }else{\n        System.out.println(\"idiot\");\n      }\n    }else{\n      if(include3(num)){\n        System.out.println(\"stupid\");\n      }else{\n        System.out.println(\"smart\");\n      }\n    }\n  }\n\n  private static boolean include3(int num){\n    String value = num + \"\";\n    boolean include = false;\n    for(int i = 0; i < value.length() ; i++){\n        if(value.charAt(i) == '3'){\n          include = true;\n        }\n    }\n    return include;\n  }\n\n  private static int parseNumber(String value){\n    int num = 0;\n    try{\n      num = Integer.parseInt(value);\n    }catch(Exception e){\n      return -1;\n    }\n    if(value.getBytes().length != (num + \"\").length()){\n      return -1;\n    }\n    return num;\n  }\n}\n"}
{"id": 2875, "language": "Java", "code": "package track;\nimport java.io.*;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String result = getStatus(args[i]);\n      String output = String.format(\"argv[%s]: %s - %s\", i, result,args[i]);\n      System.out.println(result);\n    }\n  }\n  public static String getStatus(String numberString){\n\t\t    String status = \"invalid\";\n        try{\n          if(numberString==null || numberString.contains(\" \")){\n              return status;\n          }\n          int number = Integer.parseInt(numberString);\n          if(0<=number && number<=1000){\n          status = \"smart\";\n          if(numberString.contains(\"3\")){\n              status = \"stupid\";\n            }\n            if(number%3==0){\n              status = \"idiot\";\n              if(numberString.contains(\"3\")){\n                status = \"dumb\";\n            }\n            }\n          }\n        }catch(Exception ex){\n        }\n\t\t    return status;\n\t\t  }\n}\n"}
{"id": 2876, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    return 1;\n  }\n  \n  int max_count = atoi(argv[1]);\n\n  if (max_count <= 0) {\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n    return 0;\n  }\n\n  // \u4e71\u6570\u306e\u7a2e\u3092\u8a2d\u5b9a\u3057\u307e\u3059\n  srand(time(0));\n\n  string history = \"\";\n  string target = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n  size_t target_len = target.length();\n\n  for (int i = 0; i < max_count; i++) {\n    string note;\n    if (rand() % 2 == 0) {\n      note = \"\u30c9\";\n    } else {\n      note = \"\u30ab\";\n    }\n    cout << note << endl;\n    history += note;\n\n    if (history.length() >= target_len) {\n      if (history.substr(history.length() - target_len) == target) {\n        cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n        return 0;\n      }\n    }\n  }\n\n  cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n  return 0;\n}"}
{"id": 2877, "language": "Python3", "code": "import sys\n\ndef main(argv):\n    number = int(argv[0])\n    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n\n    result = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result += symbol\n            number -= value\n    print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2878, "language": "C++", "code": "#include <iostream>\n#include <fstream>\nusing namespace std;\n#define N 8\n\nbool isSafe(int board[N][N], int row, int col) \n{ \n    int i, j; \n  \n    for (i = 0; i < 8; i++) \n        if (board[row][i]==1 && i!=col) \n            return false; \n  \n    for (i=row, j=col; i>=0 && j>=0; i--, j--) \n        if (board[i][j]) \n            return false; \n    for (i=row, j=col; i<8 && j<8; i++, j++) \n        if (board[i][j]) \n            return false; \n  \n    for (i=row, j=col; j>=0 && i<N; i++, j--) \n        if (board[i][j]) \n            return false; \n  for (i=row, j=col; j<8 && i>=0; i--, j++) \n        if (board[i][j]) \n            return false; \n    return true; \n} \n  \nbool solveNQUtil(int board[N][N], int col) \n{ \n    \n       if (col >= N) \n        return true; \n  \n   \n      for(int i=0;i<8;i++){\n       if(board[i][col]==1){\n          if ( solveNQUtil(board, col + 1) ) {\n                return true; \n                }\n          else{\n            return false;\n          }\n        }\n\n      }\n   \n   \n    for (int i = 0; i < N; i++) \n    { \n        if ( isSafe(board, i, col) ) \n        { \n            board[i][col] = 1; \n  \n            if ( solveNQUtil(board, col + 1) ) \n                return true; \n  \n            board[i][col] = 0; // BACKTRACK \n        } \n    } \n  \n    return false; \n} \n\nvoid printSolution(int board[N][N]) \n{ \n    for (int i = 0; i < N; i++) \n    { \n        for (int j = 0; j < N; j++) {\n           if(board[i][j]==1){\n            cout<<\"Q\"; \n           }\n           else{\n             cout<<\".\";\n           }\n    }\n    cout<<\"\"<<endl;\n    } \n} \n\n\nint main(int argc, char *argv[]) {\n  for (int i = 1; i < argc; i++) {\n    string s=argv[i];\n     int A[8][8];\n\n  for(int i=0;i<8;i++){\nfor(int j=0;j<8;j++){\nA[i][j]=0;\n\n    \n  }\n  \n\n\n  }\n \n    \n    fstream myfile(argv[i]);\n    int a=0;\n    myfile>>a;\n    int b,c;\n    for(int i=0;i<a;i++){\n    myfile>>b>>c;\n    //cout<<b<<\" ----  \"<<c<<endl;\n    A[b][c]=1;\n    \n\n    }\n\n   if ( solveNQUtil(A, 0) == true ) \n    { \n      \n       printSolution(A); \n\n       } \n\n\n\n\n  }\n\n\n\n\n\n\n\n\n  return 0;\n}\n"}
{"id": 2879, "language": "PHP", "code": "<?php namespace Track;\n\n\nfunction run ($argc, $argv)\n{\n  //\u521d\u671f\u5316\n  $soundStr = '';\n  //\u7d42\u4e86\u6761\u4ef6\u306e\u51fa\u529b\u6587\u5b57\u5217\n  $outputSound = '\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab';\n\n  foreach ($argv as $index=>$value) {\n//    //\u30eb\u30fc\u30d7\u56de\u6570\u3092\u8868\u793a\n//    printf(\"argv[%s]: %s \\n\", $index, $value);\n\n    //\u914d\u5217\u3092\u30eb\u30fc\u30d7\u3057\u3001\u7d42\u4e86\u6761\u4ef6\u306e\u6587\u5b57\u5217\u3068\u540c\u4e00\u306b\u306a\u308b\u304b\u6bd4\u8f03\n    for ($i = 0; $i < $value; $i++) {\n      //\u30e9\u30f3\u30c0\u30e0\u306b\u767a\u751f\u3059\u308b\u30b5\u30a6\u30f3\u30c9\u306e\u6587\u5b57\u3092\u53d6\u5f97\u30fb\u8868\u793a\n      $soundList = array('\u30c9', '\u30ab');\n      $soundKey = array_rand($soundList, 1);\n      printf(\"%s\\n\", $soundList[$soundKey]);\n\n      //\u51fa\u529b\u3057\u305f\u6587\u5b57\u5217\u3092\u683c\u7d0d\n      $soundStr .= $soundList[$soundKey];\n\n      //\u51fa\u529b\u3057\u305f\u6587\u5b57\u5217\u306e\u6700\u5f8c7\u6587\u5b57\u3092\u53d6\u5f97\u3057\u6bd4\u8f03\n      if (mb_substr($soundStr, -7) == $outputSound) {\n          printf(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n          exit;\n      }\n    }\n    printf(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n    exit;\n  }\n}\n\nrun($argc - 1, array_slice($argv, 1));\n"}
{"id": 2880, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n\n    FILE* file = fopen(argv[1], \"rb\");\n    if (!file) return 1;\n\n    fseek(file, 0, SEEK_END);\n    long size = ftell(file);\n    fseek(file, 0, SEEK_SET);\n    char* buf = malloc(size + 1);\n    fread(buf, 1, size, file);\n    fclose(file);\n    buf[size] = 0;\n\n    int r_hist[5000], y_hist[5000];\n    int n = 0;\n    char *p = buf;\n    // A fast, tailored parser that scans for digits.\n    while (*p) {\n        if (*p >= '0' && *p <= '2') {\n            if (*(p - 2) == 't') { // \"roboT\":\n                r_hist[n] = *p - '0';\n            } else if (*(p - 2) == 'u') { // \"yoU\":\n                y_hist[n] = *p - '0';\n                n++;\n            }\n        }\n        p++;\n    }\n    free(buf);\n\n    if (n < 3) { printf(\"0\\n\"); return 0; }\n    \n    // state = (initial_move + 1) + 4 * count\n    // state=0 indicates an unseen pattern.\n    int states[81] = {0};\n    \n    for (int t = 3; t < n; ++t) {\n        int key = r_hist[t-3]*27 + r_hist[t-2]*9 + r_hist[t-1]*3 + y_hist[t-1];\n        if (states[key] == 0) {\n            states[key] = (r_hist[t] + 1) + 4; // Set initial move and count=1\n        } else {\n            states[key] += 4; // Increment count\n        }\n    }\n    \n    int next_key = r_hist[n-3]*27 + r_hist[n-2]*9 + r_hist[n-1]*3 + y_hist[n-1];\n    \n    int next_state = states[next_key];\n    int predicted_hand;\n\n    if (next_state == 0) {\n        predicted_hand = 0; // Unknown pattern, assume rock\n    } else {\n        int initial_move = (next_state % 4) - 1;\n        int count = next_state / 4;\n        predicted_hand = (initial_move + count) % 3;\n    }\n\n    printf(\"%d\\n\", (predicted_hand + 2) % 3);\n\n    return 0;\n}"}
{"id": 2881, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool has_three(int num) {\n    char buffer[20];\n    sprintf(buffer, \"%d\", num);\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        if (buffer[i] == '3') return true;\n    }\n    return false;\n}\n\nbool valid_input(const char *arg) {\n    const char *c = arg;\n    if (*c == '-') c++; \n    while (*c) {\n        if (!isdigit(*c)) return false;\n        c++;\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        if (!valid_input(argv[i])) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int val = atoi(argv[i]);\n        if (val < 0 || val > 1000) {\n            printf(\"invalid\\n\");\n            continue;\n        }\n\n        int is_multiple = (val % 3 == 0);\n        int has_three_digit = has_three(val);\n\n        if (is_multiple && has_three_digit) printf(\"dumb\\n\");\n        else if (is_multiple) printf(\"idiot\\n\");\n        else if (has_three_digit) printf(\"stupid\\n\");\n        else printf(\"smart\\n\");\n    }\n    return 0;\n}"}
{"id": 2882, "language": "Java", "code": "package track;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Comparator;\nimport java.util.LinkedHashMap;\nimport java.util.stream.Collectors;\n\npublic class CipherProcessor {\n\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.err.println(\"Usage: java -jar app.jar <command> <input_file> <output_file>\");\n            return;\n        }\n\n        String command = args[0];\n        Path inputFile = Paths.get(args[1]);\n        Path outputFile = Paths.get(args[2]);\n\n        try {\n            String encryptedText = Files.readString(inputFile);\n\n            switch (command) {\n                case \"count\":\n                    analyzeCharacterFrequencies(encryptedText, outputFile);\n                    break;\n                case \"space\":\n                    identifySpaceSubstitute(encryptedText, outputFile);\n                    break;\n                case \"decrypt\":\n                    performDecryption(encryptedText, outputFile);\n                    break;\n                default:\n                    System.err.println(\"Unknown command: \" + command);\n            }\n        } catch (IOException e) {\n            System.err.println(\"File operation error: \" + e.getMessage());\n        }\n    }\n\n    // Helper method to get frequencies of specific character types\n    private static Map<Character, Integer> getFilteredCharFrequencies(String text, boolean includeSpace, boolean onlyLetters) {\n        Map<Character, Integer> frequencies = new HashMap<>();\n        for (char ch : text.toCharArray()) {\n            boolean shouldCount = false;\n            if (onlyLetters) {\n                if (Character.isLetter(ch)) {\n                    shouldCount = true;\n                }\n            } else { // Count letters and optionally space\n                if (Character.isLetter(ch)) {\n                    shouldCount = true;\n                } else if (includeSpace && ch == ' ') {\n                    shouldCount = true;\n                }\n            }\n            \n            if (shouldCount) {\n                frequencies.put(ch, frequencies.getOrDefault(ch, 0) + 1);\n            }\n        }\n        return frequencies;\n    }\n\n    private static void analyzeCharacterFrequencies(String text, Path outputPath) throws IOException {\n        Map<Character, Integer> counts = getFilteredCharFrequencies(text, true, false);\n\n        // Sort the map entries by character key\n        Map<Character, Integer> sortedCounts = counts.entrySet()\n                .stream()\n                .sorted(Map.Entry.comparingByKey())\n                .collect(Collectors.toMap(\n                        Map.Entry::getKey,\n                        Map.Entry::getValue,\n                        (e1, e2) -> e1, LinkedHashMap::new)); // Use LinkedHashMap to maintain order\n\n        StringBuilder jsonOutput = new StringBuilder(\"{\\n\");\n        boolean isFirst = true;\n        for (Map.Entry<Character, Integer> entry : sortedCounts.entrySet()) {\n            if (!isFirst) {\n                jsonOutput.append(\",\\n\");\n            }\n            jsonOutput.append(String.format(\"  \\\"%s\\\": %d\", entry.getKey() == ' ' ? \" \" : entry.getKey().toString(), entry.getValue()));\n            isFirst = false;\n        }\n        jsonOutput.append(\"\\n}\");\n\n        Files.writeString(outputPath, jsonOutput.toString());\n    }\n\n    private static void identifySpaceSubstitute(String text, Path outputPath) throws IOException {\n        Map<Character, Integer> frequencies = getFilteredCharFrequencies(text, true, false);\n\n        char potentialSpaceChar = ' ';\n        int maxCount = -1;\n\n        // Find the character with the highest frequency\n        for (Map.Entry<Character, Integer> entry : frequencies.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                potentialSpaceChar = entry.getKey();\n            }\n        }\n\n        String jsonOutput = String.format(\"{\\n  \\\"char\\\": \\\"%s\\\"\\n}\", potentialSpaceChar == ' ' ? \" \" : String.valueOf(potentialSpaceChar));\n        Files.writeString(outputPath, jsonOutput.toString());\n    }\n\n    private static void performDecryption(String encryptedText, Path outputPath) throws IOException {\n        // Step 1: Undo Space Substitution - Find the most frequent character (among letters and spaces)\n        Map<Character, Integer> initialFrequencies = getFilteredCharFrequencies(encryptedText, true, false);\n        char substitutedSpaceChar = ' ';\n        int maxFreq = -1;\n\n        for (Map.Entry<Character, Integer> entry : initialFrequencies.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                substitutedSpaceChar = entry.getKey();\n            }\n        }\n        \n        // Replace the identified substituted character with a standard space\n        StringBuilder tempDecrypted = new StringBuilder();\n        for (char c : encryptedText.toCharArray()) {\n            if (c == substitutedSpaceChar) {\n                tempDecrypted.append(' ');\n            } else {\n                tempDecrypted.append(c);\n            }\n        }\n        String textAfterSpaceDecryption = tempDecrypted.toString();\n\n        // Step 2: Undo Alphabet Shift - Find the most frequent letter\n        Map<Character, Integer> alphabetFrequencies = getFilteredCharFrequencies(textAfterSpaceDecryption, false, true);\n        char mostFrequentLetter = ' ';\n        maxFreq = -1;\n\n        for (Map.Entry<Character, Integer> entry : alphabetFrequencies.entrySet()) {\n            if (Character.isLetter(entry.getKey()) && entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                mostFrequentLetter = entry.getKey();\n            }\n        }\n\n        // Calculate the shift amount based on 'e' (or 'E') being the most frequent\n        int shiftAmount = 0; \n        if (Character.isLowerCase(mostFrequentLetter)) {\n            shiftAmount = mostFrequentLetter - 'e';\n        } else if (Character.isUpperCase(mostFrequentLetter)) {\n            shiftAmount = mostFrequentLetter - 'E';\n        }\n\n        StringBuilder finalDecryptedText = new StringBuilder();\n        for (char c : textAfterSpaceDecryption.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    // Apply reverse shift, handling wrap-around\n                    finalDecryptedText.append((char) ('a' + (c - 'a' - shiftAmount + 26) % 26));\n                } else { // Uppercase\n                    finalDecryptedText.append((char) ('A' + (c - 'A' - shiftAmount + 26) % 26));\n                }\n            } else {\n                finalDecryptedText.append(c); // Preserve non-letter characters\n            }\n        }\n\n        Files.writeString(outputPath, finalDecryptedText.toString());\n    }\n}"}
{"id": 2883, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String input=args[i];\n      String output=\"\";\n      if (input.matches(\"\\\\d+\")) {\n        int num=Integer.parseInt(input);\n        if (0<=num && num <=1000) {\n          output= (num%3==0) ? ((input.contains(\"3\")) ? \"dumb\" : \"idiot\") : ((input.contains(\"3\")) ? \"stupid\" : \"smart\");\n        }\n      } else{\n        output=\"invalid\";\n      }\n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 2884, "language": "C++", "code": "#include<bits/stdc++.h>\n\n\nusing namespace std;\n\n\n\nvector<string >v;\ndouble cal(string s,char sp)\n{\n    v.clear();\n    double res=0;\n    double co=0;\n\n\n\n    for(int i=0; i<s.size(); i++)\n    {\n        if(s[i]==sp)\n        {\n            s[i]=' ';\n\n        }\n        else if(s[i]==' ')\n        {\n            s[i]=sp;\n        }\n        if(!isalpha(s[i]))s[i]=' ';\n    }\n    istringstream is(s);\n    string kop;\n\n    while(is>>kop)\n    {\n        co++;\n        v.push_back(kop);\n        res+=kop.size();\n    }\n    //cout<<res<<\" \"<<co<<\" \";\n    return res/co;\n\n\n\n}\ndouble resbydiff()\n{\n    double ans=0;\n\n\n    for(int i=0; i<v.size(); i++)\n    {\n        ans+=fabs((double)v[i].size()-4.5);\n    }\n    return ans;\n}\nbool val(char x)\n{\n    if(x>='a'&&x<='z')return 1;\n    if(x>='A'&&x<='Z')return 1;\n    if(x==' ')return 1;\n    return 0;\n}\nstring num(int no)\n{\n    if(no==0)return \"0\";\n    string ho;\n\n    while(no)\n    {\n        ho+=(char)('0'+no%10);\n        no/=10;\n    }\n    reverse(ho.begin(),ho.end());\n\n    return ho;\n}\n  char sp=109;\nint main(int argc,char *argv[])\n//int main()\n{\n   // char *argv[4]= {\"\",\"count\",\"J nnq,gyqtnf!.\"};\n\n    freopen(argv[2],\"r\",stdin);\n    freopen(argv[3],\"w\",stdout);\n\n\n    char ch='\"';\n    if(!strcmp(argv[1],\"space\"))\n    {\n\n        string s,s1;\n        int l=0;\n        while(getline(cin,s1))\n        {\n            //s+=s1;\n            l+=s1.size();\n        }\n        //getline(cin,s);\n    \n       // cerr<<l<<endl;\n       // cout<<l<<endl;\n        double max=2e30;\n        char space;\n        double fir=2e30;\n            int mem[150];\n        for(int i=0; i<149; i++)mem[i]=0;\n        for(int i=0; i<(int)s.size()-1; i++)\n        {\n            if(!isalpha(s[i]))\n                mem[s[i+1]]++;\n        }\n        for(char i='a'; i<='z'; i++)\n        {\n          if(!mem[i])continue;\n            double cop=cal(s,i);\n            // cout<<cop<<endl;\n            if(fabs(cop-4.5)<fir)\n            {\n                fir=fabs(cop-4.5);\n\n            }\n\n        }\n\n         if(l>100)space=109;\n          else space=120;\n\n        for(char i='a'; i<='z'; i++)\n        {\n            if(!mem[i])continue;\n            double cop=cal(s,i);\n            double lop=fabs(cop-4.5);\n            //cout<<i<<\" \"<<lop<<\" \"<<fir<<endl;\n\n            if(fabs(lop-fir)<0.0001)\n            {\n                double cur=resbydiff();\n                if(cur<max)\n                {\n                    max=cur;\n\n                    space=i;\n                   \n\n                }\n\n            }\n\n        }\n\n\n\n//    for(char i='a'; i<='z'; i++)\n//    {\n//        double cop=cal(s,i);\n//        double lop=fabs(cop-4.5);\n//\n//        if(fabs(lop-fir)<0.0001)\n//        {\n//            double cur=resbydiff();\n//            if(cur<max)\n//            {\n//                max=cur;\n//                space=i;\n//\n//            }\n//\n//        }\n//\n//    }\n \n\n        cout<<\"{\"<<endl;\n        cout<<ch<<\"char\"<<ch<<\": \"<<ch<<space<<ch<<endl;\n        cout<<\"}\"<<endl;\n    }\n    else if(!strcmp(argv[1],\"decrypt\"))\n    {\n             string s,s1;\n      \n        while(getline(cin,s))\n        {\n            for(int i=0; i<s.size(); i++)\n            {\n                if(s[i]==' ')s[i]=sp;\n                else if(s[i]==sp)s[i]=' ';\n              //  if(s[i]=='m')cout<<\"fr\"<<endl;\n            }\n            int koto=9;\n            for(int i=0; i<s.size(); i++)\n            {\n                if(isalpha(s[i]))\n                {\n                    if(s[i]>='a'&&s[i]<='z')\n                    {\n                        int x=s[i]-'a';\n                        x+=koto;\n                        if(x>=26)\n                            x-=26;\n                        s[i]=(char)('a'+x);\n\n                    }\n                    else\n                    {\n                        int x=s[i]-'A';\n                        x+=koto;\n                        if(x>=26)x-=26;\n                        s[i]=(char)('A'+x);\n                    }\n                }\n            }\n          \n            cout<<s<<endl;\n           // break;\n        }\n\n\n\n        \n    }\n    else\n    {\n         int arr[300];\n        for(int i=10; i<=130; i++)arr[i]=0;\n\n        string s,s1;\n        while(getline(cin,s))\n        {\n\n\n         for(int i=0; i<s.size(); i++)\n            if(val(s[i]))arr[s[i]]++;\n        }\n\n\n\n\n\n\n        cout<<\"{\"<<endl;\n\n        vector<string> v1;\n\n        for(char i=10; i<=122; i++)\n        {\n\n            if(val(i))\n            {\n                string nw;\n                nw+=ch;\n                nw+=i;\n                nw+=ch;\n                nw+=\": \";\n                nw+=num(arr[i]);\n                v1.push_back(nw);\n\n                // cout<<ch<<i<<ch<<\": \"<<count[i]<<\",\"<<endl;\n\n            }\n        }\n\n        for(int i=0; i<v1.size()-1; i++)\n        {\n            cout<<v1[i]<<\",\"<<endl;\n        }\n        int l=v1.size();\n        cout<<v1[l-1]<<endl;\n        cout<<\"}\"<<endl;\n    }\n\n\n\n\n\n\n    //  cout<<space<<endl;\n\n\n    return 0;\n}\n\n\n\n\n"}
{"id": 2885, "language": "Java", "code": "package track;\n\npublic class App {\n\n  // Lookup tables for Roman numeral parts based on place values.\n  private static final String[] THOUSANDS_DIGITS = {\"\", \"M\", \"MM\", \"MMM\"};\n  private static final String[] HUNDREDS_DIGITS = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n  private static final String[] TENS_DIGITS = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n  private static final String[] ONES_DIGITS = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n  public static String generateRoman(int number) {\n    // Extract each place value from the input number.\n    int thousandsPart = number / 1000;\n    int hundredsPart = (number % 1000) / 100;\n    int tensPart = (number % 100) / 10;\n    int onesPart = number % 10;\n\n    // Concatenate the Roman numeral strings for each part.\n    return THOUSANDS_DIGITS[thousandsPart] +\n           HUNDREDS_DIGITS[hundredsPart] +\n           TENS_DIGITS[tensPart] +\n           ONES_DIGITS[onesPart];\n  }\n\n  public static void main(String[] args) {\n    int arabicNumber = Integer.parseInt(args[0]);\n    String finalRoman = generateRoman(arabicNumber);\n    System.out.println(finalRoman);\n  }\n}"}
{"id": 2886, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isnum(const string &s){\n    if(s.empty()) return false;\n    for(char c: s){\n        if(!isdigit(c)) return false;\n    }\n    return true;\n}\nbool with3(const string &s){\n    for (char c: s)\n        if(c=='3') return true;\n    return false;\n}\n\nint main(int argc,char *argv[]){\n    for(int i=1;i<argc;i++){\n        string arg = argv[i];\n        if(!isnum(arg)){\n            cout << \"invalid\\n\";\n            continue;\n        }\n        int n = stoi(arg);\n        if(n < 0 || n > 1000){\n            cout << \"invalid\\n\";\n            continue;\n        }\n        if(n%3==0 && with3(arg)){\n            cout << \"dumb\\n\";\n        }else if(n%3==0){\n            cout << \"idiot\\n\";\n        }else if(with3(arg)){\n            cout << \"stupid\\n\";\n        }else{\n            cout << \"smart\\n\";\n        }\n    }\n    return 0;\n}"}
{"id": 2887, "language": "Python3", "code": "import sys\n\ndef is_safe(board, row, col):\n    # Check the column\n    for r in range(row):\n        if board[r][col] == 'Q':\n            return False\n\n    # Check upper left diagonal\n    for r, c in zip(range(row, -1, -1), range(col, -1, -1)):\n        if board[r][c] == 'Q':\n            return False\n\n    # Check upper right diagonal\n    for r, c in zip(range(row, -1, -1), range(col, len(board))):\n        if board[r][c] == 'Q':\n            return False\n\n    return True\n\ndef solve_n_queens(board, row):\n    if row == len(board):\n        return True  # All queens have been placed successfully\n\n    for col in range(len(board)):\n        if is_safe(board, row, col):\n            board[row][col] = 'Q'\n            if solve_n_queens(board, row + 1):\n                return True\n            board[row][col] = '.'  # Backtrack\n\n    return False\n\ndef main(argv):\n    input_data = sys.stdin.read().strip().splitlines()\n    k = int(input_data[0])\n    placed_queens = [tuple(map(int, line.split())) for line in input_data[1:1 + k]]\n\n    # Initialize the board\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for r, c in placed_queens:\n        board[r][c] = 'Q'\n\n    # Solve the 8-Queens problem with the pre-placed queens\n    solve_n_queens(board, 0)\n\n    # Output the solution\n    for row in board:\n        print(''.join(row))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2888, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {    \n        for (int i = 0; i < args.Length; i++)\n            {\n                string output = \"\";\n               \n                int x;\n \n                bool success = Int32.TryParse(args[i], out x);\n \n                if(success)\n                {\n                    // check if the number is divisibe by 3\n                    if(x % 3 == 0)\n                    {\n                        output = \"idiot\";\n                        \n                        // Both divisible and contains 3\n                        if (args[i].Contains(\"3\"))\n                        {\n                            output = \"dumb\";\n                        }\n                    }\n\n                    // Contains 3 but not divisible by 3\n                    else if (args[i].Contains(\"3\"))\n                    {\n                        output = \"stupid\";\n                    }\n\n                    // if the number is not in the specified range\n                    else if (x < 0 || x > 1000)\n                    {\n                        output = \"invalid\";\n                    }\n\n                    else\n                    {\n                        output = \"smart\";\n                    }                    \n                }\n\n                // if the given input is not a number\n                else\n                {\n                    output = \"invalid\";\n                }\n \n                Console.WriteLine(output);\n            }\n    }\n}\n"}
{"id": 2889, "language": "Python3", "code": "import sys\n\ndef three_idiots(value):\n    if not value.isdigit():\n        return 'invalid'\n    num = int(value)\n    if not (0 <= num <= 1000):\n        return 'invalid'\n    divisible = (num % 3 == 0)\n    has_3 = '3' in str(num)\n    if divisible and has_3:\n        return 'dumb'\n    if divisible:\n        return 'idiot'\n    if has_3:\n        return 'stupid'\n    return 'smart'\n\ndef main(argv):\n    # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3054\u3068\u306b\u5224\u5b9a\u3057\u3066\u51fa\u529b\u3059\u308b\n    for v in argv:\n        print(three_idiots(v))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2890, "language": "Python3", "code": "import sys\nimport unicodedata\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  for i, v in enumerate(argv):\n    status = true\n    for c in v:\n      if unicodedata.east_asian_width(c)=='H':\n        print('invalid \\n')\n        status = false\n        break\n      \n    if status ==true:\n      if v.isnumeric() and int(v)>=0 and int(v)<=1000:\n        if int(v)%3==0 and ('3' in v):\n          print('dumb \\n')\n        elif int(v)%3==0:\n          print('idiot \\n')\n        elif '3' in v:\n          print('stupid \\n')\n        else:\n          print('smart \\n')\n\n    else:\n      print('invalid \\n')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2891, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (String str : args) {\n      String result = \"invalid\";\n      try {\n        int num = Integer.parseInt(str);\n        if (num < 0 || num > 1000) {\n          result = \"invalid\";\n        } else {\n          boolean div3 = num % 3 == 0;\n          boolean has3 = Integer.toString(num).contains(\"3\");\n          if (div3 && has3) {\n            result = \"dumb\";\n          } else if (div3) {\n            result = \"idiot\";\n          } else if (has3) {\n            result = \"stupid\";\n          } else {\n            result = \"smart\";\n          }\n        }\n      } catch (NumberFormatException e) {\n        result = \"invalid\";\n      }\n      System.out.println(result);\n    }\n  }\n}"}
{"id": 2892, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\npublic class RomanConverter\n{\n    // These are the Roman numeral value pairs, ordered from largest to smallest.\n    private static readonly List<(int value, string symbol)> RomanMap = new List<(int value, string symbol)>\n    {\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"),\n        (1, \"I\")\n    };\n\n    public static string ToRoman(int number)\n    {\n        var romanResult = new StringBuilder();\n\n        // Iterate through the Roman map from largest to smallest value.\n        foreach (var pair in RomanMap)\n        {\n            // While the number is greater than or equal to the current value, append the symbol.\n            while (number >= pair.value)\n            {\n                romanResult.Append(pair.symbol);\n                number -= pair.value;\n            }\n        }\n        return romanResult.ToString();\n    }\n\n    static public void Main(string[] args)\n    {\n        if (args.Length == 0)\n        {\n            // If no argument is provided, print usage info (though problem statement says one arg is always present).\n            Console.WriteLine(\"Usage: roman-numeralize <arabic_number>\");\n            return;\n        }\n\n        // Parse the input argument as an integer.\n        int arabicNumber = int.Parse(args[0]);\n\n        // Convert the Arabic number to a Roman numeral.\n        string romanNumeral = ToRoman(arabicNumber);\n\n        // Output the result to standard output.\n        Console.WriteLine(romanNumeral);\n    }\n}"}
{"id": 2893, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n\tstatic public void Main(string[] args)\n\t{\n\t\t//for (int i = 0; i < args.Length; i++)\n\t\t//{\n\t\t//\tstring output = String.Format(\"argv[{0}]: {1}\", i, args[i]);\n\t\t//\tConsole.WriteLine(output);\n\t\t//}\n\n\t\tfor(int i= 0; i < args.Length; i++)\n\t\t{\n\t\t\tstring param = args[i];\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"\\n\");\n\t\t\t}\n\t\t\tint num;\n\t\t\tbool isNumeric = int.TryParse(param, out num);\n\t\t\tif (isNumeric && num >= 0 && num <= 1000)\n\t\t\t{\n\t\t\t\tif (num % 3 == 0 && param.Contains(\"3\"))\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"dumb\");\n\t\t\t\t}\n\t\t\t\telse if (num % 3 == 0)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"idiot\");\n\t\t\t\t}\n\t\t\t\telse if (param.Contains(\"3\"))\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"stupid\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"smart\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"invalid\");\n\t\t\t}\n\t\t}\n\n\t}\n}\n"}
{"id": 2894, "language": "Python3", "code": "import sys\ndef function(a):\n  return all(46<ord(a)<58 for a in a) \nfor b in sys.argv[1:]:\n  a=function(b) and int(b)\n  if a and 0<=a<=1000:\n    condition1=a%3==0\n    condition2='3'in b\n    condition3=condition1 and condition2\n    if condition1:\n      print('idiot')\n    elif condition2:\n      print('stupid')\n    elif condition3:\n      print('dumb')\n    else:\n      print('smart')\n  else:\n    print('invalid')\n\n\n"}
{"id": 2895, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main (string[] args)\n    {\n      for (int i = 0; i < args.Length; i++)\n        {\n           int userNumbers;\n           if (Int32.TryParse(args[i], out userNumbers)) {\n                    if (0 <= userNumbers && userNumbers<=1000) {\n                        if (userNumbers % 3 == 0 && userNumbers.ToString().Contains(3.ToString()))\n                        {\n                            Console.WriteLine(\"dumb\");\n                        }\n                        else if (userNumbers % 3 == 0)\n                        {\n                            Console.WriteLine(\"idiot\");\n                        }\n                        else if (userNumbers.ToString().Contains(3.ToString()))\n                        {\n                            Console.WriteLine(\"stupid\");\n                        }\n                        else {\n                            Console.WriteLine(\"smart\");\n                        }\n                    }\n                    else {\n                        Console.WriteLine(\"invalid\");\n                    }\n                } else {\n                    Console.WriteLine(\"invalid\");\n                }\n\n           \n        }\n    }\n}\n"}
{"id": 2896, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_number(const char *input) {\n    while (*input) {\n        if (!isdigit(*input)) return 0;\n        input++;\n    }\n    return 1;\n}\n\nint contains_three(int value) {\n    while (value > 0) {\n        if (value % 10 == 3) return 1;\n        value /= 10;\n    }\n    return 0;\n}\n\nvoid analyze_input(const char *input) {\n    if (!is_number(input)) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    int num = atoi(input);\n    if (num < 0 || num > 1000) {\n        printf(\"invalid\\n\");\n        return;\n    }\n\n    if (num % 3 == 0 && contains_three(num)) {\n        printf(\"dumb\\n\");\n    } else if (num % 3 == 0) {\n        printf(\"idiot\\n\");\n    } else if (contains_three(num)) {\n        printf(\"stupid\\n\");\n    } else {\n        printf(\"smart\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 1; i < argc; i++) {\n        analyze_input(argv[i]);\n    }\n    return 0;\n}"}
{"id": 2897, "language": "Java", "code": "public class IdiotsSummarizer {\n  public static void main(String[] args){\n    for(String input : args){\n      try{\n        int num = Integer.parseInt(input);\n        if(num < 0 || num > 1000){\n          System.out.println(\"invalid\");\n          continue;\n        }\n        boolean divisibleBy3 = num % 3 == 0;\n        boolean hasThreeDigit = input.contains(\"3\");\n        if(divisibleBy3 && hasThreeDigit){\n          System.out.println(\"dumb\");\n        }else if(divisibleBy3){\n          System.out.println(\"idiot\");\n        }else if(hasThreeDigit){\n          System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }catch(Exception e){\n        System.out.println(\"invalid\");\n      }\n    }\n  }\n}"}
{"id": 2898, "language": "Java", "code": "package track;\nimport java.math.BigInteger;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tString str = args[0];\n\t\tfinal int n =9;\n\t\tString p=null,n1=null,n2=null;\n\n\t\tif (str.contains(\"+\")){\n\t\t\tint index = str.indexOf(\"+\");\n\t\t\tp = str.substring(index, index+1);\n\t\t\tn1 = str.substring(0,index-1);\n\t\t\tn2 = str.substring(index+2,str.length());\n\t\t}\n\n\t\tif (str.contains(\"*\")){\n\t\t\tint index = str.indexOf(\"*\");\n\t\t\tp = str.substring(index, index+1);\n\t\t\tn1 = str.substring(0,index-1);\n\t\t\tn2 = str.substring(index+2,str.length());\n\t\t}\n\t\t\n\t\tif(str.length() > 19) {\n\t\t\tfinal BigInteger num1 = new BigInteger(n1,n);\n\t\t\tfinal BigInteger num2 = new BigInteger(n2,n);\n\t\t\tBigInteger calc;\n\t\t\tif(p.equals(\"+\")) {\n\t\t\t\tcalc = num1.add(num2);\n\t\t\t}else {\n\t\t\t\tcalc = num1.multiply(num2);\n\t\t\t}\n\t\t\tfinal String ans = calc.toString(9);\n\t\t\tSystem.out.println(ans);\n\t\t}else {\n\n\t\tfinal long num1 = Long.parseLong(n1, n);\n\t\tfinal long num2 = Long.parseLong(n2, n);\n\t\tlong calc =0;\n\t\tif(p.equals(\"+\")) {\n\t\t\tcalc =num1 + num2;\n\t\t}else {\n\t\t\tcalc =num1 * num2;\n\t\t}\n\t\tfinal String ans = Long.toString(calc,n);\n\t\tSystem.out.println(ans);\n\t}\n\n\t}\n}"}
{"id": 2899, "language": "C", "code": "#include <stdio.h>\n#include<ctype.h>\nint main(int argc, char *argv[])\n{\n  int n,n1,f1=0,f2=0,r;\n  n=atoi(argv[1]);\n  n1=n;\n  for(int i=0;i<argc-1;i++)\n  {\nif(n1%3==0){\n  f1=1;\n  }\n  while(n1>0){\n    r=n1%10;\n    if(r==3)\n    {\n      f2=1;\n      break;\n    }\n    n1=n1/10;\n  }\n  if(isalpha(argv[i]))\n  {\n    printf(\"invalid\\n\");\n  }\n  if(f1==1 && f2==1){\n    printf(\"dumb\\n\");\n  }\n  else if (f1==1){\n    printf(\"idiot\\n\");\n\n  }\n  else if (f2==1)\n  {\n    printf(\"stupid\\n\");\n  }\n  else {\n    printf(\"smart\\n\");\n  }\n  }\n  return 0;\n}\n"}
{"id": 2900, "language": "Java", "code": "package track;\nimport java.util.*;\nimport java.io.*;\nimport java.util.Collections;\npublic class App {\n  public static void main(String[] args) throws Exception {\n    for (int i = 0, l = args.length; i < l; i++) {\n      \n      String cmnd=args[i];\n      BufferedReader br=new BufferedReader(new FileReader(new File(args[1])));\n      String text=\"\";\n      String line;\n          while((line=br.readLine())!=null)\n          {\n            \n            text+=line;\n          }\n      if(cmnd.contains(\"count\"))\n      {\n          HashMap<Character,Integer> hm=new HashMap<Character,Integer>();\n          for(int k=65;k<65+26;k++)\n              hm.put((char)k,0);\n          for(int k=97;k<97+26;k++)\n            hm.put((char)k,0);\n\n          hm.put(' ',0);\n\n          for(int k=0;k<text.length();k++)\n          {\n              int val=(int)text.charAt(k);\n              if(text.charAt(k)==' ' || (val>=65 && val<65+26) || (val>=97 && val<97+26) )\n              {\n                  if(hm.containsKey(text.charAt(k)))\n                  {\n                    hm.put(text.charAt(k),hm.get(text.charAt(k))+1);\n                  }\n                  else\n                    hm.put(text.charAt(k),1);\n              }\n          }\n\n          PrintWriter pr=new PrintWriter(new File(args[2]));\n          pr.println(\"{\");\n\n          Iterator it=hm.entrySet().iterator();\n          while(it.hasNext())\n          {\n              Map.Entry pair=(Map.Entry)it.next();\n              pr.print(\"\\\"\"+pair.getKey()+\"\\\":\"+pair.getValue());\n              if(it.hasNext())\n               pr.println(\",\");\n\n          }\n\n          pr.println(\"}\");\n          pr.close();\n      }\n      if(cmnd.contains(\"space\"))\n      {\n         PrintWriter pr=new PrintWriter(new File(args[2]));\n          pr.println(\"{\");\n\n          \n          HashMap<Character,Integer> hm=new HashMap<Character,Integer>();\n\n          for(int k=0;k<text.length();k++)\n          {\n              int val=(int)text.charAt(k);\n              if(text.charAt(k)==' ' || (val>=65 && val<65+26) || (val>=97 && val<97+26) )\n              {\n                  Character ch=text.charAt(k);\n                  \n                  if(Character.isUpperCase(ch) && k>=1)\n                  {\n                      Character prev=text.charAt(k-1);\n                      \n                      int prevVal=(int)prev;\n                      if((prevVal>=65 && prevVal<65+26) || (prevVal>=97 && prevVal<97+26) )\n                          \n                      {\n                        if(hm.containsKey(prev))\n                            hm.put(prev, hm.get(prev)+1);\n                        else\n                            hm.put(prev,1);\n                      }\n                  }\n              }\n\n          }   \n\n          \n          Iterator it=hm.entrySet().iterator();\n          \n          int max=-1;\n          Character out=' ';\n          \n          while(it.hasNext())\n          {\n              Map.Entry pair=(Map.Entry)it.next();\n              if((int)pair.getValue()>max)\n              {\n                  max=(int)pair.getValue();\n                  out=(char)pair.getKey();\n              }\n          }\n          \n\n          pr.println(\"\\\"char\\\"\"+\":\\\"\"+out+\"\\\"\");\n          pr.println(\"}\");\n          pr.close();\n\n      }\n\n    }\n  }\n}\n"}
{"id": 2901, "language": "PHP", "code": "<?php namespace Track;\n\nfunction checkNumber($num) {\n  $str = \"\";\n  if (preg_match(\"/^[0-9]+$/\", $num) == 1) {\n    if ($num % 3 == 0 && strpos(strval($num),'3')!==false)\n      $str = 'dumb';\n    else if ($num % 3 == 0)\n      $str = 'idiot';\n    else if (strpos(strval($num),'3')!==false)\n      $str = 'stupid';\n    else\n      $str = 'smart';\n  } else {\n    $str = 'invalid';\n  }\n  return $str;\n}\n\nfunction main ($argc, $argv) {\n  foreach ($argv as $index=>$value) {\n    print(checkNumber($value).\"\\n\");\n  }\n}\n\n\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 2902, "language": "Java", "code": "package track;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        String dataPath = args[0];\n        List<MatchRecord> allMatches = new ArrayList<>();\n\n        try {\n            String fileData = readInputFile(dataPath);\n            allMatches = parseMatchData(fileData);\n        } catch (IOException e) {\n            System.err.println(\"Failed to read file: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> behaviorPattern = new HashMap<>();\n        \n        // Use a fixed-size array for last 3 robot hands, and int for last opponent hand\n        int[] lastThreeRobotHands = new int[3]; // [R-3, R-2, R-1]\n        lastThreeRobotHands[0] = 0; // Initial R-3\n        lastThreeRobotHands[1] = 1; // Initial R-2\n        lastThreeRobotHands[2] = 2; // Initial R-1\n        \n        int lastOpponentHand = -1; // Placeholder for initial opponent hand, irrelevant for first 3 moves\n\n        // Simulate history to learn robot's pattern\n        for (int i = 0; i < allMatches.size(); i++) {\n            MatchRecord currentMatch = allMatches.get(i);\n            int robotPlayed = currentMatch.robotPlay;\n            int youPlayed = currentMatch.yourPlay;\n\n            if (i >= 3) {\n                // If this is the 4th game or later, apply robot's logic\n                String state = lastThreeRobotHands[0] + \"_\" + \n                               lastThreeRobotHands[1] + \"_\" + \n                               lastThreeRobotHands[2] + \"_\" + \n                               lastOpponentHand;\n                \n                int nextActionForState = (robotPlayed + 1) % 3;\n                behaviorPattern.put(state, nextActionForState);\n            }\n            \n            // Update historical hands for the next iteration\n            lastThreeRobotHands[0] = lastThreeRobotHands[1];\n            lastThreeRobotHands[1] = lastThreeRobotHands[2];\n            lastThreeRobotHands[2] = robotPlayed;\n            lastOpponentHand = youPlayed;\n        }\n\n        // Determine the robot's next move based on learned patterns\n        String finalStateKey = lastThreeRobotHands[0] + \"_\" + \n                               lastThreeRobotHands[1] + \"_\" + \n                               lastThreeRobotHands[2] + \"_\" + \n                               lastOpponentHand;\n\n        int robotPredictedMove = behaviorPattern.getOrDefault(finalStateKey, 0); // Default to Rock\n\n        // Calculate the winning hand\n        int winningHand = calculateWinningHand(robotPredictedMove);\n        System.out.println(winningHand);\n    }\n\n    private static String readInputFile(String path) throws IOException {\n        StringBuilder fileContent = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                fileContent.append(line.trim());\n            }\n        }\n        return fileContent.toString();\n    }\n\n    private static List<MatchRecord> parseMatchData(String jsonData) {\n        List<MatchRecord> records = new ArrayList<>();\n        String content = jsonData.substring(1, jsonData.length() - 1); // Remove outer []\n\n        String[] parts = content.split(\"\\\\},\\\\{\"); // Split by \"},{\"\n\n        for (String part : parts) {\n            String cleanup = part.replace(\"\\\"\", \"\").replace(\" \", \"\"); // Remove quotes and spaces\n            String[] kvPairs = cleanup.split(\",\"); // robot:0,you:1\n\n            int robotVal = Integer.parseInt(kvPairs[0].split(\":\")[1]);\n            int youVal = Integer.parseInt(kvPairs[1].split(\":\")[1]);\n            records.add(new MatchRecord(robotVal, youVal));\n        }\n        return records;\n    }\n\n    private static int calculateWinningHand(int opponentMove) {\n        Map<Integer, Integer> winnerMap = new HashMap<>();\n        winnerMap.put(0, 2); // Rock (0) -> Paper (2)\n        winnerMap.put(1, 0); // Scissors (1) -> Rock (0)\n        winnerMap.put(2, 1); // Paper (2) -> Scissors (1)\n        return winnerMap.get(opponentMove);\n    }\n}\n\nclass MatchRecord {\n    int robotPlay;\n    int yourPlay;\n\n    MatchRecord(int robotPlay, int yourPlay) {\n        this.robotPlay = robotPlay;\n        this.yourPlay = yourPlay;\n    }\n}"}
{"id": 2903, "language": "C#", "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\n\npublic class GameRecord\n{\n    // Property names match JSON keys automatically by default in System.Text.Json\n    public int Robot { get; set; }\n    public int You { get; set; }\n}\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        string filePath = args[0];\n        string jsonString = File.ReadAllText(filePath);\n        List<GameRecord> gameRecords = JsonSerializer.Deserialize<List<GameRecord>>(jsonString);\n\n        // Robot's initial three hands are Rock(0), Scissors(1), Paper(2) in that order.\n        // This list stores them from oldest to most recent.\n        // So, robotHistory[0] is the oldest, robotHistory[2] is the most recent.\n        List<int> robotHistory = new List<int> { 0, 1, 2 };\n\n        // The opponent's last hand before the first recorded game is unknown.\n        // We use -1 as a sentinel value, as 0, 1, 2 are valid hands.\n        int lastOpponentHand = -1;\n\n        // This dictionary stores the PREDICTED NEXT HAND for a given robot state.\n        // The key represents the four parameters: (RobotRecentHand, RobotMiddleHand, RobotOldestHand, OpponentLastHand).\n        // The value is the hand (0, 1, or 2) the robot will play the *next* time this specific state occurs.\n        Dictionary<Tuple<int, int, int, int>, int> robotStatePredictionMap = new Dictionary<Tuple<int, int, int, int>, int>();\n\n        // Process each game record to build the robot's state-prediction map.\n        foreach (var record in gameRecords)\n        {\n            // Form the state key using the robot's history *before* this game occurred.\n            Tuple<int, int, int, int> currentStateKey = Tuple.Create(\n                robotHistory[2],    // Most recent robot hand\n                robotHistory[1],    // Middle robot hand\n                robotHistory[0],    // Oldest robot hand\n                lastOpponentHand    // Opponent's hand from the game immediately preceding this one\n            );\n\n            // According to the \"cycling\" rule: if the robot played 'record.Robot' for this 'currentStateKey',\n            // then the *next* time this same 'currentStateKey' is encountered, it will play (record.Robot + 1) % 3.\n            robotStatePredictionMap[currentStateKey] = (record.Robot + 1) % 3;\n\n            // Update robot's historical hands for the next iteration:\n            // Remove the oldest hand and add the hand the robot played in the current game.\n            robotHistory.RemoveAt(0);\n            robotHistory.Add(record.Robot);\n\n            // Update the last opponent hand to the opponent's hand from the current game.\n            lastOpponentHand = record.You;\n        }\n\n        // After processing all historical records, determine the state for the *next* game.\n        Tuple<int, int, int, int> nextGameInputStateKey = Tuple.Create(\n            robotHistory[2],    // Current most recent robot hand\n            robotHistory[1],    // Current middle robot hand\n            robotHistory[0],    // Current oldest robot hand\n            lastOpponentHand    // Last opponent hand from the final recorded game\n        );\n\n        // Predict the robot's hand for the upcoming game.\n        int predictedRobotHand;\n        if (robotStatePredictionMap.ContainsKey(nextGameInputStateKey))\n        {\n            // If this state has been encountered before, use the stored prediction.\n            predictedRobotHand = robotStatePredictionMap[nextGameInputStateKey];\n        }\n        else\n        {\n            // If this is a new state (never seen before in the records),\n            // the robot defaults to playing Rock (0) for its first encounter.\n            predictedRobotHand = 0;\n        }\n\n        // Calculate the hand that wins against the robot's predicted hand.\n        // Rock (0) loses to Paper (2)\n        // Scissors (1) loses to Rock (0)\n        // Paper (2) loses to Scissors (1)\n        // This winning pattern can be calculated as (robotHand + 2) % 3.\n        int myWinningHand = (predictedRobotHand + 2) % 3;\n\n        Console.WriteLine(myWinningHand);\n    }\n}"}
{"id": 2904, "language": "C", "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid print_final_board(char board[8][8]) {\n    for(int i=0; i<8; ++i) {\n        for (int j = 0; j < 8; ++j) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\n// \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u4f7f\u308f\u306a\u3044\nint place_and_solve(int r, char board[8][8], int fixed_mask) {\n    if (r == 8) {\n        print_final_board(board);\n        return 1;\n    }\n\n    if ((fixed_mask >> r) & 1) { // if row r is fixed\n        return place_and_solve(r + 1, board, fixed_mask);\n    }\n    \n    for (int c = 0; c < 8; ++c) {\n        int conflict = 0;\n        for (int i = 0; i < 8; ++i) {\n            for (int j = 0; j < 8; ++j) {\n                if (board[i][j] == 'Q') {\n                    if (i == r || j == c || abs(i - r) == abs(j - c)) {\n                        conflict = 1;\n                        break;\n                    }\n                }\n            }\n            if(conflict) break;\n        }\n\n        if (!conflict) {\n            board[r][c] = 'Q';\n            if (place_and_solve(r + 1, board, fixed_mask)) return 1;\n            board[r][c] = '.'; // backtrack\n        }\n    }\n    return 0;\n}\n\nint main(int argc, char *argv[]) {\n    char board[8][8];\n    int fixed_mask = 0;\n    memset(board, '.', sizeof(board));\n\n    int k;\n    scanf(\"%d\", &k);\n    for (int i = 0; i < k; ++i) {\n        int r, c;\n        scanf(\"%d %d\", &r, &c);\n        board[r][c] = 'Q';\n        fixed_mask |= (1 << r);\n    }\n\n    place_and_solve(0, board, fixed_mask);\n    return 0;\n}"}
{"id": 2905, "language": "C#", "code": "using System;\n\npublic class MainApp\n{\n    static public void Main(string[] args)\n    {\n        // \u97f3\u697d\u306e\u30ea\u30ba\u30e0\u306b\u5408\u308f\u305b\u3066\u592a\u9f13\u3092\u53e9\u304d\u307e\u3059\u3002\n        \n        if (args.Length == 0 || !int.TryParse(args[0], out int count) || count < 0 || count > 10000)\n        {\n            Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n            return;\n        }\n\n        Random rnd = new Random();\n        string rhythm = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n        string output = \"\";\n        bool found = false;\n\n        for (int i = 0; i < count; i++)\n        {\n            string sound = rnd.Next(2) == 0 ? \"\u30c9\" : \"\u30ab\";\n            Console.WriteLine(sound);\n            output += sound;\n\n            if (output.EndsWith(rhythm))\n            {\n                Console.WriteLine(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\");\n                found = true;\n                break;\n            }\n        }\n\n        if (!found)\n        {\n            Console.WriteLine(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\");\n        }\n    }\n}"}
{"id": 2906, "language": "Java", "code": "package track;\n\npublic class ProcessArgs {\n    public static void main(String[] args) {\n        // Processing command line args for the 3 Idiots Algorithm\n\n        for (String arg : args) {\n            if (isInteger(arg)) {\n                int num = Integer.parseInt(arg);\n                if (num < 0 || num > 1000) {\n                    System.out.println(\"invalid\");\n                } else {\n                    classifyNumber(num);\n                }\n            } else {\n                System.out.println(\"invalid\");\n            }\n        }\n    }\n\n    private static boolean isInteger(String str) {\n        return str.matches(\"\\\\d+\");\n    }\n\n    private static void classifyNumber(int number) {\n        boolean divisibleBy3 = number % 3 == 0;\n        boolean containsThree = String.valueOf(number).contains(\"3\");\n\n        if (divisibleBy3 && containsThree) {\n            System.out.println(\"dumb\");\n        } else if (divisibleBy3) {\n            System.out.println(\"idiot\");\n        } else if (containsThree) {\n            System.out.println(\"stupid\");\n        } else {\n            System.out.println(\"smart\");\n        }\n    }\n}"}
{"id": 2907, "language": "Java", "code": "package track;\n\npublic class App {\n  public static void main(String[] args) {\n    for (int i = 0, l = args.length; i < l; i++) {\n      String output1 = String.format(\"argv[%s]: %s\", i, args[i]);\n      boolean isdivide=false;\n      boolean isInclude=false;\n      String output=\"invalid\";\n      if(args[i].matches(\"\\\\d+\"))\n      {\n        int number=Integer.parseInt(args[i]);\n        if(number >= 0 && number <=1000)\n        {\n          isdivide=(number%3==0)?true:false;\n          isInclude=args[i].contains(\"3\");\n          if(isdivide)\n          {\n              if(isInclude)\n                output=\"dumb\";\n              else\n                output=\"idiot\";\n          }\n          else\n          {\n              if(isInclude)\n                output=\"stupid\";\n              else\n                output=\"smart\";\n          }\n        }\n      }\n      System.out.println(output);\n    }\n  }\n}\n"}
{"id": 2908, "language": "Python3", "code": "import sys\nimport random\n\ndef play_taiko(max_count):\n    pattern = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\"\n    played = \"\"\n    for _ in range(max_count):\n        note = random.choice([\"\u30c9\", \"\u30ab\"])\n        played += note\n        print(note)\n        if played.endswith(pattern):\n            print(\"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\")\n            return\n    \n    print(\"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\")\n\ndef main(arguments):\n    if len(arguments) != 1 or not arguments[0].isdigit():\n        print(\"Usage: script INTEGER\")\n        return\n    \n    max_count = int(arguments[0])\n    if 0 <= max_count <= 10000:\n        play_taiko(max_count)\n    else:\n        print(\"Please provide a number between 0 and 10000.\")\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])"}
{"id": 2909, "language": "Python3", "code": "import sys\nimport json\n\n#\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u3001\u30ad\u30fc\u304c\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u30b9\u30da\u30fc\u30b9\u3001\u5024\u304c\u51fa\u73fe\u56de\u6570\u306e\u8f9e\u66f8\u578b\u3092\u8fd4\u3059\ndef count(contents):\n  dict = {}\n  dict[\" \"] = 0\n  for i in range(26):\n    dict[chr(ord('A') + i)] = 0\n  for i in range(26):\n    dict[chr(ord('a') + i)] = 0\n  for c in contents:\n    if(c in dict):\n      dict[c]=dict[c]+1\n\n  return dict\n\n#\u6697\u53f7\u306e\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u3001\u30ad\u30fc\u306b\"char\"\u3001\u5024\u306b\u5fa9\u53f7\u5316\u3057\u305f\u6642\u306b\u30b9\u30da\u30fc\u30b9\u306b\u306a\u308b\u3068\u4e88\u6e2c\u3055\u308c\u308b\u6587\u5b57\u3092\u6301\u3064\u8f9e\u66f8\u578b\u3092\u8fd4\u3059\ndef space(contents):\n  min = 100.0\n  target = \"\"\n  #\u3042\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u5206\u5272\u3055\u308c\u308b\u6587\u5b57\u5217\u306e\u5e73\u5747\u9577\u304c4.5\u306b\u8fd1\u3044\u3082\u306e\u3092\u63a2\u3059\n  for i in range(26):\n    split_list = contents.lower().split(chr(ord('a') + i))\n    len_sum = 0.0\n    counter = 0.0\n    for c in split_list:\n      counter += 1\n      len_sum += len(c)\n    if(abs(4.5-len_sum/counter)<abs(4.5-min)):\n      if(chr(ord('a') + i) != contents.lower()[0]):#\u6587\u5b57\u5217\u306e\u982d\u306b\u30b9\u30da\u30fc\u30b9\u306f\u3053\u306a\u3044\n        min = len_sum/counter\n        target = chr(ord('a') + i)\n\n  return {\"char\":target}\n\n#\u6697\u53f7\u306e\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u305d\u308c\u3092\u5fa9\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\ndef decrypt(contents):\n  #\u30b9\u30da\u30fc\u30b9\u306b\u306a\u308b\u3082\u306e\u3092\u4ea4\u63db\u3059\u308b\n  sp = space(contents)\n  replace = contents.split(sp[\"char\"])\n  after_replace = \"\"\n  for index, ele in enumerate(replace):\n    ele = ele.replace(\" \",sp[\"char\"])\n    if(index==0):\n      after_replace += ele\n    else:\n      after_replace = after_replace + \" \" + ele\n  \n  #\u30b9\u30da\u30fc\u30b9\u4ee5\u5916\u3067\u4e00\u756a\u591a\u3044\u5024\u3092e\u3068\u3057\u3066\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u305a\u3089\u3057\u3001\u5fa9\u53f7\u5316\u3059\u308b\n  nospace_contents = after_replace.replace(\" \",\"\")\n  num = count(nospace_contents)\n  max_key = max(num, key=num.get)\n  diff = ord(max_key) - ord('e')\n  result = \"\"\n  for c in after_replace:\n      if 'A' <= c <= 'Z':\n          result += chr((ord(c) - ord('A') - diff) % 26 + ord('A'))\n      elif 'a' <= c <= 'z':\n          result += chr((ord(c) - ord('a') - diff) % 26 + ord('a'))\n      else:\n          result += c\n  return result\n\ndef main(argv):\n  with open(argv[1]) as f:\n    contents = f.read()\n  if(argv[0]==\"count\"):\n    dict = count(contents)\n  elif(argv[0]==\"space\"):\n    dict = space(contents)\n  elif(argv[0]==\"decrypt\"):\n    original = decrypt(contents)\n\n  with open(argv[2], mode='w') as f2:\n    if(argv[0]==\"count\" or argv[0]==\"space\"):\n      f2.write(json.dumps(dict))\n    elif(argv[0]==\"decrypt\"):\n      f2.write(original)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2910, "language": "Java", "code": "package track;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n  public static boolean isConsistentOf(int[] q, int n) {\n\n       for (int i = 0; i < n; i++) {\n           if (q[i] == q[n]) return false;\n           if ((q[i] - q[n]) == (n - i)) return false;\n           if ((q[n] - q[i]) == (n - i)) return false;\n       }\n       return true;\n   }\n\n   public static String[][] printQueensPaths(int[] q,String[][] x) {\n       String[][] board = new String[8][8];\n\n       int n = q.length;\n       for (int i = 0; i < n; i++) {\n           for (int j = 0; j < n; j++) {\n               if (q[i] == j) board[i][j] = \"Q\";\n               else board[i][j] = \".\";\n           }\n\n       }\n\n       for (int i = 0; i < n; i++) {\n           for (int j = 0; j < n; j++) {\n               if (x[i][j]==\"Q\") {\n                   if (x[i][j] != board[i][j]) {\n                       return null;\n                   }\n               }\n\n           }\n\n       }\n       return board;\n\n   }\n\n   public static void enumerate(int x,String[][] y) {\n       int[] b = new int[x];\n       enumerate(b, 0,y);\n   }\n\n   public static void enumerate(int[] q, int k,String[][] y) {\n       int n = q.length;\n       if (k == n) {\n           if (printQueensPaths(q,y) != null) {\n\n               String[][] paths=printQueensPaths(q,y);\n               for (int i = 0; i < 8; i++) {\n                   for (int j = 0; j < 8; j++) {\n\n                       System.out.print(paths[i][j]);\n                   }\n                   System.out.println();\n               }\n               System.out.println();\n\n           }\n       } else {\n           for (int i = 0; i < n; i++) {\n               q[k] = i;\n               if (isConsistentOf(q, k)) enumerate(q, k + 1,y);\n           }\n       }\n   }\n\n\n   public static void main(String[] args) {\n       //int n = Integer.parseInt(args[0]);\n\n       List<Integer> lst=new ArrayList();\n       String[][] y=new String[8][8];\n       try {\n           File file = new File(args[0]);\n           FileReader filereader = new FileReader(file);\n           BufferedReader bufferedReader = new BufferedReader(filereader);\n\n           String data;\nint i=0;\n           while ((data = bufferedReader.readLine()) != null) {\n               if (i > 0){\n                   y[Integer.parseInt(data.split(\" \")[0])][Integer.parseInt(data.split(\" \")[1])] = \"Q\";\n           }\n               ++i;\n           }\n\n           filereader.close();\n       } catch (IOException e) {\n           e.printStackTrace();\n       }\n\n\n\n\n       enumerate(8,y);\n   }\n\n}\n"}
{"id": 2911, "language": "Java", "code": "package track;\n\nimport java.lang.*;\nimport java.util.*;\nimport java.io.*;\n\npublic class App\n{\n  public static void main(String[] args)\n  {\n    ArrayList<Integer> robot = new ArrayList<Integer>();\n    ArrayList<Integer> you = new ArrayList<Integer>();\n    ArrayList<Parameter> params = new ArrayList<Parameter>();\n    \n    String input = convert(args[0]);\n    String[] splits = input.split(\",\");\n    for(int i=0;i<splits.length;i++)\n    {\n      if(splits[i].contains(\"robot\"))\n      {\n        robot.add(Integer.parseInt(splits[i].split(\":\")[1].trim()));\n      }\n      if(splits[i].contains(\"you\"))\n      {\n        you.add(Integer.parseInt(splits[i].split(\":\")[1].substring(0,1)));\n      }\n      }\n      \n      int robotSize = robot.size();\n      int youSize = you.size();\n      \n      Parameter decider = new Parameter(robot.get(robotSize-1), robot.get(robotSize-2),robot.get(robotSize-3),you.get(youSize-1));\n      \n      for(int i=0;i<=robotSize-4;i++)\n      {\n        Parameter temp =new Parameter(robot.get(i+2),robot.get(i+1),robot.get(i),you.get(i+2));\n        params.add(temp);\n      }\n      \n      boolean repeatFlag=false;\n      int lastPlayed = 0;\n      \n      for(int i=0;i<params.size()-1;i++)\n      {\n        if(params.get(i).equals(decider))\n        {\n          repeatFlag = true;\n          if(!(i+1>params.size()))\n        {\n          lastPlayed = params.get(i+1).getLast();\n          }\n        }\n      }\n      \n      if(!repeatFlag)\n      {\n        System.out.println(2);\n      }\n      System.out.println(lastPlayed);\n      }\n      public static String convert(String filename)\n      {\n        StringBuffer output = new StringBuffer();\n        try\n        {\n          String line;\n          Scanner sc = new Scanner(new File(filename));\n          while(sc.hasNextLine())\n          {\n            output.append(sc.nextLine());\n          }\n          }\n          catch(IOException exp)\n          {\n            exp.printStackTrace();\n          }\n          return output.toString();\n\n        }\n      }\n\n      class Parameter\n      {\n        int last;\n        int last1;\n        int last2;\n        int opp;\n        Parameter(int x, int y, int z, int a)\n        {\n          this.last = x;\n          this.last1 = y;\n          this.last2 = z;\n          this.opp = a;\n        }\n        public boolean equals(Parameter param)\n        {\n          if(param.last == this.last && param.last1 == this.last1 && param.last2 ==this.last2 && param.opp == this.opp)\n          {\n            return true;\n          }\n          return false;\n        }\n        public int getLast()\n        {\n          return last;\n        }\n      }\n\n    "}
{"id": 2912, "language": "Python3", "code": "import sys\n\ndef main(argv):\n\n  try:\n    f = 1\n    if(f==1):\n      for i in range(len(argv)):\n        if(int(argv[i])%3==0) and (\"3\" in argv[i]):\n          print(\"dumb\")\n        elif(int(argv[i])%3==0):\n          print(\"idiot\")\n        elif(\"3\" in argv[i]):\n          print(\"stupid\")\n        else:\n          f=0\n          print(\"smart\")\n    elif(f==0):\n      print('invalid')    \n  except:\n    print('invalid')    \n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2913, "language": "C", "code": "#include <stdio.h>\n#include<stdlib.h>\nint three(int no){\n  int remb;\n  while(no){\n    remb=no%10;\n    if(remb==3){\n      return 1;\n    }\n    no=no/10;\n  }\n  return 0;\n}\nint main(int argc, char *argv[])\n{\n  for (int i = 1; i < argc; i++) {\n\n    if(atoi(argv[i])==0){\n      printf(\"invalid\\n\");\n    }\n    else{\n      if(atoi(argv[i])%3==0 && three(atoi(argv[i]))){\n        printf(\"dumb\\n\");\n      }\n      else if(atoi(argv[i])%3==0){\n        printf(\"idiot\\n\");\n      }\n      else if(three(atoi(argv[i]))){\n        printf(\"stupid\\n\");\n      }\n      else{\n        printf(\"smart\\n\");\n      }\n    }\n  } \n    return 0;\n}"}
{"id": 2914, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction is_halfwidth_integer($str) {\n  return preg_match('/^\\d+$/', $str);\n}\n\nfunction main($argc, $argv) {\n  foreach ($argv as $arg) {\n    if (!is_halfwidth_integer($arg)) {\n      echo \"invalid\\n\";\n      continue;\n    }\n    $num = intval($arg);\n    if ($num < 0 || $num > 1000) {\n      echo \"invalid\\n\";\n      continue;\n    }\n    $div3 = ($num % 3 === 0);\n    $has3 = strpos($arg, '3') !== false;\n    if ($div3 && $has3) {\n      echo \"dumb\\n\";\n    } elseif ($div3) {\n      echo \"idiot\\n\";\n    } elseif ($has3) {\n      echo \"stupid\\n\";\n    } else {\n      echo \"smart\\n\";\n    }\n  }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2915, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <random>\nusing namespace std;\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n        return 0;\n    }\n    int lim = atoi(argv[1]);\n    if (lim <= 0) {\n        cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n        return 0;\n    }\n    const string WIN = \"\u30c9\u30ab\u30c9\u30c9\u30ab\u30c9\u30ab\";\n    string cur;\n    random_device rd;\n    mt19937 mt(rd());\n    for (int i=0; i<lim; ++i) {\n        bool choose = mt() & 1;\n        string out = choose ? \"\u30ab\" : \"\u30c9\";\n        cout << out << endl;\n        cur += out;\n        if (cur.size() > 7) cur.erase(0,1);\n        if (cur.size() == 7 && cur == WIN) {\n            cout << \"\u30c9\u30f3\u266a\u30c9\u30f3\u266a\" << endl;\n            return 0;\n        }\n    }\n    cout << \"\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\" << endl;\n    return 0;\n}"}
{"id": 2916, "language": "Java", "code": "import java.util.Scanner;\n\npublic class SolveEightQueens {\n    static char[][] board = new char[8][8];\n    static boolean[] cols = new boolean[8];\n    static boolean[] diag1 = new boolean[15];\n    static boolean[] diag2 = new boolean[15];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numQueens = scanner.nextInt();\n        for (int i = 0; i < numQueens; i++) {\n            int row = scanner.nextInt();\n            int col = scanner.nextInt();\n            board[row][col] = 'Q';\n            cols[col] = true;\n            diag1[row + col] = true;\n            diag2[row - col + 7] = true;\n        }\n        placeQueens(0);\n        display();\n    }\n\n    private static boolean placeQueens(int row) {\n        if (row == 8) return true;\n\n        for (int j = 0; j < 8; j++) {\n            if (!cols[j] && !diag1[row + j] && !diag2[row - j + 7]) {\n                board[row][j] = 'Q';\n                cols[j] = true;\n                diag1[row + j] = true;\n                diag2[row - j + 7] = true;\n\n                if (placeQueens(row + 1)) return true;\n\n                // Backtrack\n                board[row][j] = '.';\n                cols[j] = false;\n                diag1[row + j] = false;\n                diag2[row - j + 7] = false;\n            }\n        }\n        return false;\n    }\n\n    private static void display() {\n        for (char[] r : board) {\n            for (char cell : r) {\n                System.out.print(cell == 0 ? '.' : cell);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 2917, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0, l = args.length; i < l; i++) {\n         //String output = String.format(\"argv[%s]: %s\", i, args[i]);\n         //System.out.println(output);\n\n      String numberStr = args[i];\n\n      int number = 0;\n      boolean isInvalid = false;\n      boolean has3inNumber = false;\n\n      for (int j = 0; j< numberStr.length(); j++){\n        char digit = numberStr.charAt(j);\n\n        if(48 <= digit && digit <= 57){\n          number = number * 10 + (digit - 48);\n          if(digit == 51){\n            has3inNumber = true;\n          }\n        }else{\n          System.out.println(\"invalid\");\n          isInvalid = true;\n          break;\n        }\n      }\n\n      if(isInvalid){\n        continue;\n      }\n\n      if(number < 0 || number > 1000){\n        System.out.println(\"Invalid\");\n      }\n\n      if(number % 3 == 0){\n        if(has3inNumber){\n          System.out.println(\"dumb\");\n        }else{\n          System.out.println(\"idiot\");\n        }\n      }else{\n        if(has3inNumber){\n          System.out.println(\"stupid\");\n        }else{\n          System.out.println(\"smart\");\n        }\n      }\n\n      }\n   }\n}\n"}
{"id": 2918, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n  // start from 1 to ignore script name; argv[0] will be a name of processing file.\n  int a[10000],i,flag=0,size=0,digit=0;\n  for (int i = 1; i < argc; i++) {\n    a[i] = atoi(argv[i]);\n    size = i;\n  }\n  for(i=1;i<=size;i++)\n  {\n    if(isdigit(a[i])==0 && a[i]>0)\n    {\n      digit=a[i];\n      if(digit%3==0)\n      {\n        while(digit>0)\n        {\n          if(digit%10==3)\n          {\n            printf(\"dumb\\n\");\n            flag=1;\n            break;\n          }\n          digit=digit/10;\n        }\n        if(flag==0)\n        {\n          printf(\"idiot\\n\");\n        }\n        else\n        {\n          flag=0;\n        }\n      }\n      else\n      {\n       while(a[i]>0)\n       {\n         if(a[i]%10==3)\n         {\n           printf(\"stupid\\n\");\n           flag=1;\n           break;\n         }\n         a[i]=a[i]/10;\n       }\n       if(flag==0)\n       {\n         printf(\"smart\\n\");\n       }\n       else\n       {\n        flag=0;\n       }\n      }\n    }\n    else{\n      printf(\"invalid\\n\");\n    }\n  }\n\n  \n  return 0;\n}\n"}
{"id": 2919, "language": "Java", "code": "package track;\n\npublic class App {\n\tpublic static void main(String[] args) {\n      \n    for (int i = 0, l = args.length; i < l; i++) {\n\n        int intNumberX = 0; \n        boolean numericChecker = true;\n          try  \n            {  \n              intNumberX = Integer.parseInt( args[i]);  \n            }  \n          catch(NumberFormatException e)  \n            {  \n                numericChecker = false;\n            } \n            if (numericChecker)\n            { \n                // If number is integer numericChecker = true\n                threeIdiotCheckFunc(intNumberX);\n\n            } \n            else {\n                System.out.println(\"invalid\");            \n            }\n\n\t\t}\n\n\t}\n\n\n    public static int ckeckNumberThreeExists(int num){\n       String x = Integer.toString(num);\n       \n       for(int i = 0 ; i < x.length(); i++) {\n           if (x.charAt(i) == '3') {\n               return 1;\n           }\n       }\n\n       return 0;\n    }\n\n\n   public static void threeIdiotCheckFunc(int x){\n       if( 0 <= x  && x <= 1000){\n            if(x%3 == 0 && ckeckNumberThreeExists(x) == 1 ){\n              System.out.println(\"dumb\");\n            }\n            else if(x%3 != 0 && ckeckNumberThreeExists(x) == 1 ){\n              System.out.println(\"stupid\");\n            }\n            else if(x%3 == 0 && ckeckNumberThreeExists(x) != 1 ){\n              System.out.println(\"idiot\");\n            }\n            else{\n              System.out.println(\"smart\");  \n            }\n        }\n        else{\n            System.out.println(\"invalid\");\n        }\n   }\n\n}\n"}
{"id": 2920, "language": "Python3", "code": "import sys\nimport json\nfrom collections import Counter\n\n\n\ndef main(argv):\n    command = argv[0]\n\n    # common processing\n    # count characters in text file\n    with open(argv[1], 'r') as fp:\n        counter = Counter()\n        space_counter = 0\n        for line in fp:\n            counter.update(line)\n            space_counter += line.count(' ')\n\n        char_counter = {' ': space_counter}\n        for code in range(ord('A'), ord('Z') + 1):\n            char_counter[chr(code)] = counter[chr(code)]\n        for code in range(ord('a'), ord('z') + 1):\n            char_counter[chr(code)] = counter[chr(code)]\n\n    if command == 'count':\n        with open(argv[2], 'w') as fp:\n            json.dump(char_counter, fp)\n\n    elif command == 'space':\n        # get highest count char\n        most_char = Counter(char_counter).most_common()[0][0]\n\n        with open(argv[2], 'w') as fp:\n            json.dump({'char': most_char}, fp)\n\n    elif command == 'decrypt':\n        most_char = Counter(char_counter).most_common()[0][0]  # change to space\n        second_char = Counter(char_counter).most_common()[1][0]  # change to `e`\n\n        # detect ROT\n        if 'A' <= second_char <= 'Z':\n            key = ord(second_char) - ord('E')\n        elif 'a' <= second_char <= 'z':\n            key = ord(second_char) - ord('e')\n\n        with open(argv[1], 'r') as input_fp:\n            output_fp = open(argv[2], 'w')\n            for line in input_fp:\n                line = line.replace(' ', '???')  # replace from space to tmp string\n                line = line.replace(most_char, ' ')\n                line = decrypt(line, 26 - key)\n                line = line.replace('???', second_char)\n\n                output_fp.write(line)\n\n\ndef decrypt(text: str, key: int) -> str:\n    plaintext = \"\"\n\n    for ch in list(text):\n        if 'A' <= ch <= 'Z':\n            plaintext += chr((ord(ch) - ord('A') + key) % 26 + ord('A'))\n        elif 'a' <= ch <= 'z':\n            plaintext += chr((ord(ch) - ord('a') + key) % 26 + ord('a'))\n        else:\n            plaintext += ch\n\n    return plaintext\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"id": 2921, "language": "PHP", "code": "<?php namespace Track;\n\nfunction main ($argc, $argv) {\nforeach($argv as $value)\n{\n  if(is_numeric($value)){  \n  if( (divisible_by_three($value) == 'idiot') && !(includes_three($value) == 'stupid')  ){\n    echo 'idiot';\n    echo \"\\n\";\n  }\n  else if( (includes_three($value) == 'stupid') && !(divisible_by_three($value) == 'idiot') ){\n    echo 'stupid'; \n    echo \"\\n\"; \n  }\n  else if( (includes_three($value) == 'stupid') && (divisible_by_three($value) == 'idiot')  ){\n    echo 'dumb'; \n    echo \"\\n\"; \n  }else{\n    echo 'smart';\n    echo \"\\n\";\n  }  \n  }\n  else{\n    echo 'invalid';\n    echo \"\\n\";\n  }\n}\n}\n\nfunction divisible_by_three($number){\n\tif($number % 3 == 0) {\n        return \"idiot\";\n    }else{\n        //return false;\n    }\n}\n\nfunction includes_three($number){    \n    if (strpos($number, '3') !== false) {\n        return \"stupid\";\n    }    \n}\n\nmain($argc - 1, array_slice($argv, 1));\n"}
{"id": 2922, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\nfunction main ($paramCount, $params) {\n  // Get the path to the JSON input file from the command line arguments.\n  $filePath = $params[0];\n\n  // Read the JSON content from the file.\n  $jsonData = file_get_contents($filePath);\n  // Decode the JSON string into a PHP associative array.\n  $gameRecords = json_decode($jsonData, true);\n\n  // Initialize the robot's internal state.\n  // robotHistoryWindow stores the robot's last three played hands.\n  // It's initialized with the robot's fixed starting sequence.\n  $robotHistoryWindow = [0, 1, 2]; // Rock, Scissors, Paper\n  // opponentLastHand stores the last hand played by the opponent (you).\n  // -1 is used to signify no previous opponent hand for the very first decision.\n  $opponentLastHand = -1;\n\n  // This associative array acts as the robot's \"memory\" or strategy guide.\n  // The key is a string representing the unique combination of (robot's 3 previous hands, opponent's last hand).\n  // The value is an integer count, representing how many times this specific combination has occurred.\n  // This count, when modulo 3, determines the robot's next hand (0=Rock, 1=Scissors, 2=Paper) for that key.\n  $robotDecisionCounter = [];\n\n  // Simulate each game record to build the robot's decision-making pattern.\n  foreach ($gameRecords as $record) {\n    // Construct the unique key for the current set of parameters.\n    // e.g., \"0_1_2_-1\" or \"1_2_0_1\"\n    $currentParameterKey = implode('_', $robotHistoryWindow) . '_' . $opponentLastHand;\n\n    // Get the current count for this parameter key from the decision tracker.\n    // If the key hasn't been seen before, default to 0.\n    $countForCurrentKey = $robotDecisionCounter[$currentParameterKey] ?? 0;\n\n    // Increment the count for this parameter key.\n    // This value will be used if this exact parameter set occurs again in the future.\n    $robotDecisionCounter[$currentParameterKey] = $countForCurrentKey + 1;\n\n    // Update the robot's history window:\n    // Remove the oldest hand and add the hand the robot actually played in this record.\n    array_shift($robotHistoryWindow);\n    array_push($robotHistoryWindow, $record['robot']);\n\n    // Update the opponent's last hand with the hand you played in this record.\n    $opponentLastHand = $record['you'];\n  }\n\n  // After simulating all historical games, predict the robot's next move.\n  // First, determine the parameters for the upcoming match.\n  $nextMatchParameterKey = implode('_', $robotHistoryWindow) . '_' . $opponentLastHand;\n\n  // Get the count associated with these parameters from the decision tracker.\n  // If this specific parameter set hasn't been seen before in the records, assume its count is 0.\n  $predictedCountForNextMatch = $robotDecisionCounter[$nextMatchParameterKey] ?? 0;\n\n  // The robot's predicted next hand is determined by (count % 3).\n  $robotPredictedNextHand = $predictedCountForNextMatch % 3;\n\n  // Determine your winning hand against the robot's predicted hand.\n  // Rock (0) beats Scissors (1)\n  // Scissors (1) beats Paper (2)\n  // Paper (2) beats Rock (0)\n  // This can be calculated using the formula: (robot_hand + 2) % 3\n  $yourWinningHand = ($robotPredictedNextHand + 2) % 3;\n\n  // Output your winning hand to stdout.\n  printf(\"%d\\n\", $yourWinningHand);\n}\n\n// The template's main function call adjusts $argc and $argv for easier access.\n// $argc will be the number of arguments excluding the script name.\n// $argv will be an array containing only the actual arguments.\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2923, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h> // For strtol\n#include <stdbool.h> // For bool type\n\n// Array of results indexed by a combination of flags\n// Index map:\n// 0 (00): neither divisible by 3 nor contains 3 -> smart\n// 1 (01): divisible by 3 only -> idiot\n// 2 (10): contains 3 only -> stupid\n// 3 (11): both divisible by 3 and contains 3 -> dumb\nconst char* results_lookup[] = {\n    \"smart\",  \n    \"idiot\",  \n    \"stupid\", \n    \"dumb\"    \n};\n\n// Check if digit 3 is present in the number\nbool contains3(int value_to_check) {\n    if (value_to_check == 0) return false; // 0 doesn't contain '3'\n    while (value_to_check > 0) {\n        if (value_to_check % 10 == 3) return true;\n        value_to_check /= 10;\n    }\n    return false;\n}\n\n// Get the result string using bitwise flags for efficiency\nconst char* get_algo_result(int num_input) {\n    int flag_divisible_by_3 = (num_input % 3 == 0) ? 1 : 0; // LSB: 1 if divisible by 3\n    int flag_contains_3 = contains3(num_input) ? 2 : 0;      // Next bit: 1 if contains 3\n\n    // Combine flags using bitwise OR to create an index (0, 1, 2, or 3)\n    int index = flag_divisible_by_3 | flag_contains_3; \n    return results_lookup[index];\n}\n\nint main(int argc, char *argv[]) {\n  // argv[0]\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u306e\u3067\u7121\u8996\u3057\u3066\u3044\u307e\u3059\n  for (int i = 1; i < argc; i++) {\n    char *end_pointer;\n    long number_value = strtol(argv[i], &end_pointer, 10);\n\n    // Validate input: non-numeric characters or empty string\n    if (*end_pointer != '\\0' || end_pointer == argv[i]) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n\n    // Validate range: 0 to 1000\n    if (number_value < 0 || number_value > 1000) {\n        printf(\"invalid\\n\");\n        continue;\n    }\n    \n    printf(\"%s\\n\", get_algo_result((int)number_value));\n  }\n  return 0;\n}"}
{"id": 2924, "language": "C++", "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <cstdlib>\nusing namespace std;\n\nstring toRoman(int n, const map<int, string>& dic){\n  string ans = \"\";\n  for(auto e = dic.rbegin(); e != dic.rend(); e++){\n    while(e->first <= n){\n      ans += e->second;\n      n -= e->first;\n    }\n  }\n  return ans;\n}\n\nint main(int argc, char *argv[])\n{\n  map<int, string> dic = {{1, \"I\"}, {5, \"V\"}, {10, \"X\"}, {50, \"L\"},{100, \"C\"}, {500, \"D\"}, {1000, \"M\"}, {4, \"IV\"}, {9, \"IX\"}, {40, \"XL\"}, {90, \"XC\"}, {400, \"CD\"}, {900, \"CM\"}};\n\n  cout << toRoman(atoi(argv[1]), dic) << endl;\n\n  return 0;\n}\n"}
{"id": 2925, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\n\npublic class UtilityClass {\n\n  private static String process(int value) {\n    if (value < 0 || value > 1000) return \"invalid\";\n    boolean mod3 = (value % 3 == 0);\n    boolean has3 = String.valueOf(value).contains(\"3\");\n    if (mod3 && has3) return \"dumb\";\n    if (mod3) return \"idiot\";\n    if (has3) return \"stupid\";\n    return \"smart\";\n  }\n\n  public static void main(String[] allArgs) {\n    for (String anArg : allArgs) {\n      Scanner argScanner = new Scanner(anArg);\n      if (argScanner.hasNextInt()) {\n        System.out.println(process(argScanner.nextInt()));\n      } else {\n        System.out.println(\"invalid\");\n      }\n      argScanner.close();\n    }\n  }\n}"}
{"id": 2926, "language": "Java", "code": "package track;\n\nimport java.util.*;\n\npublic class App {\n    static int[] board = new int[8];\n    static boolean[] usedCols = new boolean[8];\n    static boolean[] usedD1 = new boolean[15];\n    static boolean[] usedD2 = new boolean[15];\n    static boolean[] fixedRow = new boolean[8];\n    static int[][] preliminary;\n\n    static boolean rec(int r) {\n        if (r == 8) return true;\n        if (fixedRow[r]) return rec(r + 1);\n        for (int c = 0; c < 8; c++) {\n            if (usedCols[c] || usedD1[r + c] || usedD2[r - c + 7]) continue;\n            board[r] = c;\n            usedCols[c] = usedD1[r + c] = usedD2[r - c + 7] = true;\n            if (rec(r + 1)) return true;\n            usedCols[c] = usedD1[r + c] = usedD2[r - c + 7] = false;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int k = Integer.parseInt(in.nextLine());\n        preliminary = new int[k][2];\n        for (int i = 0; i < k; i++) {\n            preliminary[i][0] = in.nextInt();\n            preliminary[i][1] = in.nextInt();\n            fixedRow[preliminary[i][0]] = true;\n            board[preliminary[i][0]] = preliminary[i][1];\n            usedCols[preliminary[i][1]] = true;\n            usedD1[preliminary[i][0] + preliminary[i][1]] = true;\n            usedD2[preliminary[i][0] - preliminary[i][1] + 7] = true;\n        }\n        rec(0);\n        for (int i = 0; i < 8; i++) {\n            char[] line = new char[8];\n            Arrays.fill(line, '.');\n            line[board[i]] = 'Q';\n            System.out.println(new String(line));\n        }\n    }\n}"}
{"id": 2927, "language": "Python3", "code": "\n\nif __name__ == '__main__':\n    print(1)\n"}
{"id": 2928, "language": "Python3", "code": "import sys\nimport os\nimport itertools\nimport fileinput\n\nqueen=[]\nfor line in sys.stdin:\n    line=line.replace('\\n','')\n    queen.append(line)\n\nq = queen[1:]\nold_q=[]\ntate = list(range(8))\nyoko = list(range(8))\nfor i in range(len(q)):\n  y,x=q[i].split()\n  old_q.append((int(y),int(x)))\nfor m, n  in old_q:\n  tate.remove(m)\n  yoko.remove(n)\nl = list(itertools.permutations(yoko))\nfor i in range(len(l)):\n  l2 = l[i]\n  new_q = old_q.copy()\n  for i in range(8-int(queen[0])):\n    new_q.append((tate[i], l2[i]))\n  naname1 = list(map(lambda m: m[0] + m[1], new_q))\n  naname2 = list(map(lambda m: m[0] - m[1], new_q))\n\n  if len(naname1) == len(set(naname1)) and len(naname2) == len(set(naname2)):\n    result = {}\n    for a, b in new_q:\n      result[a] = '.'*(b)+'Q'+'.'*(7-b)\n    for i in range(8):\n      print(result[i])\n"}
{"id": 2929, "language": "Ruby", "code": "def main(argv)\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n\n  argv.each_index do |i|\n    v = argv[i]\n    puts convert(v)\n  end\nend\n\ndef convert str\n  result = ''\n  str.chars do |c|\n    if c =~ /\\A[a-zA-Z]\\z/\n      13.times do\n        if c == 'z'\n          c = 'a'\n        elsif c == 'Z'\n          c = 'A'\n        else\n          c.succ!\n        end\n      end\n    end\n    result << c\n  end\n  result\nend\n\nmain(ARGV)\n"}
{"id": 2930, "language": "Python3", "code": "import sys\nfrom unicodedata import east_asian_width\n\ndef main(argv):\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u5f15\u6570\u3068\u6a19\u6e96\u51fa\u529b\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n  # \u3053\u306e\u30b3\u30fc\u30c9\u306f\u597d\u304d\u306a\u3088\u3046\u306b\u7de8\u96c6\u30fb\u524a\u9664\u3057\u3066\u3082\u3089\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3002\n  # ---\n  # This is a sample code to use arguments and outputs.\n  # Edit and remove this code as you like.\n  \"\"\" Note: this is just a quick implementation\n    - The code is not optimized for performance yet.\n    - This code just pass all the tests and that's all\n    - The requirements does not state that the code should be optimized\n  based on any criteria, so I think this dirty code is just fine, right?\n  \"\"\"\n  if 0 <= len(argv) <= 1000:\n    for i, v in enumerate(argv):\n      try:\n        divisible_by_3 = int(v) % 3 == 0\n        chars = list(v)\n        if any(map(lambda char: east_asian_width(char) == 'F', chars)):\n          print('invalid')\n          continue\n        includes_3 = '3' in list(v)\n      except:\n        print('invalid')\n        continue\n\n      if divisible_by_3 and includes_3:\n        print('dumb')\n      elif divisible_by_3:\n        print('idiot')\n      elif includes_3:\n        print('stupid')\n      else:\n        print('smart')\n  else:\n    print('invalid')\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"}
{"id": 2931, "language": "Python3", "code": "import sys\n\ndef dumb_idiot_stupid_clever(x):\n    if not x.isdigit():\n        return 'invalid'\n    v = int(x)\n    if v < 0 or v > 1000:\n        return 'invalid'\n    if v % 3 == 0 and '3' in x:\n        return 'dumb'\n    elif v % 3 == 0:\n        return 'idiot'\n    elif '3' in x:\n        return 'stupid'\n    else:\n        return 'smart'\n\ndef main(argv):\n    for xx in argv:\n        print(dumb_idiot_stupid_clever(xx))\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"id": 2932, "language": "C++", "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isAllDigits(const string &str){\n    for(char c : str){\n        if(c<'0' || c>'9') return false;\n    }\n    return true;\n}\n\nint main(int argc, char *argv[]) {\n    for(int i=1; i<argc; i++){\n        string s = argv[i];\n        if(!isAllDigits(s)){\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        int num = stoi(s);\n        if(num < 0 || num > 1000){\n            cout << \"invalid\" << endl;\n            continue;\n        }\n        bool divisible3 = (num%3 == 0);\n        bool contains3 = (s.find('3') != string::npos);\n        if(divisible3 && contains3) cout << \"dumb\" << endl;\n        else if(divisible3) cout << \"idiot\" << endl;\n        else if(contains3) cout << \"stupid\" << endl;\n        else cout << \"smart\" << endl;\n    }\n    return 0;\n}"}
{"id": 2933, "language": "PHP", "code": "<?php namespace Track;\nini_set(\"memory_limit\", -1);\n\n// 8x8\u76e4\u9762\ndefine('N', 8);\n\nfunction main($argc, $argv) {\n    // \u5165\u529b\u306e\u8aad\u307f\u53d6\u308a\n    $fp = fopen('php://stdin', 'r');\n    $k = intval(trim(fgets($fp)));\n    $given = [];\n    $rowsUsed = array_fill(0, N, false);\n    $colsUsed = array_fill(0, N, false);\n    $d1Used  = array_fill(0, 2*N, false); // r+c\n    $d2Used  = array_fill(0, 2*N, false); // r-c+N\n    $queens = array_fill(0, N, -1); // queens[i]=\u5217  i=\u884c\n\n    for ($i=0; $i<$k; $i++) {\n        list($r, $c) = array_map('intval', explode(' ', trim(fgets($fp))));\n        $given[] = [$r, $c];\n        $rowsUsed[$r] = true;\n        $colsUsed[$c] = true;\n        $d1Used[$r+$c] = true;\n        $d2Used[$r-$c+N] = true;\n        $queens[$r] = $c;\n    }\n\n    function dfs($row, &$queens, &$rowsUsed, &$colsUsed, &$d1Used, &$d2Used, &$found) {\n        if ($row == N) {\n            $found = true;\n            return true;\n        }\n        if ($rowsUsed[$row]) {\n            // \u65e2\u306b\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\n            return dfs($row+1, $queens, $rowsUsed, $colsUsed, $d1Used, $d2Used, $found);\n        }\n        for ($col = 0; $col < N; $col++) {\n            if ($colsUsed[$col] || $d1Used[$row+$col] || $d2Used[$row-$col+N]) continue;\n            // \u914d\u7f6e\u53ef\u80fd\n            $queens[$row] = $col;\n            $colsUsed[$col] = true;\n            $d1Used[$row+$col] = true;\n            $d2Used[$row-$col+N] = true;\n\n            if (dfs($row+1, $queens, $rowsUsed, $colsUsed, $d1Used, $d2Used, $found)) {\n                return true;\n            }\n            // \u623b\u3059\n            $queens[$row] = -1;\n            $colsUsed[$col] = false;\n            $d1Used[$row+$col] = false;\n            $d2Used[$row-$col+N] = false;\n        }\n        return false;\n    }\n\n    $found = false;\n    dfs(0, $queens, $rowsUsed, $colsUsed, $d1Used, $d2Used, $found);\n\n    // \u76e4\u9762\u306e\u51fa\u529b\n    for ($i=0; $i<N; $i++) {\n        $line = \"\";\n        for ($j=0; $j<N; $j++) {\n            if ($queens[$i] === $j) $line .= \"Q\";\n            else $line .= \".\";\n        }\n        echo $line . \"\\n\";\n    }\n}\n\nmain($argc - 1, array_slice($argv, 1));"}
{"id": 2934, "language": "Java", "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport com.google.gson.*;\n\npublic class RPSAnalyzer {\n\n  static class Data {\n    int robot;\n    int you;\n  }\n\n  public static void main(String[] args) throws Exception {\n    String input = new String(Files.readAllBytes(Paths.get(args[0])));\n    Data[] arr = new Gson().fromJson(input, Data[].class);\n\n    int n = arr.length;\n    int r3 = n >=3 ? arr[n-3].robot : 0;\n    int r2 = n >=2 ? arr[n-2].robot : 1;\n    int r1 = n >=1 ? arr[n-1].robot : 2;\n    int yLast = n >=1 ? arr[n-1].you : 0;\n\n    String k = r3 + \",\" + r2 + \",\" + r1 + \",\" + yLast;\n    HashMap<String, Integer> map = new HashMap<>();\n\n    for (int i = 3; i < n; i++) {\n      String key = arr[i-3].robot + \",\" + arr[i-2].robot + \",\" + arr[i-1].robot + \",\" + arr[i-1].you;\n      int c = map.getOrDefault(key, 0);\n      map.put(key, (c + 1) % 3);\n    }\n\n    System.out.println(map.getOrDefault(k, 0));\n  }\n}"}
{"id": 2935, "language": "Java", "code": "package track;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class App {\n  // This solution is a direct implementation of backtracking for 8 Queens,\n  // handling pre-placed queens by checking if the current row already has a queen.\n\n  private static final int SIZE_OF_BOARD = 8;\n  private static char[][] boardMatrix;\n  private static boolean[] colsOccupied;\n  private static boolean[] diagonals1Occupied; // r - c + offset\n  private static boolean[] diagonals2Occupied; // r + c\n  private static boolean successFlag; // Flag to stop after finding one solution\n\n  /**\n   * Helper function to place a queen and update status.\n   * @param r Row index.\n   * @param c Column index.\n   */\n  private static void placeQueenAndUpdateStatus(int r, int c) {\n    boardMatrix[r][c] = 'Q';\n    colsOccupied[c] = true;\n    diagonals1Occupied[r - c + SIZE_OF_BOARD - 1] = true;\n    diagonals2Occupied[r + c] = true;\n  }\n\n  /**\n   * Helper function to remove a queen and revert status.\n   * @param r Row index.\n   * @param c Column index.\n   */\n  private static void removeQueenAndRevertStatus(int r, int c) {\n    boardMatrix[r][c] = '.';\n    colsOccupied[c] = false;\n    diagonals1Occupied[r - c + SIZE_OF_BOARD - 1] = false;\n    diagonals2Occupied[r + c] = false;\n  }\n\n  /**\n   * Recursive solver function for the N-Queens problem.\n   * @param currentRow The current row to attempt placing a queen.\n   */\n  public static void recursiveSolver(int currentRow) {\n    if (successFlag) {\n      return; // Already found the unique solution\n    }\n\n    if (currentRow == SIZE_OF_BOARD) { // Base case: All queens placed successfully\n      successFlag = true;\n      for (int i = 0; i < SIZE_OF_BOARD; i++) {\n        System.out.println(new String(boardMatrix[i]));\n      }\n      return;\n    }\n\n    // Check if a queen is already placed in this row (from initial input)\n    boolean rowHasPrePlaced = false;\n    for (int c = 0; c < SIZE_OF_BOARD; c++) {\n      if (boardMatrix[currentRow][c] == 'Q') {\n        rowHasPrePlaced = true;\n        break;\n      }\n    }\n\n    if (rowHasPrePlaced) {\n      recursiveSolver(currentRow + 1); // If pre-placed, just move to next row\n      return;\n    }\n\n    // Try placing a queen in each column of the current row\n    for (int currentC = 0; currentC < SIZE_OF_BOARD; currentC++) {\n      if (!colsOccupied[currentC] && !diagonals1Occupied[currentRow - currentC + SIZE_OF_BOARD - 1] && !diagonals2Occupied[currentRow + currentC]) {\n        placeQueenAndUpdateStatus(currentRow, currentC); // Place\n        recursiveSolver(currentRow + 1);                // Recurse\n\n        if (successFlag) {\n          return; // Stop propagating if solution found\n        }\n\n        removeQueenAndRevertStatus(currentRow, currentC); // Backtrack\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    Scanner stdin = new Scanner(System.in);\n    int kQueens = stdin.nextInt();\n\n    // Initialize board and tracking arrays\n    boardMatrix = new char[SIZE_OF_BOARD][SIZE_OF_BOARD];\n    for (int i = 0; i < SIZE_OF_BOARD; i++) {\n      Arrays.fill(boardMatrix[i], '.');\n    }\n    colsOccupied = new boolean[SIZE_OF_BOARD];\n    diagonals1Occupied = new boolean[2 * SIZE_OF_BOARD - 1];\n    diagonals2Occupied = new boolean[2 * SIZE_OF_BOARD - 1];\n    successFlag = false;\n\n    // Place the initially provided queens\n    for (int i = 0; i < kQueens; i++) {\n      int row = stdin.nextInt();\n      int col = stdin.nextInt();\n      placeQueenAndUpdateStatus(row, col);\n    }\n    stdin.close();\n\n    // Start the search from the first row\n    recursiveSolver(0);\n  }\n}"}
{"id": 2936, "language": "C", "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar buffer[100001];\n\n// JSON\u51fa\u529b\u7528\u306b\u6587\u5b57\u306e\u51fa\u73fe\u56de\u6570\u3092\u6c42\u3081\u308b\nvoid count_func(const char *input_path, const char *output_path) {\n    FILE *fp = fopen(input_path, \"r\");\n    if (!fp) return;\n    int cnts[256] = {0};\n    int c;\n    while ((c = fgetc(fp)) != EOF) {\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n            cnts[c]++;\n        }\n    }\n    fclose(fp);\n\n    FILE *out = fopen(output_path, \"w\");\n    if (!out) return;\n\n    fprintf(out, \"{\\n\");\n    int first = 1;\n    for (int ch = 0; ch < 256; ch++) {\n        if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || ch == ' ') {\n            if (!first) fprintf(out, \",\\n\");\n            fprintf(out, \"  \\\"%c\\\": %d\", ch, cnts[ch]);\n            first = 0;\n        }\n    }\n    fprintf(out, \"\\n}\\n\");\n    fclose(out);\n}\n\n// \u7a7a\u767d\u304c\u7f6e\u63db\u3055\u308c\u305f\u6587\u5b57\u3092\u7279\u5b9a\u3059\u308b\nchar detect_space_char(const char *input_path) {\n    FILE *fp = fopen(input_path, \"r\");\n    if (!fp) return 0;\n    int cnts[256] = {0};\n    int c;\n    while ((c = fgetc(fp)) != EOF) {\n        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {\n            cnts[c]++;\n        }\n    }\n    fclose(fp);\n\n    // a-z\u306e\u5c0f\u6587\u5b57\u306e\u307f\u7a7a\u767d\u3068\u5165\u308c\u66ff\u308f\u3063\u305f\u53ef\u80fd\u6027\u3042\u308a\n    char candidate = 0;\n    double best_diff = 1000.0;\n    // \u5e73\u5747\u5358\u8a9e\u95774.5\u306b\u8fd1\u3044\u306e\u3092\u9078\u3076\n    for (char ch = 'a'; ch <= 'z'; ch++) {\n        if (cnts[(int)ch] == 0) continue;\n\n        FILE *fp2 = fopen(input_path, \"r\");\n        if (!fp2) return 0;\n\n        int word_len = 0;\n        int word_count = 0;\n        int in_word = 0;\n        int c2;\n        double total_len = 0;\n        while ((c2 = fgetc(fp2)) != EOF) {\n            char cc = (char)c2;\n            if (cc == ch) cc = ' ';\n            else if (cc == ' ') cc = ch;\n\n            if (cc >= 'A' && cc <= 'Z') cc += 32;\n            if (cc >= 'a' && cc <= 'z') {\n                word_len++;\n                in_word = 1;\n            } else {\n                if (in_word) {\n                    word_count++;\n                    total_len += word_len;\n                    word_len = 0;\n                    in_word = 0;\n                }\n            }\n        }\n        if (in_word) {\n            word_count++;\n            total_len += word_len;\n        }\n        fclose(fp2);\n        if (word_count == 0) continue;\n        double avg = total_len / word_count;\n        double diff = avg > 4.5 ? avg - 4.5 : 4.5 - avg;\n        if (diff < best_diff) {\n            best_diff = diff;\n            candidate = ch;\n        }\n    }\n    return candidate;\n}\n\nvoid space_func(const char *input_path, const char *output_path) {\n    char ch = detect_space_char(input_path);\n    FILE *out = fopen(output_path, \"w\");\n    if (!out) return;\n    fprintf(out, \"{\\n  \\\"char\\\": \\\"%c\\\"\\n}\\n\", ch);\n    fclose(out);\n}\n\n// \u5fa9\u53f7\u95a2\u6570\nvoid decrypt_func(const char *input_path, const char *output_path) {\n    FILE *fp = fopen(input_path, \"r\");\n    if (!fp) return;\n    int i = 0;\n    int c;\n    while ((c = fgetc(fp)) != EOF && i < 100000) {\n        buffer[i++] = (char)c;\n    }\n    buffer[i] = '\\0';\n    fclose(fp);\n\n    // \u7a7a\u767d\u6587\u5b57\u3068\u5165\u308c\u66ff\u3048\u3089\u308c\u305f\u6587\u5b57\u3092\u8abf\u67fb\n    char sp = detect_space_char(input_path);\n    int len = i;\n\n    // \u7a7a\u767d\u3068\u7f6e\u63db\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u308b\n    for (int j = 0; j < len; j++) {\n        if (buffer[j] == sp) buffer[j] = ' ';\n        else if (buffer[j] == ' ') buffer[j] = sp;\n    }\n\n    // \u30b7\u30d5\u30c8\u91cf\u63a8\u5b9a\uff1a\u983b\u5ea6\u6700\u5927\u6587\u5b57\u3068'e'\u306e\u5dee\n    int alpha_count[26] = {0};\n    for (int j = 0; j < len; j++) {\n        char ch = buffer[j];\n        if (ch >= 'A' && ch <= 'Z') ch += 32;\n        if (ch >= 'a' && ch <= 'z') alpha_count[ch - 'a']++;\n    }\n    int max_i = 0;\n    int max_v = alpha_count[0];\n    for (int j = 1; j < 26; j++) {\n        if (alpha_count[j] > max_v) {\n            max_v = alpha_count[j];\n            max_i = j;\n        }\n    }\n    int shift = max_i - ('e' - 'a');\n    if (shift < 0) shift += 26;\n\n    FILE *out = fopen(output_path, \"w\");\n    if (!out) return;\n    for (int j = 0; j < len; j++) {\n        char ch = buffer[j];\n        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {\n            int base = (ch >= 'a') ? 'a' : 'A';\n            char dec = (ch - base - shift + 26) % 26 + base;\n            fputc(dec, out);\n        } else {\n            fputc(ch, out);\n        }\n    }\n    fclose(out);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) return 1;\n\n    if (strcmp(argv[1], \"count\") == 0) {\n        count_func(argv[2], argv[3]);\n    } else if (strcmp(argv[1], \"space\") == 0) {\n        space_func(argv[2], argv[3]);\n    } else if (strcmp(argv[1], \"decrypt\") == 0) {\n        decrypt_func(argv[2], argv[3]);\n    } else {\n        return 1;\n    }\n    return 0;\n}"}
{"id": 2937, "language": "Python3", "code": "import sys\n\ndef get_idiot_level(input_str):\n    if not input_str.isdigit():\n        return \"invalid\"\n    \n    num_val = int(input_str)\n    \n    if not (0 <= num_val <= 1000):\n        return \"invalid\"\n\n    is_div_by_3 = (num_val % 3 == 0)\n    has_digit_3 = ('3' in input_str)\n\n    if is_div_by_3 and has_digit_3: return \"dumb\"\n    if is_div_by_3: return \"idiot\"\n    if has_digit_3: return \"stupid\"\n    return \"smart\"\n\ndef execute_script(cli_args):\n    for an_arg in cli_args:\n        print(get_idiot_level(an_arg))\n\nif __name__ == '__main__':\n    execute_script(sys.argv[1:])"}
